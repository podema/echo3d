// Generated code for Python source for module 'numpy.f2py.rules'
// created by Nuitka version 0.5.5.3

// This code is in part copyright 2014 Kay Hayen.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "nuitka/prelude.hpp"

#include "__helpers.hpp"

// The _module_numpy$f2py$rules is a Python object pointer of module type.

// Note: For full compatability with CPython, every module variable access
// needs to go through it except for cases where the module cannot possibly
// have changed in the mean time.

PyObject *module_numpy$f2py$rules;
PyDictObject *moduledict_numpy$f2py$rules;

// The module constants used
extern PyObject *const_int_0;
extern PyObject *const_int_pos_1;
extern PyObject *const_str_chr_9;
extern PyObject *const_str_empty;
extern PyObject *const_str_space;
extern PyObject *const_dict_empty;
extern PyObject *const_int_pos_10;
extern PyObject *const_int_pos_66;
extern PyObject *const_int_pos_72;
extern PyObject *const_str_chr_42;
extern PyObject *const_str_chr_44;
extern PyObject *const_str_chr_124;
extern PyObject *const_str_newline;
extern PyObject *const_str_plain_O;
extern PyObject *const_str_plain__;
extern PyObject *const_str_plain_a;
extern PyObject *const_str_plain_b;
extern PyObject *const_str_plain_c;
extern PyObject *const_str_plain_f;
extern PyObject *const_str_plain_i;
extern PyObject *const_str_plain_k;
extern PyObject *const_str_plain_l;
extern PyObject *const_str_plain_m;
extern PyObject *const_str_plain_n;
extern PyObject *const_str_plain_r;
extern PyObject *const_str_plain_u;
extern PyObject *const_str_plain_w;
extern PyObject *const_tuple_empty;
extern PyObject *const_str_plain_ar;
extern PyObject *const_str_plain_bi;
static PyObject *const_str_plain_cr;
extern PyObject *const_str_plain_fn;
extern PyObject *const_str_plain_mr;
extern PyObject *const_str_plain_nb;
extern PyObject *const_str_plain_os;
extern PyObject *const_str_plain_rd;
extern PyObject *const_str_plain_um;
static PyObject *const_str_plain_wn;
extern PyObject *const_str_plain_api;
static PyObject *const_str_plain_cfs;
extern PyObject *const_str_plain_doc;
static PyObject *const_str_plain_ltx;
static PyObject *const_str_plain_nb1;
static PyObject *const_str_plain_nth;
extern PyObject *const_str_plain_ret;
extern PyObject *const_str_plain_str;
extern PyObject *const_str_plain_sys;
extern PyObject *const_str_plain_use;
extern PyObject *const_str_plain_var;
extern PyObject *const_str_plain_vrd;
extern PyObject *const_str_plain_SWAP;
extern PyObject *const_str_plain_args;
extern PyObject *const_str_plain_body;
extern PyObject *const_str_plain_code;
extern PyObject *const_str_plain_copy;
extern PyObject *const_str_plain_csrc;
extern PyObject *const_str_plain_decl;
extern PyObject *const_str_plain_docs;
static PyObject *const_str_plain_fsrc;
extern PyObject *const_str_plain_join;
extern PyObject *const_str_plain_keys;
extern PyObject *const_str_plain_l_or;
extern PyObject *const_str_plain_list;
extern PyObject *const_str_plain_name;
extern PyObject *const_str_plain_need;
static PyObject *const_str_plain_nthk;
extern PyObject *const_str_plain_path;
extern PyObject *const_str_plain_rout;
extern PyObject *const_str_plain_show;
static PyObject *const_str_plain_stnd;
extern PyObject *const_str_plain_time;
extern PyObject *const_str_plain_vars;
extern PyObject *const_str_plain_void;
extern PyObject *const_str_plain_wrap;
extern PyObject *const_str_plain_block;
extern PyObject *const_str_plain_check;
extern PyObject *const_str_plain_close;
extern PyObject *const_str_plain_entry;
extern PyObject *const_str_plain_items;
extern PyObject *const_str_plain_l_and;
extern PyObject *const_str_plain_l_not;
extern PyObject *const_str_plain_latex;
extern PyObject *const_str_plain_lines;
extern PyObject *const_str_plain_needs;
extern PyObject *const_str_plain_rules;
extern PyObject *const_str_plain_split;
extern PyObject *const_str_plain_write;
extern PyObject *const_str_plain_F_FUNC;
extern PyObject *const_str_plain_MINMAX;
extern PyObject *const_str_plain__break;
extern PyObject *const_str_plain__check;
static PyObject *const_str_plain__rules;
extern PyObject *const_str_plain_append;
extern PyObject *const_str_plain_assubr;
extern PyObject *const_str_plain_cfuncs;
extern PyObject *const_str_plain_depend;
extern PyObject *const_str_plain_hidden;
extern PyObject *const_str_plain_kwlist;
extern PyObject *const_str_plain_method;
extern PyObject *const_str_plain_pprint;
static PyObject *const_str_plain_pyname;
extern PyObject *const_str_plain_return;
extern PyObject *const_str_plain_stderr;
extern PyObject *const_str_plain_stdout;
extern PyObject *const_str_plain_string;
extern PyObject *const_str_plain___doc__;
extern PyObject *const_str_plain__depend;
extern PyObject *const_str_plain_apiname;
static PyObject *const_str_plain_asctime;
extern PyObject *const_str_plain_auxvars;
extern PyObject *const_str_plain_coutput;
extern PyObject *const_str_plain_depargs;
extern PyObject *const_str_plain_docsign;
extern PyObject *const_str_plain_errmess;
extern PyObject *const_str_plain_forcomb;
extern PyObject *const_str_plain_freemem;
extern PyObject *const_str_plain_hasnote;
extern PyObject *const_str_plain_isarray;
static PyObject *const_str_plain_keys_xa;
static PyObject *const_str_plain_modnote;
static PyObject *const_str_plain_nb_list;
extern PyObject *const_str_plain_optargs;
extern PyObject *const_str_plain_options;
extern PyObject *const_str_plain_outmess;
extern PyObject *const_str_plain_replace;
extern PyObject *const_str_plain_restdoc;
extern PyObject *const_str_plain_reverse;
extern PyObject *const_str_plain_rformat;
extern PyObject *const_str_plain_savevrd;
static PyObject *const_str_plain_sepdict;
static PyObject *const_str_plain_topyarr;
extern PyObject *const_str_plain_version;
extern PyObject *const_str_plain___file__;
extern PyObject *const_str_plain_auxfuncs;
extern PyObject *const_str_plain_buildapi;
extern PyObject *const_str_plain_deepcopy;
extern PyObject *const_str_plain_division;
extern PyObject *const_str_plain_docshort;
static PyObject *const_str_plain_functype;
extern PyObject *const_str_plain_gentitle;
extern PyObject *const_str_plain_getargs2;
extern PyObject *const_str_plain_includes;
extern PyObject *const_str_plain_isscalar;
extern PyObject *const_str_plain_isstring;
static PyObject *const_str_plain_kwlistxa;
extern PyObject *const_str_plain_latexdoc;
extern PyObject *const_str_plain_routnote;
extern PyObject *const_str_plain_sign2map;
extern PyObject *const_str_plain_typedefs;
static PyObject *const_str_plain_unsigned;
static PyObject *const_str_plain_xaformat;
static PyObject *const_str_plain_arg_rules;
static PyObject *const_str_plain_argformat;
static PyObject *const_str_plain_args_capi;
static PyObject *const_str_plain_aux_rules;
extern PyObject *const_str_plain_buildpath;
extern PyObject *const_str_plain_callbacks;
extern PyObject *const_str_plain_capi_maps;
extern PyObject *const_str_plain_cppmacros;
extern PyObject *const_str_plain_debugcapi;
extern PyObject *const_str_plain_docreturn;
static PyObject *const_str_plain_docsignxa;
extern PyObject *const_str_plain_docstrcbs;
extern PyObject *const_str_plain_docstropt;
extern PyObject *const_str_plain_docstrout;
extern PyObject *const_str_plain_docstrreq;
extern PyObject *const_str_plain_dorestdoc;
extern PyObject *const_str_plain_frompyobj;
extern PyObject *const_str_plain_func2subr;
extern PyObject *const_str_plain_get_needs;
extern PyObject *const_str_plain_includes0;
extern PyObject *const_str_plain_interface;
extern PyObject *const_str_plain_iscomplex;
extern PyObject *const_str_plain_islogical;
static PyObject *const_str_plain_keyformat;
static PyObject *const_str_plain_keys_capi;
static PyObject *const_str_plain_kwlistopt;
static PyObject *const_str_plain_localtime;
extern PyObject *const_str_plain_long_long;
static PyObject *const_str_plain_mod_rules;
extern PyObject *const_str_plain_pyobjfrom;
static PyObject *const_str_plain_setjmpbuf;
extern PyObject *const_str_plain_use_rules;
extern PyObject *const_str_plain_CFUNCSMESS;
extern PyObject *const_str_plain_CHECKARRAY;
extern PyObject *const_str_plain_STRINGFREE;
extern PyObject *const_str_plain___future__;
extern PyObject *const_str_plain_applyrules;
extern PyObject *const_str_plain_buildhooks;
extern PyObject *const_str_plain_dictappend;
extern PyObject *const_str_plain_docsignopt;
extern PyObject *const_str_plain_dolatexdoc;
extern PyObject *const_str_plain_interfaced;
extern PyObject *const_str_plain_isexternal;
extern PyObject *const_str_plain_isfunction;
extern PyObject *const_str_plain_isintent_c;
extern PyObject *const_str_plain_isoptional;
extern PyObject *const_str_plain_isrequired;
extern PyObject *const_str_plain_isunsigned;
static PyObject *const_str_plain_modulebody;
extern PyObject *const_str_plain_modulename;
static PyObject *const_str_plain_rout_rules;
extern PyObject *const_str_plain_shortlatex;
extern PyObject *const_str_plain_stripcomma;
extern PyObject *const_str_plain_CHECKSCALAR;
extern PyObject *const_str_plain_CHECKSTRING;
extern PyObject *const_str_plain___version__;
extern PyObject *const_str_plain_buildmodule;
static PyObject *const_str_plain_callfortran;
static PyObject *const_str_plain_check_rules;
extern PyObject *const_str_plain_commonhooks;
extern PyObject *const_str_plain_docstrsigns;
extern PyObject *const_str_plain_f90modhooks;
extern PyObject *const_str_plain_isint1array;
extern PyObject *const_str_plain_islong_long;
extern PyObject *const_str_plain_long_double;
extern PyObject *const_str_plain_modsign2map;
static PyObject *const_str_plain_need_cfuncs;
static PyObject *const_str_plain_routine_def;
extern PyObject *const_str_plain_CHECKGENERIC;
extern PyObject *const_str_plain_buildusevars;
extern PyObject *const_str_plain_common_rules;
static PyObject *const_str_plain_defmod_rules;
extern PyObject *const_str_plain_docsignature;
static PyObject *const_str_plain_docsignshort;
extern PyObject *const_str_plain_f2py_version;
extern PyObject *const_str_plain_f90mod_rules;
static PyObject *const_str_plain_funcwrappers;
extern PyObject *const_str_plain_hasexternals;
extern PyObject *const_str_plain_hasinitvalue;
extern PyObject *const_str_plain_isintent_aux;
extern PyObject *const_str_plain_isintent_out;
extern PyObject *const_str_plain_issubroutine;
extern PyObject *const_str_plain_isthreadsafe;
static PyObject *const_str_plain_module_rules;
static PyObject *const_str_plain_returnformat;
extern PyObject *const_str_plain_routine_defs;
extern PyObject *const_str_plain_routsign2map;
extern PyObject *const_str_plain_userincludes;
extern PyObject *const_tuple_str_chr_42_tuple;
extern PyObject *const_str_plain_F_WRAPPEDFUNC;
static PyObject *const_str_plain_funcwrappers2;
extern PyObject *const_str_plain_hasresultnote;
extern PyObject *const_str_plain_isintent_copy;
extern PyObject *const_str_plain_isintent_hide;
extern PyObject *const_str_plain_islong_double;
extern PyObject *const_str_plain_isstringarray;
static PyObject *const_str_plain_routine_rules;
extern PyObject *const_str_plain_separatorsfor;
extern PyObject *const_str_plain_unsigned_char;
extern PyObject *const_tuple_int_0_int_0_tuple;
static PyObject *const_str_plain_closepyobjfrom;
static PyObject *const_str_plain_docsignxashort;
extern PyObject *const_str_plain_externroutines;
extern PyObject *const_str_plain_iscomplexarray;
extern PyObject *const_str_plain_isdummyroutine;
extern PyObject *const_str_plain_isintent_inout;
extern PyObject *const_str_plain_islong_complex;
extern PyObject *const_str_plain_latexdocstrcbs;
extern PyObject *const_str_plain_latexdocstropt;
extern PyObject *const_str_plain_latexdocstrout;
extern PyObject *const_str_plain_latexdocstrreq;
extern PyObject *const_str_plain_print_function;
static PyObject *const_str_plain_routdebugenter;
static PyObject *const_str_plain_routdebugleave;
extern PyObject *const_str_plain_unsigned_short;
extern PyObject *const_str_plain_absolute_import;
static PyObject *const_str_plain_docsignoptshort;
extern PyObject *const_str_plain_initcommonhooks;
extern PyObject *const_str_plain_initf90modhooks;
extern PyObject *const_str_plain_isfunction_wrap;
extern PyObject *const_str_plain_ismoduleroutine;
extern PyObject *const_str_plain_isunsigned_char;
static PyObject *const_str_plain_cleanupfrompyobj;
extern PyObject *const_str_plain_hascallstatement;
static PyObject *const_str_plain_initf2pywraphook;
extern PyObject *const_str_plain_isarrayofstrings;
extern PyObject *const_str_plain_isintent_nothide;
extern PyObject *const_str_plain_isstringfunction;
extern PyObject *const_str_plain_isunsigned_short;
extern PyObject *const_str_plain_latexdocstrsigns;
static PyObject *const_str_plain_routdebugfailure;
extern PyObject *const_tuple_str_plain_rout_tuple;
static PyObject *const_str_plain_callcompaqfortran;
static PyObject *const_str_plain_callfortranappend;
extern PyObject *const_str_plain_create_cb_arglist;
static PyObject *const_str_plain_docsignatureshort;
static PyObject *const_str_plain_initf2pywraphooks;
extern PyObject *const_str_plain_iscomplexfunction;
extern PyObject *const_str_plain_isintent_callback;
extern PyObject *const_str_plain_issubroutine_wrap;
static PyObject *const_str_plain_typedef_need_dict;
static PyObject *const_str_plain_callfortranroutine;
static PyObject *const_str_plain_declfortranroutine;
extern PyObject *const_str_plain_isintent_overwrite;
extern PyObject *const_str_plain_typedefs_generated;
static PyObject *const_str_plain_unsigned_long_long;
extern PyObject *const_tuple_str_plain_cfuncs_tuple;
extern PyObject *const_str_plain_complex_long_double;
extern PyObject *const_str_plain_f2py_wrapper_output;
extern PyObject *const_str_plain_islong_longfunction;
extern PyObject *const_str_plain_isunsigned_chararray;
extern PyObject *const_str_plain_isunsigned_long_long;
extern PyObject *const_str_plain_islong_doublefunction;
extern PyObject *const_str_plain_isunsigned_shortarray;
extern PyObject *const_tuple_str_plain_capi_maps_tuple;
extern PyObject *const_tuple_str_plain_func2subr_tuple;
static PyObject *const_tuple_str_plain_use_rules_tuple;
extern PyObject *const_str_plain_iscomplexfunction_warn;
static PyObject *const_str_plain_latexdocsignatureshort;
extern PyObject *const_str_plain_issigned_long_longarray;
extern PyObject *const_tuple_str_plain___version___tuple;
static PyObject *const_tuple_str_plain_common_rules_tuple;
extern PyObject *const_tuple_str_plain_f90mod_rules_tuple;
extern PyObject *const_str_plain_isunsigned_long_longarray;
static PyObject *const_tuple_str_plain_m_str_plain_um_tuple;
static PyObject *const_dict_055a5e2e8d3048ab4922e8d2791b57c7;
static PyObject *const_dict_6c662d5dfca8638087abab46e2002cca;
static PyObject *const_dict_c3b8e398c8954454fba85f0a68a2b3f2;
static PyObject *const_dict_f901ef362e29b410a7de5c49b0849102;
static PyObject *const_list_0725c8ade74f8f28b621ba88c880b6bd_list;
static PyObject *const_list_0a418c59c89f9fccd0e4ae0f11838976_list;
static PyObject *const_list_10b104c3768849b37f92dfc64a682f14_list;
static PyObject *const_list_2a1cb5f1b6ad96684950fc2bb3e18869_list;
static PyObject *const_list_32f32ffbbd5d0469a259f67cd7bedf23_list;
static PyObject *const_list_53e499b918b44aac469e052ee883b608_list;
static PyObject *const_list_63cf9afba8d0564dfc4c1155a17b0c8c_list;
static PyObject *const_list_83502bc928309bee706fd67dc708d8b5_list;
static PyObject *const_list_917626a5cab86448639269d43350330f_list;
static PyObject *const_list_9af870e8ed9f6c337cdc0c36a763a6f2_list;
static PyObject *const_list_a6fb55f787096d197a68d518259f030c_list;
static PyObject *const_list_d9758b2de662a4320da70ff340579452_list;
static PyObject *const_str_digest_003412ca7c035dda44b06c662ca81aa5;
extern PyObject *const_str_digest_00712398ca7c9a987043e29bb7424f6c;
static PyObject *const_str_digest_007d50f5babd3a75f4137e740257a41e;
static PyObject *const_str_digest_0250bf479570e6e650f305dc350be4a1;
extern PyObject *const_str_digest_034683ceccce831b3c4724622e7c61e0;
static PyObject *const_str_digest_07686c6fa7631f753789a51e91f8665c;
static PyObject *const_str_digest_0801662fed55e93695b42ad17d40560e;
static PyObject *const_str_digest_0805118bce28b0db2adfe1c873c5fd07;
static PyObject *const_str_digest_098be4f85b6147b2a568faf0c3a53940;
static PyObject *const_str_digest_09de792d93cc23e6cd4f80b6fa458fd3;
static PyObject *const_str_digest_0b2ee4e163c7715c3637d39da00ca3d5;
static PyObject *const_str_digest_0c93bbaa020061df40a3e0e1970c67b3;
static PyObject *const_str_digest_0d59acae85d063e3f672d8da6daa0a85;
static PyObject *const_str_digest_0e629208d1577c2a84c6eb9e890eff33;
static PyObject *const_str_digest_0e6d8ecfca61c030ce40551480a7c4c8;
static PyObject *const_str_digest_0f31941b1b984d687d1832a3265bb0bd;
static PyObject *const_str_digest_103f7cae04ee1c2adcfe2b30f8ef4e52;
static PyObject *const_str_digest_1177440af11d75a5bc642deb1185d476;
static PyObject *const_str_digest_11a75f7b161c1a48991f1986e1eab885;
static PyObject *const_str_digest_135742a92d97efe0fd436435c081798f;
static PyObject *const_str_digest_140b8c5286854407f508a0dae9b51bd0;
static PyObject *const_str_digest_1422ad36fc74e5255a7c794563fb3843;
static PyObject *const_str_digest_1480e469b585979a7f4d96343815e357;
static PyObject *const_str_digest_152c5ee2b2e7dc93bd9f827427a9f43c;
static PyObject *const_str_digest_15904c114d20d74a77febfc4dfb77b85;
static PyObject *const_str_digest_1632bec27e568661b517322c67a7aa13;
static PyObject *const_str_digest_163dc3507d0a117b14a81f27113a31a1;
static PyObject *const_str_digest_1678f341d6d4b9988981a9652fd0aaf7;
static PyObject *const_str_digest_16cee986fdf2b02b5fedad397daf617e;
static PyObject *const_str_digest_16d4ea9ba4d55fcaab93d0516b4d9157;
static PyObject *const_str_digest_17650eb00d01333f79fd06fb9c61cd9d;
static PyObject *const_str_digest_18429b2363d61bb45e6f19ee193369c0;
static PyObject *const_str_digest_18c508c400e195b421fc11655c7a57b2;
static PyObject *const_str_digest_18f58632137400bb4c14c923f5d57bbb;
static PyObject *const_str_digest_1957922661d0ebb79028a2cdcfc623e3;
static PyObject *const_str_digest_196e1deb2a177ed3e9d78c2c4c6ca852;
static PyObject *const_str_digest_19c7030524451d92c931f37fca9681ea;
static PyObject *const_str_digest_1d098d8f36c3c8a6d6ad4afd172177b1;
static PyObject *const_str_digest_1e609e98e6387a0eff2e0582a23e9403;
static PyObject *const_str_digest_2024ee09e6b745cfd788ae7f21f8ccb6;
static PyObject *const_str_digest_20c9fc8f6f5e6e56dc857edd08f619c0;
extern PyObject *const_str_digest_21848c21ee715afb46bb5dff54f12759;
static PyObject *const_str_digest_231cb7effd90b3fd8e0b9b743f769003;
extern PyObject *const_str_digest_23b58def11b45727d3351702515f86af;
extern PyObject *const_str_digest_2440d16610baa62c4946b481a40982f8;
static PyObject *const_str_digest_26528d4a51309a8f8ddb2c87bfb4d547;
static PyObject *const_str_digest_26c16d68737087d7dec283685f968bf7;
static PyObject *const_str_digest_2722011c07957ec4178692a6adc697b7;
static PyObject *const_str_digest_27b50ea3e5fe50c3f9d4789d13716081;
static PyObject *const_str_digest_2861f69496685cab3ecd9e5bb974c70d;
static PyObject *const_str_digest_2936888493c6440f01314e5ae776f3e1;
static PyObject *const_str_digest_2bfab3a3bf25bd01b8093743c94c68c6;
static PyObject *const_str_digest_2d092b06961d63e3c95e44a4ec6fc82d;
static PyObject *const_str_digest_2dc6983da48dda8d3f9d4105993903cd;
static PyObject *const_str_digest_2f4f3f7d23ec8a68ccbc66a579aca6d2;
static PyObject *const_str_digest_2fa8b74c150f98704fd78cb5be16a2d3;
extern PyObject *const_str_digest_2fea6faaece8b13aba5205180919cad4;
extern PyObject *const_str_digest_317310e006d319ad28824cb9258c4565;
static PyObject *const_str_digest_31870eba6b1af25a3fcecd097524b3d4;
static PyObject *const_str_digest_31a9af9e11e7fa447fb19b15333890bf;
static PyObject *const_str_digest_33de85b69c6ba37a90f1de39a0387d4e;
static PyObject *const_str_digest_343d31d31f56cdef8fe89aa79cee366a;
extern PyObject *const_str_digest_352c2c361762a5fb011e95a778b8a254;
static PyObject *const_str_digest_3548fadb0ec569ebab2115c8b8df5083;
static PyObject *const_str_digest_3583a8d3606919d394ff3742ea2991a0;
static PyObject *const_str_digest_365fbbecf5f6b6e5e9fb735849d785c0;
static PyObject *const_str_digest_3661f078f2728e5304b2e950f133b5c4;
static PyObject *const_str_digest_3675f5d015dddadfe52770fb5aa734ea;
static PyObject *const_str_digest_36c45669e1ecb4a38cd16d553a9afbb9;
static PyObject *const_str_digest_3746a458488dce9d90d90525809f2b02;
static PyObject *const_str_digest_38b4dc4c4264c1437622ad072b57f931;
static PyObject *const_str_digest_38bb68b0d7d99ca5566905027683bfde;
static PyObject *const_str_digest_39eef5677102f3a55b588def25963616;
static PyObject *const_str_digest_3dc156e6a2d607058ba86c8c0498e4f7;
static PyObject *const_str_digest_3f6cd6988d5cc425c4d00868999a9c0b;
static PyObject *const_str_digest_3ff9b48b64cdbdd8b296b61508af401a;
extern PyObject *const_str_digest_40515d2f72587c8ab3dde947df85ba29;
static PyObject *const_str_digest_4085e6150841584387baceb03e192208;
static PyObject *const_str_digest_40d445ed78575617d849a4c40252e78b;
static PyObject *const_str_digest_41c2fd756c3e693448d5dfd166c13fac;
static PyObject *const_str_digest_428b1f0db6614bc681cf8230e37e4727;
static PyObject *const_str_digest_42bb9daf118d76a1fcc036f908957a47;
static PyObject *const_str_digest_42e29578af24ea901b92843c6452c69d;
static PyObject *const_str_digest_44b5e885884093b35997aaab01d17f03;
static PyObject *const_str_digest_484347358833d2d05d8fc69e7493f100;
static PyObject *const_str_digest_48cabf7d0b3bbfc91057f28eb23a1560;
static PyObject *const_str_digest_49a8237352f5f580ba1c42a1c0b4cb89;
static PyObject *const_str_digest_4aa6b2c8be599f4ff600f479e1d083f8;
static PyObject *const_str_digest_4c144e84fc3c1a12f3edf4fb3c6a1560;
static PyObject *const_str_digest_4f2deeeb57d301c95c75bb98138b8f09;
static PyObject *const_str_digest_5292336f06adab3d25d49ce1bcb754fa;
static PyObject *const_str_digest_52f3cb551798f750c7eedaa7874151b2;
static PyObject *const_str_digest_530550da2a0c86c4126b4c4a02177517;
static PyObject *const_str_digest_533c951d823b6e57c80e5d5b1a9091f9;
static PyObject *const_str_digest_53d067d98ec3a8018e265af396e4cd76;
static PyObject *const_str_digest_55456c681709cce09c41f6b5c4c09b6c;
static PyObject *const_str_digest_55f1ce80e69a2658f507e145643c067b;
static PyObject *const_str_digest_56c4578d7e79e9d1b9921f69f505bc38;
static PyObject *const_str_digest_56eb8b6c3a2e2b46a9b2615c93c4d45e;
static PyObject *const_str_digest_5739445260bb4ab7a7bde7699d67e1b0;
static PyObject *const_str_digest_57f487778749be446e3a072c5c9fc960;
static PyObject *const_str_digest_58f94749feaa6d8dcbbe3b2c21ca6f3d;
static PyObject *const_str_digest_5a3b19794c360cfa1f3fb761f0170bf4;
static PyObject *const_str_digest_5b2f1fd139d7c2fa41a3bd15052f7cc6;
static PyObject *const_str_digest_5b7e03ef8781497c848bb48ecd301016;
static PyObject *const_str_digest_5c182b7cc989dc414beab715240ecd25;
static PyObject *const_str_digest_5dd2ddd3c8c2121e0d34a95bfef37e1e;
static PyObject *const_str_digest_5e3bedeaeb5deb1039acf2ed98489637;
static PyObject *const_str_digest_6051a16e4b8002678b6d93e2ac79406a;
static PyObject *const_str_digest_617134fe87fb293497d3503a48221184;
static PyObject *const_str_digest_63b243fa195291a4bd10a9d27c0ece83;
static PyObject *const_str_digest_64c014c101de059e40ab2098f7c02568;
static PyObject *const_str_digest_681c035c971246c828024e1eb1a024c7;
static PyObject *const_str_digest_6bbbfb5feaca7cb532b036a03f1876bc;
static PyObject *const_str_digest_6c41c39826425526467cf3e430a77c15;
extern PyObject *const_str_digest_6e0991fa019a9e09495ce3818d3272df;
static PyObject *const_str_digest_6e37b3e05e8e0e3ee299fb587d62c2cb;
static PyObject *const_str_digest_6e3f60afbc56076b3a1ad2fd52e5545f;
static PyObject *const_str_digest_6e4437baab8cc015d0bec086001fc38b;
static PyObject *const_str_digest_6f20bfaa2efa212f61a92cbf6b7f4bf6;
static PyObject *const_str_digest_6f3504cf0f8ede84a5eacc957cd112c0;
static PyObject *const_str_digest_6fae23cc5869b6b96e109a8f2e78fbe4;
static PyObject *const_str_digest_71830f14f0828044f06e530273435a27;
static PyObject *const_str_digest_71deca2cdf00c9fa7cdfa5f0049113ff;
static PyObject *const_str_digest_7298c2a4c9a6e315e932bffab830fb0b;
extern PyObject *const_str_digest_73a2c45e7b0015e7c3fd1d2bb61db866;
static PyObject *const_str_digest_74327d7eb38e858582fe177e885d2475;
static PyObject *const_str_digest_76fe246148a5eb0cccb642576b728a94;
static PyObject *const_str_digest_773353192e877182884c50a8d0c0486a;
static PyObject *const_str_digest_77eeebb839755066d58a587211ae9b65;
static PyObject *const_str_digest_7a89be2ff5758619ac83558d9a101c74;
static PyObject *const_str_digest_7aedd59139d051efeaded43f5468c2c5;
static PyObject *const_str_digest_7cae831092e5e81c73cd70d0f405b790;
static PyObject *const_str_digest_8026ad1b3e6ceed21e57865344fb654f;
static PyObject *const_str_digest_80eb8b2a20911481e3962616e7e0d2fc;
static PyObject *const_str_digest_80faf1e943e593f4ae75792d5729a4c3;
extern PyObject *const_str_digest_81dd5881d0e387c3fbe39fef2c0ad42a;
static PyObject *const_str_digest_859fc68497e02be265b67eeb17699a77;
static PyObject *const_str_digest_85a7ffd3d8a917c64381c56e7efdaf87;
static PyObject *const_str_digest_866c31fc8e3f50f10cabca22bcc3b68e;
static PyObject *const_str_digest_86b690e0ba1f63fd48e435095aef1119;
static PyObject *const_str_digest_87d6d4bda621123152af053c0dde833f;
static PyObject *const_str_digest_8842d8dab6d8e1a03bd3209f4c7d8c85;
static PyObject *const_str_digest_88eaf6510bd57833178be952c2a2d74e;
extern PyObject *const_str_digest_890854844f87190b1c6e74a24b3f6e6e;
static PyObject *const_str_digest_89b6f674a8a140e56310bcfec0ed5012;
extern PyObject *const_str_digest_8a412c5a481127f099db01c171a0fb22;
static PyObject *const_str_digest_8a98b97fc61c9bb01d7d190b94ffd2a8;
static PyObject *const_str_digest_8ab69059fbe9fef0b0ad50f2b948f8ee;
extern PyObject *const_str_digest_8b28e68d7237750459f812a4e45fbbea;
static PyObject *const_str_digest_8d7847d7bd74f719f243031b49421525;
static PyObject *const_str_digest_8eaf9c6f13f0ea629b9b1feef1acea8a;
extern PyObject *const_str_digest_8f1af3fa58871032e57b3bdcaf89b551;
static PyObject *const_str_digest_8f23eb1de33799d1a32885fde13aac22;
extern PyObject *const_str_digest_901a22001a0c7f25add446a5f68900d0;
static PyObject *const_str_digest_9020c0154ba09b41a6ce32444468a5a6;
static PyObject *const_str_digest_9077b83e901daee6c4d4e34357a66262;
static PyObject *const_str_digest_91013d6fce3112b1a72b834fdb720cb9;
static PyObject *const_str_digest_9269cde17a435135088bd15f2c77c487;
static PyObject *const_str_digest_941afd4ce1527d74fbd8be0829fa1a59;
static PyObject *const_str_digest_94bcdde9f91533758026d6169c99b194;
static PyObject *const_str_digest_94f7eeb67070e06cba40225d7f6dac94;
static PyObject *const_str_digest_9553403600853c58bf2171dfdb175fd6;
static PyObject *const_str_digest_95b6249137a7d93810a38eee006bae9d;
static PyObject *const_str_digest_95da66999f18725ac82e21e4162054dd;
static PyObject *const_str_digest_9699306eee9969fdb7872a23b1255525;
static PyObject *const_str_digest_9751ba3cd639e8b26904b98f438feabb;
static PyObject *const_str_digest_975e0d14a7d9a661ed02f62dd83c173a;
static PyObject *const_str_digest_9848ea2f585329928c28906ca7106439;
static PyObject *const_str_digest_9912dfb1857add237abf1afe8d04d515;
static PyObject *const_str_digest_99db67e2828ac2898b82b9bee5044782;
static PyObject *const_str_digest_9a09d3352ebc0352e2ebe35a2c06dfe2;
static PyObject *const_str_digest_9bfe93836a7a4bca28d53503f73d529f;
static PyObject *const_str_digest_9d495ac14a55bbb4c048faa1dd9740c4;
static PyObject *const_str_digest_9eb6c06dfbe3b1d972d9cd5b3cd07ad3;
static PyObject *const_str_digest_9fd5fa304496311ce860090862daff60;
extern PyObject *const_str_digest_a0e09455d4337213cd42ebadc4d27d3b;
static PyObject *const_str_digest_a1b947d4348c132103b0fcc2930bd1fa;
static PyObject *const_str_digest_a23ad65f708fe0ccf3375a05edaf137f;
static PyObject *const_str_digest_a32269879300b041fd441d576a971aa4;
static PyObject *const_str_digest_a37910e2837bb74a8ac17a725e63197d;
static PyObject *const_str_digest_a59f7e5d92f868f0febd79f5e04fb533;
static PyObject *const_str_digest_a5c3694130ad6405ae4d1ac366f7f051;
static PyObject *const_str_digest_a731efdfc52bda74c8042706da39e402;
static PyObject *const_str_digest_a7de58b21f8d89408e6f6bc0054e4d96;
static PyObject *const_str_digest_a865c075859ce91a3bff8c53a3bf5b87;
static PyObject *const_str_digest_a8afce941e7743fb1211294527053568;
extern PyObject *const_str_digest_a8dd00e8789d337653fd72b5c50207f2;
static PyObject *const_str_digest_a8f7031741e338c5a3662bc8bde493c2;
static PyObject *const_str_digest_a97f071f0008b119291a75be0a54f0db;
static PyObject *const_str_digest_ac6a99e739693f272ebb761c3b4a46d8;
static PyObject *const_str_digest_ac9267666430a3349fd1e73d1f6de0cf;
static PyObject *const_str_digest_ad481cb364b37bd937f33b4d475ca5d6;
extern PyObject *const_str_digest_aef332a279fc26992d9b07f03b37a7b7;
static PyObject *const_str_digest_af413396ce224ead18aef866d1998f25;
static PyObject *const_str_digest_b0f41de0450f9223c04ee3ef6526d95f;
static PyObject *const_str_digest_b1a73bd199a3381dd99aa189b635c9d2;
static PyObject *const_str_digest_b209cb6a510b4ec8a54ffbddff8173f4;
extern PyObject *const_str_digest_b3f6b0dfc1e5717ba7333debe235669f;
static PyObject *const_str_digest_b454ce2d9dc0e1e729d4fe26cd68b667;
static PyObject *const_str_digest_b4d5fd0edbbdd276f1a0a17ef81e8860;
static PyObject *const_str_digest_b53e1cf2d1ffaffc66b7e7af7aa19e19;
static PyObject *const_str_digest_b6761a339d072eed29792fd342025a92;
extern PyObject *const_str_digest_b6844caa183c5fab60a573048a09c0ad;
static PyObject *const_str_digest_b8743901784613aeb6cba18f9454164f;
static PyObject *const_str_digest_b877a75e799b1da5ec9e80038722e7c8;
static PyObject *const_str_digest_b8a48d5016ebc922c843de4be3b7b3d3;
static PyObject *const_str_digest_b8ac32b2a634222f497d81e945fc69e2;
static PyObject *const_str_digest_b8bcf6698fa55a1cf1fc5eaebffde12d;
static PyObject *const_str_digest_b8c204bcd104359163fd2e01f36173c7;
extern PyObject *const_str_digest_b8dc8513ea6a44621ecfd35fbdc9110c;
static PyObject *const_str_digest_ba6e2734a4c4b33dd16fd510fc59eb6f;
static PyObject *const_str_digest_ba96e1b0745354ebb9ebbd896eef2382;
static PyObject *const_str_digest_bb8c2e7309a7a91ebcd3b999c51969a2;
static PyObject *const_str_digest_bbd898cba8e091026a41c30005eabf32;
static PyObject *const_str_digest_bc016924168b4f43f83c2a57e5f20e43;
static PyObject *const_str_digest_bd11a3d4509bb31d8294367664405f49;
static PyObject *const_str_digest_bd64994aa1bf405da9e180c5248fed37;
static PyObject *const_str_digest_bd69b5f39c936f279a15218b0da5ea9b;
static PyObject *const_str_digest_c008d08b40f62830643d6e456c174f44;
static PyObject *const_str_digest_c3144b55fa49931d99eadea25c55a6a9;
static PyObject *const_str_digest_c32335831cabcefadffa803ef4902569;
static PyObject *const_str_digest_c3ae46c3d5576e352b30a35cef03a879;
extern PyObject *const_str_digest_c6ed2021e7dfb461dbb032362c3c5cc1;
static PyObject *const_str_digest_c6f825031c2aa893b389bf32c2ca7e84;
static PyObject *const_str_digest_c825d376812e29c9ddc6ce1ed7e3515f;
static PyObject *const_str_digest_c83ed1bc416d044b338832b29fb2651d;
static PyObject *const_str_digest_ca50e6177ec63039f0422a4797375d0f;
static PyObject *const_str_digest_ccaa1ea23810f6f3c2d7e6aefb2857f8;
static PyObject *const_str_digest_ccdece3504035fa372440bbeb6311ffd;
static PyObject *const_str_digest_cda50241a18adb04de807208df21a568;
static PyObject *const_str_digest_ce5b897b8639742629f34ea80efc31ef;
static PyObject *const_str_digest_cf71de3f9023718c59bbed5c352d152c;
static PyObject *const_str_digest_d053f48b89f24f879aa2f2f4e56eadf8;
static PyObject *const_str_digest_d16b4bd4598ec2bdd698c16a87fe77c9;
static PyObject *const_str_digest_d1797c16915d5942896329250beda9a0;
static PyObject *const_str_digest_d193a08c2f34203a6dece0610a94cbce;
static PyObject *const_str_digest_d232384ee4b96c9afbc24157d4303e41;
static PyObject *const_str_digest_d26239e7cd7d3c8ec7fea3318abd3bcd;
static PyObject *const_str_digest_d2f9453d0b79d1c9ade8eb7077960272;
static PyObject *const_str_digest_d35f413d90f87685cd0ca3d921172de1;
static PyObject *const_str_digest_d3d6e6f2fb7259f3a718f541c7ec9f99;
static PyObject *const_str_digest_d463a03c581a8b2bf2d33fceb0420ee2;
static PyObject *const_str_digest_d487beb1c5e6713bce7f604f4ca8cb09;
static PyObject *const_str_digest_d4c31f89fcf78e3659ade9a24fdf42d4;
static PyObject *const_str_digest_d5368055a448d76633f47a60bcd4479b;
static PyObject *const_str_digest_d55d07de35c84cb073e13f22d9618042;
static PyObject *const_str_digest_d5bee58dc1094b8a3f313601fcb2d9ae;
static PyObject *const_str_digest_d5f9d85e79c2d11eb4912782ada389d9;
static PyObject *const_str_digest_d73c240a188c22c16ede43df7407dbf6;
static PyObject *const_str_digest_d781c39102afc1fb103df62a9f2201f0;
static PyObject *const_str_digest_d7ccb205c498b35eef75e47f3fcf28c0;
static PyObject *const_str_digest_d86091769b46541c28720c4a54cd7147;
static PyObject *const_str_digest_d88eb99589aadec9018c5dcfb35c3d1b;
static PyObject *const_str_digest_d8ce894b52970bea5aadfd06f6c6a09e;
static PyObject *const_str_digest_d8d8715e262515dd6621f0a26df29636;
static PyObject *const_str_digest_d8eb3b4b1075e21ea19c37046b527fe3;
extern PyObject *const_str_digest_dbd40ba69da15782bc0a1e6888e6b0cb;
static PyObject *const_str_digest_dbea79683d26f1311c1d73725d1126c6;
static PyObject *const_str_digest_dbf10af0e37c0956cfea856a5a4357de;
static PyObject *const_str_digest_dc00e62d6cadf7b075734a2e4733966e;
static PyObject *const_str_digest_dc7e2d2d5f013f1151ce74d50a33f797;
static PyObject *const_str_digest_de18e03ff93a362044876849cf37696f;
static PyObject *const_str_digest_df5c6ba92426bdb1aade8d8a0f581562;
extern PyObject *const_str_digest_e1c06d85ae7b8b032bef47e42e4c08f9;
static PyObject *const_str_digest_e1e3e29ea125920cd2f7a3b6ae5e81aa;
static PyObject *const_str_digest_e22f20bbcc3464586bae117166898e42;
static PyObject *const_str_digest_e2418f9672b53d5c9e681cfa976e4ede;
static PyObject *const_str_digest_e37d7173ff6f9aaa416640aafbac950b;
static PyObject *const_str_digest_e38fb2055690700b05e7284ed8a85e3c;
static PyObject *const_str_digest_e4525de050bb139a277c0806fa6a7e6d;
static PyObject *const_str_digest_e5fa1be03dc4204e78792261a4698ad0;
static PyObject *const_str_digest_e6393a97f5d5446e3f140f696e680264;
static PyObject *const_str_digest_e831352a8f095fac61be53d333f6cde5;
static PyObject *const_str_digest_e8beeb26dcc4786866e7c8241d1b043b;
extern PyObject *const_str_digest_e94bac8f3260b056e46d869b06fc3df5;
static PyObject *const_str_digest_e982083adb75f151dd46b8ba5198bcc0;
static PyObject *const_str_digest_ea53ee9a311971559ec8711c5fb4be91;
static PyObject *const_str_digest_eaecd73b62fde941c6920f619a250093;
static PyObject *const_str_digest_ec3b7568b05b17898a1cfc5552eb0db7;
static PyObject *const_str_digest_ec9c6dcde4931b9286e950f1e97757e1;
static PyObject *const_str_digest_ed5b9d330fed7db100d8d2e379138830;
static PyObject *const_str_digest_ee4983e7371c33b4bfdb0e9618656343;
static PyObject *const_str_digest_ee4b6cfd909f1956d8f9cdb9d88a8e33;
static PyObject *const_str_digest_ee729f5c9a3c88dd8861517adea99433;
static PyObject *const_str_digest_eeebd0c9ae3aeb9122106e125f5bce40;
static PyObject *const_str_digest_ef99bdd7a9eb43f15832f068e2ea06fc;
static PyObject *const_str_digest_f52b7060aab9a16195083441b23e029f;
static PyObject *const_str_digest_f5c55f1a250689d1c890b2eab5aa0071;
static PyObject *const_str_digest_f6768cb0ae865b6d06874d47205cde23;
static PyObject *const_str_digest_f69e5c82471da4a14868bf6c3579cdb5;
static PyObject *const_str_digest_f763cd7bcd9a235a07c2d522dff79b8e;
extern PyObject *const_str_digest_f799e499bbf79ca500ba3d987fa42361;
extern PyObject *const_str_digest_f8286407d5c451802306b2d15cf2167e;
static PyObject *const_str_digest_f872d11254dc4965c1a21e47d3db82a2;
static PyObject *const_str_digest_f9e489921e325b2dda9adf3026842ef7;
static PyObject *const_str_digest_fa2c4b951468a9631db264c5434a4c6d;
static PyObject *const_str_digest_fa68c6dda4f168588cd3f272b7e3b4fb;
static PyObject *const_str_digest_fba1625b3c6ce450ca640bc284d80373;
static PyObject *const_str_digest_fbcd99c73635e58fec4f2c1cb3548a51;
static PyObject *const_str_digest_fc4edadf7639afc609ef0411b3949729;
extern PyObject *const_str_digest_fc763cb31e9938f37737394681228f83;
static PyObject *const_str_digest_fcacca1424f339192c748b8e531c8ec3;
static PyObject *const_str_digest_fd17d65e20f214ebc5b50e179ff507c1;
static PyObject *const_str_digest_fde8d015bd498e7e13c01750c46677b5;
static PyObject *const_tuple_1fee174538866786d34aa5f123ad8530_tuple;
static PyObject *const_tuple_88c260f85cd63106b992b7767f2d95e8_tuple;
extern PyObject *const_tuple_a66751b7c76123c024f448eec46707b1_tuple;
extern PyObject *const_tuple_b3c114ff65e5229953139969fd8f9f4c_tuple;
static PyObject *const_tuple_cde206c752dab3a50d1c0e1f18afb419_tuple;
static PyObject *const_list_str_plain_F_WRAPPEDFUNC_str_plain_F_FUNC_list;
static PyObject *const_list_str_plain_SWAP_str_plain_create_cb_arglist_list;
extern PyObject *const_list_str_digest_352c2c361762a5fb011e95a778b8a254_list;
static PyObject *const_list_str_digest_6bbbfb5feaca7cb532b036a03f1876bc_list;
static PyObject *const_list_str_digest_6f20bfaa2efa212f61a92cbf6b7f4bf6_list;
static PyObject *const_list_str_digest_901a22001a0c7f25add446a5f68900d0_list;
static PyObject *const_list_str_digest_aef332a279fc26992d9b07f03b37a7b7_list;
static PyObject *const_list_str_digest_e37d7173ff6f9aaa416640aafbac950b_list;
static PyObject *const_list_str_digest_e4525de050bb139a277c0806fa6a7e6d_list;
static PyObject *const_list_str_digest_e94bac8f3260b056e46d869b06fc3df5_list;
static PyObject *const_list_str_digest_f52b7060aab9a16195083441b23e029f_list;
extern PyObject *const_list_str_digest_f8286407d5c451802306b2d15cf2167e_list;

static void _initModuleConstants(void)
{
    const_str_plain_cr = UNSTREAM_STRING( &constant_bin[ 3613 ], 2, 1 );
    const_str_plain_wn = UNSTREAM_STRING( &constant_bin[ 34226 ], 2, 1 );
    const_str_plain_cfs = UNSTREAM_STRING( &constant_bin[ 1070848 ], 3, 1 );
    const_str_plain_ltx = UNSTREAM_STRING( &constant_bin[ 1070851 ], 3, 1 );
    const_str_plain_nb1 = UNSTREAM_STRING( &constant_bin[ 1070854 ], 3, 1 );
    const_str_plain_nth = UNSTREAM_STRING( &constant_bin[ 152427 ], 3, 1 );
    const_str_plain_fsrc = UNSTREAM_STRING( &constant_bin[ 1070857 ], 4, 1 );
    const_str_plain_nthk = UNSTREAM_STRING( &constant_bin[ 152509 ], 4, 1 );
    const_str_plain_stnd = UNSTREAM_STRING( &constant_bin[ 152473 ], 4, 1 );
    const_str_plain__rules = UNSTREAM_STRING( &constant_bin[ 129016 ], 6, 1 );
    const_str_plain_pyname = UNSTREAM_STRING( &constant_bin[ 1070861 ], 6, 1 );
    const_str_plain_asctime = UNSTREAM_STRING( &constant_bin[ 1070867 ], 7, 1 );
    const_str_plain_keys_xa = UNSTREAM_STRING( &constant_bin[ 1070874 ], 7, 1 );
    const_str_plain_modnote = UNSTREAM_STRING( &constant_bin[ 1070881 ], 7, 1 );
    const_str_plain_nb_list = UNSTREAM_STRING( &constant_bin[ 151620 ], 7, 1 );
    const_str_plain_sepdict = UNSTREAM_STRING( &constant_bin[ 150759 ], 7, 1 );
    const_str_plain_topyarr = UNSTREAM_STRING( &constant_bin[ 1070888 ], 7, 1 );
    const_str_plain_functype = UNSTREAM_STRING( &constant_bin[ 1070895 ], 8, 1 );
    const_str_plain_kwlistxa = UNSTREAM_STRING( &constant_bin[ 1070903 ], 8, 1 );
    const_str_plain_unsigned = UNSTREAM_STRING( &constant_bin[ 37826 ], 8, 1 );
    const_str_plain_xaformat = UNSTREAM_STRING( &constant_bin[ 1070911 ], 8, 1 );
    const_str_plain_arg_rules = UNSTREAM_STRING( &constant_bin[ 129931 ], 9, 1 );
    const_str_plain_argformat = UNSTREAM_STRING( &constant_bin[ 1070919 ], 9, 1 );
    const_str_plain_args_capi = UNSTREAM_STRING( &constant_bin[ 998584 ], 9, 1 );
    const_str_plain_aux_rules = UNSTREAM_STRING( &constant_bin[ 152348 ], 9, 1 );
    const_str_plain_docsignxa = UNSTREAM_STRING( &constant_bin[ 1070928 ], 9, 1 );
    const_str_plain_keyformat = UNSTREAM_STRING( &constant_bin[ 1070937 ], 9, 1 );
    const_str_plain_keys_capi = UNSTREAM_STRING( &constant_bin[ 1070946 ], 9, 1 );
    const_str_plain_kwlistopt = UNSTREAM_STRING( &constant_bin[ 1070955 ], 9, 1 );
    const_str_plain_localtime = UNSTREAM_STRING( &constant_bin[ 1070964 ], 9, 1 );
    const_str_plain_mod_rules = UNSTREAM_STRING( &constant_bin[ 146993 ], 9, 1 );
    const_str_plain_setjmpbuf = UNSTREAM_STRING( &constant_bin[ 1070973 ], 9, 1 );
    const_str_plain_modulebody = UNSTREAM_STRING( &constant_bin[ 1070982 ], 10, 1 );
    const_str_plain_rout_rules = UNSTREAM_STRING( &constant_bin[ 129787 ], 10, 1 );
    const_str_plain_callfortran = UNSTREAM_STRING( &constant_bin[ 1070992 ], 11, 1 );
    const_str_plain_check_rules = UNSTREAM_STRING( &constant_bin[ 152556 ], 11, 1 );
    const_str_plain_need_cfuncs = UNSTREAM_STRING( &constant_bin[ 1007882 ], 11, 1 );
    const_str_plain_routine_def = UNSTREAM_STRING( &constant_bin[ 1071003 ], 11, 1 );
    const_str_plain_defmod_rules = UNSTREAM_STRING( &constant_bin[ 151536 ], 12, 1 );
    const_str_plain_docsignshort = UNSTREAM_STRING( &constant_bin[ 1071014 ], 12, 1 );
    const_str_plain_funcwrappers = UNSTREAM_STRING( &constant_bin[ 151710 ], 12, 1 );
    const_str_plain_module_rules = UNSTREAM_STRING( &constant_bin[ 152105 ], 12, 1 );
    const_str_plain_returnformat = UNSTREAM_STRING( &constant_bin[ 1071026 ], 12, 1 );
    const_str_plain_funcwrappers2 = UNSTREAM_STRING( &constant_bin[ 151710 ], 13, 1 );
    const_str_plain_routine_rules = UNSTREAM_STRING( &constant_bin[ 130011 ], 13, 1 );
    const_str_plain_closepyobjfrom = UNSTREAM_STRING( &constant_bin[ 1071038 ], 14, 1 );
    const_str_plain_docsignxashort = UNSTREAM_STRING( &constant_bin[ 1071052 ], 14, 1 );
    const_str_plain_routdebugenter = UNSTREAM_STRING( &constant_bin[ 1071066 ], 14, 1 );
    const_str_plain_routdebugleave = UNSTREAM_STRING( &constant_bin[ 1071080 ], 14, 1 );
    const_str_plain_docsignoptshort = UNSTREAM_STRING( &constant_bin[ 1071094 ], 15, 1 );
    const_str_plain_cleanupfrompyobj = UNSTREAM_STRING( &constant_bin[ 1071109 ], 16, 1 );
    const_str_plain_initf2pywraphook = UNSTREAM_STRING( &constant_bin[ 1071125 ], 16, 1 );
    const_str_plain_routdebugfailure = UNSTREAM_STRING( &constant_bin[ 1071141 ], 16, 1 );
    const_str_plain_callcompaqfortran = UNSTREAM_STRING( &constant_bin[ 1071157 ], 17, 1 );
    const_str_plain_callfortranappend = UNSTREAM_STRING( &constant_bin[ 1071174 ], 17, 1 );
    const_str_plain_docsignatureshort = UNSTREAM_STRING( &constant_bin[ 1071191 ], 17, 1 );
    const_str_plain_initf2pywraphooks = UNSTREAM_STRING( &constant_bin[ 1071208 ], 17, 1 );
    const_str_plain_typedef_need_dict = UNSTREAM_STRING( &constant_bin[ 151382 ], 17, 1 );
    const_str_plain_callfortranroutine = UNSTREAM_STRING( &constant_bin[ 1070992 ], 18, 1 );
    const_str_plain_declfortranroutine = UNSTREAM_STRING( &constant_bin[ 1071225 ], 18, 1 );
    const_str_plain_unsigned_long_long = UNSTREAM_STRING( &constant_bin[ 151165 ], 18, 1 );
    const_tuple_str_plain_use_rules_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_use_rules_tuple, 0, const_str_plain_use_rules ); Py_INCREF( const_str_plain_use_rules );
    const_str_plain_latexdocsignatureshort = UNSTREAM_STRING( &constant_bin[ 1071243 ], 22, 1 );
    const_tuple_str_plain_common_rules_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_common_rules_tuple, 0, const_str_plain_common_rules ); Py_INCREF( const_str_plain_common_rules );
    const_tuple_str_plain_m_str_plain_um_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_m_str_plain_um_tuple, 0, const_str_plain_m ); Py_INCREF( const_str_plain_m );
    PyTuple_SET_ITEM( const_tuple_str_plain_m_str_plain_um_tuple, 1, const_str_plain_um ); Py_INCREF( const_str_plain_um );
    const_dict_055a5e2e8d3048ab4922e8d2791b57c7 = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 1071265 ], 122 );
    const_dict_6c662d5dfca8638087abab46e2002cca = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 1071387 ], 379 );
    const_dict_c3b8e398c8954454fba85f0a68a2b3f2 = _PyDict_NewPresized( 3 );
    PyDict_SetItem( const_dict_c3b8e398c8954454fba85f0a68a2b3f2, const_str_plain_need, const_str_plain_CHECKGENERIC );
    const_str_digest_49a8237352f5f580ba1c42a1c0b4cb89 = UNSTREAM_STRING( &constant_bin[ 1071766 ], 52, 0 );
    PyDict_SetItem( const_dict_c3b8e398c8954454fba85f0a68a2b3f2, const_str_plain_frompyobj, const_str_digest_49a8237352f5f580ba1c42a1c0b4cb89 );
    const_str_digest_b877a75e799b1da5ec9e80038722e7c8 = UNSTREAM_STRING( &constant_bin[ 1071818 ], 28, 0 );
    PyDict_SetItem( const_dict_c3b8e398c8954454fba85f0a68a2b3f2, const_str_plain_cleanupfrompyobj, const_str_digest_b877a75e799b1da5ec9e80038722e7c8 );
    const_dict_f901ef362e29b410a7de5c49b0849102 = _PyDict_NewPresized( 2 );
    PyDict_SetItem( const_dict_f901ef362e29b410a7de5c49b0849102, const_str_plain_latexdoc, const_str_digest_e1c06d85ae7b8b032bef47e42e4c08f9 );
    PyDict_SetItem( const_dict_f901ef362e29b410a7de5c49b0849102, const_str_plain_restdoc, const_str_digest_e1c06d85ae7b8b032bef47e42e4c08f9 );
    const_list_0725c8ade74f8f28b621ba88c880b6bd_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_0725c8ade74f8f28b621ba88c880b6bd_list, 0, const_str_digest_00712398ca7c9a987043e29bb7424f6c ); Py_INCREF( const_str_digest_00712398ca7c9a987043e29bb7424f6c );
    PyList_SET_ITEM( const_list_0725c8ade74f8f28b621ba88c880b6bd_list, 1, const_str_plain_CFUNCSMESS ); Py_INCREF( const_str_plain_CFUNCSMESS );
    PyList_SET_ITEM( const_list_0725c8ade74f8f28b621ba88c880b6bd_list, 2, const_str_plain_MINMAX ); Py_INCREF( const_str_plain_MINMAX );
    const_list_0a418c59c89f9fccd0e4ae0f11838976_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_0a418c59c89f9fccd0e4ae0f11838976_list, 0, const_str_digest_aef332a279fc26992d9b07f03b37a7b7 ); Py_INCREF( const_str_digest_aef332a279fc26992d9b07f03b37a7b7 );
    PyList_SET_ITEM( const_list_0a418c59c89f9fccd0e4ae0f11838976_list, 1, const_str_digest_901a22001a0c7f25add446a5f68900d0 ); Py_INCREF( const_str_digest_901a22001a0c7f25add446a5f68900d0 );
    PyList_SET_ITEM( const_list_0a418c59c89f9fccd0e4ae0f11838976_list, 2, const_str_plain_STRINGFREE ); Py_INCREF( const_str_plain_STRINGFREE );
    const_list_10b104c3768849b37f92dfc64a682f14_list = PyList_New( 2 );
    const_str_digest_8d7847d7bd74f719f243031b49421525 = UNSTREAM_STRING( &constant_bin[ 1071846 ], 26, 0 );
    PyList_SET_ITEM( const_list_10b104c3768849b37f92dfc64a682f14_list, 0, const_str_digest_8d7847d7bd74f719f243031b49421525 ); Py_INCREF( const_str_digest_8d7847d7bd74f719f243031b49421525 );
    const_str_digest_d55d07de35c84cb073e13f22d9618042 = UNSTREAM_STRING( &constant_bin[ 1071872 ], 21, 0 );
    PyList_SET_ITEM( const_list_10b104c3768849b37f92dfc64a682f14_list, 1, const_str_digest_d55d07de35c84cb073e13f22d9618042 ); Py_INCREF( const_str_digest_d55d07de35c84cb073e13f22d9618042 );
    const_list_2a1cb5f1b6ad96684950fc2bb3e18869_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_2a1cb5f1b6ad96684950fc2bb3e18869_list, 0, const_str_plain_F_FUNC ); Py_INCREF( const_str_plain_F_FUNC );
    PyList_SET_ITEM( const_list_2a1cb5f1b6ad96684950fc2bb3e18869_list, 1, const_str_digest_034683ceccce831b3c4724622e7c61e0 ); Py_INCREF( const_str_digest_034683ceccce831b3c4724622e7c61e0 );
    PyList_SET_ITEM( const_list_2a1cb5f1b6ad96684950fc2bb3e18869_list, 2, const_str_plain_STRINGFREE ); Py_INCREF( const_str_plain_STRINGFREE );
    const_list_32f32ffbbd5d0469a259f67cd7bedf23_list = PyList_New( 2 );
    const_str_digest_d26239e7cd7d3c8ec7fea3318abd3bcd = UNSTREAM_STRING( &constant_bin[ 1071893 ], 100, 0 );
    PyList_SET_ITEM( const_list_32f32ffbbd5d0469a259f67cd7bedf23_list, 0, const_str_digest_d26239e7cd7d3c8ec7fea3318abd3bcd ); Py_INCREF( const_str_digest_d26239e7cd7d3c8ec7fea3318abd3bcd );
    const_str_digest_85a7ffd3d8a917c64381c56e7efdaf87 = UNSTREAM_STRING( &constant_bin[ 1071993 ], 10, 0 );
    PyList_SET_ITEM( const_list_32f32ffbbd5d0469a259f67cd7bedf23_list, 1, const_str_digest_85a7ffd3d8a917c64381c56e7efdaf87 ); Py_INCREF( const_str_digest_85a7ffd3d8a917c64381c56e7efdaf87 );
    const_list_53e499b918b44aac469e052ee883b608_list = PyList_New( 3 );
    const_str_digest_e8beeb26dcc4786866e7c8241d1b043b = UNSTREAM_STRING( &constant_bin[ 1072003 ], 27, 0 );
    PyList_SET_ITEM( const_list_53e499b918b44aac469e052ee883b608_list, 0, const_str_digest_e8beeb26dcc4786866e7c8241d1b043b ); Py_INCREF( const_str_digest_e8beeb26dcc4786866e7c8241d1b043b );
    const_str_digest_098be4f85b6147b2a568faf0c3a53940 = UNSTREAM_STRING( &constant_bin[ 1072030 ], 49, 0 );
    PyList_SET_ITEM( const_list_53e499b918b44aac469e052ee883b608_list, 1, const_str_digest_098be4f85b6147b2a568faf0c3a53940 ); Py_INCREF( const_str_digest_098be4f85b6147b2a568faf0c3a53940 );
    const_str_digest_40d445ed78575617d849a4c40252e78b = UNSTREAM_STRING( &constant_bin[ 1072079 ], 35, 0 );
    PyList_SET_ITEM( const_list_53e499b918b44aac469e052ee883b608_list, 2, const_str_digest_40d445ed78575617d849a4c40252e78b ); Py_INCREF( const_str_digest_40d445ed78575617d849a4c40252e78b );
    const_list_63cf9afba8d0564dfc4c1155a17b0c8c_list = PyList_New( 3 );
    const_str_digest_135742a92d97efe0fd436435c081798f = UNSTREAM_STRING( &constant_bin[ 1072114 ], 42, 0 );
    PyList_SET_ITEM( const_list_63cf9afba8d0564dfc4c1155a17b0c8c_list, 0, const_str_digest_135742a92d97efe0fd436435c081798f ); Py_INCREF( const_str_digest_135742a92d97efe0fd436435c081798f );
    const_str_digest_2dc6983da48dda8d3f9d4105993903cd = UNSTREAM_STRING( &constant_bin[ 1072156 ], 10, 0 );
    PyList_SET_ITEM( const_list_63cf9afba8d0564dfc4c1155a17b0c8c_list, 1, const_str_digest_2dc6983da48dda8d3f9d4105993903cd ); Py_INCREF( const_str_digest_2dc6983da48dda8d3f9d4105993903cd );
    const_str_digest_bc016924168b4f43f83c2a57e5f20e43 = UNSTREAM_STRING( &constant_bin[ 1072166 ], 10, 0 );
    PyList_SET_ITEM( const_list_63cf9afba8d0564dfc4c1155a17b0c8c_list, 2, const_str_digest_bc016924168b4f43f83c2a57e5f20e43 ); Py_INCREF( const_str_digest_bc016924168b4f43f83c2a57e5f20e43 );
    const_list_83502bc928309bee706fd67dc708d8b5_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_83502bc928309bee706fd67dc708d8b5_list, 0, const_str_digest_8d7847d7bd74f719f243031b49421525 ); Py_INCREF( const_str_digest_8d7847d7bd74f719f243031b49421525 );
    PyList_SET_ITEM( const_list_83502bc928309bee706fd67dc708d8b5_list, 1, const_str_digest_d55d07de35c84cb073e13f22d9618042 ); Py_INCREF( const_str_digest_d55d07de35c84cb073e13f22d9618042 );
    const_str_digest_94bcdde9f91533758026d6169c99b194 = UNSTREAM_STRING( &constant_bin[ 1072176 ], 36, 0 );
    PyList_SET_ITEM( const_list_83502bc928309bee706fd67dc708d8b5_list, 2, const_str_digest_94bcdde9f91533758026d6169c99b194 ); Py_INCREF( const_str_digest_94bcdde9f91533758026d6169c99b194 );
    const_list_917626a5cab86448639269d43350330f_list = PyList_New( 2 );
    const_str_digest_6e37b3e05e8e0e3ee299fb587d62c2cb = UNSTREAM_STRING( &constant_bin[ 1072212 ], 8, 0 );
    PyList_SET_ITEM( const_list_917626a5cab86448639269d43350330f_list, 0, const_str_digest_6e37b3e05e8e0e3ee299fb587d62c2cb ); Py_INCREF( const_str_digest_6e37b3e05e8e0e3ee299fb587d62c2cb );
    PyList_SET_ITEM( const_list_917626a5cab86448639269d43350330f_list, 1, const_str_digest_8f1af3fa58871032e57b3bdcaf89b551 ); Py_INCREF( const_str_digest_8f1af3fa58871032e57b3bdcaf89b551 );
    const_list_9af870e8ed9f6c337cdc0c36a763a6f2_list = PyList_New( 2 );
    const_str_digest_0805118bce28b0db2adfe1c873c5fd07 = UNSTREAM_STRING( &constant_bin[ 1072220 ], 36, 0 );
    PyList_SET_ITEM( const_list_9af870e8ed9f6c337cdc0c36a763a6f2_list, 0, const_str_digest_0805118bce28b0db2adfe1c873c5fd07 ); Py_INCREF( const_str_digest_0805118bce28b0db2adfe1c873c5fd07 );
    const_str_digest_a59f7e5d92f868f0febd79f5e04fb533 = UNSTREAM_STRING( &constant_bin[ 1072256 ], 33, 0 );
    PyList_SET_ITEM( const_list_9af870e8ed9f6c337cdc0c36a763a6f2_list, 1, const_str_digest_a59f7e5d92f868f0febd79f5e04fb533 ); Py_INCREF( const_str_digest_a59f7e5d92f868f0febd79f5e04fb533 );
    const_list_a6fb55f787096d197a68d518259f030c_list = PyList_New( 5 );
    PyList_SET_ITEM( const_list_a6fb55f787096d197a68d518259f030c_list, 0, const_str_digest_e8beeb26dcc4786866e7c8241d1b043b ); Py_INCREF( const_str_digest_e8beeb26dcc4786866e7c8241d1b043b );
    PyList_SET_ITEM( const_list_a6fb55f787096d197a68d518259f030c_list, 1, const_str_digest_098be4f85b6147b2a568faf0c3a53940 ); Py_INCREF( const_str_digest_098be4f85b6147b2a568faf0c3a53940 );
    PyList_SET_ITEM( const_list_a6fb55f787096d197a68d518259f030c_list, 2, const_str_digest_40d445ed78575617d849a4c40252e78b ); Py_INCREF( const_str_digest_40d445ed78575617d849a4c40252e78b );
    const_str_digest_1d098d8f36c3c8a6d6ad4afd172177b1 = UNSTREAM_STRING( &constant_bin[ 1072289 ], 42, 0 );
    PyList_SET_ITEM( const_list_a6fb55f787096d197a68d518259f030c_list, 3, const_str_digest_1d098d8f36c3c8a6d6ad4afd172177b1 ); Py_INCREF( const_str_digest_1d098d8f36c3c8a6d6ad4afd172177b1 );
    const_str_digest_58f94749feaa6d8dcbbe3b2c21ca6f3d = UNSTREAM_STRING( &constant_bin[ 1072331 ], 31, 0 );
    PyList_SET_ITEM( const_list_a6fb55f787096d197a68d518259f030c_list, 4, const_str_digest_58f94749feaa6d8dcbbe3b2c21ca6f3d ); Py_INCREF( const_str_digest_58f94749feaa6d8dcbbe3b2c21ca6f3d );
    const_list_d9758b2de662a4320da70ff340579452_list = PyList_New( 2 );
    const_str_digest_8a98b97fc61c9bb01d7d190b94ffd2a8 = UNSTREAM_STRING( &constant_bin[ 1072362 ], 49, 0 );
    PyList_SET_ITEM( const_list_d9758b2de662a4320da70ff340579452_list, 0, const_str_digest_8a98b97fc61c9bb01d7d190b94ffd2a8 ); Py_INCREF( const_str_digest_8a98b97fc61c9bb01d7d190b94ffd2a8 );
    const_str_digest_18f58632137400bb4c14c923f5d57bbb = UNSTREAM_STRING( &constant_bin[ 1072411 ], 107, 0 );
    PyList_SET_ITEM( const_list_d9758b2de662a4320da70ff340579452_list, 1, const_str_digest_18f58632137400bb4c14c923f5d57bbb ); Py_INCREF( const_str_digest_18f58632137400bb4c14c923f5d57bbb );
    const_str_digest_003412ca7c035dda44b06c662ca81aa5 = UNSTREAM_STRING( &constant_bin[ 999284 ], 2, 0 );
    const_str_digest_007d50f5babd3a75f4137e740257a41e = UNSTREAM_STRING( &constant_bin[ 1072518 ], 25, 0 );
    const_str_digest_0250bf479570e6e650f305dc350be4a1 = UNSTREAM_STRING( &constant_bin[ 1072543 ], 19, 0 );
    const_str_digest_07686c6fa7631f753789a51e91f8665c = UNSTREAM_STRING( &constant_bin[ 1072562 ], 221, 0 );
    const_str_digest_0801662fed55e93695b42ad17d40560e = UNSTREAM_STRING( &constant_bin[ 1072783 ], 90, 0 );
    const_str_digest_09de792d93cc23e6cd4f80b6fa458fd3 = UNSTREAM_STRING( &constant_bin[ 1072660 ], 10, 0 );
    const_str_digest_0b2ee4e163c7715c3637d39da00ca3d5 = UNSTREAM_STRING( &constant_bin[ 1072873 ], 40, 0 );
    const_str_digest_0c93bbaa020061df40a3e0e1970c67b3 = UNSTREAM_STRING( &constant_bin[ 1072913 ], 12, 0 );
    const_str_digest_0d59acae85d063e3f672d8da6daa0a85 = UNSTREAM_STRING( &constant_bin[ 1072925 ], 23, 0 );
    const_str_digest_0e629208d1577c2a84c6eb9e890eff33 = UNSTREAM_STRING( &constant_bin[ 1072948 ], 38, 0 );
    const_str_digest_0e6d8ecfca61c030ce40551480a7c4c8 = UNSTREAM_STRING( &constant_bin[ 1072986 ], 37, 0 );
    const_str_digest_0f31941b1b984d687d1832a3265bb0bd = UNSTREAM_STRING( &constant_bin[ 1073023 ], 18, 0 );
    const_str_digest_103f7cae04ee1c2adcfe2b30f8ef4e52 = UNSTREAM_STRING( &constant_bin[ 1073041 ], 70, 0 );
    const_str_digest_1177440af11d75a5bc642deb1185d476 = UNSTREAM_STRING( &constant_bin[ 1073111 ], 423, 0 );
    const_str_digest_11a75f7b161c1a48991f1986e1eab885 = UNSTREAM_STRING( &constant_bin[ 1073534 ], 67, 0 );
    const_str_digest_140b8c5286854407f508a0dae9b51bd0 = UNSTREAM_STRING( &constant_bin[ 1073601 ], 11, 0 );
    const_str_digest_1422ad36fc74e5255a7c794563fb3843 = UNSTREAM_STRING( &constant_bin[ 1073612 ], 51, 0 );
    const_str_digest_1480e469b585979a7f4d96343815e357 = UNSTREAM_STRING( &constant_bin[ 1073663 ], 39, 0 );
    const_str_digest_152c5ee2b2e7dc93bd9f827427a9f43c = UNSTREAM_STRING( &constant_bin[ 1073702 ], 20, 0 );
    const_str_digest_15904c114d20d74a77febfc4dfb77b85 = UNSTREAM_STRING( &constant_bin[ 1073722 ], 46, 0 );
    const_str_digest_1632bec27e568661b517322c67a7aa13 = UNSTREAM_STRING( &constant_bin[ 1073768 ], 84, 0 );
    const_str_digest_163dc3507d0a117b14a81f27113a31a1 = UNSTREAM_STRING( &constant_bin[ 1073852 ], 78, 0 );
    const_str_digest_1678f341d6d4b9988981a9652fd0aaf7 = UNSTREAM_STRING( &constant_bin[ 1073930 ], 38, 0 );
    const_str_digest_16cee986fdf2b02b5fedad397daf617e = UNSTREAM_STRING( &constant_bin[ 1073968 ], 33, 0 );
    const_str_digest_16d4ea9ba4d55fcaab93d0516b4d9157 = UNSTREAM_STRING( &constant_bin[ 1074001 ], 57, 0 );
    const_str_digest_17650eb00d01333f79fd06fb9c61cd9d = UNSTREAM_STRING( &constant_bin[ 1072638 ], 16, 0 );
    const_str_digest_18429b2363d61bb45e6f19ee193369c0 = UNSTREAM_STRING( &constant_bin[ 1074058 ], 23, 0 );
    const_str_digest_18c508c400e195b421fc11655c7a57b2 = UNSTREAM_STRING( &constant_bin[ 1074081 ], 17, 0 );
    const_str_digest_1957922661d0ebb79028a2cdcfc623e3 = UNSTREAM_STRING( &constant_bin[ 1074098 ], 56, 0 );
    const_str_digest_196e1deb2a177ed3e9d78c2c4c6ca852 = UNSTREAM_STRING( &constant_bin[ 1074154 ], 49, 0 );
    const_str_digest_19c7030524451d92c931f37fca9681ea = UNSTREAM_STRING( &constant_bin[ 1074203 ], 18, 0 );
    const_str_digest_1e609e98e6387a0eff2e0582a23e9403 = UNSTREAM_STRING( &constant_bin[ 1074221 ], 25, 0 );
    const_str_digest_2024ee09e6b745cfd788ae7f21f8ccb6 = UNSTREAM_STRING( &constant_bin[ 1074246 ], 69, 0 );
    const_str_digest_20c9fc8f6f5e6e56dc857edd08f619c0 = UNSTREAM_STRING( &constant_bin[ 1074315 ], 96, 0 );
    const_str_digest_231cb7effd90b3fd8e0b9b743f769003 = UNSTREAM_STRING( &constant_bin[ 1074411 ], 21, 0 );
    const_str_digest_26528d4a51309a8f8ddb2c87bfb4d547 = UNSTREAM_STRING( &constant_bin[ 1074432 ], 18, 0 );
    const_str_digest_26c16d68737087d7dec283685f968bf7 = UNSTREAM_STRING( &constant_bin[ 1074450 ], 25, 0 );
    const_str_digest_2722011c07957ec4178692a6adc697b7 = UNSTREAM_STRING( &constant_bin[ 1074475 ], 786, 0 );
    const_str_digest_27b50ea3e5fe50c3f9d4789d13716081 = UNSTREAM_STRING( &constant_bin[ 1075261 ], 41, 0 );
    const_str_digest_2861f69496685cab3ecd9e5bb974c70d = UNSTREAM_STRING( &constant_bin[ 1072626 ], 11, 0 );
    const_str_digest_2936888493c6440f01314e5ae776f3e1 = UNSTREAM_STRING( &constant_bin[ 1075302 ], 96, 0 );
    const_str_digest_2bfab3a3bf25bd01b8093743c94c68c6 = UNSTREAM_STRING( &constant_bin[ 1075398 ], 47, 0 );
    const_str_digest_2d092b06961d63e3c95e44a4ec6fc82d = UNSTREAM_STRING( &constant_bin[ 1075445 ], 258, 0 );
    const_str_digest_2f4f3f7d23ec8a68ccbc66a579aca6d2 = UNSTREAM_STRING( &constant_bin[ 1075703 ], 27, 0 );
    const_str_digest_2fa8b74c150f98704fd78cb5be16a2d3 = UNSTREAM_STRING( &constant_bin[ 1075730 ], 41, 0 );
    const_str_digest_31870eba6b1af25a3fcecd097524b3d4 = UNSTREAM_STRING( &constant_bin[ 1075771 ], 31, 0 );
    const_str_digest_31a9af9e11e7fa447fb19b15333890bf = UNSTREAM_STRING( &constant_bin[ 1075802 ], 122, 0 );
    const_str_digest_33de85b69c6ba37a90f1de39a0387d4e = UNSTREAM_STRING( &constant_bin[ 1075924 ], 43, 0 );
    const_str_digest_343d31d31f56cdef8fe89aa79cee366a = UNSTREAM_STRING( &constant_bin[ 1075967 ], 16, 0 );
    const_str_digest_3548fadb0ec569ebab2115c8b8df5083 = UNSTREAM_STRING( &constant_bin[ 1075983 ], 436, 0 );
    const_str_digest_3583a8d3606919d394ff3742ea2991a0 = UNSTREAM_STRING( &constant_bin[ 1076419 ], 23, 0 );
    const_str_digest_365fbbecf5f6b6e5e9fb735849d785c0 = UNSTREAM_STRING( &constant_bin[ 1076442 ], 20, 0 );
    const_str_digest_3661f078f2728e5304b2e950f133b5c4 = UNSTREAM_STRING( &constant_bin[ 1076462 ], 20, 0 );
    const_str_digest_3675f5d015dddadfe52770fb5aa734ea = UNSTREAM_STRING( &constant_bin[ 1076482 ], 12, 0 );
    const_str_digest_36c45669e1ecb4a38cd16d553a9afbb9 = UNSTREAM_STRING( &constant_bin[ 1076494 ], 35, 0 );
    const_str_digest_3746a458488dce9d90d90525809f2b02 = UNSTREAM_STRING( &constant_bin[ 1076529 ], 20, 0 );
    const_str_digest_38b4dc4c4264c1437622ad072b57f931 = UNSTREAM_STRING( &constant_bin[ 1076549 ], 23, 0 );
    const_str_digest_38bb68b0d7d99ca5566905027683bfde = UNSTREAM_STRING( &constant_bin[ 1076572 ], 9, 0 );
    const_str_digest_39eef5677102f3a55b588def25963616 = UNSTREAM_STRING( &constant_bin[ 1076581 ], 39, 0 );
    const_str_digest_3dc156e6a2d607058ba86c8c0498e4f7 = UNSTREAM_STRING( &constant_bin[ 1076620 ], 108, 0 );
    const_str_digest_3f6cd6988d5cc425c4d00868999a9c0b = UNSTREAM_STRING( &constant_bin[ 1076728 ], 48, 0 );
    const_str_digest_3ff9b48b64cdbdd8b296b61508af401a = UNSTREAM_STRING( &constant_bin[ 1076776 ], 47, 0 );
    const_str_digest_4085e6150841584387baceb03e192208 = UNSTREAM_STRING( &constant_bin[ 1076823 ], 35, 0 );
    const_str_digest_41c2fd756c3e693448d5dfd166c13fac = UNSTREAM_STRING( &constant_bin[ 1076858 ], 24, 0 );
    const_str_digest_428b1f0db6614bc681cf8230e37e4727 = UNSTREAM_STRING( &constant_bin[ 1076882 ], 33, 0 );
    const_str_digest_42bb9daf118d76a1fcc036f908957a47 = UNSTREAM_STRING( &constant_bin[ 1076915 ], 84, 0 );
    const_str_digest_42e29578af24ea901b92843c6452c69d = UNSTREAM_STRING( &constant_bin[ 1076999 ], 11, 0 );
    const_str_digest_44b5e885884093b35997aaab01d17f03 = UNSTREAM_STRING( &constant_bin[ 1073487 ], 19, 0 );
    const_str_digest_484347358833d2d05d8fc69e7493f100 = UNSTREAM_STRING( &constant_bin[ 1077010 ], 22, 0 );
    const_str_digest_48cabf7d0b3bbfc91057f28eb23a1560 = UNSTREAM_STRING( &constant_bin[ 1077032 ], 8, 0 );
    const_str_digest_4aa6b2c8be599f4ff600f479e1d083f8 = UNSTREAM_STRING( &constant_bin[ 1074017 ], 19, 0 );
    const_str_digest_4c144e84fc3c1a12f3edf4fb3c6a1560 = UNSTREAM_STRING( &constant_bin[ 1077040 ], 16, 0 );
    const_str_digest_4f2deeeb57d301c95c75bb98138b8f09 = UNSTREAM_STRING( &constant_bin[ 1077056 ], 87, 0 );
    const_str_digest_5292336f06adab3d25d49ce1bcb754fa = UNSTREAM_STRING( &constant_bin[ 1077143 ], 47, 0 );
    const_str_digest_52f3cb551798f750c7eedaa7874151b2 = UNSTREAM_STRING( &constant_bin[ 1002198 ], 14, 0 );
    const_str_digest_530550da2a0c86c4126b4c4a02177517 = UNSTREAM_STRING( &constant_bin[ 1077190 ], 32, 0 );
    const_str_digest_533c951d823b6e57c80e5d5b1a9091f9 = UNSTREAM_STRING( &constant_bin[ 1077222 ], 26, 0 );
    const_str_digest_53d067d98ec3a8018e265af396e4cd76 = UNSTREAM_STRING( &constant_bin[ 1077248 ], 2, 0 );
    const_str_digest_55456c681709cce09c41f6b5c4c09b6c = UNSTREAM_STRING( &constant_bin[ 1077250 ], 69, 0 );
    const_str_digest_55f1ce80e69a2658f507e145643c067b = UNSTREAM_STRING( &constant_bin[ 1077319 ], 31, 0 );
    const_str_digest_56c4578d7e79e9d1b9921f69f505bc38 = UNSTREAM_STRING( &constant_bin[ 1077350 ], 23, 0 );
    const_str_digest_56eb8b6c3a2e2b46a9b2615c93c4d45e = UNSTREAM_STRING( &constant_bin[ 1077373 ], 6, 0 );
    const_str_digest_5739445260bb4ab7a7bde7699d67e1b0 = UNSTREAM_STRING( &constant_bin[ 1077379 ], 37, 0 );
    const_str_digest_57f487778749be446e3a072c5c9fc960 = UNSTREAM_STRING( &constant_bin[ 1077416 ], 8, 0 );
    const_str_digest_5a3b19794c360cfa1f3fb761f0170bf4 = UNSTREAM_STRING( &constant_bin[ 1077424 ], 34, 0 );
    const_str_digest_5b2f1fd139d7c2fa41a3bd15052f7cc6 = UNSTREAM_STRING( &constant_bin[ 1077458 ], 54, 0 );
    const_str_digest_5b7e03ef8781497c848bb48ecd301016 = UNSTREAM_STRING( &constant_bin[ 1077512 ], 30, 0 );
    const_str_digest_5c182b7cc989dc414beab715240ecd25 = UNSTREAM_STRING( &constant_bin[ 1077542 ], 31, 0 );
    const_str_digest_5dd2ddd3c8c2121e0d34a95bfef37e1e = UNSTREAM_STRING( &constant_bin[ 1077573 ], 14, 0 );
    const_str_digest_5e3bedeaeb5deb1039acf2ed98489637 = UNSTREAM_STRING( &constant_bin[ 1062170 ], 14, 0 );
    const_str_digest_6051a16e4b8002678b6d93e2ac79406a = UNSTREAM_STRING( &constant_bin[ 1077587 ], 13, 0 );
    const_str_digest_617134fe87fb293497d3503a48221184 = UNSTREAM_STRING( &constant_bin[ 1077600 ], 22, 0 );
    const_str_digest_63b243fa195291a4bd10a9d27c0ece83 = UNSTREAM_STRING( &constant_bin[ 1077622 ], 74, 0 );
    const_str_digest_64c014c101de059e40ab2098f7c02568 = UNSTREAM_STRING( &constant_bin[ 1077696 ], 60, 0 );
    const_str_digest_681c035c971246c828024e1eb1a024c7 = UNSTREAM_STRING( &constant_bin[ 1077756 ], 43, 0 );
    const_str_digest_6bbbfb5feaca7cb532b036a03f1876bc = UNSTREAM_STRING( &constant_bin[ 1077799 ], 82, 0 );
    const_str_digest_6c41c39826425526467cf3e430a77c15 = UNSTREAM_STRING( &constant_bin[ 1000031 ], 3, 0 );
    const_str_digest_6e3f60afbc56076b3a1ad2fd52e5545f = UNSTREAM_STRING( &constant_bin[ 1077881 ], 30, 0 );
    const_str_digest_6e4437baab8cc015d0bec086001fc38b = UNSTREAM_STRING( &constant_bin[ 1077911 ], 106, 0 );
    const_str_digest_6f20bfaa2efa212f61a92cbf6b7f4bf6 = UNSTREAM_STRING( &constant_bin[ 1078017 ], 27, 0 );
    const_str_digest_6f3504cf0f8ede84a5eacc957cd112c0 = UNSTREAM_STRING( &constant_bin[ 1078044 ], 19, 0 );
    const_str_digest_6fae23cc5869b6b96e109a8f2e78fbe4 = UNSTREAM_STRING( &constant_bin[ 1078063 ], 170, 0 );
    const_str_digest_71830f14f0828044f06e530273435a27 = UNSTREAM_STRING( &constant_bin[ 1078233 ], 11, 0 );
    const_str_digest_71deca2cdf00c9fa7cdfa5f0049113ff = UNSTREAM_STRING( &constant_bin[ 1078244 ], 86, 0 );
    const_str_digest_7298c2a4c9a6e315e932bffab830fb0b = UNSTREAM_STRING( &constant_bin[ 1078330 ], 24, 0 );
    const_str_digest_74327d7eb38e858582fe177e885d2475 = UNSTREAM_STRING( &constant_bin[ 1078354 ], 16, 0 );
    const_str_digest_76fe246148a5eb0cccb642576b728a94 = UNSTREAM_STRING( &constant_bin[ 1078370 ], 52, 0 );
    const_str_digest_773353192e877182884c50a8d0c0486a = UNSTREAM_STRING( &constant_bin[ 1078422 ], 57, 0 );
    const_str_digest_77eeebb839755066d58a587211ae9b65 = UNSTREAM_STRING( &constant_bin[ 1078479 ], 23, 0 );
    const_str_digest_7a89be2ff5758619ac83558d9a101c74 = UNSTREAM_STRING( &constant_bin[ 1078502 ], 10, 0 );
    const_str_digest_7aedd59139d051efeaded43f5468c2c5 = UNSTREAM_STRING( &constant_bin[ 1078512 ], 14, 0 );
    const_str_digest_7cae831092e5e81c73cd70d0f405b790 = UNSTREAM_STRING( &constant_bin[ 1078526 ], 39, 0 );
    const_str_digest_8026ad1b3e6ceed21e57865344fb654f = UNSTREAM_STRING( &constant_bin[ 1078565 ], 46, 0 );
    const_str_digest_80eb8b2a20911481e3962616e7e0d2fc = UNSTREAM_STRING( &constant_bin[ 1078611 ], 16, 0 );
    const_str_digest_80faf1e943e593f4ae75792d5729a4c3 = UNSTREAM_STRING( &constant_bin[ 1078627 ], 218, 0 );
    const_str_digest_859fc68497e02be265b67eeb17699a77 = UNSTREAM_STRING( &constant_bin[ 1078845 ], 8, 0 );
    const_str_digest_866c31fc8e3f50f10cabca22bcc3b68e = UNSTREAM_STRING( &constant_bin[ 1000036 ], 9, 0 );
    const_str_digest_86b690e0ba1f63fd48e435095aef1119 = UNSTREAM_STRING( &constant_bin[ 1078853 ], 13, 0 );
    const_str_digest_87d6d4bda621123152af053c0dde833f = UNSTREAM_STRING( &constant_bin[ 1078866 ], 63, 0 );
    const_str_digest_8842d8dab6d8e1a03bd3209f4c7d8c85 = UNSTREAM_STRING( &constant_bin[ 1078929 ], 125, 0 );
    const_str_digest_88eaf6510bd57833178be952c2a2d74e = UNSTREAM_STRING( &constant_bin[ 1079054 ], 23, 0 );
    const_str_digest_89b6f674a8a140e56310bcfec0ed5012 = UNSTREAM_STRING( &constant_bin[ 1072660 ], 15, 0 );
    const_str_digest_8ab69059fbe9fef0b0ad50f2b948f8ee = UNSTREAM_STRING( &constant_bin[ 1079077 ], 40, 0 );
    const_str_digest_8eaf9c6f13f0ea629b9b1feef1acea8a = UNSTREAM_STRING( &constant_bin[ 1079117 ], 65, 0 );
    const_str_digest_8f23eb1de33799d1a32885fde13aac22 = UNSTREAM_STRING( &constant_bin[ 1079182 ], 37, 0 );
    const_str_digest_9020c0154ba09b41a6ce32444468a5a6 = UNSTREAM_STRING( &constant_bin[ 1079219 ], 32, 0 );
    const_str_digest_9077b83e901daee6c4d4e34357a66262 = UNSTREAM_STRING( &constant_bin[ 1079251 ], 836, 0 );
    const_str_digest_91013d6fce3112b1a72b834fdb720cb9 = UNSTREAM_STRING( &constant_bin[ 1072763 ], 20, 0 );
    const_str_digest_9269cde17a435135088bd15f2c77c487 = UNSTREAM_STRING( &constant_bin[ 1080087 ], 48, 0 );
    const_str_digest_941afd4ce1527d74fbd8be0829fa1a59 = UNSTREAM_STRING( &constant_bin[ 1080135 ], 61, 0 );
    const_str_digest_94f7eeb67070e06cba40225d7f6dac94 = UNSTREAM_STRING( &constant_bin[ 1080196 ], 52, 0 );
    const_str_digest_9553403600853c58bf2171dfdb175fd6 = UNSTREAM_STRING( &constant_bin[ 1080248 ], 18, 0 );
    const_str_digest_95b6249137a7d93810a38eee006bae9d = UNSTREAM_STRING( &constant_bin[ 1080266 ], 50, 0 );
    const_str_digest_95da66999f18725ac82e21e4162054dd = UNSTREAM_STRING( &constant_bin[ 1080316 ], 76, 0 );
    const_str_digest_9699306eee9969fdb7872a23b1255525 = UNSTREAM_STRING( &constant_bin[ 1080392 ], 56, 0 );
    const_str_digest_9751ba3cd639e8b26904b98f438feabb = UNSTREAM_STRING( &constant_bin[ 1080448 ], 77, 0 );
    const_str_digest_975e0d14a7d9a661ed02f62dd83c173a = UNSTREAM_STRING( &constant_bin[ 1080525 ], 904, 0 );
    const_str_digest_9848ea2f585329928c28906ca7106439 = UNSTREAM_STRING( &constant_bin[ 1081429 ], 23, 0 );
    const_str_digest_9912dfb1857add237abf1afe8d04d515 = UNSTREAM_STRING( &constant_bin[ 1081452 ], 32, 0 );
    const_str_digest_99db67e2828ac2898b82b9bee5044782 = UNSTREAM_STRING( &constant_bin[ 1081484 ], 33, 0 );
    const_str_digest_9a09d3352ebc0352e2ebe35a2c06dfe2 = UNSTREAM_STRING( &constant_bin[ 1081517 ], 44, 0 );
    const_str_digest_9bfe93836a7a4bca28d53503f73d529f = UNSTREAM_STRING( &constant_bin[ 1016251 ], 2, 0 );
    const_str_digest_9d495ac14a55bbb4c048faa1dd9740c4 = UNSTREAM_STRING( &constant_bin[ 1081561 ], 87, 0 );
    const_str_digest_9eb6c06dfbe3b1d972d9cd5b3cd07ad3 = UNSTREAM_STRING( &constant_bin[ 1081648 ], 32, 0 );
    const_str_digest_9fd5fa304496311ce860090862daff60 = UNSTREAM_STRING( &constant_bin[ 1081680 ], 25, 0 );
    const_str_digest_a1b947d4348c132103b0fcc2930bd1fa = UNSTREAM_STRING( &constant_bin[ 1078481 ], 21, 0 );
    const_str_digest_a23ad65f708fe0ccf3375a05edaf137f = UNSTREAM_STRING( &constant_bin[ 1081705 ], 34, 0 );
    const_str_digest_a32269879300b041fd441d576a971aa4 = UNSTREAM_STRING( &constant_bin[ 1081739 ], 78, 0 );
    const_str_digest_a37910e2837bb74a8ac17a725e63197d = UNSTREAM_STRING( &constant_bin[ 1081817 ], 7, 0 );
    const_str_digest_a5c3694130ad6405ae4d1ac366f7f051 = UNSTREAM_STRING( &constant_bin[ 1072833 ], 19, 0 );
    const_str_digest_a731efdfc52bda74c8042706da39e402 = UNSTREAM_STRING( &constant_bin[ 1081824 ], 439, 0 );
    const_str_digest_a7de58b21f8d89408e6f6bc0054e4d96 = UNSTREAM_STRING( &constant_bin[ 1082263 ], 34, 0 );
    const_str_digest_a865c075859ce91a3bff8c53a3bf5b87 = UNSTREAM_STRING( &constant_bin[ 1082297 ], 24, 0 );
    const_str_digest_a8afce941e7743fb1211294527053568 = UNSTREAM_STRING( &constant_bin[ 1038025 ], 7, 0 );
    const_str_digest_a8f7031741e338c5a3662bc8bde493c2 = UNSTREAM_STRING( &constant_bin[ 336757 ], 9, 0 );
    const_str_digest_a97f071f0008b119291a75be0a54f0db = UNSTREAM_STRING( &constant_bin[ 1082321 ], 964, 0 );
    const_str_digest_ac6a99e739693f272ebb761c3b4a46d8 = UNSTREAM_STRING( &constant_bin[ 1083285 ], 57, 0 );
    const_str_digest_ac9267666430a3349fd1e73d1f6de0cf = UNSTREAM_STRING( &constant_bin[ 1083342 ], 36, 0 );
    const_str_digest_ad481cb364b37bd937f33b4d475ca5d6 = UNSTREAM_STRING( &constant_bin[ 1083378 ], 47, 0 );
    const_str_digest_af413396ce224ead18aef866d1998f25 = UNSTREAM_STRING( &constant_bin[ 1083425 ], 145, 0 );
    const_str_digest_b0f41de0450f9223c04ee3ef6526d95f = UNSTREAM_STRING( &constant_bin[ 1083570 ], 51, 0 );
    const_str_digest_b1a73bd199a3381dd99aa189b635c9d2 = UNSTREAM_STRING( &constant_bin[ 1083621 ], 28, 0 );
    const_str_digest_b209cb6a510b4ec8a54ffbddff8173f4 = UNSTREAM_STRING( &constant_bin[ 1083649 ], 25, 0 );
    const_str_digest_b454ce2d9dc0e1e729d4fe26cd68b667 = UNSTREAM_STRING( &constant_bin[ 1083674 ], 35, 0 );
    const_str_digest_b4d5fd0edbbdd276f1a0a17ef81e8860 = UNSTREAM_STRING( &constant_bin[ 1083709 ], 48, 0 );
    const_str_digest_b53e1cf2d1ffaffc66b7e7af7aa19e19 = UNSTREAM_STRING( &constant_bin[ 1083757 ], 35, 0 );
    const_str_digest_b6761a339d072eed29792fd342025a92 = UNSTREAM_STRING( &constant_bin[ 1083792 ], 29, 0 );
    const_str_digest_b8743901784613aeb6cba18f9454164f = UNSTREAM_STRING( &constant_bin[ 1083821 ], 11, 0 );
    const_str_digest_b8a48d5016ebc922c843de4be3b7b3d3 = UNSTREAM_STRING( &constant_bin[ 1083832 ], 71, 0 );
    const_str_digest_b8ac32b2a634222f497d81e945fc69e2 = UNSTREAM_STRING( &constant_bin[ 1083903 ], 23, 0 );
    const_str_digest_b8bcf6698fa55a1cf1fc5eaebffde12d = UNSTREAM_STRING( &constant_bin[ 1083926 ], 49, 0 );
    const_str_digest_b8c204bcd104359163fd2e01f36173c7 = UNSTREAM_STRING( &constant_bin[ 1083975 ], 22, 0 );
    const_str_digest_ba6e2734a4c4b33dd16fd510fc59eb6f = UNSTREAM_STRING( &constant_bin[ 1083997 ], 51, 0 );
    const_str_digest_ba96e1b0745354ebb9ebbd896eef2382 = UNSTREAM_STRING( &constant_bin[ 1084048 ], 89, 0 );
    const_str_digest_bb8c2e7309a7a91ebcd3b999c51969a2 = UNSTREAM_STRING( &constant_bin[ 1019096 ], 54, 0 );
    const_str_digest_bbd898cba8e091026a41c30005eabf32 = UNSTREAM_STRING( &constant_bin[ 1084137 ], 44, 0 );
    const_str_digest_bd11a3d4509bb31d8294367664405f49 = UNSTREAM_STRING( &constant_bin[ 1084181 ], 29, 0 );
    const_str_digest_bd64994aa1bf405da9e180c5248fed37 = UNSTREAM_STRING( &constant_bin[ 1084210 ], 20, 0 );
    const_str_digest_bd69b5f39c936f279a15218b0da5ea9b = UNSTREAM_STRING( &constant_bin[ 1084230 ], 36, 0 );
    const_str_digest_c008d08b40f62830643d6e456c174f44 = UNSTREAM_STRING( &constant_bin[ 1084266 ], 61, 0 );
    const_str_digest_c3144b55fa49931d99eadea25c55a6a9 = UNSTREAM_STRING( &constant_bin[ 1084327 ], 36, 0 );
    const_str_digest_c32335831cabcefadffa803ef4902569 = UNSTREAM_STRING( &constant_bin[ 1084363 ], 16, 0 );
    const_str_digest_c3ae46c3d5576e352b30a35cef03a879 = UNSTREAM_STRING( &constant_bin[ 1077193 ], 29, 0 );
    const_str_digest_c6f825031c2aa893b389bf32c2ca7e84 = UNSTREAM_STRING( &constant_bin[ 1084379 ], 87, 0 );
    const_str_digest_c825d376812e29c9ddc6ce1ed7e3515f = UNSTREAM_STRING( &constant_bin[ 1084466 ], 35, 0 );
    const_str_digest_c83ed1bc416d044b338832b29fb2651d = UNSTREAM_STRING( &constant_bin[ 1084501 ], 39, 0 );
    const_str_digest_ca50e6177ec63039f0422a4797375d0f = UNSTREAM_STRING( &constant_bin[ 1084540 ], 34, 0 );
    const_str_digest_ccaa1ea23810f6f3c2d7e6aefb2857f8 = UNSTREAM_STRING( &constant_bin[ 1084574 ], 69, 0 );
    const_str_digest_ccdece3504035fa372440bbeb6311ffd = UNSTREAM_STRING( &constant_bin[ 1084643 ], 45, 0 );
    const_str_digest_cda50241a18adb04de807208df21a568 = UNSTREAM_STRING( &constant_bin[ 1084688 ], 38, 0 );
    const_str_digest_ce5b897b8639742629f34ea80efc31ef = UNSTREAM_STRING( &constant_bin[ 1084726 ], 285, 0 );
    const_str_digest_cf71de3f9023718c59bbed5c352d152c = UNSTREAM_STRING( &constant_bin[ 1085011 ], 110, 0 );
    const_str_digest_d053f48b89f24f879aa2f2f4e56eadf8 = UNSTREAM_STRING( &constant_bin[ 1085121 ], 22, 0 );
    const_str_digest_d16b4bd4598ec2bdd698c16a87fe77c9 = UNSTREAM_STRING( &constant_bin[ 1077417 ], 7, 0 );
    const_str_digest_d1797c16915d5942896329250beda9a0 = UNSTREAM_STRING( &constant_bin[ 1079077 ], 30, 0 );
    const_str_digest_d193a08c2f34203a6dece0610a94cbce = UNSTREAM_STRING( &constant_bin[ 1085143 ], 16, 0 );
    const_str_digest_d232384ee4b96c9afbc24157d4303e41 = UNSTREAM_STRING( &constant_bin[ 1085159 ], 50, 0 );
    const_str_digest_d2f9453d0b79d1c9ade8eb7077960272 = UNSTREAM_STRING( &constant_bin[ 1085209 ], 33, 0 );
    const_str_digest_d35f413d90f87685cd0ca3d921172de1 = UNSTREAM_STRING( &constant_bin[ 1085242 ], 18, 0 );
    const_str_digest_d3d6e6f2fb7259f3a718f541c7ec9f99 = UNSTREAM_STRING( &constant_bin[ 1085260 ], 33, 0 );
    const_str_digest_d463a03c581a8b2bf2d33fceb0420ee2 = UNSTREAM_STRING( &constant_bin[ 1085293 ], 60, 0 );
    const_str_digest_d487beb1c5e6713bce7f604f4ca8cb09 = UNSTREAM_STRING( &constant_bin[ 1085353 ], 14, 0 );
    const_str_digest_d4c31f89fcf78e3659ade9a24fdf42d4 = UNSTREAM_STRING( &constant_bin[ 1085367 ], 21, 0 );
    const_str_digest_d5368055a448d76633f47a60bcd4479b = UNSTREAM_STRING( &constant_bin[ 1085388 ], 56, 0 );
    const_str_digest_d5bee58dc1094b8a3f313601fcb2d9ae = UNSTREAM_STRING( &constant_bin[ 1085444 ], 19, 0 );
    const_str_digest_d5f9d85e79c2d11eb4912782ada389d9 = UNSTREAM_STRING( &constant_bin[ 1085463 ], 49, 0 );
    const_str_digest_d73c240a188c22c16ede43df7407dbf6 = UNSTREAM_STRING( &constant_bin[ 1085512 ], 74, 0 );
    const_str_digest_d781c39102afc1fb103df62a9f2201f0 = UNSTREAM_STRING( &constant_bin[ 1085586 ], 62, 0 );
    const_str_digest_d7ccb205c498b35eef75e47f3fcf28c0 = UNSTREAM_STRING( &constant_bin[ 1085648 ], 15, 0 );
    const_str_digest_d86091769b46541c28720c4a54cd7147 = UNSTREAM_STRING( &constant_bin[ 1085663 ], 16, 0 );
    const_str_digest_d88eb99589aadec9018c5dcfb35c3d1b = UNSTREAM_STRING( &constant_bin[ 1085679 ], 115, 0 );
    const_str_digest_d8ce894b52970bea5aadfd06f6c6a09e = UNSTREAM_STRING( &constant_bin[ 1085794 ], 220, 0 );
    const_str_digest_d8d8715e262515dd6621f0a26df29636 = UNSTREAM_STRING( &constant_bin[ 1086014 ], 44, 0 );
    const_str_digest_d8eb3b4b1075e21ea19c37046b527fe3 = UNSTREAM_STRING( &constant_bin[ 1086058 ], 56, 0 );
    const_str_digest_dbea79683d26f1311c1d73725d1126c6 = UNSTREAM_STRING( &constant_bin[ 1086114 ], 86, 0 );
    const_str_digest_dbf10af0e37c0956cfea856a5a4357de = UNSTREAM_STRING( &constant_bin[ 1061946 ], 10, 0 );
    const_str_digest_dc00e62d6cadf7b075734a2e4733966e = UNSTREAM_STRING( &constant_bin[ 1086200 ], 14, 0 );
    const_str_digest_dc7e2d2d5f013f1151ce74d50a33f797 = UNSTREAM_STRING( &constant_bin[ 1086214 ], 9, 0 );
    const_str_digest_de18e03ff93a362044876849cf37696f = UNSTREAM_STRING( &constant_bin[ 413000 ], 8, 0 );
    const_str_digest_df5c6ba92426bdb1aade8d8a0f581562 = UNSTREAM_STRING( &constant_bin[ 1086223 ], 22, 0 );
    const_str_digest_e1e3e29ea125920cd2f7a3b6ae5e81aa = UNSTREAM_STRING( &constant_bin[ 1086245 ], 72, 0 );
    const_str_digest_e22f20bbcc3464586bae117166898e42 = UNSTREAM_STRING( &constant_bin[ 1086317 ], 109, 0 );
    const_str_digest_e2418f9672b53d5c9e681cfa976e4ede = UNSTREAM_STRING( &constant_bin[ 1086426 ], 15, 0 );
    const_str_digest_e37d7173ff6f9aaa416640aafbac950b = UNSTREAM_STRING( &constant_bin[ 1086441 ], 89, 0 );
    const_str_digest_e38fb2055690700b05e7284ed8a85e3c = UNSTREAM_STRING( &constant_bin[ 1086530 ], 56, 0 );
    const_str_digest_e4525de050bb139a277c0806fa6a7e6d = UNSTREAM_STRING( &constant_bin[ 1086586 ], 25, 0 );
    const_str_digest_e5fa1be03dc4204e78792261a4698ad0 = UNSTREAM_STRING( &constant_bin[ 1086611 ], 12, 0 );
    const_str_digest_e6393a97f5d5446e3f140f696e680264 = UNSTREAM_STRING( &constant_bin[ 1086623 ], 236, 0 );
    const_str_digest_e831352a8f095fac61be53d333f6cde5 = UNSTREAM_STRING( &constant_bin[ 1086859 ], 89, 0 );
    const_str_digest_e982083adb75f151dd46b8ba5198bcc0 = UNSTREAM_STRING( &constant_bin[ 1078480 ], 22, 0 );
    const_str_digest_ea53ee9a311971559ec8711c5fb4be91 = UNSTREAM_STRING( &constant_bin[ 1086948 ], 1527, 0 );
    const_str_digest_eaecd73b62fde941c6920f619a250093 = UNSTREAM_STRING( &constant_bin[ 1088475 ], 138, 0 );
    const_str_digest_ec3b7568b05b17898a1cfc5552eb0db7 = UNSTREAM_STRING( &constant_bin[ 1088613 ], 57, 0 );
    const_str_digest_ec9c6dcde4931b9286e950f1e97757e1 = UNSTREAM_STRING( &constant_bin[ 1081577 ], 22, 0 );
    const_str_digest_ed5b9d330fed7db100d8d2e379138830 = UNSTREAM_STRING( &constant_bin[ 1086995 ], 38, 0 );
    const_str_digest_ee4983e7371c33b4bfdb0e9618656343 = UNSTREAM_STRING( &constant_bin[ 1088670 ], 273, 0 );
    const_str_digest_ee4b6cfd909f1956d8f9cdb9d88a8e33 = UNSTREAM_STRING( &constant_bin[ 1088943 ], 86, 0 );
    const_str_digest_ee729f5c9a3c88dd8861517adea99433 = UNSTREAM_STRING( &constant_bin[ 1076583 ], 33, 0 );
    const_str_digest_eeebd0c9ae3aeb9122106e125f5bce40 = UNSTREAM_STRING( &constant_bin[ 1089029 ], 6, 0 );
    const_str_digest_ef99bdd7a9eb43f15832f068e2ea06fc = UNSTREAM_STRING( &constant_bin[ 1089035 ], 27, 0 );
    const_str_digest_f52b7060aab9a16195083441b23e029f = UNSTREAM_STRING( &constant_bin[ 1089062 ], 108, 0 );
    const_str_digest_f5c55f1a250689d1c890b2eab5aa0071 = UNSTREAM_STRING( &constant_bin[ 1004819 ], 11, 0 );
    const_str_digest_f6768cb0ae865b6d06874d47205cde23 = UNSTREAM_STRING( &constant_bin[ 1078284 ], 20, 0 );
    const_str_digest_f69e5c82471da4a14868bf6c3579cdb5 = UNSTREAM_STRING( &constant_bin[ 1089170 ], 25, 0 );
    const_str_digest_f763cd7bcd9a235a07c2d522dff79b8e = UNSTREAM_STRING( &constant_bin[ 1089195 ], 87, 0 );
    const_str_digest_f872d11254dc4965c1a21e47d3db82a2 = UNSTREAM_STRING( &constant_bin[ 1089282 ], 13, 0 );
    const_str_digest_f9e489921e325b2dda9adf3026842ef7 = UNSTREAM_STRING( &constant_bin[ 1089295 ], 20, 0 );
    const_str_digest_fa2c4b951468a9631db264c5434a4c6d = UNSTREAM_STRING( &constant_bin[ 1089315 ], 26, 0 );
    const_str_digest_fa68c6dda4f168588cd3f272b7e3b4fb = UNSTREAM_STRING( &constant_bin[ 1089341 ], 16, 0 );
    const_str_digest_fba1625b3c6ce450ca640bc284d80373 = UNSTREAM_STRING( &constant_bin[ 1089357 ], 79, 0 );
    const_str_digest_fbcd99c73635e58fec4f2c1cb3548a51 = UNSTREAM_STRING( &constant_bin[ 1089436 ], 50, 0 );
    const_str_digest_fc4edadf7639afc609ef0411b3949729 = UNSTREAM_STRING( &constant_bin[ 1089486 ], 17, 0 );
    const_str_digest_fcacca1424f339192c748b8e531c8ec3 = UNSTREAM_STRING( &constant_bin[ 335602 ], 3, 0 );
    const_str_digest_fd17d65e20f214ebc5b50e179ff507c1 = UNSTREAM_STRING( &constant_bin[ 1077642 ], 51, 0 );
    const_str_digest_fde8d015bd498e7e13c01750c46677b5 = UNSTREAM_STRING( &constant_bin[ 1089503 ], 22, 0 );
    const_tuple_1fee174538866786d34aa5f123ad8530_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 1089525 ], 184 );
    const_tuple_88c260f85cd63106b992b7767f2d95e8_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 1089709 ], 259 );
    const_tuple_cde206c752dab3a50d1c0e1f18afb419_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 1089968 ], 391 );
    const_list_str_plain_F_WRAPPEDFUNC_str_plain_F_FUNC_list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_str_plain_F_WRAPPEDFUNC_str_plain_F_FUNC_list, 0, const_str_plain_F_WRAPPEDFUNC ); Py_INCREF( const_str_plain_F_WRAPPEDFUNC );
    PyList_SET_ITEM( const_list_str_plain_F_WRAPPEDFUNC_str_plain_F_FUNC_list, 1, const_str_plain_F_FUNC ); Py_INCREF( const_str_plain_F_FUNC );
    const_list_str_plain_SWAP_str_plain_create_cb_arglist_list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_str_plain_SWAP_str_plain_create_cb_arglist_list, 0, const_str_plain_SWAP ); Py_INCREF( const_str_plain_SWAP );
    PyList_SET_ITEM( const_list_str_plain_SWAP_str_plain_create_cb_arglist_list, 1, const_str_plain_create_cb_arglist ); Py_INCREF( const_str_plain_create_cb_arglist );
    const_list_str_digest_6bbbfb5feaca7cb532b036a03f1876bc_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_digest_6bbbfb5feaca7cb532b036a03f1876bc_list, 0, const_str_digest_6bbbfb5feaca7cb532b036a03f1876bc ); Py_INCREF( const_str_digest_6bbbfb5feaca7cb532b036a03f1876bc );
    const_list_str_digest_6f20bfaa2efa212f61a92cbf6b7f4bf6_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_digest_6f20bfaa2efa212f61a92cbf6b7f4bf6_list, 0, const_str_digest_6f20bfaa2efa212f61a92cbf6b7f4bf6 ); Py_INCREF( const_str_digest_6f20bfaa2efa212f61a92cbf6b7f4bf6 );
    const_list_str_digest_901a22001a0c7f25add446a5f68900d0_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_digest_901a22001a0c7f25add446a5f68900d0_list, 0, const_str_digest_901a22001a0c7f25add446a5f68900d0 ); Py_INCREF( const_str_digest_901a22001a0c7f25add446a5f68900d0 );
    const_list_str_digest_aef332a279fc26992d9b07f03b37a7b7_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_digest_aef332a279fc26992d9b07f03b37a7b7_list, 0, const_str_digest_aef332a279fc26992d9b07f03b37a7b7 ); Py_INCREF( const_str_digest_aef332a279fc26992d9b07f03b37a7b7 );
    const_list_str_digest_e37d7173ff6f9aaa416640aafbac950b_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_digest_e37d7173ff6f9aaa416640aafbac950b_list, 0, const_str_digest_e37d7173ff6f9aaa416640aafbac950b ); Py_INCREF( const_str_digest_e37d7173ff6f9aaa416640aafbac950b );
    const_list_str_digest_e4525de050bb139a277c0806fa6a7e6d_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_digest_e4525de050bb139a277c0806fa6a7e6d_list, 0, const_str_digest_e4525de050bb139a277c0806fa6a7e6d ); Py_INCREF( const_str_digest_e4525de050bb139a277c0806fa6a7e6d );
    const_list_str_digest_e94bac8f3260b056e46d869b06fc3df5_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_digest_e94bac8f3260b056e46d869b06fc3df5_list, 0, const_str_digest_e94bac8f3260b056e46d869b06fc3df5 ); Py_INCREF( const_str_digest_e94bac8f3260b056e46d869b06fc3df5 );
    const_list_str_digest_f52b7060aab9a16195083441b23e029f_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_digest_f52b7060aab9a16195083441b23e029f_list, 0, const_str_digest_f52b7060aab9a16195083441b23e029f ); Py_INCREF( const_str_digest_f52b7060aab9a16195083441b23e029f );
}

// The module code objects.
static PyCodeObject *codeobj_fc191ca33fb34ff1ba4327ff3087b85f;
static PyCodeObject *codeobj_55f4764ba2936614f48431287cbfb287;
static PyCodeObject *codeobj_ca6f250ecb31f7f4bfadde7ca62971d3;
static PyCodeObject *codeobj_3d391909584bb301ebdd977cdb6f6f76;
static PyCodeObject *codeobj_d3b4964f0444715b98dbee738311a005;

static void _initModuleCodeObjects(void)
{
    codeobj_fc191ca33fb34ff1ba4327ff3087b85f = MAKE_CODEOBJ( const_str_digest_76fe246148a5eb0cccb642576b728a94, const_str_plain_buildapi, 1327, const_tuple_str_plain_rout_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_55f4764ba2936614f48431287cbfb287 = MAKE_CODEOBJ( const_str_digest_76fe246148a5eb0cccb642576b728a94, const_str_plain_buildapi, 1327, const_tuple_1fee174538866786d34aa5f123ad8530_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_ca6f250ecb31f7f4bfadde7ca62971d3 = MAKE_CODEOBJ( const_str_digest_76fe246148a5eb0cccb642576b728a94, const_str_plain_buildmodule, 1159, const_tuple_str_plain_m_str_plain_um_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_3d391909584bb301ebdd977cdb6f6f76 = MAKE_CODEOBJ( const_str_digest_76fe246148a5eb0cccb642576b728a94, const_str_plain_buildmodule, 1159, const_tuple_88c260f85cd63106b992b7767f2d95e8_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_d3b4964f0444715b98dbee738311a005 = MAKE_CODEOBJ( const_str_digest_76fe246148a5eb0cccb642576b728a94, const_str_plain_rules, 0, const_tuple_empty, 0, CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
}

// The module function declarations.
static PyObject *MAKE_FUNCTION_function_1_buildmodule_of_module_numpy$f2py$rules(  );


static PyObject *MAKE_FUNCTION_function_2_buildapi_of_module_numpy$f2py$rules(  );


// The module function definitions.
static PyObject *impl_function_1_buildmodule_of_module_numpy$f2py$rules( Nuitka_FunctionObject *self, PyObject *_python_par_m, PyObject *_python_par_um )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_m; par_m.object = _python_par_m;
    PyObjectLocalVariable par_um; par_um.object = _python_par_um;
    PyObjectLocalVariable var_ret;
    PyObjectLocalVariable var_mod_rules;
    PyObjectLocalVariable var_vrd;
    PyObjectLocalVariable var_rd;
    PyObjectLocalVariable var_funcwrappers;
    PyObjectLocalVariable var_funcwrappers2;
    PyObjectLocalVariable var_n;
    PyObjectLocalVariable var_nb;
    PyObjectLocalVariable var_bi;
    PyObjectLocalVariable var_b;
    PyObjectLocalVariable var_nb_list;
    PyObjectLocalVariable var_k;
    PyObjectLocalVariable var_a;
    PyObjectLocalVariable var_nb1;
    PyObjectLocalVariable var_api;
    PyObjectLocalVariable var_wrap;
    PyObjectLocalVariable var_ar;
    PyObjectLocalVariable var_cr;
    PyObjectLocalVariable var_mr;
    PyObjectLocalVariable var_u;
    PyObjectLocalVariable var_needs;
    PyObjectLocalVariable var_code;
    PyObjectLocalVariable var_c;
    PyObjectLocalVariable var_r;
    PyObjectLocalVariable var_fn;
    PyObjectLocalVariable var_f;
    PyObjectLocalVariable var_wn;
    PyObjectLocalVariable var_lines;
    PyObjectLocalVariable var_l;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_for_loop_2__for_iterator;
    PyObjectTempVariable tmp_for_loop_2__iter_value;
    PyObjectTempVariable tmp_for_loop_3__for_iterator;
    PyObjectTempVariable tmp_for_loop_3__iter_value;
    PyObjectTempVariable tmp_for_loop_4__for_iterator;
    PyObjectTempVariable tmp_for_loop_4__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_for_loop_5__for_iterator;
    PyObjectTempVariable tmp_for_loop_5__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_2__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_2__element_1;
    PyObjectTempVariable tmp_tuple_unpack_2__element_2;
    PyObjectTempVariable tmp_tuple_unpack_3__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_3__element_1;
    PyObjectTempVariable tmp_tuple_unpack_3__element_2;
    PyObjectTempVariable tmp_tuple_unpack_4__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_4__element_1;
    PyObjectTempVariable tmp_tuple_unpack_4__element_2;
    PyObjectTempVariable tmp_for_loop_6__for_iterator;
    PyObjectTempVariable tmp_for_loop_6__iter_value;
    PyObjectTempVariable tmp_for_loop_7__for_iterator;
    PyObjectTempVariable tmp_for_loop_7__iter_value;
    PyObjectTempVariable tmp_for_loop_8__for_iterator;
    PyObjectTempVariable tmp_for_loop_8__iter_value;
    PyObjectTempVariable tmp_for_loop_9__for_iterator;
    PyObjectTempVariable tmp_for_loop_9__iter_value;
    PyObjectTempVariable tmp_and_1__value_1;
    PyObjectTempVariable tmp_or_1__value_1;
    PyObjectTempVariable tmp_for_loop_10__for_iterator;
    PyObjectTempVariable tmp_for_loop_10__iter_value;
    PyObjectTempVariable tmp_and_2__value_1;
    PyObjectTempVariable tmp_for_loop_11__for_iterator;
    PyObjectTempVariable tmp_for_loop_11__iter_value;
    PyObjectTempVariable tmp_and_3__value_1;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscribed_2;
    PyObject *tmp_ass_subscribed_3;
    PyObject *tmp_ass_subscribed_4;
    PyObject *tmp_ass_subscribed_5;
    PyObject *tmp_ass_subscribed_6;
    PyObject *tmp_ass_subscribed_7;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subscript_2;
    PyObject *tmp_ass_subscript_3;
    PyObject *tmp_ass_subscript_4;
    PyObject *tmp_ass_subscript_5;
    PyObject *tmp_ass_subscript_6;
    PyObject *tmp_ass_subscript_7;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_ass_subvalue_2;
    PyObject *tmp_ass_subvalue_3;
    PyObject *tmp_ass_subvalue_4;
    PyObject *tmp_ass_subvalue_5;
    PyObject *tmp_ass_subvalue_6;
    PyObject *tmp_ass_subvalue_7;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_assign_source_88;
    PyObject *tmp_assign_source_89;
    PyObject *tmp_assign_source_90;
    PyObject *tmp_assign_source_91;
    PyObject *tmp_assign_source_92;
    PyObject *tmp_assign_source_93;
    PyObject *tmp_assign_source_94;
    PyObject *tmp_assign_source_95;
    PyObject *tmp_assign_source_96;
    PyObject *tmp_assign_source_97;
    PyObject *tmp_assign_source_98;
    PyObject *tmp_assign_source_99;
    PyObject *tmp_assign_source_100;
    PyObject *tmp_assign_source_101;
    PyObject *tmp_assign_source_102;
    PyObject *tmp_assign_source_103;
    PyObject *tmp_assign_source_104;
    PyObject *tmp_assign_source_105;
    PyObject *tmp_assign_source_106;
    PyObject *tmp_assign_source_107;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_left_3;
    PyObject *tmp_binop_left_4;
    PyObject *tmp_binop_left_5;
    PyObject *tmp_binop_left_6;
    PyObject *tmp_binop_left_7;
    PyObject *tmp_binop_left_8;
    PyObject *tmp_binop_left_9;
    PyObject *tmp_binop_left_10;
    PyObject *tmp_binop_left_11;
    PyObject *tmp_binop_left_12;
    PyObject *tmp_binop_left_13;
    PyObject *tmp_binop_left_14;
    PyObject *tmp_binop_left_15;
    PyObject *tmp_binop_left_16;
    PyObject *tmp_binop_left_17;
    PyObject *tmp_binop_left_18;
    PyObject *tmp_binop_left_19;
    PyObject *tmp_binop_left_20;
    PyObject *tmp_binop_left_21;
    PyObject *tmp_binop_left_22;
    PyObject *tmp_binop_left_23;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_binop_right_3;
    PyObject *tmp_binop_right_4;
    PyObject *tmp_binop_right_5;
    PyObject *tmp_binop_right_6;
    PyObject *tmp_binop_right_7;
    PyObject *tmp_binop_right_8;
    PyObject *tmp_binop_right_9;
    PyObject *tmp_binop_right_10;
    PyObject *tmp_binop_right_11;
    PyObject *tmp_binop_right_12;
    PyObject *tmp_binop_right_13;
    PyObject *tmp_binop_right_14;
    PyObject *tmp_binop_right_15;
    PyObject *tmp_binop_right_16;
    PyObject *tmp_binop_right_17;
    PyObject *tmp_binop_right_18;
    PyObject *tmp_binop_right_19;
    PyObject *tmp_binop_right_20;
    PyObject *tmp_binop_right_21;
    PyObject *tmp_binop_right_22;
    PyObject *tmp_binop_right_23;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_call_arg_element_14;
    PyObject *tmp_call_arg_element_15;
    PyObject *tmp_call_arg_element_16;
    PyObject *tmp_call_arg_element_17;
    PyObject *tmp_call_arg_element_18;
    PyObject *tmp_call_arg_element_19;
    PyObject *tmp_call_arg_element_20;
    PyObject *tmp_call_arg_element_21;
    PyObject *tmp_call_arg_element_22;
    PyObject *tmp_call_arg_element_23;
    PyObject *tmp_call_arg_element_24;
    PyObject *tmp_call_arg_element_25;
    PyObject *tmp_call_arg_element_26;
    PyObject *tmp_call_arg_element_27;
    PyObject *tmp_call_arg_element_28;
    PyObject *tmp_call_arg_element_29;
    PyObject *tmp_call_arg_element_30;
    PyObject *tmp_call_arg_element_31;
    PyObject *tmp_call_arg_element_32;
    PyObject *tmp_call_arg_element_33;
    PyObject *tmp_call_arg_element_34;
    PyObject *tmp_call_arg_element_35;
    PyObject *tmp_call_arg_element_36;
    PyObject *tmp_call_arg_element_37;
    PyObject *tmp_call_arg_element_38;
    PyObject *tmp_call_arg_element_39;
    PyObject *tmp_call_arg_element_40;
    PyObject *tmp_call_arg_element_41;
    PyObject *tmp_call_arg_element_42;
    PyObject *tmp_call_arg_element_43;
    PyObject *tmp_call_arg_element_44;
    PyObject *tmp_call_arg_element_45;
    PyObject *tmp_call_arg_element_46;
    PyObject *tmp_call_arg_element_47;
    PyObject *tmp_call_arg_element_48;
    PyObject *tmp_call_arg_element_49;
    PyObject *tmp_call_arg_element_50;
    PyObject *tmp_call_arg_element_51;
    PyObject *tmp_call_arg_element_52;
    PyObject *tmp_call_arg_element_53;
    PyObject *tmp_call_arg_element_54;
    PyObject *tmp_call_arg_element_55;
    PyObject *tmp_call_arg_element_56;
    PyObject *tmp_call_arg_element_57;
    PyObject *tmp_call_arg_element_58;
    PyObject *tmp_call_arg_element_59;
    PyObject *tmp_call_arg_element_60;
    PyObject *tmp_call_arg_element_61;
    PyObject *tmp_call_arg_element_62;
    PyObject *tmp_call_arg_element_63;
    PyObject *tmp_call_arg_element_64;
    PyObject *tmp_call_arg_element_65;
    PyObject *tmp_call_arg_element_66;
    PyObject *tmp_call_arg_element_67;
    PyObject *tmp_call_arg_element_68;
    PyObject *tmp_call_arg_element_69;
    PyObject *tmp_call_arg_element_70;
    PyObject *tmp_call_arg_element_71;
    PyObject *tmp_call_arg_element_72;
    PyObject *tmp_call_arg_element_73;
    PyObject *tmp_call_arg_element_74;
    PyObject *tmp_call_arg_element_75;
    PyObject *tmp_call_arg_element_76;
    PyObject *tmp_call_arg_element_77;
    PyObject *tmp_call_arg_element_78;
    PyObject *tmp_call_arg_element_79;
    PyObject *tmp_call_arg_element_80;
    PyObject *tmp_call_arg_element_81;
    PyObject *tmp_call_arg_element_82;
    PyObject *tmp_call_arg_element_83;
    PyObject *tmp_call_arg_element_84;
    PyObject *tmp_call_arg_element_85;
    PyObject *tmp_call_arg_element_86;
    PyObject *tmp_call_arg_element_87;
    PyObject *tmp_call_arg_element_88;
    PyObject *tmp_call_arg_element_89;
    PyObject *tmp_call_arg_element_90;
    PyObject *tmp_call_arg_element_91;
    PyObject *tmp_call_arg_element_92;
    PyObject *tmp_call_arg_element_93;
    PyObject *tmp_call_arg_element_94;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    PyObject *tmp_called_11;
    PyObject *tmp_called_12;
    PyObject *tmp_called_13;
    PyObject *tmp_called_14;
    PyObject *tmp_called_15;
    PyObject *tmp_called_16;
    PyObject *tmp_called_17;
    PyObject *tmp_called_18;
    PyObject *tmp_called_19;
    PyObject *tmp_called_20;
    PyObject *tmp_called_21;
    PyObject *tmp_called_22;
    PyObject *tmp_called_23;
    PyObject *tmp_called_24;
    PyObject *tmp_called_25;
    PyObject *tmp_called_26;
    PyObject *tmp_called_27;
    PyObject *tmp_called_28;
    PyObject *tmp_called_29;
    PyObject *tmp_called_30;
    PyObject *tmp_called_31;
    PyObject *tmp_called_32;
    PyObject *tmp_called_33;
    PyObject *tmp_called_34;
    PyObject *tmp_called_35;
    PyObject *tmp_called_36;
    PyObject *tmp_called_37;
    PyObject *tmp_called_38;
    PyObject *tmp_called_39;
    PyObject *tmp_called_40;
    PyObject *tmp_called_41;
    PyObject *tmp_called_42;
    PyObject *tmp_called_43;
    PyObject *tmp_called_44;
    PyObject *tmp_called_45;
    PyObject *tmp_called_46;
    PyObject *tmp_called_47;
    PyObject *tmp_called_48;
    PyObject *tmp_called_49;
    PyObject *tmp_called_50;
    PyObject *tmp_called_51;
    PyObject *tmp_called_52;
    PyObject *tmp_called_53;
    PyObject *tmp_called_54;
    PyObject *tmp_called_55;
    PyObject *tmp_called_56;
    PyObject *tmp_called_57;
    PyObject *tmp_called_58;
    PyObject *tmp_called_59;
    PyObject *tmp_called_60;
    PyObject *tmp_called_61;
    PyObject *tmp_called_62;
    PyObject *tmp_called_63;
    PyObject *tmp_called_64;
    PyObject *tmp_called_65;
    PyObject *tmp_called_66;
    PyObject *tmp_called_67;
    PyObject *tmp_called_68;
    PyObject *tmp_called_69;
    PyObject *tmp_called_70;
    PyObject *tmp_called_71;
    PyObject *tmp_called_72;
    PyObject *tmp_called_73;
    PyObject *tmp_called_74;
    PyObject *tmp_called_75;
    PyObject *tmp_called_76;
    PyObject *tmp_called_77;
    PyObject *tmp_called_78;
    PyObject *tmp_called_79;
    PyObject *tmp_called_80;
    PyObject *tmp_called_81;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Gt_1;
    int tmp_cmp_GtE_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    int tmp_cmp_In_7;
    int tmp_cmp_In_8;
    int tmp_cmp_In_9;
    int tmp_cmp_In_10;
    int tmp_cmp_In_11;
    int tmp_cmp_NotIn_1;
    int tmp_cmp_NotIn_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_left_14;
    PyObject *tmp_compare_left_15;
    PyObject *tmp_compare_left_16;
    PyObject *tmp_compare_left_17;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_compare_right_14;
    PyObject *tmp_compare_right_15;
    PyObject *tmp_compare_right_16;
    PyObject *tmp_compare_right_17;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    int tmp_cond_truth_13;
    int tmp_cond_truth_14;
    int tmp_cond_truth_15;
    int tmp_cond_truth_16;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_cond_value_13;
    PyObject *tmp_cond_value_14;
    PyObject *tmp_cond_value_15;
    PyObject *tmp_cond_value_16;
    PyObject *tmp_delsubscr_subscript_1;
    PyObject *tmp_delsubscr_target_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iter_arg_7;
    PyObject *tmp_iter_arg_8;
    PyObject *tmp_iter_arg_9;
    PyObject *tmp_iter_arg_10;
    PyObject *tmp_iter_arg_11;
    PyObject *tmp_iter_arg_12;
    PyObject *tmp_iter_arg_13;
    PyObject *tmp_iter_arg_14;
    PyObject *tmp_iter_arg_15;
    PyObject *tmp_iterator_attempt_1;
    PyObject *tmp_iterator_attempt_2;
    PyObject *tmp_iterator_attempt_3;
    PyObject *tmp_iterator_attempt_4;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_iterator_name_2;
    PyObject *tmp_iterator_name_3;
    PyObject *tmp_iterator_name_4;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_list_element_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_next_source_6;
    PyObject *tmp_next_source_7;
    PyObject *tmp_next_source_8;
    PyObject *tmp_next_source_9;
    PyObject *tmp_next_source_10;
    PyObject *tmp_next_source_11;
    PyObject *tmp_open_filename_1;
    PyObject *tmp_open_filename_2;
    PyObject *tmp_open_filename_3;
    PyObject *tmp_open_filename_4;
    PyObject *tmp_open_filename_5;
    PyObject *tmp_open_mode_1;
    PyObject *tmp_open_mode_2;
    PyObject *tmp_open_mode_3;
    PyObject *tmp_open_mode_4;
    PyObject *tmp_open_mode_5;
    bool tmp_result;
    PyObject *tmp_return_value;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    Py_ssize_t tmp_slice_index_upper_6;
    Py_ssize_t tmp_slice_index_upper_7;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_source_6;
    PyObject *tmp_slice_source_7;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    Py_ssize_t tmp_sliceslicedel_index_lower_6;
    Py_ssize_t tmp_sliceslicedel_index_lower_7;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_source_name_28;
    PyObject *tmp_source_name_29;
    PyObject *tmp_source_name_30;
    PyObject *tmp_source_name_31;
    PyObject *tmp_source_name_32;
    PyObject *tmp_source_name_33;
    PyObject *tmp_source_name_34;
    PyObject *tmp_source_name_35;
    PyObject *tmp_source_name_36;
    PyObject *tmp_source_name_37;
    PyObject *tmp_source_name_38;
    PyObject *tmp_source_name_39;
    PyObject *tmp_source_name_40;
    PyObject *tmp_source_name_41;
    PyObject *tmp_source_name_42;
    PyObject *tmp_source_name_43;
    PyObject *tmp_source_name_44;
    PyObject *tmp_source_name_45;
    PyObject *tmp_source_name_46;
    PyObject *tmp_source_name_47;
    PyObject *tmp_source_name_48;
    PyObject *tmp_source_name_49;
    PyObject *tmp_source_name_50;
    PyObject *tmp_source_name_51;
    PyObject *tmp_source_name_52;
    PyObject *tmp_source_name_53;
    PyObject *tmp_source_name_54;
    PyObject *tmp_source_name_55;
    PyObject *tmp_source_name_56;
    PyObject *tmp_source_name_57;
    PyObject *tmp_source_name_58;
    PyObject *tmp_source_name_59;
    PyObject *tmp_source_name_60;
    PyObject *tmp_source_name_61;
    PyObject *tmp_source_name_62;
    PyObject *tmp_source_name_63;
    PyObject *tmp_source_name_64;
    PyObject *tmp_source_name_65;
    PyObject *tmp_source_name_66;
    PyObject *tmp_source_name_67;
    PyObject *tmp_source_name_68;
    PyObject *tmp_source_name_69;
    PyObject *tmp_source_name_70;
    PyObject *tmp_source_name_71;
    PyObject *tmp_source_name_72;
    PyObject *tmp_source_name_73;
    PyObject *tmp_source_name_74;
    PyObject *tmp_source_name_75;
    PyObject *tmp_source_name_76;
    PyObject *tmp_source_name_77;
    PyObject *tmp_source_name_78;
    PyObject *tmp_source_name_79;
    PyObject *tmp_source_name_80;
    PyObject *tmp_source_name_81;
    PyObject *tmp_source_name_82;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_subscript_2;
    PyObject *tmp_subscr_subscript_3;
    PyObject *tmp_subscr_subscript_4;
    PyObject *tmp_subscr_subscript_5;
    PyObject *tmp_subscr_subscript_6;
    PyObject *tmp_subscr_subscript_7;
    PyObject *tmp_subscr_subscript_8;
    PyObject *tmp_subscr_subscript_9;
    PyObject *tmp_subscr_subscript_10;
    PyObject *tmp_subscr_subscript_11;
    PyObject *tmp_subscr_subscript_12;
    PyObject *tmp_subscr_subscript_13;
    PyObject *tmp_subscr_subscript_14;
    PyObject *tmp_subscr_subscript_15;
    PyObject *tmp_subscr_subscript_16;
    PyObject *tmp_subscr_subscript_17;
    PyObject *tmp_subscr_subscript_18;
    PyObject *tmp_subscr_subscript_19;
    PyObject *tmp_subscr_subscript_20;
    PyObject *tmp_subscr_subscript_21;
    PyObject *tmp_subscr_subscript_22;
    PyObject *tmp_subscr_subscript_23;
    PyObject *tmp_subscr_subscript_24;
    PyObject *tmp_subscr_subscript_25;
    PyObject *tmp_subscr_subscript_26;
    PyObject *tmp_subscr_subscript_27;
    PyObject *tmp_subscr_subscript_28;
    PyObject *tmp_subscr_subscript_29;
    PyObject *tmp_subscr_subscript_30;
    PyObject *tmp_subscr_subscript_31;
    PyObject *tmp_subscr_subscript_32;
    PyObject *tmp_subscr_subscript_33;
    PyObject *tmp_subscr_subscript_34;
    PyObject *tmp_subscr_subscript_35;
    PyObject *tmp_subscr_subscript_36;
    PyObject *tmp_subscr_subscript_37;
    PyObject *tmp_subscr_subscript_38;
    PyObject *tmp_subscr_subscript_39;
    PyObject *tmp_subscr_subscript_40;
    PyObject *tmp_subscr_subscript_41;
    PyObject *tmp_subscr_subscript_42;
    PyObject *tmp_subscr_subscript_43;
    PyObject *tmp_subscr_subscript_44;
    PyObject *tmp_subscr_subscript_45;
    PyObject *tmp_subscr_target_1;
    PyObject *tmp_subscr_target_2;
    PyObject *tmp_subscr_target_3;
    PyObject *tmp_subscr_target_4;
    PyObject *tmp_subscr_target_5;
    PyObject *tmp_subscr_target_6;
    PyObject *tmp_subscr_target_7;
    PyObject *tmp_subscr_target_8;
    PyObject *tmp_subscr_target_9;
    PyObject *tmp_subscr_target_10;
    PyObject *tmp_subscr_target_11;
    PyObject *tmp_subscr_target_12;
    PyObject *tmp_subscr_target_13;
    PyObject *tmp_subscr_target_14;
    PyObject *tmp_subscr_target_15;
    PyObject *tmp_subscr_target_16;
    PyObject *tmp_subscr_target_17;
    PyObject *tmp_subscr_target_18;
    PyObject *tmp_subscr_target_19;
    PyObject *tmp_subscr_target_20;
    PyObject *tmp_subscr_target_21;
    PyObject *tmp_subscr_target_22;
    PyObject *tmp_subscr_target_23;
    PyObject *tmp_subscr_target_24;
    PyObject *tmp_subscr_target_25;
    PyObject *tmp_subscr_target_26;
    PyObject *tmp_subscr_target_27;
    PyObject *tmp_subscr_target_28;
    PyObject *tmp_subscr_target_29;
    PyObject *tmp_subscr_target_30;
    PyObject *tmp_subscr_target_31;
    PyObject *tmp_subscr_target_32;
    PyObject *tmp_subscr_target_33;
    PyObject *tmp_subscr_target_34;
    PyObject *tmp_subscr_target_35;
    PyObject *tmp_subscr_target_36;
    PyObject *tmp_subscr_target_37;
    PyObject *tmp_subscr_target_38;
    PyObject *tmp_subscr_target_39;
    PyObject *tmp_subscr_target_40;
    PyObject *tmp_subscr_target_41;
    PyObject *tmp_subscr_target_42;
    PyObject *tmp_subscr_target_43;
    PyObject *tmp_subscr_target_44;
    PyObject *tmp_subscr_target_45;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    int tmp_tried_lineno_4;
    int tmp_tried_lineno_5;
    int tmp_tried_lineno_6;
    int tmp_tried_lineno_7;
    int tmp_tried_lineno_8;
    int tmp_tried_lineno_9;
    int tmp_tried_lineno_10;
    int tmp_tried_lineno_11;
    int tmp_tried_lineno_12;
    int tmp_tried_lineno_13;
    int tmp_tried_lineno_14;
    int tmp_tried_lineno_15;
    int tmp_tried_lineno_16;
    int tmp_tried_lineno_17;
    int tmp_tried_lineno_18;
    int tmp_tried_lineno_19;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_unary_arg_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    PyObject *tmp_unpack_4;
    PyObject *tmp_unpack_5;
    PyObject *tmp_unpack_6;
    PyObject *tmp_unpack_7;
    PyObject *tmp_unpack_8;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_ca6f250ecb31f7f4bfadde7ca62971d3, module_numpy$f2py$rules );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125154 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1164;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_1 = const_str_digest_26c16d68737087d7dec283685f968bf7;
    tmp_subscr_target_1 = par_m.object;

    if ( tmp_subscr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 13535 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1164;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_1 = const_str_plain_name;
    tmp_binop_right_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1164;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1164;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1164;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1164;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_1 = PyDict_New();
    assert( var_ret.object == NULL );
    var_ret.object = tmp_assign_source_1;

    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = PY_SSIZE_T_MAX;
    tmp_slice_source_1 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_defmod_rules );

    if (unlikely( tmp_slice_source_1 == NULL ))
    {
        tmp_slice_source_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_defmod_rules );
    }

    if ( tmp_slice_source_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151523 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1166;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_2 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1166;
        goto frame_exception_exit_1;
    }
    assert( var_mod_rules.object == NULL );
    var_mod_rules.object = tmp_assign_source_2;

    tmp_called_2 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_modsign2map );

    if (unlikely( tmp_called_2 == NULL ))
    {
        tmp_called_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_modsign2map );
    }

    if ( tmp_called_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151564 ], 40, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1167;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_2 = par_m.object;

    if ( tmp_call_arg_element_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 13535 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1167;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1167;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1167;
        goto frame_exception_exit_1;
    }
    assert( var_vrd.object == NULL );
    var_vrd.object = tmp_assign_source_3;

    tmp_called_3 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_3 == NULL ))
    {
        tmp_called_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126933 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1168;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_f2py_version );

    if (unlikely( tmp_dict_value_1 == NULL ))
    {
        tmp_dict_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_f2py_version );
    }

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 144933 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1168;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_1 = const_str_plain_f2py_version;
    PyDict_SetItem( tmp_call_arg_element_3, tmp_dict_key_1, tmp_dict_value_1 );
    tmp_call_arg_element_4 = var_vrd.object;

    frame_function->f_lineno = 1168;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_3, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    Py_DECREF( tmp_call_arg_element_3 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1168;
        goto frame_exception_exit_1;
    }
    assert( var_rd.object == NULL );
    var_rd.object = tmp_assign_source_4;

    tmp_assign_source_5 = PyList_New( 0 );
    assert( var_funcwrappers.object == NULL );
    var_funcwrappers.object = tmp_assign_source_5;

    tmp_assign_source_6 = PyList_New( 0 );
    assert( var_funcwrappers2.object == NULL );
    var_funcwrappers2.object = tmp_assign_source_6;

    tmp_subscr_target_2 = par_m.object;

    if ( tmp_subscr_target_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 13535 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1171;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_2 = const_str_plain_interfaced;
    tmp_iter_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_2, tmp_subscr_subscript_2 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1171;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_7 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1171;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_7;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_8 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_8 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1171;
            goto try_finally_handler_1;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_8;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_8;
        Py_DECREF( old );
    }
    tmp_assign_source_9 = tmp_for_loop_1__iter_value.object;

    if (var_n.object == NULL)
    {
        var_n.object = INCREASE_REFCOUNT( tmp_assign_source_9 );
    }
    else
    {
        PyObject *old = var_n.object;
        var_n.object = INCREASE_REFCOUNT( tmp_assign_source_9 );
        Py_DECREF( old );
    }
    tmp_assign_source_10 = Py_None;
    if (var_nb.object == NULL)
    {
        var_nb.object = INCREASE_REFCOUNT( tmp_assign_source_10 );
    }
    else
    {
        PyObject *old = var_nb.object;
        var_nb.object = INCREASE_REFCOUNT( tmp_assign_source_10 );
        Py_DECREF( old );
    }
    tmp_subscr_target_3 = par_m.object;

    if ( tmp_subscr_target_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 13535 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1173;
        goto try_finally_handler_1;
    }

    tmp_subscr_subscript_3 = const_str_plain_body;
    tmp_iter_arg_2 = LOOKUP_SUBSCRIPT( tmp_subscr_target_3, tmp_subscr_subscript_3 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1173;
        goto try_finally_handler_1;
    }
    tmp_assign_source_11 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1173;
        goto try_finally_handler_1;
    }
    if (tmp_for_loop_2__for_iterator.object == NULL)
    {
        tmp_for_loop_2__for_iterator.object = tmp_assign_source_11;
    }
    else
    {
        PyObject *old = tmp_for_loop_2__for_iterator.object;
        tmp_for_loop_2__for_iterator.object = tmp_assign_source_11;
        Py_DECREF( old );
    }
    // Tried code
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator.object;

    tmp_assign_source_12 = ITERATOR_NEXT( tmp_next_source_2 );
    if (tmp_assign_source_12 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_2;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1173;
            goto try_finally_handler_2;
        }
    }

    if (tmp_for_loop_2__iter_value.object == NULL)
    {
        tmp_for_loop_2__iter_value.object = tmp_assign_source_12;
    }
    else
    {
        PyObject *old = tmp_for_loop_2__iter_value.object;
        tmp_for_loop_2__iter_value.object = tmp_assign_source_12;
        Py_DECREF( old );
    }
    tmp_assign_source_13 = tmp_for_loop_2__iter_value.object;

    if (var_bi.object == NULL)
    {
        var_bi.object = INCREASE_REFCOUNT( tmp_assign_source_13 );
    }
    else
    {
        PyObject *old = var_bi.object;
        var_bi.object = INCREASE_REFCOUNT( tmp_assign_source_13 );
        Py_DECREF( old );
    }
    tmp_subscr_target_4 = var_bi.object;

    tmp_subscr_subscript_4 = const_str_plain_block;
    tmp_compare_left_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_4, tmp_subscr_subscript_4 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1174;
        goto try_finally_handler_2;
    }
    tmp_compare_right_1 = const_str_plain_interface;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        frame_function->f_lineno = 1174;
        goto try_finally_handler_2;
    }
    Py_DECREF( tmp_compare_left_1 );
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_called_4 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_errmess );

    if (unlikely( tmp_called_4 == NULL ))
    {
        tmp_called_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_errmess );
    }

    if ( tmp_called_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125842 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1175;
        goto try_finally_handler_2;
    }

    tmp_call_arg_element_5 = const_str_digest_d5f9d85e79c2d11eb4912782ada389d9;
    frame_function->f_lineno = 1175;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1175;
        goto try_finally_handler_2;
    }
    Py_DECREF( tmp_unused );
    goto loop_start_2;
    branch_no_1:;
    tmp_subscr_target_5 = var_bi.object;

    tmp_subscr_subscript_5 = const_str_plain_body;
    tmp_iter_arg_3 = LOOKUP_SUBSCRIPT( tmp_subscr_target_5, tmp_subscr_subscript_5 );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1177;
        goto try_finally_handler_2;
    }
    tmp_assign_source_14 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1177;
        goto try_finally_handler_2;
    }
    if (tmp_for_loop_3__for_iterator.object == NULL)
    {
        tmp_for_loop_3__for_iterator.object = tmp_assign_source_14;
    }
    else
    {
        PyObject *old = tmp_for_loop_3__for_iterator.object;
        tmp_for_loop_3__for_iterator.object = tmp_assign_source_14;
        Py_DECREF( old );
    }
    // Tried code
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator.object;

    tmp_assign_source_15 = ITERATOR_NEXT( tmp_next_source_3 );
    if (tmp_assign_source_15 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_3;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1177;
            goto try_finally_handler_3;
        }
    }

    if (tmp_for_loop_3__iter_value.object == NULL)
    {
        tmp_for_loop_3__iter_value.object = tmp_assign_source_15;
    }
    else
    {
        PyObject *old = tmp_for_loop_3__iter_value.object;
        tmp_for_loop_3__iter_value.object = tmp_assign_source_15;
        Py_DECREF( old );
    }
    tmp_assign_source_16 = tmp_for_loop_3__iter_value.object;

    if (var_b.object == NULL)
    {
        var_b.object = INCREASE_REFCOUNT( tmp_assign_source_16 );
    }
    else
    {
        PyObject *old = var_b.object;
        var_b.object = INCREASE_REFCOUNT( tmp_assign_source_16 );
        Py_DECREF( old );
    }
    tmp_subscr_target_6 = var_b.object;

    tmp_subscr_subscript_6 = const_str_plain_name;
    tmp_compare_left_2 = LOOKUP_SUBSCRIPT( tmp_subscr_target_6, tmp_subscr_subscript_6 );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1178;
        goto try_finally_handler_3;
    }
    tmp_compare_right_2 = var_n.object;

    if ( tmp_compare_right_2 == NULL )
    {
        Py_DECREF( tmp_compare_left_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12516 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1178;
        goto try_finally_handler_3;
    }

    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_2 );

        frame_function->f_lineno = 1178;
        goto try_finally_handler_3;
    }
    Py_DECREF( tmp_compare_left_2 );
    if (tmp_cmp_Eq_2 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_17 = var_b.object;

    if (var_nb.object == NULL)
    {
        var_nb.object = INCREASE_REFCOUNT( tmp_assign_source_17 );
    }
    else
    {
        PyObject *old = var_nb.object;
        var_nb.object = INCREASE_REFCOUNT( tmp_assign_source_17 );
        Py_DECREF( old );
    }
    goto loop_end_3;
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1177;
        goto try_finally_handler_3;
    }
    goto loop_start_3;
    loop_end_3:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_3__iter_value.object );
    tmp_for_loop_3__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_3__for_iterator.object );
    tmp_for_loop_3__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_2;
    }

    goto finally_end_1;
    finally_end_1:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1173;
        goto try_finally_handler_2;
    }
    goto loop_start_2;
    loop_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_2__iter_value.object );
    tmp_for_loop_2__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator.object );
    tmp_for_loop_2__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_1;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_cond_value_1 = var_nb.object;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 69874 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1180;
        goto try_finally_handler_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1180;
        goto try_finally_handler_1;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_no_3;
    }
    else
    {
        goto branch_yes_3;
    }
    branch_yes_3:;
    tmp_called_5 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_errmess );

    if (unlikely( tmp_called_5 == NULL ))
    {
        tmp_called_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_errmess );
    }

    if ( tmp_called_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125842 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1181;
        goto try_finally_handler_1;
    }

    tmp_binop_left_2 = const_str_digest_95da66999f18725ac82e21e4162054dd;
    tmp_binop_right_2 = var_n.object;

    if ( tmp_binop_right_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12516 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1181;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_6 = BINARY_OPERATION_REMAINDER( tmp_binop_left_2, tmp_binop_right_2 );
    if ( tmp_call_arg_element_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1181;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1181;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_6 );
    Py_DECREF( tmp_call_arg_element_6 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1181;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_unused );
    goto loop_start_1;
    branch_no_3:;
    tmp_assign_source_18 = PyList_New( 1 );
    tmp_list_element_1 = var_nb.object;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_18 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 69874 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1183;
        goto try_finally_handler_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_assign_source_18, 0, tmp_list_element_1 );
    if (var_nb_list.object == NULL)
    {
        var_nb_list.object = tmp_assign_source_18;
    }
    else
    {
        PyObject *old = var_nb_list.object;
        var_nb_list.object = tmp_assign_source_18;
        Py_DECREF( old );
    }
    tmp_compare_left_3 = const_str_plain_entry;
    tmp_compare_right_3 = var_nb.object;

    if ( tmp_compare_right_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 69874 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1184;
        goto try_finally_handler_1;
    }

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    if ( tmp_cmp_In_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1184;
        goto try_finally_handler_1;
    }
    if (tmp_cmp_In_1 == 1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_subscr_target_7 = var_nb.object;

    if ( tmp_subscr_target_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 69874 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1185;
        goto try_finally_handler_1;
    }

    tmp_subscr_subscript_7 = const_str_plain_entry;
    tmp_source_name_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_7, tmp_subscr_subscript_7 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1185;
        goto try_finally_handler_1;
    }
    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_items );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1185;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1185;
    tmp_iter_arg_4 = CALL_FUNCTION_NO_ARGS( tmp_called_6 );
    Py_DECREF( tmp_called_6 );
    if ( tmp_iter_arg_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1185;
        goto try_finally_handler_1;
    }
    tmp_assign_source_19 = MAKE_ITERATOR( tmp_iter_arg_4 );
    Py_DECREF( tmp_iter_arg_4 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1185;
        goto try_finally_handler_1;
    }
    if (tmp_for_loop_4__for_iterator.object == NULL)
    {
        tmp_for_loop_4__for_iterator.object = tmp_assign_source_19;
    }
    else
    {
        PyObject *old = tmp_for_loop_4__for_iterator.object;
        tmp_for_loop_4__for_iterator.object = tmp_assign_source_19;
        Py_DECREF( old );
    }
    // Tried code
    loop_start_4:;
    tmp_next_source_4 = tmp_for_loop_4__for_iterator.object;

    tmp_assign_source_20 = ITERATOR_NEXT( tmp_next_source_4 );
    if (tmp_assign_source_20 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_4;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1185;
            goto try_finally_handler_4;
        }
    }

    if (tmp_for_loop_4__iter_value.object == NULL)
    {
        tmp_for_loop_4__iter_value.object = tmp_assign_source_20;
    }
    else
    {
        PyObject *old = tmp_for_loop_4__iter_value.object;
        tmp_for_loop_4__iter_value.object = tmp_assign_source_20;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_5 = tmp_for_loop_4__iter_value.object;

    tmp_assign_source_21 = MAKE_ITERATOR( tmp_iter_arg_5 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1185;
        goto try_finally_handler_5;
    }
    if (tmp_tuple_unpack_1__source_iter.object == NULL)
    {
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_21;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter.object;
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_21;
        Py_DECREF( old );
    }
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_22 = UNPACK_PARAMETER_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_22 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1185;
        goto try_finally_handler_5;
    }
    if (tmp_tuple_unpack_1__element_1.object == NULL)
    {
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_22;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_1.object;
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_22;
        Py_DECREF( old );
    }
    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_23 = UNPACK_PARAMETER_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_23 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1185;
        goto try_finally_handler_5;
    }
    if (tmp_tuple_unpack_1__element_2.object == NULL)
    {
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_23;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_2.object;
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_23;
        Py_DECREF( old );
    }
    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_1 ); assert( PyIter_Check( tmp_iterator_name_1 ) );

    tmp_iterator_attempt_1 = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt_1 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_5;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_1 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_5;
    }
    tmp_assign_source_24 = tmp_tuple_unpack_1__element_1.object;

    if (var_k.object == NULL)
    {
        var_k.object = INCREASE_REFCOUNT( tmp_assign_source_24 );
    }
    else
    {
        PyObject *old = var_k.object;
        var_k.object = INCREASE_REFCOUNT( tmp_assign_source_24 );
        Py_DECREF( old );
    }
    tmp_assign_source_25 = tmp_tuple_unpack_1__element_2.object;

    if (var_a.object == NULL)
    {
        var_a.object = INCREASE_REFCOUNT( tmp_assign_source_25 );
    }
    else
    {
        PyObject *old = var_a.object;
        var_a.object = INCREASE_REFCOUNT( tmp_assign_source_25 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter.object );
    tmp_tuple_unpack_1__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1.object );
    tmp_tuple_unpack_1__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2.object );
    tmp_tuple_unpack_1__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto try_finally_handler_4;
    }

    goto finally_end_3;
    finally_end_3:;
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_copy );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_copy );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 82769 ], 33, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1186;
        goto try_finally_handler_4;
    }

    tmp_called_7 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_deepcopy );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1186;
        goto try_finally_handler_4;
    }
    tmp_call_arg_element_7 = var_nb.object;

    if ( tmp_call_arg_element_7 == NULL )
    {
        Py_DECREF( tmp_called_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 69874 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1186;
        goto try_finally_handler_4;
    }

    frame_function->f_lineno = 1186;
    tmp_assign_source_26 = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_7 );
    Py_DECREF( tmp_called_7 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1186;
        goto try_finally_handler_4;
    }
    if (var_nb1.object == NULL)
    {
        var_nb1.object = tmp_assign_source_26;
    }
    else
    {
        PyObject *old = var_nb1.object;
        var_nb1.object = tmp_assign_source_26;
        Py_DECREF( old );
    }
    tmp_delsubscr_target_1 = var_nb1.object;

    tmp_delsubscr_subscript_1 = const_str_plain_entry;
    tmp_result = DEL_SUBSCRIPT( tmp_delsubscr_target_1, tmp_delsubscr_subscript_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1187;
        goto try_finally_handler_4;
    }
    tmp_ass_subvalue_1 = var_k.object;

    if ( tmp_ass_subvalue_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6318 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1188;
        goto try_finally_handler_4;
    }

    tmp_ass_subscribed_1 = var_nb1.object;

    tmp_ass_subscript_1 = const_str_plain_name;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1188;
        goto try_finally_handler_4;
    }
    tmp_ass_subvalue_2 = var_a.object;

    if ( tmp_ass_subvalue_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5854 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1189;
        goto try_finally_handler_4;
    }

    tmp_ass_subscribed_2 = var_nb1.object;

    tmp_ass_subscript_2 = const_str_plain_args;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1189;
        goto try_finally_handler_4;
    }
    tmp_source_name_3 = var_nb_list.object;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151604 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1190;
        goto try_finally_handler_4;
    }

    tmp_called_8 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_append );
    if ( tmp_called_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1190;
        goto try_finally_handler_4;
    }
    tmp_call_arg_element_8 = var_nb1.object;

    frame_function->f_lineno = 1190;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_8, tmp_call_arg_element_8 );
    Py_DECREF( tmp_called_8 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1190;
        goto try_finally_handler_4;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1185;
        goto try_finally_handler_4;
    }
    goto loop_start_4;
    loop_end_4:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_4 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_4__iter_value.object );
    tmp_for_loop_4__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_4__for_iterator.object );
    tmp_for_loop_4__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_4;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto try_finally_handler_1;
    }

    goto finally_end_4;
    finally_end_4:;
    branch_no_4:;
    tmp_iter_arg_6 = var_nb_list.object;

    if ( tmp_iter_arg_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151604 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1191;
        goto try_finally_handler_1;
    }

    tmp_assign_source_27 = MAKE_ITERATOR( tmp_iter_arg_6 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1191;
        goto try_finally_handler_1;
    }
    if (tmp_for_loop_5__for_iterator.object == NULL)
    {
        tmp_for_loop_5__for_iterator.object = tmp_assign_source_27;
    }
    else
    {
        PyObject *old = tmp_for_loop_5__for_iterator.object;
        tmp_for_loop_5__for_iterator.object = tmp_assign_source_27;
        Py_DECREF( old );
    }
    // Tried code
    loop_start_5:;
    tmp_next_source_5 = tmp_for_loop_5__for_iterator.object;

    tmp_assign_source_28 = ITERATOR_NEXT( tmp_next_source_5 );
    if (tmp_assign_source_28 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_5;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1191;
            goto try_finally_handler_6;
        }
    }

    if (tmp_for_loop_5__iter_value.object == NULL)
    {
        tmp_for_loop_5__iter_value.object = tmp_assign_source_28;
    }
    else
    {
        PyObject *old = tmp_for_loop_5__iter_value.object;
        tmp_for_loop_5__iter_value.object = tmp_assign_source_28;
        Py_DECREF( old );
    }
    tmp_assign_source_29 = tmp_for_loop_5__iter_value.object;

    if (var_nb.object == NULL)
    {
        var_nb.object = INCREASE_REFCOUNT( tmp_assign_source_29 );
    }
    else
    {
        PyObject *old = var_nb.object;
        var_nb.object = INCREASE_REFCOUNT( tmp_assign_source_29 );
        Py_DECREF( old );
    }
    // Tried code
    tmp_called_9 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_buildapi );

    if (unlikely( tmp_called_9 == NULL ))
    {
        tmp_called_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_buildapi );
    }

    if ( tmp_called_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151657 ], 37, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1192;
        goto try_finally_handler_7;
    }

    tmp_call_arg_element_9 = var_nb.object;

    frame_function->f_lineno = 1192;
    tmp_iter_arg_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_9, tmp_call_arg_element_9 );
    if ( tmp_iter_arg_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1192;
        goto try_finally_handler_7;
    }
    tmp_assign_source_30 = MAKE_ITERATOR( tmp_iter_arg_7 );
    Py_DECREF( tmp_iter_arg_7 );
    if ( tmp_assign_source_30 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1192;
        goto try_finally_handler_7;
    }
    if (tmp_tuple_unpack_2__source_iter.object == NULL)
    {
        tmp_tuple_unpack_2__source_iter.object = tmp_assign_source_30;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_2__source_iter.object;
        tmp_tuple_unpack_2__source_iter.object = tmp_assign_source_30;
        Py_DECREF( old );
    }
    tmp_unpack_3 = tmp_tuple_unpack_2__source_iter.object;

    tmp_assign_source_31 = UNPACK_PARAMETER_NEXT( tmp_unpack_3, 0 );
    if ( tmp_assign_source_31 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1192;
        goto try_finally_handler_7;
    }
    if (tmp_tuple_unpack_2__element_1.object == NULL)
    {
        tmp_tuple_unpack_2__element_1.object = tmp_assign_source_31;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_2__element_1.object;
        tmp_tuple_unpack_2__element_1.object = tmp_assign_source_31;
        Py_DECREF( old );
    }
    tmp_unpack_4 = tmp_tuple_unpack_2__source_iter.object;

    tmp_assign_source_32 = UNPACK_PARAMETER_NEXT( tmp_unpack_4, 1 );
    if ( tmp_assign_source_32 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1192;
        goto try_finally_handler_7;
    }
    if (tmp_tuple_unpack_2__element_2.object == NULL)
    {
        tmp_tuple_unpack_2__element_2.object = tmp_assign_source_32;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_2__element_2.object;
        tmp_tuple_unpack_2__element_2.object = tmp_assign_source_32;
        Py_DECREF( old );
    }
    tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_2 ); assert( PyIter_Check( tmp_iterator_name_2 ) );

    tmp_iterator_attempt_2 = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

    if (likely( tmp_iterator_attempt_2 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_7;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_2 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_7;
    }
    tmp_assign_source_33 = tmp_tuple_unpack_2__element_1.object;

    if (var_api.object == NULL)
    {
        var_api.object = INCREASE_REFCOUNT( tmp_assign_source_33 );
    }
    else
    {
        PyObject *old = var_api.object;
        var_api.object = INCREASE_REFCOUNT( tmp_assign_source_33 );
        Py_DECREF( old );
    }
    tmp_assign_source_34 = tmp_tuple_unpack_2__element_2.object;

    if (var_wrap.object == NULL)
    {
        var_wrap.object = INCREASE_REFCOUNT( tmp_assign_source_34 );
    }
    else
    {
        PyObject *old = var_wrap.object;
        var_wrap.object = INCREASE_REFCOUNT( tmp_assign_source_34 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_7:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_5 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_2__source_iter.object );
    tmp_tuple_unpack_2__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_1.object );
    tmp_tuple_unpack_2__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2.object );
    tmp_tuple_unpack_2__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_5;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto try_finally_handler_6;
    }

    goto finally_end_5;
    finally_end_5:;
    tmp_cond_value_2 = var_wrap.object;

    if ( tmp_cond_value_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 63093 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1193;
        goto try_finally_handler_6;
    }

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1193;
        goto try_finally_handler_6;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_called_10 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_called_10 == NULL ))
    {
        tmp_called_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_called_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150156 ], 44, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1194;
        goto try_finally_handler_6;
    }

    tmp_call_arg_element_10 = var_nb.object;

    if ( tmp_call_arg_element_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 69874 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1194;
        goto try_finally_handler_6;
    }

    frame_function->f_lineno = 1194;
    tmp_cond_value_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_10, tmp_call_arg_element_10 );
    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1194;
        goto try_finally_handler_6;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        frame_function->f_lineno = 1194;
        goto try_finally_handler_6;
    }
    Py_DECREF( tmp_cond_value_3 );
    if (tmp_cond_truth_3 == 1)
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_source_name_4 = var_funcwrappers2.object;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151694 ], 59, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1195;
        goto try_finally_handler_6;
    }

    tmp_called_11 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_append );
    if ( tmp_called_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1195;
        goto try_finally_handler_6;
    }
    tmp_call_arg_element_11 = var_wrap.object;

    if ( tmp_call_arg_element_11 == NULL )
    {
        Py_DECREF( tmp_called_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 63093 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1195;
        goto try_finally_handler_6;
    }

    frame_function->f_lineno = 1195;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_11, tmp_call_arg_element_11 );
    Py_DECREF( tmp_called_11 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1195;
        goto try_finally_handler_6;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_6;
    branch_no_6:;
    tmp_source_name_5 = var_funcwrappers.object;

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151753 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1197;
        goto try_finally_handler_6;
    }

    tmp_called_12 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_append );
    if ( tmp_called_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1197;
        goto try_finally_handler_6;
    }
    tmp_call_arg_element_12 = var_wrap.object;

    if ( tmp_call_arg_element_12 == NULL )
    {
        Py_DECREF( tmp_called_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 63093 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1197;
        goto try_finally_handler_6;
    }

    frame_function->f_lineno = 1197;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_12, tmp_call_arg_element_12 );
    Py_DECREF( tmp_called_12 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1197;
        goto try_finally_handler_6;
    }
    Py_DECREF( tmp_unused );
    branch_end_6:;
    branch_no_5:;
    tmp_called_13 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_13 == NULL ))
    {
        tmp_called_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127020 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1198;
        goto try_finally_handler_6;
    }

    tmp_call_arg_element_13 = var_api.object;

    if ( tmp_call_arg_element_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 149915 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1198;
        goto try_finally_handler_6;
    }

    tmp_call_arg_element_14 = var_vrd.object;

    if ( tmp_call_arg_element_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129813 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1198;
        goto try_finally_handler_6;
    }

    frame_function->f_lineno = 1198;
    tmp_assign_source_35 = CALL_FUNCTION_WITH_ARGS2( tmp_called_13, tmp_call_arg_element_13, tmp_call_arg_element_14 );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1198;
        goto try_finally_handler_6;
    }
    if (var_ar.object == NULL)
    {
        var_ar.object = tmp_assign_source_35;
    }
    else
    {
        PyObject *old = var_ar.object;
        var_ar.object = tmp_assign_source_35;
        Py_DECREF( old );
    }
    tmp_called_14 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_14 == NULL ))
    {
        tmp_called_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126933 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1199;
        goto try_finally_handler_6;
    }

    tmp_call_arg_element_15 = var_rd.object;

    if ( tmp_call_arg_element_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1199;
        goto try_finally_handler_6;
    }

    tmp_call_arg_element_16 = var_ar.object;

    frame_function->f_lineno = 1199;
    tmp_assign_source_36 = CALL_FUNCTION_WITH_ARGS2( tmp_called_14, tmp_call_arg_element_15, tmp_call_arg_element_16 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1199;
        goto try_finally_handler_6;
    }
    if (var_rd.object == NULL)
    {
        var_rd.object = tmp_assign_source_36;
    }
    else
    {
        PyObject *old = var_rd.object;
        var_rd.object = tmp_assign_source_36;
        Py_DECREF( old );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1191;
        goto try_finally_handler_6;
    }
    goto loop_start_5;
    loop_end_5:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_6 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_5__iter_value.object );
    tmp_for_loop_5__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_5__for_iterator.object );
    tmp_for_loop_5__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_6;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto try_finally_handler_1;
    }

    goto finally_end_6;
    finally_end_6:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1171;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_7 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_7;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_7 != NULL )
    {
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;

        goto frame_exception_exit_1;
    }

    goto finally_end_7;
    finally_end_7:;
    // Tried code
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_common_rules );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_common_rules );
    }

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151811 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1202;
        goto try_finally_handler_8;
    }

    tmp_called_15 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_buildhooks );
    if ( tmp_called_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1202;
        goto try_finally_handler_8;
    }
    tmp_call_arg_element_17 = par_m.object;

    if ( tmp_call_arg_element_17 == NULL )
    {
        Py_DECREF( tmp_called_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 13535 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1202;
        goto try_finally_handler_8;
    }

    frame_function->f_lineno = 1202;
    tmp_iter_arg_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_15, tmp_call_arg_element_17 );
    Py_DECREF( tmp_called_15 );
    if ( tmp_iter_arg_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1202;
        goto try_finally_handler_8;
    }
    tmp_assign_source_37 = MAKE_ITERATOR( tmp_iter_arg_8 );
    Py_DECREF( tmp_iter_arg_8 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1202;
        goto try_finally_handler_8;
    }
    assert( tmp_tuple_unpack_3__source_iter.object == NULL );
    tmp_tuple_unpack_3__source_iter.object = tmp_assign_source_37;

    tmp_unpack_5 = tmp_tuple_unpack_3__source_iter.object;

    tmp_assign_source_38 = UNPACK_PARAMETER_NEXT( tmp_unpack_5, 0 );
    if ( tmp_assign_source_38 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1202;
        goto try_finally_handler_8;
    }
    assert( tmp_tuple_unpack_3__element_1.object == NULL );
    tmp_tuple_unpack_3__element_1.object = tmp_assign_source_38;

    tmp_unpack_6 = tmp_tuple_unpack_3__source_iter.object;

    tmp_assign_source_39 = UNPACK_PARAMETER_NEXT( tmp_unpack_6, 1 );
    if ( tmp_assign_source_39 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1202;
        goto try_finally_handler_8;
    }
    assert( tmp_tuple_unpack_3__element_2.object == NULL );
    tmp_tuple_unpack_3__element_2.object = tmp_assign_source_39;

    tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_3 ); assert( PyIter_Check( tmp_iterator_name_3 ) );

    tmp_iterator_attempt_3 = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

    if (likely( tmp_iterator_attempt_3 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_8;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_3 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_8;
    }
    tmp_assign_source_40 = tmp_tuple_unpack_3__element_1.object;

    assert( var_cr.object == NULL );
    var_cr.object = INCREASE_REFCOUNT( tmp_assign_source_40 );

    tmp_assign_source_41 = tmp_tuple_unpack_3__element_2.object;

    if (var_wrap.object == NULL)
    {
        var_wrap.object = INCREASE_REFCOUNT( tmp_assign_source_41 );
    }
    else
    {
        PyObject *old = var_wrap.object;
        var_wrap.object = INCREASE_REFCOUNT( tmp_assign_source_41 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_8:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_8 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_3__source_iter.object );
    tmp_tuple_unpack_3__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_1.object );
    tmp_tuple_unpack_3__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_2.object );
    tmp_tuple_unpack_3__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_8;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_8 != NULL )
    {
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;

        goto frame_exception_exit_1;
    }

    goto finally_end_8;
    finally_end_8:;
    tmp_cond_value_4 = var_wrap.object;

    if ( tmp_cond_value_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 63093 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1203;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1203;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_4 == 1)
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_source_name_7 = var_funcwrappers.object;

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151753 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1204;
        goto frame_exception_exit_1;
    }

    tmp_called_16 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_append );
    if ( tmp_called_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1204;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_18 = var_wrap.object;

    if ( tmp_call_arg_element_18 == NULL )
    {
        Py_DECREF( tmp_called_16 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 63093 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1204;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1204;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_16, tmp_call_arg_element_18 );
    Py_DECREF( tmp_called_16 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1204;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_7:;
    tmp_called_17 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_17 == NULL ))
    {
        tmp_called_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_17 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127020 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1205;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_19 = var_cr.object;

    if ( tmp_call_arg_element_19 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151852 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1205;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_20 = var_vrd.object;

    if ( tmp_call_arg_element_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129813 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1205;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1205;
    tmp_assign_source_42 = CALL_FUNCTION_WITH_ARGS2( tmp_called_17, tmp_call_arg_element_19, tmp_call_arg_element_20 );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1205;
        goto frame_exception_exit_1;
    }
    if (var_ar.object == NULL)
    {
        var_ar.object = tmp_assign_source_42;
    }
    else
    {
        PyObject *old = var_ar.object;
        var_ar.object = tmp_assign_source_42;
        Py_DECREF( old );
    }
    tmp_called_18 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_18 == NULL ))
    {
        tmp_called_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_18 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126933 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1206;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_21 = var_rd.object;

    if ( tmp_call_arg_element_21 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1206;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_22 = var_ar.object;

    frame_function->f_lineno = 1206;
    tmp_assign_source_43 = CALL_FUNCTION_WITH_ARGS2( tmp_called_18, tmp_call_arg_element_21, tmp_call_arg_element_22 );
    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1206;
        goto frame_exception_exit_1;
    }
    if (var_rd.object == NULL)
    {
        var_rd.object = tmp_assign_source_43;
    }
    else
    {
        PyObject *old = var_rd.object;
        var_rd.object = tmp_assign_source_43;
        Py_DECREF( old );
    }
    // Tried code
    tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_f90mod_rules );

    if (unlikely( tmp_source_name_8 == NULL ))
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_f90mod_rules );
    }

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 146977 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1209;
        goto try_finally_handler_9;
    }

    tmp_called_19 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_buildhooks );
    if ( tmp_called_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1209;
        goto try_finally_handler_9;
    }
    tmp_call_arg_element_23 = par_m.object;

    if ( tmp_call_arg_element_23 == NULL )
    {
        Py_DECREF( tmp_called_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 13535 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1209;
        goto try_finally_handler_9;
    }

    frame_function->f_lineno = 1209;
    tmp_iter_arg_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_19, tmp_call_arg_element_23 );
    Py_DECREF( tmp_called_19 );
    if ( tmp_iter_arg_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1209;
        goto try_finally_handler_9;
    }
    tmp_assign_source_44 = MAKE_ITERATOR( tmp_iter_arg_9 );
    Py_DECREF( tmp_iter_arg_9 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1209;
        goto try_finally_handler_9;
    }
    assert( tmp_tuple_unpack_4__source_iter.object == NULL );
    tmp_tuple_unpack_4__source_iter.object = tmp_assign_source_44;

    tmp_unpack_7 = tmp_tuple_unpack_4__source_iter.object;

    tmp_assign_source_45 = UNPACK_PARAMETER_NEXT( tmp_unpack_7, 0 );
    if ( tmp_assign_source_45 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1209;
        goto try_finally_handler_9;
    }
    assert( tmp_tuple_unpack_4__element_1.object == NULL );
    tmp_tuple_unpack_4__element_1.object = tmp_assign_source_45;

    tmp_unpack_8 = tmp_tuple_unpack_4__source_iter.object;

    tmp_assign_source_46 = UNPACK_PARAMETER_NEXT( tmp_unpack_8, 1 );
    if ( tmp_assign_source_46 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1209;
        goto try_finally_handler_9;
    }
    assert( tmp_tuple_unpack_4__element_2.object == NULL );
    tmp_tuple_unpack_4__element_2.object = tmp_assign_source_46;

    tmp_iterator_name_4 = tmp_tuple_unpack_4__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_4 ); assert( PyIter_Check( tmp_iterator_name_4 ) );

    tmp_iterator_attempt_4 = (*Py_TYPE( tmp_iterator_name_4 )->tp_iternext)( tmp_iterator_name_4 );

    if (likely( tmp_iterator_attempt_4 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_9;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_4 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_9;
    }
    tmp_assign_source_47 = tmp_tuple_unpack_4__element_1.object;

    assert( var_mr.object == NULL );
    var_mr.object = INCREASE_REFCOUNT( tmp_assign_source_47 );

    tmp_assign_source_48 = tmp_tuple_unpack_4__element_2.object;

    if (var_wrap.object == NULL)
    {
        var_wrap.object = INCREASE_REFCOUNT( tmp_assign_source_48 );
    }
    else
    {
        PyObject *old = var_wrap.object;
        var_wrap.object = INCREASE_REFCOUNT( tmp_assign_source_48 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_9:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_9 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_4__source_iter.object );
    tmp_tuple_unpack_4__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_4__element_1.object );
    tmp_tuple_unpack_4__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_4__element_2.object );
    tmp_tuple_unpack_4__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_9;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_9 != NULL )
    {
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;

        goto frame_exception_exit_1;
    }

    goto finally_end_9;
    finally_end_9:;
    tmp_cond_value_5 = var_wrap.object;

    if ( tmp_cond_value_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 63093 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1210;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1210;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_5 == 1)
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_source_name_9 = var_funcwrappers2.object;

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151694 ], 59, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1211;
        goto frame_exception_exit_1;
    }

    tmp_called_20 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_append );
    if ( tmp_called_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1211;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_24 = var_wrap.object;

    if ( tmp_call_arg_element_24 == NULL )
    {
        Py_DECREF( tmp_called_20 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 63093 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1211;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1211;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_20, tmp_call_arg_element_24 );
    Py_DECREF( tmp_called_20 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1211;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_8:;
    tmp_called_21 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_21 == NULL ))
    {
        tmp_called_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_21 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127020 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1212;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_25 = var_mr.object;

    if ( tmp_call_arg_element_25 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151900 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1212;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_26 = var_vrd.object;

    if ( tmp_call_arg_element_26 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129813 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1212;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1212;
    tmp_assign_source_49 = CALL_FUNCTION_WITH_ARGS2( tmp_called_21, tmp_call_arg_element_25, tmp_call_arg_element_26 );
    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1212;
        goto frame_exception_exit_1;
    }
    if (var_ar.object == NULL)
    {
        var_ar.object = tmp_assign_source_49;
    }
    else
    {
        PyObject *old = var_ar.object;
        var_ar.object = tmp_assign_source_49;
        Py_DECREF( old );
    }
    tmp_called_22 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_22 == NULL ))
    {
        tmp_called_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_22 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126933 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1213;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_27 = var_rd.object;

    if ( tmp_call_arg_element_27 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1213;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_28 = var_ar.object;

    frame_function->f_lineno = 1213;
    tmp_assign_source_50 = CALL_FUNCTION_WITH_ARGS2( tmp_called_22, tmp_call_arg_element_27, tmp_call_arg_element_28 );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1213;
        goto frame_exception_exit_1;
    }
    if (var_rd.object == NULL)
    {
        var_rd.object = tmp_assign_source_50;
    }
    else
    {
        PyObject *old = var_rd.object;
        var_rd.object = tmp_assign_source_50;
        Py_DECREF( old );
    }
    tmp_iter_arg_10 = par_um.object;

    if ( tmp_iter_arg_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129354 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1215;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_51 = MAKE_ITERATOR( tmp_iter_arg_10 );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1215;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_6__for_iterator.object == NULL );
    tmp_for_loop_6__for_iterator.object = tmp_assign_source_51;

    // Tried code
    loop_start_6:;
    tmp_next_source_6 = tmp_for_loop_6__for_iterator.object;

    tmp_assign_source_52 = ITERATOR_NEXT( tmp_next_source_6 );
    if (tmp_assign_source_52 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_6;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1215;
            goto try_finally_handler_10;
        }
    }

    if (tmp_for_loop_6__iter_value.object == NULL)
    {
        tmp_for_loop_6__iter_value.object = tmp_assign_source_52;
    }
    else
    {
        PyObject *old = tmp_for_loop_6__iter_value.object;
        tmp_for_loop_6__iter_value.object = tmp_assign_source_52;
        Py_DECREF( old );
    }
    tmp_assign_source_53 = tmp_for_loop_6__iter_value.object;

    if (var_u.object == NULL)
    {
        var_u.object = INCREASE_REFCOUNT( tmp_assign_source_53 );
    }
    else
    {
        PyObject *old = var_u.object;
        var_u.object = INCREASE_REFCOUNT( tmp_assign_source_53 );
        Py_DECREF( old );
    }
    tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_use_rules );

    if (unlikely( tmp_source_name_10 == NULL ))
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_use_rules );
    }

    if ( tmp_source_name_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151948 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1216;
        goto try_finally_handler_10;
    }

    tmp_called_23 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_buildusevars );
    if ( tmp_called_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1216;
        goto try_finally_handler_10;
    }
    tmp_call_arg_element_29 = var_u.object;

    tmp_subscr_target_9 = par_m.object;

    if ( tmp_subscr_target_9 == NULL )
    {
        Py_DECREF( tmp_called_23 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 13535 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1216;
        goto try_finally_handler_10;
    }

    tmp_subscr_subscript_9 = const_str_plain_use;
    tmp_subscr_target_8 = LOOKUP_SUBSCRIPT( tmp_subscr_target_9, tmp_subscr_subscript_9 );
    if ( tmp_subscr_target_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_23 );

        frame_function->f_lineno = 1216;
        goto try_finally_handler_10;
    }
    tmp_subscr_target_10 = var_u.object;

    tmp_subscr_subscript_10 = const_str_plain_name;
    tmp_subscr_subscript_8 = LOOKUP_SUBSCRIPT( tmp_subscr_target_10, tmp_subscr_subscript_10 );
    if ( tmp_subscr_subscript_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_23 );
        Py_DECREF( tmp_subscr_target_8 );

        frame_function->f_lineno = 1216;
        goto try_finally_handler_10;
    }
    tmp_call_arg_element_30 = LOOKUP_SUBSCRIPT( tmp_subscr_target_8, tmp_subscr_subscript_8 );
    Py_DECREF( tmp_subscr_target_8 );
    Py_DECREF( tmp_subscr_subscript_8 );
    if ( tmp_call_arg_element_30 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_23 );

        frame_function->f_lineno = 1216;
        goto try_finally_handler_10;
    }
    frame_function->f_lineno = 1216;
    tmp_assign_source_54 = CALL_FUNCTION_WITH_ARGS2( tmp_called_23, tmp_call_arg_element_29, tmp_call_arg_element_30 );
    Py_DECREF( tmp_called_23 );
    Py_DECREF( tmp_call_arg_element_30 );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1216;
        goto try_finally_handler_10;
    }
    if (var_ar.object == NULL)
    {
        var_ar.object = tmp_assign_source_54;
    }
    else
    {
        PyObject *old = var_ar.object;
        var_ar.object = tmp_assign_source_54;
        Py_DECREF( old );
    }
    tmp_called_24 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_24 == NULL ))
    {
        tmp_called_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_24 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126933 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1217;
        goto try_finally_handler_10;
    }

    tmp_call_arg_element_31 = var_rd.object;

    if ( tmp_call_arg_element_31 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1217;
        goto try_finally_handler_10;
    }

    tmp_call_arg_element_32 = var_ar.object;

    frame_function->f_lineno = 1217;
    tmp_assign_source_55 = CALL_FUNCTION_WITH_ARGS2( tmp_called_24, tmp_call_arg_element_31, tmp_call_arg_element_32 );
    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1217;
        goto try_finally_handler_10;
    }
    if (var_rd.object == NULL)
    {
        var_rd.object = tmp_assign_source_55;
    }
    else
    {
        PyObject *old = var_rd.object;
        var_rd.object = tmp_assign_source_55;
        Py_DECREF( old );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1215;
        goto try_finally_handler_10;
    }
    goto loop_start_6;
    loop_end_6:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_10:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_10 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_6__iter_value.object );
    tmp_for_loop_6__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_6__for_iterator.object );
    tmp_for_loop_6__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_10;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_10 != NULL )
    {
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;

        goto frame_exception_exit_1;
    }

    goto finally_end_10;
    finally_end_10:;
    tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_11 == NULL ))
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1219;
        goto frame_exception_exit_1;
    }

    tmp_called_25 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_get_needs );
    if ( tmp_called_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1219;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1219;
    tmp_assign_source_56 = CALL_FUNCTION_NO_ARGS( tmp_called_25 );
    Py_DECREF( tmp_called_25 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1219;
        goto frame_exception_exit_1;
    }
    assert( var_needs.object == NULL );
    var_needs.object = tmp_assign_source_56;

    tmp_assign_source_57 = PyDict_New();
    assert( var_code.object == NULL );
    var_code.object = tmp_assign_source_57;

    tmp_source_name_12 = var_needs.object;

    tmp_called_26 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_keys );
    if ( tmp_called_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1221;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1221;
    tmp_iter_arg_11 = CALL_FUNCTION_NO_ARGS( tmp_called_26 );
    Py_DECREF( tmp_called_26 );
    if ( tmp_iter_arg_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1221;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_58 = MAKE_ITERATOR( tmp_iter_arg_11 );
    Py_DECREF( tmp_iter_arg_11 );
    if ( tmp_assign_source_58 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1221;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_7__for_iterator.object == NULL );
    tmp_for_loop_7__for_iterator.object = tmp_assign_source_58;

    // Tried code
    loop_start_7:;
    tmp_next_source_7 = tmp_for_loop_7__for_iterator.object;

    tmp_assign_source_59 = ITERATOR_NEXT( tmp_next_source_7 );
    if (tmp_assign_source_59 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_7;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1221;
            goto try_finally_handler_11;
        }
    }

    if (tmp_for_loop_7__iter_value.object == NULL)
    {
        tmp_for_loop_7__iter_value.object = tmp_assign_source_59;
    }
    else
    {
        PyObject *old = tmp_for_loop_7__iter_value.object;
        tmp_for_loop_7__iter_value.object = tmp_assign_source_59;
        Py_DECREF( old );
    }
    tmp_assign_source_60 = tmp_for_loop_7__iter_value.object;

    if (var_n.object == NULL)
    {
        var_n.object = INCREASE_REFCOUNT( tmp_assign_source_60 );
    }
    else
    {
        PyObject *old = var_n.object;
        var_n.object = INCREASE_REFCOUNT( tmp_assign_source_60 );
        Py_DECREF( old );
    }
    tmp_ass_subvalue_3 = PyList_New( 0 );
    tmp_ass_subscribed_3 = var_code.object;

    if ( tmp_ass_subscribed_3 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25569 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1222;
        goto try_finally_handler_11;
    }

    tmp_ass_subscript_3 = var_n.object;

    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3 );
    Py_DECREF( tmp_ass_subvalue_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1222;
        goto try_finally_handler_11;
    }
    tmp_subscr_target_11 = var_needs.object;

    if ( tmp_subscr_target_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151986 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1223;
        goto try_finally_handler_11;
    }

    tmp_subscr_subscript_11 = var_n.object;

    tmp_iter_arg_12 = LOOKUP_SUBSCRIPT( tmp_subscr_target_11, tmp_subscr_subscript_11 );
    if ( tmp_iter_arg_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1223;
        goto try_finally_handler_11;
    }
    tmp_assign_source_61 = MAKE_ITERATOR( tmp_iter_arg_12 );
    Py_DECREF( tmp_iter_arg_12 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1223;
        goto try_finally_handler_11;
    }
    if (tmp_for_loop_8__for_iterator.object == NULL)
    {
        tmp_for_loop_8__for_iterator.object = tmp_assign_source_61;
    }
    else
    {
        PyObject *old = tmp_for_loop_8__for_iterator.object;
        tmp_for_loop_8__for_iterator.object = tmp_assign_source_61;
        Py_DECREF( old );
    }
    // Tried code
    loop_start_8:;
    tmp_next_source_8 = tmp_for_loop_8__for_iterator.object;

    tmp_assign_source_62 = ITERATOR_NEXT( tmp_next_source_8 );
    if (tmp_assign_source_62 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_8;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1223;
            goto try_finally_handler_12;
        }
    }

    if (tmp_for_loop_8__iter_value.object == NULL)
    {
        tmp_for_loop_8__iter_value.object = tmp_assign_source_62;
    }
    else
    {
        PyObject *old = tmp_for_loop_8__iter_value.object;
        tmp_for_loop_8__iter_value.object = tmp_assign_source_62;
        Py_DECREF( old );
    }
    tmp_assign_source_63 = tmp_for_loop_8__iter_value.object;

    if (var_k.object == NULL)
    {
        var_k.object = INCREASE_REFCOUNT( tmp_assign_source_63 );
    }
    else
    {
        PyObject *old = var_k.object;
        var_k.object = INCREASE_REFCOUNT( tmp_assign_source_63 );
        Py_DECREF( old );
    }
    tmp_assign_source_64 = const_str_empty;
    if (var_c.object == NULL)
    {
        var_c.object = INCREASE_REFCOUNT( tmp_assign_source_64 );
    }
    else
    {
        PyObject *old = var_c.object;
        var_c.object = INCREASE_REFCOUNT( tmp_assign_source_64 );
        Py_DECREF( old );
    }
    tmp_compare_left_4 = var_k.object;

    tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_13 == NULL ))
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1225;
        goto try_finally_handler_12;
    }

    tmp_compare_right_4 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_includes0 );
    if ( tmp_compare_right_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1225;
        goto try_finally_handler_12;
    }
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    if ( tmp_cmp_In_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_4 );

        frame_function->f_lineno = 1225;
        goto try_finally_handler_12;
    }
    Py_DECREF( tmp_compare_right_4 );
    if (tmp_cmp_In_2 == 1)
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_14 == NULL ))
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1226;
        goto try_finally_handler_12;
    }

    tmp_subscr_target_12 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_includes0 );
    if ( tmp_subscr_target_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1226;
        goto try_finally_handler_12;
    }
    tmp_subscr_subscript_12 = var_k.object;

    tmp_assign_source_65 = LOOKUP_SUBSCRIPT( tmp_subscr_target_12, tmp_subscr_subscript_12 );
    Py_DECREF( tmp_subscr_target_12 );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1226;
        goto try_finally_handler_12;
    }
    assert( var_c.object != NULL );
    {
        PyObject *old = var_c.object;
        var_c.object = tmp_assign_source_65;
        Py_DECREF( old );
    }

    goto branch_end_9;
    branch_no_9:;
    tmp_compare_left_5 = var_k.object;

    tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_15 == NULL ))
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1227;
        goto try_finally_handler_12;
    }

    tmp_compare_right_5 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_includes );
    if ( tmp_compare_right_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1227;
        goto try_finally_handler_12;
    }
    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    if ( tmp_cmp_In_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_5 );

        frame_function->f_lineno = 1227;
        goto try_finally_handler_12;
    }
    Py_DECREF( tmp_compare_right_5 );
    if (tmp_cmp_In_3 == 1)
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_16 == NULL ))
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_16 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1228;
        goto try_finally_handler_12;
    }

    tmp_subscr_target_13 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_includes );
    if ( tmp_subscr_target_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1228;
        goto try_finally_handler_12;
    }
    tmp_subscr_subscript_13 = var_k.object;

    tmp_assign_source_66 = LOOKUP_SUBSCRIPT( tmp_subscr_target_13, tmp_subscr_subscript_13 );
    Py_DECREF( tmp_subscr_target_13 );
    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1228;
        goto try_finally_handler_12;
    }
    assert( var_c.object != NULL );
    {
        PyObject *old = var_c.object;
        var_c.object = tmp_assign_source_66;
        Py_DECREF( old );
    }

    goto branch_end_10;
    branch_no_10:;
    tmp_compare_left_6 = var_k.object;

    tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_17 == NULL ))
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_17 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1229;
        goto try_finally_handler_12;
    }

    tmp_compare_right_6 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_userincludes );
    if ( tmp_compare_right_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1229;
        goto try_finally_handler_12;
    }
    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_6, tmp_compare_left_6 );
    if ( tmp_cmp_In_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_6 );

        frame_function->f_lineno = 1229;
        goto try_finally_handler_12;
    }
    Py_DECREF( tmp_compare_right_6 );
    if (tmp_cmp_In_4 == 1)
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_18 == NULL ))
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_18 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1230;
        goto try_finally_handler_12;
    }

    tmp_subscr_target_14 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_userincludes );
    if ( tmp_subscr_target_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1230;
        goto try_finally_handler_12;
    }
    tmp_subscr_subscript_14 = var_k.object;

    tmp_assign_source_67 = LOOKUP_SUBSCRIPT( tmp_subscr_target_14, tmp_subscr_subscript_14 );
    Py_DECREF( tmp_subscr_target_14 );
    if ( tmp_assign_source_67 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1230;
        goto try_finally_handler_12;
    }
    assert( var_c.object != NULL );
    {
        PyObject *old = var_c.object;
        var_c.object = tmp_assign_source_67;
        Py_DECREF( old );
    }

    goto branch_end_11;
    branch_no_11:;
    tmp_compare_left_7 = var_k.object;

    tmp_source_name_19 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_19 == NULL ))
    {
        tmp_source_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_19 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1231;
        goto try_finally_handler_12;
    }

    tmp_compare_right_7 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_typedefs );
    if ( tmp_compare_right_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1231;
        goto try_finally_handler_12;
    }
    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_7, tmp_compare_left_7 );
    if ( tmp_cmp_In_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_7 );

        frame_function->f_lineno = 1231;
        goto try_finally_handler_12;
    }
    Py_DECREF( tmp_compare_right_7 );
    if (tmp_cmp_In_5 == 1)
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_source_name_20 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_20 == NULL ))
    {
        tmp_source_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1232;
        goto try_finally_handler_12;
    }

    tmp_subscr_target_15 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_typedefs );
    if ( tmp_subscr_target_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1232;
        goto try_finally_handler_12;
    }
    tmp_subscr_subscript_15 = var_k.object;

    tmp_assign_source_68 = LOOKUP_SUBSCRIPT( tmp_subscr_target_15, tmp_subscr_subscript_15 );
    Py_DECREF( tmp_subscr_target_15 );
    if ( tmp_assign_source_68 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1232;
        goto try_finally_handler_12;
    }
    assert( var_c.object != NULL );
    {
        PyObject *old = var_c.object;
        var_c.object = tmp_assign_source_68;
        Py_DECREF( old );
    }

    goto branch_end_12;
    branch_no_12:;
    tmp_compare_left_8 = var_k.object;

    tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_21 == NULL ))
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_21 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1233;
        goto try_finally_handler_12;
    }

    tmp_compare_right_8 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_typedefs_generated );
    if ( tmp_compare_right_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1233;
        goto try_finally_handler_12;
    }
    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    if ( tmp_cmp_In_6 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_8 );

        frame_function->f_lineno = 1233;
        goto try_finally_handler_12;
    }
    Py_DECREF( tmp_compare_right_8 );
    if (tmp_cmp_In_6 == 1)
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_source_name_22 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_22 == NULL ))
    {
        tmp_source_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_22 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1234;
        goto try_finally_handler_12;
    }

    tmp_subscr_target_16 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_typedefs_generated );
    if ( tmp_subscr_target_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1234;
        goto try_finally_handler_12;
    }
    tmp_subscr_subscript_16 = var_k.object;

    tmp_assign_source_69 = LOOKUP_SUBSCRIPT( tmp_subscr_target_16, tmp_subscr_subscript_16 );
    Py_DECREF( tmp_subscr_target_16 );
    if ( tmp_assign_source_69 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1234;
        goto try_finally_handler_12;
    }
    assert( var_c.object != NULL );
    {
        PyObject *old = var_c.object;
        var_c.object = tmp_assign_source_69;
        Py_DECREF( old );
    }

    goto branch_end_13;
    branch_no_13:;
    tmp_compare_left_9 = var_k.object;

    tmp_source_name_23 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_23 == NULL ))
    {
        tmp_source_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_23 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1235;
        goto try_finally_handler_12;
    }

    tmp_compare_right_9 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_cppmacros );
    if ( tmp_compare_right_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1235;
        goto try_finally_handler_12;
    }
    tmp_cmp_In_7 = PySequence_Contains( tmp_compare_right_9, tmp_compare_left_9 );
    if ( tmp_cmp_In_7 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_9 );

        frame_function->f_lineno = 1235;
        goto try_finally_handler_12;
    }
    Py_DECREF( tmp_compare_right_9 );
    if (tmp_cmp_In_7 == 1)
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_source_name_24 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_24 == NULL ))
    {
        tmp_source_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_24 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1236;
        goto try_finally_handler_12;
    }

    tmp_subscr_target_17 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_cppmacros );
    if ( tmp_subscr_target_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1236;
        goto try_finally_handler_12;
    }
    tmp_subscr_subscript_17 = var_k.object;

    tmp_assign_source_70 = LOOKUP_SUBSCRIPT( tmp_subscr_target_17, tmp_subscr_subscript_17 );
    Py_DECREF( tmp_subscr_target_17 );
    if ( tmp_assign_source_70 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1236;
        goto try_finally_handler_12;
    }
    assert( var_c.object != NULL );
    {
        PyObject *old = var_c.object;
        var_c.object = tmp_assign_source_70;
        Py_DECREF( old );
    }

    goto branch_end_14;
    branch_no_14:;
    tmp_compare_left_10 = var_k.object;

    tmp_source_name_25 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_25 == NULL ))
    {
        tmp_source_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_25 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1237;
        goto try_finally_handler_12;
    }

    tmp_compare_right_10 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_cfuncs );
    if ( tmp_compare_right_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1237;
        goto try_finally_handler_12;
    }
    tmp_cmp_In_8 = PySequence_Contains( tmp_compare_right_10, tmp_compare_left_10 );
    if ( tmp_cmp_In_8 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_10 );

        frame_function->f_lineno = 1237;
        goto try_finally_handler_12;
    }
    Py_DECREF( tmp_compare_right_10 );
    if (tmp_cmp_In_8 == 1)
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_source_name_26 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_26 == NULL ))
    {
        tmp_source_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_26 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1238;
        goto try_finally_handler_12;
    }

    tmp_subscr_target_18 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_cfuncs );
    if ( tmp_subscr_target_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1238;
        goto try_finally_handler_12;
    }
    tmp_subscr_subscript_18 = var_k.object;

    tmp_assign_source_71 = LOOKUP_SUBSCRIPT( tmp_subscr_target_18, tmp_subscr_subscript_18 );
    Py_DECREF( tmp_subscr_target_18 );
    if ( tmp_assign_source_71 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1238;
        goto try_finally_handler_12;
    }
    assert( var_c.object != NULL );
    {
        PyObject *old = var_c.object;
        var_c.object = tmp_assign_source_71;
        Py_DECREF( old );
    }

    goto branch_end_15;
    branch_no_15:;
    tmp_compare_left_11 = var_k.object;

    tmp_source_name_27 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_27 == NULL ))
    {
        tmp_source_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_27 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1239;
        goto try_finally_handler_12;
    }

    tmp_compare_right_11 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_callbacks );
    if ( tmp_compare_right_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1239;
        goto try_finally_handler_12;
    }
    tmp_cmp_In_9 = PySequence_Contains( tmp_compare_right_11, tmp_compare_left_11 );
    if ( tmp_cmp_In_9 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_11 );

        frame_function->f_lineno = 1239;
        goto try_finally_handler_12;
    }
    Py_DECREF( tmp_compare_right_11 );
    if (tmp_cmp_In_9 == 1)
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_source_name_28 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_28 == NULL ))
    {
        tmp_source_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_28 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1240;
        goto try_finally_handler_12;
    }

    tmp_subscr_target_19 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_callbacks );
    if ( tmp_subscr_target_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1240;
        goto try_finally_handler_12;
    }
    tmp_subscr_subscript_19 = var_k.object;

    tmp_assign_source_72 = LOOKUP_SUBSCRIPT( tmp_subscr_target_19, tmp_subscr_subscript_19 );
    Py_DECREF( tmp_subscr_target_19 );
    if ( tmp_assign_source_72 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1240;
        goto try_finally_handler_12;
    }
    assert( var_c.object != NULL );
    {
        PyObject *old = var_c.object;
        var_c.object = tmp_assign_source_72;
        Py_DECREF( old );
    }

    goto branch_end_16;
    branch_no_16:;
    tmp_compare_left_12 = var_k.object;

    tmp_source_name_29 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_29 == NULL ))
    {
        tmp_source_name_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_29 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1241;
        goto try_finally_handler_12;
    }

    tmp_compare_right_12 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_f90modhooks );
    if ( tmp_compare_right_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1241;
        goto try_finally_handler_12;
    }
    tmp_cmp_In_10 = PySequence_Contains( tmp_compare_right_12, tmp_compare_left_12 );
    if ( tmp_cmp_In_10 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_12 );

        frame_function->f_lineno = 1241;
        goto try_finally_handler_12;
    }
    Py_DECREF( tmp_compare_right_12 );
    if (tmp_cmp_In_10 == 1)
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_source_name_30 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_30 == NULL ))
    {
        tmp_source_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_30 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1242;
        goto try_finally_handler_12;
    }

    tmp_subscr_target_20 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_f90modhooks );
    if ( tmp_subscr_target_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1242;
        goto try_finally_handler_12;
    }
    tmp_subscr_subscript_20 = var_k.object;

    tmp_assign_source_73 = LOOKUP_SUBSCRIPT( tmp_subscr_target_20, tmp_subscr_subscript_20 );
    Py_DECREF( tmp_subscr_target_20 );
    if ( tmp_assign_source_73 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1242;
        goto try_finally_handler_12;
    }
    assert( var_c.object != NULL );
    {
        PyObject *old = var_c.object;
        var_c.object = tmp_assign_source_73;
        Py_DECREF( old );
    }

    goto branch_end_17;
    branch_no_17:;
    tmp_compare_left_13 = var_k.object;

    tmp_source_name_31 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_31 == NULL ))
    {
        tmp_source_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_31 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1243;
        goto try_finally_handler_12;
    }

    tmp_compare_right_13 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_commonhooks );
    if ( tmp_compare_right_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1243;
        goto try_finally_handler_12;
    }
    tmp_cmp_In_11 = PySequence_Contains( tmp_compare_right_13, tmp_compare_left_13 );
    if ( tmp_cmp_In_11 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_13 );

        frame_function->f_lineno = 1243;
        goto try_finally_handler_12;
    }
    Py_DECREF( tmp_compare_right_13 );
    if (tmp_cmp_In_11 == 1)
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_source_name_32 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs );

    if (unlikely( tmp_source_name_32 == NULL ))
    {
        tmp_source_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cfuncs );
    }

    if ( tmp_source_name_32 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127059 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1244;
        goto try_finally_handler_12;
    }

    tmp_subscr_target_21 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_commonhooks );
    if ( tmp_subscr_target_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1244;
        goto try_finally_handler_12;
    }
    tmp_subscr_subscript_21 = var_k.object;

    tmp_assign_source_74 = LOOKUP_SUBSCRIPT( tmp_subscr_target_21, tmp_subscr_subscript_21 );
    Py_DECREF( tmp_subscr_target_21 );
    if ( tmp_assign_source_74 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1244;
        goto try_finally_handler_12;
    }
    assert( var_c.object != NULL );
    {
        PyObject *old = var_c.object;
        var_c.object = tmp_assign_source_74;
        Py_DECREF( old );
    }

    goto branch_end_18;
    branch_no_18:;
    tmp_called_27 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_errmess );

    if (unlikely( tmp_called_27 == NULL ))
    {
        tmp_called_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_errmess );
    }

    if ( tmp_called_27 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125842 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1246;
        goto try_finally_handler_12;
    }

    tmp_binop_left_3 = const_str_digest_5b7e03ef8781497c848bb48ecd301016;
    tmp_unary_arg_1 = var_k.object;

    tmp_binop_right_3 = UNARY_OPERATION( PyObject_Repr, tmp_unary_arg_1 );
    if ( tmp_binop_right_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1246;
        goto try_finally_handler_12;
    }
    tmp_call_arg_element_33 = BINARY_OPERATION_REMAINDER( tmp_binop_left_3, tmp_binop_right_3 );
    Py_DECREF( tmp_binop_right_3 );
    if ( tmp_call_arg_element_33 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1246;
        goto try_finally_handler_12;
    }
    frame_function->f_lineno = 1246;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_27, tmp_call_arg_element_33 );
    Py_DECREF( tmp_call_arg_element_33 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1246;
        goto try_finally_handler_12;
    }
    Py_DECREF( tmp_unused );
    goto loop_start_8;
    branch_end_18:;
    branch_end_17:;
    branch_end_16:;
    branch_end_15:;
    branch_end_14:;
    branch_end_13:;
    branch_end_12:;
    branch_end_11:;
    branch_end_10:;
    branch_end_9:;
    tmp_subscr_target_22 = var_code.object;

    if ( tmp_subscr_target_22 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25569 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1247;
        goto try_finally_handler_12;
    }

    tmp_subscr_subscript_22 = var_n.object;

    if ( tmp_subscr_subscript_22 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12516 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1247;
        goto try_finally_handler_12;
    }

    tmp_source_name_33 = LOOKUP_SUBSCRIPT( tmp_subscr_target_22, tmp_subscr_subscript_22 );
    if ( tmp_source_name_33 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1247;
        goto try_finally_handler_12;
    }
    tmp_called_28 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_append );
    Py_DECREF( tmp_source_name_33 );
    if ( tmp_called_28 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1247;
        goto try_finally_handler_12;
    }
    tmp_call_arg_element_34 = var_c.object;

    if ( tmp_call_arg_element_34 == NULL )
    {
        Py_DECREF( tmp_called_28 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 100 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1247;
        goto try_finally_handler_12;
    }

    frame_function->f_lineno = 1247;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_28, tmp_call_arg_element_34 );
    Py_DECREF( tmp_called_28 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1247;
        goto try_finally_handler_12;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1223;
        goto try_finally_handler_12;
    }
    goto loop_start_8;
    loop_end_8:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_12:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_11 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_8__iter_value.object );
    tmp_for_loop_8__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_8__for_iterator.object );
    tmp_for_loop_8__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_11;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_11 != NULL )
    {
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;

        goto try_finally_handler_11;
    }

    goto finally_end_11;
    finally_end_11:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1221;
        goto try_finally_handler_11;
    }
    goto loop_start_7;
    loop_end_7:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_11:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_12 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_7__iter_value.object );
    tmp_for_loop_7__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_7__for_iterator.object );
    tmp_for_loop_7__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_12;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_12 != NULL )
    {
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;

        goto frame_exception_exit_1;
    }

    goto finally_end_12;
    finally_end_12:;
    tmp_source_name_34 = var_mod_rules.object;

    if ( tmp_source_name_34 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152037 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1248;
        goto frame_exception_exit_1;
    }

    tmp_called_29 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_append );
    if ( tmp_called_29 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1248;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_35 = var_code.object;

    if ( tmp_call_arg_element_35 == NULL )
    {
        Py_DECREF( tmp_called_29 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25569 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1248;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1248;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_29, tmp_call_arg_element_35 );
    Py_DECREF( tmp_called_29 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1248;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_iter_arg_13 = var_mod_rules.object;

    if ( tmp_iter_arg_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152037 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1249;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_75 = MAKE_ITERATOR( tmp_iter_arg_13 );
    if ( tmp_assign_source_75 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1249;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_9__for_iterator.object == NULL );
    tmp_for_loop_9__for_iterator.object = tmp_assign_source_75;

    // Tried code
    loop_start_9:;
    tmp_next_source_9 = tmp_for_loop_9__for_iterator.object;

    tmp_assign_source_76 = ITERATOR_NEXT( tmp_next_source_9 );
    if (tmp_assign_source_76 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_9;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1249;
            goto try_finally_handler_13;
        }
    }

    if (tmp_for_loop_9__iter_value.object == NULL)
    {
        tmp_for_loop_9__iter_value.object = tmp_assign_source_76;
    }
    else
    {
        PyObject *old = tmp_for_loop_9__iter_value.object;
        tmp_for_loop_9__iter_value.object = tmp_assign_source_76;
        Py_DECREF( old );
    }
    tmp_assign_source_77 = tmp_for_loop_9__iter_value.object;

    if (var_r.object == NULL)
    {
        var_r.object = INCREASE_REFCOUNT( tmp_assign_source_77 );
    }
    else
    {
        PyObject *old = var_r.object;
        var_r.object = INCREASE_REFCOUNT( tmp_assign_source_77 );
        Py_DECREF( old );
    }
    // Tried code
    tmp_cond_value_6 = NULL;
    // Tried code
    // Tried code
    tmp_assign_source_78 = NULL;
    // Tried code
    tmp_compexpr_left_1 = const_str_plain__check;
    tmp_compexpr_right_1 = var_r.object;

    tmp_assign_source_79 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_assign_source_79 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1250;
        goto try_finally_handler_17;
    }
    if (tmp_and_1__value_1.object == NULL)
    {
        tmp_and_1__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_79 );
    }
    else
    {
        PyObject *old = tmp_and_1__value_1.object;
        tmp_and_1__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_79 );
        Py_DECREF( old );
    }
    tmp_cond_value_7 = tmp_and_1__value_1.object;

    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1250;
        goto try_finally_handler_17;
    }
    if (tmp_cond_truth_7 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_assign_source_78 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1.object );
        tmp_and_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_subscr_target_23 = var_r.object;

    tmp_subscr_subscript_23 = const_str_plain__check;
    tmp_called_30 = LOOKUP_SUBSCRIPT( tmp_subscr_target_23, tmp_subscr_subscript_23 );
    if ( tmp_called_30 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1250;
        goto try_finally_handler_18;
    }
    tmp_call_arg_element_36 = par_m.object;

    if ( tmp_call_arg_element_36 == NULL )
    {
        Py_DECREF( tmp_called_30 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 13535 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1250;
        goto try_finally_handler_18;
    }

    frame_function->f_lineno = 1250;
    tmp_assign_source_78 = CALL_FUNCTION_WITH_ARGS1( tmp_called_30, tmp_call_arg_element_36 );
    Py_DECREF( tmp_called_30 );
    if ( tmp_assign_source_78 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1250;
        goto try_finally_handler_18;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_18:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_13 != NULL )
    {
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;

        goto try_finally_handler_17;
    }

    goto finally_end_13;
    finally_end_13:;
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_assign_source_78 = tmp_and_1__value_1.object;

    Py_INCREF( tmp_assign_source_78 );
    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_17:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_14 != NULL )
    {
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;

        goto try_finally_handler_16;
    }

    goto finally_end_14;
    finally_end_14:;
    if (tmp_or_1__value_1.object == NULL)
    {
        tmp_or_1__value_1.object = tmp_assign_source_78;
    }
    else
    {
        PyObject *old = tmp_or_1__value_1.object;
        tmp_or_1__value_1.object = tmp_assign_source_78;
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_16:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_13 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_1__value_1.object );
    tmp_and_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_13;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_15 != NULL )
    {
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;

        goto try_finally_handler_15;
    }

    goto finally_end_15;
    finally_end_15:;
    tmp_cond_value_8 = tmp_or_1__value_1.object;

    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1250;
        goto try_finally_handler_15;
    }
    if (tmp_cond_truth_8 == 1)
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_cond_value_6 = tmp_or_1__value_1.object;

    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_cond_value_6 = NULL;
    // Tried code
    tmp_result = tmp_or_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_1__value_1.object );
        tmp_or_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_2 = const_str_plain__check;
    tmp_compexpr_right_2 = var_r.object;

    if ( tmp_compexpr_right_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 11969 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1250;
        goto try_finally_handler_19;
    }

    tmp_cond_value_6 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    if ( tmp_cond_value_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1250;
        goto try_finally_handler_19;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_19:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_16 != NULL )
    {
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;

        goto try_finally_handler_15;
    }

    goto finally_end_16;
    finally_end_16:;
    condexpr_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_15:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_17 != NULL )
    {
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;

        goto try_finally_handler_14;
    }

    goto finally_end_17;
    finally_end_17:;
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1250;
        goto try_finally_handler_14;
    }
    if (tmp_cond_truth_6 == 1)
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_called_31 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_31 == NULL ))
    {
        tmp_called_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_31 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127020 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1251;
        goto try_finally_handler_14;
    }

    tmp_call_arg_element_37 = var_r.object;

    if ( tmp_call_arg_element_37 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 11969 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1251;
        goto try_finally_handler_14;
    }

    tmp_call_arg_element_38 = var_vrd.object;

    if ( tmp_call_arg_element_38 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129813 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1251;
        goto try_finally_handler_14;
    }

    tmp_call_arg_element_39 = par_m.object;

    if ( tmp_call_arg_element_39 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 13535 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1251;
        goto try_finally_handler_14;
    }

    frame_function->f_lineno = 1251;
    tmp_assign_source_80 = CALL_FUNCTION_WITH_ARGS3( tmp_called_31, tmp_call_arg_element_37, tmp_call_arg_element_38, tmp_call_arg_element_39 );
    if ( tmp_assign_source_80 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1251;
        goto try_finally_handler_14;
    }
    if (var_ar.object == NULL)
    {
        var_ar.object = tmp_assign_source_80;
    }
    else
    {
        PyObject *old = var_ar.object;
        var_ar.object = tmp_assign_source_80;
        Py_DECREF( old );
    }
    tmp_called_32 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_32 == NULL ))
    {
        tmp_called_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_32 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126933 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1252;
        goto try_finally_handler_14;
    }

    tmp_call_arg_element_40 = var_rd.object;

    if ( tmp_call_arg_element_40 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1252;
        goto try_finally_handler_14;
    }

    tmp_call_arg_element_41 = var_ar.object;

    frame_function->f_lineno = 1252;
    tmp_assign_source_81 = CALL_FUNCTION_WITH_ARGS2( tmp_called_32, tmp_call_arg_element_40, tmp_call_arg_element_41 );
    if ( tmp_assign_source_81 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1252;
        goto try_finally_handler_14;
    }
    if (var_rd.object == NULL)
    {
        var_rd.object = tmp_assign_source_81;
    }
    else
    {
        PyObject *old = var_rd.object;
        var_rd.object = tmp_assign_source_81;
        Py_DECREF( old );
    }
    branch_no_19:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_14:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_14 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_1__value_1.object );
    tmp_or_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_14;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_18 != NULL )
    {
        exception_type = exception_keeper_type_18;
        exception_value = exception_keeper_value_18;
        exception_tb = exception_keeper_tb_18;

        goto try_finally_handler_13;
    }

    goto finally_end_18;
    finally_end_18:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1249;
        goto try_finally_handler_13;
    }
    goto loop_start_9;
    loop_end_9:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_13:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_15 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_9__iter_value.object );
    tmp_for_loop_9__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_9__for_iterator.object );
    tmp_for_loop_9__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_15;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_19 != NULL )
    {
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;

        goto frame_exception_exit_1;
    }

    goto finally_end_19;
    finally_end_19:;
    tmp_called_33 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_33 == NULL ))
    {
        tmp_called_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_33 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127020 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1253;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_42 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_module_rules );

    if (unlikely( tmp_call_arg_element_42 == NULL ))
    {
        tmp_call_arg_element_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_module_rules );
    }

    if ( tmp_call_arg_element_42 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152092 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1253;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_43 = var_rd.object;

    if ( tmp_call_arg_element_43 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1253;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1253;
    tmp_assign_source_82 = CALL_FUNCTION_WITH_ARGS2( tmp_called_33, tmp_call_arg_element_42, tmp_call_arg_element_43 );
    if ( tmp_assign_source_82 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1253;
        goto frame_exception_exit_1;
    }
    if (var_ar.object == NULL)
    {
        var_ar.object = tmp_assign_source_82;
    }
    else
    {
        PyObject *old = var_ar.object;
        var_ar.object = tmp_assign_source_82;
        Py_DECREF( old );
    }
    tmp_source_name_36 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_36 == NULL ))
    {
        tmp_source_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_36 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6460 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1255;
        goto frame_exception_exit_1;
    }

    tmp_source_name_35 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_path );
    if ( tmp_source_name_35 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1255;
        goto frame_exception_exit_1;
    }
    tmp_called_34 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_join );
    Py_DECREF( tmp_source_name_35 );
    if ( tmp_called_34 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1255;
        goto frame_exception_exit_1;
    }
    tmp_subscr_target_24 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscr_target_24 == NULL ))
    {
        tmp_subscr_target_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscr_target_24 == NULL )
    {
        Py_DECREF( tmp_called_34 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124432 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1255;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_24 = const_str_plain_buildpath;
    tmp_call_arg_element_44 = LOOKUP_SUBSCRIPT( tmp_subscr_target_24, tmp_subscr_subscript_24 );
    if ( tmp_call_arg_element_44 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_34 );

        frame_function->f_lineno = 1255;
        goto frame_exception_exit_1;
    }
    tmp_subscr_target_25 = var_vrd.object;

    if ( tmp_subscr_target_25 == NULL )
    {
        Py_DECREF( tmp_called_34 );
        Py_DECREF( tmp_call_arg_element_44 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129813 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1255;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_25 = const_str_plain_coutput;
    tmp_call_arg_element_45 = LOOKUP_SUBSCRIPT( tmp_subscr_target_25, tmp_subscr_subscript_25 );
    if ( tmp_call_arg_element_45 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_34 );
        Py_DECREF( tmp_call_arg_element_44 );

        frame_function->f_lineno = 1255;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1255;
    tmp_assign_source_83 = CALL_FUNCTION_WITH_ARGS2( tmp_called_34, tmp_call_arg_element_44, tmp_call_arg_element_45 );
    Py_DECREF( tmp_called_34 );
    Py_DECREF( tmp_call_arg_element_44 );
    Py_DECREF( tmp_call_arg_element_45 );
    if ( tmp_assign_source_83 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1255;
        goto frame_exception_exit_1;
    }
    assert( var_fn.object == NULL );
    var_fn.object = tmp_assign_source_83;

    tmp_ass_subvalue_4 = var_fn.object;

    tmp_ass_subscribed_4 = var_ret.object;

    if ( tmp_ass_subscribed_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 38779 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1256;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_4 = const_str_plain_csrc;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_4, tmp_ass_subscript_4, tmp_ass_subvalue_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1256;
        goto frame_exception_exit_1;
    }
    tmp_open_filename_1 = var_fn.object;

    tmp_open_mode_1 = const_str_plain_w;
    tmp_assign_source_84 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL );
    if ( tmp_assign_source_84 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1257;
        goto frame_exception_exit_1;
    }
    assert( var_f.object == NULL );
    var_f.object = tmp_assign_source_84;

    tmp_source_name_37 = var_f.object;

    tmp_called_35 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain_write );
    if ( tmp_called_35 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1258;
        goto frame_exception_exit_1;
    }
    tmp_subscr_target_26 = var_ar.object;

    tmp_subscr_subscript_26 = const_str_plain_modulebody;
    tmp_source_name_38 = LOOKUP_SUBSCRIPT( tmp_subscr_target_26, tmp_subscr_subscript_26 );
    if ( tmp_source_name_38 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_35 );

        frame_function->f_lineno = 1258;
        goto frame_exception_exit_1;
    }
    tmp_called_36 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain_replace );
    Py_DECREF( tmp_source_name_38 );
    if ( tmp_called_36 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_35 );

        frame_function->f_lineno = 1258;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_47 = const_str_chr_9;
    tmp_call_arg_element_48 = const_str_digest_23b58def11b45727d3351702515f86af;
    frame_function->f_lineno = 1258;
    tmp_call_arg_element_46 = CALL_FUNCTION_WITH_ARGS2( tmp_called_36, tmp_call_arg_element_47, tmp_call_arg_element_48 );
    Py_DECREF( tmp_called_36 );
    if ( tmp_call_arg_element_46 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_35 );

        frame_function->f_lineno = 1258;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1258;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_35, tmp_call_arg_element_46 );
    Py_DECREF( tmp_called_35 );
    Py_DECREF( tmp_call_arg_element_46 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1258;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_39 = var_f.object;

    tmp_called_37 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain_close );
    if ( tmp_called_37 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1259;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1259;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_37 );
    Py_DECREF( tmp_called_37 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1259;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_38 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_38 == NULL ))
    {
        tmp_called_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_38 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125154 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1260;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_4 = const_str_digest_cda50241a18adb04de807208df21a568;
    tmp_binop_right_4 = PyTuple_New( 2 );
    tmp_subscr_target_27 = par_m.object;

    if ( tmp_subscr_target_27 == NULL )
    {
        Py_DECREF( tmp_binop_right_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 13535 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1260;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_27 = const_str_plain_name;
    tmp_tuple_element_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_27, tmp_subscr_subscript_27 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_4 );

        frame_function->f_lineno = 1260;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_4, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_fn.object;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_binop_right_4, 1, tmp_tuple_element_1 );
    tmp_call_arg_element_49 = BINARY_OPERATION_REMAINDER( tmp_binop_left_4, tmp_binop_right_4 );
    Py_DECREF( tmp_binop_right_4 );
    if ( tmp_call_arg_element_49 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1260;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1260;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_38, tmp_call_arg_element_49 );
    Py_DECREF( tmp_call_arg_element_49 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1260;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_subscr_target_28 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscr_target_28 == NULL ))
    {
        tmp_subscr_target_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscr_target_28 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124432 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1262;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_28 = const_str_plain_dorestdoc;
    tmp_cond_value_9 = LOOKUP_SUBSCRIPT( tmp_subscr_target_28, tmp_subscr_subscript_28 );
    if ( tmp_cond_value_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1262;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_9 );

        frame_function->f_lineno = 1262;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_9 );
    if (tmp_cond_truth_9 == 1)
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_source_name_41 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_41 == NULL ))
    {
        tmp_source_name_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_41 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6460 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1263;
        goto frame_exception_exit_1;
    }

    tmp_source_name_40 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain_path );
    if ( tmp_source_name_40 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1263;
        goto frame_exception_exit_1;
    }
    tmp_called_39 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain_join );
    Py_DECREF( tmp_source_name_40 );
    if ( tmp_called_39 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1263;
        goto frame_exception_exit_1;
    }
    tmp_subscr_target_29 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscr_target_29 == NULL ))
    {
        tmp_subscr_target_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscr_target_29 == NULL )
    {
        Py_DECREF( tmp_called_39 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124432 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1263;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_29 = const_str_plain_buildpath;
    tmp_call_arg_element_50 = LOOKUP_SUBSCRIPT( tmp_subscr_target_29, tmp_subscr_subscript_29 );
    if ( tmp_call_arg_element_50 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_39 );

        frame_function->f_lineno = 1263;
        goto frame_exception_exit_1;
    }
    tmp_subscr_target_30 = var_vrd.object;

    if ( tmp_subscr_target_30 == NULL )
    {
        Py_DECREF( tmp_called_39 );
        Py_DECREF( tmp_call_arg_element_50 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129813 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1263;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_30 = const_str_plain_modulename;
    tmp_binop_left_5 = LOOKUP_SUBSCRIPT( tmp_subscr_target_30, tmp_subscr_subscript_30 );
    if ( tmp_binop_left_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_39 );
        Py_DECREF( tmp_call_arg_element_50 );

        frame_function->f_lineno = 1263;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_5 = const_str_digest_71830f14f0828044f06e530273435a27;
    tmp_call_arg_element_51 = BINARY_OPERATION_ADD( tmp_binop_left_5, tmp_binop_right_5 );
    Py_DECREF( tmp_binop_left_5 );
    if ( tmp_call_arg_element_51 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_39 );
        Py_DECREF( tmp_call_arg_element_50 );

        frame_function->f_lineno = 1263;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1263;
    tmp_assign_source_85 = CALL_FUNCTION_WITH_ARGS2( tmp_called_39, tmp_call_arg_element_50, tmp_call_arg_element_51 );
    Py_DECREF( tmp_called_39 );
    Py_DECREF( tmp_call_arg_element_50 );
    Py_DECREF( tmp_call_arg_element_51 );
    if ( tmp_assign_source_85 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1263;
        goto frame_exception_exit_1;
    }
    assert( var_fn.object != NULL );
    {
        PyObject *old = var_fn.object;
        var_fn.object = tmp_assign_source_85;
        Py_DECREF( old );
    }

    tmp_open_filename_2 = var_fn.object;

    tmp_open_mode_2 = const_str_plain_w;
    tmp_assign_source_86 = BUILTIN_OPEN( tmp_open_filename_2, tmp_open_mode_2, NULL );
    if ( tmp_assign_source_86 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1264;
        goto frame_exception_exit_1;
    }
    assert( var_f.object != NULL );
    {
        PyObject *old = var_f.object;
        var_f.object = tmp_assign_source_86;
        Py_DECREF( old );
    }

    tmp_source_name_42 = var_f.object;

    tmp_called_40 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain_write );
    if ( tmp_called_40 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1265;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_52 = const_str_digest_c32335831cabcefadffa803ef4902569;
    frame_function->f_lineno = 1265;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_40, tmp_call_arg_element_52 );
    Py_DECREF( tmp_called_40 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1265;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_43 = var_f.object;

    tmp_called_41 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain_write );
    if ( tmp_called_41 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1266;
        goto frame_exception_exit_1;
    }
    tmp_source_name_44 = const_str_newline;
    tmp_called_42 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain_join );
    if ( tmp_called_42 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_41 );

        frame_function->f_lineno = 1266;
        goto frame_exception_exit_1;
    }
    tmp_subscr_target_31 = var_ar.object;

    tmp_subscr_subscript_31 = const_str_plain_restdoc;
    tmp_call_arg_element_54 = LOOKUP_SUBSCRIPT( tmp_subscr_target_31, tmp_subscr_subscript_31 );
    if ( tmp_call_arg_element_54 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_41 );
        Py_DECREF( tmp_called_42 );

        frame_function->f_lineno = 1266;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1266;
    tmp_call_arg_element_53 = CALL_FUNCTION_WITH_ARGS1( tmp_called_42, tmp_call_arg_element_54 );
    Py_DECREF( tmp_called_42 );
    Py_DECREF( tmp_call_arg_element_54 );
    if ( tmp_call_arg_element_53 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_41 );

        frame_function->f_lineno = 1266;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1266;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_41, tmp_call_arg_element_53 );
    Py_DECREF( tmp_called_41 );
    Py_DECREF( tmp_call_arg_element_53 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1266;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_45 = var_f.object;

    tmp_called_43 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain_close );
    if ( tmp_called_43 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1267;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1267;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_43 );
    Py_DECREF( tmp_called_43 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1267;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_44 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_44 == NULL ))
    {
        tmp_called_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_44 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125154 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1268;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_6 = const_str_digest_e38fb2055690700b05e7284ed8a85e3c;
    tmp_binop_right_6 = PyTuple_New( 2 );
    tmp_subscr_target_32 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscr_target_32 == NULL ))
    {
        tmp_subscr_target_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscr_target_32 == NULL )
    {
        Py_DECREF( tmp_binop_right_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124432 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1268;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_32 = const_str_plain_buildpath;
    tmp_tuple_element_2 = LOOKUP_SUBSCRIPT( tmp_subscr_target_32, tmp_subscr_subscript_32 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_6 );

        frame_function->f_lineno = 1268;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_6, 0, tmp_tuple_element_2 );
    tmp_subscr_target_33 = var_vrd.object;

    if ( tmp_subscr_target_33 == NULL )
    {
        Py_DECREF( tmp_binop_right_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129813 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1268;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_33 = const_str_plain_modulename;
    tmp_tuple_element_2 = LOOKUP_SUBSCRIPT( tmp_subscr_target_33, tmp_subscr_subscript_33 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_6 );

        frame_function->f_lineno = 1268;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_6, 1, tmp_tuple_element_2 );
    tmp_call_arg_element_55 = BINARY_OPERATION_REMAINDER( tmp_binop_left_6, tmp_binop_right_6 );
    Py_DECREF( tmp_binop_right_6 );
    if ( tmp_call_arg_element_55 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1268;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1268;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_44, tmp_call_arg_element_55 );
    Py_DECREF( tmp_call_arg_element_55 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1268;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_20:;
    tmp_subscr_target_34 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscr_target_34 == NULL ))
    {
        tmp_subscr_target_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscr_target_34 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124432 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1269;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_34 = const_str_plain_dolatexdoc;
    tmp_cond_value_10 = LOOKUP_SUBSCRIPT( tmp_subscr_target_34, tmp_subscr_subscript_34 );
    if ( tmp_cond_value_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1269;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_10 );

        frame_function->f_lineno = 1269;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_10 );
    if (tmp_cond_truth_10 == 1)
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_source_name_47 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_47 == NULL ))
    {
        tmp_source_name_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_47 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6460 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1270;
        goto frame_exception_exit_1;
    }

    tmp_source_name_46 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain_path );
    if ( tmp_source_name_46 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1270;
        goto frame_exception_exit_1;
    }
    tmp_called_45 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain_join );
    Py_DECREF( tmp_source_name_46 );
    if ( tmp_called_45 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1270;
        goto frame_exception_exit_1;
    }
    tmp_subscr_target_35 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscr_target_35 == NULL ))
    {
        tmp_subscr_target_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscr_target_35 == NULL )
    {
        Py_DECREF( tmp_called_45 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124432 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1270;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_35 = const_str_plain_buildpath;
    tmp_call_arg_element_56 = LOOKUP_SUBSCRIPT( tmp_subscr_target_35, tmp_subscr_subscript_35 );
    if ( tmp_call_arg_element_56 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_45 );

        frame_function->f_lineno = 1270;
        goto frame_exception_exit_1;
    }
    tmp_subscr_target_36 = var_vrd.object;

    if ( tmp_subscr_target_36 == NULL )
    {
        Py_DECREF( tmp_called_45 );
        Py_DECREF( tmp_call_arg_element_56 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129813 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1270;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_36 = const_str_plain_modulename;
    tmp_binop_left_7 = LOOKUP_SUBSCRIPT( tmp_subscr_target_36, tmp_subscr_subscript_36 );
    if ( tmp_binop_left_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_45 );
        Py_DECREF( tmp_call_arg_element_56 );

        frame_function->f_lineno = 1270;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_7 = const_str_digest_dbf10af0e37c0956cfea856a5a4357de;
    tmp_call_arg_element_57 = BINARY_OPERATION_ADD( tmp_binop_left_7, tmp_binop_right_7 );
    Py_DECREF( tmp_binop_left_7 );
    if ( tmp_call_arg_element_57 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_45 );
        Py_DECREF( tmp_call_arg_element_56 );

        frame_function->f_lineno = 1270;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1270;
    tmp_assign_source_87 = CALL_FUNCTION_WITH_ARGS2( tmp_called_45, tmp_call_arg_element_56, tmp_call_arg_element_57 );
    Py_DECREF( tmp_called_45 );
    Py_DECREF( tmp_call_arg_element_56 );
    Py_DECREF( tmp_call_arg_element_57 );
    if ( tmp_assign_source_87 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1270;
        goto frame_exception_exit_1;
    }
    assert( var_fn.object != NULL );
    {
        PyObject *old = var_fn.object;
        var_fn.object = tmp_assign_source_87;
        Py_DECREF( old );
    }

    tmp_ass_subvalue_5 = var_fn.object;

    tmp_ass_subscribed_5 = var_ret.object;

    if ( tmp_ass_subscribed_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 38779 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1271;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_5 = const_str_plain_ltx;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_5, tmp_ass_subscript_5, tmp_ass_subvalue_5 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1271;
        goto frame_exception_exit_1;
    }
    tmp_open_filename_3 = var_fn.object;

    tmp_open_mode_3 = const_str_plain_w;
    tmp_assign_source_88 = BUILTIN_OPEN( tmp_open_filename_3, tmp_open_mode_3, NULL );
    if ( tmp_assign_source_88 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1272;
        goto frame_exception_exit_1;
    }
    assert( var_f.object != NULL );
    {
        PyObject *old = var_f.object;
        var_f.object = tmp_assign_source_88;
        Py_DECREF( old );
    }

    tmp_source_name_48 = var_f.object;

    tmp_called_46 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain_write );
    if ( tmp_called_46 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1273;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_8 = const_str_digest_5b2f1fd139d7c2fa41a3bd15052f7cc6;
    tmp_binop_right_8 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_f2py_version );

    if (unlikely( tmp_binop_right_8 == NULL ))
    {
        tmp_binop_right_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_f2py_version );
    }

    if ( tmp_binop_right_8 == NULL )
    {
        Py_DECREF( tmp_called_46 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 144933 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1273;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_58 = BINARY_OPERATION_REMAINDER( tmp_binop_left_8, tmp_binop_right_8 );
    if ( tmp_call_arg_element_58 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_46 );

        frame_function->f_lineno = 1273;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1273;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_46, tmp_call_arg_element_58 );
    Py_DECREF( tmp_called_46 );
    Py_DECREF( tmp_call_arg_element_58 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1273;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_compare_left_14 = const_str_plain_shortlatex;
    tmp_compare_right_14 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_compare_right_14 == NULL ))
    {
        tmp_compare_right_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_compare_right_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124432 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1274;
        goto frame_exception_exit_1;
    }

    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_14, tmp_compare_left_14 );
    if ( tmp_cmp_NotIn_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1274;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_NotIn_1 == 0)
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_source_name_49 = var_f.object;

    tmp_called_47 = LOOKUP_ATTRIBUTE( tmp_source_name_49, const_str_plain_write );
    if ( tmp_called_47 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1275;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_59 = const_str_digest_fba1625b3c6ce450ca640bc284d80373;
    frame_function->f_lineno = 1275;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_47, tmp_call_arg_element_59 );
    Py_DECREF( tmp_called_47 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1275;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_22:;
    tmp_source_name_50 = var_f.object;

    tmp_called_48 = LOOKUP_ATTRIBUTE( tmp_source_name_50, const_str_plain_write );
    if ( tmp_called_48 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1276;
        goto frame_exception_exit_1;
    }
    tmp_source_name_51 = const_str_newline;
    tmp_called_49 = LOOKUP_ATTRIBUTE( tmp_source_name_51, const_str_plain_join );
    if ( tmp_called_49 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_48 );

        frame_function->f_lineno = 1276;
        goto frame_exception_exit_1;
    }
    tmp_subscr_target_37 = var_ar.object;

    tmp_subscr_subscript_37 = const_str_plain_latexdoc;
    tmp_call_arg_element_61 = LOOKUP_SUBSCRIPT( tmp_subscr_target_37, tmp_subscr_subscript_37 );
    if ( tmp_call_arg_element_61 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_48 );
        Py_DECREF( tmp_called_49 );

        frame_function->f_lineno = 1276;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1276;
    tmp_call_arg_element_60 = CALL_FUNCTION_WITH_ARGS1( tmp_called_49, tmp_call_arg_element_61 );
    Py_DECREF( tmp_called_49 );
    Py_DECREF( tmp_call_arg_element_61 );
    if ( tmp_call_arg_element_60 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_48 );

        frame_function->f_lineno = 1276;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1276;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_48, tmp_call_arg_element_60 );
    Py_DECREF( tmp_called_48 );
    Py_DECREF( tmp_call_arg_element_60 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1276;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_compare_left_15 = const_str_plain_shortlatex;
    tmp_compare_right_15 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_compare_right_15 == NULL ))
    {
        tmp_compare_right_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_compare_right_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124432 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1277;
        goto frame_exception_exit_1;
    }

    tmp_cmp_NotIn_2 = PySequence_Contains( tmp_compare_right_15, tmp_compare_left_15 );
    if ( tmp_cmp_NotIn_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1277;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_NotIn_2 == 0)
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_source_name_52 = var_f.object;

    tmp_called_50 = LOOKUP_ATTRIBUTE( tmp_source_name_52, const_str_plain_write );
    if ( tmp_called_50 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1278;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_62 = const_str_digest_5e3bedeaeb5deb1039acf2ed98489637;
    frame_function->f_lineno = 1278;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_50, tmp_call_arg_element_62 );
    Py_DECREF( tmp_called_50 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1278;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_23:;
    tmp_source_name_53 = var_f.object;

    tmp_called_51 = LOOKUP_ATTRIBUTE( tmp_source_name_53, const_str_plain_close );
    if ( tmp_called_51 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1279;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1279;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_51 );
    Py_DECREF( tmp_called_51 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1279;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_52 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_52 == NULL ))
    {
        tmp_called_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_52 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125154 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1280;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_9 = const_str_digest_d232384ee4b96c9afbc24157d4303e41;
    tmp_binop_right_9 = PyTuple_New( 2 );
    tmp_subscr_target_38 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscr_target_38 == NULL ))
    {
        tmp_subscr_target_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscr_target_38 == NULL )
    {
        Py_DECREF( tmp_binop_right_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124432 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1280;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_38 = const_str_plain_buildpath;
    tmp_tuple_element_3 = LOOKUP_SUBSCRIPT( tmp_subscr_target_38, tmp_subscr_subscript_38 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_9 );

        frame_function->f_lineno = 1280;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_9, 0, tmp_tuple_element_3 );
    tmp_subscr_target_39 = var_vrd.object;

    if ( tmp_subscr_target_39 == NULL )
    {
        Py_DECREF( tmp_binop_right_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129813 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1280;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_39 = const_str_plain_modulename;
    tmp_tuple_element_3 = LOOKUP_SUBSCRIPT( tmp_subscr_target_39, tmp_subscr_subscript_39 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_9 );

        frame_function->f_lineno = 1280;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_9, 1, tmp_tuple_element_3 );
    tmp_call_arg_element_63 = BINARY_OPERATION_REMAINDER( tmp_binop_left_9, tmp_binop_right_9 );
    Py_DECREF( tmp_binop_right_9 );
    if ( tmp_call_arg_element_63 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1280;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1280;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_52, tmp_call_arg_element_63 );
    Py_DECREF( tmp_call_arg_element_63 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1280;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_21:;
    tmp_cond_value_11 = var_funcwrappers.object;

    if ( tmp_cond_value_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151753 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1281;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1281;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_11 == 1)
    {
        goto branch_yes_24;
    }
    else
    {
        goto branch_no_24;
    }
    branch_yes_24:;
    tmp_source_name_55 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_55 == NULL ))
    {
        tmp_source_name_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_55 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6460 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1282;
        goto frame_exception_exit_1;
    }

    tmp_source_name_54 = LOOKUP_ATTRIBUTE( tmp_source_name_55, const_str_plain_path );
    if ( tmp_source_name_54 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1282;
        goto frame_exception_exit_1;
    }
    tmp_called_53 = LOOKUP_ATTRIBUTE( tmp_source_name_54, const_str_plain_join );
    Py_DECREF( tmp_source_name_54 );
    if ( tmp_called_53 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1282;
        goto frame_exception_exit_1;
    }
    tmp_subscr_target_40 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscr_target_40 == NULL ))
    {
        tmp_subscr_target_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscr_target_40 == NULL )
    {
        Py_DECREF( tmp_called_53 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124432 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1282;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_40 = const_str_plain_buildpath;
    tmp_call_arg_element_64 = LOOKUP_SUBSCRIPT( tmp_subscr_target_40, tmp_subscr_subscript_40 );
    if ( tmp_call_arg_element_64 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_53 );

        frame_function->f_lineno = 1282;
        goto frame_exception_exit_1;
    }
    tmp_subscr_target_41 = var_vrd.object;

    if ( tmp_subscr_target_41 == NULL )
    {
        Py_DECREF( tmp_called_53 );
        Py_DECREF( tmp_call_arg_element_64 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129813 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1282;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_41 = const_str_plain_f2py_wrapper_output;
    tmp_call_arg_element_65 = LOOKUP_SUBSCRIPT( tmp_subscr_target_41, tmp_subscr_subscript_41 );
    if ( tmp_call_arg_element_65 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_53 );
        Py_DECREF( tmp_call_arg_element_64 );

        frame_function->f_lineno = 1282;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1282;
    tmp_assign_source_89 = CALL_FUNCTION_WITH_ARGS2( tmp_called_53, tmp_call_arg_element_64, tmp_call_arg_element_65 );
    Py_DECREF( tmp_called_53 );
    Py_DECREF( tmp_call_arg_element_64 );
    Py_DECREF( tmp_call_arg_element_65 );
    if ( tmp_assign_source_89 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1282;
        goto frame_exception_exit_1;
    }
    assert( var_wn.object == NULL );
    var_wn.object = tmp_assign_source_89;

    tmp_ass_subvalue_6 = var_wn.object;

    tmp_ass_subscribed_6 = var_ret.object;

    if ( tmp_ass_subscribed_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 38779 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1283;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_6 = const_str_plain_fsrc;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_6, tmp_ass_subscript_6, tmp_ass_subvalue_6 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1283;
        goto frame_exception_exit_1;
    }
    tmp_open_filename_4 = var_wn.object;

    tmp_open_mode_4 = const_str_plain_w;
    tmp_assign_source_90 = BUILTIN_OPEN( tmp_open_filename_4, tmp_open_mode_4, NULL );
    if ( tmp_assign_source_90 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1284;
        goto frame_exception_exit_1;
    }
    if (var_f.object == NULL)
    {
        var_f.object = tmp_assign_source_90;
    }
    else
    {
        PyObject *old = var_f.object;
        var_f.object = tmp_assign_source_90;
        Py_DECREF( old );
    }
    tmp_source_name_56 = var_f.object;

    tmp_called_54 = LOOKUP_ATTRIBUTE( tmp_source_name_56, const_str_plain_write );
    if ( tmp_called_54 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1285;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_66 = const_str_digest_fde8d015bd498e7e13c01750c46677b5;
    frame_function->f_lineno = 1285;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_54, tmp_call_arg_element_66 );
    Py_DECREF( tmp_called_54 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1285;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_57 = var_f.object;

    tmp_called_55 = LOOKUP_ATTRIBUTE( tmp_source_name_57, const_str_plain_write );
    if ( tmp_called_55 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1286;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_10 = const_str_digest_d8eb3b4b1075e21ea19c37046b527fe3;
    tmp_binop_right_10 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_f2py_version );

    if (unlikely( tmp_binop_right_10 == NULL ))
    {
        tmp_binop_right_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_f2py_version );
    }

    if ( tmp_binop_right_10 == NULL )
    {
        Py_DECREF( tmp_called_55 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 144933 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1286;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_67 = BINARY_OPERATION_REMAINDER( tmp_binop_left_10, tmp_binop_right_10 );
    if ( tmp_call_arg_element_67 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_55 );

        frame_function->f_lineno = 1286;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1286;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_55, tmp_call_arg_element_67 );
    Py_DECREF( tmp_called_55 );
    Py_DECREF( tmp_call_arg_element_67 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1286;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_58 = var_f.object;

    tmp_called_56 = LOOKUP_ATTRIBUTE( tmp_source_name_58, const_str_plain_write );
    if ( tmp_called_56 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1287;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_68 = const_str_digest_64c014c101de059e40ab2098f7c02568;
    frame_function->f_lineno = 1287;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_56, tmp_call_arg_element_68 );
    Py_DECREF( tmp_called_56 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1287;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_91 = PyList_New( 0 );
    assert( var_lines.object == NULL );
    var_lines.object = tmp_assign_source_91;

    tmp_source_name_60 = const_str_digest_e1c06d85ae7b8b032bef47e42e4c08f9;
    tmp_called_58 = LOOKUP_ATTRIBUTE( tmp_source_name_60, const_str_plain_join );
    if ( tmp_called_58 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1289;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_69 = var_funcwrappers.object;

    if ( tmp_call_arg_element_69 == NULL )
    {
        Py_DECREF( tmp_called_58 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151753 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1289;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1289;
    tmp_binop_left_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_58, tmp_call_arg_element_69 );
    Py_DECREF( tmp_called_58 );
    if ( tmp_binop_left_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1289;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_11 = const_str_newline;
    tmp_source_name_59 = BINARY_OPERATION_ADD( tmp_binop_left_11, tmp_binop_right_11 );
    Py_DECREF( tmp_binop_left_11 );
    if ( tmp_source_name_59 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1289;
        goto frame_exception_exit_1;
    }
    tmp_called_57 = LOOKUP_ATTRIBUTE( tmp_source_name_59, const_str_plain_split );
    Py_DECREF( tmp_source_name_59 );
    if ( tmp_called_57 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1289;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_70 = const_str_newline;
    frame_function->f_lineno = 1289;
    tmp_iter_arg_14 = CALL_FUNCTION_WITH_ARGS1( tmp_called_57, tmp_call_arg_element_70 );
    Py_DECREF( tmp_called_57 );
    if ( tmp_iter_arg_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1289;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_92 = MAKE_ITERATOR( tmp_iter_arg_14 );
    Py_DECREF( tmp_iter_arg_14 );
    if ( tmp_assign_source_92 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1289;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_10__for_iterator.object == NULL );
    tmp_for_loop_10__for_iterator.object = tmp_assign_source_92;

    // Tried code
    loop_start_10:;
    tmp_next_source_10 = tmp_for_loop_10__for_iterator.object;

    tmp_assign_source_93 = ITERATOR_NEXT( tmp_next_source_10 );
    if (tmp_assign_source_93 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_10;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1289;
            goto try_finally_handler_20;
        }
    }

    if (tmp_for_loop_10__iter_value.object == NULL)
    {
        tmp_for_loop_10__iter_value.object = tmp_assign_source_93;
    }
    else
    {
        PyObject *old = tmp_for_loop_10__iter_value.object;
        tmp_for_loop_10__iter_value.object = tmp_assign_source_93;
        Py_DECREF( old );
    }
    tmp_assign_source_94 = tmp_for_loop_10__iter_value.object;

    if (var_l.object == NULL)
    {
        var_l.object = INCREASE_REFCOUNT( tmp_assign_source_94 );
    }
    else
    {
        PyObject *old = var_l.object;
        var_l.object = INCREASE_REFCOUNT( tmp_assign_source_94 );
        Py_DECREF( old );
    }
    // Tried code
    tmp_cond_value_12 = NULL;
    // Tried code
    tmp_assign_source_95 = var_l.object;

    if (tmp_and_2__value_1.object == NULL)
    {
        tmp_and_2__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_95 );
    }
    else
    {
        PyObject *old = tmp_and_2__value_1.object;
        tmp_and_2__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_95 );
        Py_DECREF( old );
    }
    tmp_cond_value_13 = tmp_and_2__value_1.object;

    tmp_cond_truth_13 = CHECK_IF_TRUE( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1290;
        goto try_finally_handler_22;
    }
    if (tmp_cond_truth_13 == 1)
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_cond_value_12 = NULL;
    // Tried code
    tmp_result = tmp_and_2__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_2__value_1.object );
        tmp_and_2__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_subscr_target_42 = var_l.object;

    tmp_subscr_subscript_42 = const_int_0;
    tmp_compexpr_left_3 = LOOKUP_SUBSCRIPT( tmp_subscr_target_42, tmp_subscr_subscript_42 );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1290;
        goto try_finally_handler_23;
    }
    tmp_compexpr_right_3 = const_str_space;
    tmp_cond_value_12 = RICH_COMPARE_EQ( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    if ( tmp_cond_value_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1290;
        goto try_finally_handler_23;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_23:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_20 != NULL )
    {
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;

        goto try_finally_handler_22;
    }

    goto finally_end_20;
    finally_end_20:;
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_cond_value_12 = tmp_and_2__value_1.object;

    Py_INCREF( tmp_cond_value_12 );
    condexpr_end_3:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_22:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_21 != NULL )
    {
        exception_type = exception_keeper_type_21;
        exception_value = exception_keeper_value_21;
        exception_tb = exception_keeper_tb_21;

        goto try_finally_handler_21;
    }

    goto finally_end_21;
    finally_end_21:;
    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_12 );

        frame_function->f_lineno = 1290;
        goto try_finally_handler_21;
    }
    Py_DECREF( tmp_cond_value_12 );
    if (tmp_cond_truth_12 == 1)
    {
        goto branch_yes_25;
    }
    else
    {
        goto branch_no_25;
    }
    branch_yes_25:;
    loop_start_11:;
    tmp_len_arg_1 = var_l.object;

    if ( tmp_len_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 20276 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1291;
        goto try_finally_handler_21;
    }

    tmp_compare_left_16 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_compare_left_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1291;
        goto try_finally_handler_21;
    }
    tmp_compare_right_16 = const_int_pos_66;
    tmp_cmp_GtE_1 = RICH_COMPARE_BOOL_GE( tmp_compare_left_16, tmp_compare_right_16 );
    if ( tmp_cmp_GtE_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_16 );

        frame_function->f_lineno = 1291;
        goto try_finally_handler_21;
    }
    Py_DECREF( tmp_compare_left_16 );
    if (tmp_cmp_GtE_1 == 1)
    {
        goto branch_no_26;
    }
    else
    {
        goto branch_yes_26;
    }
    branch_yes_26:;
    goto loop_end_11;
    branch_no_26:;
    tmp_source_name_61 = var_lines.object;

    if ( tmp_source_name_61 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 16411 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1292;
        goto try_finally_handler_21;
    }

    tmp_called_59 = LOOKUP_ATTRIBUTE( tmp_source_name_61, const_str_plain_append );
    if ( tmp_called_59 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1292;
        goto try_finally_handler_21;
    }
    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = 66;
    tmp_slice_source_2 = var_l.object;

    if ( tmp_slice_source_2 == NULL )
    {
        Py_DECREF( tmp_called_59 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 20276 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1292;
        goto try_finally_handler_21;
    }

    tmp_binop_left_12 = LOOKUP_INDEX_SLICE( tmp_slice_source_2, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_binop_left_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_59 );

        frame_function->f_lineno = 1292;
        goto try_finally_handler_21;
    }
    tmp_binop_right_12 = const_str_digest_d16b4bd4598ec2bdd698c16a87fe77c9;
    tmp_call_arg_element_71 = BINARY_OPERATION_ADD( tmp_binop_left_12, tmp_binop_right_12 );
    Py_DECREF( tmp_binop_left_12 );
    if ( tmp_call_arg_element_71 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_59 );

        frame_function->f_lineno = 1292;
        goto try_finally_handler_21;
    }
    frame_function->f_lineno = 1292;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_59, tmp_call_arg_element_71 );
    Py_DECREF( tmp_called_59 );
    Py_DECREF( tmp_call_arg_element_71 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1292;
        goto try_finally_handler_21;
    }
    Py_DECREF( tmp_unused );
    tmp_sliceslicedel_index_lower_3 = 66;
    tmp_slice_index_upper_3 = PY_SSIZE_T_MAX;
    tmp_slice_source_3 = var_l.object;

    if ( tmp_slice_source_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 20276 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1293;
        goto try_finally_handler_21;
    }

    tmp_assign_source_96 = LOOKUP_INDEX_SLICE( tmp_slice_source_3, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    if ( tmp_assign_source_96 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1293;
        goto try_finally_handler_21;
    }
    if (var_l.object == NULL)
    {
        var_l.object = tmp_assign_source_96;
    }
    else
    {
        PyObject *old = var_l.object;
        var_l.object = tmp_assign_source_96;
        Py_DECREF( old );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1291;
        goto try_finally_handler_21;
    }
    goto loop_start_11;
    loop_end_11:;
    tmp_source_name_62 = var_lines.object;

    if ( tmp_source_name_62 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 16411 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1294;
        goto try_finally_handler_21;
    }

    tmp_called_60 = LOOKUP_ATTRIBUTE( tmp_source_name_62, const_str_plain_append );
    if ( tmp_called_60 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1294;
        goto try_finally_handler_21;
    }
    tmp_binop_left_13 = var_l.object;

    tmp_binop_right_13 = const_str_newline;
    tmp_call_arg_element_72 = BINARY_OPERATION_ADD( tmp_binop_left_13, tmp_binop_right_13 );
    if ( tmp_call_arg_element_72 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_60 );

        frame_function->f_lineno = 1294;
        goto try_finally_handler_21;
    }
    frame_function->f_lineno = 1294;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_60, tmp_call_arg_element_72 );
    Py_DECREF( tmp_called_60 );
    Py_DECREF( tmp_call_arg_element_72 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1294;
        goto try_finally_handler_21;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_25;
    branch_no_25:;
    tmp_source_name_63 = var_lines.object;

    if ( tmp_source_name_63 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 16411 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1295;
        goto try_finally_handler_21;
    }

    tmp_called_61 = LOOKUP_ATTRIBUTE( tmp_source_name_63, const_str_plain_append );
    if ( tmp_called_61 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1295;
        goto try_finally_handler_21;
    }
    tmp_binop_left_14 = var_l.object;

    if ( tmp_binop_left_14 == NULL )
    {
        Py_DECREF( tmp_called_61 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 20276 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1295;
        goto try_finally_handler_21;
    }

    tmp_binop_right_14 = const_str_newline;
    tmp_call_arg_element_73 = BINARY_OPERATION_ADD( tmp_binop_left_14, tmp_binop_right_14 );
    if ( tmp_call_arg_element_73 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_61 );

        frame_function->f_lineno = 1295;
        goto try_finally_handler_21;
    }
    frame_function->f_lineno = 1295;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_61, tmp_call_arg_element_73 );
    Py_DECREF( tmp_called_61 );
    Py_DECREF( tmp_call_arg_element_73 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1295;
        goto try_finally_handler_21;
    }
    Py_DECREF( tmp_unused );
    branch_end_25:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_21:;
    exception_keeper_type_22 = exception_type;
    exception_keeper_value_22 = exception_value;
    exception_keeper_tb_22 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_16 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_2__value_1.object );
    tmp_and_2__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_16;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_22 != NULL )
    {
        exception_type = exception_keeper_type_22;
        exception_value = exception_keeper_value_22;
        exception_tb = exception_keeper_tb_22;

        goto try_finally_handler_20;
    }

    goto finally_end_22;
    finally_end_22:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1289;
        goto try_finally_handler_20;
    }
    goto loop_start_10;
    loop_end_10:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_20:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_17 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_10__iter_value.object );
    tmp_for_loop_10__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_10__for_iterator.object );
    tmp_for_loop_10__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_17;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_23 != NULL )
    {
        exception_type = exception_keeper_type_23;
        exception_value = exception_keeper_value_23;
        exception_tb = exception_keeper_tb_23;

        goto frame_exception_exit_1;
    }

    goto finally_end_23;
    finally_end_23:;
    tmp_source_name_65 = const_str_empty;
    tmp_called_63 = LOOKUP_ATTRIBUTE( tmp_source_name_65, const_str_plain_join );
    if ( tmp_called_63 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1296;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_74 = var_lines.object;

    if ( tmp_call_arg_element_74 == NULL )
    {
        Py_DECREF( tmp_called_63 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 16411 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1296;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1296;
    tmp_source_name_64 = CALL_FUNCTION_WITH_ARGS1( tmp_called_63, tmp_call_arg_element_74 );
    Py_DECREF( tmp_called_63 );
    if ( tmp_source_name_64 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1296;
        goto frame_exception_exit_1;
    }
    tmp_called_62 = LOOKUP_ATTRIBUTE( tmp_source_name_64, const_str_plain_replace );
    Py_DECREF( tmp_source_name_64 );
    if ( tmp_called_62 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1296;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_75 = const_str_digest_859fc68497e02be265b67eeb17699a77;
    tmp_call_arg_element_76 = const_str_newline;
    frame_function->f_lineno = 1296;
    tmp_assign_source_97 = CALL_FUNCTION_WITH_ARGS2( tmp_called_62, tmp_call_arg_element_75, tmp_call_arg_element_76 );
    Py_DECREF( tmp_called_62 );
    if ( tmp_assign_source_97 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1296;
        goto frame_exception_exit_1;
    }
    if (var_lines.object == NULL)
    {
        var_lines.object = tmp_assign_source_97;
    }
    else
    {
        PyObject *old = var_lines.object;
        var_lines.object = tmp_assign_source_97;
        Py_DECREF( old );
    }
    tmp_source_name_66 = var_f.object;

    if ( tmp_source_name_66 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6491 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1297;
        goto frame_exception_exit_1;
    }

    tmp_called_64 = LOOKUP_ATTRIBUTE( tmp_source_name_66, const_str_plain_write );
    if ( tmp_called_64 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1297;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_77 = var_lines.object;

    frame_function->f_lineno = 1297;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_64, tmp_call_arg_element_77 );
    Py_DECREF( tmp_called_64 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1297;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_67 = var_f.object;

    if ( tmp_source_name_67 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6491 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1298;
        goto frame_exception_exit_1;
    }

    tmp_called_65 = LOOKUP_ATTRIBUTE( tmp_source_name_67, const_str_plain_close );
    if ( tmp_called_65 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1298;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1298;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_65 );
    Py_DECREF( tmp_called_65 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1298;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_66 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_66 == NULL ))
    {
        tmp_called_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_66 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125154 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1299;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_15 = const_str_digest_c83ed1bc416d044b338832b29fb2651d;
    tmp_binop_right_15 = var_wn.object;

    if ( tmp_binop_right_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152133 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1299;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_78 = BINARY_OPERATION_REMAINDER( tmp_binop_left_15, tmp_binop_right_15 );
    if ( tmp_call_arg_element_78 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1299;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1299;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_66, tmp_call_arg_element_78 );
    Py_DECREF( tmp_call_arg_element_78 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1299;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_24:;
    tmp_cond_value_14 = var_funcwrappers2.object;

    if ( tmp_cond_value_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151694 ], 59, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1300;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_14 = CHECK_IF_TRUE( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1300;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_14 == 1)
    {
        goto branch_yes_27;
    }
    else
    {
        goto branch_no_27;
    }
    branch_yes_27:;
    tmp_source_name_69 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_69 == NULL ))
    {
        tmp_source_name_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_69 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6460 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1301;
        goto frame_exception_exit_1;
    }

    tmp_source_name_68 = LOOKUP_ATTRIBUTE( tmp_source_name_69, const_str_plain_path );
    if ( tmp_source_name_68 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1301;
        goto frame_exception_exit_1;
    }
    tmp_called_67 = LOOKUP_ATTRIBUTE( tmp_source_name_68, const_str_plain_join );
    Py_DECREF( tmp_source_name_68 );
    if ( tmp_called_67 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1301;
        goto frame_exception_exit_1;
    }
    tmp_subscr_target_43 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options );

    if (unlikely( tmp_subscr_target_43 == NULL ))
    {
        tmp_subscr_target_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_options );
    }

    if ( tmp_subscr_target_43 == NULL )
    {
        Py_DECREF( tmp_called_67 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124432 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1301;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_43 = const_str_plain_buildpath;
    tmp_call_arg_element_79 = LOOKUP_SUBSCRIPT( tmp_subscr_target_43, tmp_subscr_subscript_43 );
    if ( tmp_call_arg_element_79 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_67 );

        frame_function->f_lineno = 1301;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_16 = const_str_digest_3746a458488dce9d90d90525809f2b02;
    tmp_subscr_target_44 = var_vrd.object;

    if ( tmp_subscr_target_44 == NULL )
    {
        Py_DECREF( tmp_called_67 );
        Py_DECREF( tmp_call_arg_element_79 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129813 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1301;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_44 = const_str_plain_modulename;
    tmp_binop_right_16 = LOOKUP_SUBSCRIPT( tmp_subscr_target_44, tmp_subscr_subscript_44 );
    if ( tmp_binop_right_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_67 );
        Py_DECREF( tmp_call_arg_element_79 );

        frame_function->f_lineno = 1301;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_80 = BINARY_OPERATION_REMAINDER( tmp_binop_left_16, tmp_binop_right_16 );
    Py_DECREF( tmp_binop_right_16 );
    if ( tmp_call_arg_element_80 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_67 );
        Py_DECREF( tmp_call_arg_element_79 );

        frame_function->f_lineno = 1301;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1301;
    tmp_assign_source_98 = CALL_FUNCTION_WITH_ARGS2( tmp_called_67, tmp_call_arg_element_79, tmp_call_arg_element_80 );
    Py_DECREF( tmp_called_67 );
    Py_DECREF( tmp_call_arg_element_79 );
    Py_DECREF( tmp_call_arg_element_80 );
    if ( tmp_assign_source_98 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1301;
        goto frame_exception_exit_1;
    }
    if (var_wn.object == NULL)
    {
        var_wn.object = tmp_assign_source_98;
    }
    else
    {
        PyObject *old = var_wn.object;
        var_wn.object = tmp_assign_source_98;
        Py_DECREF( old );
    }
    tmp_ass_subvalue_7 = var_wn.object;

    tmp_ass_subscribed_7 = var_ret.object;

    if ( tmp_ass_subscribed_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 38779 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1302;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_7 = const_str_plain_fsrc;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_7, tmp_ass_subscript_7, tmp_ass_subvalue_7 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1302;
        goto frame_exception_exit_1;
    }
    tmp_open_filename_5 = var_wn.object;

    tmp_open_mode_5 = const_str_plain_w;
    tmp_assign_source_99 = BUILTIN_OPEN( tmp_open_filename_5, tmp_open_mode_5, NULL );
    if ( tmp_assign_source_99 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1303;
        goto frame_exception_exit_1;
    }
    if (var_f.object == NULL)
    {
        var_f.object = tmp_assign_source_99;
    }
    else
    {
        PyObject *old = var_f.object;
        var_f.object = tmp_assign_source_99;
        Py_DECREF( old );
    }
    tmp_source_name_70 = var_f.object;

    tmp_called_68 = LOOKUP_ATTRIBUTE( tmp_source_name_70, const_str_plain_write );
    if ( tmp_called_68 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1304;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_81 = const_str_digest_0f31941b1b984d687d1832a3265bb0bd;
    frame_function->f_lineno = 1304;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_68, tmp_call_arg_element_81 );
    Py_DECREF( tmp_called_68 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1304;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_71 = var_f.object;

    tmp_called_69 = LOOKUP_ATTRIBUTE( tmp_source_name_71, const_str_plain_write );
    if ( tmp_called_69 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1305;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_17 = const_str_digest_9699306eee9969fdb7872a23b1255525;
    tmp_binop_right_17 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_f2py_version );

    if (unlikely( tmp_binop_right_17 == NULL ))
    {
        tmp_binop_right_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_f2py_version );
    }

    if ( tmp_binop_right_17 == NULL )
    {
        Py_DECREF( tmp_called_69 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 144933 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1305;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_82 = BINARY_OPERATION_REMAINDER( tmp_binop_left_17, tmp_binop_right_17 );
    if ( tmp_call_arg_element_82 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_69 );

        frame_function->f_lineno = 1305;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1305;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_69, tmp_call_arg_element_82 );
    Py_DECREF( tmp_called_69 );
    Py_DECREF( tmp_call_arg_element_82 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1305;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_72 = var_f.object;

    tmp_called_70 = LOOKUP_ATTRIBUTE( tmp_source_name_72, const_str_plain_write );
    if ( tmp_called_70 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1306;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_83 = const_str_digest_d463a03c581a8b2bf2d33fceb0420ee2;
    frame_function->f_lineno = 1306;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_70, tmp_call_arg_element_83 );
    Py_DECREF( tmp_called_70 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1306;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_100 = PyList_New( 0 );
    if (var_lines.object == NULL)
    {
        var_lines.object = tmp_assign_source_100;
    }
    else
    {
        PyObject *old = var_lines.object;
        var_lines.object = tmp_assign_source_100;
        Py_DECREF( old );
    }
    tmp_source_name_74 = const_str_digest_e1c06d85ae7b8b032bef47e42e4c08f9;
    tmp_called_72 = LOOKUP_ATTRIBUTE( tmp_source_name_74, const_str_plain_join );
    if ( tmp_called_72 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1308;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_84 = var_funcwrappers2.object;

    if ( tmp_call_arg_element_84 == NULL )
    {
        Py_DECREF( tmp_called_72 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151694 ], 59, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1308;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1308;
    tmp_binop_left_18 = CALL_FUNCTION_WITH_ARGS1( tmp_called_72, tmp_call_arg_element_84 );
    Py_DECREF( tmp_called_72 );
    if ( tmp_binop_left_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1308;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_18 = const_str_newline;
    tmp_source_name_73 = BINARY_OPERATION_ADD( tmp_binop_left_18, tmp_binop_right_18 );
    Py_DECREF( tmp_binop_left_18 );
    if ( tmp_source_name_73 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1308;
        goto frame_exception_exit_1;
    }
    tmp_called_71 = LOOKUP_ATTRIBUTE( tmp_source_name_73, const_str_plain_split );
    Py_DECREF( tmp_source_name_73 );
    if ( tmp_called_71 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1308;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_85 = const_str_newline;
    frame_function->f_lineno = 1308;
    tmp_iter_arg_15 = CALL_FUNCTION_WITH_ARGS1( tmp_called_71, tmp_call_arg_element_85 );
    Py_DECREF( tmp_called_71 );
    if ( tmp_iter_arg_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1308;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_101 = MAKE_ITERATOR( tmp_iter_arg_15 );
    Py_DECREF( tmp_iter_arg_15 );
    if ( tmp_assign_source_101 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1308;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_11__for_iterator.object == NULL );
    tmp_for_loop_11__for_iterator.object = tmp_assign_source_101;

    // Tried code
    loop_start_12:;
    tmp_next_source_11 = tmp_for_loop_11__for_iterator.object;

    tmp_assign_source_102 = ITERATOR_NEXT( tmp_next_source_11 );
    if (tmp_assign_source_102 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_12;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1308;
            goto try_finally_handler_24;
        }
    }

    if (tmp_for_loop_11__iter_value.object == NULL)
    {
        tmp_for_loop_11__iter_value.object = tmp_assign_source_102;
    }
    else
    {
        PyObject *old = tmp_for_loop_11__iter_value.object;
        tmp_for_loop_11__iter_value.object = tmp_assign_source_102;
        Py_DECREF( old );
    }
    tmp_assign_source_103 = tmp_for_loop_11__iter_value.object;

    if (var_l.object == NULL)
    {
        var_l.object = INCREASE_REFCOUNT( tmp_assign_source_103 );
    }
    else
    {
        PyObject *old = var_l.object;
        var_l.object = INCREASE_REFCOUNT( tmp_assign_source_103 );
        Py_DECREF( old );
    }
    // Tried code
    tmp_cond_value_15 = NULL;
    // Tried code
    tmp_len_arg_2 = var_l.object;

    tmp_compexpr_left_4 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1309;
        goto try_finally_handler_26;
    }
    tmp_compexpr_right_4 = const_int_pos_72;
    tmp_assign_source_104 = RICH_COMPARE_GT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    if ( tmp_assign_source_104 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1309;
        goto try_finally_handler_26;
    }
    if (tmp_and_3__value_1.object == NULL)
    {
        tmp_and_3__value_1.object = tmp_assign_source_104;
    }
    else
    {
        PyObject *old = tmp_and_3__value_1.object;
        tmp_and_3__value_1.object = tmp_assign_source_104;
        Py_DECREF( old );
    }
    tmp_cond_value_16 = tmp_and_3__value_1.object;

    tmp_cond_truth_16 = CHECK_IF_TRUE( tmp_cond_value_16 );
    if ( tmp_cond_truth_16 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1309;
        goto try_finally_handler_26;
    }
    if (tmp_cond_truth_16 == 1)
    {
        goto condexpr_true_4;
    }
    else
    {
        goto condexpr_false_4;
    }
    condexpr_true_4:;
    tmp_cond_value_15 = NULL;
    // Tried code
    tmp_result = tmp_and_3__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_3__value_1.object );
        tmp_and_3__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_subscr_target_45 = var_l.object;

    tmp_subscr_subscript_45 = const_int_0;
    tmp_compexpr_left_5 = LOOKUP_SUBSCRIPT( tmp_subscr_target_45, tmp_subscr_subscript_45 );
    if ( tmp_compexpr_left_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1309;
        goto try_finally_handler_27;
    }
    tmp_compexpr_right_5 = const_str_space;
    tmp_cond_value_15 = RICH_COMPARE_EQ( tmp_compexpr_left_5, tmp_compexpr_right_5 );
    Py_DECREF( tmp_compexpr_left_5 );
    if ( tmp_cond_value_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1309;
        goto try_finally_handler_27;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_27:;
    exception_keeper_type_24 = exception_type;
    exception_keeper_value_24 = exception_value;
    exception_keeper_tb_24 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_24 != NULL )
    {
        exception_type = exception_keeper_type_24;
        exception_value = exception_keeper_value_24;
        exception_tb = exception_keeper_tb_24;

        goto try_finally_handler_26;
    }

    goto finally_end_24;
    finally_end_24:;
    goto condexpr_end_4;
    condexpr_false_4:;
    tmp_cond_value_15 = tmp_and_3__value_1.object;

    Py_INCREF( tmp_cond_value_15 );
    condexpr_end_4:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_26:;
    exception_keeper_type_25 = exception_type;
    exception_keeper_value_25 = exception_value;
    exception_keeper_tb_25 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_25 != NULL )
    {
        exception_type = exception_keeper_type_25;
        exception_value = exception_keeper_value_25;
        exception_tb = exception_keeper_tb_25;

        goto try_finally_handler_25;
    }

    goto finally_end_25;
    finally_end_25:;
    tmp_cond_truth_15 = CHECK_IF_TRUE( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_15 );

        frame_function->f_lineno = 1309;
        goto try_finally_handler_25;
    }
    Py_DECREF( tmp_cond_value_15 );
    if (tmp_cond_truth_15 == 1)
    {
        goto branch_yes_28;
    }
    else
    {
        goto branch_no_28;
    }
    branch_yes_28:;
    tmp_source_name_75 = var_lines.object;

    if ( tmp_source_name_75 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 16411 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1310;
        goto try_finally_handler_25;
    }

    tmp_called_73 = LOOKUP_ATTRIBUTE( tmp_source_name_75, const_str_plain_append );
    if ( tmp_called_73 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1310;
        goto try_finally_handler_25;
    }
    tmp_sliceslicedel_index_lower_4 = 0;
    tmp_slice_index_upper_4 = 72;
    tmp_slice_source_4 = var_l.object;

    if ( tmp_slice_source_4 == NULL )
    {
        Py_DECREF( tmp_called_73 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 20276 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1310;
        goto try_finally_handler_25;
    }

    tmp_binop_left_19 = LOOKUP_INDEX_SLICE( tmp_slice_source_4, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    if ( tmp_binop_left_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_73 );

        frame_function->f_lineno = 1310;
        goto try_finally_handler_25;
    }
    tmp_binop_right_19 = const_str_digest_57f487778749be446e3a072c5c9fc960;
    tmp_call_arg_element_86 = BINARY_OPERATION_ADD( tmp_binop_left_19, tmp_binop_right_19 );
    Py_DECREF( tmp_binop_left_19 );
    if ( tmp_call_arg_element_86 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_73 );

        frame_function->f_lineno = 1310;
        goto try_finally_handler_25;
    }
    frame_function->f_lineno = 1310;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_73, tmp_call_arg_element_86 );
    Py_DECREF( tmp_called_73 );
    Py_DECREF( tmp_call_arg_element_86 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1310;
        goto try_finally_handler_25;
    }
    Py_DECREF( tmp_unused );
    tmp_sliceslicedel_index_lower_5 = 72;
    tmp_slice_index_upper_5 = PY_SSIZE_T_MAX;
    tmp_slice_source_5 = var_l.object;

    if ( tmp_slice_source_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 20276 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1311;
        goto try_finally_handler_25;
    }

    tmp_assign_source_105 = LOOKUP_INDEX_SLICE( tmp_slice_source_5, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    if ( tmp_assign_source_105 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1311;
        goto try_finally_handler_25;
    }
    if (var_l.object == NULL)
    {
        var_l.object = tmp_assign_source_105;
    }
    else
    {
        PyObject *old = var_l.object;
        var_l.object = tmp_assign_source_105;
        Py_DECREF( old );
    }
    loop_start_13:;
    tmp_len_arg_3 = var_l.object;

    if ( tmp_len_arg_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 20276 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1312;
        goto try_finally_handler_25;
    }

    tmp_compare_left_17 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_compare_left_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1312;
        goto try_finally_handler_25;
    }
    tmp_compare_right_17 = const_int_pos_66;
    tmp_cmp_Gt_1 = RICH_COMPARE_BOOL_GT( tmp_compare_left_17, tmp_compare_right_17 );
    if ( tmp_cmp_Gt_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_17 );

        frame_function->f_lineno = 1312;
        goto try_finally_handler_25;
    }
    Py_DECREF( tmp_compare_left_17 );
    if (tmp_cmp_Gt_1 == 1)
    {
        goto branch_no_29;
    }
    else
    {
        goto branch_yes_29;
    }
    branch_yes_29:;
    goto loop_end_13;
    branch_no_29:;
    tmp_source_name_76 = var_lines.object;

    if ( tmp_source_name_76 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 16411 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1313;
        goto try_finally_handler_25;
    }

    tmp_called_74 = LOOKUP_ATTRIBUTE( tmp_source_name_76, const_str_plain_append );
    if ( tmp_called_74 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1313;
        goto try_finally_handler_25;
    }
    tmp_sliceslicedel_index_lower_6 = 0;
    tmp_slice_index_upper_6 = 66;
    tmp_slice_source_6 = var_l.object;

    if ( tmp_slice_source_6 == NULL )
    {
        Py_DECREF( tmp_called_74 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 20276 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1313;
        goto try_finally_handler_25;
    }

    tmp_binop_left_20 = LOOKUP_INDEX_SLICE( tmp_slice_source_6, tmp_sliceslicedel_index_lower_6, tmp_slice_index_upper_6 );
    if ( tmp_binop_left_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_74 );

        frame_function->f_lineno = 1313;
        goto try_finally_handler_25;
    }
    tmp_binop_right_20 = const_str_digest_57f487778749be446e3a072c5c9fc960;
    tmp_call_arg_element_87 = BINARY_OPERATION_ADD( tmp_binop_left_20, tmp_binop_right_20 );
    Py_DECREF( tmp_binop_left_20 );
    if ( tmp_call_arg_element_87 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_74 );

        frame_function->f_lineno = 1313;
        goto try_finally_handler_25;
    }
    frame_function->f_lineno = 1313;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_74, tmp_call_arg_element_87 );
    Py_DECREF( tmp_called_74 );
    Py_DECREF( tmp_call_arg_element_87 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1313;
        goto try_finally_handler_25;
    }
    Py_DECREF( tmp_unused );
    tmp_sliceslicedel_index_lower_7 = 66;
    tmp_slice_index_upper_7 = PY_SSIZE_T_MAX;
    tmp_slice_source_7 = var_l.object;

    if ( tmp_slice_source_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 20276 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1314;
        goto try_finally_handler_25;
    }

    tmp_assign_source_106 = LOOKUP_INDEX_SLICE( tmp_slice_source_7, tmp_sliceslicedel_index_lower_7, tmp_slice_index_upper_7 );
    if ( tmp_assign_source_106 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1314;
        goto try_finally_handler_25;
    }
    if (var_l.object == NULL)
    {
        var_l.object = tmp_assign_source_106;
    }
    else
    {
        PyObject *old = var_l.object;
        var_l.object = tmp_assign_source_106;
        Py_DECREF( old );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1312;
        goto try_finally_handler_25;
    }
    goto loop_start_13;
    loop_end_13:;
    tmp_source_name_77 = var_lines.object;

    if ( tmp_source_name_77 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 16411 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1315;
        goto try_finally_handler_25;
    }

    tmp_called_75 = LOOKUP_ATTRIBUTE( tmp_source_name_77, const_str_plain_append );
    if ( tmp_called_75 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1315;
        goto try_finally_handler_25;
    }
    tmp_binop_left_21 = var_l.object;

    tmp_binop_right_21 = const_str_newline;
    tmp_call_arg_element_88 = BINARY_OPERATION_ADD( tmp_binop_left_21, tmp_binop_right_21 );
    if ( tmp_call_arg_element_88 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_75 );

        frame_function->f_lineno = 1315;
        goto try_finally_handler_25;
    }
    frame_function->f_lineno = 1315;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_75, tmp_call_arg_element_88 );
    Py_DECREF( tmp_called_75 );
    Py_DECREF( tmp_call_arg_element_88 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1315;
        goto try_finally_handler_25;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_28;
    branch_no_28:;
    tmp_source_name_78 = var_lines.object;

    if ( tmp_source_name_78 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 16411 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1316;
        goto try_finally_handler_25;
    }

    tmp_called_76 = LOOKUP_ATTRIBUTE( tmp_source_name_78, const_str_plain_append );
    if ( tmp_called_76 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1316;
        goto try_finally_handler_25;
    }
    tmp_binop_left_22 = var_l.object;

    if ( tmp_binop_left_22 == NULL )
    {
        Py_DECREF( tmp_called_76 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 20276 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1316;
        goto try_finally_handler_25;
    }

    tmp_binop_right_22 = const_str_newline;
    tmp_call_arg_element_89 = BINARY_OPERATION_ADD( tmp_binop_left_22, tmp_binop_right_22 );
    if ( tmp_call_arg_element_89 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_76 );

        frame_function->f_lineno = 1316;
        goto try_finally_handler_25;
    }
    frame_function->f_lineno = 1316;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_76, tmp_call_arg_element_89 );
    Py_DECREF( tmp_called_76 );
    Py_DECREF( tmp_call_arg_element_89 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1316;
        goto try_finally_handler_25;
    }
    Py_DECREF( tmp_unused );
    branch_end_28:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_25:;
    exception_keeper_type_26 = exception_type;
    exception_keeper_value_26 = exception_value;
    exception_keeper_tb_26 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_18 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_3__value_1.object );
    tmp_and_3__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_18;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_26 != NULL )
    {
        exception_type = exception_keeper_type_26;
        exception_value = exception_keeper_value_26;
        exception_tb = exception_keeper_tb_26;

        goto try_finally_handler_24;
    }

    goto finally_end_26;
    finally_end_26:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1308;
        goto try_finally_handler_24;
    }
    goto loop_start_12;
    loop_end_12:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_24:;
    exception_keeper_type_27 = exception_type;
    exception_keeper_value_27 = exception_value;
    exception_keeper_tb_27 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_19 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_11__iter_value.object );
    tmp_for_loop_11__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_11__for_iterator.object );
    tmp_for_loop_11__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_19;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_27 != NULL )
    {
        exception_type = exception_keeper_type_27;
        exception_value = exception_keeper_value_27;
        exception_tb = exception_keeper_tb_27;

        goto frame_exception_exit_1;
    }

    goto finally_end_27;
    finally_end_27:;
    tmp_source_name_80 = const_str_empty;
    tmp_called_78 = LOOKUP_ATTRIBUTE( tmp_source_name_80, const_str_plain_join );
    if ( tmp_called_78 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1317;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_90 = var_lines.object;

    if ( tmp_call_arg_element_90 == NULL )
    {
        Py_DECREF( tmp_called_78 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 16411 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1317;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1317;
    tmp_source_name_79 = CALL_FUNCTION_WITH_ARGS1( tmp_called_78, tmp_call_arg_element_90 );
    Py_DECREF( tmp_called_78 );
    if ( tmp_source_name_79 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1317;
        goto frame_exception_exit_1;
    }
    tmp_called_77 = LOOKUP_ATTRIBUTE( tmp_source_name_79, const_str_plain_replace );
    Py_DECREF( tmp_source_name_79 );
    if ( tmp_called_77 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1317;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_91 = const_str_digest_859fc68497e02be265b67eeb17699a77;
    tmp_call_arg_element_92 = const_str_newline;
    frame_function->f_lineno = 1317;
    tmp_assign_source_107 = CALL_FUNCTION_WITH_ARGS2( tmp_called_77, tmp_call_arg_element_91, tmp_call_arg_element_92 );
    Py_DECREF( tmp_called_77 );
    if ( tmp_assign_source_107 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1317;
        goto frame_exception_exit_1;
    }
    if (var_lines.object == NULL)
    {
        var_lines.object = tmp_assign_source_107;
    }
    else
    {
        PyObject *old = var_lines.object;
        var_lines.object = tmp_assign_source_107;
        Py_DECREF( old );
    }
    tmp_source_name_81 = var_f.object;

    if ( tmp_source_name_81 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6491 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1318;
        goto frame_exception_exit_1;
    }

    tmp_called_79 = LOOKUP_ATTRIBUTE( tmp_source_name_81, const_str_plain_write );
    if ( tmp_called_79 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1318;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_93 = var_lines.object;

    frame_function->f_lineno = 1318;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_79, tmp_call_arg_element_93 );
    Py_DECREF( tmp_called_79 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1318;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_82 = var_f.object;

    if ( tmp_source_name_82 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6491 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1319;
        goto frame_exception_exit_1;
    }

    tmp_called_80 = LOOKUP_ATTRIBUTE( tmp_source_name_82, const_str_plain_close );
    if ( tmp_called_80 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1319;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1319;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_80 );
    Py_DECREF( tmp_called_80 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1319;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_81 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_81 == NULL ))
    {
        tmp_called_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_81 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125154 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1320;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_23 = const_str_digest_1480e469b585979a7f4d96343815e357;
    tmp_binop_right_23 = var_wn.object;

    if ( tmp_binop_right_23 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152133 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1320;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_94 = BINARY_OPERATION_REMAINDER( tmp_binop_left_23, tmp_binop_right_23 );
    if ( tmp_call_arg_element_94 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1320;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1320;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_81, tmp_call_arg_element_94 );
    Py_DECREF( tmp_call_arg_element_94 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1320;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_27:;
    tmp_return_value = var_ret.object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 38779 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1321;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_ret.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ret,
            var_ret.object
        );

    }
    if ((var_mod_rules.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_mod_rules,
            var_mod_rules.object
        );

    }
    if ((var_vrd.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_vrd,
            var_vrd.object
        );

    }
    if ((var_rd.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_rd,
            var_rd.object
        );

    }
    if ((var_funcwrappers.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_funcwrappers,
            var_funcwrappers.object
        );

    }
    if ((var_funcwrappers2.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_funcwrappers2,
            var_funcwrappers2.object
        );

    }
    if ((var_n.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_n,
            var_n.object
        );

    }
    if ((var_nb.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_nb,
            var_nb.object
        );

    }
    if ((var_bi.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_bi,
            var_bi.object
        );

    }
    if ((var_b.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_b,
            var_b.object
        );

    }
    if ((var_nb_list.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_nb_list,
            var_nb_list.object
        );

    }
    if ((var_k.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_k,
            var_k.object
        );

    }
    if ((var_a.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_a,
            var_a.object
        );

    }
    if ((var_nb1.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_nb1,
            var_nb1.object
        );

    }
    if ((var_api.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_api,
            var_api.object
        );

    }
    if ((var_wrap.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_wrap,
            var_wrap.object
        );

    }
    if ((var_ar.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ar,
            var_ar.object
        );

    }
    if ((var_cr.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_cr,
            var_cr.object
        );

    }
    if ((var_mr.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_mr,
            var_mr.object
        );

    }
    if ((var_u.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_u,
            var_u.object
        );

    }
    if ((var_needs.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_needs,
            var_needs.object
        );

    }
    if ((var_code.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_code,
            var_code.object
        );

    }
    if ((var_c.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_c,
            var_c.object
        );

    }
    if ((var_r.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_r,
            var_r.object
        );

    }
    if ((var_fn.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fn,
            var_fn.object
        );

    }
    if ((var_f.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_f,
            var_f.object
        );

    }
    if ((var_wn.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_wn,
            var_wn.object
        );

    }
    if ((var_lines.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_lines,
            var_lines.object
        );

    }
    if ((var_l.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_l,
            var_l.object
        );

    }
    if ((par_m.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_m,
            par_m.object
        );

    }
    if ((par_um.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_um,
            par_um.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1_buildmodule_of_module_numpy$f2py$rules( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_m = NULL;
    PyObject *_python_par_um = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "buildmodule() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_m == key )
            {
                assert( _python_par_m == NULL );
                _python_par_m = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_um == key )
            {
                assert( _python_par_um == NULL );
                _python_par_um = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_m, key ) == 1 )
            {
                assert( _python_par_m == NULL );
                _python_par_m = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_um, key ) == 1 )
            {
                assert( _python_par_um == NULL );
                _python_par_um = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "buildmodule() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_m != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_m = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_m == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_m = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_um != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_um = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_um == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_um = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_m == NULL || _python_par_um == NULL ))
    {
        PyObject *values[] = { _python_par_m, _python_par_um };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1_buildmodule_of_module_numpy$f2py$rules( self, _python_par_m, _python_par_um );

error_exit:;

    Py_XDECREF( _python_par_m );
    Py_XDECREF( _python_par_um );

    return NULL;
}

static PyObject *dparse_function_1_buildmodule_of_module_numpy$f2py$rules( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_1_buildmodule_of_module_numpy$f2py$rules( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_buildmodule_of_module_numpy$f2py$rules( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_buildapi_of_module_numpy$f2py$rules( Nuitka_FunctionObject *self, PyObject *_python_par_rout )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_rout; par_rout.object = _python_par_rout;
    PyObjectLocalVariable var_wrap;
    PyObjectLocalVariable var_args;
    PyObjectLocalVariable var_depargs;
    PyObjectLocalVariable var_var;
    PyObjectLocalVariable var_a;
    PyObjectLocalVariable var_auxvars;
    PyObjectLocalVariable var_vrd;
    PyObjectLocalVariable var_rd;
    PyObjectLocalVariable var_r;
    PyObjectLocalVariable var_ar;
    PyObjectLocalVariable var_nth;
    PyObjectLocalVariable var_nthk;
    PyObjectLocalVariable var_savevrd;
    PyObjectLocalVariable var__rules;
    PyObjectLocalVariable var_c;
    PyObjectLocalVariable var_optargs;
    PyObjectLocalVariable var_cfs;
    PyObjectLocalVariable var_k;
    PyObjectLocalVariable var_argformat;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_tuple_unpack_2__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_2__element_1;
    PyObjectTempVariable tmp_tuple_unpack_2__element_2;
    PyObjectTempVariable tmp_listcontr_1__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_1__listcontr_result;
    PyObjectTempVariable tmp_listcontr_1__iter_value_0;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_and_1__value_1;
    PyObjectTempVariable tmp_or_1__value_1;
    PyObjectTempVariable tmp_tuple_unpack_3__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_3__element_1;
    PyObjectTempVariable tmp_tuple_unpack_3__element_2;
    PyObjectTempVariable tmp_for_loop_2__for_iterator;
    PyObjectTempVariable tmp_for_loop_2__iter_value;
    PyObjectTempVariable tmp_for_loop_3__for_iterator;
    PyObjectTempVariable tmp_for_loop_3__iter_value;
    PyObjectTempVariable tmp_and_2__value_1;
    PyObjectTempVariable tmp_or_2__value_1;
    PyObjectTempVariable tmp_for_loop_4__for_iterator;
    PyObjectTempVariable tmp_for_loop_4__iter_value;
    PyObjectTempVariable tmp_for_loop_5__for_iterator;
    PyObjectTempVariable tmp_for_loop_5__iter_value;
    PyObjectTempVariable tmp_and_3__value_1;
    PyObjectTempVariable tmp_or_3__value_1;
    PyObjectTempVariable tmp_for_loop_6__for_iterator;
    PyObjectTempVariable tmp_for_loop_6__iter_value;
    PyObjectTempVariable tmp_for_loop_7__for_iterator;
    PyObjectTempVariable tmp_for_loop_7__iter_value;
    PyObjectTempVariable tmp_and_4__value_1;
    PyObjectTempVariable tmp_and_5__value_1;
    PyObjectTempVariable tmp_or_4__value_1;
    PyObjectTempVariable tmp_inplace_assign_1__inplace_target;
    PyObjectTempVariable tmp_inplace_assign_1__inplace_subscript;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    PyObject *exception_keeper_type_34;
    PyObject *exception_keeper_value_34;
    PyTracebackObject *exception_keeper_tb_34;
    PyObject *exception_keeper_type_35;
    PyObject *exception_keeper_value_35;
    PyTracebackObject *exception_keeper_tb_35;
    PyObject *exception_keeper_type_36;
    PyObject *exception_keeper_value_36;
    PyTracebackObject *exception_keeper_tb_36;
    PyObject *exception_keeper_type_37;
    PyObject *exception_keeper_value_37;
    PyTracebackObject *exception_keeper_tb_37;
    PyObject *exception_keeper_type_38;
    PyObject *exception_keeper_value_38;
    PyTracebackObject *exception_keeper_tb_38;
    PyObject *exception_keeper_type_39;
    PyObject *exception_keeper_value_39;
    PyTracebackObject *exception_keeper_tb_39;
    PyObject *exception_keeper_type_40;
    PyObject *exception_keeper_value_40;
    PyTracebackObject *exception_keeper_tb_40;
    PyObject *tmp_append_to_1;
    PyObject *tmp_append_value_1;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscribed_2;
    PyObject *tmp_ass_subscribed_3;
    PyObject *tmp_ass_subscribed_4;
    PyObject *tmp_ass_subscribed_5;
    PyObject *tmp_ass_subscribed_6;
    PyObject *tmp_ass_subscribed_7;
    PyObject *tmp_ass_subscribed_8;
    PyObject *tmp_ass_subscribed_9;
    PyObject *tmp_ass_subscribed_10;
    PyObject *tmp_ass_subscribed_11;
    PyObject *tmp_ass_subscribed_12;
    PyObject *tmp_ass_subscribed_13;
    PyObject *tmp_ass_subscribed_14;
    PyObject *tmp_ass_subscribed_15;
    PyObject *tmp_ass_subscribed_16;
    PyObject *tmp_ass_subscribed_17;
    PyObject *tmp_ass_subscribed_18;
    PyObject *tmp_ass_subscribed_19;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subscript_2;
    PyObject *tmp_ass_subscript_3;
    PyObject *tmp_ass_subscript_4;
    PyObject *tmp_ass_subscript_5;
    PyObject *tmp_ass_subscript_6;
    PyObject *tmp_ass_subscript_7;
    PyObject *tmp_ass_subscript_8;
    PyObject *tmp_ass_subscript_9;
    PyObject *tmp_ass_subscript_10;
    PyObject *tmp_ass_subscript_11;
    PyObject *tmp_ass_subscript_12;
    PyObject *tmp_ass_subscript_13;
    PyObject *tmp_ass_subscript_14;
    PyObject *tmp_ass_subscript_15;
    PyObject *tmp_ass_subscript_16;
    PyObject *tmp_ass_subscript_17;
    PyObject *tmp_ass_subscript_18;
    PyObject *tmp_ass_subscript_19;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_ass_subvalue_2;
    PyObject *tmp_ass_subvalue_3;
    PyObject *tmp_ass_subvalue_4;
    PyObject *tmp_ass_subvalue_5;
    PyObject *tmp_ass_subvalue_6;
    PyObject *tmp_ass_subvalue_7;
    PyObject *tmp_ass_subvalue_8;
    PyObject *tmp_ass_subvalue_9;
    PyObject *tmp_ass_subvalue_10;
    PyObject *tmp_ass_subvalue_11;
    PyObject *tmp_ass_subvalue_12;
    PyObject *tmp_ass_subvalue_13;
    PyObject *tmp_ass_subvalue_14;
    PyObject *tmp_ass_subvalue_15;
    PyObject *tmp_ass_subvalue_16;
    PyObject *tmp_ass_subvalue_17;
    PyObject *tmp_ass_subvalue_18;
    PyObject *tmp_ass_subvalue_19;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_left_3;
    PyObject *tmp_binop_left_4;
    PyObject *tmp_binop_left_5;
    PyObject *tmp_binop_left_6;
    PyObject *tmp_binop_left_7;
    PyObject *tmp_binop_left_8;
    PyObject *tmp_binop_left_9;
    PyObject *tmp_binop_left_10;
    PyObject *tmp_binop_left_11;
    PyObject *tmp_binop_left_12;
    PyObject *tmp_binop_left_13;
    PyObject *tmp_binop_left_14;
    PyObject *tmp_binop_left_15;
    PyObject *tmp_binop_left_16;
    PyObject *tmp_binop_left_17;
    PyObject *tmp_binop_left_18;
    PyObject *tmp_binop_left_19;
    PyObject *tmp_binop_left_20;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_binop_right_3;
    PyObject *tmp_binop_right_4;
    PyObject *tmp_binop_right_5;
    PyObject *tmp_binop_right_6;
    PyObject *tmp_binop_right_7;
    PyObject *tmp_binop_right_8;
    PyObject *tmp_binop_right_9;
    PyObject *tmp_binop_right_10;
    PyObject *tmp_binop_right_11;
    PyObject *tmp_binop_right_12;
    PyObject *tmp_binop_right_13;
    PyObject *tmp_binop_right_14;
    PyObject *tmp_binop_right_15;
    PyObject *tmp_binop_right_16;
    PyObject *tmp_binop_right_17;
    PyObject *tmp_binop_right_18;
    PyObject *tmp_binop_right_19;
    PyObject *tmp_binop_right_20;
    bool tmp_break_1;
    bool tmp_break_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_call_arg_element_14;
    PyObject *tmp_call_arg_element_15;
    PyObject *tmp_call_arg_element_16;
    PyObject *tmp_call_arg_element_17;
    PyObject *tmp_call_arg_element_18;
    PyObject *tmp_call_arg_element_19;
    PyObject *tmp_call_arg_element_20;
    PyObject *tmp_call_arg_element_21;
    PyObject *tmp_call_arg_element_22;
    PyObject *tmp_call_arg_element_23;
    PyObject *tmp_call_arg_element_24;
    PyObject *tmp_call_arg_element_25;
    PyObject *tmp_call_arg_element_26;
    PyObject *tmp_call_arg_element_27;
    PyObject *tmp_call_arg_element_28;
    PyObject *tmp_call_arg_element_29;
    PyObject *tmp_call_arg_element_30;
    PyObject *tmp_call_arg_element_31;
    PyObject *tmp_call_arg_element_32;
    PyObject *tmp_call_arg_element_33;
    PyObject *tmp_call_arg_element_34;
    PyObject *tmp_call_arg_element_35;
    PyObject *tmp_call_arg_element_36;
    PyObject *tmp_call_arg_element_37;
    PyObject *tmp_call_arg_element_38;
    PyObject *tmp_call_arg_element_39;
    PyObject *tmp_call_arg_element_40;
    PyObject *tmp_call_arg_element_41;
    PyObject *tmp_call_arg_element_42;
    PyObject *tmp_call_arg_element_43;
    PyObject *tmp_call_arg_element_44;
    PyObject *tmp_call_arg_element_45;
    PyObject *tmp_call_arg_element_46;
    PyObject *tmp_call_arg_element_47;
    PyObject *tmp_call_arg_element_48;
    PyObject *tmp_call_arg_element_49;
    PyObject *tmp_call_arg_element_50;
    PyObject *tmp_call_arg_element_51;
    PyObject *tmp_call_arg_element_52;
    PyObject *tmp_call_arg_element_53;
    PyObject *tmp_call_arg_element_54;
    PyObject *tmp_call_arg_element_55;
    PyObject *tmp_call_arg_element_56;
    PyObject *tmp_call_arg_element_57;
    PyObject *tmp_call_arg_element_58;
    PyObject *tmp_call_arg_element_59;
    PyObject *tmp_call_arg_element_60;
    PyObject *tmp_call_arg_element_61;
    PyObject *tmp_call_arg_element_62;
    PyObject *tmp_call_arg_element_63;
    PyObject *tmp_call_arg_element_64;
    PyObject *tmp_call_arg_element_65;
    PyObject *tmp_call_arg_element_66;
    PyObject *tmp_call_arg_element_67;
    PyObject *tmp_call_arg_element_68;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    PyObject *tmp_called_11;
    PyObject *tmp_called_12;
    PyObject *tmp_called_13;
    PyObject *tmp_called_14;
    PyObject *tmp_called_15;
    PyObject *tmp_called_16;
    PyObject *tmp_called_17;
    PyObject *tmp_called_18;
    PyObject *tmp_called_19;
    PyObject *tmp_called_20;
    PyObject *tmp_called_21;
    PyObject *tmp_called_22;
    PyObject *tmp_called_23;
    PyObject *tmp_called_24;
    PyObject *tmp_called_25;
    PyObject *tmp_called_26;
    PyObject *tmp_called_27;
    PyObject *tmp_called_28;
    PyObject *tmp_called_29;
    PyObject *tmp_called_30;
    PyObject *tmp_called_31;
    PyObject *tmp_called_32;
    PyObject *tmp_called_33;
    PyObject *tmp_called_34;
    PyObject *tmp_called_35;
    PyObject *tmp_called_36;
    PyObject *tmp_called_37;
    PyObject *tmp_called_38;
    PyObject *tmp_called_39;
    PyObject *tmp_called_40;
    PyObject *tmp_called_41;
    PyObject *tmp_called_42;
    PyObject *tmp_called_43;
    PyObject *tmp_called_44;
    PyObject *tmp_called_45;
    PyObject *tmp_called_46;
    PyObject *tmp_called_47;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Gt_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_NotIn_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_left_6;
    PyObject *tmp_compexpr_left_7;
    PyObject *tmp_compexpr_left_8;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    PyObject *tmp_compexpr_right_6;
    PyObject *tmp_compexpr_right_7;
    PyObject *tmp_compexpr_right_8;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    int tmp_cond_truth_13;
    int tmp_cond_truth_14;
    int tmp_cond_truth_15;
    int tmp_cond_truth_16;
    int tmp_cond_truth_17;
    int tmp_cond_truth_18;
    int tmp_cond_truth_19;
    int tmp_cond_truth_20;
    int tmp_cond_truth_21;
    int tmp_cond_truth_22;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_cond_value_13;
    PyObject *tmp_cond_value_14;
    PyObject *tmp_cond_value_15;
    PyObject *tmp_cond_value_16;
    PyObject *tmp_cond_value_17;
    PyObject *tmp_cond_value_18;
    PyObject *tmp_cond_value_19;
    PyObject *tmp_cond_value_20;
    PyObject *tmp_cond_value_21;
    PyObject *tmp_cond_value_22;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_key_10;
    PyObject *tmp_dict_key_11;
    PyObject *tmp_dict_key_12;
    PyObject *tmp_dict_key_13;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_dict_value_10;
    PyObject *tmp_dict_value_11;
    PyObject *tmp_dict_value_12;
    PyObject *tmp_dict_value_13;
    PyObject *tmp_frame_locals;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_cls_3;
    PyObject *tmp_isinstance_cls_4;
    PyObject *tmp_isinstance_cls_5;
    PyObject *tmp_isinstance_cls_6;
    PyObject *tmp_isinstance_cls_7;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_isinstance_inst_3;
    PyObject *tmp_isinstance_inst_4;
    PyObject *tmp_isinstance_inst_5;
    PyObject *tmp_isinstance_inst_6;
    PyObject *tmp_isinstance_inst_7;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iter_arg_7;
    PyObject *tmp_iter_arg_8;
    PyObject *tmp_iter_arg_9;
    PyObject *tmp_iter_arg_10;
    PyObject *tmp_iter_arg_11;
    PyObject *tmp_iterator_attempt_1;
    PyObject *tmp_iterator_attempt_2;
    PyObject *tmp_iterator_attempt_3;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_iterator_name_2;
    PyObject *tmp_iterator_name_3;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_next_source_6;
    PyObject *tmp_next_source_7;
    PyObject *tmp_next_source_8;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_value_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_subscript_2;
    PyObject *tmp_subscr_subscript_3;
    PyObject *tmp_subscr_subscript_4;
    PyObject *tmp_subscr_subscript_5;
    PyObject *tmp_subscr_subscript_6;
    PyObject *tmp_subscr_subscript_7;
    PyObject *tmp_subscr_subscript_8;
    PyObject *tmp_subscr_subscript_9;
    PyObject *tmp_subscr_subscript_10;
    PyObject *tmp_subscr_subscript_11;
    PyObject *tmp_subscr_subscript_12;
    PyObject *tmp_subscr_subscript_13;
    PyObject *tmp_subscr_subscript_14;
    PyObject *tmp_subscr_subscript_15;
    PyObject *tmp_subscr_subscript_16;
    PyObject *tmp_subscr_subscript_17;
    PyObject *tmp_subscr_subscript_18;
    PyObject *tmp_subscr_subscript_19;
    PyObject *tmp_subscr_subscript_20;
    PyObject *tmp_subscr_subscript_21;
    PyObject *tmp_subscr_subscript_22;
    PyObject *tmp_subscr_subscript_23;
    PyObject *tmp_subscr_subscript_24;
    PyObject *tmp_subscr_subscript_25;
    PyObject *tmp_subscr_subscript_26;
    PyObject *tmp_subscr_subscript_27;
    PyObject *tmp_subscr_subscript_28;
    PyObject *tmp_subscr_subscript_29;
    PyObject *tmp_subscr_subscript_30;
    PyObject *tmp_subscr_subscript_31;
    PyObject *tmp_subscr_subscript_32;
    PyObject *tmp_subscr_subscript_33;
    PyObject *tmp_subscr_subscript_34;
    PyObject *tmp_subscr_subscript_35;
    PyObject *tmp_subscr_subscript_36;
    PyObject *tmp_subscr_subscript_37;
    PyObject *tmp_subscr_subscript_38;
    PyObject *tmp_subscr_subscript_39;
    PyObject *tmp_subscr_subscript_40;
    PyObject *tmp_subscr_subscript_41;
    PyObject *tmp_subscr_subscript_42;
    PyObject *tmp_subscr_subscript_43;
    PyObject *tmp_subscr_subscript_44;
    PyObject *tmp_subscr_subscript_45;
    PyObject *tmp_subscr_subscript_46;
    PyObject *tmp_subscr_subscript_47;
    PyObject *tmp_subscr_subscript_48;
    PyObject *tmp_subscr_subscript_49;
    PyObject *tmp_subscr_subscript_50;
    PyObject *tmp_subscr_subscript_51;
    PyObject *tmp_subscr_subscript_52;
    PyObject *tmp_subscr_subscript_53;
    PyObject *tmp_subscr_subscript_54;
    PyObject *tmp_subscr_subscript_55;
    PyObject *tmp_subscr_subscript_56;
    PyObject *tmp_subscr_subscript_57;
    PyObject *tmp_subscr_target_1;
    PyObject *tmp_subscr_target_2;
    PyObject *tmp_subscr_target_3;
    PyObject *tmp_subscr_target_4;
    PyObject *tmp_subscr_target_5;
    PyObject *tmp_subscr_target_6;
    PyObject *tmp_subscr_target_7;
    PyObject *tmp_subscr_target_8;
    PyObject *tmp_subscr_target_9;
    PyObject *tmp_subscr_target_10;
    PyObject *tmp_subscr_target_11;
    PyObject *tmp_subscr_target_12;
    PyObject *tmp_subscr_target_13;
    PyObject *tmp_subscr_target_14;
    PyObject *tmp_subscr_target_15;
    PyObject *tmp_subscr_target_16;
    PyObject *tmp_subscr_target_17;
    PyObject *tmp_subscr_target_18;
    PyObject *tmp_subscr_target_19;
    PyObject *tmp_subscr_target_20;
    PyObject *tmp_subscr_target_21;
    PyObject *tmp_subscr_target_22;
    PyObject *tmp_subscr_target_23;
    PyObject *tmp_subscr_target_24;
    PyObject *tmp_subscr_target_25;
    PyObject *tmp_subscr_target_26;
    PyObject *tmp_subscr_target_27;
    PyObject *tmp_subscr_target_28;
    PyObject *tmp_subscr_target_29;
    PyObject *tmp_subscr_target_30;
    PyObject *tmp_subscr_target_31;
    PyObject *tmp_subscr_target_32;
    PyObject *tmp_subscr_target_33;
    PyObject *tmp_subscr_target_34;
    PyObject *tmp_subscr_target_35;
    PyObject *tmp_subscr_target_36;
    PyObject *tmp_subscr_target_37;
    PyObject *tmp_subscr_target_38;
    PyObject *tmp_subscr_target_39;
    PyObject *tmp_subscr_target_40;
    PyObject *tmp_subscr_target_41;
    PyObject *tmp_subscr_target_42;
    PyObject *tmp_subscr_target_43;
    PyObject *tmp_subscr_target_44;
    PyObject *tmp_subscr_target_45;
    PyObject *tmp_subscr_target_46;
    PyObject *tmp_subscr_target_47;
    PyObject *tmp_subscr_target_48;
    PyObject *tmp_subscr_target_49;
    PyObject *tmp_subscr_target_50;
    PyObject *tmp_subscr_target_51;
    PyObject *tmp_subscr_target_52;
    PyObject *tmp_subscr_target_53;
    PyObject *tmp_subscr_target_54;
    PyObject *tmp_subscr_target_55;
    PyObject *tmp_subscr_target_56;
    PyObject *tmp_subscr_target_57;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    int tmp_tried_lineno_4;
    int tmp_tried_lineno_5;
    int tmp_tried_lineno_6;
    int tmp_tried_lineno_7;
    int tmp_tried_lineno_8;
    int tmp_tried_lineno_9;
    int tmp_tried_lineno_10;
    int tmp_tried_lineno_11;
    int tmp_tried_lineno_12;
    int tmp_tried_lineno_13;
    int tmp_tried_lineno_14;
    int tmp_tried_lineno_15;
    int tmp_tried_lineno_16;
    int tmp_tried_lineno_17;
    int tmp_tried_lineno_18;
    int tmp_tried_lineno_19;
    int tmp_tried_lineno_20;
    int tmp_tried_lineno_21;
    int tmp_tried_lineno_22;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_type_arg_1;
    PyObject *tmp_unary_arg_1;
    PyObject *tmp_unary_arg_2;
    PyObject *tmp_unary_arg_3;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    PyObject *tmp_unpack_4;
    PyObject *tmp_unpack_5;
    PyObject *tmp_unpack_6;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_fc191ca33fb34ff1ba4327ff3087b85f, module_numpy$f2py$rules );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_func2subr );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_func2subr );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 131173 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1328;
        goto try_finally_handler_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_assubr );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1328;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_1 = par_rout.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124776 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1328;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 1328;
    tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1328;
        goto try_finally_handler_1;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1328;
        goto try_finally_handler_1;
    }
    assert( tmp_tuple_unpack_1__source_iter.object == NULL );
    tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_1;

    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_2 = UNPACK_PARAMETER_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1328;
        goto try_finally_handler_1;
    }
    assert( tmp_tuple_unpack_1__element_1.object == NULL );
    tmp_tuple_unpack_1__element_1.object = tmp_assign_source_2;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_3 = UNPACK_PARAMETER_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1328;
        goto try_finally_handler_1;
    }
    assert( tmp_tuple_unpack_1__element_2.object == NULL );
    tmp_tuple_unpack_1__element_2.object = tmp_assign_source_3;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_1 ); assert( PyIter_Check( tmp_iterator_name_1 ) );

    tmp_iterator_attempt_1 = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt_1 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_1;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_1 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_1;
    }
    tmp_assign_source_4 = tmp_tuple_unpack_1__element_1.object;

    if (par_rout.object == NULL)
    {
        par_rout.object = INCREASE_REFCOUNT( tmp_assign_source_4 );
    }
    else
    {
        PyObject *old = par_rout.object;
        par_rout.object = INCREASE_REFCOUNT( tmp_assign_source_4 );
        Py_DECREF( old );
    }
    tmp_assign_source_5 = tmp_tuple_unpack_1__element_2.object;

    assert( var_wrap.object == NULL );
    var_wrap.object = INCREASE_REFCOUNT( tmp_assign_source_5 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter.object );
    tmp_tuple_unpack_1__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1.object );
    tmp_tuple_unpack_1__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2.object );
    tmp_tuple_unpack_1__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    // Tried code
    tmp_called_2 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_getargs2 );

    if (unlikely( tmp_called_2 == NULL ))
    {
        tmp_called_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_getargs2 );
    }

    if ( tmp_called_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152181 ], 37, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1329;
        goto try_finally_handler_2;
    }

    tmp_call_arg_element_2 = par_rout.object;

    if ( tmp_call_arg_element_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124776 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1329;
        goto try_finally_handler_2;
    }

    frame_function->f_lineno = 1329;
    tmp_iter_arg_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1329;
        goto try_finally_handler_2;
    }
    tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1329;
        goto try_finally_handler_2;
    }
    assert( tmp_tuple_unpack_2__source_iter.object == NULL );
    tmp_tuple_unpack_2__source_iter.object = tmp_assign_source_6;

    tmp_unpack_3 = tmp_tuple_unpack_2__source_iter.object;

    tmp_assign_source_7 = UNPACK_PARAMETER_NEXT( tmp_unpack_3, 0 );
    if ( tmp_assign_source_7 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1329;
        goto try_finally_handler_2;
    }
    assert( tmp_tuple_unpack_2__element_1.object == NULL );
    tmp_tuple_unpack_2__element_1.object = tmp_assign_source_7;

    tmp_unpack_4 = tmp_tuple_unpack_2__source_iter.object;

    tmp_assign_source_8 = UNPACK_PARAMETER_NEXT( tmp_unpack_4, 1 );
    if ( tmp_assign_source_8 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1329;
        goto try_finally_handler_2;
    }
    assert( tmp_tuple_unpack_2__element_2.object == NULL );
    tmp_tuple_unpack_2__element_2.object = tmp_assign_source_8;

    tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_2 ); assert( PyIter_Check( tmp_iterator_name_2 ) );

    tmp_iterator_attempt_2 = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

    if (likely( tmp_iterator_attempt_2 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_2;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_2 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_2;
    }
    tmp_assign_source_9 = tmp_tuple_unpack_2__element_1.object;

    assert( var_args.object == NULL );
    var_args.object = INCREASE_REFCOUNT( tmp_assign_source_9 );

    tmp_assign_source_10 = tmp_tuple_unpack_2__element_2.object;

    assert( var_depargs.object == NULL );
    var_depargs.object = INCREASE_REFCOUNT( tmp_assign_source_10 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_2__source_iter.object );
    tmp_tuple_unpack_2__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_1.object );
    tmp_tuple_unpack_2__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2.object );
    tmp_tuple_unpack_2__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto frame_exception_exit_1;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_assattr_name_1 = var_depargs.object;

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129663 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1330;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_capi_maps );

    if (unlikely( tmp_assattr_target_1 == NULL ))
    {
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_capi_maps );
    }

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 131261 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1330;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_depargs, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1330;
        goto frame_exception_exit_1;
    }
    tmp_subscr_target_1 = par_rout.object;

    if ( tmp_subscr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124776 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1331;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_1 = const_str_plain_vars;
    tmp_assign_source_11 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1331;
        goto frame_exception_exit_1;
    }
    assert( var_var.object == NULL );
    var_var.object = tmp_assign_source_11;

    // Tried code
    tmp_assign_source_12 = NULL;
    // Tried code
    tmp_source_name_2 = var_var.object;

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_keys );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1332;
        goto try_finally_handler_4;
    }
    frame_function->f_lineno = 1332;
    tmp_iter_arg_3 = CALL_FUNCTION_NO_ARGS( tmp_called_3 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1332;
        goto try_finally_handler_4;
    }
    tmp_assign_source_13 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1332;
        goto try_finally_handler_4;
    }
    assert( tmp_listcontr_1__listcontr_iter.object == NULL );
    tmp_listcontr_1__listcontr_iter.object = tmp_assign_source_13;

    tmp_assign_source_14 = PyList_New( 0 );
    assert( tmp_listcontr_1__listcontr_result.object == NULL );
    tmp_listcontr_1__listcontr_result.object = tmp_assign_source_14;

    loop_start_1:;
    tmp_next_source_1 = tmp_listcontr_1__listcontr_iter.object;

    tmp_assign_source_15 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_15 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1332;
            goto try_finally_handler_4;
        }
    }

    if (tmp_listcontr_1__iter_value_0.object == NULL)
    {
        tmp_listcontr_1__iter_value_0.object = tmp_assign_source_15;
    }
    else
    {
        PyObject *old = tmp_listcontr_1__iter_value_0.object;
        tmp_listcontr_1__iter_value_0.object = tmp_assign_source_15;
        Py_DECREF( old );
    }
    tmp_assign_source_16 = tmp_listcontr_1__iter_value_0.object;

    if (var_a.object == NULL)
    {
        var_a.object = INCREASE_REFCOUNT( tmp_assign_source_16 );
    }
    else
    {
        PyObject *old = var_a.object;
        var_a.object = INCREASE_REFCOUNT( tmp_assign_source_16 );
        Py_DECREF( old );
    }
    tmp_called_4 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_aux );

    if (unlikely( tmp_called_4 == NULL ))
    {
        tmp_called_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_aux );
    }

    if ( tmp_called_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126649 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1332;
        goto try_finally_handler_4;
    }

    tmp_subscr_target_2 = var_var.object;

    if ( tmp_subscr_target_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 88437 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1332;
        goto try_finally_handler_4;
    }

    tmp_subscr_subscript_2 = var_a.object;

    tmp_call_arg_element_3 = LOOKUP_SUBSCRIPT( tmp_subscr_target_2, tmp_subscr_subscript_2 );
    if ( tmp_call_arg_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1332;
        goto try_finally_handler_4;
    }
    frame_function->f_lineno = 1332;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_3 );
    Py_DECREF( tmp_call_arg_element_3 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1332;
        goto try_finally_handler_4;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        frame_function->f_lineno = 1332;
        goto try_finally_handler_4;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_append_to_1 = tmp_listcontr_1__listcontr_result.object;

    tmp_append_value_1 = var_a.object;

    tmp_res = PyList_Append( tmp_append_to_1, tmp_append_value_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1332;
        goto try_finally_handler_4;
    }
    tmp_unused = Py_None;
    branch_no_1:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1332;
        goto try_finally_handler_4;
    }
    goto loop_start_1;
    loop_end_1:;
    tmp_assign_source_12 = tmp_listcontr_1__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_1__iter_value_0.object );
    tmp_listcontr_1__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto try_finally_handler_3;
    }

    goto finally_end_3;
    finally_end_3:;
    assert( var_auxvars.object == NULL );
    var_auxvars.object = INCREASE_REFCOUNT( tmp_assign_source_12 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_4 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_1__listcontr_result.object );
    tmp_listcontr_1__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_1__listcontr_iter.object );
    tmp_listcontr_1__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_4;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto frame_exception_exit_1;
    }

    goto finally_end_4;
    finally_end_4:;
    tmp_called_5 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_called_5 == NULL ))
    {
        tmp_called_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_called_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150156 ], 44, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1334;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_4 = par_rout.object;

    if ( tmp_call_arg_element_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124776 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1334;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1334;
    tmp_cond_value_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_4 );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1334;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        frame_function->f_lineno = 1334;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_6 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_6 == NULL ))
    {
        tmp_called_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125154 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1335;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_1 = const_str_digest_9a09d3352ebc0352e2ebe35a2c06dfe2;
    tmp_binop_right_1 = PyTuple_New( 2 );
    tmp_subscr_target_3 = par_rout.object;

    if ( tmp_subscr_target_3 == NULL )
    {
        Py_DECREF( tmp_binop_right_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124776 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1335;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_3 = const_str_plain_modulename;
    tmp_tuple_element_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_3, tmp_subscr_subscript_3 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_1 );

        frame_function->f_lineno = 1335;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_1, 0, tmp_tuple_element_1 );
    tmp_subscr_target_4 = par_rout.object;

    if ( tmp_subscr_target_4 == NULL )
    {
        Py_DECREF( tmp_binop_right_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124776 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1335;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_4 = const_str_plain_name;
    tmp_tuple_element_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_4, tmp_subscr_subscript_4 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_1 );

        frame_function->f_lineno = 1335;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_1, 1, tmp_tuple_element_1 );
    tmp_call_arg_element_5 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_call_arg_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1335;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1335;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_5 );
    Py_DECREF( tmp_call_arg_element_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1335;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_2;
    branch_no_2:;
    tmp_called_7 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_7 == NULL ))
    {
        tmp_called_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125154 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1337;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_2 = const_str_digest_0b2ee4e163c7715c3637d39da00ca3d5;
    tmp_subscr_target_5 = par_rout.object;

    if ( tmp_subscr_target_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124776 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1337;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_5 = const_str_plain_name;
    tmp_binop_right_2 = LOOKUP_SUBSCRIPT( tmp_subscr_target_5, tmp_subscr_subscript_5 );
    if ( tmp_binop_right_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1337;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_6 = BINARY_OPERATION_REMAINDER( tmp_binop_left_2, tmp_binop_right_2 );
    Py_DECREF( tmp_binop_right_2 );
    if ( tmp_call_arg_element_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1337;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1337;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_6 );
    Py_DECREF( tmp_call_arg_element_6 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1337;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_end_2:;
    tmp_called_8 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_routsign2map );

    if (unlikely( tmp_called_8 == NULL ))
    {
        tmp_called_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_routsign2map );
    }

    if ( tmp_called_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152218 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1339;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_7 = par_rout.object;

    if ( tmp_call_arg_element_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124776 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1339;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1339;
    tmp_assign_source_17 = CALL_FUNCTION_WITH_ARGS1( tmp_called_8, tmp_call_arg_element_7 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1339;
        goto frame_exception_exit_1;
    }
    assert( var_vrd.object == NULL );
    var_vrd.object = tmp_assign_source_17;

    tmp_called_9 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_9 == NULL ))
    {
        tmp_called_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126933 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1340;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_8 = PyDict_New();
    tmp_call_arg_element_9 = var_vrd.object;

    frame_function->f_lineno = 1340;
    tmp_assign_source_18 = CALL_FUNCTION_WITH_ARGS2( tmp_called_9, tmp_call_arg_element_8, tmp_call_arg_element_9 );
    Py_DECREF( tmp_call_arg_element_8 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1340;
        goto frame_exception_exit_1;
    }
    assert( var_rd.object == NULL );
    var_rd.object = tmp_assign_source_18;

    tmp_iter_arg_4 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_rout_rules );

    if (unlikely( tmp_iter_arg_4 == NULL ))
    {
        tmp_iter_arg_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_rout_rules );
    }

    if ( tmp_iter_arg_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152259 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1341;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_19 = MAKE_ITERATOR( tmp_iter_arg_4 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1341;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_19;

    // Tried code
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_20 = ITERATOR_NEXT( tmp_next_source_2 );
    if (tmp_assign_source_20 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_2;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1341;
            goto try_finally_handler_5;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_20;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_20;
        Py_DECREF( old );
    }
    tmp_assign_source_21 = tmp_for_loop_1__iter_value.object;

    if (var_r.object == NULL)
    {
        var_r.object = INCREASE_REFCOUNT( tmp_assign_source_21 );
    }
    else
    {
        PyObject *old = var_r.object;
        var_r.object = INCREASE_REFCOUNT( tmp_assign_source_21 );
        Py_DECREF( old );
    }
    // Tried code
    tmp_cond_value_3 = NULL;
    // Tried code
    // Tried code
    tmp_assign_source_22 = NULL;
    // Tried code
    tmp_compexpr_left_1 = const_str_plain__check;
    tmp_compexpr_right_1 = var_r.object;

    tmp_assign_source_23 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1342;
        goto try_finally_handler_9;
    }
    if (tmp_and_1__value_1.object == NULL)
    {
        tmp_and_1__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_23 );
    }
    else
    {
        PyObject *old = tmp_and_1__value_1.object;
        tmp_and_1__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_23 );
        Py_DECREF( old );
    }
    tmp_cond_value_4 = tmp_and_1__value_1.object;

    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1342;
        goto try_finally_handler_9;
    }
    if (tmp_cond_truth_4 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_assign_source_22 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1.object );
        tmp_and_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_subscr_target_6 = var_r.object;

    tmp_subscr_subscript_6 = const_str_plain__check;
    tmp_called_10 = LOOKUP_SUBSCRIPT( tmp_subscr_target_6, tmp_subscr_subscript_6 );
    if ( tmp_called_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1342;
        goto try_finally_handler_10;
    }
    tmp_call_arg_element_10 = par_rout.object;

    if ( tmp_call_arg_element_10 == NULL )
    {
        Py_DECREF( tmp_called_10 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124776 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1342;
        goto try_finally_handler_10;
    }

    frame_function->f_lineno = 1342;
    tmp_assign_source_22 = CALL_FUNCTION_WITH_ARGS1( tmp_called_10, tmp_call_arg_element_10 );
    Py_DECREF( tmp_called_10 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1342;
        goto try_finally_handler_10;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_10:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto try_finally_handler_9;
    }

    goto finally_end_5;
    finally_end_5:;
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_assign_source_22 = tmp_and_1__value_1.object;

    Py_INCREF( tmp_assign_source_22 );
    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_9:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto try_finally_handler_8;
    }

    goto finally_end_6;
    finally_end_6:;
    if (tmp_or_1__value_1.object == NULL)
    {
        tmp_or_1__value_1.object = tmp_assign_source_22;
    }
    else
    {
        PyObject *old = tmp_or_1__value_1.object;
        tmp_or_1__value_1.object = tmp_assign_source_22;
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_8:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_5 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_1__value_1.object );
    tmp_and_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_5;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_7 != NULL )
    {
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;

        goto try_finally_handler_7;
    }

    goto finally_end_7;
    finally_end_7:;
    tmp_cond_value_5 = tmp_or_1__value_1.object;

    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1342;
        goto try_finally_handler_7;
    }
    if (tmp_cond_truth_5 == 1)
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_cond_value_3 = tmp_or_1__value_1.object;

    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_cond_value_3 = NULL;
    // Tried code
    tmp_result = tmp_or_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_1__value_1.object );
        tmp_or_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_2 = const_str_plain__check;
    tmp_compexpr_right_2 = var_r.object;

    if ( tmp_compexpr_right_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 11969 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1342;
        goto try_finally_handler_11;
    }

    tmp_cond_value_3 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1342;
        goto try_finally_handler_11;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_11:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_8 != NULL )
    {
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;

        goto try_finally_handler_7;
    }

    goto finally_end_8;
    finally_end_8:;
    condexpr_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_7:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_9 != NULL )
    {
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;

        goto try_finally_handler_6;
    }

    goto finally_end_9;
    finally_end_9:;
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1342;
        goto try_finally_handler_6;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_called_11 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_11 == NULL ))
    {
        tmp_called_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127020 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1343;
        goto try_finally_handler_6;
    }

    tmp_call_arg_element_11 = var_r.object;

    if ( tmp_call_arg_element_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 11969 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1343;
        goto try_finally_handler_6;
    }

    tmp_call_arg_element_12 = var_vrd.object;

    if ( tmp_call_arg_element_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129813 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1343;
        goto try_finally_handler_6;
    }

    tmp_call_arg_element_13 = par_rout.object;

    if ( tmp_call_arg_element_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124776 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1343;
        goto try_finally_handler_6;
    }

    frame_function->f_lineno = 1343;
    tmp_assign_source_24 = CALL_FUNCTION_WITH_ARGS3( tmp_called_11, tmp_call_arg_element_11, tmp_call_arg_element_12, tmp_call_arg_element_13 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1343;
        goto try_finally_handler_6;
    }
    if (var_ar.object == NULL)
    {
        var_ar.object = tmp_assign_source_24;
    }
    else
    {
        PyObject *old = var_ar.object;
        var_ar.object = tmp_assign_source_24;
        Py_DECREF( old );
    }
    tmp_called_12 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_12 == NULL ))
    {
        tmp_called_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126933 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1344;
        goto try_finally_handler_6;
    }

    tmp_call_arg_element_14 = var_rd.object;

    if ( tmp_call_arg_element_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1344;
        goto try_finally_handler_6;
    }

    tmp_call_arg_element_15 = var_ar.object;

    frame_function->f_lineno = 1344;
    tmp_assign_source_25 = CALL_FUNCTION_WITH_ARGS2( tmp_called_12, tmp_call_arg_element_14, tmp_call_arg_element_15 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1344;
        goto try_finally_handler_6;
    }
    if (var_rd.object == NULL)
    {
        var_rd.object = tmp_assign_source_25;
    }
    else
    {
        PyObject *old = var_rd.object;
        var_rd.object = tmp_assign_source_25;
        Py_DECREF( old );
    }
    branch_no_3:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_6 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_1__value_1.object );
    tmp_or_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_6;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_10 != NULL )
    {
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;

        goto try_finally_handler_5;
    }

    goto finally_end_10;
    finally_end_10:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1341;
        goto try_finally_handler_5;
    }
    goto loop_start_2;
    loop_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_7 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_7;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_11 != NULL )
    {
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;

        goto frame_exception_exit_1;
    }

    goto finally_end_11;
    finally_end_11:;
    // Tried code
    tmp_iter_arg_5 = const_tuple_int_0_int_0_tuple;
    tmp_assign_source_26 = MAKE_ITERATOR( tmp_iter_arg_5 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1347;
        goto try_finally_handler_12;
    }
    assert( tmp_tuple_unpack_3__source_iter.object == NULL );
    tmp_tuple_unpack_3__source_iter.object = tmp_assign_source_26;

    tmp_unpack_5 = tmp_tuple_unpack_3__source_iter.object;

    tmp_assign_source_27 = UNPACK_PARAMETER_NEXT( tmp_unpack_5, 0 );
    if ( tmp_assign_source_27 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1347;
        goto try_finally_handler_12;
    }
    assert( tmp_tuple_unpack_3__element_1.object == NULL );
    tmp_tuple_unpack_3__element_1.object = tmp_assign_source_27;

    tmp_unpack_6 = tmp_tuple_unpack_3__source_iter.object;

    tmp_assign_source_28 = UNPACK_PARAMETER_NEXT( tmp_unpack_6, 1 );
    if ( tmp_assign_source_28 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1347;
        goto try_finally_handler_12;
    }
    assert( tmp_tuple_unpack_3__element_2.object == NULL );
    tmp_tuple_unpack_3__element_2.object = tmp_assign_source_28;

    tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_3 ); assert( PyIter_Check( tmp_iterator_name_3 ) );

    tmp_iterator_attempt_3 = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

    if (likely( tmp_iterator_attempt_3 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_12;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_3 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_12;
    }
    tmp_assign_source_29 = tmp_tuple_unpack_3__element_1.object;

    assert( var_nth.object == NULL );
    var_nth.object = INCREASE_REFCOUNT( tmp_assign_source_29 );

    tmp_assign_source_30 = tmp_tuple_unpack_3__element_2.object;

    assert( var_nthk.object == NULL );
    var_nthk.object = INCREASE_REFCOUNT( tmp_assign_source_30 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_12:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_8 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_3__source_iter.object );
    tmp_tuple_unpack_3__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_1.object );
    tmp_tuple_unpack_3__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_2.object );
    tmp_tuple_unpack_3__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_8;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_12 != NULL )
    {
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;

        goto frame_exception_exit_1;
    }

    goto finally_end_12;
    finally_end_12:;
    tmp_assign_source_31 = PyDict_New();
    assert( var_savevrd.object == NULL );
    var_savevrd.object = tmp_assign_source_31;

    tmp_iter_arg_6 = var_args.object;

    if ( tmp_iter_arg_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5435 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1349;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_32 = MAKE_ITERATOR( tmp_iter_arg_6 );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1349;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator.object == NULL );
    tmp_for_loop_2__for_iterator.object = tmp_assign_source_32;

    // Tried code
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_2__for_iterator.object;

    tmp_assign_source_33 = ITERATOR_NEXT( tmp_next_source_3 );
    if (tmp_assign_source_33 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_3;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1349;
            goto try_finally_handler_13;
        }
    }

    if (tmp_for_loop_2__iter_value.object == NULL)
    {
        tmp_for_loop_2__iter_value.object = tmp_assign_source_33;
    }
    else
    {
        PyObject *old = tmp_for_loop_2__iter_value.object;
        tmp_for_loop_2__iter_value.object = tmp_assign_source_33;
        Py_DECREF( old );
    }
    tmp_assign_source_34 = tmp_for_loop_2__iter_value.object;

    if (var_a.object == NULL)
    {
        var_a.object = INCREASE_REFCOUNT( tmp_assign_source_34 );
    }
    else
    {
        PyObject *old = var_a.object;
        var_a.object = INCREASE_REFCOUNT( tmp_assign_source_34 );
        Py_DECREF( old );
    }
    tmp_called_13 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_sign2map );

    if (unlikely( tmp_called_13 == NULL ))
    {
        tmp_called_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sign2map );
    }

    if ( tmp_called_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152298 ], 37, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1350;
        goto try_finally_handler_13;
    }

    tmp_call_arg_element_16 = var_a.object;

    tmp_subscr_target_7 = var_var.object;

    if ( tmp_subscr_target_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 88437 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1350;
        goto try_finally_handler_13;
    }

    tmp_subscr_subscript_7 = var_a.object;

    tmp_call_arg_element_17 = LOOKUP_SUBSCRIPT( tmp_subscr_target_7, tmp_subscr_subscript_7 );
    if ( tmp_call_arg_element_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1350;
        goto try_finally_handler_13;
    }
    frame_function->f_lineno = 1350;
    tmp_assign_source_35 = CALL_FUNCTION_WITH_ARGS2( tmp_called_13, tmp_call_arg_element_16, tmp_call_arg_element_17 );
    Py_DECREF( tmp_call_arg_element_17 );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1350;
        goto try_finally_handler_13;
    }
    if (var_vrd.object == NULL)
    {
        var_vrd.object = tmp_assign_source_35;
    }
    else
    {
        PyObject *old = var_vrd.object;
        var_vrd.object = tmp_assign_source_35;
        Py_DECREF( old );
    }
    tmp_called_14 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_aux );

    if (unlikely( tmp_called_14 == NULL ))
    {
        tmp_called_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_aux );
    }

    if ( tmp_called_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126649 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1351;
        goto try_finally_handler_13;
    }

    tmp_subscr_target_8 = var_var.object;

    if ( tmp_subscr_target_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 88437 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1351;
        goto try_finally_handler_13;
    }

    tmp_subscr_subscript_8 = var_a.object;

    tmp_call_arg_element_18 = LOOKUP_SUBSCRIPT( tmp_subscr_target_8, tmp_subscr_subscript_8 );
    if ( tmp_call_arg_element_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1351;
        goto try_finally_handler_13;
    }
    frame_function->f_lineno = 1351;
    tmp_cond_value_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_14, tmp_call_arg_element_18 );
    Py_DECREF( tmp_call_arg_element_18 );
    if ( tmp_cond_value_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1351;
        goto try_finally_handler_13;
    }
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        frame_function->f_lineno = 1351;
        goto try_finally_handler_13;
    }
    Py_DECREF( tmp_cond_value_6 );
    if (tmp_cond_truth_6 == 1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_assign_source_36 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_aux_rules );

    if (unlikely( tmp_assign_source_36 == NULL ))
    {
        tmp_assign_source_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_aux_rules );
    }

    if ( tmp_assign_source_36 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152335 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1352;
        goto try_finally_handler_13;
    }

    if (var__rules.object == NULL)
    {
        var__rules.object = INCREASE_REFCOUNT( tmp_assign_source_36 );
    }
    else
    {
        PyObject *old = var__rules.object;
        var__rules.object = INCREASE_REFCOUNT( tmp_assign_source_36 );
        Py_DECREF( old );
    }
    goto branch_end_4;
    branch_no_4:;
    tmp_assign_source_37 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_arg_rules );

    if (unlikely( tmp_assign_source_37 == NULL ))
    {
        tmp_assign_source_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_arg_rules );
    }

    if ( tmp_assign_source_37 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152373 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1354;
        goto try_finally_handler_13;
    }

    if (var__rules.object == NULL)
    {
        var__rules.object = INCREASE_REFCOUNT( tmp_assign_source_37 );
    }
    else
    {
        PyObject *old = var__rules.object;
        var__rules.object = INCREASE_REFCOUNT( tmp_assign_source_37 );
        Py_DECREF( old );
    }
    tmp_called_15 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_called_15 == NULL ))
    {
        tmp_called_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_called_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125395 ], 42, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1355;
        goto try_finally_handler_13;
    }

    tmp_subscr_target_9 = var_var.object;

    if ( tmp_subscr_target_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 88437 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1355;
        goto try_finally_handler_13;
    }

    tmp_subscr_subscript_9 = var_a.object;

    tmp_call_arg_element_19 = LOOKUP_SUBSCRIPT( tmp_subscr_target_9, tmp_subscr_subscript_9 );
    if ( tmp_call_arg_element_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1355;
        goto try_finally_handler_13;
    }
    frame_function->f_lineno = 1355;
    tmp_cond_value_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_15, tmp_call_arg_element_19 );
    Py_DECREF( tmp_call_arg_element_19 );
    if ( tmp_cond_value_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1355;
        goto try_finally_handler_13;
    }
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_7 );

        frame_function->f_lineno = 1355;
        goto try_finally_handler_13;
    }
    Py_DECREF( tmp_cond_value_7 );
    if (tmp_cond_truth_7 == 1)
    {
        goto branch_no_5;
    }
    else
    {
        goto branch_yes_5;
    }
    branch_yes_5:;
    tmp_called_16 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_called_16 == NULL ))
    {
        tmp_called_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_called_16 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125235 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1356;
        goto try_finally_handler_13;
    }

    tmp_subscr_target_10 = var_var.object;

    if ( tmp_subscr_target_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 88437 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1356;
        goto try_finally_handler_13;
    }

    tmp_subscr_subscript_10 = var_a.object;

    tmp_call_arg_element_20 = LOOKUP_SUBSCRIPT( tmp_subscr_target_10, tmp_subscr_subscript_10 );
    if ( tmp_call_arg_element_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1356;
        goto try_finally_handler_13;
    }
    frame_function->f_lineno = 1356;
    tmp_cond_value_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_16, tmp_call_arg_element_20 );
    Py_DECREF( tmp_call_arg_element_20 );
    if ( tmp_cond_value_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1356;
        goto try_finally_handler_13;
    }
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_8 );

        frame_function->f_lineno = 1356;
        goto try_finally_handler_13;
    }
    Py_DECREF( tmp_cond_value_8 );
    if (tmp_cond_truth_8 == 1)
    {
        goto branch_no_6;
    }
    else
    {
        goto branch_yes_6;
    }
    branch_yes_6:;
    tmp_binop_left_3 = var_nth.object;

    if ( tmp_binop_left_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152411 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1357;
        goto try_finally_handler_13;
    }

    tmp_binop_right_3 = const_int_pos_1;
    tmp_assign_source_38 = BINARY_OPERATION_ADD( tmp_binop_left_3, tmp_binop_right_3 );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1357;
        goto try_finally_handler_13;
    }
    if (var_nth.object == NULL)
    {
        var_nth.object = tmp_assign_source_38;
    }
    else
    {
        PyObject *old = var_nth.object;
        var_nth.object = tmp_assign_source_38;
        Py_DECREF( old );
    }
    tmp_unary_arg_1 = var_nth.object;

    tmp_binop_left_5 = UNARY_OPERATION( PyObject_Repr, tmp_unary_arg_1 );
    if ( tmp_binop_left_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1358;
        goto try_finally_handler_13;
    }
    tmp_subscr_target_11 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stnd );

    if (unlikely( tmp_subscr_target_11 == NULL ))
    {
        tmp_subscr_target_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stnd );
    }

    if ( tmp_subscr_target_11 == NULL )
    {
        Py_DECREF( tmp_binop_left_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152460 ], 33, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1358;
        goto try_finally_handler_13;
    }

    tmp_binop_left_6 = var_nth.object;

    tmp_binop_right_6 = const_int_pos_10;
    tmp_subscr_subscript_11 = BINARY_OPERATION_REMAINDER( tmp_binop_left_6, tmp_binop_right_6 );
    if ( tmp_subscr_subscript_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_5 );

        frame_function->f_lineno = 1358;
        goto try_finally_handler_13;
    }
    tmp_binop_right_5 = LOOKUP_SUBSCRIPT( tmp_subscr_target_11, tmp_subscr_subscript_11 );
    Py_DECREF( tmp_subscr_subscript_11 );
    if ( tmp_binop_right_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_5 );

        frame_function->f_lineno = 1358;
        goto try_finally_handler_13;
    }
    tmp_binop_left_4 = BINARY_OPERATION_ADD( tmp_binop_left_5, tmp_binop_right_5 );
    Py_DECREF( tmp_binop_left_5 );
    Py_DECREF( tmp_binop_right_5 );
    if ( tmp_binop_left_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1358;
        goto try_finally_handler_13;
    }
    tmp_binop_right_4 = const_str_digest_a8f7031741e338c5a3662bc8bde493c2;
    tmp_ass_subvalue_1 = BINARY_OPERATION_ADD( tmp_binop_left_4, tmp_binop_right_4 );
    Py_DECREF( tmp_binop_left_4 );
    if ( tmp_ass_subvalue_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1358;
        goto try_finally_handler_13;
    }
    tmp_ass_subscribed_1 = var_vrd.object;

    tmp_ass_subscript_1 = const_str_plain_nth;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1358;
        goto try_finally_handler_13;
    }
    goto branch_end_6;
    branch_no_6:;
    tmp_binop_left_7 = var_nthk.object;

    if ( tmp_binop_left_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152493 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1360;
        goto try_finally_handler_13;
    }

    tmp_binop_right_7 = const_int_pos_1;
    tmp_assign_source_39 = BINARY_OPERATION_ADD( tmp_binop_left_7, tmp_binop_right_7 );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1360;
        goto try_finally_handler_13;
    }
    if (var_nthk.object == NULL)
    {
        var_nthk.object = tmp_assign_source_39;
    }
    else
    {
        PyObject *old = var_nthk.object;
        var_nthk.object = tmp_assign_source_39;
        Py_DECREF( old );
    }
    tmp_unary_arg_2 = var_nthk.object;

    tmp_binop_left_9 = UNARY_OPERATION( PyObject_Repr, tmp_unary_arg_2 );
    if ( tmp_binop_left_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1361;
        goto try_finally_handler_13;
    }
    tmp_subscr_target_12 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stnd );

    if (unlikely( tmp_subscr_target_12 == NULL ))
    {
        tmp_subscr_target_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stnd );
    }

    if ( tmp_subscr_target_12 == NULL )
    {
        Py_DECREF( tmp_binop_left_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152460 ], 33, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1361;
        goto try_finally_handler_13;
    }

    tmp_binop_left_10 = var_nthk.object;

    tmp_binop_right_10 = const_int_pos_10;
    tmp_subscr_subscript_12 = BINARY_OPERATION_REMAINDER( tmp_binop_left_10, tmp_binop_right_10 );
    if ( tmp_subscr_subscript_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_9 );

        frame_function->f_lineno = 1361;
        goto try_finally_handler_13;
    }
    tmp_binop_right_9 = LOOKUP_SUBSCRIPT( tmp_subscr_target_12, tmp_subscr_subscript_12 );
    Py_DECREF( tmp_subscr_subscript_12 );
    if ( tmp_binop_right_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_9 );

        frame_function->f_lineno = 1361;
        goto try_finally_handler_13;
    }
    tmp_binop_left_8 = BINARY_OPERATION_ADD( tmp_binop_left_9, tmp_binop_right_9 );
    Py_DECREF( tmp_binop_left_9 );
    Py_DECREF( tmp_binop_right_9 );
    if ( tmp_binop_left_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1361;
        goto try_finally_handler_13;
    }
    tmp_binop_right_8 = const_str_digest_de18e03ff93a362044876849cf37696f;
    tmp_ass_subvalue_2 = BINARY_OPERATION_ADD( tmp_binop_left_8, tmp_binop_right_8 );
    Py_DECREF( tmp_binop_left_8 );
    if ( tmp_ass_subvalue_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1361;
        goto try_finally_handler_13;
    }
    tmp_ass_subscribed_2 = var_vrd.object;

    tmp_ass_subscript_2 = const_str_plain_nth;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
    Py_DECREF( tmp_ass_subvalue_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1361;
        goto try_finally_handler_13;
    }
    branch_end_6:;
    goto branch_end_5;
    branch_no_5:;
    tmp_ass_subvalue_3 = const_str_plain_hidden;
    tmp_ass_subscribed_3 = var_vrd.object;

    tmp_ass_subscript_3 = const_str_plain_nth;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1362;
        goto try_finally_handler_13;
    }
    branch_end_5:;
    branch_end_4:;
    tmp_ass_subvalue_4 = var_vrd.object;

    tmp_ass_subscribed_4 = var_savevrd.object;

    if ( tmp_ass_subscribed_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129862 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1363;
        goto try_finally_handler_13;
    }

    tmp_ass_subscript_4 = var_a.object;

    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_4, tmp_ass_subscript_4, tmp_ass_subvalue_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1363;
        goto try_finally_handler_13;
    }
    tmp_iter_arg_7 = var__rules.object;

    tmp_assign_source_40 = MAKE_ITERATOR( tmp_iter_arg_7 );
    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1364;
        goto try_finally_handler_13;
    }
    if (tmp_for_loop_3__for_iterator.object == NULL)
    {
        tmp_for_loop_3__for_iterator.object = tmp_assign_source_40;
    }
    else
    {
        PyObject *old = tmp_for_loop_3__for_iterator.object;
        tmp_for_loop_3__for_iterator.object = tmp_assign_source_40;
        Py_DECREF( old );
    }
    // Tried code
    loop_start_4:;
    tmp_next_source_4 = tmp_for_loop_3__for_iterator.object;

    tmp_assign_source_41 = ITERATOR_NEXT( tmp_next_source_4 );
    if (tmp_assign_source_41 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_4;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1364;
            goto try_finally_handler_14;
        }
    }

    if (tmp_for_loop_3__iter_value.object == NULL)
    {
        tmp_for_loop_3__iter_value.object = tmp_assign_source_41;
    }
    else
    {
        PyObject *old = tmp_for_loop_3__iter_value.object;
        tmp_for_loop_3__iter_value.object = tmp_assign_source_41;
        Py_DECREF( old );
    }
    tmp_assign_source_42 = tmp_for_loop_3__iter_value.object;

    if (var_r.object == NULL)
    {
        var_r.object = INCREASE_REFCOUNT( tmp_assign_source_42 );
    }
    else
    {
        PyObject *old = var_r.object;
        var_r.object = INCREASE_REFCOUNT( tmp_assign_source_42 );
        Py_DECREF( old );
    }
    tmp_compare_left_1 = const_str_plain__depend;
    tmp_compare_right_1 = var_r.object;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    if ( tmp_cmp_In_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1365;
        goto try_finally_handler_14;
    }
    if (tmp_cmp_In_1 == 1)
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    goto loop_start_4;
    branch_no_7:;
    tmp_break_1 = false;
    // Tried code
    tmp_cond_value_9 = NULL;
    // Tried code
    // Tried code
    tmp_assign_source_43 = NULL;
    // Tried code
    tmp_compexpr_left_3 = const_str_plain__check;
    tmp_compexpr_right_3 = var_r.object;

    tmp_assign_source_44 = SEQUENCE_CONTAINS( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1367;
        goto try_finally_handler_18;
    }
    if (tmp_and_2__value_1.object == NULL)
    {
        tmp_and_2__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_44 );
    }
    else
    {
        PyObject *old = tmp_and_2__value_1.object;
        tmp_and_2__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_44 );
        Py_DECREF( old );
    }
    tmp_cond_value_10 = tmp_and_2__value_1.object;

    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1367;
        goto try_finally_handler_18;
    }
    if (tmp_cond_truth_10 == 1)
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_assign_source_43 = NULL;
    // Tried code
    tmp_result = tmp_and_2__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_2__value_1.object );
        tmp_and_2__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_subscr_target_13 = var_r.object;

    tmp_subscr_subscript_13 = const_str_plain__check;
    tmp_called_17 = LOOKUP_SUBSCRIPT( tmp_subscr_target_13, tmp_subscr_subscript_13 );
    if ( tmp_called_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1367;
        goto try_finally_handler_19;
    }
    tmp_subscr_target_14 = var_var.object;

    if ( tmp_subscr_target_14 == NULL )
    {
        Py_DECREF( tmp_called_17 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 88437 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1367;
        goto try_finally_handler_19;
    }

    tmp_subscr_subscript_14 = var_a.object;

    if ( tmp_subscr_subscript_14 == NULL )
    {
        Py_DECREF( tmp_called_17 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5854 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1367;
        goto try_finally_handler_19;
    }

    tmp_call_arg_element_21 = LOOKUP_SUBSCRIPT( tmp_subscr_target_14, tmp_subscr_subscript_14 );
    if ( tmp_call_arg_element_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_17 );

        frame_function->f_lineno = 1367;
        goto try_finally_handler_19;
    }
    frame_function->f_lineno = 1367;
    tmp_assign_source_43 = CALL_FUNCTION_WITH_ARGS1( tmp_called_17, tmp_call_arg_element_21 );
    Py_DECREF( tmp_called_17 );
    Py_DECREF( tmp_call_arg_element_21 );
    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1367;
        goto try_finally_handler_19;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_19:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_13 != NULL )
    {
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;

        goto try_finally_handler_18;
    }

    goto finally_end_13;
    finally_end_13:;
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_assign_source_43 = tmp_and_2__value_1.object;

    Py_INCREF( tmp_assign_source_43 );
    condexpr_end_3:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_18:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_14 != NULL )
    {
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;

        goto try_finally_handler_17;
    }

    goto finally_end_14;
    finally_end_14:;
    if (tmp_or_2__value_1.object == NULL)
    {
        tmp_or_2__value_1.object = tmp_assign_source_43;
    }
    else
    {
        PyObject *old = tmp_or_2__value_1.object;
        tmp_or_2__value_1.object = tmp_assign_source_43;
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_17:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_9 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_2__value_1.object );
    tmp_and_2__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_9;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_15 != NULL )
    {
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;

        goto try_finally_handler_16;
    }

    goto finally_end_15;
    finally_end_15:;
    tmp_cond_value_11 = tmp_or_2__value_1.object;

    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1367;
        goto try_finally_handler_16;
    }
    if (tmp_cond_truth_11 == 1)
    {
        goto condexpr_true_4;
    }
    else
    {
        goto condexpr_false_4;
    }
    condexpr_true_4:;
    tmp_cond_value_9 = tmp_or_2__value_1.object;

    goto condexpr_end_4;
    condexpr_false_4:;
    tmp_cond_value_9 = NULL;
    // Tried code
    tmp_result = tmp_or_2__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_2__value_1.object );
        tmp_or_2__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_4 = const_str_plain__check;
    tmp_compexpr_right_4 = var_r.object;

    if ( tmp_compexpr_right_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 11969 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1367;
        goto try_finally_handler_20;
    }

    tmp_cond_value_9 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    if ( tmp_cond_value_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1367;
        goto try_finally_handler_20;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_20:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_16 != NULL )
    {
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;

        goto try_finally_handler_16;
    }

    goto finally_end_16;
    finally_end_16:;
    condexpr_end_4:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_16:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_17 != NULL )
    {
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;

        goto try_finally_handler_15;
    }

    goto finally_end_17;
    finally_end_17:;
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1367;
        goto try_finally_handler_15;
    }
    if (tmp_cond_truth_9 == 1)
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_called_18 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_18 == NULL ))
    {
        tmp_called_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_18 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127020 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1368;
        goto try_finally_handler_15;
    }

    tmp_call_arg_element_22 = var_r.object;

    if ( tmp_call_arg_element_22 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 11969 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1368;
        goto try_finally_handler_15;
    }

    tmp_call_arg_element_23 = var_vrd.object;

    if ( tmp_call_arg_element_23 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129813 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1368;
        goto try_finally_handler_15;
    }

    tmp_subscr_target_15 = var_var.object;

    if ( tmp_subscr_target_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 88437 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1368;
        goto try_finally_handler_15;
    }

    tmp_subscr_subscript_15 = var_a.object;

    if ( tmp_subscr_subscript_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5854 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1368;
        goto try_finally_handler_15;
    }

    tmp_call_arg_element_24 = LOOKUP_SUBSCRIPT( tmp_subscr_target_15, tmp_subscr_subscript_15 );
    if ( tmp_call_arg_element_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1368;
        goto try_finally_handler_15;
    }
    frame_function->f_lineno = 1368;
    tmp_assign_source_45 = CALL_FUNCTION_WITH_ARGS3( tmp_called_18, tmp_call_arg_element_22, tmp_call_arg_element_23, tmp_call_arg_element_24 );
    Py_DECREF( tmp_call_arg_element_24 );
    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1368;
        goto try_finally_handler_15;
    }
    if (var_ar.object == NULL)
    {
        var_ar.object = tmp_assign_source_45;
    }
    else
    {
        PyObject *old = var_ar.object;
        var_ar.object = tmp_assign_source_45;
        Py_DECREF( old );
    }
    tmp_called_19 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_19 == NULL ))
    {
        tmp_called_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_19 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126933 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1369;
        goto try_finally_handler_15;
    }

    tmp_call_arg_element_25 = var_rd.object;

    if ( tmp_call_arg_element_25 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1369;
        goto try_finally_handler_15;
    }

    tmp_call_arg_element_26 = var_ar.object;

    frame_function->f_lineno = 1369;
    tmp_assign_source_46 = CALL_FUNCTION_WITH_ARGS2( tmp_called_19, tmp_call_arg_element_25, tmp_call_arg_element_26 );
    if ( tmp_assign_source_46 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1369;
        goto try_finally_handler_15;
    }
    if (var_rd.object == NULL)
    {
        var_rd.object = tmp_assign_source_46;
    }
    else
    {
        PyObject *old = var_rd.object;
        var_rd.object = tmp_assign_source_46;
        Py_DECREF( old );
    }
    tmp_compare_left_2 = const_str_plain__break;
    tmp_compare_right_2 = var_r.object;

    if ( tmp_compare_right_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 11969 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1370;
        goto try_finally_handler_15;
    }

    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    if ( tmp_cmp_In_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1370;
        goto try_finally_handler_15;
    }
    if (tmp_cmp_In_2 == 1)
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_break_1 = true;
    goto try_finally_handler_start_1;
    branch_no_9:;
    branch_no_8:;
    try_finally_handler_start_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_15:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_10 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_2__value_1.object );
    tmp_or_2__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_10;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_18 != NULL )
    {
        exception_type = exception_keeper_type_18;
        exception_value = exception_keeper_value_18;
        exception_tb = exception_keeper_tb_18;

        goto try_finally_handler_14;
    }

    // Break if entered via break.
    if ( tmp_break_1 )
    {

    goto loop_end_4;
    }
    goto finally_end_18;
    finally_end_18:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1364;
        goto try_finally_handler_14;
    }
    goto loop_start_4;
    loop_end_4:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_14:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_11 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_3__iter_value.object );
    tmp_for_loop_3__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_3__for_iterator.object );
    tmp_for_loop_3__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_11;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_19 != NULL )
    {
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;

        goto try_finally_handler_13;
    }

    goto finally_end_19;
    finally_end_19:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1349;
        goto try_finally_handler_13;
    }
    goto loop_start_3;
    loop_end_3:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_13:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_12 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_2__iter_value.object );
    tmp_for_loop_2__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator.object );
    tmp_for_loop_2__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_12;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_20 != NULL )
    {
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;

        goto frame_exception_exit_1;
    }

    goto finally_end_20;
    finally_end_20:;
    tmp_iter_arg_8 = var_depargs.object;

    if ( tmp_iter_arg_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129663 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1372;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_47 = MAKE_ITERATOR( tmp_iter_arg_8 );
    if ( tmp_assign_source_47 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1372;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_4__for_iterator.object == NULL );
    tmp_for_loop_4__for_iterator.object = tmp_assign_source_47;

    // Tried code
    loop_start_5:;
    tmp_next_source_5 = tmp_for_loop_4__for_iterator.object;

    tmp_assign_source_48 = ITERATOR_NEXT( tmp_next_source_5 );
    if (tmp_assign_source_48 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_5;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1372;
            goto try_finally_handler_21;
        }
    }

    if (tmp_for_loop_4__iter_value.object == NULL)
    {
        tmp_for_loop_4__iter_value.object = tmp_assign_source_48;
    }
    else
    {
        PyObject *old = tmp_for_loop_4__iter_value.object;
        tmp_for_loop_4__iter_value.object = tmp_assign_source_48;
        Py_DECREF( old );
    }
    tmp_assign_source_49 = tmp_for_loop_4__iter_value.object;

    if (var_a.object == NULL)
    {
        var_a.object = INCREASE_REFCOUNT( tmp_assign_source_49 );
    }
    else
    {
        PyObject *old = var_a.object;
        var_a.object = INCREASE_REFCOUNT( tmp_assign_source_49 );
        Py_DECREF( old );
    }
    tmp_called_20 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_aux );

    if (unlikely( tmp_called_20 == NULL ))
    {
        tmp_called_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_aux );
    }

    if ( tmp_called_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126649 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1373;
        goto try_finally_handler_21;
    }

    tmp_subscr_target_16 = var_var.object;

    if ( tmp_subscr_target_16 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 88437 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1373;
        goto try_finally_handler_21;
    }

    tmp_subscr_subscript_16 = var_a.object;

    tmp_call_arg_element_27 = LOOKUP_SUBSCRIPT( tmp_subscr_target_16, tmp_subscr_subscript_16 );
    if ( tmp_call_arg_element_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1373;
        goto try_finally_handler_21;
    }
    frame_function->f_lineno = 1373;
    tmp_cond_value_12 = CALL_FUNCTION_WITH_ARGS1( tmp_called_20, tmp_call_arg_element_27 );
    Py_DECREF( tmp_call_arg_element_27 );
    if ( tmp_cond_value_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1373;
        goto try_finally_handler_21;
    }
    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_12 );

        frame_function->f_lineno = 1373;
        goto try_finally_handler_21;
    }
    Py_DECREF( tmp_cond_value_12 );
    if (tmp_cond_truth_12 == 1)
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_assign_source_50 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_aux_rules );

    if (unlikely( tmp_assign_source_50 == NULL ))
    {
        tmp_assign_source_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_aux_rules );
    }

    if ( tmp_assign_source_50 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152335 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1374;
        goto try_finally_handler_21;
    }

    if (var__rules.object == NULL)
    {
        var__rules.object = INCREASE_REFCOUNT( tmp_assign_source_50 );
    }
    else
    {
        PyObject *old = var__rules.object;
        var__rules.object = INCREASE_REFCOUNT( tmp_assign_source_50 );
        Py_DECREF( old );
    }
    goto branch_end_10;
    branch_no_10:;
    tmp_assign_source_51 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_arg_rules );

    if (unlikely( tmp_assign_source_51 == NULL ))
    {
        tmp_assign_source_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_arg_rules );
    }

    if ( tmp_assign_source_51 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152373 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1376;
        goto try_finally_handler_21;
    }

    if (var__rules.object == NULL)
    {
        var__rules.object = INCREASE_REFCOUNT( tmp_assign_source_51 );
    }
    else
    {
        PyObject *old = var__rules.object;
        var__rules.object = INCREASE_REFCOUNT( tmp_assign_source_51 );
        Py_DECREF( old );
    }
    branch_end_10:;
    tmp_subscr_target_17 = var_savevrd.object;

    if ( tmp_subscr_target_17 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129862 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1377;
        goto try_finally_handler_21;
    }

    tmp_subscr_subscript_17 = var_a.object;

    tmp_assign_source_52 = LOOKUP_SUBSCRIPT( tmp_subscr_target_17, tmp_subscr_subscript_17 );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1377;
        goto try_finally_handler_21;
    }
    if (var_vrd.object == NULL)
    {
        var_vrd.object = tmp_assign_source_52;
    }
    else
    {
        PyObject *old = var_vrd.object;
        var_vrd.object = tmp_assign_source_52;
        Py_DECREF( old );
    }
    tmp_iter_arg_9 = var__rules.object;

    tmp_assign_source_53 = MAKE_ITERATOR( tmp_iter_arg_9 );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1378;
        goto try_finally_handler_21;
    }
    if (tmp_for_loop_5__for_iterator.object == NULL)
    {
        tmp_for_loop_5__for_iterator.object = tmp_assign_source_53;
    }
    else
    {
        PyObject *old = tmp_for_loop_5__for_iterator.object;
        tmp_for_loop_5__for_iterator.object = tmp_assign_source_53;
        Py_DECREF( old );
    }
    // Tried code
    loop_start_6:;
    tmp_next_source_6 = tmp_for_loop_5__for_iterator.object;

    tmp_assign_source_54 = ITERATOR_NEXT( tmp_next_source_6 );
    if (tmp_assign_source_54 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_6;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1378;
            goto try_finally_handler_22;
        }
    }

    if (tmp_for_loop_5__iter_value.object == NULL)
    {
        tmp_for_loop_5__iter_value.object = tmp_assign_source_54;
    }
    else
    {
        PyObject *old = tmp_for_loop_5__iter_value.object;
        tmp_for_loop_5__iter_value.object = tmp_assign_source_54;
        Py_DECREF( old );
    }
    tmp_assign_source_55 = tmp_for_loop_5__iter_value.object;

    if (var_r.object == NULL)
    {
        var_r.object = INCREASE_REFCOUNT( tmp_assign_source_55 );
    }
    else
    {
        PyObject *old = var_r.object;
        var_r.object = INCREASE_REFCOUNT( tmp_assign_source_55 );
        Py_DECREF( old );
    }
    tmp_compare_left_3 = const_str_plain__depend;
    tmp_compare_right_3 = var_r.object;

    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    if ( tmp_cmp_NotIn_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1379;
        goto try_finally_handler_22;
    }
    if (tmp_cmp_NotIn_1 == 0)
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    goto loop_start_6;
    branch_no_11:;
    tmp_break_2 = false;
    // Tried code
    tmp_cond_value_13 = NULL;
    // Tried code
    // Tried code
    tmp_assign_source_56 = NULL;
    // Tried code
    tmp_compexpr_left_5 = const_str_plain__check;
    tmp_compexpr_right_5 = var_r.object;

    tmp_assign_source_57 = SEQUENCE_CONTAINS( tmp_compexpr_left_5, tmp_compexpr_right_5 );
    if ( tmp_assign_source_57 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1381;
        goto try_finally_handler_26;
    }
    if (tmp_and_3__value_1.object == NULL)
    {
        tmp_and_3__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_57 );
    }
    else
    {
        PyObject *old = tmp_and_3__value_1.object;
        tmp_and_3__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_57 );
        Py_DECREF( old );
    }
    tmp_cond_value_14 = tmp_and_3__value_1.object;

    tmp_cond_truth_14 = CHECK_IF_TRUE( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1381;
        goto try_finally_handler_26;
    }
    if (tmp_cond_truth_14 == 1)
    {
        goto condexpr_true_5;
    }
    else
    {
        goto condexpr_false_5;
    }
    condexpr_true_5:;
    tmp_assign_source_56 = NULL;
    // Tried code
    tmp_result = tmp_and_3__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_3__value_1.object );
        tmp_and_3__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_subscr_target_18 = var_r.object;

    tmp_subscr_subscript_18 = const_str_plain__check;
    tmp_called_21 = LOOKUP_SUBSCRIPT( tmp_subscr_target_18, tmp_subscr_subscript_18 );
    if ( tmp_called_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1381;
        goto try_finally_handler_27;
    }
    tmp_subscr_target_19 = var_var.object;

    if ( tmp_subscr_target_19 == NULL )
    {
        Py_DECREF( tmp_called_21 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 88437 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1381;
        goto try_finally_handler_27;
    }

    tmp_subscr_subscript_19 = var_a.object;

    if ( tmp_subscr_subscript_19 == NULL )
    {
        Py_DECREF( tmp_called_21 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5854 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1381;
        goto try_finally_handler_27;
    }

    tmp_call_arg_element_28 = LOOKUP_SUBSCRIPT( tmp_subscr_target_19, tmp_subscr_subscript_19 );
    if ( tmp_call_arg_element_28 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_21 );

        frame_function->f_lineno = 1381;
        goto try_finally_handler_27;
    }
    frame_function->f_lineno = 1381;
    tmp_assign_source_56 = CALL_FUNCTION_WITH_ARGS1( tmp_called_21, tmp_call_arg_element_28 );
    Py_DECREF( tmp_called_21 );
    Py_DECREF( tmp_call_arg_element_28 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1381;
        goto try_finally_handler_27;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_27:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_21 != NULL )
    {
        exception_type = exception_keeper_type_21;
        exception_value = exception_keeper_value_21;
        exception_tb = exception_keeper_tb_21;

        goto try_finally_handler_26;
    }

    goto finally_end_21;
    finally_end_21:;
    goto condexpr_end_5;
    condexpr_false_5:;
    tmp_assign_source_56 = tmp_and_3__value_1.object;

    Py_INCREF( tmp_assign_source_56 );
    condexpr_end_5:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_26:;
    exception_keeper_type_22 = exception_type;
    exception_keeper_value_22 = exception_value;
    exception_keeper_tb_22 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_22 != NULL )
    {
        exception_type = exception_keeper_type_22;
        exception_value = exception_keeper_value_22;
        exception_tb = exception_keeper_tb_22;

        goto try_finally_handler_25;
    }

    goto finally_end_22;
    finally_end_22:;
    if (tmp_or_3__value_1.object == NULL)
    {
        tmp_or_3__value_1.object = tmp_assign_source_56;
    }
    else
    {
        PyObject *old = tmp_or_3__value_1.object;
        tmp_or_3__value_1.object = tmp_assign_source_56;
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_25:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_13 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_3__value_1.object );
    tmp_and_3__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_13;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_23 != NULL )
    {
        exception_type = exception_keeper_type_23;
        exception_value = exception_keeper_value_23;
        exception_tb = exception_keeper_tb_23;

        goto try_finally_handler_24;
    }

    goto finally_end_23;
    finally_end_23:;
    tmp_cond_value_15 = tmp_or_3__value_1.object;

    tmp_cond_truth_15 = CHECK_IF_TRUE( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1381;
        goto try_finally_handler_24;
    }
    if (tmp_cond_truth_15 == 1)
    {
        goto condexpr_true_6;
    }
    else
    {
        goto condexpr_false_6;
    }
    condexpr_true_6:;
    tmp_cond_value_13 = tmp_or_3__value_1.object;

    goto condexpr_end_6;
    condexpr_false_6:;
    tmp_cond_value_13 = NULL;
    // Tried code
    tmp_result = tmp_or_3__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_3__value_1.object );
        tmp_or_3__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_6 = const_str_plain__check;
    tmp_compexpr_right_6 = var_r.object;

    if ( tmp_compexpr_right_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 11969 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1381;
        goto try_finally_handler_28;
    }

    tmp_cond_value_13 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
    if ( tmp_cond_value_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1381;
        goto try_finally_handler_28;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_28:;
    exception_keeper_type_24 = exception_type;
    exception_keeper_value_24 = exception_value;
    exception_keeper_tb_24 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_24 != NULL )
    {
        exception_type = exception_keeper_type_24;
        exception_value = exception_keeper_value_24;
        exception_tb = exception_keeper_tb_24;

        goto try_finally_handler_24;
    }

    goto finally_end_24;
    finally_end_24:;
    condexpr_end_6:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_24:;
    exception_keeper_type_25 = exception_type;
    exception_keeper_value_25 = exception_value;
    exception_keeper_tb_25 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_25 != NULL )
    {
        exception_type = exception_keeper_type_25;
        exception_value = exception_keeper_value_25;
        exception_tb = exception_keeper_tb_25;

        goto try_finally_handler_23;
    }

    goto finally_end_25;
    finally_end_25:;
    tmp_cond_truth_13 = CHECK_IF_TRUE( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1381;
        goto try_finally_handler_23;
    }
    if (tmp_cond_truth_13 == 1)
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_called_22 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_22 == NULL ))
    {
        tmp_called_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_22 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127020 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1382;
        goto try_finally_handler_23;
    }

    tmp_call_arg_element_29 = var_r.object;

    if ( tmp_call_arg_element_29 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 11969 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1382;
        goto try_finally_handler_23;
    }

    tmp_call_arg_element_30 = var_vrd.object;

    if ( tmp_call_arg_element_30 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129813 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1382;
        goto try_finally_handler_23;
    }

    tmp_subscr_target_20 = var_var.object;

    if ( tmp_subscr_target_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 88437 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1382;
        goto try_finally_handler_23;
    }

    tmp_subscr_subscript_20 = var_a.object;

    if ( tmp_subscr_subscript_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5854 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1382;
        goto try_finally_handler_23;
    }

    tmp_call_arg_element_31 = LOOKUP_SUBSCRIPT( tmp_subscr_target_20, tmp_subscr_subscript_20 );
    if ( tmp_call_arg_element_31 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1382;
        goto try_finally_handler_23;
    }
    frame_function->f_lineno = 1382;
    tmp_assign_source_58 = CALL_FUNCTION_WITH_ARGS3( tmp_called_22, tmp_call_arg_element_29, tmp_call_arg_element_30, tmp_call_arg_element_31 );
    Py_DECREF( tmp_call_arg_element_31 );
    if ( tmp_assign_source_58 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1382;
        goto try_finally_handler_23;
    }
    if (var_ar.object == NULL)
    {
        var_ar.object = tmp_assign_source_58;
    }
    else
    {
        PyObject *old = var_ar.object;
        var_ar.object = tmp_assign_source_58;
        Py_DECREF( old );
    }
    tmp_called_23 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_23 == NULL ))
    {
        tmp_called_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_23 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126933 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1383;
        goto try_finally_handler_23;
    }

    tmp_call_arg_element_32 = var_rd.object;

    if ( tmp_call_arg_element_32 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1383;
        goto try_finally_handler_23;
    }

    tmp_call_arg_element_33 = var_ar.object;

    frame_function->f_lineno = 1383;
    tmp_assign_source_59 = CALL_FUNCTION_WITH_ARGS2( tmp_called_23, tmp_call_arg_element_32, tmp_call_arg_element_33 );
    if ( tmp_assign_source_59 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1383;
        goto try_finally_handler_23;
    }
    if (var_rd.object == NULL)
    {
        var_rd.object = tmp_assign_source_59;
    }
    else
    {
        PyObject *old = var_rd.object;
        var_rd.object = tmp_assign_source_59;
        Py_DECREF( old );
    }
    tmp_compare_left_4 = const_str_plain__break;
    tmp_compare_right_4 = var_r.object;

    if ( tmp_compare_right_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 11969 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1384;
        goto try_finally_handler_23;
    }

    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    if ( tmp_cmp_In_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1384;
        goto try_finally_handler_23;
    }
    if (tmp_cmp_In_3 == 1)
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_break_2 = true;
    goto try_finally_handler_start_2;
    branch_no_13:;
    branch_no_12:;
    try_finally_handler_start_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_23:;
    exception_keeper_type_26 = exception_type;
    exception_keeper_value_26 = exception_value;
    exception_keeper_tb_26 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_14 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_3__value_1.object );
    tmp_or_3__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_14;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_26 != NULL )
    {
        exception_type = exception_keeper_type_26;
        exception_value = exception_keeper_value_26;
        exception_tb = exception_keeper_tb_26;

        goto try_finally_handler_22;
    }

    // Break if entered via break.
    if ( tmp_break_2 )
    {

    goto loop_end_6;
    }
    goto finally_end_26;
    finally_end_26:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1378;
        goto try_finally_handler_22;
    }
    goto loop_start_6;
    loop_end_6:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_22:;
    exception_keeper_type_27 = exception_type;
    exception_keeper_value_27 = exception_value;
    exception_keeper_tb_27 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_15 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_5__iter_value.object );
    tmp_for_loop_5__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_5__for_iterator.object );
    tmp_for_loop_5__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_15;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_27 != NULL )
    {
        exception_type = exception_keeper_type_27;
        exception_value = exception_keeper_value_27;
        exception_tb = exception_keeper_tb_27;

        goto try_finally_handler_21;
    }

    goto finally_end_27;
    finally_end_27:;
    tmp_compare_left_5 = const_str_plain_check;
    tmp_subscr_target_21 = var_var.object;

    if ( tmp_subscr_target_21 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 88437 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1386;
        goto try_finally_handler_21;
    }

    tmp_subscr_subscript_21 = var_a.object;

    if ( tmp_subscr_subscript_21 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5854 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1386;
        goto try_finally_handler_21;
    }

    tmp_compare_right_5 = LOOKUP_SUBSCRIPT( tmp_subscr_target_21, tmp_subscr_subscript_21 );
    if ( tmp_compare_right_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1386;
        goto try_finally_handler_21;
    }
    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    if ( tmp_cmp_In_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_5 );

        frame_function->f_lineno = 1386;
        goto try_finally_handler_21;
    }
    Py_DECREF( tmp_compare_right_5 );
    if (tmp_cmp_In_4 == 1)
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_subscr_target_23 = var_var.object;

    if ( tmp_subscr_target_23 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 88437 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1387;
        goto try_finally_handler_21;
    }

    tmp_subscr_subscript_23 = var_a.object;

    if ( tmp_subscr_subscript_23 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5854 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1387;
        goto try_finally_handler_21;
    }

    tmp_subscr_target_22 = LOOKUP_SUBSCRIPT( tmp_subscr_target_23, tmp_subscr_subscript_23 );
    if ( tmp_subscr_target_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1387;
        goto try_finally_handler_21;
    }
    tmp_subscr_subscript_22 = const_str_plain_check;
    tmp_iter_arg_10 = LOOKUP_SUBSCRIPT( tmp_subscr_target_22, tmp_subscr_subscript_22 );
    Py_DECREF( tmp_subscr_target_22 );
    if ( tmp_iter_arg_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1387;
        goto try_finally_handler_21;
    }
    tmp_assign_source_60 = MAKE_ITERATOR( tmp_iter_arg_10 );
    Py_DECREF( tmp_iter_arg_10 );
    if ( tmp_assign_source_60 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1387;
        goto try_finally_handler_21;
    }
    if (tmp_for_loop_6__for_iterator.object == NULL)
    {
        tmp_for_loop_6__for_iterator.object = tmp_assign_source_60;
    }
    else
    {
        PyObject *old = tmp_for_loop_6__for_iterator.object;
        tmp_for_loop_6__for_iterator.object = tmp_assign_source_60;
        Py_DECREF( old );
    }
    // Tried code
    loop_start_7:;
    tmp_next_source_7 = tmp_for_loop_6__for_iterator.object;

    tmp_assign_source_61 = ITERATOR_NEXT( tmp_next_source_7 );
    if (tmp_assign_source_61 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_7;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1387;
            goto try_finally_handler_29;
        }
    }

    if (tmp_for_loop_6__iter_value.object == NULL)
    {
        tmp_for_loop_6__iter_value.object = tmp_assign_source_61;
    }
    else
    {
        PyObject *old = tmp_for_loop_6__iter_value.object;
        tmp_for_loop_6__iter_value.object = tmp_assign_source_61;
        Py_DECREF( old );
    }
    tmp_assign_source_62 = tmp_for_loop_6__iter_value.object;

    if (var_c.object == NULL)
    {
        var_c.object = INCREASE_REFCOUNT( tmp_assign_source_62 );
    }
    else
    {
        PyObject *old = var_c.object;
        var_c.object = INCREASE_REFCOUNT( tmp_assign_source_62 );
        Py_DECREF( old );
    }
    tmp_ass_subvalue_5 = var_c.object;

    tmp_ass_subscribed_5 = var_vrd.object;

    if ( tmp_ass_subscribed_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129813 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1388;
        goto try_finally_handler_29;
    }

    tmp_ass_subscript_5 = const_str_plain_check;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_5, tmp_ass_subscript_5, tmp_ass_subvalue_5 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1388;
        goto try_finally_handler_29;
    }
    tmp_called_24 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_24 == NULL ))
    {
        tmp_called_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_24 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127020 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1389;
        goto try_finally_handler_29;
    }

    tmp_call_arg_element_34 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_check_rules );

    if (unlikely( tmp_call_arg_element_34 == NULL ))
    {
        tmp_call_arg_element_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_check_rules );
    }

    if ( tmp_call_arg_element_34 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152543 ], 40, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1389;
        goto try_finally_handler_29;
    }

    tmp_call_arg_element_35 = var_vrd.object;

    if ( tmp_call_arg_element_35 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129813 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1389;
        goto try_finally_handler_29;
    }

    tmp_subscr_target_24 = var_var.object;

    if ( tmp_subscr_target_24 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 88437 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1389;
        goto try_finally_handler_29;
    }

    tmp_subscr_subscript_24 = var_a.object;

    if ( tmp_subscr_subscript_24 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5854 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1389;
        goto try_finally_handler_29;
    }

    tmp_call_arg_element_36 = LOOKUP_SUBSCRIPT( tmp_subscr_target_24, tmp_subscr_subscript_24 );
    if ( tmp_call_arg_element_36 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1389;
        goto try_finally_handler_29;
    }
    frame_function->f_lineno = 1389;
    tmp_assign_source_63 = CALL_FUNCTION_WITH_ARGS3( tmp_called_24, tmp_call_arg_element_34, tmp_call_arg_element_35, tmp_call_arg_element_36 );
    Py_DECREF( tmp_call_arg_element_36 );
    if ( tmp_assign_source_63 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1389;
        goto try_finally_handler_29;
    }
    if (var_ar.object == NULL)
    {
        var_ar.object = tmp_assign_source_63;
    }
    else
    {
        PyObject *old = var_ar.object;
        var_ar.object = tmp_assign_source_63;
        Py_DECREF( old );
    }
    tmp_called_25 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_dictappend );

    if (unlikely( tmp_called_25 == NULL ))
    {
        tmp_called_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dictappend );
    }

    if ( tmp_called_25 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126933 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1390;
        goto try_finally_handler_29;
    }

    tmp_call_arg_element_37 = var_rd.object;

    if ( tmp_call_arg_element_37 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1390;
        goto try_finally_handler_29;
    }

    tmp_call_arg_element_38 = var_ar.object;

    frame_function->f_lineno = 1390;
    tmp_assign_source_64 = CALL_FUNCTION_WITH_ARGS2( tmp_called_25, tmp_call_arg_element_37, tmp_call_arg_element_38 );
    if ( tmp_assign_source_64 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1390;
        goto try_finally_handler_29;
    }
    if (var_rd.object == NULL)
    {
        var_rd.object = tmp_assign_source_64;
    }
    else
    {
        PyObject *old = var_rd.object;
        var_rd.object = tmp_assign_source_64;
        Py_DECREF( old );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1387;
        goto try_finally_handler_29;
    }
    goto loop_start_7;
    loop_end_7:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_29:;
    exception_keeper_type_28 = exception_type;
    exception_keeper_value_28 = exception_value;
    exception_keeper_tb_28 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_16 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_6__iter_value.object );
    tmp_for_loop_6__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_6__for_iterator.object );
    tmp_for_loop_6__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_16;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_28 != NULL )
    {
        exception_type = exception_keeper_type_28;
        exception_value = exception_keeper_value_28;
        exception_tb = exception_keeper_tb_28;

        goto try_finally_handler_21;
    }

    goto finally_end_28;
    finally_end_28:;
    branch_no_14:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1372;
        goto try_finally_handler_21;
    }
    goto loop_start_5;
    loop_end_5:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_21:;
    exception_keeper_type_29 = exception_type;
    exception_keeper_value_29 = exception_value;
    exception_keeper_tb_29 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_17 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_4__iter_value.object );
    tmp_for_loop_4__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_4__for_iterator.object );
    tmp_for_loop_4__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_17;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_29 != NULL )
    {
        exception_type = exception_keeper_type_29;
        exception_value = exception_keeper_value_29;
        exception_tb = exception_keeper_tb_29;

        goto frame_exception_exit_1;
    }

    goto finally_end_29;
    finally_end_29:;
    tmp_subscr_target_25 = var_rd.object;

    if ( tmp_subscr_target_25 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1391;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_25 = const_str_plain_cleanupfrompyobj;
    tmp_isinstance_inst_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_25, tmp_subscr_subscript_25 );
    if ( tmp_isinstance_inst_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1391;
        goto frame_exception_exit_1;
    }
    tmp_isinstance_cls_1 = LOOKUP_BUILTIN( const_str_plain_list );
    if ( tmp_isinstance_cls_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_inst_1 );

        frame_function->f_lineno = 1391;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    Py_DECREF( tmp_isinstance_inst_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1391;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_subscr_target_26 = var_rd.object;

    if ( tmp_subscr_target_26 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1392;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_26 = const_str_plain_cleanupfrompyobj;
    tmp_source_name_3 = LOOKUP_SUBSCRIPT( tmp_subscr_target_26, tmp_subscr_subscript_26 );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1392;
        goto frame_exception_exit_1;
    }
    tmp_called_26 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_reverse );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1392;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1392;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_26 );
    Py_DECREF( tmp_called_26 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1392;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_15:;
    tmp_subscr_target_27 = var_rd.object;

    if ( tmp_subscr_target_27 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1393;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_27 = const_str_plain_closepyobjfrom;
    tmp_isinstance_inst_2 = LOOKUP_SUBSCRIPT( tmp_subscr_target_27, tmp_subscr_subscript_27 );
    if ( tmp_isinstance_inst_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1393;
        goto frame_exception_exit_1;
    }
    tmp_isinstance_cls_2 = LOOKUP_BUILTIN( const_str_plain_list );
    if ( tmp_isinstance_cls_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_inst_2 );

        frame_function->f_lineno = 1393;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    Py_DECREF( tmp_isinstance_inst_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1393;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_subscr_target_28 = var_rd.object;

    if ( tmp_subscr_target_28 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1394;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_28 = const_str_plain_closepyobjfrom;
    tmp_source_name_4 = LOOKUP_SUBSCRIPT( tmp_subscr_target_28, tmp_subscr_subscript_28 );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1394;
        goto frame_exception_exit_1;
    }
    tmp_called_27 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_reverse );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_called_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1394;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1394;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_27 );
    Py_DECREF( tmp_called_27 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1394;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_16:;
    tmp_called_28 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stripcomma );

    if (unlikely( tmp_called_28 == NULL ))
    {
        tmp_called_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stripcomma );
    }

    if ( tmp_called_28 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129956 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1395;
        goto frame_exception_exit_1;
    }

    tmp_called_29 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_replace );

    if (unlikely( tmp_called_29 == NULL ))
    {
        tmp_called_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_replace );
    }

    if ( tmp_called_29 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 62213 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1395;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_40 = const_str_digest_9912dfb1857add237abf1afe8d04d515;
    tmp_call_arg_element_41 = _PyDict_NewPresized( 3 );
    tmp_subscr_target_29 = var_rd.object;

    if ( tmp_subscr_target_29 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_41 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1396;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_29 = const_str_plain_docsign;
    tmp_dict_value_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_29, tmp_subscr_subscript_29 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_41 );

        frame_function->f_lineno = 1396;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_docsign;
    PyDict_SetItem( tmp_call_arg_element_41, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    tmp_subscr_target_30 = var_rd.object;

    if ( tmp_subscr_target_30 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_41 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1397;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_30 = const_str_plain_docsignopt;
    tmp_dict_value_2 = LOOKUP_SUBSCRIPT( tmp_subscr_target_30, tmp_subscr_subscript_30 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_41 );

        frame_function->f_lineno = 1397;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_docsignopt;
    PyDict_SetItem( tmp_call_arg_element_41, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    tmp_subscr_target_31 = var_rd.object;

    if ( tmp_subscr_target_31 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_41 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1398;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_31 = const_str_plain_docsignxa;
    tmp_dict_value_3 = LOOKUP_SUBSCRIPT( tmp_subscr_target_31, tmp_subscr_subscript_31 );
    if ( tmp_dict_value_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_41 );

        frame_function->f_lineno = 1398;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_3 = const_str_plain_docsignxa;
    PyDict_SetItem( tmp_call_arg_element_41, tmp_dict_key_3, tmp_dict_value_3 );
    Py_DECREF( tmp_dict_value_3 );
    frame_function->f_lineno = 1398;
    tmp_call_arg_element_39 = CALL_FUNCTION_WITH_ARGS2( tmp_called_29, tmp_call_arg_element_40, tmp_call_arg_element_41 );
    Py_DECREF( tmp_call_arg_element_41 );
    if ( tmp_call_arg_element_39 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1398;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1395;
    tmp_ass_subvalue_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_28, tmp_call_arg_element_39 );
    Py_DECREF( tmp_call_arg_element_39 );
    if ( tmp_ass_subvalue_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1395;
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_6 = var_rd.object;

    if ( tmp_ass_subscribed_6 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1395;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_6 = const_str_plain_docsignature;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_6, tmp_ass_subscript_6, tmp_ass_subvalue_6 );
    Py_DECREF( tmp_ass_subvalue_6 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1395;
        goto frame_exception_exit_1;
    }
    tmp_called_30 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stripcomma );

    if (unlikely( tmp_called_30 == NULL ))
    {
        tmp_called_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stripcomma );
    }

    if ( tmp_called_30 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129956 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1399;
        goto frame_exception_exit_1;
    }

    tmp_called_31 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_replace );

    if (unlikely( tmp_called_31 == NULL ))
    {
        tmp_called_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_replace );
    }

    if ( tmp_called_31 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 62213 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1399;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_43 = const_str_digest_56c4578d7e79e9d1b9921f69f505bc38;
    tmp_call_arg_element_44 = _PyDict_NewPresized( 2 );
    tmp_subscr_target_32 = var_rd.object;

    if ( tmp_subscr_target_32 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_44 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1400;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_32 = const_str_plain_docsignxashort;
    tmp_dict_value_4 = LOOKUP_SUBSCRIPT( tmp_subscr_target_32, tmp_subscr_subscript_32 );
    if ( tmp_dict_value_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_44 );

        frame_function->f_lineno = 1400;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_4 = const_str_plain_docsignxa;
    PyDict_SetItem( tmp_call_arg_element_44, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    tmp_subscr_target_33 = var_rd.object;

    if ( tmp_subscr_target_33 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_44 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1401;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_33 = const_str_plain_docsignoptshort;
    tmp_dict_value_5 = LOOKUP_SUBSCRIPT( tmp_subscr_target_33, tmp_subscr_subscript_33 );
    if ( tmp_dict_value_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_44 );

        frame_function->f_lineno = 1401;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_5 = const_str_plain_docsignopt;
    PyDict_SetItem( tmp_call_arg_element_44, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    frame_function->f_lineno = 1401;
    tmp_call_arg_element_42 = CALL_FUNCTION_WITH_ARGS2( tmp_called_31, tmp_call_arg_element_43, tmp_call_arg_element_44 );
    Py_DECREF( tmp_call_arg_element_44 );
    if ( tmp_call_arg_element_42 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1401;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1399;
    tmp_assign_source_65 = CALL_FUNCTION_WITH_ARGS1( tmp_called_30, tmp_call_arg_element_42 );
    Py_DECREF( tmp_call_arg_element_42 );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1399;
        goto frame_exception_exit_1;
    }
    assert( var_optargs.object == NULL );
    var_optargs.object = tmp_assign_source_65;

    tmp_compare_left_6 = var_optargs.object;

    tmp_compare_right_6 = const_str_empty;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_6, tmp_compare_right_6 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1403;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_called_32 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stripcomma );

    if (unlikely( tmp_called_32 == NULL ))
    {
        tmp_called_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stripcomma );
    }

    if ( tmp_called_32 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129956 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1404;
        goto frame_exception_exit_1;
    }

    tmp_called_33 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_replace );

    if (unlikely( tmp_called_33 == NULL ))
    {
        tmp_called_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_replace );
    }

    if ( tmp_called_33 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 62213 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1404;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_46 = const_str_digest_b8dc8513ea6a44621ecfd35fbdc9110c;
    tmp_call_arg_element_47 = _PyDict_NewPresized( 1 );
    tmp_subscr_target_34 = var_rd.object;

    if ( tmp_subscr_target_34 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_47 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1404;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_34 = const_str_plain_docsign;
    tmp_dict_value_6 = LOOKUP_SUBSCRIPT( tmp_subscr_target_34, tmp_subscr_subscript_34 );
    if ( tmp_dict_value_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_47 );

        frame_function->f_lineno = 1404;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_6 = const_str_plain_docsign;
    PyDict_SetItem( tmp_call_arg_element_47, tmp_dict_key_6, tmp_dict_value_6 );
    Py_DECREF( tmp_dict_value_6 );
    frame_function->f_lineno = 1404;
    tmp_call_arg_element_45 = CALL_FUNCTION_WITH_ARGS2( tmp_called_33, tmp_call_arg_element_46, tmp_call_arg_element_47 );
    Py_DECREF( tmp_call_arg_element_47 );
    if ( tmp_call_arg_element_45 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1404;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1404;
    tmp_ass_subvalue_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_32, tmp_call_arg_element_45 );
    Py_DECREF( tmp_call_arg_element_45 );
    if ( tmp_ass_subvalue_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1404;
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_7 = var_rd.object;

    if ( tmp_ass_subscribed_7 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1404;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_7 = const_str_plain_docsignatureshort;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_7, tmp_ass_subscript_7, tmp_ass_subvalue_7 );
    Py_DECREF( tmp_ass_subvalue_7 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1404;
        goto frame_exception_exit_1;
    }
    goto branch_end_17;
    branch_no_17:;
    tmp_called_34 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_replace );

    if (unlikely( tmp_called_34 == NULL ))
    {
        tmp_called_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_replace );
    }

    if ( tmp_called_34 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 62213 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1406;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_48 = const_str_digest_c6ed2021e7dfb461dbb032362c3c5cc1;
    tmp_call_arg_element_49 = _PyDict_NewPresized( 2 );
    tmp_subscr_target_35 = var_rd.object;

    if ( tmp_subscr_target_35 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_49 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1407;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_35 = const_str_plain_docsign;
    tmp_dict_value_7 = LOOKUP_SUBSCRIPT( tmp_subscr_target_35, tmp_subscr_subscript_35 );
    if ( tmp_dict_value_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_49 );

        frame_function->f_lineno = 1407;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_7 = const_str_plain_docsign;
    PyDict_SetItem( tmp_call_arg_element_49, tmp_dict_key_7, tmp_dict_value_7 );
    Py_DECREF( tmp_dict_value_7 );
    tmp_dict_value_8 = var_optargs.object;

    tmp_dict_key_8 = const_str_plain_docsignopt;
    PyDict_SetItem( tmp_call_arg_element_49, tmp_dict_key_8, tmp_dict_value_8 );
    frame_function->f_lineno = 1408;
    tmp_ass_subvalue_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_34, tmp_call_arg_element_48, tmp_call_arg_element_49 );
    Py_DECREF( tmp_call_arg_element_49 );
    if ( tmp_ass_subvalue_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1408;
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_8 = var_rd.object;

    if ( tmp_ass_subscribed_8 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1406;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_8 = const_str_plain_docsignatureshort;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_8, tmp_ass_subscript_8, tmp_ass_subvalue_8 );
    Py_DECREF( tmp_ass_subvalue_8 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1406;
        goto frame_exception_exit_1;
    }
    branch_end_17:;
    tmp_subscr_target_36 = var_rd.object;

    if ( tmp_subscr_target_36 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1410;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_36 = const_str_plain_docsignatureshort;
    tmp_source_name_5 = LOOKUP_SUBSCRIPT( tmp_subscr_target_36, tmp_subscr_subscript_36 );
    if ( tmp_source_name_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1410;
        goto frame_exception_exit_1;
    }
    tmp_called_35 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_replace );
    Py_DECREF( tmp_source_name_5 );
    if ( tmp_called_35 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1410;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_50 = const_str_plain__;
    tmp_call_arg_element_51 = const_str_digest_a0e09455d4337213cd42ebadc4d27d3b;
    frame_function->f_lineno = 1410;
    tmp_ass_subvalue_9 = CALL_FUNCTION_WITH_ARGS2( tmp_called_35, tmp_call_arg_element_50, tmp_call_arg_element_51 );
    Py_DECREF( tmp_called_35 );
    if ( tmp_ass_subvalue_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1410;
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_9 = var_rd.object;

    if ( tmp_ass_subscribed_9 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1410;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_9 = const_str_plain_latexdocsignatureshort;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_9, tmp_ass_subscript_9, tmp_ass_subvalue_9 );
    Py_DECREF( tmp_ass_subvalue_9 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1410;
        goto frame_exception_exit_1;
    }
    tmp_subscr_target_37 = var_rd.object;

    if ( tmp_subscr_target_37 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1411;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_37 = const_str_plain_latexdocsignatureshort;
    tmp_source_name_6 = LOOKUP_SUBSCRIPT( tmp_subscr_target_37, tmp_subscr_subscript_37 );
    if ( tmp_source_name_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1411;
        goto frame_exception_exit_1;
    }
    tmp_called_36 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_replace );
    Py_DECREF( tmp_source_name_6 );
    if ( tmp_called_36 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1411;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_52 = const_str_chr_44;
    tmp_call_arg_element_53 = const_str_digest_fc763cb31e9938f37737394681228f83;
    frame_function->f_lineno = 1411;
    tmp_ass_subvalue_10 = CALL_FUNCTION_WITH_ARGS2( tmp_called_36, tmp_call_arg_element_52, tmp_call_arg_element_53 );
    Py_DECREF( tmp_called_36 );
    if ( tmp_ass_subvalue_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1411;
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_10 = var_rd.object;

    if ( tmp_ass_subscribed_10 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_10 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1411;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_10 = const_str_plain_latexdocsignatureshort;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_10, tmp_ass_subscript_10, tmp_ass_subvalue_10 );
    Py_DECREF( tmp_ass_subvalue_10 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1411;
        goto frame_exception_exit_1;
    }
    tmp_called_37 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stripcomma );

    if (unlikely( tmp_called_37 == NULL ))
    {
        tmp_called_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stripcomma );
    }

    if ( tmp_called_37 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129956 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1412;
        goto frame_exception_exit_1;
    }

    tmp_called_38 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_replace );

    if (unlikely( tmp_called_38 == NULL ))
    {
        tmp_called_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_replace );
    }

    if ( tmp_called_38 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 62213 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1412;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_55 = const_str_digest_9eb6c06dfbe3b1d972d9cd5b3cd07ad3;
    tmp_call_arg_element_56 = _PyDict_NewPresized( 2 );
    tmp_subscr_target_38 = var_rd.object;

    if ( tmp_subscr_target_38 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_56 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1412;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_38 = const_str_plain_callfortran;
    tmp_dict_value_9 = LOOKUP_SUBSCRIPT( tmp_subscr_target_38, tmp_subscr_subscript_38 );
    if ( tmp_dict_value_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_56 );

        frame_function->f_lineno = 1412;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_9 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_call_arg_element_56, tmp_dict_key_9, tmp_dict_value_9 );
    Py_DECREF( tmp_dict_value_9 );
    tmp_subscr_target_39 = var_rd.object;

    if ( tmp_subscr_target_39 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_56 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1412;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_39 = const_str_plain_callfortranappend;
    tmp_dict_value_10 = LOOKUP_SUBSCRIPT( tmp_subscr_target_39, tmp_subscr_subscript_39 );
    if ( tmp_dict_value_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_56 );

        frame_function->f_lineno = 1412;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_10 = const_str_plain_callfortranappend;
    PyDict_SetItem( tmp_call_arg_element_56, tmp_dict_key_10, tmp_dict_value_10 );
    Py_DECREF( tmp_dict_value_10 );
    frame_function->f_lineno = 1412;
    tmp_call_arg_element_54 = CALL_FUNCTION_WITH_ARGS2( tmp_called_38, tmp_call_arg_element_55, tmp_call_arg_element_56 );
    Py_DECREF( tmp_call_arg_element_56 );
    if ( tmp_call_arg_element_54 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1412;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1412;
    tmp_assign_source_66 = CALL_FUNCTION_WITH_ARGS1( tmp_called_37, tmp_call_arg_element_54 );
    Py_DECREF( tmp_call_arg_element_54 );
    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1412;
        goto frame_exception_exit_1;
    }
    assert( var_cfs.object == NULL );
    var_cfs.object = tmp_assign_source_66;

    tmp_subscr_target_40 = var_rd.object;

    if ( tmp_subscr_target_40 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1413;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_40 = const_str_plain_callfortranappend;
    tmp_len_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_40, tmp_subscr_subscript_40 );
    if ( tmp_len_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1413;
        goto frame_exception_exit_1;
    }
    tmp_compare_left_7 = BUILTIN_LEN( tmp_len_arg_1 );
    Py_DECREF( tmp_len_arg_1 );
    if ( tmp_compare_left_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1413;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_7 = const_int_pos_1;
    tmp_cmp_Gt_1 = RICH_COMPARE_BOOL_GT( tmp_compare_left_7, tmp_compare_right_7 );
    if ( tmp_cmp_Gt_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_7 );

        frame_function->f_lineno = 1413;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_7 );
    if (tmp_cmp_Gt_1 == 1)
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_called_39 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stripcomma );

    if (unlikely( tmp_called_39 == NULL ))
    {
        tmp_called_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stripcomma );
    }

    if ( tmp_called_39 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129956 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1414;
        goto frame_exception_exit_1;
    }

    tmp_called_40 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_replace );

    if (unlikely( tmp_called_40 == NULL ))
    {
        tmp_called_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_replace );
    }

    if ( tmp_called_40 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 62213 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1414;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_58 = const_str_digest_36c45669e1ecb4a38cd16d553a9afbb9;
    tmp_call_arg_element_59 = _PyDict_NewPresized( 2 );
    tmp_subscr_target_41 = var_rd.object;

    if ( tmp_subscr_target_41 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_59 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1414;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_41 = const_str_plain_callfortran;
    tmp_dict_value_11 = LOOKUP_SUBSCRIPT( tmp_subscr_target_41, tmp_subscr_subscript_41 );
    if ( tmp_dict_value_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_59 );

        frame_function->f_lineno = 1414;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_11 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_call_arg_element_59, tmp_dict_key_11, tmp_dict_value_11 );
    Py_DECREF( tmp_dict_value_11 );
    tmp_subscr_target_42 = var_rd.object;

    if ( tmp_subscr_target_42 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_59 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1414;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_42 = const_str_plain_callfortranappend;
    tmp_dict_value_12 = LOOKUP_SUBSCRIPT( tmp_subscr_target_42, tmp_subscr_subscript_42 );
    if ( tmp_dict_value_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_59 );

        frame_function->f_lineno = 1414;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_12 = const_str_plain_callfortranappend;
    PyDict_SetItem( tmp_call_arg_element_59, tmp_dict_key_12, tmp_dict_value_12 );
    Py_DECREF( tmp_dict_value_12 );
    frame_function->f_lineno = 1414;
    tmp_call_arg_element_57 = CALL_FUNCTION_WITH_ARGS2( tmp_called_40, tmp_call_arg_element_58, tmp_call_arg_element_59 );
    Py_DECREF( tmp_call_arg_element_59 );
    if ( tmp_call_arg_element_57 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1414;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1414;
    tmp_ass_subvalue_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_39, tmp_call_arg_element_57 );
    Py_DECREF( tmp_call_arg_element_57 );
    if ( tmp_ass_subvalue_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1414;
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_11 = var_rd.object;

    if ( tmp_ass_subscribed_11 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1414;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_11 = const_str_plain_callcompaqfortran;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_11, tmp_ass_subscript_11, tmp_ass_subvalue_11 );
    Py_DECREF( tmp_ass_subvalue_11 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1414;
        goto frame_exception_exit_1;
    }
    goto branch_end_18;
    branch_no_18:;
    tmp_ass_subvalue_12 = var_cfs.object;

    tmp_ass_subscribed_12 = var_rd.object;

    if ( tmp_ass_subscribed_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1416;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_12 = const_str_plain_callcompaqfortran;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_12, tmp_ass_subscript_12, tmp_ass_subvalue_12 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1416;
        goto frame_exception_exit_1;
    }
    branch_end_18:;
    tmp_ass_subvalue_13 = var_cfs.object;

    tmp_ass_subscribed_13 = var_rd.object;

    if ( tmp_ass_subscribed_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1417;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_13 = const_str_plain_callfortran;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_13, tmp_ass_subscript_13, tmp_ass_subvalue_13 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1417;
        goto frame_exception_exit_1;
    }
    tmp_subscr_target_43 = var_rd.object;

    if ( tmp_subscr_target_43 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1418;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_43 = const_str_plain_docreturn;
    tmp_isinstance_inst_3 = LOOKUP_SUBSCRIPT( tmp_subscr_target_43, tmp_subscr_subscript_43 );
    if ( tmp_isinstance_inst_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1418;
        goto frame_exception_exit_1;
    }
    tmp_isinstance_cls_3 = LOOKUP_BUILTIN( const_str_plain_list );
    if ( tmp_isinstance_cls_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_inst_3 );

        frame_function->f_lineno = 1418;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
    Py_DECREF( tmp_isinstance_inst_3 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1418;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_called_41 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stripcomma );

    if (unlikely( tmp_called_41 == NULL ))
    {
        tmp_called_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stripcomma );
    }

    if ( tmp_called_41 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129956 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1419;
        goto frame_exception_exit_1;
    }

    tmp_called_42 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_replace );

    if (unlikely( tmp_called_42 == NULL ))
    {
        tmp_called_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_replace );
    }

    if ( tmp_called_42 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 62213 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1419;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_61 = const_str_digest_2440d16610baa62c4946b481a40982f8;
    tmp_call_arg_element_62 = _PyDict_NewPresized( 1 );
    tmp_subscr_target_44 = var_rd.object;

    if ( tmp_subscr_target_44 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_62 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1419;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_44 = const_str_plain_docreturn;
    tmp_dict_value_13 = LOOKUP_SUBSCRIPT( tmp_subscr_target_44, tmp_subscr_subscript_44 );
    if ( tmp_dict_value_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_62 );

        frame_function->f_lineno = 1419;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_13 = const_str_plain_docreturn;
    PyDict_SetItem( tmp_call_arg_element_62, tmp_dict_key_13, tmp_dict_value_13 );
    Py_DECREF( tmp_dict_value_13 );
    frame_function->f_lineno = 1419;
    tmp_call_arg_element_60 = CALL_FUNCTION_WITH_ARGS2( tmp_called_42, tmp_call_arg_element_61, tmp_call_arg_element_62 );
    Py_DECREF( tmp_call_arg_element_62 );
    if ( tmp_call_arg_element_60 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1419;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1419;
    tmp_binop_left_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_41, tmp_call_arg_element_60 );
    Py_DECREF( tmp_call_arg_element_60 );
    if ( tmp_binop_left_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1419;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_11 = const_str_digest_fcacca1424f339192c748b8e531c8ec3;
    tmp_ass_subvalue_14 = BINARY_OPERATION_ADD( tmp_binop_left_11, tmp_binop_right_11 );
    Py_DECREF( tmp_binop_left_11 );
    if ( tmp_ass_subvalue_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1419;
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_14 = var_rd.object;

    if ( tmp_ass_subscribed_14 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_14 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1419;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_14 = const_str_plain_docreturn;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_14, tmp_ass_subscript_14, tmp_ass_subvalue_14 );
    Py_DECREF( tmp_ass_subvalue_14 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1419;
        goto frame_exception_exit_1;
    }
    branch_no_19:;
    tmp_ass_subvalue_15 = PyList_New( 0 );
    tmp_ass_subscribed_15 = var_rd.object;

    if ( tmp_ass_subscribed_15 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1420;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_15 = const_str_plain_docstrsigns;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_15, tmp_ass_subscript_15, tmp_ass_subvalue_15 );
    Py_DECREF( tmp_ass_subvalue_15 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1420;
        goto frame_exception_exit_1;
    }
    tmp_ass_subvalue_16 = PyList_New( 0 );
    tmp_ass_subscribed_16 = var_rd.object;

    if ( tmp_ass_subscribed_16 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_16 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1421;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_16 = const_str_plain_latexdocstrsigns;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_16, tmp_ass_subscript_16, tmp_ass_subvalue_16 );
    Py_DECREF( tmp_ass_subvalue_16 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1421;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_11 = const_tuple_a66751b7c76123c024f448eec46707b1_tuple;
    tmp_assign_source_67 = MAKE_ITERATOR( tmp_iter_arg_11 );
    if ( tmp_assign_source_67 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1422;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_7__for_iterator.object == NULL );
    tmp_for_loop_7__for_iterator.object = tmp_assign_source_67;

    // Tried code
    loop_start_8:;
    tmp_next_source_8 = tmp_for_loop_7__for_iterator.object;

    tmp_assign_source_68 = ITERATOR_NEXT( tmp_next_source_8 );
    if (tmp_assign_source_68 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_8;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1422;
            goto try_finally_handler_30;
        }
    }

    if (tmp_for_loop_7__iter_value.object == NULL)
    {
        tmp_for_loop_7__iter_value.object = tmp_assign_source_68;
    }
    else
    {
        PyObject *old = tmp_for_loop_7__iter_value.object;
        tmp_for_loop_7__iter_value.object = tmp_assign_source_68;
        Py_DECREF( old );
    }
    tmp_assign_source_69 = tmp_for_loop_7__iter_value.object;

    if (var_k.object == NULL)
    {
        var_k.object = INCREASE_REFCOUNT( tmp_assign_source_69 );
    }
    else
    {
        PyObject *old = var_k.object;
        var_k.object = INCREASE_REFCOUNT( tmp_assign_source_69 );
        Py_DECREF( old );
    }
    // Tried code
    tmp_cond_value_16 = NULL;
    // Tried code
    tmp_compexpr_left_7 = var_k.object;

    tmp_compexpr_right_7 = var_rd.object;

    if ( tmp_compexpr_right_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1423;
        goto try_finally_handler_32;
    }

    tmp_assign_source_70 = SEQUENCE_CONTAINS( tmp_compexpr_left_7, tmp_compexpr_right_7 );
    if ( tmp_assign_source_70 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1423;
        goto try_finally_handler_32;
    }
    if (tmp_and_4__value_1.object == NULL)
    {
        tmp_and_4__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_70 );
    }
    else
    {
        PyObject *old = tmp_and_4__value_1.object;
        tmp_and_4__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_70 );
        Py_DECREF( old );
    }
    tmp_cond_value_17 = tmp_and_4__value_1.object;

    tmp_cond_truth_17 = CHECK_IF_TRUE( tmp_cond_value_17 );
    if ( tmp_cond_truth_17 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1423;
        goto try_finally_handler_32;
    }
    if (tmp_cond_truth_17 == 1)
    {
        goto condexpr_true_7;
    }
    else
    {
        goto condexpr_false_7;
    }
    condexpr_true_7:;
    tmp_cond_value_16 = NULL;
    // Tried code
    tmp_result = tmp_and_4__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_4__value_1.object );
        tmp_and_4__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_subscr_target_45 = var_rd.object;

    if ( tmp_subscr_target_45 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1423;
        goto try_finally_handler_33;
    }

    tmp_subscr_subscript_45 = var_k.object;

    tmp_isinstance_inst_4 = LOOKUP_SUBSCRIPT( tmp_subscr_target_45, tmp_subscr_subscript_45 );
    if ( tmp_isinstance_inst_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1423;
        goto try_finally_handler_33;
    }
    tmp_isinstance_cls_4 = LOOKUP_BUILTIN( const_str_plain_list );
    if ( tmp_isinstance_cls_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_inst_4 );

        frame_function->f_lineno = 1423;
        goto try_finally_handler_33;
    }
    tmp_cond_value_16 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_4, tmp_isinstance_cls_4 );
    Py_DECREF( tmp_isinstance_inst_4 );
    if ( tmp_cond_value_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1423;
        goto try_finally_handler_33;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_33:;
    exception_keeper_type_30 = exception_type;
    exception_keeper_value_30 = exception_value;
    exception_keeper_tb_30 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_30 != NULL )
    {
        exception_type = exception_keeper_type_30;
        exception_value = exception_keeper_value_30;
        exception_tb = exception_keeper_tb_30;

        goto try_finally_handler_32;
    }

    goto finally_end_30;
    finally_end_30:;
    goto condexpr_end_7;
    condexpr_false_7:;
    tmp_cond_value_16 = tmp_and_4__value_1.object;

    condexpr_end_7:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_32:;
    exception_keeper_type_31 = exception_type;
    exception_keeper_value_31 = exception_value;
    exception_keeper_tb_31 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_31 != NULL )
    {
        exception_type = exception_keeper_type_31;
        exception_value = exception_keeper_value_31;
        exception_tb = exception_keeper_tb_31;

        goto try_finally_handler_31;
    }

    goto finally_end_31;
    finally_end_31:;
    tmp_cond_truth_16 = CHECK_IF_TRUE( tmp_cond_value_16 );
    if ( tmp_cond_truth_16 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1423;
        goto try_finally_handler_31;
    }
    if (tmp_cond_truth_16 == 1)
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_subscr_target_46 = var_rd.object;

    if ( tmp_subscr_target_46 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1424;
        goto try_finally_handler_31;
    }

    tmp_subscr_subscript_46 = const_str_plain_docstrsigns;
    tmp_binop_left_12 = LOOKUP_SUBSCRIPT( tmp_subscr_target_46, tmp_subscr_subscript_46 );
    if ( tmp_binop_left_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1424;
        goto try_finally_handler_31;
    }
    tmp_subscr_target_47 = var_rd.object;

    if ( tmp_subscr_target_47 == NULL )
    {
        Py_DECREF( tmp_binop_left_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1424;
        goto try_finally_handler_31;
    }

    tmp_subscr_subscript_47 = var_k.object;

    if ( tmp_subscr_subscript_47 == NULL )
    {
        Py_DECREF( tmp_binop_left_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6318 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1424;
        goto try_finally_handler_31;
    }

    tmp_binop_right_12 = LOOKUP_SUBSCRIPT( tmp_subscr_target_47, tmp_subscr_subscript_47 );
    if ( tmp_binop_right_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_12 );

        frame_function->f_lineno = 1424;
        goto try_finally_handler_31;
    }
    tmp_ass_subvalue_17 = BINARY_OPERATION_ADD( tmp_binop_left_12, tmp_binop_right_12 );
    Py_DECREF( tmp_binop_left_12 );
    Py_DECREF( tmp_binop_right_12 );
    if ( tmp_ass_subvalue_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1424;
        goto try_finally_handler_31;
    }
    tmp_ass_subscribed_17 = var_rd.object;

    if ( tmp_ass_subscribed_17 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_17 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1424;
        goto try_finally_handler_31;
    }

    tmp_ass_subscript_17 = const_str_plain_docstrsigns;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_17, tmp_ass_subscript_17, tmp_ass_subvalue_17 );
    Py_DECREF( tmp_ass_subvalue_17 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1424;
        goto try_finally_handler_31;
    }
    branch_no_20:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_31:;
    exception_keeper_type_32 = exception_type;
    exception_keeper_value_32 = exception_value;
    exception_keeper_tb_32 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_18 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_4__value_1.object );
    tmp_and_4__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_18;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_32 != NULL )
    {
        exception_type = exception_keeper_type_32;
        exception_value = exception_keeper_value_32;
        exception_tb = exception_keeper_tb_32;

        goto try_finally_handler_30;
    }

    goto finally_end_32;
    finally_end_32:;
    tmp_binop_left_13 = const_str_plain_latex;
    tmp_binop_right_13 = var_k.object;

    if ( tmp_binop_right_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6318 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1425;
        goto try_finally_handler_30;
    }

    tmp_assign_source_71 = BINARY_OPERATION_ADD( tmp_binop_left_13, tmp_binop_right_13 );
    if ( tmp_assign_source_71 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1425;
        goto try_finally_handler_30;
    }
    if (var_k.object == NULL)
    {
        var_k.object = tmp_assign_source_71;
    }
    else
    {
        PyObject *old = var_k.object;
        var_k.object = tmp_assign_source_71;
        Py_DECREF( old );
    }
    // Tried code
    tmp_cond_value_18 = NULL;
    // Tried code
    tmp_compexpr_left_8 = var_k.object;

    tmp_compexpr_right_8 = var_rd.object;

    if ( tmp_compexpr_right_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1426;
        goto try_finally_handler_35;
    }

    tmp_assign_source_72 = SEQUENCE_CONTAINS( tmp_compexpr_left_8, tmp_compexpr_right_8 );
    if ( tmp_assign_source_72 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1426;
        goto try_finally_handler_35;
    }
    if (tmp_and_5__value_1.object == NULL)
    {
        tmp_and_5__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_72 );
    }
    else
    {
        PyObject *old = tmp_and_5__value_1.object;
        tmp_and_5__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_72 );
        Py_DECREF( old );
    }
    tmp_cond_value_19 = tmp_and_5__value_1.object;

    tmp_cond_truth_19 = CHECK_IF_TRUE( tmp_cond_value_19 );
    if ( tmp_cond_truth_19 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1426;
        goto try_finally_handler_35;
    }
    if (tmp_cond_truth_19 == 1)
    {
        goto condexpr_true_8;
    }
    else
    {
        goto condexpr_false_8;
    }
    condexpr_true_8:;
    tmp_cond_value_18 = NULL;
    // Tried code
    tmp_result = tmp_and_5__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_5__value_1.object );
        tmp_and_5__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_subscr_target_48 = var_rd.object;

    if ( tmp_subscr_target_48 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1426;
        goto try_finally_handler_36;
    }

    tmp_subscr_subscript_48 = var_k.object;

    tmp_isinstance_inst_5 = LOOKUP_SUBSCRIPT( tmp_subscr_target_48, tmp_subscr_subscript_48 );
    if ( tmp_isinstance_inst_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1426;
        goto try_finally_handler_36;
    }
    tmp_isinstance_cls_5 = LOOKUP_BUILTIN( const_str_plain_list );
    if ( tmp_isinstance_cls_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_inst_5 );

        frame_function->f_lineno = 1426;
        goto try_finally_handler_36;
    }
    tmp_cond_value_18 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_5, tmp_isinstance_cls_5 );
    Py_DECREF( tmp_isinstance_inst_5 );
    if ( tmp_cond_value_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1426;
        goto try_finally_handler_36;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_36:;
    exception_keeper_type_33 = exception_type;
    exception_keeper_value_33 = exception_value;
    exception_keeper_tb_33 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_33 != NULL )
    {
        exception_type = exception_keeper_type_33;
        exception_value = exception_keeper_value_33;
        exception_tb = exception_keeper_tb_33;

        goto try_finally_handler_35;
    }

    goto finally_end_33;
    finally_end_33:;
    goto condexpr_end_8;
    condexpr_false_8:;
    tmp_cond_value_18 = tmp_and_5__value_1.object;

    condexpr_end_8:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_35:;
    exception_keeper_type_34 = exception_type;
    exception_keeper_value_34 = exception_value;
    exception_keeper_tb_34 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_34 != NULL )
    {
        exception_type = exception_keeper_type_34;
        exception_value = exception_keeper_value_34;
        exception_tb = exception_keeper_tb_34;

        goto try_finally_handler_34;
    }

    goto finally_end_34;
    finally_end_34:;
    tmp_cond_truth_18 = CHECK_IF_TRUE( tmp_cond_value_18 );
    if ( tmp_cond_truth_18 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1426;
        goto try_finally_handler_34;
    }
    if (tmp_cond_truth_18 == 1)
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_subscr_target_49 = var_rd.object;

    if ( tmp_subscr_target_49 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1427;
        goto try_finally_handler_34;
    }

    tmp_subscr_subscript_49 = const_str_plain_latexdocstrsigns;
    tmp_binop_left_17 = LOOKUP_SUBSCRIPT( tmp_subscr_target_49, tmp_subscr_subscript_49 );
    if ( tmp_binop_left_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1427;
        goto try_finally_handler_34;
    }
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = 1;
    tmp_subscr_target_50 = var_rd.object;

    if ( tmp_subscr_target_50 == NULL )
    {
        Py_DECREF( tmp_binop_left_17 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1427;
        goto try_finally_handler_34;
    }

    tmp_subscr_subscript_50 = var_k.object;

    if ( tmp_subscr_subscript_50 == NULL )
    {
        Py_DECREF( tmp_binop_left_17 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6318 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1427;
        goto try_finally_handler_34;
    }

    tmp_slice_source_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_50, tmp_subscr_subscript_50 );
    if ( tmp_slice_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_17 );

        frame_function->f_lineno = 1427;
        goto try_finally_handler_34;
    }
    tmp_binop_right_17 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    Py_DECREF( tmp_slice_source_1 );
    if ( tmp_binop_right_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_17 );

        frame_function->f_lineno = 1427;
        goto try_finally_handler_34;
    }
    tmp_binop_left_16 = BINARY_OPERATION_ADD( tmp_binop_left_17, tmp_binop_right_17 );
    Py_DECREF( tmp_binop_left_17 );
    Py_DECREF( tmp_binop_right_17 );
    if ( tmp_binop_left_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1427;
        goto try_finally_handler_34;
    }
    tmp_binop_right_16 = LIST_COPY( const_list_str_digest_352c2c361762a5fb011e95a778b8a254_list );
    tmp_binop_left_15 = BINARY_OPERATION_ADD( tmp_binop_left_16, tmp_binop_right_16 );
    Py_DECREF( tmp_binop_left_16 );
    Py_DECREF( tmp_binop_right_16 );
    if ( tmp_binop_left_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1427;
        goto try_finally_handler_34;
    }
    tmp_sliceslicedel_index_lower_2 = 1;
    tmp_slice_index_upper_2 = PY_SSIZE_T_MAX;
    tmp_subscr_target_51 = var_rd.object;

    if ( tmp_subscr_target_51 == NULL )
    {
        Py_DECREF( tmp_binop_left_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1428;
        goto try_finally_handler_34;
    }

    tmp_subscr_subscript_51 = var_k.object;

    if ( tmp_subscr_subscript_51 == NULL )
    {
        Py_DECREF( tmp_binop_left_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6318 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1428;
        goto try_finally_handler_34;
    }

    tmp_slice_source_2 = LOOKUP_SUBSCRIPT( tmp_subscr_target_51, tmp_subscr_subscript_51 );
    if ( tmp_slice_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_15 );

        frame_function->f_lineno = 1428;
        goto try_finally_handler_34;
    }
    tmp_binop_right_15 = LOOKUP_INDEX_SLICE( tmp_slice_source_2, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    Py_DECREF( tmp_slice_source_2 );
    if ( tmp_binop_right_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_15 );

        frame_function->f_lineno = 1428;
        goto try_finally_handler_34;
    }
    tmp_binop_left_14 = BINARY_OPERATION_ADD( tmp_binop_left_15, tmp_binop_right_15 );
    Py_DECREF( tmp_binop_left_15 );
    Py_DECREF( tmp_binop_right_15 );
    if ( tmp_binop_left_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1428;
        goto try_finally_handler_34;
    }
    tmp_binop_right_14 = LIST_COPY( const_list_str_digest_f8286407d5c451802306b2d15cf2167e_list );
    tmp_ass_subvalue_18 = BINARY_OPERATION_ADD( tmp_binop_left_14, tmp_binop_right_14 );
    Py_DECREF( tmp_binop_left_14 );
    Py_DECREF( tmp_binop_right_14 );
    if ( tmp_ass_subvalue_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1428;
        goto try_finally_handler_34;
    }
    tmp_ass_subscribed_18 = var_rd.object;

    if ( tmp_ass_subscribed_18 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_18 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1427;
        goto try_finally_handler_34;
    }

    tmp_ass_subscript_18 = const_str_plain_latexdocstrsigns;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_18, tmp_ass_subscript_18, tmp_ass_subvalue_18 );
    Py_DECREF( tmp_ass_subvalue_18 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1428;
        goto try_finally_handler_34;
    }
    branch_no_21:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_34:;
    exception_keeper_type_35 = exception_type;
    exception_keeper_value_35 = exception_value;
    exception_keeper_tb_35 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_19 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_5__value_1.object );
    tmp_and_5__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_19;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_35 != NULL )
    {
        exception_type = exception_keeper_type_35;
        exception_value = exception_keeper_value_35;
        exception_tb = exception_keeper_tb_35;

        goto try_finally_handler_30;
    }

    goto finally_end_35;
    finally_end_35:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1422;
        goto try_finally_handler_30;
    }
    goto loop_start_8;
    loop_end_8:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_30:;
    exception_keeper_type_36 = exception_type;
    exception_keeper_value_36 = exception_value;
    exception_keeper_tb_36 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_20 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_7__iter_value.object );
    tmp_for_loop_7__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_7__for_iterator.object );
    tmp_for_loop_7__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_20;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_36 != NULL )
    {
        exception_type = exception_keeper_type_36;
        exception_value = exception_keeper_value_36;
        exception_tb = exception_keeper_tb_36;

        goto frame_exception_exit_1;
    }

    goto finally_end_36;
    finally_end_36:;
    // Tried code
    tmp_cond_value_20 = NULL;
    // Tried code
    tmp_subscr_target_52 = var_rd.object;

    if ( tmp_subscr_target_52 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1432;
        goto try_finally_handler_38;
    }

    tmp_subscr_subscript_52 = const_str_plain_keyformat;
    tmp_assign_source_73 = LOOKUP_SUBSCRIPT( tmp_subscr_target_52, tmp_subscr_subscript_52 );
    if ( tmp_assign_source_73 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1432;
        goto try_finally_handler_38;
    }
    assert( tmp_or_4__value_1.object == NULL );
    tmp_or_4__value_1.object = tmp_assign_source_73;

    tmp_cond_value_21 = tmp_or_4__value_1.object;

    tmp_cond_truth_21 = CHECK_IF_TRUE( tmp_cond_value_21 );
    if ( tmp_cond_truth_21 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1432;
        goto try_finally_handler_38;
    }
    if (tmp_cond_truth_21 == 1)
    {
        goto condexpr_true_9;
    }
    else
    {
        goto condexpr_false_9;
    }
    condexpr_true_9:;
    tmp_cond_value_20 = tmp_or_4__value_1.object;

    Py_INCREF( tmp_cond_value_20 );
    goto condexpr_end_9;
    condexpr_false_9:;
    tmp_cond_value_20 = NULL;
    // Tried code
    tmp_result = tmp_or_4__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_4__value_1.object );
        tmp_or_4__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_subscr_target_53 = var_rd.object;

    if ( tmp_subscr_target_53 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1432;
        goto try_finally_handler_39;
    }

    tmp_subscr_subscript_53 = const_str_plain_xaformat;
    tmp_cond_value_20 = LOOKUP_SUBSCRIPT( tmp_subscr_target_53, tmp_subscr_subscript_53 );
    if ( tmp_cond_value_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1432;
        goto try_finally_handler_39;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_39:;
    exception_keeper_type_37 = exception_type;
    exception_keeper_value_37 = exception_value;
    exception_keeper_tb_37 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_37 != NULL )
    {
        exception_type = exception_keeper_type_37;
        exception_value = exception_keeper_value_37;
        exception_tb = exception_keeper_tb_37;

        goto try_finally_handler_38;
    }

    goto finally_end_37;
    finally_end_37:;
    condexpr_end_9:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_38:;
    exception_keeper_type_38 = exception_type;
    exception_keeper_value_38 = exception_value;
    exception_keeper_tb_38 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_38 != NULL )
    {
        exception_type = exception_keeper_type_38;
        exception_value = exception_keeper_value_38;
        exception_tb = exception_keeper_tb_38;

        goto try_finally_handler_37;
    }

    goto finally_end_38;
    finally_end_38:;
    tmp_cond_truth_20 = CHECK_IF_TRUE( tmp_cond_value_20 );
    if ( tmp_cond_truth_20 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_20 );

        frame_function->f_lineno = 1432;
        goto try_finally_handler_37;
    }
    Py_DECREF( tmp_cond_value_20 );
    if (tmp_cond_truth_20 == 1)
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_subscr_target_54 = var_rd.object;

    if ( tmp_subscr_target_54 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1433;
        goto try_finally_handler_37;
    }

    tmp_subscr_subscript_54 = const_str_plain_argformat;
    tmp_assign_source_74 = LOOKUP_SUBSCRIPT( tmp_subscr_target_54, tmp_subscr_subscript_54 );
    if ( tmp_assign_source_74 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1433;
        goto try_finally_handler_37;
    }
    assert( var_argformat.object == NULL );
    var_argformat.object = tmp_assign_source_74;

    tmp_isinstance_inst_6 = var_argformat.object;

    tmp_isinstance_cls_6 = LOOKUP_BUILTIN( const_str_plain_list );
    if ( tmp_isinstance_cls_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1434;
        goto try_finally_handler_37;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_6, tmp_isinstance_cls_6 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1434;
        goto try_finally_handler_37;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_source_name_7 = var_argformat.object;

    tmp_called_43 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_append );
    if ( tmp_called_43 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1435;
        goto try_finally_handler_37;
    }
    tmp_call_arg_element_63 = const_str_chr_124;
    frame_function->f_lineno = 1435;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_43, tmp_call_arg_element_63 );
    Py_DECREF( tmp_called_43 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1435;
        goto try_finally_handler_37;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_23;
    branch_no_23:;
    tmp_isinstance_inst_7 = var_argformat.object;

    tmp_isinstance_cls_7 = LOOKUP_BUILTIN( const_str_plain_str );
    if ( tmp_isinstance_cls_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1437;
        goto try_finally_handler_37;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_7, tmp_isinstance_cls_7 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1437;
        goto try_finally_handler_37;
    }
    if (tmp_res == 1)
    {
        goto branch_no_24;
    }
    else
    {
        goto branch_yes_24;
    }
    branch_yes_24:;
    tmp_raise_type_1 = PyExc_AssertionError;
    tmp_raise_value_1 = PyTuple_New( 1 );
    tmp_unary_arg_3 = PyTuple_New( 2 );
    tmp_tuple_element_3 = var_argformat.object;

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_unary_arg_3, 0, tmp_tuple_element_3 );
    tmp_type_arg_1 = var_argformat.object;

    tmp_tuple_element_3 = BUILTIN_TYPE1( tmp_type_arg_1 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_raise_value_1 );
        Py_DECREF( tmp_unary_arg_3 );

        frame_function->f_lineno = 1437;
        goto try_finally_handler_37;
    }
    PyTuple_SET_ITEM( tmp_unary_arg_3, 1, tmp_tuple_element_3 );
    tmp_tuple_element_2 = UNARY_OPERATION( PyObject_Repr, tmp_unary_arg_3 );
    Py_DECREF( tmp_unary_arg_3 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_raise_value_1 );

        frame_function->f_lineno = 1437;
        goto try_finally_handler_37;
    }
    PyTuple_SET_ITEM( tmp_raise_value_1, 0, tmp_tuple_element_2 );
    exception_type = INCREASE_REFCOUNT( tmp_raise_type_1 );
    exception_value = tmp_raise_value_1;
    frame_function->f_lineno = 1437;
    RAISE_EXCEPTION_WITH_VALUE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_37;
    branch_no_24:;
    tmp_assign_source_75 = var_rd.object;

    if ( tmp_assign_source_75 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1438;
        goto try_finally_handler_37;
    }

    assert( tmp_inplace_assign_1__inplace_target.object == NULL );
    tmp_inplace_assign_1__inplace_target.object = INCREASE_REFCOUNT( tmp_assign_source_75 );

    // Tried code
    tmp_assign_source_76 = const_str_plain_argformat;
    assert( tmp_inplace_assign_1__inplace_subscript.object == NULL );
    tmp_inplace_assign_1__inplace_subscript.object = INCREASE_REFCOUNT( tmp_assign_source_76 );

    tmp_subscr_target_55 = tmp_inplace_assign_1__inplace_target.object;

    tmp_subscr_subscript_55 = tmp_inplace_assign_1__inplace_subscript.object;

    tmp_binop_left_18 = LOOKUP_SUBSCRIPT( tmp_subscr_target_55, tmp_subscr_subscript_55 );
    if ( tmp_binop_left_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1438;
        goto try_finally_handler_40;
    }
    tmp_binop_right_18 = const_str_chr_124;
    tmp_ass_subvalue_19 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_binop_left_18, tmp_binop_right_18 );
    Py_DECREF( tmp_binop_left_18 );
    if ( tmp_ass_subvalue_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1438;
        goto try_finally_handler_40;
    }
    tmp_ass_subscribed_19 = tmp_inplace_assign_1__inplace_target.object;

    tmp_ass_subscript_19 = tmp_inplace_assign_1__inplace_subscript.object;

    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_19, tmp_ass_subscript_19, tmp_ass_subvalue_19 );
    Py_DECREF( tmp_ass_subvalue_19 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1438;
        goto try_finally_handler_40;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_40:;
    exception_keeper_type_39 = exception_type;
    exception_keeper_value_39 = exception_value;
    exception_keeper_tb_39 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_21 = frame_function->f_lineno;
    tmp_result = tmp_inplace_assign_1__inplace_target.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_inplace_assign_1__inplace_target.object );
        tmp_inplace_assign_1__inplace_target.object = NULL;
    }

    assert( tmp_result != false );
    Py_XDECREF( tmp_inplace_assign_1__inplace_subscript.object );
    tmp_inplace_assign_1__inplace_subscript.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_21;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_39 != NULL )
    {
        exception_type = exception_keeper_type_39;
        exception_value = exception_keeper_value_39;
        exception_tb = exception_keeper_tb_39;

        goto try_finally_handler_37;
    }

    goto finally_end_39;
    finally_end_39:;
    branch_end_23:;
    branch_no_22:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_37:;
    exception_keeper_type_40 = exception_type;
    exception_keeper_value_40 = exception_value;
    exception_keeper_tb_40 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_22 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_4__value_1.object );
    tmp_or_4__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_22;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_40 != NULL )
    {
        exception_type = exception_keeper_type_40;
        exception_value = exception_keeper_value_40;
        exception_tb = exception_keeper_tb_40;

        goto frame_exception_exit_1;
    }

    goto finally_end_40;
    finally_end_40:;
    tmp_called_44 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_applyrules );

    if (unlikely( tmp_called_44 == NULL ))
    {
        tmp_called_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_applyrules );
    }

    if ( tmp_called_44 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 127020 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1440;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_64 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_routine_rules );

    if (unlikely( tmp_call_arg_element_64 == NULL ))
    {
        tmp_call_arg_element_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_routine_rules );
    }

    if ( tmp_call_arg_element_64 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 152583 ], 42, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1440;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_65 = var_rd.object;

    if ( tmp_call_arg_element_65 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126972 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1440;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1440;
    tmp_assign_source_77 = CALL_FUNCTION_WITH_ARGS2( tmp_called_44, tmp_call_arg_element_64, tmp_call_arg_element_65 );
    if ( tmp_assign_source_77 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1440;
        goto frame_exception_exit_1;
    }
    if (var_ar.object == NULL)
    {
        var_ar.object = tmp_assign_source_77;
    }
    else
    {
        PyObject *old = var_ar.object;
        var_ar.object = tmp_assign_source_77;
        Py_DECREF( old );
    }
    tmp_called_45 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_called_45 == NULL ))
    {
        tmp_called_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_called_45 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150156 ], 44, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1441;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_66 = par_rout.object;

    if ( tmp_call_arg_element_66 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124776 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1441;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1441;
    tmp_cond_value_22 = CALL_FUNCTION_WITH_ARGS1( tmp_called_45, tmp_call_arg_element_66 );
    if ( tmp_cond_value_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1441;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_22 = CHECK_IF_TRUE( tmp_cond_value_22 );
    if ( tmp_cond_truth_22 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_22 );

        frame_function->f_lineno = 1441;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_22 );
    if (tmp_cond_truth_22 == 1)
    {
        goto branch_yes_25;
    }
    else
    {
        goto branch_no_25;
    }
    branch_yes_25:;
    tmp_called_46 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_46 == NULL ))
    {
        tmp_called_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_46 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125154 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1442;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_19 = const_str_digest_48cabf7d0b3bbfc91057f28eb23a1560;
    tmp_subscr_target_56 = var_ar.object;

    tmp_subscr_subscript_56 = const_str_plain_docshort;
    tmp_binop_right_19 = LOOKUP_SUBSCRIPT( tmp_subscr_target_56, tmp_subscr_subscript_56 );
    if ( tmp_binop_right_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1442;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_67 = BINARY_OPERATION_REMAINDER( tmp_binop_left_19, tmp_binop_right_19 );
    Py_DECREF( tmp_binop_right_19 );
    if ( tmp_call_arg_element_67 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1442;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1442;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_46, tmp_call_arg_element_67 );
    Py_DECREF( tmp_call_arg_element_67 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1442;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_25;
    branch_no_25:;
    tmp_called_47 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess );

    if (unlikely( tmp_called_47 == NULL ))
    {
        tmp_called_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_outmess );
    }

    if ( tmp_called_47 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125154 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1444;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_20 = const_str_digest_a8afce941e7743fb1211294527053568;
    tmp_subscr_target_57 = var_ar.object;

    tmp_subscr_subscript_57 = const_str_plain_docshort;
    tmp_binop_right_20 = LOOKUP_SUBSCRIPT( tmp_subscr_target_57, tmp_subscr_subscript_57 );
    if ( tmp_binop_right_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1444;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_68 = BINARY_OPERATION_REMAINDER( tmp_binop_left_20, tmp_binop_right_20 );
    Py_DECREF( tmp_binop_right_20 );
    if ( tmp_call_arg_element_68 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1444;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1444;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_47, tmp_call_arg_element_68 );
    Py_DECREF( tmp_call_arg_element_68 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1444;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_end_25:;
    tmp_return_value = PyTuple_New( 2 );
    tmp_tuple_element_4 = var_ar.object;

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = var_wrap.object;

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 63093 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1445;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_4 );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_wrap.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_wrap,
            var_wrap.object
        );

    }
    if ((var_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_args,
            var_args.object
        );

    }
    if ((var_depargs.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_depargs,
            var_depargs.object
        );

    }
    if ((var_var.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_var,
            var_var.object
        );

    }
    if ((var_a.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_a,
            var_a.object
        );

    }
    if ((var_auxvars.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_auxvars,
            var_auxvars.object
        );

    }
    if ((var_vrd.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_vrd,
            var_vrd.object
        );

    }
    if ((var_rd.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_rd,
            var_rd.object
        );

    }
    if ((var_r.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_r,
            var_r.object
        );

    }
    if ((var_ar.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ar,
            var_ar.object
        );

    }
    if ((var_nth.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_nth,
            var_nth.object
        );

    }
    if ((var_nthk.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_nthk,
            var_nthk.object
        );

    }
    if ((var_savevrd.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_savevrd,
            var_savevrd.object
        );

    }
    if ((var__rules.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__rules,
            var__rules.object
        );

    }
    if ((var_c.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_c,
            var_c.object
        );

    }
    if ((var_optargs.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_optargs,
            var_optargs.object
        );

    }
    if ((var_cfs.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_cfs,
            var_cfs.object
        );

    }
    if ((var_k.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_k,
            var_k.object
        );

    }
    if ((var_argformat.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_argformat,
            var_argformat.object
        );

    }
    if ((par_rout.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_rout,
            par_rout.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_2_buildapi_of_module_numpy$f2py$rules( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_rout = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "buildapi() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_rout == key )
            {
                assert( _python_par_rout == NULL );
                _python_par_rout = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_rout, key ) == 1 )
            {
                assert( _python_par_rout == NULL );
                _python_par_rout = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "buildapi() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_rout != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_rout = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_rout == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_rout = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_rout == NULL ))
    {
        PyObject *values[] = { _python_par_rout };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2_buildapi_of_module_numpy$f2py$rules( self, _python_par_rout );

error_exit:;

    Py_XDECREF( _python_par_rout );

    return NULL;
}

static PyObject *dparse_function_2_buildapi_of_module_numpy$f2py$rules( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_2_buildapi_of_module_numpy$f2py$rules( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_buildapi_of_module_numpy$f2py$rules( self, args, size, NULL );
        return result;
    }

}




static PyObject *MAKE_FUNCTION_function_1_buildmodule_of_module_numpy$f2py$rules(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_buildmodule_of_module_numpy$f2py$rules,
        dparse_function_1_buildmodule_of_module_numpy$f2py$rules,
        const_str_plain_buildmodule,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3d391909584bb301ebdd977cdb6f6f76,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$f2py$rules,
        const_str_digest_d86091769b46541c28720c4a54cd7147
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_buildapi_of_module_numpy$f2py$rules(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_buildapi_of_module_numpy$f2py$rules,
        dparse_function_2_buildapi_of_module_numpy$f2py$rules,
        const_str_plain_buildapi,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_55f4764ba2936614f48431287cbfb287,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$f2py$rules,
        Py_None
    );

    return result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_numpy$f2py$rules =
{
    PyModuleDef_HEAD_INIT,
    "numpy.f2py.rules",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#define _MODULE_UNFREEZER 0

#if _MODULE_UNFREEZER

#include "nuitka/unfreezing.hpp"

// Table for lookup to find "frozen" modules or DLLs, i.e. the ones included in
// or along this binary.

static struct Nuitka_MetaPathBasedLoaderEntry meta_path_loader_entries[] =
{

    { NULL, NULL, 0 }
};

#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( numpy$f2py$rules )
{

#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Packages can be imported recursively in deep executables.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_numpy$f2py$rules );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    _initConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );
#if PYTHON_VERSION < 300
    initSlotCompare();
#endif

    patchBuiltinModule();
    patchTypeComparison();

#endif

#if _MODULE_UNFREEZER
    registerMetaPathBasedUnfreezer( meta_path_loader_entries );
#endif

    _initModuleConstants();
    _initModuleCodeObjects();

    // puts( "in initnumpy$f2py$rules" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_numpy$f2py$rules = Py_InitModule4(
        "numpy.f2py.rules",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    module_numpy$f2py$rules = PyModule_Create( &mdef_numpy$f2py$rules );
#endif

    moduledict_numpy$f2py$rules = (PyDictObject *)((PyModuleObject *)module_numpy$f2py$rules)->md_dict;

    assertObject( module_numpy$f2py$rules );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), const_str_digest_80eb8b2a20911481e3962616e7e0d2fc, module_numpy$f2py$rules );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( module_numpy$f2py$rules );

    if ( PyDict_GetItem( module_dict, const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, const_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
#if _MODULE_UNFREEZER
    PyDict_SetItem( module_dict, const_str_plain___loader__, metapath_based_loader );
#else
    PyDict_SetItem( module_dict, const_str_plain___loader__, Py_None );
#endif
#endif

    // Temp variables if any
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObject *exception_type, *exception_value;
    PyTracebackObject *exception_tb;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_left_3;
    PyObject *tmp_binop_left_4;
    PyObject *tmp_binop_left_5;
    PyObject *tmp_binop_left_6;
    PyObject *tmp_binop_left_7;
    PyObject *tmp_binop_left_8;
    PyObject *tmp_binop_left_9;
    PyObject *tmp_binop_left_10;
    PyObject *tmp_binop_left_11;
    PyObject *tmp_binop_left_12;
    PyObject *tmp_binop_left_13;
    PyObject *tmp_binop_left_14;
    PyObject *tmp_binop_left_15;
    PyObject *tmp_binop_left_16;
    PyObject *tmp_binop_left_17;
    PyObject *tmp_binop_left_18;
    PyObject *tmp_binop_left_19;
    PyObject *tmp_binop_left_20;
    PyObject *tmp_binop_left_21;
    PyObject *tmp_binop_left_22;
    PyObject *tmp_binop_left_23;
    PyObject *tmp_binop_left_24;
    PyObject *tmp_binop_left_25;
    PyObject *tmp_binop_left_26;
    PyObject *tmp_binop_left_27;
    PyObject *tmp_binop_left_28;
    PyObject *tmp_binop_left_29;
    PyObject *tmp_binop_left_30;
    PyObject *tmp_binop_left_31;
    PyObject *tmp_binop_left_32;
    PyObject *tmp_binop_left_33;
    PyObject *tmp_binop_left_34;
    PyObject *tmp_binop_left_35;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_binop_right_3;
    PyObject *tmp_binop_right_4;
    PyObject *tmp_binop_right_5;
    PyObject *tmp_binop_right_6;
    PyObject *tmp_binop_right_7;
    PyObject *tmp_binop_right_8;
    PyObject *tmp_binop_right_9;
    PyObject *tmp_binop_right_10;
    PyObject *tmp_binop_right_11;
    PyObject *tmp_binop_right_12;
    PyObject *tmp_binop_right_13;
    PyObject *tmp_binop_right_14;
    PyObject *tmp_binop_right_15;
    PyObject *tmp_binop_right_16;
    PyObject *tmp_binop_right_17;
    PyObject *tmp_binop_right_18;
    PyObject *tmp_binop_right_19;
    PyObject *tmp_binop_right_20;
    PyObject *tmp_binop_right_21;
    PyObject *tmp_binop_right_22;
    PyObject *tmp_binop_right_23;
    PyObject *tmp_binop_right_24;
    PyObject *tmp_binop_right_25;
    PyObject *tmp_binop_right_26;
    PyObject *tmp_binop_right_27;
    PyObject *tmp_binop_right_28;
    PyObject *tmp_binop_right_29;
    PyObject *tmp_binop_right_30;
    PyObject *tmp_binop_right_31;
    PyObject *tmp_binop_right_32;
    PyObject *tmp_binop_right_33;
    PyObject *tmp_binop_right_34;
    PyObject *tmp_binop_right_35;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_call_arg_element_14;
    PyObject *tmp_call_arg_element_15;
    PyObject *tmp_call_arg_element_16;
    PyObject *tmp_call_arg_element_17;
    PyObject *tmp_call_arg_element_18;
    PyObject *tmp_call_arg_element_19;
    PyObject *tmp_call_arg_element_20;
    PyObject *tmp_call_arg_element_21;
    PyObject *tmp_call_arg_element_22;
    PyObject *tmp_call_arg_element_23;
    PyObject *tmp_call_arg_element_24;
    PyObject *tmp_call_arg_element_25;
    PyObject *tmp_call_arg_element_26;
    PyObject *tmp_call_arg_element_27;
    PyObject *tmp_call_arg_element_28;
    PyObject *tmp_call_arg_element_29;
    PyObject *tmp_call_arg_element_30;
    PyObject *tmp_call_arg_element_31;
    PyObject *tmp_call_arg_element_32;
    PyObject *tmp_call_arg_element_33;
    PyObject *tmp_call_arg_element_34;
    PyObject *tmp_call_arg_element_35;
    PyObject *tmp_call_arg_element_36;
    PyObject *tmp_call_arg_element_37;
    PyObject *tmp_call_arg_element_38;
    PyObject *tmp_call_arg_element_39;
    PyObject *tmp_call_arg_element_40;
    PyObject *tmp_call_arg_element_41;
    PyObject *tmp_call_arg_element_42;
    PyObject *tmp_call_arg_element_43;
    PyObject *tmp_call_arg_element_44;
    PyObject *tmp_call_arg_element_45;
    PyObject *tmp_call_arg_element_46;
    PyObject *tmp_call_arg_element_47;
    PyObject *tmp_call_arg_element_48;
    PyObject *tmp_call_arg_element_49;
    PyObject *tmp_call_arg_element_50;
    PyObject *tmp_call_arg_element_51;
    PyObject *tmp_call_arg_element_52;
    PyObject *tmp_call_arg_element_53;
    PyObject *tmp_call_arg_element_54;
    PyObject *tmp_call_arg_element_55;
    PyObject *tmp_call_arg_element_56;
    PyObject *tmp_call_arg_element_57;
    PyObject *tmp_call_arg_element_58;
    PyObject *tmp_call_arg_element_59;
    PyObject *tmp_call_arg_element_60;
    PyObject *tmp_call_arg_element_61;
    PyObject *tmp_call_arg_element_62;
    PyObject *tmp_call_arg_element_63;
    PyObject *tmp_call_arg_element_64;
    PyObject *tmp_call_arg_element_65;
    PyObject *tmp_call_arg_element_66;
    PyObject *tmp_call_arg_element_67;
    PyObject *tmp_call_arg_element_68;
    PyObject *tmp_call_arg_element_69;
    PyObject *tmp_call_arg_element_70;
    PyObject *tmp_call_arg_element_71;
    PyObject *tmp_call_arg_element_72;
    PyObject *tmp_call_arg_element_73;
    PyObject *tmp_call_arg_element_74;
    PyObject *tmp_call_arg_element_75;
    PyObject *tmp_call_arg_element_76;
    PyObject *tmp_call_arg_element_77;
    PyObject *tmp_call_arg_element_78;
    PyObject *tmp_call_arg_element_79;
    PyObject *tmp_call_arg_element_80;
    PyObject *tmp_call_arg_element_81;
    PyObject *tmp_call_arg_element_82;
    PyObject *tmp_call_arg_element_83;
    PyObject *tmp_call_arg_element_84;
    PyObject *tmp_call_arg_element_85;
    PyObject *tmp_call_arg_element_86;
    PyObject *tmp_call_arg_element_87;
    PyObject *tmp_call_arg_element_88;
    PyObject *tmp_call_arg_element_89;
    PyObject *tmp_call_arg_element_90;
    PyObject *tmp_call_arg_element_91;
    PyObject *tmp_call_arg_element_92;
    PyObject *tmp_call_arg_element_93;
    PyObject *tmp_call_arg_element_94;
    PyObject *tmp_call_arg_element_95;
    PyObject *tmp_call_arg_element_96;
    PyObject *tmp_call_arg_element_97;
    PyObject *tmp_call_arg_element_98;
    PyObject *tmp_call_arg_element_99;
    PyObject *tmp_call_arg_element_100;
    PyObject *tmp_call_arg_element_101;
    PyObject *tmp_call_arg_element_102;
    PyObject *tmp_call_arg_element_103;
    PyObject *tmp_call_arg_element_104;
    PyObject *tmp_call_arg_element_105;
    PyObject *tmp_call_arg_element_106;
    PyObject *tmp_call_arg_element_107;
    PyObject *tmp_call_arg_element_108;
    PyObject *tmp_call_arg_element_109;
    PyObject *tmp_call_arg_element_110;
    PyObject *tmp_call_arg_element_111;
    PyObject *tmp_call_arg_element_112;
    PyObject *tmp_call_arg_element_113;
    PyObject *tmp_call_arg_element_114;
    PyObject *tmp_call_arg_element_115;
    PyObject *tmp_call_arg_element_116;
    PyObject *tmp_call_arg_element_117;
    PyObject *tmp_call_arg_element_118;
    PyObject *tmp_call_arg_element_119;
    PyObject *tmp_call_arg_element_120;
    PyObject *tmp_call_arg_element_121;
    PyObject *tmp_call_arg_element_122;
    PyObject *tmp_call_arg_element_123;
    PyObject *tmp_call_arg_element_124;
    PyObject *tmp_call_arg_element_125;
    PyObject *tmp_call_arg_element_126;
    PyObject *tmp_call_arg_element_127;
    PyObject *tmp_call_arg_element_128;
    PyObject *tmp_call_arg_element_129;
    PyObject *tmp_call_arg_element_130;
    PyObject *tmp_call_arg_element_131;
    PyObject *tmp_call_arg_element_132;
    PyObject *tmp_call_arg_element_133;
    PyObject *tmp_call_arg_element_134;
    PyObject *tmp_call_arg_element_135;
    PyObject *tmp_call_arg_element_136;
    PyObject *tmp_call_arg_element_137;
    PyObject *tmp_call_arg_element_138;
    PyObject *tmp_call_arg_element_139;
    PyObject *tmp_call_arg_element_140;
    PyObject *tmp_call_arg_element_141;
    PyObject *tmp_call_arg_element_142;
    PyObject *tmp_call_arg_element_143;
    PyObject *tmp_call_arg_element_144;
    PyObject *tmp_call_arg_element_145;
    PyObject *tmp_call_arg_element_146;
    PyObject *tmp_call_arg_element_147;
    PyObject *tmp_call_arg_element_148;
    PyObject *tmp_call_arg_element_149;
    PyObject *tmp_call_arg_element_150;
    PyObject *tmp_call_arg_element_151;
    PyObject *tmp_call_arg_element_152;
    PyObject *tmp_call_arg_element_153;
    PyObject *tmp_call_arg_element_154;
    PyObject *tmp_call_arg_element_155;
    PyObject *tmp_call_arg_element_156;
    PyObject *tmp_call_arg_element_157;
    PyObject *tmp_call_arg_element_158;
    PyObject *tmp_call_arg_element_159;
    PyObject *tmp_call_arg_element_160;
    PyObject *tmp_call_arg_element_161;
    PyObject *tmp_call_arg_element_162;
    PyObject *tmp_call_arg_element_163;
    PyObject *tmp_call_arg_element_164;
    PyObject *tmp_call_arg_element_165;
    PyObject *tmp_call_arg_element_166;
    PyObject *tmp_call_arg_element_167;
    PyObject *tmp_call_arg_element_168;
    PyObject *tmp_call_arg_element_169;
    PyObject *tmp_call_arg_element_170;
    PyObject *tmp_call_arg_element_171;
    PyObject *tmp_call_arg_element_172;
    PyObject *tmp_call_arg_element_173;
    PyObject *tmp_call_arg_element_174;
    PyObject *tmp_call_arg_element_175;
    PyObject *tmp_call_arg_element_176;
    PyObject *tmp_call_arg_element_177;
    PyObject *tmp_call_arg_element_178;
    PyObject *tmp_call_arg_element_179;
    PyObject *tmp_call_arg_element_180;
    PyObject *tmp_call_arg_element_181;
    PyObject *tmp_call_arg_element_182;
    PyObject *tmp_call_arg_element_183;
    PyObject *tmp_call_arg_element_184;
    PyObject *tmp_call_arg_element_185;
    PyObject *tmp_call_arg_element_186;
    PyObject *tmp_call_arg_element_187;
    PyObject *tmp_call_arg_element_188;
    PyObject *tmp_call_arg_element_189;
    PyObject *tmp_call_arg_element_190;
    PyObject *tmp_call_arg_element_191;
    PyObject *tmp_call_arg_element_192;
    PyObject *tmp_call_arg_element_193;
    PyObject *tmp_call_arg_element_194;
    PyObject *tmp_call_arg_element_195;
    PyObject *tmp_call_arg_element_196;
    PyObject *tmp_call_arg_element_197;
    PyObject *tmp_call_arg_element_198;
    PyObject *tmp_call_arg_element_199;
    PyObject *tmp_call_arg_element_200;
    PyObject *tmp_call_arg_element_201;
    PyObject *tmp_call_arg_element_202;
    PyObject *tmp_call_arg_element_203;
    PyObject *tmp_call_arg_element_204;
    PyObject *tmp_call_arg_element_205;
    PyObject *tmp_call_arg_element_206;
    PyObject *tmp_call_arg_element_207;
    PyObject *tmp_call_arg_element_208;
    PyObject *tmp_call_arg_element_209;
    PyObject *tmp_call_arg_element_210;
    PyObject *tmp_call_arg_element_211;
    PyObject *tmp_call_arg_element_212;
    PyObject *tmp_call_arg_element_213;
    PyObject *tmp_call_arg_element_214;
    PyObject *tmp_call_arg_element_215;
    PyObject *tmp_call_arg_element_216;
    PyObject *tmp_call_arg_element_217;
    PyObject *tmp_call_arg_element_218;
    PyObject *tmp_call_arg_element_219;
    PyObject *tmp_call_arg_element_220;
    PyObject *tmp_call_arg_element_221;
    PyObject *tmp_call_arg_element_222;
    PyObject *tmp_call_arg_element_223;
    PyObject *tmp_call_arg_element_224;
    PyObject *tmp_call_arg_element_225;
    PyObject *tmp_call_arg_element_226;
    PyObject *tmp_call_arg_element_227;
    PyObject *tmp_call_arg_element_228;
    PyObject *tmp_call_arg_element_229;
    PyObject *tmp_call_arg_element_230;
    PyObject *tmp_call_arg_element_231;
    PyObject *tmp_call_arg_element_232;
    PyObject *tmp_call_arg_element_233;
    PyObject *tmp_call_arg_element_234;
    PyObject *tmp_call_arg_element_235;
    PyObject *tmp_call_arg_element_236;
    PyObject *tmp_call_arg_element_237;
    PyObject *tmp_call_arg_element_238;
    PyObject *tmp_call_arg_element_239;
    PyObject *tmp_call_arg_element_240;
    PyObject *tmp_call_arg_element_241;
    PyObject *tmp_call_arg_element_242;
    PyObject *tmp_call_arg_element_243;
    PyObject *tmp_call_arg_element_244;
    PyObject *tmp_call_arg_element_245;
    PyObject *tmp_call_arg_element_246;
    PyObject *tmp_call_arg_element_247;
    PyObject *tmp_call_arg_element_248;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    PyObject *tmp_called_11;
    PyObject *tmp_called_12;
    PyObject *tmp_called_13;
    PyObject *tmp_called_14;
    PyObject *tmp_called_15;
    PyObject *tmp_called_16;
    PyObject *tmp_called_17;
    PyObject *tmp_called_18;
    PyObject *tmp_called_19;
    PyObject *tmp_called_20;
    PyObject *tmp_called_21;
    PyObject *tmp_called_22;
    PyObject *tmp_called_23;
    PyObject *tmp_called_24;
    PyObject *tmp_called_25;
    PyObject *tmp_called_26;
    PyObject *tmp_called_27;
    PyObject *tmp_called_28;
    PyObject *tmp_called_29;
    PyObject *tmp_called_30;
    PyObject *tmp_called_31;
    PyObject *tmp_called_32;
    PyObject *tmp_called_33;
    PyObject *tmp_called_34;
    PyObject *tmp_called_35;
    PyObject *tmp_called_36;
    PyObject *tmp_called_37;
    PyObject *tmp_called_38;
    PyObject *tmp_called_39;
    PyObject *tmp_called_40;
    PyObject *tmp_called_41;
    PyObject *tmp_called_42;
    PyObject *tmp_called_43;
    PyObject *tmp_called_44;
    PyObject *tmp_called_45;
    PyObject *tmp_called_46;
    PyObject *tmp_called_47;
    PyObject *tmp_called_48;
    PyObject *tmp_called_49;
    PyObject *tmp_called_50;
    PyObject *tmp_called_51;
    PyObject *tmp_called_52;
    PyObject *tmp_called_53;
    PyObject *tmp_called_54;
    PyObject *tmp_called_55;
    PyObject *tmp_called_56;
    PyObject *tmp_called_57;
    PyObject *tmp_called_58;
    PyObject *tmp_called_59;
    PyObject *tmp_called_60;
    PyObject *tmp_called_61;
    PyObject *tmp_called_62;
    PyObject *tmp_called_63;
    PyObject *tmp_called_64;
    PyObject *tmp_called_65;
    PyObject *tmp_called_66;
    PyObject *tmp_called_67;
    PyObject *tmp_called_68;
    PyObject *tmp_called_69;
    PyObject *tmp_called_70;
    PyObject *tmp_called_71;
    PyObject *tmp_called_72;
    PyObject *tmp_called_73;
    PyObject *tmp_called_74;
    PyObject *tmp_called_75;
    PyObject *tmp_called_76;
    PyObject *tmp_called_77;
    PyObject *tmp_called_78;
    PyObject *tmp_called_79;
    PyObject *tmp_called_80;
    PyObject *tmp_called_81;
    PyObject *tmp_called_82;
    PyObject *tmp_called_83;
    PyObject *tmp_called_84;
    PyObject *tmp_called_85;
    PyObject *tmp_called_86;
    PyObject *tmp_called_87;
    PyObject *tmp_called_88;
    PyObject *tmp_called_89;
    PyObject *tmp_called_90;
    PyObject *tmp_called_91;
    PyObject *tmp_called_92;
    PyObject *tmp_called_93;
    PyObject *tmp_called_94;
    PyObject *tmp_called_95;
    PyObject *tmp_called_96;
    PyObject *tmp_called_97;
    PyObject *tmp_called_98;
    PyObject *tmp_called_99;
    PyObject *tmp_called_100;
    PyObject *tmp_called_101;
    PyObject *tmp_called_102;
    PyObject *tmp_called_103;
    PyObject *tmp_called_104;
    PyObject *tmp_called_105;
    PyObject *tmp_called_106;
    PyObject *tmp_called_107;
    PyObject *tmp_called_108;
    PyObject *tmp_called_109;
    PyObject *tmp_called_110;
    PyObject *tmp_called_111;
    PyObject *tmp_called_112;
    PyObject *tmp_called_113;
    PyObject *tmp_called_114;
    PyObject *tmp_called_115;
    PyObject *tmp_called_116;
    PyObject *tmp_called_117;
    PyObject *tmp_called_118;
    PyObject *tmp_called_119;
    PyObject *tmp_called_120;
    PyObject *tmp_called_121;
    PyObject *tmp_called_122;
    PyObject *tmp_called_123;
    PyObject *tmp_called_124;
    PyObject *tmp_called_125;
    PyObject *tmp_called_126;
    PyObject *tmp_called_127;
    PyObject *tmp_called_128;
    PyObject *tmp_called_129;
    PyObject *tmp_called_130;
    PyObject *tmp_called_131;
    PyObject *tmp_called_132;
    PyObject *tmp_called_133;
    PyObject *tmp_called_134;
    PyObject *tmp_called_135;
    PyObject *tmp_called_136;
    PyObject *tmp_called_137;
    PyObject *tmp_called_138;
    PyObject *tmp_called_139;
    PyObject *tmp_called_140;
    PyObject *tmp_called_141;
    PyObject *tmp_called_142;
    PyObject *tmp_called_143;
    PyObject *tmp_called_144;
    PyObject *tmp_called_145;
    PyObject *tmp_called_146;
    PyObject *tmp_called_147;
    PyObject *tmp_called_148;
    PyObject *tmp_called_149;
    PyObject *tmp_called_150;
    PyObject *tmp_called_151;
    PyObject *tmp_called_152;
    PyObject *tmp_called_153;
    PyObject *tmp_called_154;
    PyObject *tmp_called_155;
    PyObject *tmp_called_156;
    PyObject *tmp_called_157;
    PyObject *tmp_called_158;
    PyObject *tmp_called_159;
    PyObject *tmp_called_160;
    PyObject *tmp_called_161;
    PyObject *tmp_called_162;
    PyObject *tmp_called_163;
    PyObject *tmp_called_164;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_key_10;
    PyObject *tmp_dict_key_11;
    PyObject *tmp_dict_key_12;
    PyObject *tmp_dict_key_13;
    PyObject *tmp_dict_key_14;
    PyObject *tmp_dict_key_15;
    PyObject *tmp_dict_key_16;
    PyObject *tmp_dict_key_17;
    PyObject *tmp_dict_key_18;
    PyObject *tmp_dict_key_19;
    PyObject *tmp_dict_key_20;
    PyObject *tmp_dict_key_21;
    PyObject *tmp_dict_key_22;
    PyObject *tmp_dict_key_23;
    PyObject *tmp_dict_key_24;
    PyObject *tmp_dict_key_25;
    PyObject *tmp_dict_key_26;
    PyObject *tmp_dict_key_27;
    PyObject *tmp_dict_key_28;
    PyObject *tmp_dict_key_29;
    PyObject *tmp_dict_key_30;
    PyObject *tmp_dict_key_31;
    PyObject *tmp_dict_key_32;
    PyObject *tmp_dict_key_33;
    PyObject *tmp_dict_key_34;
    PyObject *tmp_dict_key_35;
    PyObject *tmp_dict_key_36;
    PyObject *tmp_dict_key_37;
    PyObject *tmp_dict_key_38;
    PyObject *tmp_dict_key_39;
    PyObject *tmp_dict_key_40;
    PyObject *tmp_dict_key_41;
    PyObject *tmp_dict_key_42;
    PyObject *tmp_dict_key_43;
    PyObject *tmp_dict_key_44;
    PyObject *tmp_dict_key_45;
    PyObject *tmp_dict_key_46;
    PyObject *tmp_dict_key_47;
    PyObject *tmp_dict_key_48;
    PyObject *tmp_dict_key_49;
    PyObject *tmp_dict_key_50;
    PyObject *tmp_dict_key_51;
    PyObject *tmp_dict_key_52;
    PyObject *tmp_dict_key_53;
    PyObject *tmp_dict_key_54;
    PyObject *tmp_dict_key_55;
    PyObject *tmp_dict_key_56;
    PyObject *tmp_dict_key_57;
    PyObject *tmp_dict_key_58;
    PyObject *tmp_dict_key_59;
    PyObject *tmp_dict_key_60;
    PyObject *tmp_dict_key_61;
    PyObject *tmp_dict_key_62;
    PyObject *tmp_dict_key_63;
    PyObject *tmp_dict_key_64;
    PyObject *tmp_dict_key_65;
    PyObject *tmp_dict_key_66;
    PyObject *tmp_dict_key_67;
    PyObject *tmp_dict_key_68;
    PyObject *tmp_dict_key_69;
    PyObject *tmp_dict_key_70;
    PyObject *tmp_dict_key_71;
    PyObject *tmp_dict_key_72;
    PyObject *tmp_dict_key_73;
    PyObject *tmp_dict_key_74;
    PyObject *tmp_dict_key_75;
    PyObject *tmp_dict_key_76;
    PyObject *tmp_dict_key_77;
    PyObject *tmp_dict_key_78;
    PyObject *tmp_dict_key_79;
    PyObject *tmp_dict_key_80;
    PyObject *tmp_dict_key_81;
    PyObject *tmp_dict_key_82;
    PyObject *tmp_dict_key_83;
    PyObject *tmp_dict_key_84;
    PyObject *tmp_dict_key_85;
    PyObject *tmp_dict_key_86;
    PyObject *tmp_dict_key_87;
    PyObject *tmp_dict_key_88;
    PyObject *tmp_dict_key_89;
    PyObject *tmp_dict_key_90;
    PyObject *tmp_dict_key_91;
    PyObject *tmp_dict_key_92;
    PyObject *tmp_dict_key_93;
    PyObject *tmp_dict_key_94;
    PyObject *tmp_dict_key_95;
    PyObject *tmp_dict_key_96;
    PyObject *tmp_dict_key_97;
    PyObject *tmp_dict_key_98;
    PyObject *tmp_dict_key_99;
    PyObject *tmp_dict_key_100;
    PyObject *tmp_dict_key_101;
    PyObject *tmp_dict_key_102;
    PyObject *tmp_dict_key_103;
    PyObject *tmp_dict_key_104;
    PyObject *tmp_dict_key_105;
    PyObject *tmp_dict_key_106;
    PyObject *tmp_dict_key_107;
    PyObject *tmp_dict_key_108;
    PyObject *tmp_dict_key_109;
    PyObject *tmp_dict_key_110;
    PyObject *tmp_dict_key_111;
    PyObject *tmp_dict_key_112;
    PyObject *tmp_dict_key_113;
    PyObject *tmp_dict_key_114;
    PyObject *tmp_dict_key_115;
    PyObject *tmp_dict_key_116;
    PyObject *tmp_dict_key_117;
    PyObject *tmp_dict_key_118;
    PyObject *tmp_dict_key_119;
    PyObject *tmp_dict_key_120;
    PyObject *tmp_dict_key_121;
    PyObject *tmp_dict_key_122;
    PyObject *tmp_dict_key_123;
    PyObject *tmp_dict_key_124;
    PyObject *tmp_dict_key_125;
    PyObject *tmp_dict_key_126;
    PyObject *tmp_dict_key_127;
    PyObject *tmp_dict_key_128;
    PyObject *tmp_dict_key_129;
    PyObject *tmp_dict_key_130;
    PyObject *tmp_dict_key_131;
    PyObject *tmp_dict_key_132;
    PyObject *tmp_dict_key_133;
    PyObject *tmp_dict_key_134;
    PyObject *tmp_dict_key_135;
    PyObject *tmp_dict_key_136;
    PyObject *tmp_dict_key_137;
    PyObject *tmp_dict_key_138;
    PyObject *tmp_dict_key_139;
    PyObject *tmp_dict_key_140;
    PyObject *tmp_dict_key_141;
    PyObject *tmp_dict_key_142;
    PyObject *tmp_dict_key_143;
    PyObject *tmp_dict_key_144;
    PyObject *tmp_dict_key_145;
    PyObject *tmp_dict_key_146;
    PyObject *tmp_dict_key_147;
    PyObject *tmp_dict_key_148;
    PyObject *tmp_dict_key_149;
    PyObject *tmp_dict_key_150;
    PyObject *tmp_dict_key_151;
    PyObject *tmp_dict_key_152;
    PyObject *tmp_dict_key_153;
    PyObject *tmp_dict_key_154;
    PyObject *tmp_dict_key_155;
    PyObject *tmp_dict_key_156;
    PyObject *tmp_dict_key_157;
    PyObject *tmp_dict_key_158;
    PyObject *tmp_dict_key_159;
    PyObject *tmp_dict_key_160;
    PyObject *tmp_dict_key_161;
    PyObject *tmp_dict_key_162;
    PyObject *tmp_dict_key_163;
    PyObject *tmp_dict_key_164;
    PyObject *tmp_dict_key_165;
    PyObject *tmp_dict_key_166;
    PyObject *tmp_dict_key_167;
    PyObject *tmp_dict_key_168;
    PyObject *tmp_dict_key_169;
    PyObject *tmp_dict_key_170;
    PyObject *tmp_dict_key_171;
    PyObject *tmp_dict_key_172;
    PyObject *tmp_dict_key_173;
    PyObject *tmp_dict_key_174;
    PyObject *tmp_dict_key_175;
    PyObject *tmp_dict_key_176;
    PyObject *tmp_dict_key_177;
    PyObject *tmp_dict_key_178;
    PyObject *tmp_dict_key_179;
    PyObject *tmp_dict_key_180;
    PyObject *tmp_dict_key_181;
    PyObject *tmp_dict_key_182;
    PyObject *tmp_dict_key_183;
    PyObject *tmp_dict_key_184;
    PyObject *tmp_dict_key_185;
    PyObject *tmp_dict_key_186;
    PyObject *tmp_dict_key_187;
    PyObject *tmp_dict_key_188;
    PyObject *tmp_dict_key_189;
    PyObject *tmp_dict_key_190;
    PyObject *tmp_dict_key_191;
    PyObject *tmp_dict_key_192;
    PyObject *tmp_dict_key_193;
    PyObject *tmp_dict_key_194;
    PyObject *tmp_dict_key_195;
    PyObject *tmp_dict_key_196;
    PyObject *tmp_dict_key_197;
    PyObject *tmp_dict_key_198;
    PyObject *tmp_dict_key_199;
    PyObject *tmp_dict_key_200;
    PyObject *tmp_dict_key_201;
    PyObject *tmp_dict_key_202;
    PyObject *tmp_dict_key_203;
    PyObject *tmp_dict_key_204;
    PyObject *tmp_dict_key_205;
    PyObject *tmp_dict_key_206;
    PyObject *tmp_dict_key_207;
    PyObject *tmp_dict_key_208;
    PyObject *tmp_dict_key_209;
    PyObject *tmp_dict_key_210;
    PyObject *tmp_dict_key_211;
    PyObject *tmp_dict_key_212;
    PyObject *tmp_dict_key_213;
    PyObject *tmp_dict_key_214;
    PyObject *tmp_dict_key_215;
    PyObject *tmp_dict_key_216;
    PyObject *tmp_dict_key_217;
    PyObject *tmp_dict_key_218;
    PyObject *tmp_dict_key_219;
    PyObject *tmp_dict_key_220;
    PyObject *tmp_dict_key_221;
    PyObject *tmp_dict_key_222;
    PyObject *tmp_dict_key_223;
    PyObject *tmp_dict_key_224;
    PyObject *tmp_dict_key_225;
    PyObject *tmp_dict_key_226;
    PyObject *tmp_dict_key_227;
    PyObject *tmp_dict_key_228;
    PyObject *tmp_dict_key_229;
    PyObject *tmp_dict_key_230;
    PyObject *tmp_dict_key_231;
    PyObject *tmp_dict_key_232;
    PyObject *tmp_dict_key_233;
    PyObject *tmp_dict_key_234;
    PyObject *tmp_dict_key_235;
    PyObject *tmp_dict_key_236;
    PyObject *tmp_dict_key_237;
    PyObject *tmp_dict_key_238;
    PyObject *tmp_dict_key_239;
    PyObject *tmp_dict_key_240;
    PyObject *tmp_dict_key_241;
    PyObject *tmp_dict_key_242;
    PyObject *tmp_dict_key_243;
    PyObject *tmp_dict_key_244;
    PyObject *tmp_dict_key_245;
    PyObject *tmp_dict_key_246;
    PyObject *tmp_dict_key_247;
    PyObject *tmp_dict_key_248;
    PyObject *tmp_dict_key_249;
    PyObject *tmp_dict_key_250;
    PyObject *tmp_dict_key_251;
    PyObject *tmp_dict_key_252;
    PyObject *tmp_dict_key_253;
    PyObject *tmp_dict_key_254;
    PyObject *tmp_dict_key_255;
    PyObject *tmp_dict_key_256;
    PyObject *tmp_dict_key_257;
    PyObject *tmp_dict_key_258;
    PyObject *tmp_dict_key_259;
    PyObject *tmp_dict_key_260;
    PyObject *tmp_dict_key_261;
    PyObject *tmp_dict_key_262;
    PyObject *tmp_dict_key_263;
    PyObject *tmp_dict_key_264;
    PyObject *tmp_dict_key_265;
    PyObject *tmp_dict_key_266;
    PyObject *tmp_dict_key_267;
    PyObject *tmp_dict_key_268;
    PyObject *tmp_dict_key_269;
    PyObject *tmp_dict_key_270;
    PyObject *tmp_dict_key_271;
    PyObject *tmp_dict_key_272;
    PyObject *tmp_dict_key_273;
    PyObject *tmp_dict_key_274;
    PyObject *tmp_dict_key_275;
    PyObject *tmp_dict_key_276;
    PyObject *tmp_dict_key_277;
    PyObject *tmp_dict_key_278;
    PyObject *tmp_dict_key_279;
    PyObject *tmp_dict_key_280;
    PyObject *tmp_dict_key_281;
    PyObject *tmp_dict_key_282;
    PyObject *tmp_dict_key_283;
    PyObject *tmp_dict_key_284;
    PyObject *tmp_dict_key_285;
    PyObject *tmp_dict_key_286;
    PyObject *tmp_dict_key_287;
    PyObject *tmp_dict_key_288;
    PyObject *tmp_dict_key_289;
    PyObject *tmp_dict_key_290;
    PyObject *tmp_dict_key_291;
    PyObject *tmp_dict_key_292;
    PyObject *tmp_dict_key_293;
    PyObject *tmp_dict_key_294;
    PyObject *tmp_dict_key_295;
    PyObject *tmp_dict_key_296;
    PyObject *tmp_dict_key_297;
    PyObject *tmp_dict_key_298;
    PyObject *tmp_dict_key_299;
    PyObject *tmp_dict_key_300;
    PyObject *tmp_dict_key_301;
    PyObject *tmp_dict_key_302;
    PyObject *tmp_dict_key_303;
    PyObject *tmp_dict_key_304;
    PyObject *tmp_dict_key_305;
    PyObject *tmp_dict_key_306;
    PyObject *tmp_dict_key_307;
    PyObject *tmp_dict_key_308;
    PyObject *tmp_dict_key_309;
    PyObject *tmp_dict_key_310;
    PyObject *tmp_dict_key_311;
    PyObject *tmp_dict_key_312;
    PyObject *tmp_dict_key_313;
    PyObject *tmp_dict_key_314;
    PyObject *tmp_dict_key_315;
    PyObject *tmp_dict_key_316;
    PyObject *tmp_dict_key_317;
    PyObject *tmp_dict_key_318;
    PyObject *tmp_dict_key_319;
    PyObject *tmp_dict_key_320;
    PyObject *tmp_dict_key_321;
    PyObject *tmp_dict_key_322;
    PyObject *tmp_dict_key_323;
    PyObject *tmp_dict_key_324;
    PyObject *tmp_dict_key_325;
    PyObject *tmp_dict_key_326;
    PyObject *tmp_dict_key_327;
    PyObject *tmp_dict_key_328;
    PyObject *tmp_dict_key_329;
    PyObject *tmp_dict_key_330;
    PyObject *tmp_dict_key_331;
    PyObject *tmp_dict_key_332;
    PyObject *tmp_dict_key_333;
    PyObject *tmp_dict_key_334;
    PyObject *tmp_dict_key_335;
    PyObject *tmp_dict_key_336;
    PyObject *tmp_dict_key_337;
    PyObject *tmp_dict_key_338;
    PyObject *tmp_dict_key_339;
    PyObject *tmp_dict_key_340;
    PyObject *tmp_dict_key_341;
    PyObject *tmp_dict_key_342;
    PyObject *tmp_dict_key_343;
    PyObject *tmp_dict_key_344;
    PyObject *tmp_dict_key_345;
    PyObject *tmp_dict_key_346;
    PyObject *tmp_dict_key_347;
    PyObject *tmp_dict_key_348;
    PyObject *tmp_dict_key_349;
    PyObject *tmp_dict_key_350;
    PyObject *tmp_dict_key_351;
    PyObject *tmp_dict_key_352;
    PyObject *tmp_dict_key_353;
    PyObject *tmp_dict_key_354;
    PyObject *tmp_dict_key_355;
    PyObject *tmp_dict_key_356;
    PyObject *tmp_dict_key_357;
    PyObject *tmp_dict_key_358;
    PyObject *tmp_dict_key_359;
    PyObject *tmp_dict_key_360;
    PyObject *tmp_dict_key_361;
    PyObject *tmp_dict_key_362;
    PyObject *tmp_dict_key_363;
    PyObject *tmp_dict_key_364;
    PyObject *tmp_dict_key_365;
    PyObject *tmp_dict_key_366;
    PyObject *tmp_dict_key_367;
    PyObject *tmp_dict_key_368;
    PyObject *tmp_dict_key_369;
    PyObject *tmp_dict_key_370;
    PyObject *tmp_dict_key_371;
    PyObject *tmp_dict_key_372;
    PyObject *tmp_dict_key_373;
    PyObject *tmp_dict_key_374;
    PyObject *tmp_dict_key_375;
    PyObject *tmp_dict_key_376;
    PyObject *tmp_dict_key_377;
    PyObject *tmp_dict_key_378;
    PyObject *tmp_dict_key_379;
    PyObject *tmp_dict_key_380;
    PyObject *tmp_dict_key_381;
    PyObject *tmp_dict_key_382;
    PyObject *tmp_dict_key_383;
    PyObject *tmp_dict_key_384;
    PyObject *tmp_dict_key_385;
    PyObject *tmp_dict_key_386;
    PyObject *tmp_dict_key_387;
    PyObject *tmp_dict_key_388;
    PyObject *tmp_dict_key_389;
    PyObject *tmp_dict_key_390;
    PyObject *tmp_dict_key_391;
    PyObject *tmp_dict_key_392;
    PyObject *tmp_dict_key_393;
    PyObject *tmp_dict_key_394;
    PyObject *tmp_dict_key_395;
    PyObject *tmp_dict_key_396;
    PyObject *tmp_dict_key_397;
    PyObject *tmp_dict_key_398;
    PyObject *tmp_dict_key_399;
    PyObject *tmp_dict_key_400;
    PyObject *tmp_dict_key_401;
    PyObject *tmp_dict_key_402;
    PyObject *tmp_dict_key_403;
    PyObject *tmp_dict_key_404;
    PyObject *tmp_dict_key_405;
    PyObject *tmp_dict_key_406;
    PyObject *tmp_dict_key_407;
    PyObject *tmp_dict_key_408;
    PyObject *tmp_dict_key_409;
    PyObject *tmp_dict_key_410;
    PyObject *tmp_dict_key_411;
    PyObject *tmp_dict_key_412;
    PyObject *tmp_dict_key_413;
    PyObject *tmp_dict_key_414;
    PyObject *tmp_dict_key_415;
    PyObject *tmp_dict_key_416;
    PyObject *tmp_dict_key_417;
    PyObject *tmp_dict_key_418;
    PyObject *tmp_dict_key_419;
    PyObject *tmp_dict_key_420;
    PyObject *tmp_dict_key_421;
    PyObject *tmp_dict_key_422;
    PyObject *tmp_dict_key_423;
    PyObject *tmp_dict_key_424;
    PyObject *tmp_dict_key_425;
    PyObject *tmp_dict_key_426;
    PyObject *tmp_dict_key_427;
    PyObject *tmp_dict_key_428;
    PyObject *tmp_dict_key_429;
    PyObject *tmp_dict_key_430;
    PyObject *tmp_dict_key_431;
    PyObject *tmp_dict_key_432;
    PyObject *tmp_dict_key_433;
    PyObject *tmp_dict_key_434;
    PyObject *tmp_dict_key_435;
    PyObject *tmp_dict_key_436;
    PyObject *tmp_dict_key_437;
    PyObject *tmp_dict_key_438;
    PyObject *tmp_dict_key_439;
    PyObject *tmp_dict_key_440;
    PyObject *tmp_dict_key_441;
    PyObject *tmp_dict_key_442;
    PyObject *tmp_dict_key_443;
    PyObject *tmp_dict_key_444;
    PyObject *tmp_dict_key_445;
    PyObject *tmp_dict_key_446;
    PyObject *tmp_dict_key_447;
    PyObject *tmp_dict_key_448;
    PyObject *tmp_dict_key_449;
    PyObject *tmp_dict_key_450;
    PyObject *tmp_dict_key_451;
    PyObject *tmp_dict_key_452;
    PyObject *tmp_dict_key_453;
    PyObject *tmp_dict_key_454;
    PyObject *tmp_dict_key_455;
    PyObject *tmp_dict_key_456;
    PyObject *tmp_dict_key_457;
    PyObject *tmp_dict_key_458;
    PyObject *tmp_dict_key_459;
    PyObject *tmp_dict_key_460;
    PyObject *tmp_dict_key_461;
    PyObject *tmp_dict_key_462;
    PyObject *tmp_dict_key_463;
    PyObject *tmp_dict_key_464;
    PyObject *tmp_dict_key_465;
    PyObject *tmp_dict_key_466;
    PyObject *tmp_dict_key_467;
    PyObject *tmp_dict_key_468;
    PyObject *tmp_dict_key_469;
    PyObject *tmp_dict_key_470;
    PyObject *tmp_dict_key_471;
    PyObject *tmp_dict_key_472;
    PyObject *tmp_dict_key_473;
    PyObject *tmp_dict_key_474;
    PyObject *tmp_dict_key_475;
    PyObject *tmp_dict_key_476;
    PyObject *tmp_dict_key_477;
    PyObject *tmp_dict_key_478;
    PyObject *tmp_dict_key_479;
    PyObject *tmp_dict_key_480;
    PyObject *tmp_dict_key_481;
    PyObject *tmp_dict_key_482;
    PyObject *tmp_dict_key_483;
    PyObject *tmp_dict_key_484;
    PyObject *tmp_dict_key_485;
    PyObject *tmp_dict_key_486;
    PyObject *tmp_dict_key_487;
    PyObject *tmp_dict_key_488;
    PyObject *tmp_dict_key_489;
    PyObject *tmp_dict_key_490;
    PyObject *tmp_dict_key_491;
    PyObject *tmp_dict_key_492;
    PyObject *tmp_dict_key_493;
    PyObject *tmp_dict_key_494;
    PyObject *tmp_dict_key_495;
    PyObject *tmp_dict_key_496;
    PyObject *tmp_dict_key_497;
    PyObject *tmp_dict_key_498;
    PyObject *tmp_dict_key_499;
    PyObject *tmp_dict_key_500;
    PyObject *tmp_dict_key_501;
    PyObject *tmp_dict_key_502;
    PyObject *tmp_dict_key_503;
    PyObject *tmp_dict_key_504;
    PyObject *tmp_dict_key_505;
    PyObject *tmp_dict_key_506;
    PyObject *tmp_dict_key_507;
    PyObject *tmp_dict_key_508;
    PyObject *tmp_dict_key_509;
    PyObject *tmp_dict_key_510;
    PyObject *tmp_dict_key_511;
    PyObject *tmp_dict_key_512;
    PyObject *tmp_dict_key_513;
    PyObject *tmp_dict_key_514;
    PyObject *tmp_dict_key_515;
    PyObject *tmp_dict_key_516;
    PyObject *tmp_dict_key_517;
    PyObject *tmp_dict_key_518;
    PyObject *tmp_dict_key_519;
    PyObject *tmp_dict_key_520;
    PyObject *tmp_dict_key_521;
    PyObject *tmp_dict_key_522;
    PyObject *tmp_dict_key_523;
    PyObject *tmp_dict_key_524;
    PyObject *tmp_dict_key_525;
    PyObject *tmp_dict_key_526;
    PyObject *tmp_dict_key_527;
    PyObject *tmp_dict_key_528;
    PyObject *tmp_dict_key_529;
    PyObject *tmp_dict_key_530;
    PyObject *tmp_dict_key_531;
    PyObject *tmp_dict_key_532;
    PyObject *tmp_dict_key_533;
    PyObject *tmp_dict_key_534;
    PyObject *tmp_dict_key_535;
    PyObject *tmp_dict_key_536;
    PyObject *tmp_dict_key_537;
    PyObject *tmp_dict_key_538;
    PyObject *tmp_dict_key_539;
    PyObject *tmp_dict_key_540;
    PyObject *tmp_dict_key_541;
    PyObject *tmp_dict_key_542;
    PyObject *tmp_dict_key_543;
    PyObject *tmp_dict_key_544;
    PyObject *tmp_dict_key_545;
    PyObject *tmp_dict_key_546;
    PyObject *tmp_dict_key_547;
    PyObject *tmp_dict_key_548;
    PyObject *tmp_dict_key_549;
    PyObject *tmp_dict_key_550;
    PyObject *tmp_dict_key_551;
    PyObject *tmp_dict_key_552;
    PyObject *tmp_dict_key_553;
    PyObject *tmp_dict_key_554;
    PyObject *tmp_dict_key_555;
    PyObject *tmp_dict_key_556;
    PyObject *tmp_dict_key_557;
    PyObject *tmp_dict_key_558;
    PyObject *tmp_dict_key_559;
    PyObject *tmp_dict_key_560;
    PyObject *tmp_dict_key_561;
    PyObject *tmp_dict_key_562;
    PyObject *tmp_dict_key_563;
    PyObject *tmp_dict_key_564;
    PyObject *tmp_dict_key_565;
    PyObject *tmp_dict_key_566;
    PyObject *tmp_dict_key_567;
    PyObject *tmp_dict_key_568;
    PyObject *tmp_dict_key_569;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_dict_value_10;
    PyObject *tmp_dict_value_11;
    PyObject *tmp_dict_value_12;
    PyObject *tmp_dict_value_13;
    PyObject *tmp_dict_value_14;
    PyObject *tmp_dict_value_15;
    PyObject *tmp_dict_value_16;
    PyObject *tmp_dict_value_17;
    PyObject *tmp_dict_value_18;
    PyObject *tmp_dict_value_19;
    PyObject *tmp_dict_value_20;
    PyObject *tmp_dict_value_21;
    PyObject *tmp_dict_value_22;
    PyObject *tmp_dict_value_23;
    PyObject *tmp_dict_value_24;
    PyObject *tmp_dict_value_25;
    PyObject *tmp_dict_value_26;
    PyObject *tmp_dict_value_27;
    PyObject *tmp_dict_value_28;
    PyObject *tmp_dict_value_29;
    PyObject *tmp_dict_value_30;
    PyObject *tmp_dict_value_31;
    PyObject *tmp_dict_value_32;
    PyObject *tmp_dict_value_33;
    PyObject *tmp_dict_value_34;
    PyObject *tmp_dict_value_35;
    PyObject *tmp_dict_value_36;
    PyObject *tmp_dict_value_37;
    PyObject *tmp_dict_value_38;
    PyObject *tmp_dict_value_39;
    PyObject *tmp_dict_value_40;
    PyObject *tmp_dict_value_41;
    PyObject *tmp_dict_value_42;
    PyObject *tmp_dict_value_43;
    PyObject *tmp_dict_value_44;
    PyObject *tmp_dict_value_45;
    PyObject *tmp_dict_value_46;
    PyObject *tmp_dict_value_47;
    PyObject *tmp_dict_value_48;
    PyObject *tmp_dict_value_49;
    PyObject *tmp_dict_value_50;
    PyObject *tmp_dict_value_51;
    PyObject *tmp_dict_value_52;
    PyObject *tmp_dict_value_53;
    PyObject *tmp_dict_value_54;
    PyObject *tmp_dict_value_55;
    PyObject *tmp_dict_value_56;
    PyObject *tmp_dict_value_57;
    PyObject *tmp_dict_value_58;
    PyObject *tmp_dict_value_59;
    PyObject *tmp_dict_value_60;
    PyObject *tmp_dict_value_61;
    PyObject *tmp_dict_value_62;
    PyObject *tmp_dict_value_63;
    PyObject *tmp_dict_value_64;
    PyObject *tmp_dict_value_65;
    PyObject *tmp_dict_value_66;
    PyObject *tmp_dict_value_67;
    PyObject *tmp_dict_value_68;
    PyObject *tmp_dict_value_69;
    PyObject *tmp_dict_value_70;
    PyObject *tmp_dict_value_71;
    PyObject *tmp_dict_value_72;
    PyObject *tmp_dict_value_73;
    PyObject *tmp_dict_value_74;
    PyObject *tmp_dict_value_75;
    PyObject *tmp_dict_value_76;
    PyObject *tmp_dict_value_77;
    PyObject *tmp_dict_value_78;
    PyObject *tmp_dict_value_79;
    PyObject *tmp_dict_value_80;
    PyObject *tmp_dict_value_81;
    PyObject *tmp_dict_value_82;
    PyObject *tmp_dict_value_83;
    PyObject *tmp_dict_value_84;
    PyObject *tmp_dict_value_85;
    PyObject *tmp_dict_value_86;
    PyObject *tmp_dict_value_87;
    PyObject *tmp_dict_value_88;
    PyObject *tmp_dict_value_89;
    PyObject *tmp_dict_value_90;
    PyObject *tmp_dict_value_91;
    PyObject *tmp_dict_value_92;
    PyObject *tmp_dict_value_93;
    PyObject *tmp_dict_value_94;
    PyObject *tmp_dict_value_95;
    PyObject *tmp_dict_value_96;
    PyObject *tmp_dict_value_97;
    PyObject *tmp_dict_value_98;
    PyObject *tmp_dict_value_99;
    PyObject *tmp_dict_value_100;
    PyObject *tmp_dict_value_101;
    PyObject *tmp_dict_value_102;
    PyObject *tmp_dict_value_103;
    PyObject *tmp_dict_value_104;
    PyObject *tmp_dict_value_105;
    PyObject *tmp_dict_value_106;
    PyObject *tmp_dict_value_107;
    PyObject *tmp_dict_value_108;
    PyObject *tmp_dict_value_109;
    PyObject *tmp_dict_value_110;
    PyObject *tmp_dict_value_111;
    PyObject *tmp_dict_value_112;
    PyObject *tmp_dict_value_113;
    PyObject *tmp_dict_value_114;
    PyObject *tmp_dict_value_115;
    PyObject *tmp_dict_value_116;
    PyObject *tmp_dict_value_117;
    PyObject *tmp_dict_value_118;
    PyObject *tmp_dict_value_119;
    PyObject *tmp_dict_value_120;
    PyObject *tmp_dict_value_121;
    PyObject *tmp_dict_value_122;
    PyObject *tmp_dict_value_123;
    PyObject *tmp_dict_value_124;
    PyObject *tmp_dict_value_125;
    PyObject *tmp_dict_value_126;
    PyObject *tmp_dict_value_127;
    PyObject *tmp_dict_value_128;
    PyObject *tmp_dict_value_129;
    PyObject *tmp_dict_value_130;
    PyObject *tmp_dict_value_131;
    PyObject *tmp_dict_value_132;
    PyObject *tmp_dict_value_133;
    PyObject *tmp_dict_value_134;
    PyObject *tmp_dict_value_135;
    PyObject *tmp_dict_value_136;
    PyObject *tmp_dict_value_137;
    PyObject *tmp_dict_value_138;
    PyObject *tmp_dict_value_139;
    PyObject *tmp_dict_value_140;
    PyObject *tmp_dict_value_141;
    PyObject *tmp_dict_value_142;
    PyObject *tmp_dict_value_143;
    PyObject *tmp_dict_value_144;
    PyObject *tmp_dict_value_145;
    PyObject *tmp_dict_value_146;
    PyObject *tmp_dict_value_147;
    PyObject *tmp_dict_value_148;
    PyObject *tmp_dict_value_149;
    PyObject *tmp_dict_value_150;
    PyObject *tmp_dict_value_151;
    PyObject *tmp_dict_value_152;
    PyObject *tmp_dict_value_153;
    PyObject *tmp_dict_value_154;
    PyObject *tmp_dict_value_155;
    PyObject *tmp_dict_value_156;
    PyObject *tmp_dict_value_157;
    PyObject *tmp_dict_value_158;
    PyObject *tmp_dict_value_159;
    PyObject *tmp_dict_value_160;
    PyObject *tmp_dict_value_161;
    PyObject *tmp_dict_value_162;
    PyObject *tmp_dict_value_163;
    PyObject *tmp_dict_value_164;
    PyObject *tmp_dict_value_165;
    PyObject *tmp_dict_value_166;
    PyObject *tmp_dict_value_167;
    PyObject *tmp_dict_value_168;
    PyObject *tmp_dict_value_169;
    PyObject *tmp_dict_value_170;
    PyObject *tmp_dict_value_171;
    PyObject *tmp_dict_value_172;
    PyObject *tmp_dict_value_173;
    PyObject *tmp_dict_value_174;
    PyObject *tmp_dict_value_175;
    PyObject *tmp_dict_value_176;
    PyObject *tmp_dict_value_177;
    PyObject *tmp_dict_value_178;
    PyObject *tmp_dict_value_179;
    PyObject *tmp_dict_value_180;
    PyObject *tmp_dict_value_181;
    PyObject *tmp_dict_value_182;
    PyObject *tmp_dict_value_183;
    PyObject *tmp_dict_value_184;
    PyObject *tmp_dict_value_185;
    PyObject *tmp_dict_value_186;
    PyObject *tmp_dict_value_187;
    PyObject *tmp_dict_value_188;
    PyObject *tmp_dict_value_189;
    PyObject *tmp_dict_value_190;
    PyObject *tmp_dict_value_191;
    PyObject *tmp_dict_value_192;
    PyObject *tmp_dict_value_193;
    PyObject *tmp_dict_value_194;
    PyObject *tmp_dict_value_195;
    PyObject *tmp_dict_value_196;
    PyObject *tmp_dict_value_197;
    PyObject *tmp_dict_value_198;
    PyObject *tmp_dict_value_199;
    PyObject *tmp_dict_value_200;
    PyObject *tmp_dict_value_201;
    PyObject *tmp_dict_value_202;
    PyObject *tmp_dict_value_203;
    PyObject *tmp_dict_value_204;
    PyObject *tmp_dict_value_205;
    PyObject *tmp_dict_value_206;
    PyObject *tmp_dict_value_207;
    PyObject *tmp_dict_value_208;
    PyObject *tmp_dict_value_209;
    PyObject *tmp_dict_value_210;
    PyObject *tmp_dict_value_211;
    PyObject *tmp_dict_value_212;
    PyObject *tmp_dict_value_213;
    PyObject *tmp_dict_value_214;
    PyObject *tmp_dict_value_215;
    PyObject *tmp_dict_value_216;
    PyObject *tmp_dict_value_217;
    PyObject *tmp_dict_value_218;
    PyObject *tmp_dict_value_219;
    PyObject *tmp_dict_value_220;
    PyObject *tmp_dict_value_221;
    PyObject *tmp_dict_value_222;
    PyObject *tmp_dict_value_223;
    PyObject *tmp_dict_value_224;
    PyObject *tmp_dict_value_225;
    PyObject *tmp_dict_value_226;
    PyObject *tmp_dict_value_227;
    PyObject *tmp_dict_value_228;
    PyObject *tmp_dict_value_229;
    PyObject *tmp_dict_value_230;
    PyObject *tmp_dict_value_231;
    PyObject *tmp_dict_value_232;
    PyObject *tmp_dict_value_233;
    PyObject *tmp_dict_value_234;
    PyObject *tmp_dict_value_235;
    PyObject *tmp_dict_value_236;
    PyObject *tmp_dict_value_237;
    PyObject *tmp_dict_value_238;
    PyObject *tmp_dict_value_239;
    PyObject *tmp_dict_value_240;
    PyObject *tmp_dict_value_241;
    PyObject *tmp_dict_value_242;
    PyObject *tmp_dict_value_243;
    PyObject *tmp_dict_value_244;
    PyObject *tmp_dict_value_245;
    PyObject *tmp_dict_value_246;
    PyObject *tmp_dict_value_247;
    PyObject *tmp_dict_value_248;
    PyObject *tmp_dict_value_249;
    PyObject *tmp_dict_value_250;
    PyObject *tmp_dict_value_251;
    PyObject *tmp_dict_value_252;
    PyObject *tmp_dict_value_253;
    PyObject *tmp_dict_value_254;
    PyObject *tmp_dict_value_255;
    PyObject *tmp_dict_value_256;
    PyObject *tmp_dict_value_257;
    PyObject *tmp_dict_value_258;
    PyObject *tmp_dict_value_259;
    PyObject *tmp_dict_value_260;
    PyObject *tmp_dict_value_261;
    PyObject *tmp_dict_value_262;
    PyObject *tmp_dict_value_263;
    PyObject *tmp_dict_value_264;
    PyObject *tmp_dict_value_265;
    PyObject *tmp_dict_value_266;
    PyObject *tmp_dict_value_267;
    PyObject *tmp_dict_value_268;
    PyObject *tmp_dict_value_269;
    PyObject *tmp_dict_value_270;
    PyObject *tmp_dict_value_271;
    PyObject *tmp_dict_value_272;
    PyObject *tmp_dict_value_273;
    PyObject *tmp_dict_value_274;
    PyObject *tmp_dict_value_275;
    PyObject *tmp_dict_value_276;
    PyObject *tmp_dict_value_277;
    PyObject *tmp_dict_value_278;
    PyObject *tmp_dict_value_279;
    PyObject *tmp_dict_value_280;
    PyObject *tmp_dict_value_281;
    PyObject *tmp_dict_value_282;
    PyObject *tmp_dict_value_283;
    PyObject *tmp_dict_value_284;
    PyObject *tmp_dict_value_285;
    PyObject *tmp_dict_value_286;
    PyObject *tmp_dict_value_287;
    PyObject *tmp_dict_value_288;
    PyObject *tmp_dict_value_289;
    PyObject *tmp_dict_value_290;
    PyObject *tmp_dict_value_291;
    PyObject *tmp_dict_value_292;
    PyObject *tmp_dict_value_293;
    PyObject *tmp_dict_value_294;
    PyObject *tmp_dict_value_295;
    PyObject *tmp_dict_value_296;
    PyObject *tmp_dict_value_297;
    PyObject *tmp_dict_value_298;
    PyObject *tmp_dict_value_299;
    PyObject *tmp_dict_value_300;
    PyObject *tmp_dict_value_301;
    PyObject *tmp_dict_value_302;
    PyObject *tmp_dict_value_303;
    PyObject *tmp_dict_value_304;
    PyObject *tmp_dict_value_305;
    PyObject *tmp_dict_value_306;
    PyObject *tmp_dict_value_307;
    PyObject *tmp_dict_value_308;
    PyObject *tmp_dict_value_309;
    PyObject *tmp_dict_value_310;
    PyObject *tmp_dict_value_311;
    PyObject *tmp_dict_value_312;
    PyObject *tmp_dict_value_313;
    PyObject *tmp_dict_value_314;
    PyObject *tmp_dict_value_315;
    PyObject *tmp_dict_value_316;
    PyObject *tmp_dict_value_317;
    PyObject *tmp_dict_value_318;
    PyObject *tmp_dict_value_319;
    PyObject *tmp_dict_value_320;
    PyObject *tmp_dict_value_321;
    PyObject *tmp_dict_value_322;
    PyObject *tmp_dict_value_323;
    PyObject *tmp_dict_value_324;
    PyObject *tmp_dict_value_325;
    PyObject *tmp_dict_value_326;
    PyObject *tmp_dict_value_327;
    PyObject *tmp_dict_value_328;
    PyObject *tmp_dict_value_329;
    PyObject *tmp_dict_value_330;
    PyObject *tmp_dict_value_331;
    PyObject *tmp_dict_value_332;
    PyObject *tmp_dict_value_333;
    PyObject *tmp_dict_value_334;
    PyObject *tmp_dict_value_335;
    PyObject *tmp_dict_value_336;
    PyObject *tmp_dict_value_337;
    PyObject *tmp_dict_value_338;
    PyObject *tmp_dict_value_339;
    PyObject *tmp_dict_value_340;
    PyObject *tmp_dict_value_341;
    PyObject *tmp_dict_value_342;
    PyObject *tmp_dict_value_343;
    PyObject *tmp_dict_value_344;
    PyObject *tmp_dict_value_345;
    PyObject *tmp_dict_value_346;
    PyObject *tmp_dict_value_347;
    PyObject *tmp_dict_value_348;
    PyObject *tmp_dict_value_349;
    PyObject *tmp_dict_value_350;
    PyObject *tmp_dict_value_351;
    PyObject *tmp_dict_value_352;
    PyObject *tmp_dict_value_353;
    PyObject *tmp_dict_value_354;
    PyObject *tmp_dict_value_355;
    PyObject *tmp_dict_value_356;
    PyObject *tmp_dict_value_357;
    PyObject *tmp_dict_value_358;
    PyObject *tmp_dict_value_359;
    PyObject *tmp_dict_value_360;
    PyObject *tmp_dict_value_361;
    PyObject *tmp_dict_value_362;
    PyObject *tmp_dict_value_363;
    PyObject *tmp_dict_value_364;
    PyObject *tmp_dict_value_365;
    PyObject *tmp_dict_value_366;
    PyObject *tmp_dict_value_367;
    PyObject *tmp_dict_value_368;
    PyObject *tmp_dict_value_369;
    PyObject *tmp_dict_value_370;
    PyObject *tmp_dict_value_371;
    PyObject *tmp_dict_value_372;
    PyObject *tmp_dict_value_373;
    PyObject *tmp_dict_value_374;
    PyObject *tmp_dict_value_375;
    PyObject *tmp_dict_value_376;
    PyObject *tmp_dict_value_377;
    PyObject *tmp_dict_value_378;
    PyObject *tmp_dict_value_379;
    PyObject *tmp_dict_value_380;
    PyObject *tmp_dict_value_381;
    PyObject *tmp_dict_value_382;
    PyObject *tmp_dict_value_383;
    PyObject *tmp_dict_value_384;
    PyObject *tmp_dict_value_385;
    PyObject *tmp_dict_value_386;
    PyObject *tmp_dict_value_387;
    PyObject *tmp_dict_value_388;
    PyObject *tmp_dict_value_389;
    PyObject *tmp_dict_value_390;
    PyObject *tmp_dict_value_391;
    PyObject *tmp_dict_value_392;
    PyObject *tmp_dict_value_393;
    PyObject *tmp_dict_value_394;
    PyObject *tmp_dict_value_395;
    PyObject *tmp_dict_value_396;
    PyObject *tmp_dict_value_397;
    PyObject *tmp_dict_value_398;
    PyObject *tmp_dict_value_399;
    PyObject *tmp_dict_value_400;
    PyObject *tmp_dict_value_401;
    PyObject *tmp_dict_value_402;
    PyObject *tmp_dict_value_403;
    PyObject *tmp_dict_value_404;
    PyObject *tmp_dict_value_405;
    PyObject *tmp_dict_value_406;
    PyObject *tmp_dict_value_407;
    PyObject *tmp_dict_value_408;
    PyObject *tmp_dict_value_409;
    PyObject *tmp_dict_value_410;
    PyObject *tmp_dict_value_411;
    PyObject *tmp_dict_value_412;
    PyObject *tmp_dict_value_413;
    PyObject *tmp_dict_value_414;
    PyObject *tmp_dict_value_415;
    PyObject *tmp_dict_value_416;
    PyObject *tmp_dict_value_417;
    PyObject *tmp_dict_value_418;
    PyObject *tmp_dict_value_419;
    PyObject *tmp_dict_value_420;
    PyObject *tmp_dict_value_421;
    PyObject *tmp_dict_value_422;
    PyObject *tmp_dict_value_423;
    PyObject *tmp_dict_value_424;
    PyObject *tmp_dict_value_425;
    PyObject *tmp_dict_value_426;
    PyObject *tmp_dict_value_427;
    PyObject *tmp_dict_value_428;
    PyObject *tmp_dict_value_429;
    PyObject *tmp_dict_value_430;
    PyObject *tmp_dict_value_431;
    PyObject *tmp_dict_value_432;
    PyObject *tmp_dict_value_433;
    PyObject *tmp_dict_value_434;
    PyObject *tmp_dict_value_435;
    PyObject *tmp_dict_value_436;
    PyObject *tmp_dict_value_437;
    PyObject *tmp_dict_value_438;
    PyObject *tmp_dict_value_439;
    PyObject *tmp_dict_value_440;
    PyObject *tmp_dict_value_441;
    PyObject *tmp_dict_value_442;
    PyObject *tmp_dict_value_443;
    PyObject *tmp_dict_value_444;
    PyObject *tmp_dict_value_445;
    PyObject *tmp_dict_value_446;
    PyObject *tmp_dict_value_447;
    PyObject *tmp_dict_value_448;
    PyObject *tmp_dict_value_449;
    PyObject *tmp_dict_value_450;
    PyObject *tmp_dict_value_451;
    PyObject *tmp_dict_value_452;
    PyObject *tmp_dict_value_453;
    PyObject *tmp_dict_value_454;
    PyObject *tmp_dict_value_455;
    PyObject *tmp_dict_value_456;
    PyObject *tmp_dict_value_457;
    PyObject *tmp_dict_value_458;
    PyObject *tmp_dict_value_459;
    PyObject *tmp_dict_value_460;
    PyObject *tmp_dict_value_461;
    PyObject *tmp_dict_value_462;
    PyObject *tmp_dict_value_463;
    PyObject *tmp_dict_value_464;
    PyObject *tmp_dict_value_465;
    PyObject *tmp_dict_value_466;
    PyObject *tmp_dict_value_467;
    PyObject *tmp_dict_value_468;
    PyObject *tmp_dict_value_469;
    PyObject *tmp_dict_value_470;
    PyObject *tmp_dict_value_471;
    PyObject *tmp_dict_value_472;
    PyObject *tmp_dict_value_473;
    PyObject *tmp_dict_value_474;
    PyObject *tmp_dict_value_475;
    PyObject *tmp_dict_value_476;
    PyObject *tmp_dict_value_477;
    PyObject *tmp_dict_value_478;
    PyObject *tmp_dict_value_479;
    PyObject *tmp_dict_value_480;
    PyObject *tmp_dict_value_481;
    PyObject *tmp_dict_value_482;
    PyObject *tmp_dict_value_483;
    PyObject *tmp_dict_value_484;
    PyObject *tmp_dict_value_485;
    PyObject *tmp_dict_value_486;
    PyObject *tmp_dict_value_487;
    PyObject *tmp_dict_value_488;
    PyObject *tmp_dict_value_489;
    PyObject *tmp_dict_value_490;
    PyObject *tmp_dict_value_491;
    PyObject *tmp_dict_value_492;
    PyObject *tmp_dict_value_493;
    PyObject *tmp_dict_value_494;
    PyObject *tmp_dict_value_495;
    PyObject *tmp_dict_value_496;
    PyObject *tmp_dict_value_497;
    PyObject *tmp_dict_value_498;
    PyObject *tmp_dict_value_499;
    PyObject *tmp_dict_value_500;
    PyObject *tmp_dict_value_501;
    PyObject *tmp_dict_value_502;
    PyObject *tmp_dict_value_503;
    PyObject *tmp_dict_value_504;
    PyObject *tmp_dict_value_505;
    PyObject *tmp_dict_value_506;
    PyObject *tmp_dict_value_507;
    PyObject *tmp_dict_value_508;
    PyObject *tmp_dict_value_509;
    PyObject *tmp_dict_value_510;
    PyObject *tmp_dict_value_511;
    PyObject *tmp_dict_value_512;
    PyObject *tmp_dict_value_513;
    PyObject *tmp_dict_value_514;
    PyObject *tmp_dict_value_515;
    PyObject *tmp_dict_value_516;
    PyObject *tmp_dict_value_517;
    PyObject *tmp_dict_value_518;
    PyObject *tmp_dict_value_519;
    PyObject *tmp_dict_value_520;
    PyObject *tmp_dict_value_521;
    PyObject *tmp_dict_value_522;
    PyObject *tmp_dict_value_523;
    PyObject *tmp_dict_value_524;
    PyObject *tmp_dict_value_525;
    PyObject *tmp_dict_value_526;
    PyObject *tmp_dict_value_527;
    PyObject *tmp_dict_value_528;
    PyObject *tmp_dict_value_529;
    PyObject *tmp_dict_value_530;
    PyObject *tmp_dict_value_531;
    PyObject *tmp_dict_value_532;
    PyObject *tmp_dict_value_533;
    PyObject *tmp_dict_value_534;
    PyObject *tmp_dict_value_535;
    PyObject *tmp_dict_value_536;
    PyObject *tmp_dict_value_537;
    PyObject *tmp_dict_value_538;
    PyObject *tmp_dict_value_539;
    PyObject *tmp_dict_value_540;
    PyObject *tmp_dict_value_541;
    PyObject *tmp_dict_value_542;
    PyObject *tmp_dict_value_543;
    PyObject *tmp_dict_value_544;
    PyObject *tmp_dict_value_545;
    PyObject *tmp_dict_value_546;
    PyObject *tmp_dict_value_547;
    PyObject *tmp_dict_value_548;
    PyObject *tmp_dict_value_549;
    PyObject *tmp_dict_value_550;
    PyObject *tmp_dict_value_551;
    PyObject *tmp_dict_value_552;
    PyObject *tmp_dict_value_553;
    PyObject *tmp_dict_value_554;
    PyObject *tmp_dict_value_555;
    PyObject *tmp_dict_value_556;
    PyObject *tmp_dict_value_557;
    PyObject *tmp_dict_value_558;
    PyObject *tmp_dict_value_559;
    PyObject *tmp_dict_value_560;
    PyObject *tmp_dict_value_561;
    PyObject *tmp_dict_value_562;
    PyObject *tmp_dict_value_563;
    PyObject *tmp_dict_value_564;
    PyObject *tmp_dict_value_565;
    PyObject *tmp_dict_value_566;
    PyObject *tmp_dict_value_567;
    PyObject *tmp_dict_value_568;
    PyObject *tmp_dict_value_569;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_globals_4;
    PyObject *tmp_import_globals_5;
    PyObject *tmp_import_globals_6;
    PyObject *tmp_import_globals_7;
    PyObject *tmp_import_globals_8;
    PyObject *tmp_import_globals_9;
    PyObject *tmp_import_globals_10;
    PyObject *tmp_import_globals_11;
    PyObject *tmp_import_globals_12;
    PyObject *tmp_import_globals_13;
    PyObject *tmp_import_globals_14;
    PyObject *tmp_import_globals_15;
    PyObject *tmp_import_globals_16;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_import_name_from_3;
    PyObject *tmp_import_name_from_4;
    PyObject *tmp_import_name_from_5;
    PyObject *tmp_import_name_from_6;
    PyObject *tmp_import_name_from_7;
    PyObject *tmp_import_name_from_8;
    PyObject *tmp_import_name_from_9;
    PyObject *tmp_import_name_from_10;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_list_element_2;
    PyObject *tmp_list_element_3;
    PyObject *tmp_list_element_4;
    PyObject *tmp_list_element_5;
    PyObject *tmp_list_element_6;
    PyObject *tmp_list_element_7;
    PyObject *tmp_list_element_8;
    PyObject *tmp_list_element_9;
    PyObject *tmp_list_element_10;
    PyObject *tmp_list_element_11;
    PyObject *tmp_list_element_12;
    PyObject *tmp_list_element_13;
    PyObject *tmp_list_element_14;
    PyObject *tmp_list_element_15;
    PyObject *tmp_list_element_16;
    PyObject *tmp_list_element_17;
    PyObject *tmp_list_element_18;
    PyObject *tmp_list_element_19;
    PyObject *tmp_list_element_20;
    PyObject *tmp_list_element_21;
    PyObject *tmp_list_element_22;
    PyObject *tmp_list_element_23;
    PyObject *tmp_list_element_24;
    PyObject *tmp_list_element_25;
    PyObject *tmp_list_element_26;
    PyObject *tmp_list_element_27;
    PyObject *tmp_list_element_28;
    PyObject *tmp_list_element_29;
    PyObject *tmp_next_source_1;
    bool tmp_result;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_star_imported_1;
    PyObject *tmp_star_imported_2;
    int tmp_tried_lineno_1;

    // Module code.
    tmp_assign_source_1 = const_str_digest_9077b83e901daee6c4d4e34357a66262;
    UPDATE_STRING_DICT0( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    tmp_assign_source_2 = const_str_digest_76fe246148a5eb0cccb642576b728a94;
    UPDATE_STRING_DICT0( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    // Frame without reuse.
    PyFrameObject *frame_module = MAKE_FRAME( codeobj_d3b4964f0444715b98dbee738311a005, module_numpy$f2py$rules );

    // Push the new frame as the currently active one, and we should be exlusively
    // owning it.
    pushFrameStack( frame_module );
    assert( Py_REFCNT( frame_module ) == 1 );

#if PYTHON_VERSION >= 340
    frame_module->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 53;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_plain___future__, tmp_import_globals_1, tmp_import_globals_1, const_tuple_b3c114ff65e5229953139969fd8f9f4c_tuple, const_int_0 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 53;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_division );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 53;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_division, tmp_assign_source_3 );
    tmp_import_globals_2 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 53;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_plain___future__, tmp_import_globals_2, tmp_import_globals_2, const_tuple_b3c114ff65e5229953139969fd8f9f4c_tuple, const_int_0 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 53;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_4 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_absolute_import );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 53;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_absolute_import, tmp_assign_source_4 );
    tmp_import_globals_3 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 53;
    tmp_import_name_from_3 = IMPORT_MODULE( const_str_plain___future__, tmp_import_globals_3, tmp_import_globals_3, const_tuple_b3c114ff65e5229953139969fd8f9f4c_tuple, const_int_0 );
    if ( tmp_import_name_from_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 53;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_5 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_print_function );
    Py_DECREF( tmp_import_name_from_3 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 53;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_print_function, tmp_assign_source_5 );
    tmp_assign_source_6 = const_str_digest_a37910e2837bb74a8ac17a725e63197d;
    UPDATE_STRING_DICT0( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain___version__, tmp_assign_source_6 );
    tmp_import_globals_4 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 57;
    tmp_import_name_from_4 = IMPORT_MODULE( const_str_empty, tmp_import_globals_4, tmp_import_globals_4, const_tuple_str_plain___version___tuple, const_int_pos_1 );
    if ( tmp_import_name_from_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 57;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_7 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain___version__ );
    Py_DECREF( tmp_import_name_from_4 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 57;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain___version__, tmp_assign_source_7 );
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain___version__ );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___version__ );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 23186 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 58;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_8 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_version );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 58;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_f2py_version, tmp_assign_source_8 );
    tmp_import_globals_5 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 60;
    tmp_assign_source_9 = IMPORT_MODULE( const_str_plain_pprint, tmp_import_globals_5, tmp_import_globals_5, Py_None, const_int_0 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 60;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_pprint, tmp_assign_source_9 );
    tmp_import_globals_6 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 61;
    tmp_assign_source_10 = IMPORT_MODULE( const_str_plain_sys, tmp_import_globals_6, tmp_import_globals_6, Py_None, const_int_0 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 61;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_sys, tmp_assign_source_10 );
    tmp_import_globals_7 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 62;
    tmp_assign_source_11 = IMPORT_MODULE( const_str_plain_time, tmp_import_globals_7, tmp_import_globals_7, Py_None, const_int_0 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 62;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_time, tmp_assign_source_11 );
    tmp_import_globals_8 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 63;
    tmp_assign_source_12 = IMPORT_MODULE( const_str_plain_copy, tmp_import_globals_8, tmp_import_globals_8, Py_None, const_int_0 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 63;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_copy, tmp_assign_source_12 );
    tmp_import_globals_9 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 65;
    tmp_star_imported_1 = IMPORT_MODULE( const_str_plain_auxfuncs, tmp_import_globals_9, tmp_import_globals_9, const_tuple_str_chr_42_tuple, const_int_pos_1 );
    if ( tmp_star_imported_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 65;
        goto frame_exception_exit_1;
    }
    tmp_result = IMPORT_MODULE_STAR( module_numpy$f2py$rules, true, tmp_star_imported_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_star_imported_1 );

        frame_module->f_lineno = 65;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_star_imported_1 );
    tmp_import_globals_10 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 66;
    tmp_import_name_from_5 = IMPORT_MODULE( const_str_empty, tmp_import_globals_10, tmp_import_globals_10, const_tuple_str_plain_capi_maps_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 66;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_13 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_capi_maps );
    Py_DECREF( tmp_import_name_from_5 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 66;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_capi_maps, tmp_assign_source_13 );
    tmp_import_globals_11 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 67;
    tmp_star_imported_2 = IMPORT_MODULE( const_str_plain_capi_maps, tmp_import_globals_11, tmp_import_globals_11, const_tuple_str_chr_42_tuple, const_int_pos_1 );
    if ( tmp_star_imported_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 67;
        goto frame_exception_exit_1;
    }
    tmp_result = IMPORT_MODULE_STAR( module_numpy$f2py$rules, true, tmp_star_imported_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_star_imported_2 );

        frame_module->f_lineno = 67;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_star_imported_2 );
    tmp_import_globals_12 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 68;
    tmp_import_name_from_6 = IMPORT_MODULE( const_str_empty, tmp_import_globals_12, tmp_import_globals_12, const_tuple_str_plain_cfuncs_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 68;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_14 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_cfuncs );
    Py_DECREF( tmp_import_name_from_6 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 68;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_cfuncs, tmp_assign_source_14 );
    tmp_import_globals_13 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 69;
    tmp_import_name_from_7 = IMPORT_MODULE( const_str_empty, tmp_import_globals_13, tmp_import_globals_13, const_tuple_str_plain_common_rules_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 69;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_15 = IMPORT_NAME( tmp_import_name_from_7, const_str_plain_common_rules );
    Py_DECREF( tmp_import_name_from_7 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 69;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_common_rules, tmp_assign_source_15 );
    tmp_import_globals_14 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 70;
    tmp_import_name_from_8 = IMPORT_MODULE( const_str_empty, tmp_import_globals_14, tmp_import_globals_14, const_tuple_str_plain_use_rules_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 70;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_16 = IMPORT_NAME( tmp_import_name_from_8, const_str_plain_use_rules );
    Py_DECREF( tmp_import_name_from_8 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 70;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_use_rules, tmp_assign_source_16 );
    tmp_import_globals_15 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 71;
    tmp_import_name_from_9 = IMPORT_MODULE( const_str_empty, tmp_import_globals_15, tmp_import_globals_15, const_tuple_str_plain_f90mod_rules_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 71;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_17 = IMPORT_NAME( tmp_import_name_from_9, const_str_plain_f90mod_rules );
    Py_DECREF( tmp_import_name_from_9 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 71;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_f90mod_rules, tmp_assign_source_17 );
    tmp_import_globals_16 = ((PyModuleObject *)module_numpy$f2py$rules)->md_dict;
    frame_module->f_lineno = 72;
    tmp_import_name_from_10 = IMPORT_MODULE( const_str_empty, tmp_import_globals_16, tmp_import_globals_16, const_tuple_str_plain_func2subr_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 72;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_18 = IMPORT_NAME( tmp_import_name_from_10, const_str_plain_func2subr );
    Py_DECREF( tmp_import_name_from_10 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 72;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_func2subr, tmp_assign_source_18 );
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 74;
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_stderr );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 74;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_19 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_write );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 74;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_errmess, tmp_assign_source_19 );
    tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_5 == NULL ))
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 75;
        goto frame_exception_exit_1;
    }

    tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_stdout );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 75;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_20 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_write );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 75;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_outmess, tmp_assign_source_20 );
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_pprint );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_pprint );
    }

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124010 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 76;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_21 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_pprint );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 76;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_show, tmp_assign_source_21 );
    tmp_assign_source_22 = PyDict_New();
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_options, tmp_assign_source_22 );
    tmp_assign_source_23 = PyDict_New();
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_sepdict, tmp_assign_source_23 );
    tmp_iter_arg_1 = const_tuple_cde206c752dab3a50d1c0e1f18afb419_tuple;
    tmp_assign_source_24 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 95;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_24;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_25 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_25 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_module->f_lineno = 81;
            goto try_finally_handler_1;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_25;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_25;
        Py_DECREF( old );
    }
    tmp_assign_source_26 = tmp_for_loop_1__iter_value.object;

    UPDATE_STRING_DICT0( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_k, tmp_assign_source_26 );
    tmp_ass_subvalue_1 = const_str_newline;
    tmp_ass_subscribed_1 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_sepdict );

    if (unlikely( tmp_ass_subscribed_1 == NULL ))
    {
        tmp_ass_subscribed_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sepdict );
    }

    if ( tmp_ass_subscribed_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150753 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 96;
        goto try_finally_handler_1;
    }

    tmp_ass_subscript_1 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_k );

    if (unlikely( tmp_ass_subscript_1 == NULL ))
    {
        tmp_ass_subscript_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_k );
    }

    if ( tmp_ass_subscript_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 19412 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 96;
        goto try_finally_handler_1;
    }

    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 96;
        goto try_finally_handler_1;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 81;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_module->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_assign_source_27 = _PyDict_NewPresized( 4 );
    tmp_binop_left_35 = const_str_digest_ce5b897b8639742629f34ea80efc31ef;
    tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_time );

    if (unlikely( tmp_source_name_7 == NULL ))
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
    }

    if ( tmp_source_name_7 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 45713 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 107;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_asctime );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 107;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_time );

    if (unlikely( tmp_source_name_8 == NULL ))
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
    }

    if ( tmp_source_name_8 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 45713 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 107;
        goto frame_exception_exit_1;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_localtime );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_called_1 );

        frame_module->f_lineno = 107;
        goto frame_exception_exit_1;
    }
    tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_time );

    if (unlikely( tmp_source_name_9 == NULL ))
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
    }

    if ( tmp_source_name_9 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_called_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 45713 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 107;
        goto frame_exception_exit_1;
    }

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_time );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_called_2 );

        frame_module->f_lineno = 107;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 107;
    tmp_call_arg_element_2 = CALL_FUNCTION_NO_ARGS( tmp_called_3 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_call_arg_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_called_2 );

        frame_module->f_lineno = 107;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 107;
    tmp_call_arg_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_2 );
    Py_DECREF( tmp_call_arg_element_2 );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_called_1 );

        frame_module->f_lineno = 107;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 107;
    tmp_binop_right_35 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_binop_right_35 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 107;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_34 = BINARY_OPERATION_ADD( tmp_binop_left_35, tmp_binop_right_35 );
    Py_DECREF( tmp_binop_right_35 );
    if ( tmp_binop_left_34 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 107;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_34 = const_str_digest_56eb8b6c3a2e2b46a9b2615c93c4d45e;
    tmp_binop_left_33 = BINARY_OPERATION_ADD( tmp_binop_left_34, tmp_binop_right_34 );
    Py_DECREF( tmp_binop_left_34 );
    if ( tmp_binop_left_33 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 107;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_33 = const_str_digest_d7ccb205c498b35eef75e47f3fcf28c0;
    tmp_binop_left_32 = BINARY_OPERATION_ADD( tmp_binop_left_33, tmp_binop_right_33 );
    Py_DECREF( tmp_binop_left_33 );
    if ( tmp_binop_left_32 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 108;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_32 = const_str_digest_31a9af9e11e7fa447fb19b15333890bf;
    tmp_binop_left_31 = BINARY_OPERATION_ADD( tmp_binop_left_32, tmp_binop_right_32 );
    Py_DECREF( tmp_binop_left_32 );
    if ( tmp_binop_left_31 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 109;
        goto frame_exception_exit_1;
    }
    tmp_called_4 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_4 == NULL ))
    {
        tmp_called_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_4 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_31 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128890 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 116;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_3 = const_str_digest_6e3f60afbc56076b3a1ad2fd52e5545f;
    frame_module->f_lineno = 116;
    tmp_binop_right_31 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_3 );
    if ( tmp_binop_right_31 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_31 );

        frame_module->f_lineno = 116;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_30 = BINARY_OPERATION_ADD( tmp_binop_left_31, tmp_binop_right_31 );
    Py_DECREF( tmp_binop_left_31 );
    Py_DECREF( tmp_binop_right_31 );
    if ( tmp_binop_left_30 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 116;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_30 = const_str_digest_007d50f5babd3a75f4137e740257a41e;
    tmp_binop_left_29 = BINARY_OPERATION_ADD( tmp_binop_left_30, tmp_binop_right_30 );
    Py_DECREF( tmp_binop_left_30 );
    if ( tmp_binop_left_29 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 116;
        goto frame_exception_exit_1;
    }
    tmp_called_5 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_5 == NULL ))
    {
        tmp_called_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_5 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_29 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128890 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 120;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_4 = const_str_digest_bbd898cba8e091026a41c30005eabf32;
    frame_module->f_lineno = 120;
    tmp_binop_right_29 = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_4 );
    if ( tmp_binop_right_29 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_29 );

        frame_module->f_lineno = 120;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_28 = BINARY_OPERATION_ADD( tmp_binop_left_29, tmp_binop_right_29 );
    Py_DECREF( tmp_binop_left_29 );
    Py_DECREF( tmp_binop_right_29 );
    if ( tmp_binop_left_28 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 120;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_28 = const_str_digest_9751ba3cd639e8b26904b98f438feabb;
    tmp_binop_left_27 = BINARY_OPERATION_ADD( tmp_binop_left_28, tmp_binop_right_28 );
    Py_DECREF( tmp_binop_left_28 );
    if ( tmp_binop_left_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 120;
        goto frame_exception_exit_1;
    }
    tmp_called_6 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_6 == NULL ))
    {
        tmp_called_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_6 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_27 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128890 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 124;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_5 = const_str_digest_d1797c16915d5942896329250beda9a0;
    frame_module->f_lineno = 124;
    tmp_binop_right_27 = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_5 );
    if ( tmp_binop_right_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_27 );

        frame_module->f_lineno = 124;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_26 = BINARY_OPERATION_ADD( tmp_binop_left_27, tmp_binop_right_27 );
    Py_DECREF( tmp_binop_left_27 );
    Py_DECREF( tmp_binop_right_27 );
    if ( tmp_binop_left_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 124;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_26 = const_str_digest_6051a16e4b8002678b6d93e2ac79406a;
    tmp_binop_left_25 = BINARY_OPERATION_ADD( tmp_binop_left_26, tmp_binop_right_26 );
    Py_DECREF( tmp_binop_left_26 );
    if ( tmp_binop_left_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 124;
        goto frame_exception_exit_1;
    }
    tmp_called_7 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_7 == NULL ))
    {
        tmp_called_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_7 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_25 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128890 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 127;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_6 = const_str_digest_8ab69059fbe9fef0b0ad50f2b948f8ee;
    frame_module->f_lineno = 127;
    tmp_binop_right_25 = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_6 );
    if ( tmp_binop_right_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_25 );

        frame_module->f_lineno = 127;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_24 = BINARY_OPERATION_ADD( tmp_binop_left_25, tmp_binop_right_25 );
    Py_DECREF( tmp_binop_left_25 );
    Py_DECREF( tmp_binop_right_25 );
    if ( tmp_binop_left_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 127;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_24 = const_str_digest_9848ea2f585329928c28906ca7106439;
    tmp_binop_left_23 = BINARY_OPERATION_ADD( tmp_binop_left_24, tmp_binop_right_24 );
    Py_DECREF( tmp_binop_left_24 );
    if ( tmp_binop_left_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 127;
        goto frame_exception_exit_1;
    }
    tmp_called_8 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_8 == NULL ))
    {
        tmp_called_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_8 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_23 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128890 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 130;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_7 = const_str_digest_55f1ce80e69a2658f507e145643c067b;
    frame_module->f_lineno = 130;
    tmp_binop_right_23 = CALL_FUNCTION_WITH_ARGS1( tmp_called_8, tmp_call_arg_element_7 );
    if ( tmp_binop_right_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_23 );

        frame_module->f_lineno = 130;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_22 = BINARY_OPERATION_ADD( tmp_binop_left_23, tmp_binop_right_23 );
    Py_DECREF( tmp_binop_left_23 );
    Py_DECREF( tmp_binop_right_23 );
    if ( tmp_binop_left_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 130;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_22 = const_str_digest_5dd2ddd3c8c2121e0d34a95bfef37e1e;
    tmp_binop_left_21 = BINARY_OPERATION_ADD( tmp_binop_left_22, tmp_binop_right_22 );
    Py_DECREF( tmp_binop_left_22 );
    if ( tmp_binop_left_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 130;
        goto frame_exception_exit_1;
    }
    tmp_called_9 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_9 == NULL ))
    {
        tmp_called_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_9 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_21 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128890 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 133;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_8 = const_str_digest_b1a73bd199a3381dd99aa189b635c9d2;
    frame_module->f_lineno = 133;
    tmp_binop_right_21 = CALL_FUNCTION_WITH_ARGS1( tmp_called_9, tmp_call_arg_element_8 );
    if ( tmp_binop_right_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_21 );

        frame_module->f_lineno = 133;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_20 = BINARY_OPERATION_ADD( tmp_binop_left_21, tmp_binop_right_21 );
    Py_DECREF( tmp_binop_left_21 );
    Py_DECREF( tmp_binop_right_21 );
    if ( tmp_binop_left_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 133;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_20 = const_str_digest_b8743901784613aeb6cba18f9454164f;
    tmp_binop_left_19 = BINARY_OPERATION_ADD( tmp_binop_left_20, tmp_binop_right_20 );
    Py_DECREF( tmp_binop_left_20 );
    if ( tmp_binop_left_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 133;
        goto frame_exception_exit_1;
    }
    tmp_called_10 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_10 == NULL ))
    {
        tmp_called_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_10 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128890 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 136;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_9 = const_str_digest_5a3b19794c360cfa1f3fb761f0170bf4;
    frame_module->f_lineno = 136;
    tmp_binop_right_19 = CALL_FUNCTION_WITH_ARGS1( tmp_called_10, tmp_call_arg_element_9 );
    if ( tmp_binop_right_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_19 );

        frame_module->f_lineno = 136;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_18 = BINARY_OPERATION_ADD( tmp_binop_left_19, tmp_binop_right_19 );
    Py_DECREF( tmp_binop_left_19 );
    Py_DECREF( tmp_binop_right_19 );
    if ( tmp_binop_left_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 136;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_18 = const_str_digest_fc4edadf7639afc609ef0411b3949729;
    tmp_binop_left_17 = BINARY_OPERATION_ADD( tmp_binop_left_18, tmp_binop_right_18 );
    Py_DECREF( tmp_binop_left_18 );
    if ( tmp_binop_left_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 136;
        goto frame_exception_exit_1;
    }
    tmp_called_11 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_11 == NULL ))
    {
        tmp_called_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_11 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_17 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128890 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 139;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_10 = const_str_digest_a7de58b21f8d89408e6f6bc0054e4d96;
    frame_module->f_lineno = 139;
    tmp_binop_right_17 = CALL_FUNCTION_WITH_ARGS1( tmp_called_11, tmp_call_arg_element_10 );
    if ( tmp_binop_right_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_17 );

        frame_module->f_lineno = 139;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_16 = BINARY_OPERATION_ADD( tmp_binop_left_17, tmp_binop_right_17 );
    Py_DECREF( tmp_binop_left_17 );
    Py_DECREF( tmp_binop_right_17 );
    if ( tmp_binop_left_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 139;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_16 = const_str_digest_16d4ea9ba4d55fcaab93d0516b4d9157;
    tmp_binop_left_15 = BINARY_OPERATION_ADD( tmp_binop_left_16, tmp_binop_right_16 );
    Py_DECREF( tmp_binop_left_16 );
    if ( tmp_binop_left_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 139;
        goto frame_exception_exit_1;
    }
    tmp_called_12 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_12 == NULL ))
    {
        tmp_called_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_12 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128890 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 145;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_11 = const_str_digest_b454ce2d9dc0e1e729d4fe26cd68b667;
    frame_module->f_lineno = 145;
    tmp_binop_right_15 = CALL_FUNCTION_WITH_ARGS1( tmp_called_12, tmp_call_arg_element_11 );
    if ( tmp_binop_right_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_15 );

        frame_module->f_lineno = 145;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_14 = BINARY_OPERATION_ADD( tmp_binop_left_15, tmp_binop_right_15 );
    Py_DECREF( tmp_binop_left_15 );
    Py_DECREF( tmp_binop_right_15 );
    if ( tmp_binop_left_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 145;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_14 = const_str_digest_dc00e62d6cadf7b075734a2e4733966e;
    tmp_binop_left_13 = BINARY_OPERATION_ADD( tmp_binop_left_14, tmp_binop_right_14 );
    Py_DECREF( tmp_binop_left_14 );
    if ( tmp_binop_left_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 145;
        goto frame_exception_exit_1;
    }
    tmp_called_13 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_13 == NULL ))
    {
        tmp_called_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_13 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_13 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128890 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 148;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_12 = const_str_digest_0e6d8ecfca61c030ce40551480a7c4c8;
    frame_module->f_lineno = 148;
    tmp_binop_right_13 = CALL_FUNCTION_WITH_ARGS1( tmp_called_13, tmp_call_arg_element_12 );
    if ( tmp_binop_right_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_13 );

        frame_module->f_lineno = 148;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_12 = BINARY_OPERATION_ADD( tmp_binop_left_13, tmp_binop_right_13 );
    Py_DECREF( tmp_binop_left_13 );
    Py_DECREF( tmp_binop_right_13 );
    if ( tmp_binop_left_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 148;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_12 = const_str_digest_7aedd59139d051efeaded43f5468c2c5;
    tmp_binop_left_11 = BINARY_OPERATION_ADD( tmp_binop_left_12, tmp_binop_right_12 );
    Py_DECREF( tmp_binop_left_12 );
    if ( tmp_binop_left_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 148;
        goto frame_exception_exit_1;
    }
    tmp_called_14 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_14 == NULL ))
    {
        tmp_called_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_14 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128890 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 151;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_13 = const_str_digest_b6761a339d072eed29792fd342025a92;
    frame_module->f_lineno = 151;
    tmp_binop_right_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_14, tmp_call_arg_element_13 );
    if ( tmp_binop_right_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_11 );

        frame_module->f_lineno = 151;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_10 = BINARY_OPERATION_ADD( tmp_binop_left_11, tmp_binop_right_11 );
    Py_DECREF( tmp_binop_left_11 );
    Py_DECREF( tmp_binop_right_11 );
    if ( tmp_binop_left_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 151;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_10 = const_str_digest_dc7e2d2d5f013f1151ce74d50a33f797;
    tmp_binop_left_9 = BINARY_OPERATION_ADD( tmp_binop_left_10, tmp_binop_right_10 );
    Py_DECREF( tmp_binop_left_10 );
    if ( tmp_binop_left_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 151;
        goto frame_exception_exit_1;
    }
    tmp_called_15 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_15 == NULL ))
    {
        tmp_called_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_15 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128890 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 154;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_14 = const_str_digest_1678f341d6d4b9988981a9652fd0aaf7;
    frame_module->f_lineno = 154;
    tmp_binop_right_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_15, tmp_call_arg_element_14 );
    if ( tmp_binop_right_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_9 );

        frame_module->f_lineno = 154;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_8 = BINARY_OPERATION_ADD( tmp_binop_left_9, tmp_binop_right_9 );
    Py_DECREF( tmp_binop_left_9 );
    Py_DECREF( tmp_binop_right_9 );
    if ( tmp_binop_left_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 154;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_8 = const_str_digest_343d31d31f56cdef8fe89aa79cee366a;
    tmp_binop_left_7 = BINARY_OPERATION_ADD( tmp_binop_left_8, tmp_binop_right_8 );
    Py_DECREF( tmp_binop_left_8 );
    if ( tmp_binop_left_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 154;
        goto frame_exception_exit_1;
    }
    tmp_called_16 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_16 == NULL ))
    {
        tmp_called_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_16 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128890 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 157;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_15 = const_str_digest_ad481cb364b37bd937f33b4d475ca5d6;
    frame_module->f_lineno = 157;
    tmp_binop_right_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_16, tmp_call_arg_element_15 );
    if ( tmp_binop_right_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_7 );

        frame_module->f_lineno = 157;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_6 = BINARY_OPERATION_ADD( tmp_binop_left_7, tmp_binop_right_7 );
    Py_DECREF( tmp_binop_left_7 );
    Py_DECREF( tmp_binop_right_7 );
    if ( tmp_binop_left_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 157;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_6 = const_str_digest_e1c06d85ae7b8b032bef47e42e4c08f9;
    tmp_binop_left_5 = BINARY_OPERATION_ADD( tmp_binop_left_6, tmp_binop_right_6 );
    Py_DECREF( tmp_binop_left_6 );
    if ( tmp_binop_left_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 157;
        goto frame_exception_exit_1;
    }
    tmp_called_17 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_17 == NULL ))
    {
        tmp_called_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_17 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128890 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 159;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_16 = const_str_digest_0e629208d1577c2a84c6eb9e890eff33;
    frame_module->f_lineno = 159;
    tmp_binop_right_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_17, tmp_call_arg_element_16 );
    if ( tmp_binop_right_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_5 );

        frame_module->f_lineno = 159;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_4 = BINARY_OPERATION_ADD( tmp_binop_left_5, tmp_binop_right_5 );
    Py_DECREF( tmp_binop_left_5 );
    Py_DECREF( tmp_binop_right_5 );
    if ( tmp_binop_left_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 159;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_4 = const_str_digest_d193a08c2f34203a6dece0610a94cbce;
    tmp_binop_left_3 = BINARY_OPERATION_ADD( tmp_binop_left_4, tmp_binop_right_4 );
    Py_DECREF( tmp_binop_left_4 );
    if ( tmp_binop_left_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 159;
        goto frame_exception_exit_1;
    }
    tmp_called_18 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_gentitle );

    if (unlikely( tmp_called_18 == NULL ))
    {
        tmp_called_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gentitle );
    }

    if ( tmp_called_18 == NULL )
    {
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128890 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 162;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_17 = const_str_digest_4aa6b2c8be599f4ff600f479e1d083f8;
    frame_module->f_lineno = 162;
    tmp_binop_right_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_18, tmp_call_arg_element_17 );
    if ( tmp_binop_right_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );
        Py_DECREF( tmp_binop_left_3 );

        frame_module->f_lineno = 162;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_2 = BINARY_OPERATION_ADD( tmp_binop_left_3, tmp_binop_right_3 );
    Py_DECREF( tmp_binop_left_3 );
    Py_DECREF( tmp_binop_right_3 );
    if ( tmp_binop_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 162;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_2 = const_str_digest_a97f071f0008b119291a75be0a54f0db;
    tmp_binop_left_1 = BINARY_OPERATION_ADD( tmp_binop_left_2, tmp_binop_right_2 );
    Py_DECREF( tmp_binop_left_2 );
    if ( tmp_binop_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 162;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_1 = const_str_digest_2722011c07957ec4178692a6adc697b7;
    tmp_dict_value_1 = BINARY_OPERATION_ADD( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_left_1 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 207;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_modulebody;
    PyDict_SetItem( tmp_assign_source_27, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    tmp_dict_value_2 = PyDict_Copy( const_dict_f901ef362e29b410a7de5c49b0849102 );
    tmp_dict_key_2 = const_str_plain_separatorsfor;
    PyDict_SetItem( tmp_assign_source_27, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    tmp_dict_value_3 = LIST_COPY( const_list_63cf9afba8d0564dfc4c1155a17b0c8c_list );
    tmp_dict_key_3 = const_str_plain_latexdoc;
    PyDict_SetItem( tmp_assign_source_27, tmp_dict_key_3, tmp_dict_value_3 );
    Py_DECREF( tmp_dict_value_3 );
    tmp_dict_value_4 = LIST_COPY( const_list_32f32ffbbd5d0469a259f67cd7bedf23_list );
    tmp_dict_key_4 = const_str_plain_restdoc;
    PyDict_SetItem( tmp_assign_source_27, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_module_rules, tmp_assign_source_27 );
    tmp_assign_source_28 = PyList_New( 1 );
    tmp_list_element_1 = _PyDict_NewPresized( 10 );
    tmp_dict_value_5 = const_str_digest_0c93bbaa020061df40a3e0e1970c67b3;
    tmp_dict_key_5 = const_str_plain_body;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_5, tmp_dict_value_5 );
    tmp_dict_value_6 = const_str_digest_d487beb1c5e6713bce7f604f4ca8cb09;
    tmp_dict_key_6 = const_str_plain_method;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_6, tmp_dict_value_6 );
    tmp_dict_value_7 = const_str_digest_d053f48b89f24f879aa2f2f4e56eadf8;
    tmp_dict_key_7 = const_str_plain_externroutines;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_7, tmp_dict_value_7 );
    tmp_dict_value_8 = const_str_digest_bd64994aa1bf405da9e180c5248fed37;
    tmp_dict_key_8 = const_str_plain_routine_defs;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_8, tmp_dict_value_8 );
    tmp_dict_value_9 = const_str_digest_38b4dc4c4264c1437622ad072b57f931;
    tmp_dict_key_9 = const_str_plain_initf90modhooks;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_9, tmp_dict_value_9 );
    tmp_dict_value_10 = const_str_digest_9fd5fa304496311ce860090862daff60;
    tmp_dict_key_10 = const_str_plain_initf2pywraphooks;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_10, tmp_dict_value_10 );
    tmp_dict_value_11 = const_str_digest_88eaf6510bd57833178be952c2a2d74e;
    tmp_dict_key_11 = const_str_plain_initcommonhooks;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_11, tmp_dict_value_11 );
    tmp_dict_value_12 = const_str_empty;
    tmp_dict_key_12 = const_str_plain_latexdoc;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_12, tmp_dict_value_12 );
    tmp_dict_value_13 = const_str_empty;
    tmp_dict_key_13 = const_str_plain_restdoc;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_13, tmp_dict_value_13 );
    tmp_dict_value_14 = _PyDict_NewPresized( 2 );
    tmp_dict_value_15 = const_str_digest_eeebd0c9ae3aeb9122106e125f5bce40;
    tmp_dict_key_15 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasnote );

    if (unlikely( tmp_dict_key_15 == NULL ))
    {
        tmp_dict_key_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasnote );
    }

    if ( tmp_dict_key_15 == NULL )
    {
        Py_DECREF( tmp_assign_source_28 );
        Py_DECREF( tmp_list_element_1 );
        Py_DECREF( tmp_dict_value_14 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125485 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 255;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_14, tmp_dict_key_15, tmp_dict_value_15 );
    tmp_dict_value_16 = const_str_empty;
    tmp_called_19 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_19 == NULL ))
    {
        tmp_called_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_19 == NULL )
    {
        Py_DECREF( tmp_assign_source_28 );
        Py_DECREF( tmp_list_element_1 );
        Py_DECREF( tmp_dict_value_14 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 255;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_18 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasnote );

    if (unlikely( tmp_call_arg_element_18 == NULL ))
    {
        tmp_call_arg_element_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasnote );
    }

    if ( tmp_call_arg_element_18 == NULL )
    {
        Py_DECREF( tmp_assign_source_28 );
        Py_DECREF( tmp_list_element_1 );
        Py_DECREF( tmp_dict_value_14 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125485 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 255;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 255;
    tmp_dict_key_16 = CALL_FUNCTION_WITH_ARGS1( tmp_called_19, tmp_call_arg_element_18 );
    if ( tmp_dict_key_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_28 );
        Py_DECREF( tmp_list_element_1 );
        Py_DECREF( tmp_dict_value_14 );

        frame_module->f_lineno = 255;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_14, tmp_dict_key_16, tmp_dict_value_16 );
    Py_DECREF( tmp_dict_key_16 );
    tmp_dict_key_14 = const_str_plain_modnote;
    PyDict_SetItem( tmp_list_element_1, tmp_dict_key_14, tmp_dict_value_14 );
    Py_DECREF( tmp_dict_value_14 );
    PyList_SET_ITEM( tmp_assign_source_28, 0, tmp_list_element_1 );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_defmod_rules, tmp_assign_source_28 );
    tmp_assign_source_29 = _PyDict_NewPresized( 12 );
    tmp_dict_value_17 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_sepdict );

    if (unlikely( tmp_dict_value_17 == NULL ))
    {
        tmp_dict_value_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sepdict );
    }

    if ( tmp_dict_value_17 == NULL )
    {
        Py_DECREF( tmp_assign_source_29 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150753 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 260;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_17 = const_str_plain_separatorsfor;
    PyDict_SetItem( tmp_assign_source_29, tmp_dict_key_17, tmp_dict_value_17 );
    tmp_dict_value_18 = const_str_digest_ea53ee9a311971559ec8711c5fb4be91;
    tmp_dict_key_18 = const_str_plain_body;
    PyDict_SetItem( tmp_assign_source_29, tmp_dict_key_18, tmp_dict_value_18 );
    tmp_dict_value_19 = const_str_digest_86b690e0ba1f63fd48e435095aef1119;
    tmp_dict_key_19 = const_str_plain_routine_defs;
    PyDict_SetItem( tmp_assign_source_29, tmp_dict_key_19, tmp_dict_value_19 );
    tmp_dict_value_20 = const_str_digest_26528d4a51309a8f8ddb2c87bfb4d547;
    tmp_dict_key_20 = const_str_plain_initf2pywraphooks;
    PyDict_SetItem( tmp_assign_source_29, tmp_dict_key_20, tmp_dict_value_20 );
    tmp_dict_value_21 = const_str_digest_365fbbecf5f6b6e5e9fb735849d785c0;
    tmp_dict_key_21 = const_str_plain_externroutines;
    PyDict_SetItem( tmp_assign_source_29, tmp_dict_key_21, tmp_dict_value_21 );
    tmp_dict_value_22 = const_str_digest_ee729f5c9a3c88dd8861517adea99433;
    tmp_dict_key_22 = const_str_plain_doc;
    PyDict_SetItem( tmp_assign_source_29, tmp_dict_key_22, tmp_dict_value_22 );
    tmp_dict_value_23 = const_str_digest_ed5b9d330fed7db100d8d2e379138830;
    tmp_dict_key_23 = const_str_plain_docshort;
    PyDict_SetItem( tmp_assign_source_29, tmp_dict_key_23, tmp_dict_value_23 );
    tmp_dict_value_24 = const_str_digest_39eef5677102f3a55b588def25963616;
    tmp_dict_key_24 = const_str_plain_docs;
    PyDict_SetItem( tmp_assign_source_29, tmp_dict_key_24, tmp_dict_value_24 );
    tmp_dict_value_25 = LIST_COPY( const_list_0725c8ade74f8f28b621ba88c880b6bd_list );
    tmp_dict_key_25 = const_str_plain_need;
    PyDict_SetItem( tmp_assign_source_29, tmp_dict_key_25, tmp_dict_value_25 );
    Py_DECREF( tmp_dict_value_25 );
    tmp_dict_value_26 = _PyDict_NewPresized( 1 );
    tmp_dict_value_27 = const_str_digest_d5bee58dc1094b8a3f313601fcb2d9ae;
    tmp_dict_key_27 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_27 == NULL ))
    {
        tmp_dict_key_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_27 == NULL )
    {
        Py_DECREF( tmp_assign_source_29 );
        Py_DECREF( tmp_dict_value_26 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 324;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_26, tmp_dict_key_27, tmp_dict_value_27 );
    tmp_dict_key_26 = const_str_plain_cppmacros;
    PyDict_SetItem( tmp_assign_source_29, tmp_dict_key_26, tmp_dict_value_26 );
    Py_DECREF( tmp_dict_value_26 );
    tmp_dict_value_28 = LIST_COPY( const_list_d9758b2de662a4320da70ff340579452_list );
    tmp_dict_key_28 = const_str_plain_latexdoc;
    PyDict_SetItem( tmp_assign_source_29, tmp_dict_key_28, tmp_dict_value_28 );
    Py_DECREF( tmp_dict_value_28 );
    tmp_dict_value_29 = LIST_COPY( const_list_str_digest_f52b7060aab9a16195083441b23e029f_list );
    tmp_dict_key_29 = const_str_plain_restdoc;
    PyDict_SetItem( tmp_assign_source_29, tmp_dict_key_29, tmp_dict_value_29 );
    Py_DECREF( tmp_dict_value_29 );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_routine_rules, tmp_assign_source_29 );
    tmp_assign_source_30 = PyList_New( 10 );
    tmp_list_element_2 = _PyDict_NewPresized( 47 );
    tmp_dict_value_30 = PyDict_Copy( const_dict_6c662d5dfca8638087abab46e2002cca );
    tmp_dict_key_30 = const_str_plain_separatorsfor;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_30, tmp_dict_value_30 );
    Py_DECREF( tmp_dict_value_30 );
    tmp_dict_value_31 = const_str_empty;
    tmp_dict_key_31 = const_str_plain_kwlist;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_31, tmp_dict_value_31 );
    tmp_dict_value_32 = const_str_empty;
    tmp_dict_key_32 = const_str_plain_kwlistopt;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_32, tmp_dict_value_32 );
    tmp_dict_value_33 = const_str_empty;
    tmp_dict_key_33 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_33, tmp_dict_value_33 );
    tmp_dict_value_34 = const_str_empty;
    tmp_dict_key_34 = const_str_plain_callfortranappend;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_34, tmp_dict_value_34 );
    tmp_dict_value_35 = const_str_empty;
    tmp_dict_key_35 = const_str_plain_docsign;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_35, tmp_dict_value_35 );
    tmp_dict_value_36 = const_str_empty;
    tmp_dict_key_36 = const_str_plain_docsignopt;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_36, tmp_dict_value_36 );
    tmp_dict_value_37 = const_str_digest_40515d2f72587c8ab3dde947df85ba29;
    tmp_dict_key_37 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_37, tmp_dict_value_37 );
    tmp_dict_value_38 = const_str_digest_b3f6b0dfc1e5717ba7333debe235669f;
    tmp_dict_key_38 = const_str_plain_freemem;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_38, tmp_dict_value_38 );
    tmp_dict_value_39 = const_str_empty;
    tmp_dict_key_39 = const_str_plain_docsignshort;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_39, tmp_dict_value_39 );
    tmp_dict_value_40 = const_str_empty;
    tmp_dict_key_40 = const_str_plain_docsignoptshort;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_40, tmp_dict_value_40 );
    tmp_dict_value_41 = const_str_empty;
    tmp_dict_key_41 = const_str_plain_docstrsigns;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_41, tmp_dict_value_41 );
    tmp_dict_value_42 = const_str_empty;
    tmp_dict_key_42 = const_str_plain_latexdocstrsigns;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_42, tmp_dict_value_42 );
    tmp_dict_value_43 = const_str_digest_a865c075859ce91a3bff8c53a3bf5b87;
    tmp_dict_key_43 = const_str_plain_docstrreq;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_43, tmp_dict_value_43 );
    tmp_dict_value_44 = const_str_digest_ac9267666430a3349fd1e73d1f6de0cf;
    tmp_dict_key_44 = const_str_plain_docstropt;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_44, tmp_dict_value_44 );
    tmp_dict_value_45 = const_str_digest_19c7030524451d92c931f37fca9681ea;
    tmp_dict_key_45 = const_str_plain_docstrout;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_45, tmp_dict_value_45 );
    tmp_dict_value_46 = const_str_digest_7cae831092e5e81c73cd70d0f405b790;
    tmp_dict_key_46 = const_str_plain_docstrcbs;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_46, tmp_dict_value_46 );
    tmp_dict_value_47 = const_str_digest_b6844caa183c5fab60a573048a09c0ad;
    tmp_dict_key_47 = const_str_plain_latexdocstrreq;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_47, tmp_dict_value_47 );
    tmp_dict_value_48 = const_str_digest_317310e006d319ad28824cb9258c4565;
    tmp_dict_key_48 = const_str_plain_latexdocstropt;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_48, tmp_dict_value_48 );
    tmp_dict_value_49 = const_str_digest_6e0991fa019a9e09495ce3818d3272df;
    tmp_dict_key_49 = const_str_plain_latexdocstrout;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_49, tmp_dict_value_49 );
    tmp_dict_value_50 = const_str_digest_a8dd00e8789d337653fd72b5c50207f2;
    tmp_dict_key_50 = const_str_plain_latexdocstrcbs;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_50, tmp_dict_value_50 );
    tmp_dict_value_51 = const_str_empty;
    tmp_dict_key_51 = const_str_plain_args_capi;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_51, tmp_dict_value_51 );
    tmp_dict_value_52 = const_str_empty;
    tmp_dict_key_52 = const_str_plain_keys_capi;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_52, tmp_dict_value_52 );
    tmp_dict_value_53 = const_str_empty;
    tmp_dict_key_53 = const_str_plain_functype;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_53, tmp_dict_value_53 );
    tmp_dict_value_54 = const_str_digest_81dd5881d0e387c3fbe39fef2c0ad42a;
    tmp_dict_key_54 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_54, tmp_dict_value_54 );
    tmp_dict_value_55 = LIST_COPY( const_list_str_digest_6f20bfaa2efa212f61a92cbf6b7f4bf6_list );
    tmp_dict_key_55 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_55, tmp_dict_value_55 );
    Py_DECREF( tmp_dict_value_55 );
    tmp_dict_value_56 = const_str_digest_f799e499bbf79ca500ba3d987fa42361;
    tmp_dict_key_56 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_56, tmp_dict_value_56 );
    tmp_dict_value_57 = LIST_COPY( const_list_str_digest_e4525de050bb139a277c0806fa6a7e6d_list );
    tmp_dict_key_57 = const_str_plain_closepyobjfrom;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_57, tmp_dict_value_57 );
    Py_DECREF( tmp_dict_value_57 );
    tmp_dict_value_58 = const_str_digest_42e29578af24ea901b92843c6452c69d;
    tmp_dict_key_58 = const_str_plain_topyarr;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_58, tmp_dict_value_58 );
    tmp_dict_value_59 = const_str_digest_d35f413d90f87685cd0ca3d921172de1;
    tmp_dict_key_59 = const_str_plain_routdebugleave;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_59, tmp_dict_value_59 );
    tmp_dict_value_60 = const_str_digest_9553403600853c58bf2171dfdb175fd6;
    tmp_dict_key_60 = const_str_plain_routdebugenter;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_60, tmp_dict_value_60 );
    tmp_dict_value_61 = const_str_digest_f9e489921e325b2dda9adf3026842ef7;
    tmp_dict_key_61 = const_str_plain_routdebugfailure;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_61, tmp_dict_value_61 );
    tmp_dict_value_62 = const_str_digest_df5c6ba92426bdb1aade8d8a0f581562;
    tmp_dict_key_62 = const_str_plain_callfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_62, tmp_dict_value_62 );
    tmp_dict_value_63 = const_str_empty;
    tmp_dict_key_63 = const_str_plain_argformat;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_63, tmp_dict_value_63 );
    tmp_dict_value_64 = const_str_empty;
    tmp_dict_key_64 = const_str_plain_keyformat;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_64, tmp_dict_value_64 );
    tmp_dict_value_65 = const_str_empty;
    tmp_dict_key_65 = const_str_plain_need_cfuncs;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_65, tmp_dict_value_65 );
    tmp_dict_value_66 = const_str_empty;
    tmp_dict_key_66 = const_str_plain_docreturn;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_66, tmp_dict_value_66 );
    tmp_dict_value_67 = const_str_empty;
    tmp_dict_key_67 = const_str_plain_return;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_67, tmp_dict_value_67 );
    tmp_dict_value_68 = const_str_empty;
    tmp_dict_key_68 = const_str_plain_returnformat;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_68, tmp_dict_value_68 );
    tmp_dict_value_69 = const_str_empty;
    tmp_dict_key_69 = const_str_plain_rformat;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_69, tmp_dict_value_69 );
    tmp_dict_value_70 = const_str_empty;
    tmp_dict_key_70 = const_str_plain_kwlistxa;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_70, tmp_dict_value_70 );
    tmp_dict_value_71 = const_str_empty;
    tmp_dict_key_71 = const_str_plain_keys_xa;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_71, tmp_dict_value_71 );
    tmp_dict_value_72 = const_str_empty;
    tmp_dict_key_72 = const_str_plain_xaformat;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_72, tmp_dict_value_72 );
    tmp_dict_value_73 = const_str_empty;
    tmp_dict_key_73 = const_str_plain_docsignxa;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_73, tmp_dict_value_73 );
    tmp_dict_value_74 = const_str_empty;
    tmp_dict_key_74 = const_str_plain_docsignxashort;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_74, tmp_dict_value_74 );
    tmp_dict_value_75 = const_str_empty;
    tmp_dict_key_75 = const_str_plain_initf2pywraphook;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_75, tmp_dict_value_75 );
    tmp_dict_value_76 = _PyDict_NewPresized( 2 );
    tmp_dict_value_77 = const_str_digest_2fea6faaece8b13aba5205180919cad4;
    tmp_dict_key_77 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasnote );

    if (unlikely( tmp_dict_key_77 == NULL ))
    {
        tmp_dict_key_77 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasnote );
    }

    if ( tmp_dict_key_77 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_76 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125485 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 376;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_76, tmp_dict_key_77, tmp_dict_value_77 );
    tmp_dict_value_78 = const_str_empty;
    tmp_called_20 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_20 == NULL ))
    {
        tmp_called_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_20 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_76 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 376;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_19 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasnote );

    if (unlikely( tmp_call_arg_element_19 == NULL ))
    {
        tmp_call_arg_element_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasnote );
    }

    if ( tmp_call_arg_element_19 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_76 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125485 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 376;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 376;
    tmp_dict_key_78 = CALL_FUNCTION_WITH_ARGS1( tmp_called_20, tmp_call_arg_element_19 );
    if ( tmp_dict_key_78 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_76 );

        frame_module->f_lineno = 376;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_76, tmp_dict_key_78, tmp_dict_value_78 );
    Py_DECREF( tmp_dict_key_78 );
    tmp_dict_key_76 = const_str_plain_routnote;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_76, tmp_dict_value_76 );
    Py_DECREF( tmp_dict_value_76 );
    PyList_SET_ITEM( tmp_assign_source_30, 0, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 4 );
    tmp_dict_value_79 = const_str_digest_bd11a3d4509bb31d8294367664405f49;
    tmp_dict_key_79 = const_str_plain_apiname;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_79, tmp_dict_value_79 );
    tmp_dict_value_80 = const_str_digest_a5c3694130ad6405ae4d1ac366f7f051;
    tmp_dict_key_80 = const_str_plain_pyname;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_80, tmp_dict_value_80 );
    tmp_dict_value_81 = const_str_empty;
    tmp_dict_key_81 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_81, tmp_dict_value_81 );
    tmp_called_21 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_21 == NULL ))
    {
        tmp_called_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_21 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 381;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_20 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_20 == NULL ))
    {
        tmp_call_arg_element_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_20 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 381;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 381;
    tmp_dict_value_82 = CALL_FUNCTION_WITH_ARGS1( tmp_called_21, tmp_call_arg_element_20 );
    if ( tmp_dict_value_82 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );

        frame_module->f_lineno = 381;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_82 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_82, tmp_dict_value_82 );
    Py_DECREF( tmp_dict_value_82 );
    PyList_SET_ITEM( tmp_assign_source_30, 1, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 4 );
    tmp_dict_value_83 = const_str_digest_ccdece3504035fa372440bbeb6311ffd;
    tmp_dict_key_83 = const_str_plain_apiname;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_83, tmp_dict_value_83 );
    tmp_dict_value_84 = const_str_digest_c825d376812e29c9ddc6ce1ed7e3515f;
    tmp_dict_key_84 = const_str_plain_pyname;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_84, tmp_dict_value_84 );
    tmp_dict_value_85 = const_str_empty;
    tmp_dict_key_85 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_85, tmp_dict_value_85 );
    tmp_dict_value_86 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_dict_value_86 == NULL ))
    {
        tmp_dict_value_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_dict_value_86 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 386;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_86 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_86, tmp_dict_value_86 );
    PyList_SET_ITEM( tmp_assign_source_30, 2, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 6 );
    tmp_dict_value_87 = const_str_plain_void;
    tmp_dict_key_87 = const_str_plain_functype;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_87, tmp_dict_value_87 );
    tmp_dict_value_88 = _PyDict_NewPresized( 4 );
    tmp_dict_value_89 = const_str_digest_b8a48d5016ebc922c843de4be3b7b3d3;
    tmp_called_22 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_22 == NULL ))
    {
        tmp_called_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_22 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 389;
        goto frame_exception_exit_1;
    }

    tmp_called_23 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_23 == NULL ))
    {
        tmp_called_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_23 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 389;
        goto frame_exception_exit_1;
    }

    tmp_called_24 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_24 == NULL ))
    {
        tmp_called_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_24 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 389;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_23 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_23 == NULL ))
    {
        tmp_call_arg_element_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_23 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 389;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_24 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_call_arg_element_24 == NULL ))
    {
        tmp_call_arg_element_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_call_arg_element_24 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124212 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 389;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 389;
    tmp_call_arg_element_22 = CALL_FUNCTION_WITH_ARGS2( tmp_called_24, tmp_call_arg_element_23, tmp_call_arg_element_24 );
    if ( tmp_call_arg_element_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );

        frame_module->f_lineno = 389;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 389;
    tmp_call_arg_element_21 = CALL_FUNCTION_WITH_ARGS1( tmp_called_23, tmp_call_arg_element_22 );
    Py_DECREF( tmp_call_arg_element_22 );
    if ( tmp_call_arg_element_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );

        frame_module->f_lineno = 389;
        goto frame_exception_exit_1;
    }
    tmp_called_25 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_25 == NULL ))
    {
        tmp_called_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_25 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        Py_DECREF( tmp_call_arg_element_21 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 389;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_26 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_26 == NULL ))
    {
        tmp_call_arg_element_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_26 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        Py_DECREF( tmp_call_arg_element_21 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 389;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 389;
    tmp_call_arg_element_25 = CALL_FUNCTION_WITH_ARGS1( tmp_called_25, tmp_call_arg_element_26 );
    if ( tmp_call_arg_element_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        Py_DECREF( tmp_call_arg_element_21 );

        frame_module->f_lineno = 389;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 389;
    tmp_dict_key_89 = CALL_FUNCTION_WITH_ARGS2( tmp_called_22, tmp_call_arg_element_21, tmp_call_arg_element_25 );
    Py_DECREF( tmp_call_arg_element_21 );
    Py_DECREF( tmp_call_arg_element_25 );
    if ( tmp_dict_key_89 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );

        frame_module->f_lineno = 389;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_88, tmp_dict_key_89, tmp_dict_value_89 );
    Py_DECREF( tmp_dict_key_89 );
    tmp_dict_value_90 = const_str_digest_2bfab3a3bf25bd01b8093743c94c68c6;
    tmp_called_26 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_26 == NULL ))
    {
        tmp_called_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_26 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 390;
        goto frame_exception_exit_1;
    }

    tmp_called_27 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_27 == NULL ))
    {
        tmp_called_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_27 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 390;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_28 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_28 == NULL ))
    {
        tmp_call_arg_element_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_28 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 390;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 390;
    tmp_call_arg_element_27 = CALL_FUNCTION_WITH_ARGS1( tmp_called_27, tmp_call_arg_element_28 );
    if ( tmp_call_arg_element_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );

        frame_module->f_lineno = 390;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_29 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_call_arg_element_29 == NULL ))
    {
        tmp_call_arg_element_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_call_arg_element_29 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        Py_DECREF( tmp_call_arg_element_27 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124212 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 390;
        goto frame_exception_exit_1;
    }

    tmp_called_28 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_28 == NULL ))
    {
        tmp_called_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_28 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        Py_DECREF( tmp_call_arg_element_27 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 390;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_31 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_31 == NULL ))
    {
        tmp_call_arg_element_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_31 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        Py_DECREF( tmp_call_arg_element_27 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 390;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 390;
    tmp_call_arg_element_30 = CALL_FUNCTION_WITH_ARGS1( tmp_called_28, tmp_call_arg_element_31 );
    if ( tmp_call_arg_element_30 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        Py_DECREF( tmp_call_arg_element_27 );

        frame_module->f_lineno = 390;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 390;
    tmp_dict_key_90 = CALL_FUNCTION_WITH_ARGS3( tmp_called_26, tmp_call_arg_element_27, tmp_call_arg_element_29, tmp_call_arg_element_30 );
    Py_DECREF( tmp_call_arg_element_27 );
    Py_DECREF( tmp_call_arg_element_30 );
    if ( tmp_dict_key_90 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );

        frame_module->f_lineno = 390;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_88, tmp_dict_key_90, tmp_dict_value_90 );
    Py_DECREF( tmp_dict_key_90 );
    tmp_dict_value_91 = const_str_empty;
    tmp_dict_key_91 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_dict_key_91 == NULL ))
    {
        tmp_dict_key_91 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_dict_key_91 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 391;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_88, tmp_dict_key_91, tmp_dict_value_91 );
    tmp_dict_value_92 = const_str_empty;
    tmp_dict_key_92 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_dict_key_92 == NULL ))
    {
        tmp_dict_key_92 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_dict_key_92 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_88 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 392;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_88, tmp_dict_key_92, tmp_dict_value_92 );
    tmp_dict_key_88 = const_str_plain_declfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_88, tmp_dict_value_88 );
    Py_DECREF( tmp_dict_value_88 );
    tmp_dict_value_93 = _PyDict_NewPresized( 3 );
    tmp_dict_value_94 = const_str_digest_cf71de3f9023718c59bbed5c352d152c;
    tmp_called_29 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_29 == NULL ))
    {
        tmp_called_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_29 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 394;
        goto frame_exception_exit_1;
    }

    tmp_called_30 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_30 == NULL ))
    {
        tmp_called_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_30 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 394;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_33 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_33 == NULL ))
    {
        tmp_call_arg_element_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_33 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 394;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_34 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_call_arg_element_34 == NULL ))
    {
        tmp_call_arg_element_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_call_arg_element_34 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124212 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 394;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_35 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_35 == NULL ))
    {
        tmp_call_arg_element_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_35 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 394;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 394;
    tmp_call_arg_element_32 = CALL_FUNCTION_WITH_ARGS3( tmp_called_30, tmp_call_arg_element_33, tmp_call_arg_element_34, tmp_call_arg_element_35 );
    if ( tmp_call_arg_element_32 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );

        frame_module->f_lineno = 394;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 394;
    tmp_dict_key_94 = CALL_FUNCTION_WITH_ARGS1( tmp_called_29, tmp_call_arg_element_32 );
    Py_DECREF( tmp_call_arg_element_32 );
    if ( tmp_dict_key_94 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );

        frame_module->f_lineno = 394;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_93, tmp_dict_key_94, tmp_dict_value_94 );
    Py_DECREF( tmp_dict_key_94 );
    tmp_dict_value_95 = const_str_digest_ee4b6cfd909f1956d8f9cdb9d88a8e33;
    tmp_called_31 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_31 == NULL ))
    {
        tmp_called_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_31 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 395;
        goto frame_exception_exit_1;
    }

    tmp_called_32 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_32 == NULL ))
    {
        tmp_called_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_32 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 395;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_37 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_37 == NULL ))
    {
        tmp_call_arg_element_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_37 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 395;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 395;
    tmp_call_arg_element_36 = CALL_FUNCTION_WITH_ARGS1( tmp_called_32, tmp_call_arg_element_37 );
    if ( tmp_call_arg_element_36 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );

        frame_module->f_lineno = 395;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_38 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_call_arg_element_38 == NULL ))
    {
        tmp_call_arg_element_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_call_arg_element_38 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        Py_DECREF( tmp_call_arg_element_36 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124212 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 395;
        goto frame_exception_exit_1;
    }

    tmp_called_33 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_33 == NULL ))
    {
        tmp_called_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_33 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        Py_DECREF( tmp_call_arg_element_36 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 395;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_40 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_40 == NULL ))
    {
        tmp_call_arg_element_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_40 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        Py_DECREF( tmp_call_arg_element_36 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 395;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 395;
    tmp_call_arg_element_39 = CALL_FUNCTION_WITH_ARGS1( tmp_called_33, tmp_call_arg_element_40 );
    if ( tmp_call_arg_element_39 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        Py_DECREF( tmp_call_arg_element_36 );

        frame_module->f_lineno = 395;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 395;
    tmp_dict_key_95 = CALL_FUNCTION_WITH_ARGS3( tmp_called_31, tmp_call_arg_element_36, tmp_call_arg_element_38, tmp_call_arg_element_39 );
    Py_DECREF( tmp_call_arg_element_36 );
    Py_DECREF( tmp_call_arg_element_39 );
    if ( tmp_dict_key_95 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );

        frame_module->f_lineno = 395;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_93, tmp_dict_key_95, tmp_dict_value_95 );
    Py_DECREF( tmp_dict_key_95 );
    tmp_dict_value_96 = const_str_digest_55456c681709cce09c41f6b5c4c09b6c;
    tmp_called_34 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_34 == NULL ))
    {
        tmp_called_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_34 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 396;
        goto frame_exception_exit_1;
    }

    tmp_called_35 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_35 == NULL ))
    {
        tmp_called_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_35 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 396;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_42 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_42 == NULL ))
    {
        tmp_call_arg_element_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_42 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 396;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 396;
    tmp_call_arg_element_41 = CALL_FUNCTION_WITH_ARGS1( tmp_called_35, tmp_call_arg_element_42 );
    if ( tmp_call_arg_element_41 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );

        frame_module->f_lineno = 396;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_43 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_43 == NULL ))
    {
        tmp_call_arg_element_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_43 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );
        Py_DECREF( tmp_call_arg_element_41 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 396;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 396;
    tmp_dict_key_96 = CALL_FUNCTION_WITH_ARGS2( tmp_called_34, tmp_call_arg_element_41, tmp_call_arg_element_43 );
    Py_DECREF( tmp_call_arg_element_41 );
    if ( tmp_dict_key_96 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_93 );

        frame_module->f_lineno = 396;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_93, tmp_dict_key_96, tmp_dict_value_96 );
    Py_DECREF( tmp_dict_key_96 );
    tmp_dict_key_93 = const_str_plain_routine_def;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_93, tmp_dict_value_93 );
    Py_DECREF( tmp_dict_value_93 );
    tmp_dict_value_97 = _PyDict_NewPresized( 1 );
    tmp_dict_value_98 = const_str_plain_F_FUNC;
    tmp_called_36 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_36 == NULL ))
    {
        tmp_called_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_36 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }

    tmp_called_37 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_37 == NULL ))
    {
        tmp_called_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_37 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }

    tmp_called_38 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_38 == NULL ))
    {
        tmp_called_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_38 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_46 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_46 == NULL ))
    {
        tmp_call_arg_element_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_46 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_47 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_call_arg_element_47 == NULL ))
    {
        tmp_call_arg_element_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_call_arg_element_47 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124212 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 398;
    tmp_call_arg_element_45 = CALL_FUNCTION_WITH_ARGS2( tmp_called_38, tmp_call_arg_element_46, tmp_call_arg_element_47 );
    if ( tmp_call_arg_element_45 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );

        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 398;
    tmp_call_arg_element_44 = CALL_FUNCTION_WITH_ARGS1( tmp_called_37, tmp_call_arg_element_45 );
    Py_DECREF( tmp_call_arg_element_45 );
    if ( tmp_call_arg_element_44 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );

        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }
    tmp_called_39 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_39 == NULL ))
    {
        tmp_called_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_39 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );
        Py_DECREF( tmp_call_arg_element_44 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_49 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_49 == NULL ))
    {
        tmp_call_arg_element_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_49 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );
        Py_DECREF( tmp_call_arg_element_44 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 398;
    tmp_call_arg_element_48 = CALL_FUNCTION_WITH_ARGS1( tmp_called_39, tmp_call_arg_element_49 );
    if ( tmp_call_arg_element_48 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );
        Py_DECREF( tmp_call_arg_element_44 );

        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 398;
    tmp_dict_key_98 = CALL_FUNCTION_WITH_ARGS2( tmp_called_36, tmp_call_arg_element_44, tmp_call_arg_element_48 );
    Py_DECREF( tmp_call_arg_element_44 );
    Py_DECREF( tmp_call_arg_element_48 );
    if ( tmp_dict_key_98 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_97 );

        frame_module->f_lineno = 398;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_97, tmp_dict_key_98, tmp_dict_value_98 );
    Py_DECREF( tmp_dict_key_98 );
    tmp_dict_key_97 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_97, tmp_dict_value_97 );
    Py_DECREF( tmp_dict_value_97 );
    tmp_dict_value_99 = PyList_New( 7 );
    tmp_list_element_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_100 = LIST_COPY( const_list_str_digest_6bbbfb5feaca7cb532b036a03f1876bc_list );
    tmp_dict_key_100 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_100 == NULL ))
    {
        tmp_dict_key_100 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_100 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        Py_DECREF( tmp_dict_value_100 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 400;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_3, tmp_dict_key_100, tmp_dict_value_100 );
    Py_DECREF( tmp_dict_value_100 );
    PyList_SET_ITEM( tmp_dict_value_99, 0, tmp_list_element_3 );
    tmp_list_element_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_101 = const_str_digest_94f7eeb67070e06cba40225d7f6dac94;
    tmp_dict_key_101 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_101 == NULL ))
    {
        tmp_dict_key_101 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_101 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150818 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 401;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_3, tmp_dict_key_101, tmp_dict_value_101 );
    PyList_SET_ITEM( tmp_dict_value_99, 1, tmp_list_element_3 );
    tmp_list_element_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_102 = const_str_digest_f69e5c82471da4a14868bf6c3579cdb5;
    tmp_dict_key_102 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_102 == NULL ))
    {
        tmp_dict_key_102 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_102 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150852 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 405;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_3, tmp_dict_key_102, tmp_dict_value_102 );
    PyList_SET_ITEM( tmp_dict_value_99, 2, tmp_list_element_3 );
    tmp_list_element_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_103 = const_str_digest_ec3b7568b05b17898a1cfc5552eb0db7;
    tmp_dict_key_103 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hascallstatement );

    if (unlikely( tmp_dict_key_103 == NULL ))
    {
        tmp_dict_key_103 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hascallstatement );
    }

    if ( tmp_dict_key_103 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126092 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 406;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_3, tmp_dict_key_103, tmp_dict_value_103 );
    PyList_SET_ITEM( tmp_dict_value_99, 3, tmp_list_element_3 );
    tmp_list_element_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_104 = const_str_digest_530550da2a0c86c4126b4c4a02177517;
    tmp_called_40 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_40 == NULL ))
    {
        tmp_called_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_40 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 408;
        goto frame_exception_exit_1;
    }

    tmp_called_41 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_41 == NULL ))
    {
        tmp_called_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_41 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 408;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_51 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hascallstatement );

    if (unlikely( tmp_call_arg_element_51 == NULL ))
    {
        tmp_call_arg_element_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hascallstatement );
    }

    if ( tmp_call_arg_element_51 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126092 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 408;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_52 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_52 == NULL ))
    {
        tmp_call_arg_element_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_52 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 408;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 408;
    tmp_call_arg_element_50 = CALL_FUNCTION_WITH_ARGS2( tmp_called_41, tmp_call_arg_element_51, tmp_call_arg_element_52 );
    if ( tmp_call_arg_element_50 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );

        frame_module->f_lineno = 408;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 408;
    tmp_dict_key_104 = CALL_FUNCTION_WITH_ARGS1( tmp_called_40, tmp_call_arg_element_50 );
    Py_DECREF( tmp_call_arg_element_50 );
    if ( tmp_dict_key_104 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );

        frame_module->f_lineno = 408;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_3, tmp_dict_key_104, tmp_dict_value_104 );
    Py_DECREF( tmp_dict_key_104 );
    PyList_SET_ITEM( tmp_dict_value_99, 4, tmp_list_element_3 );
    tmp_list_element_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_105 = const_str_digest_77eeebb839755066d58a587211ae9b65;
    tmp_dict_key_105 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_105 == NULL ))
    {
        tmp_dict_key_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_105 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150852 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 409;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_3, tmp_dict_key_105, tmp_dict_value_105 );
    PyList_SET_ITEM( tmp_dict_value_99, 5, tmp_list_element_3 );
    tmp_list_element_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_106 = const_str_digest_6c41c39826425526467cf3e430a77c15;
    tmp_dict_key_106 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_106 == NULL ))
    {
        tmp_dict_key_106 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_106 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_99 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150818 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 410;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_3, tmp_dict_key_106, tmp_dict_value_106 );
    PyList_SET_ITEM( tmp_dict_value_99, 6, tmp_list_element_3 );
    tmp_dict_key_99 = const_str_plain_callfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_99, tmp_dict_value_99 );
    Py_DECREF( tmp_dict_value_99 );
    tmp_called_42 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_42 == NULL ))
    {
        tmp_called_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_42 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 412;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_53 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_issubroutine );

    if (unlikely( tmp_call_arg_element_53 == NULL ))
    {
        tmp_call_arg_element_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_issubroutine );
    }

    if ( tmp_call_arg_element_53 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124910 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 412;
        goto frame_exception_exit_1;
    }

    tmp_called_43 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_43 == NULL ))
    {
        tmp_called_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_43 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 412;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_55 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_issubroutine_wrap );

    if (unlikely( tmp_call_arg_element_55 == NULL ))
    {
        tmp_call_arg_element_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_issubroutine_wrap );
    }

    if ( tmp_call_arg_element_55 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150668 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 412;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 412;
    tmp_call_arg_element_54 = CALL_FUNCTION_WITH_ARGS1( tmp_called_43, tmp_call_arg_element_55 );
    if ( tmp_call_arg_element_54 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );

        frame_module->f_lineno = 412;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 412;
    tmp_dict_value_107 = CALL_FUNCTION_WITH_ARGS2( tmp_called_42, tmp_call_arg_element_53, tmp_call_arg_element_54 );
    Py_DECREF( tmp_call_arg_element_54 );
    if ( tmp_dict_value_107 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );

        frame_module->f_lineno = 412;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_107 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_107, tmp_dict_value_107 );
    Py_DECREF( tmp_dict_value_107 );
    PyList_SET_ITEM( tmp_assign_source_30, 3, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 7 );
    tmp_dict_value_108 = const_str_plain_void;
    tmp_dict_key_108 = const_str_plain_functype;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_108, tmp_dict_value_108 );
    tmp_dict_value_109 = _PyDict_NewPresized( 2 );
    tmp_dict_value_110 = const_str_digest_103f7cae04ee1c2adcfe2b30f8ef4e52;
    tmp_called_44 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_44 == NULL ))
    {
        tmp_called_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_44 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_109 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 415;
        goto frame_exception_exit_1;
    }

    tmp_called_45 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_45 == NULL ))
    {
        tmp_called_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_45 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_109 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 415;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_57 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_57 == NULL ))
    {
        tmp_call_arg_element_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_57 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_109 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 415;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_58 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_58 == NULL ))
    {
        tmp_call_arg_element_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_58 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_109 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 415;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 415;
    tmp_call_arg_element_56 = CALL_FUNCTION_WITH_ARGS2( tmp_called_45, tmp_call_arg_element_57, tmp_call_arg_element_58 );
    if ( tmp_call_arg_element_56 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_109 );

        frame_module->f_lineno = 415;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 415;
    tmp_dict_key_110 = CALL_FUNCTION_WITH_ARGS1( tmp_called_44, tmp_call_arg_element_56 );
    Py_DECREF( tmp_call_arg_element_56 );
    if ( tmp_dict_key_110 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_109 );

        frame_module->f_lineno = 415;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_109, tmp_dict_key_110, tmp_dict_value_110 );
    Py_DECREF( tmp_dict_key_110 );
    tmp_dict_value_111 = const_str_empty;
    tmp_dict_key_111 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_dict_key_111 == NULL ))
    {
        tmp_dict_key_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_dict_key_111 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_109 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 416;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_109, tmp_dict_key_111, tmp_dict_value_111 );
    tmp_dict_key_109 = const_str_plain_declfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_109, tmp_dict_value_109 );
    Py_DECREF( tmp_dict_value_109 );
    tmp_dict_value_112 = _PyDict_NewPresized( 2 );
    tmp_dict_value_113 = const_str_digest_e22f20bbcc3464586bae117166898e42;
    tmp_called_46 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_46 == NULL ))
    {
        tmp_called_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_46 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_112 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 419;
        goto frame_exception_exit_1;
    }

    tmp_called_47 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_47 == NULL ))
    {
        tmp_called_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_47 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_112 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 419;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_60 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_60 == NULL ))
    {
        tmp_call_arg_element_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_60 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_112 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 419;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_61 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_61 == NULL ))
    {
        tmp_call_arg_element_61 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_61 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_112 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 419;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 419;
    tmp_call_arg_element_59 = CALL_FUNCTION_WITH_ARGS2( tmp_called_47, tmp_call_arg_element_60, tmp_call_arg_element_61 );
    if ( tmp_call_arg_element_59 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_112 );

        frame_module->f_lineno = 419;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 419;
    tmp_dict_key_113 = CALL_FUNCTION_WITH_ARGS1( tmp_called_46, tmp_call_arg_element_59 );
    Py_DECREF( tmp_call_arg_element_59 );
    if ( tmp_dict_key_113 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_112 );

        frame_module->f_lineno = 419;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_112, tmp_dict_key_113, tmp_dict_value_113 );
    Py_DECREF( tmp_dict_key_113 );
    tmp_dict_value_114 = const_str_digest_55456c681709cce09c41f6b5c4c09b6c;
    tmp_dict_key_114 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_dict_key_114 == NULL ))
    {
        tmp_dict_key_114 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_dict_key_114 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_112 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 420;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_112, tmp_dict_key_114, tmp_dict_value_114 );
    tmp_dict_key_112 = const_str_plain_routine_def;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_112, tmp_dict_value_112 );
    Py_DECREF( tmp_dict_value_112 );
    tmp_dict_value_115 = _PyDict_NewPresized( 1 );
    tmp_dict_value_116 = const_str_digest_a731efdfc52bda74c8042706da39e402;
    tmp_called_48 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_48 == NULL ))
    {
        tmp_called_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_48 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_115 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 422;
        goto frame_exception_exit_1;
    }

    tmp_called_49 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_49 == NULL ))
    {
        tmp_called_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_49 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_115 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 422;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_63 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_63 == NULL ))
    {
        tmp_call_arg_element_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_63 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_115 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 422;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_64 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_64 == NULL ))
    {
        tmp_call_arg_element_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_64 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_115 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 422;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 422;
    tmp_call_arg_element_62 = CALL_FUNCTION_WITH_ARGS2( tmp_called_49, tmp_call_arg_element_63, tmp_call_arg_element_64 );
    if ( tmp_call_arg_element_62 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_115 );

        frame_module->f_lineno = 422;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 422;
    tmp_dict_key_116 = CALL_FUNCTION_WITH_ARGS1( tmp_called_48, tmp_call_arg_element_62 );
    Py_DECREF( tmp_call_arg_element_62 );
    if ( tmp_dict_key_116 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_115 );

        frame_module->f_lineno = 422;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_115, tmp_dict_key_116, tmp_dict_value_116 );
    Py_DECREF( tmp_dict_key_116 );
    tmp_dict_key_115 = const_str_plain_initf2pywraphook;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_115, tmp_dict_value_115 );
    Py_DECREF( tmp_dict_value_115 );
    tmp_dict_value_117 = _PyDict_NewPresized( 1 );
    tmp_dict_value_118 = LIST_COPY( const_list_str_plain_F_WRAPPEDFUNC_str_plain_F_FUNC_list );
    tmp_called_50 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_50 == NULL ))
    {
        tmp_called_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_50 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_117 );
        Py_DECREF( tmp_dict_value_118 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 434;
        goto frame_exception_exit_1;
    }

    tmp_called_51 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_51 == NULL ))
    {
        tmp_called_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_51 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_117 );
        Py_DECREF( tmp_dict_value_118 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 434;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_66 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_66 == NULL ))
    {
        tmp_call_arg_element_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_66 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_117 );
        Py_DECREF( tmp_dict_value_118 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 434;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_67 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_67 == NULL ))
    {
        tmp_call_arg_element_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_67 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_117 );
        Py_DECREF( tmp_dict_value_118 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 434;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 434;
    tmp_call_arg_element_65 = CALL_FUNCTION_WITH_ARGS2( tmp_called_51, tmp_call_arg_element_66, tmp_call_arg_element_67 );
    if ( tmp_call_arg_element_65 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_117 );
        Py_DECREF( tmp_dict_value_118 );

        frame_module->f_lineno = 434;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 434;
    tmp_dict_key_118 = CALL_FUNCTION_WITH_ARGS1( tmp_called_50, tmp_call_arg_element_65 );
    Py_DECREF( tmp_call_arg_element_65 );
    if ( tmp_dict_key_118 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_117 );
        Py_DECREF( tmp_dict_value_118 );

        frame_module->f_lineno = 434;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_117, tmp_dict_key_118, tmp_dict_value_118 );
    Py_DECREF( tmp_dict_value_118 );
    Py_DECREF( tmp_dict_key_118 );
    tmp_dict_key_117 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_117, tmp_dict_value_117 );
    Py_DECREF( tmp_dict_value_117 );
    tmp_dict_value_119 = PyList_New( 7 );
    tmp_list_element_4 = _PyDict_NewPresized( 1 );
    tmp_dict_value_120 = LIST_COPY( const_list_str_digest_e37d7173ff6f9aaa416640aafbac950b_list );
    tmp_dict_key_120 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_120 == NULL ))
    {
        tmp_dict_key_120 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_120 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        Py_DECREF( tmp_dict_value_120 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 436;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_4, tmp_dict_key_120, tmp_dict_value_120 );
    Py_DECREF( tmp_dict_value_120 );
    PyList_SET_ITEM( tmp_dict_value_119, 0, tmp_list_element_4 );
    tmp_list_element_4 = _PyDict_NewPresized( 1 );
    tmp_dict_value_121 = const_str_digest_b8bcf6698fa55a1cf1fc5eaebffde12d;
    tmp_dict_key_121 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_121 == NULL ))
    {
        tmp_dict_key_121 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_121 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150818 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 437;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_4, tmp_dict_key_121, tmp_dict_value_121 );
    PyList_SET_ITEM( tmp_dict_value_119, 1, tmp_list_element_4 );
    tmp_list_element_4 = _PyDict_NewPresized( 1 );
    tmp_dict_value_122 = const_str_digest_18429b2363d61bb45e6f19ee193369c0;
    tmp_dict_key_122 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_122 == NULL ))
    {
        tmp_dict_key_122 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_122 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150852 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 441;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_4, tmp_dict_key_122, tmp_dict_value_122 );
    PyList_SET_ITEM( tmp_dict_value_119, 2, tmp_list_element_4 );
    tmp_list_element_4 = _PyDict_NewPresized( 1 );
    tmp_dict_value_123 = const_str_digest_c3ae46c3d5576e352b30a35cef03a879;
    tmp_called_52 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_52 == NULL ))
    {
        tmp_called_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_52 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 442;
        goto frame_exception_exit_1;
    }

    tmp_called_53 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_53 == NULL ))
    {
        tmp_called_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_53 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 442;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_69 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hascallstatement );

    if (unlikely( tmp_call_arg_element_69 == NULL ))
    {
        tmp_call_arg_element_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hascallstatement );
    }

    if ( tmp_call_arg_element_69 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126092 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 442;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_70 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_70 == NULL ))
    {
        tmp_call_arg_element_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_70 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 442;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 442;
    tmp_call_arg_element_68 = CALL_FUNCTION_WITH_ARGS2( tmp_called_53, tmp_call_arg_element_69, tmp_call_arg_element_70 );
    if ( tmp_call_arg_element_68 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );

        frame_module->f_lineno = 442;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 442;
    tmp_dict_key_123 = CALL_FUNCTION_WITH_ARGS1( tmp_called_52, tmp_call_arg_element_68 );
    Py_DECREF( tmp_call_arg_element_68 );
    if ( tmp_dict_key_123 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );

        frame_module->f_lineno = 442;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_4, tmp_dict_key_123, tmp_dict_value_123 );
    Py_DECREF( tmp_dict_key_123 );
    PyList_SET_ITEM( tmp_dict_value_119, 3, tmp_list_element_4 );
    tmp_list_element_4 = _PyDict_NewPresized( 1 );
    tmp_dict_value_124 = const_str_digest_1422ad36fc74e5255a7c794563fb3843;
    tmp_dict_key_124 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hascallstatement );

    if (unlikely( tmp_dict_key_124 == NULL ))
    {
        tmp_dict_key_124 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hascallstatement );
    }

    if ( tmp_dict_key_124 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126092 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 443;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_4, tmp_dict_key_124, tmp_dict_value_124 );
    PyList_SET_ITEM( tmp_dict_value_119, 4, tmp_list_element_4 );
    tmp_list_element_4 = _PyDict_NewPresized( 1 );
    tmp_dict_value_125 = const_str_digest_a1b947d4348c132103b0fcc2930bd1fa;
    tmp_dict_key_125 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_125 == NULL ))
    {
        tmp_dict_key_125 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_125 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150852 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 444;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_4, tmp_dict_key_125, tmp_dict_value_125 );
    PyList_SET_ITEM( tmp_dict_value_119, 5, tmp_list_element_4 );
    tmp_list_element_4 = _PyDict_NewPresized( 1 );
    tmp_dict_value_126 = const_str_digest_003412ca7c035dda44b06c662ca81aa5;
    tmp_dict_key_126 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_126 == NULL ))
    {
        tmp_dict_key_126 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_126 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_119 );
        Py_DECREF( tmp_list_element_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150818 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 445;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_4, tmp_dict_key_126, tmp_dict_value_126 );
    PyList_SET_ITEM( tmp_dict_value_119, 6, tmp_list_element_4 );
    tmp_dict_key_119 = const_str_plain_callfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_119, tmp_dict_value_119 );
    Py_DECREF( tmp_dict_value_119 );
    tmp_dict_value_127 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isfunction_wrap );

    if (unlikely( tmp_dict_value_127 == NULL ))
    {
        tmp_dict_value_127 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isfunction_wrap );
    }

    if ( tmp_dict_value_127 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126250 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 447;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_127 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_127, tmp_dict_value_127 );
    PyList_SET_ITEM( tmp_assign_source_30, 4, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 7 );
    tmp_dict_value_128 = const_str_plain_void;
    tmp_dict_key_128 = const_str_plain_functype;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_128, tmp_dict_value_128 );
    tmp_dict_value_129 = _PyDict_NewPresized( 2 );
    tmp_dict_value_130 = const_str_digest_103f7cae04ee1c2adcfe2b30f8ef4e52;
    tmp_called_54 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_54 == NULL ))
    {
        tmp_called_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_54 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_129 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 450;
        goto frame_exception_exit_1;
    }

    tmp_called_55 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_55 == NULL ))
    {
        tmp_called_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_55 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_129 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 450;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_72 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_72 == NULL ))
    {
        tmp_call_arg_element_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_72 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_129 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 450;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_73 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_73 == NULL ))
    {
        tmp_call_arg_element_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_73 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_129 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 450;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 450;
    tmp_call_arg_element_71 = CALL_FUNCTION_WITH_ARGS2( tmp_called_55, tmp_call_arg_element_72, tmp_call_arg_element_73 );
    if ( tmp_call_arg_element_71 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_129 );

        frame_module->f_lineno = 450;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 450;
    tmp_dict_key_130 = CALL_FUNCTION_WITH_ARGS1( tmp_called_54, tmp_call_arg_element_71 );
    Py_DECREF( tmp_call_arg_element_71 );
    if ( tmp_dict_key_130 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_129 );

        frame_module->f_lineno = 450;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_129, tmp_dict_key_130, tmp_dict_value_130 );
    Py_DECREF( tmp_dict_key_130 );
    tmp_dict_value_131 = const_str_empty;
    tmp_dict_key_131 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_dict_key_131 == NULL ))
    {
        tmp_dict_key_131 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_dict_key_131 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_129 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 451;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_129, tmp_dict_key_131, tmp_dict_value_131 );
    tmp_dict_key_129 = const_str_plain_declfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_129, tmp_dict_value_129 );
    Py_DECREF( tmp_dict_value_129 );
    tmp_dict_value_132 = _PyDict_NewPresized( 2 );
    tmp_dict_value_133 = const_str_digest_e22f20bbcc3464586bae117166898e42;
    tmp_called_56 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_56 == NULL ))
    {
        tmp_called_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_56 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_132 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 454;
        goto frame_exception_exit_1;
    }

    tmp_called_57 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_57 == NULL ))
    {
        tmp_called_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_57 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_132 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 454;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_75 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_75 == NULL ))
    {
        tmp_call_arg_element_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_75 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_132 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 454;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_76 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_76 == NULL ))
    {
        tmp_call_arg_element_76 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_76 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_132 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 454;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 454;
    tmp_call_arg_element_74 = CALL_FUNCTION_WITH_ARGS2( tmp_called_57, tmp_call_arg_element_75, tmp_call_arg_element_76 );
    if ( tmp_call_arg_element_74 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_132 );

        frame_module->f_lineno = 454;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 454;
    tmp_dict_key_133 = CALL_FUNCTION_WITH_ARGS1( tmp_called_56, tmp_call_arg_element_74 );
    Py_DECREF( tmp_call_arg_element_74 );
    if ( tmp_dict_key_133 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_132 );

        frame_module->f_lineno = 454;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_132, tmp_dict_key_133, tmp_dict_value_133 );
    Py_DECREF( tmp_dict_key_133 );
    tmp_dict_value_134 = const_str_digest_55456c681709cce09c41f6b5c4c09b6c;
    tmp_dict_key_134 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_dict_key_134 == NULL ))
    {
        tmp_dict_key_134 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_dict_key_134 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_132 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 455;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_132, tmp_dict_key_134, tmp_dict_value_134 );
    tmp_dict_key_132 = const_str_plain_routine_def;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_132, tmp_dict_value_132 );
    Py_DECREF( tmp_dict_value_132 );
    tmp_dict_value_135 = _PyDict_NewPresized( 1 );
    tmp_dict_value_136 = const_str_digest_3548fadb0ec569ebab2115c8b8df5083;
    tmp_called_58 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_58 == NULL ))
    {
        tmp_called_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_58 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_135 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 457;
        goto frame_exception_exit_1;
    }

    tmp_called_59 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_59 == NULL ))
    {
        tmp_called_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_59 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_135 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 457;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_78 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_78 == NULL ))
    {
        tmp_call_arg_element_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_78 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_135 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 457;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_79 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_79 == NULL ))
    {
        tmp_call_arg_element_79 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_79 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_135 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 457;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 457;
    tmp_call_arg_element_77 = CALL_FUNCTION_WITH_ARGS2( tmp_called_59, tmp_call_arg_element_78, tmp_call_arg_element_79 );
    if ( tmp_call_arg_element_77 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_135 );

        frame_module->f_lineno = 457;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 457;
    tmp_dict_key_136 = CALL_FUNCTION_WITH_ARGS1( tmp_called_58, tmp_call_arg_element_77 );
    Py_DECREF( tmp_call_arg_element_77 );
    if ( tmp_dict_key_136 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_135 );

        frame_module->f_lineno = 457;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_135, tmp_dict_key_136, tmp_dict_value_136 );
    Py_DECREF( tmp_dict_key_136 );
    tmp_dict_key_135 = const_str_plain_initf2pywraphook;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_135, tmp_dict_value_135 );
    Py_DECREF( tmp_dict_value_135 );
    tmp_dict_value_137 = _PyDict_NewPresized( 1 );
    tmp_dict_value_138 = LIST_COPY( const_list_str_plain_F_WRAPPEDFUNC_str_plain_F_FUNC_list );
    tmp_called_60 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_60 == NULL ))
    {
        tmp_called_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_60 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_137 );
        Py_DECREF( tmp_dict_value_138 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 469;
        goto frame_exception_exit_1;
    }

    tmp_called_61 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_61 == NULL ))
    {
        tmp_called_61 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_61 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_137 );
        Py_DECREF( tmp_dict_value_138 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 469;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_81 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_81 == NULL ))
    {
        tmp_call_arg_element_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_81 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_137 );
        Py_DECREF( tmp_dict_value_138 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 469;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_82 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_82 == NULL ))
    {
        tmp_call_arg_element_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_82 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_137 );
        Py_DECREF( tmp_dict_value_138 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 469;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 469;
    tmp_call_arg_element_80 = CALL_FUNCTION_WITH_ARGS2( tmp_called_61, tmp_call_arg_element_81, tmp_call_arg_element_82 );
    if ( tmp_call_arg_element_80 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_137 );
        Py_DECREF( tmp_dict_value_138 );

        frame_module->f_lineno = 469;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 469;
    tmp_dict_key_138 = CALL_FUNCTION_WITH_ARGS1( tmp_called_60, tmp_call_arg_element_80 );
    Py_DECREF( tmp_call_arg_element_80 );
    if ( tmp_dict_key_138 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_137 );
        Py_DECREF( tmp_dict_value_138 );

        frame_module->f_lineno = 469;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_137, tmp_dict_key_138, tmp_dict_value_138 );
    Py_DECREF( tmp_dict_value_138 );
    Py_DECREF( tmp_dict_key_138 );
    tmp_dict_key_137 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_137, tmp_dict_value_137 );
    Py_DECREF( tmp_dict_value_137 );
    tmp_dict_value_139 = PyList_New( 7 );
    tmp_list_element_5 = _PyDict_NewPresized( 1 );
    tmp_dict_value_140 = LIST_COPY( const_list_str_digest_e37d7173ff6f9aaa416640aafbac950b_list );
    tmp_dict_key_140 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_140 == NULL ))
    {
        tmp_dict_key_140 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_140 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        Py_DECREF( tmp_dict_value_140 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 471;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_5, tmp_dict_key_140, tmp_dict_value_140 );
    Py_DECREF( tmp_dict_value_140 );
    PyList_SET_ITEM( tmp_dict_value_139, 0, tmp_list_element_5 );
    tmp_list_element_5 = _PyDict_NewPresized( 1 );
    tmp_dict_value_141 = const_str_digest_b8bcf6698fa55a1cf1fc5eaebffde12d;
    tmp_dict_key_141 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_141 == NULL ))
    {
        tmp_dict_key_141 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_141 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150818 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 472;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_5, tmp_dict_key_141, tmp_dict_value_141 );
    PyList_SET_ITEM( tmp_dict_value_139, 1, tmp_list_element_5 );
    tmp_list_element_5 = _PyDict_NewPresized( 1 );
    tmp_dict_value_142 = const_str_digest_18429b2363d61bb45e6f19ee193369c0;
    tmp_dict_key_142 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_142 == NULL ))
    {
        tmp_dict_key_142 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_142 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150852 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 476;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_5, tmp_dict_key_142, tmp_dict_value_142 );
    PyList_SET_ITEM( tmp_dict_value_139, 2, tmp_list_element_5 );
    tmp_list_element_5 = _PyDict_NewPresized( 1 );
    tmp_dict_value_143 = const_str_digest_c3ae46c3d5576e352b30a35cef03a879;
    tmp_called_62 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_62 == NULL ))
    {
        tmp_called_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_62 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 477;
        goto frame_exception_exit_1;
    }

    tmp_called_63 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_63 == NULL ))
    {
        tmp_called_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_63 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 477;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_84 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hascallstatement );

    if (unlikely( tmp_call_arg_element_84 == NULL ))
    {
        tmp_call_arg_element_84 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hascallstatement );
    }

    if ( tmp_call_arg_element_84 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126092 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 477;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_85 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_85 == NULL ))
    {
        tmp_call_arg_element_85 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_85 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 477;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 477;
    tmp_call_arg_element_83 = CALL_FUNCTION_WITH_ARGS2( tmp_called_63, tmp_call_arg_element_84, tmp_call_arg_element_85 );
    if ( tmp_call_arg_element_83 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );

        frame_module->f_lineno = 477;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 477;
    tmp_dict_key_143 = CALL_FUNCTION_WITH_ARGS1( tmp_called_62, tmp_call_arg_element_83 );
    Py_DECREF( tmp_call_arg_element_83 );
    if ( tmp_dict_key_143 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );

        frame_module->f_lineno = 477;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_5, tmp_dict_key_143, tmp_dict_value_143 );
    Py_DECREF( tmp_dict_key_143 );
    PyList_SET_ITEM( tmp_dict_value_139, 3, tmp_list_element_5 );
    tmp_list_element_5 = _PyDict_NewPresized( 1 );
    tmp_dict_value_144 = const_str_digest_1422ad36fc74e5255a7c794563fb3843;
    tmp_dict_key_144 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hascallstatement );

    if (unlikely( tmp_dict_key_144 == NULL ))
    {
        tmp_dict_key_144 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hascallstatement );
    }

    if ( tmp_dict_key_144 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126092 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 478;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_5, tmp_dict_key_144, tmp_dict_value_144 );
    PyList_SET_ITEM( tmp_dict_value_139, 4, tmp_list_element_5 );
    tmp_list_element_5 = _PyDict_NewPresized( 1 );
    tmp_dict_value_145 = const_str_digest_a1b947d4348c132103b0fcc2930bd1fa;
    tmp_dict_key_145 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_145 == NULL ))
    {
        tmp_dict_key_145 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_145 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150852 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 479;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_5, tmp_dict_key_145, tmp_dict_value_145 );
    PyList_SET_ITEM( tmp_dict_value_139, 5, tmp_list_element_5 );
    tmp_list_element_5 = _PyDict_NewPresized( 1 );
    tmp_dict_value_146 = const_str_digest_003412ca7c035dda44b06c662ca81aa5;
    tmp_dict_key_146 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_146 == NULL ))
    {
        tmp_dict_key_146 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_146 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_139 );
        Py_DECREF( tmp_list_element_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150818 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 480;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_5, tmp_dict_key_146, tmp_dict_value_146 );
    PyList_SET_ITEM( tmp_dict_value_139, 6, tmp_list_element_5 );
    tmp_dict_key_139 = const_str_plain_callfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_139, tmp_dict_value_139 );
    Py_DECREF( tmp_dict_value_139 );
    tmp_dict_value_147 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_issubroutine_wrap );

    if (unlikely( tmp_dict_value_147 == NULL ))
    {
        tmp_dict_value_147 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_issubroutine_wrap );
    }

    if ( tmp_dict_value_147 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150668 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 482;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_147 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_147, tmp_dict_value_147 );
    PyList_SET_ITEM( tmp_assign_source_30, 5, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 6 );
    tmp_dict_value_148 = const_str_digest_034683ceccce831b3c4724622e7c61e0;
    tmp_dict_key_148 = const_str_plain_functype;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_148, tmp_dict_value_148 );
    tmp_dict_value_149 = _PyDict_NewPresized( 1 );
    tmp_dict_value_150 = const_str_digest_dbd40ba69da15782bc0a1e6888e6b0cb;
    tmp_called_64 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_64 == NULL ))
    {
        tmp_called_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_64 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_149 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 485;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_86 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_call_arg_element_86 == NULL ))
    {
        tmp_call_arg_element_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_call_arg_element_86 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_149 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124141 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 485;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 485;
    tmp_dict_key_150 = CALL_FUNCTION_WITH_ARGS1( tmp_called_64, tmp_call_arg_element_86 );
    if ( tmp_dict_key_150 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_149 );

        frame_module->f_lineno = 485;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_149, tmp_dict_key_150, tmp_dict_value_150 );
    Py_DECREF( tmp_dict_key_150 );
    tmp_dict_key_149 = const_str_plain_docreturn;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_149, tmp_dict_value_149 );
    Py_DECREF( tmp_dict_value_149 );
    tmp_dict_value_151 = const_str_digest_52f3cb551798f750c7eedaa7874151b2;
    tmp_dict_key_151 = const_str_plain_docstrout;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_151, tmp_dict_value_151 );
    tmp_dict_value_152 = PyList_New( 2 );
    tmp_list_element_6 = const_str_digest_21848c21ee715afb46bb5dff54f12759;
    Py_INCREF( tmp_list_element_6 );
    PyList_SET_ITEM( tmp_dict_value_152, 0, tmp_list_element_6 );
    tmp_list_element_6 = _PyDict_NewPresized( 1 );
    tmp_dict_value_153 = const_str_digest_4c144e84fc3c1a12f3edf4fb3c6a1560;
    tmp_dict_key_153 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasresultnote );

    if (unlikely( tmp_dict_key_153 == NULL ))
    {
        tmp_dict_key_153 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasresultnote );
    }

    if ( tmp_dict_key_153 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_152 );
        Py_DECREF( tmp_list_element_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 129237 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 488;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_6, tmp_dict_key_153, tmp_dict_value_153 );
    PyList_SET_ITEM( tmp_dict_value_152, 1, tmp_list_element_6 );
    tmp_dict_key_152 = const_str_plain_latexdocstrout;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_152, tmp_dict_value_152 );
    Py_DECREF( tmp_dict_value_152 );
    tmp_dict_value_154 = PyList_New( 2 );
    tmp_list_element_7 = _PyDict_NewPresized( 1 );
    tmp_dict_value_155 = const_str_digest_80faf1e943e593f4ae75792d5729a4c3;
    tmp_called_65 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_65 == NULL ))
    {
        tmp_called_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_65 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 489;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_87 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_call_arg_element_87 == NULL ))
    {
        tmp_call_arg_element_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_call_arg_element_87 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 489;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_88 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstringfunction );

    if (unlikely( tmp_call_arg_element_88 == NULL ))
    {
        tmp_call_arg_element_88 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstringfunction );
    }

    if ( tmp_call_arg_element_88 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126171 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 489;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 489;
    tmp_dict_key_155 = CALL_FUNCTION_WITH_ARGS2( tmp_called_65, tmp_call_arg_element_87, tmp_call_arg_element_88 );
    if ( tmp_dict_key_155 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );

        frame_module->f_lineno = 489;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_7, tmp_dict_key_155, tmp_dict_value_155 );
    Py_DECREF( tmp_dict_key_155 );
    PyList_SET_ITEM( tmp_dict_value_154, 0, tmp_list_element_7 );
    tmp_list_element_7 = _PyDict_NewPresized( 1 );
    tmp_dict_value_156 = const_str_digest_4f2deeeb57d301c95c75bb98138b8f09;
    tmp_called_66 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_66 == NULL ))
    {
        tmp_called_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_66 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 496;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_89 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_call_arg_element_89 == NULL ))
    {
        tmp_call_arg_element_89 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_call_arg_element_89 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 496;
        goto frame_exception_exit_1;
    }

    tmp_called_67 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_67 == NULL ))
    {
        tmp_called_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_67 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 496;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_91 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstringfunction );

    if (unlikely( tmp_call_arg_element_91 == NULL ))
    {
        tmp_call_arg_element_91 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstringfunction );
    }

    if ( tmp_call_arg_element_91 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126171 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 496;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 496;
    tmp_call_arg_element_90 = CALL_FUNCTION_WITH_ARGS1( tmp_called_67, tmp_call_arg_element_91 );
    if ( tmp_call_arg_element_90 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );

        frame_module->f_lineno = 496;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 496;
    tmp_dict_key_156 = CALL_FUNCTION_WITH_ARGS2( tmp_called_66, tmp_call_arg_element_89, tmp_call_arg_element_90 );
    Py_DECREF( tmp_call_arg_element_90 );
    if ( tmp_dict_key_156 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_154 );
        Py_DECREF( tmp_list_element_7 );

        frame_module->f_lineno = 496;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_7, tmp_dict_key_156, tmp_dict_value_156 );
    Py_DECREF( tmp_dict_key_156 );
    PyList_SET_ITEM( tmp_dict_value_154, 1, tmp_list_element_7 );
    tmp_dict_key_154 = const_str_plain_callfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_154, tmp_dict_value_154 );
    Py_DECREF( tmp_dict_value_154 );
    tmp_called_68 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_68 == NULL ))
    {
        tmp_called_68 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_68 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 500;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_92 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isfunction );

    if (unlikely( tmp_call_arg_element_92 == NULL ))
    {
        tmp_call_arg_element_92 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isfunction );
    }

    if ( tmp_call_arg_element_92 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51248 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 500;
        goto frame_exception_exit_1;
    }

    tmp_called_69 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_69 == NULL ))
    {
        tmp_called_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_69 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 500;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_94 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isfunction_wrap );

    if (unlikely( tmp_call_arg_element_94 == NULL ))
    {
        tmp_call_arg_element_94 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isfunction_wrap );
    }

    if ( tmp_call_arg_element_94 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126250 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 500;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 500;
    tmp_call_arg_element_93 = CALL_FUNCTION_WITH_ARGS1( tmp_called_69, tmp_call_arg_element_94 );
    if ( tmp_call_arg_element_93 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );

        frame_module->f_lineno = 500;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 500;
    tmp_dict_value_157 = CALL_FUNCTION_WITH_ARGS2( tmp_called_68, tmp_call_arg_element_92, tmp_call_arg_element_93 );
    Py_DECREF( tmp_call_arg_element_93 );
    if ( tmp_dict_value_157 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );

        frame_module->f_lineno = 500;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_157 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_157, tmp_dict_value_157 );
    Py_DECREF( tmp_dict_value_157 );
    PyList_SET_ITEM( tmp_assign_source_30, 6, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 9 );
    tmp_dict_value_158 = _PyDict_NewPresized( 3 );
    tmp_dict_value_159 = const_str_digest_d73c240a188c22c16ede43df7407dbf6;
    tmp_called_70 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_70 == NULL ))
    {
        tmp_called_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_70 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 502;
        goto frame_exception_exit_1;
    }

    tmp_called_71 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_71 == NULL ))
    {
        tmp_called_71 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_71 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 502;
        goto frame_exception_exit_1;
    }

    tmp_called_72 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_72 == NULL ))
    {
        tmp_called_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_72 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 502;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_97 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_97 == NULL ))
    {
        tmp_call_arg_element_97 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_97 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 502;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_98 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_call_arg_element_98 == NULL ))
    {
        tmp_call_arg_element_98 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_call_arg_element_98 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124212 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 502;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 502;
    tmp_call_arg_element_96 = CALL_FUNCTION_WITH_ARGS2( tmp_called_72, tmp_call_arg_element_97, tmp_call_arg_element_98 );
    if ( tmp_call_arg_element_96 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );

        frame_module->f_lineno = 502;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 502;
    tmp_call_arg_element_95 = CALL_FUNCTION_WITH_ARGS1( tmp_called_71, tmp_call_arg_element_96 );
    Py_DECREF( tmp_call_arg_element_96 );
    if ( tmp_call_arg_element_95 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );

        frame_module->f_lineno = 502;
        goto frame_exception_exit_1;
    }
    tmp_called_73 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_73 == NULL ))
    {
        tmp_called_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_73 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        Py_DECREF( tmp_call_arg_element_95 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 502;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_100 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_100 == NULL ))
    {
        tmp_call_arg_element_100 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_100 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        Py_DECREF( tmp_call_arg_element_95 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 502;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 502;
    tmp_call_arg_element_99 = CALL_FUNCTION_WITH_ARGS1( tmp_called_73, tmp_call_arg_element_100 );
    if ( tmp_call_arg_element_99 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        Py_DECREF( tmp_call_arg_element_95 );

        frame_module->f_lineno = 502;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 502;
    tmp_dict_key_159 = CALL_FUNCTION_WITH_ARGS2( tmp_called_70, tmp_call_arg_element_95, tmp_call_arg_element_99 );
    Py_DECREF( tmp_call_arg_element_95 );
    Py_DECREF( tmp_call_arg_element_99 );
    if ( tmp_dict_key_159 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );

        frame_module->f_lineno = 502;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_158, tmp_dict_key_159, tmp_dict_value_159 );
    Py_DECREF( tmp_dict_key_159 );
    tmp_dict_value_160 = const_str_digest_fbcd99c73635e58fec4f2c1cb3548a51;
    tmp_called_74 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_74 == NULL ))
    {
        tmp_called_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_74 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 503;
        goto frame_exception_exit_1;
    }

    tmp_called_75 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_75 == NULL ))
    {
        tmp_called_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_75 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 503;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_102 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_102 == NULL ))
    {
        tmp_call_arg_element_102 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_102 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 503;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 503;
    tmp_call_arg_element_101 = CALL_FUNCTION_WITH_ARGS1( tmp_called_75, tmp_call_arg_element_102 );
    if ( tmp_call_arg_element_101 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );

        frame_module->f_lineno = 503;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_103 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_call_arg_element_103 == NULL ))
    {
        tmp_call_arg_element_103 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_call_arg_element_103 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        Py_DECREF( tmp_call_arg_element_101 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124212 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 503;
        goto frame_exception_exit_1;
    }

    tmp_called_76 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_76 == NULL ))
    {
        tmp_called_76 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_76 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        Py_DECREF( tmp_call_arg_element_101 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 503;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_105 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_105 == NULL ))
    {
        tmp_call_arg_element_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_105 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        Py_DECREF( tmp_call_arg_element_101 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 503;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 503;
    tmp_call_arg_element_104 = CALL_FUNCTION_WITH_ARGS1( tmp_called_76, tmp_call_arg_element_105 );
    if ( tmp_call_arg_element_104 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        Py_DECREF( tmp_call_arg_element_101 );

        frame_module->f_lineno = 503;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 503;
    tmp_dict_key_160 = CALL_FUNCTION_WITH_ARGS3( tmp_called_74, tmp_call_arg_element_101, tmp_call_arg_element_103, tmp_call_arg_element_104 );
    Py_DECREF( tmp_call_arg_element_101 );
    Py_DECREF( tmp_call_arg_element_104 );
    if ( tmp_dict_key_160 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );

        frame_module->f_lineno = 503;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_158, tmp_dict_key_160, tmp_dict_value_160 );
    Py_DECREF( tmp_dict_key_160 );
    tmp_dict_value_161 = const_str_empty;
    tmp_dict_key_161 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_dict_key_161 == NULL ))
    {
        tmp_dict_key_161 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_dict_key_161 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_158 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 504;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_158, tmp_dict_key_161, tmp_dict_value_161 );
    tmp_dict_key_158 = const_str_plain_declfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_158, tmp_dict_value_158 );
    Py_DECREF( tmp_dict_value_158 );
    tmp_dict_value_162 = _PyDict_NewPresized( 3 );
    tmp_dict_value_163 = const_str_digest_cf71de3f9023718c59bbed5c352d152c;
    tmp_called_77 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_77 == NULL ))
    {
        tmp_called_77 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_77 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 506;
        goto frame_exception_exit_1;
    }

    tmp_called_78 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_78 == NULL ))
    {
        tmp_called_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_78 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 506;
        goto frame_exception_exit_1;
    }

    tmp_called_79 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_79 == NULL ))
    {
        tmp_called_79 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_79 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 506;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_108 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_108 == NULL ))
    {
        tmp_call_arg_element_108 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_108 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 506;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_109 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_call_arg_element_109 == NULL ))
    {
        tmp_call_arg_element_109 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_call_arg_element_109 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124212 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 506;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 506;
    tmp_call_arg_element_107 = CALL_FUNCTION_WITH_ARGS2( tmp_called_79, tmp_call_arg_element_108, tmp_call_arg_element_109 );
    if ( tmp_call_arg_element_107 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );

        frame_module->f_lineno = 506;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 506;
    tmp_call_arg_element_106 = CALL_FUNCTION_WITH_ARGS1( tmp_called_78, tmp_call_arg_element_107 );
    Py_DECREF( tmp_call_arg_element_107 );
    if ( tmp_call_arg_element_106 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );

        frame_module->f_lineno = 506;
        goto frame_exception_exit_1;
    }
    tmp_called_80 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_80 == NULL ))
    {
        tmp_called_80 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_80 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        Py_DECREF( tmp_call_arg_element_106 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 506;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_111 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_111 == NULL ))
    {
        tmp_call_arg_element_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_111 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        Py_DECREF( tmp_call_arg_element_106 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 506;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 506;
    tmp_call_arg_element_110 = CALL_FUNCTION_WITH_ARGS1( tmp_called_80, tmp_call_arg_element_111 );
    if ( tmp_call_arg_element_110 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        Py_DECREF( tmp_call_arg_element_106 );

        frame_module->f_lineno = 506;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 506;
    tmp_dict_key_163 = CALL_FUNCTION_WITH_ARGS2( tmp_called_77, tmp_call_arg_element_106, tmp_call_arg_element_110 );
    Py_DECREF( tmp_call_arg_element_106 );
    Py_DECREF( tmp_call_arg_element_110 );
    if ( tmp_dict_key_163 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );

        frame_module->f_lineno = 506;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_162, tmp_dict_key_163, tmp_dict_value_163 );
    Py_DECREF( tmp_dict_key_163 );
    tmp_dict_value_164 = const_str_digest_ee4b6cfd909f1956d8f9cdb9d88a8e33;
    tmp_called_81 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_81 == NULL ))
    {
        tmp_called_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_81 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 507;
        goto frame_exception_exit_1;
    }

    tmp_called_82 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_82 == NULL ))
    {
        tmp_called_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_82 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 507;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_113 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_113 == NULL ))
    {
        tmp_call_arg_element_113 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_113 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 507;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 507;
    tmp_call_arg_element_112 = CALL_FUNCTION_WITH_ARGS1( tmp_called_82, tmp_call_arg_element_113 );
    if ( tmp_call_arg_element_112 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );

        frame_module->f_lineno = 507;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_114 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_call_arg_element_114 == NULL ))
    {
        tmp_call_arg_element_114 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_call_arg_element_114 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        Py_DECREF( tmp_call_arg_element_112 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124212 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 507;
        goto frame_exception_exit_1;
    }

    tmp_called_83 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_83 == NULL ))
    {
        tmp_called_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_83 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        Py_DECREF( tmp_call_arg_element_112 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 507;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_116 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_116 == NULL ))
    {
        tmp_call_arg_element_116 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_116 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        Py_DECREF( tmp_call_arg_element_112 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 507;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 507;
    tmp_call_arg_element_115 = CALL_FUNCTION_WITH_ARGS1( tmp_called_83, tmp_call_arg_element_116 );
    if ( tmp_call_arg_element_115 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        Py_DECREF( tmp_call_arg_element_112 );

        frame_module->f_lineno = 507;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 507;
    tmp_dict_key_164 = CALL_FUNCTION_WITH_ARGS3( tmp_called_81, tmp_call_arg_element_112, tmp_call_arg_element_114, tmp_call_arg_element_115 );
    Py_DECREF( tmp_call_arg_element_112 );
    Py_DECREF( tmp_call_arg_element_115 );
    if ( tmp_dict_key_164 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );

        frame_module->f_lineno = 507;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_162, tmp_dict_key_164, tmp_dict_value_164 );
    Py_DECREF( tmp_dict_key_164 );
    tmp_dict_value_165 = const_str_digest_55456c681709cce09c41f6b5c4c09b6c;
    tmp_dict_key_165 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_dict_key_165 == NULL ))
    {
        tmp_dict_key_165 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_dict_key_165 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_162 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 508;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_162, tmp_dict_key_165, tmp_dict_value_165 );
    tmp_dict_key_162 = const_str_plain_routine_def;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_162, tmp_dict_value_162 );
    Py_DECREF( tmp_dict_value_162 );
    tmp_dict_value_166 = PyList_New( 2 );
    tmp_list_element_8 = _PyDict_NewPresized( 2 );
    tmp_dict_value_167 = const_str_digest_b53e1cf2d1ffaffc66b7e7af7aa19e19;
    tmp_dict_key_167 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction_warn );

    if (unlikely( tmp_dict_key_167 == NULL ))
    {
        tmp_dict_key_167 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction_warn );
    }

    if ( tmp_dict_key_167 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_166 );
        Py_DECREF( tmp_list_element_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150886 ], 44, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 510;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_8, tmp_dict_key_167, tmp_dict_value_167 );
    tmp_dict_value_168 = const_str_digest_31870eba6b1af25a3fcecd097524b3d4;
    tmp_called_84 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_84 == NULL ))
    {
        tmp_called_84 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_84 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_166 );
        Py_DECREF( tmp_list_element_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 511;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_117 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );

    if (unlikely( tmp_call_arg_element_117 == NULL ))
    {
        tmp_call_arg_element_117 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );
    }

    if ( tmp_call_arg_element_117 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_166 );
        Py_DECREF( tmp_list_element_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125115 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 511;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 511;
    tmp_dict_key_168 = CALL_FUNCTION_WITH_ARGS1( tmp_called_84, tmp_call_arg_element_117 );
    if ( tmp_dict_key_168 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_166 );
        Py_DECREF( tmp_list_element_8 );

        frame_module->f_lineno = 511;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_8, tmp_dict_key_168, tmp_dict_value_168 );
    Py_DECREF( tmp_dict_key_168 );
    PyList_SET_ITEM( tmp_dict_value_166, 0, tmp_list_element_8 );
    tmp_list_element_8 = _PyDict_NewPresized( 1 );
    tmp_dict_value_169 = const_str_digest_8026ad1b3e6ceed21e57865344fb654f;
    tmp_dict_key_169 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );

    if (unlikely( tmp_dict_key_169 == NULL ))
    {
        tmp_dict_key_169 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );
    }

    if ( tmp_dict_key_169 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_166 );
        Py_DECREF( tmp_list_element_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125115 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 512;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_8, tmp_dict_key_169, tmp_dict_value_169 );
    PyList_SET_ITEM( tmp_dict_value_166, 1, tmp_list_element_8 );
    tmp_dict_key_166 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_166, tmp_dict_value_166 );
    Py_DECREF( tmp_dict_value_166 );
    tmp_dict_value_170 = PyList_New( 8 );
    tmp_list_element_9 = _PyDict_NewPresized( 1 );
    tmp_dict_value_171 = const_str_digest_b8bcf6698fa55a1cf1fc5eaebffde12d;
    tmp_dict_key_171 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_171 == NULL ))
    {
        tmp_dict_key_171 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_171 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150818 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 515;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_9, tmp_dict_key_171, tmp_dict_value_171 );
    PyList_SET_ITEM( tmp_dict_value_170, 0, tmp_list_element_9 );
    tmp_list_element_9 = _PyDict_NewPresized( 1 );
    tmp_dict_value_172 = const_str_digest_18429b2363d61bb45e6f19ee193369c0;
    tmp_dict_key_172 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_172 == NULL ))
    {
        tmp_dict_key_172 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_172 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150852 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 519;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_9, tmp_dict_key_172, tmp_dict_value_172 );
    PyList_SET_ITEM( tmp_dict_value_170, 1, tmp_list_element_9 );
    tmp_list_element_9 = _PyDict_NewPresized( 1 );
    tmp_dict_value_173 = const_str_digest_63b243fa195291a4bd10a9d27c0ece83;
    tmp_dict_key_173 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hascallstatement );

    if (unlikely( tmp_dict_key_173 == NULL ))
    {
        tmp_dict_key_173 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hascallstatement );
    }

    if ( tmp_dict_key_173 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126092 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 520;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_9, tmp_dict_key_173, tmp_dict_value_173 );
    PyList_SET_ITEM( tmp_dict_value_170, 2, tmp_list_element_9 );
    tmp_list_element_9 = _PyDict_NewPresized( 1 );
    tmp_dict_value_174 = const_str_digest_fd17d65e20f214ebc5b50e179ff507c1;
    tmp_called_85 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_85 == NULL ))
    {
        tmp_called_85 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_85 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 523;
        goto frame_exception_exit_1;
    }

    tmp_called_86 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_86 == NULL ))
    {
        tmp_called_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_86 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 523;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_119 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hascallstatement );

    if (unlikely( tmp_call_arg_element_119 == NULL ))
    {
        tmp_call_arg_element_119 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hascallstatement );
    }

    if ( tmp_call_arg_element_119 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126092 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 523;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_120 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_120 == NULL ))
    {
        tmp_call_arg_element_120 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_120 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 523;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 523;
    tmp_call_arg_element_118 = CALL_FUNCTION_WITH_ARGS2( tmp_called_86, tmp_call_arg_element_119, tmp_call_arg_element_120 );
    if ( tmp_call_arg_element_118 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );

        frame_module->f_lineno = 523;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 523;
    tmp_dict_key_174 = CALL_FUNCTION_WITH_ARGS1( tmp_called_85, tmp_call_arg_element_118 );
    Py_DECREF( tmp_call_arg_element_118 );
    if ( tmp_dict_key_174 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );

        frame_module->f_lineno = 523;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_9, tmp_dict_key_174, tmp_dict_value_174 );
    Py_DECREF( tmp_dict_key_174 );
    PyList_SET_ITEM( tmp_dict_value_170, 3, tmp_list_element_9 );
    tmp_list_element_9 = _PyDict_NewPresized( 1 );
    tmp_dict_value_175 = const_str_digest_a1b947d4348c132103b0fcc2930bd1fa;
    tmp_dict_key_175 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_175 == NULL ))
    {
        tmp_dict_key_175 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_175 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150852 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 524;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_9, tmp_dict_key_175, tmp_dict_value_175 );
    PyList_SET_ITEM( tmp_dict_value_170, 4, tmp_list_element_9 );
    tmp_list_element_9 = _PyDict_NewPresized( 1 );
    tmp_dict_value_176 = const_str_digest_003412ca7c035dda44b06c662ca81aa5;
    tmp_dict_key_176 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_176 == NULL ))
    {
        tmp_dict_key_176 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_176 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150818 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 525;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_9, tmp_dict_key_176, tmp_dict_value_176 );
    PyList_SET_ITEM( tmp_dict_value_170, 5, tmp_list_element_9 );
    tmp_list_element_9 = _PyDict_NewPresized( 1 );
    tmp_dict_value_177 = const_str_digest_71deca2cdf00c9fa7cdfa5f0049113ff;
    tmp_called_87 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_87 == NULL ))
    {
        tmp_called_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_87 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 526;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_121 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_call_arg_element_121 == NULL ))
    {
        tmp_call_arg_element_121 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_call_arg_element_121 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 526;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_122 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );

    if (unlikely( tmp_call_arg_element_122 == NULL ))
    {
        tmp_call_arg_element_122 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );
    }

    if ( tmp_call_arg_element_122 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125115 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 526;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 526;
    tmp_dict_key_177 = CALL_FUNCTION_WITH_ARGS2( tmp_called_87, tmp_call_arg_element_121, tmp_call_arg_element_122 );
    if ( tmp_dict_key_177 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );

        frame_module->f_lineno = 526;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_9, tmp_dict_key_177, tmp_dict_value_177 );
    Py_DECREF( tmp_dict_key_177 );
    PyList_SET_ITEM( tmp_dict_value_170, 6, tmp_list_element_9 );
    tmp_list_element_9 = _PyDict_NewPresized( 1 );
    tmp_dict_value_178 = const_str_digest_d781c39102afc1fb103df62a9f2201f0;
    tmp_called_88 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_88 == NULL ))
    {
        tmp_called_88 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_88 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 527;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_123 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_call_arg_element_123 == NULL ))
    {
        tmp_call_arg_element_123 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_call_arg_element_123 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 527;
        goto frame_exception_exit_1;
    }

    tmp_called_89 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_89 == NULL ))
    {
        tmp_called_89 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_89 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 527;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_125 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );

    if (unlikely( tmp_call_arg_element_125 == NULL ))
    {
        tmp_call_arg_element_125 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );
    }

    if ( tmp_call_arg_element_125 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125115 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 527;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 527;
    tmp_call_arg_element_124 = CALL_FUNCTION_WITH_ARGS1( tmp_called_89, tmp_call_arg_element_125 );
    if ( tmp_call_arg_element_124 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );

        frame_module->f_lineno = 527;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 527;
    tmp_dict_key_178 = CALL_FUNCTION_WITH_ARGS2( tmp_called_88, tmp_call_arg_element_123, tmp_call_arg_element_124 );
    Py_DECREF( tmp_call_arg_element_124 );
    if ( tmp_dict_key_178 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_170 );
        Py_DECREF( tmp_list_element_9 );

        frame_module->f_lineno = 527;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_9, tmp_dict_key_178, tmp_dict_value_178 );
    Py_DECREF( tmp_dict_key_178 );
    PyList_SET_ITEM( tmp_dict_value_170, 7, tmp_list_element_9 );
    tmp_dict_key_170 = const_str_plain_callfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_170, tmp_dict_value_170 );
    Py_DECREF( tmp_dict_value_170 );
    tmp_dict_value_179 = _PyDict_NewPresized( 1 );
    tmp_dict_value_180 = const_str_digest_ccaa1ea23810f6f3c2d7e6aefb2857f8;
    tmp_dict_key_180 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );

    if (unlikely( tmp_dict_key_180 == NULL ))
    {
        tmp_dict_key_180 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );
    }

    if ( tmp_dict_key_180 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_179 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125115 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 528;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_179, tmp_dict_key_180, tmp_dict_value_180 );
    tmp_dict_key_179 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_179, tmp_dict_value_179 );
    Py_DECREF( tmp_dict_value_179 );
    tmp_dict_value_181 = PyList_New( 4 );
    tmp_list_element_10 = _PyDict_NewPresized( 1 );
    tmp_dict_value_182 = const_str_plain_F_FUNC;
    tmp_called_90 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_90 == NULL ))
    {
        tmp_called_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_90 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_181 );
        Py_DECREF( tmp_list_element_10 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 529;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_126 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isdummyroutine );

    if (unlikely( tmp_call_arg_element_126 == NULL ))
    {
        tmp_call_arg_element_126 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdummyroutine );
    }

    if ( tmp_call_arg_element_126 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_181 );
        Py_DECREF( tmp_list_element_10 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150782 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 529;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 529;
    tmp_dict_key_182 = CALL_FUNCTION_WITH_ARGS1( tmp_called_90, tmp_call_arg_element_126 );
    if ( tmp_dict_key_182 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_181 );
        Py_DECREF( tmp_list_element_10 );

        frame_module->f_lineno = 529;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_10, tmp_dict_key_182, tmp_dict_value_182 );
    Py_DECREF( tmp_dict_key_182 );
    PyList_SET_ITEM( tmp_dict_value_181, 0, tmp_list_element_10 );
    tmp_list_element_10 = _PyDict_NewPresized( 1 );
    tmp_dict_value_183 = const_str_digest_e94bac8f3260b056e46d869b06fc3df5;
    tmp_dict_key_183 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );

    if (unlikely( tmp_dict_key_183 == NULL ))
    {
        tmp_dict_key_183 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );
    }

    if ( tmp_dict_key_183 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_181 );
        Py_DECREF( tmp_list_element_10 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125115 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 530;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_10, tmp_dict_key_183, tmp_dict_value_183 );
    PyList_SET_ITEM( tmp_dict_value_181, 1, tmp_list_element_10 );
    tmp_list_element_10 = _PyDict_NewPresized( 1 );
    tmp_dict_value_184 = const_str_plain_long_long;
    tmp_dict_key_184 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islong_longfunction );

    if (unlikely( tmp_dict_key_184 == NULL ))
    {
        tmp_dict_key_184 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_islong_longfunction );
    }

    if ( tmp_dict_key_184 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_181 );
        Py_DECREF( tmp_list_element_10 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150930 ], 41, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 531;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_10, tmp_dict_key_184, tmp_dict_value_184 );
    PyList_SET_ITEM( tmp_dict_value_181, 2, tmp_list_element_10 );
    tmp_list_element_10 = _PyDict_NewPresized( 1 );
    tmp_dict_value_185 = const_str_plain_long_double;
    tmp_dict_key_185 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islong_doublefunction );

    if (unlikely( tmp_dict_key_185 == NULL ))
    {
        tmp_dict_key_185 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_islong_doublefunction );
    }

    if ( tmp_dict_key_185 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_181 );
        Py_DECREF( tmp_list_element_10 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150971 ], 43, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 532;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_10, tmp_dict_key_185, tmp_dict_value_185 );
    PyList_SET_ITEM( tmp_dict_value_181, 3, tmp_list_element_10 );
    tmp_dict_key_181 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_181, tmp_dict_value_181 );
    Py_DECREF( tmp_dict_value_181 );
    tmp_dict_value_186 = _PyDict_NewPresized( 1 );
    tmp_dict_value_187 = const_str_digest_38bb68b0d7d99ca5566905027683bfde;
    tmp_called_91 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_91 == NULL ))
    {
        tmp_called_91 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_91 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_186 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 533;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_127 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_call_arg_element_127 == NULL ))
    {
        tmp_call_arg_element_127 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_call_arg_element_127 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_186 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124141 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 533;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 533;
    tmp_dict_key_187 = CALL_FUNCTION_WITH_ARGS1( tmp_called_91, tmp_call_arg_element_127 );
    if ( tmp_dict_key_187 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_186 );

        frame_module->f_lineno = 533;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_186, tmp_dict_key_187, tmp_dict_value_187 );
    Py_DECREF( tmp_dict_key_187 );
    tmp_dict_key_186 = const_str_plain_returnformat;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_186, tmp_dict_value_186 );
    Py_DECREF( tmp_dict_value_186 );
    tmp_dict_value_188 = _PyDict_NewPresized( 2 );
    tmp_dict_value_189 = const_str_digest_b209cb6a510b4ec8a54ffbddff8173f4;
    tmp_dict_key_189 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );

    if (unlikely( tmp_dict_key_189 == NULL ))
    {
        tmp_dict_key_189 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );
    }

    if ( tmp_dict_key_189 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_188 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125115 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 534;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_188, tmp_dict_key_189, tmp_dict_value_189 );
    tmp_dict_value_190 = const_str_digest_f6768cb0ae865b6d06874d47205cde23;
    tmp_called_92 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_92 == NULL ))
    {
        tmp_called_92 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_92 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_188 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 535;
        goto frame_exception_exit_1;
    }

    tmp_called_93 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_93 == NULL ))
    {
        tmp_called_93 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_93 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_188 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 535;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_129 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );

    if (unlikely( tmp_call_arg_element_129 == NULL ))
    {
        tmp_call_arg_element_129 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexfunction );
    }

    if ( tmp_call_arg_element_129 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_188 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125115 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 535;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_130 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_call_arg_element_130 == NULL ))
    {
        tmp_call_arg_element_130 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_call_arg_element_130 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_188 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124141 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 535;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 535;
    tmp_call_arg_element_128 = CALL_FUNCTION_WITH_ARGS2( tmp_called_93, tmp_call_arg_element_129, tmp_call_arg_element_130 );
    if ( tmp_call_arg_element_128 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_188 );

        frame_module->f_lineno = 535;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 535;
    tmp_dict_key_190 = CALL_FUNCTION_WITH_ARGS1( tmp_called_92, tmp_call_arg_element_128 );
    Py_DECREF( tmp_call_arg_element_128 );
    if ( tmp_dict_key_190 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_188 );

        frame_module->f_lineno = 535;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_188, tmp_dict_key_190, tmp_dict_value_190 );
    Py_DECREF( tmp_dict_key_190 );
    tmp_dict_key_188 = const_str_plain_return;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_188, tmp_dict_value_188 );
    Py_DECREF( tmp_dict_value_188 );
    tmp_called_94 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_94 == NULL ))
    {
        tmp_called_94 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_94 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 536;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_131 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isfunction );

    if (unlikely( tmp_call_arg_element_131 == NULL ))
    {
        tmp_call_arg_element_131 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isfunction );
    }

    if ( tmp_call_arg_element_131 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51248 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 536;
        goto frame_exception_exit_1;
    }

    tmp_called_95 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_95 == NULL ))
    {
        tmp_called_95 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_95 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 536;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_133 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstringfunction );

    if (unlikely( tmp_call_arg_element_133 == NULL ))
    {
        tmp_call_arg_element_133 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstringfunction );
    }

    if ( tmp_call_arg_element_133 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126171 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 536;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 536;
    tmp_call_arg_element_132 = CALL_FUNCTION_WITH_ARGS1( tmp_called_95, tmp_call_arg_element_133 );
    if ( tmp_call_arg_element_132 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );

        frame_module->f_lineno = 536;
        goto frame_exception_exit_1;
    }
    tmp_called_96 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_96 == NULL ))
    {
        tmp_called_96 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_96 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_call_arg_element_132 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 536;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_135 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isfunction_wrap );

    if (unlikely( tmp_call_arg_element_135 == NULL ))
    {
        tmp_call_arg_element_135 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isfunction_wrap );
    }

    if ( tmp_call_arg_element_135 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_call_arg_element_132 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126250 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 536;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 536;
    tmp_call_arg_element_134 = CALL_FUNCTION_WITH_ARGS1( tmp_called_96, tmp_call_arg_element_135 );
    if ( tmp_call_arg_element_134 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_call_arg_element_132 );

        frame_module->f_lineno = 536;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 536;
    tmp_dict_value_191 = CALL_FUNCTION_WITH_ARGS3( tmp_called_94, tmp_call_arg_element_131, tmp_call_arg_element_132, tmp_call_arg_element_134 );
    Py_DECREF( tmp_call_arg_element_132 );
    Py_DECREF( tmp_call_arg_element_134 );
    if ( tmp_dict_value_191 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );

        frame_module->f_lineno = 536;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_191 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_191, tmp_dict_value_191 );
    Py_DECREF( tmp_dict_value_191 );
    PyList_SET_ITEM( tmp_assign_source_30, 7, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 10 );
    tmp_dict_value_192 = const_str_digest_b8a48d5016ebc922c843de4be3b7b3d3;
    tmp_dict_key_192 = const_str_plain_declfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_192, tmp_dict_value_192 );
    tmp_dict_value_193 = _PyDict_NewPresized( 2 );
    tmp_dict_value_194 = const_str_digest_cf71de3f9023718c59bbed5c352d152c;
    tmp_called_97 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_97 == NULL ))
    {
        tmp_called_97 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_97 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 539;
        goto frame_exception_exit_1;
    }

    tmp_called_98 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_98 == NULL ))
    {
        tmp_called_98 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_98 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 539;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_137 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_137 == NULL ))
    {
        tmp_call_arg_element_137 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_137 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 539;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_138 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_call_arg_element_138 == NULL ))
    {
        tmp_call_arg_element_138 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_call_arg_element_138 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124212 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 539;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 539;
    tmp_call_arg_element_136 = CALL_FUNCTION_WITH_ARGS2( tmp_called_98, tmp_call_arg_element_137, tmp_call_arg_element_138 );
    if ( tmp_call_arg_element_136 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );

        frame_module->f_lineno = 539;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 539;
    tmp_dict_key_194 = CALL_FUNCTION_WITH_ARGS1( tmp_called_97, tmp_call_arg_element_136 );
    Py_DECREF( tmp_call_arg_element_136 );
    if ( tmp_dict_key_194 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );

        frame_module->f_lineno = 539;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_193, tmp_dict_key_194, tmp_dict_value_194 );
    Py_DECREF( tmp_dict_key_194 );
    tmp_dict_value_195 = const_str_digest_ee4b6cfd909f1956d8f9cdb9d88a8e33;
    tmp_called_99 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_99 == NULL ))
    {
        tmp_called_99 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_99 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 542;
        goto frame_exception_exit_1;
    }

    tmp_called_100 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_100 == NULL ))
    {
        tmp_called_100 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_100 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 542;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_140 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );

    if (unlikely( tmp_call_arg_element_140 == NULL ))
    {
        tmp_call_arg_element_140 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ismoduleroutine );
    }

    if ( tmp_call_arg_element_140 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150163 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 542;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 542;
    tmp_call_arg_element_139 = CALL_FUNCTION_WITH_ARGS1( tmp_called_100, tmp_call_arg_element_140 );
    if ( tmp_call_arg_element_139 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );

        frame_module->f_lineno = 542;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_141 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_call_arg_element_141 == NULL ))
    {
        tmp_call_arg_element_141 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_call_arg_element_141 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );
        Py_DECREF( tmp_call_arg_element_139 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124212 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 542;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 542;
    tmp_dict_key_195 = CALL_FUNCTION_WITH_ARGS2( tmp_called_99, tmp_call_arg_element_139, tmp_call_arg_element_141 );
    Py_DECREF( tmp_call_arg_element_139 );
    if ( tmp_dict_key_195 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_193 );

        frame_module->f_lineno = 542;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_193, tmp_dict_key_195, tmp_dict_value_195 );
    Py_DECREF( tmp_dict_key_195 );
    tmp_dict_key_193 = const_str_plain_routine_def;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_193, tmp_dict_value_193 );
    Py_DECREF( tmp_dict_value_193 );
    tmp_dict_value_196 = LIST_COPY( const_list_9af870e8ed9f6c337cdc0c36a763a6f2_list );
    tmp_dict_key_196 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_196, tmp_dict_value_196 );
    Py_DECREF( tmp_dict_value_196 );
    tmp_dict_value_197 = const_str_digest_d8d8715e262515dd6621f0a26df29636;
    tmp_dict_key_197 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_197, tmp_dict_value_197 );
    tmp_dict_value_198 = PyList_New( 15 );
    tmp_list_element_11 = const_str_digest_8f23eb1de33799d1a32885fde13aac22;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 0, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_20c9fc8f6f5e6e56dc857edd08f619c0;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 1, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_bb8c2e7309a7a91ebcd3b999c51969a2;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 2, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_44b5e885884093b35997aaab01d17f03;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 3, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_866c31fc8e3f50f10cabca22bcc3b68e;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 4, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_d5368055a448d76633f47a60bcd4479b;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 5, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_003412ca7c035dda44b06c662ca81aa5;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 6, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_91013d6fce3112b1a72b834fdb720cb9;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 7, tmp_list_element_11 );
    tmp_list_element_11 = _PyDict_NewPresized( 1 );
    tmp_dict_value_199 = const_str_digest_94f7eeb67070e06cba40225d7f6dac94;
    tmp_dict_key_199 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_199 == NULL ))
    {
        tmp_dict_key_199 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_199 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_198 );
        Py_DECREF( tmp_list_element_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150818 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 557;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_11, tmp_dict_key_199, tmp_dict_value_199 );
    PyList_SET_ITEM( tmp_dict_value_198, 8, tmp_list_element_11 );
    tmp_list_element_11 = _PyDict_NewPresized( 1 );
    tmp_dict_value_200 = const_str_digest_7298c2a4c9a6e315e932bffab830fb0b;
    tmp_dict_key_200 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_200 == NULL ))
    {
        tmp_dict_key_200 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_200 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_198 );
        Py_DECREF( tmp_list_element_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150852 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 561;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_11, tmp_dict_key_200, tmp_dict_value_200 );
    PyList_SET_ITEM( tmp_dict_value_198, 9, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_6e4437baab8cc015d0bec086001fc38b;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 10, tmp_list_element_11 );
    tmp_list_element_11 = _PyDict_NewPresized( 1 );
    tmp_dict_value_201 = const_str_digest_e982083adb75f151dd46b8ba5198bcc0;
    tmp_dict_key_201 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isthreadsafe );

    if (unlikely( tmp_dict_key_201 == NULL ))
    {
        tmp_dict_key_201 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isthreadsafe );
    }

    if ( tmp_dict_key_201 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_198 );
        Py_DECREF( tmp_list_element_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150852 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 569;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_11, tmp_dict_key_201, tmp_dict_value_201 );
    PyList_SET_ITEM( tmp_dict_value_198, 11, tmp_list_element_11 );
    tmp_list_element_11 = _PyDict_NewPresized( 1 );
    tmp_dict_value_202 = const_str_digest_6c41c39826425526467cf3e430a77c15;
    tmp_dict_key_202 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasexternals );

    if (unlikely( tmp_dict_key_202 == NULL ))
    {
        tmp_dict_key_202 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasexternals );
    }

    if ( tmp_dict_key_202 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_198 );
        Py_DECREF( tmp_list_element_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150818 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 570;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_11, tmp_dict_key_202, tmp_dict_value_202 );
    PyList_SET_ITEM( tmp_dict_value_198, 12, tmp_list_element_11 );
    tmp_list_element_11 = _PyDict_NewPresized( 1 );
    tmp_dict_value_203 = const_str_digest_c6f825031c2aa893b389bf32c2ca7e84;
    tmp_dict_key_203 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_203 == NULL ))
    {
        tmp_dict_key_203 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_203 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        Py_DECREF( tmp_dict_value_198 );
        Py_DECREF( tmp_list_element_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 571;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_11, tmp_dict_key_203, tmp_dict_value_203 );
    PyList_SET_ITEM( tmp_dict_value_198, 13, tmp_list_element_11 );
    tmp_list_element_11 = const_str_digest_5292336f06adab3d25d49ce1bcb754fa;
    Py_INCREF( tmp_list_element_11 );
    PyList_SET_ITEM( tmp_dict_value_198, 14, tmp_list_element_11 );
    tmp_dict_key_198 = const_str_plain_callfortranroutine;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_198, tmp_dict_value_198 );
    Py_DECREF( tmp_dict_value_198 );
    tmp_dict_value_204 = const_str_digest_38bb68b0d7d99ca5566905027683bfde;
    tmp_dict_key_204 = const_str_plain_returnformat;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_204, tmp_dict_value_204 );
    tmp_dict_value_205 = const_str_digest_f6768cb0ae865b6d06874d47205cde23;
    tmp_dict_key_205 = const_str_plain_return;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_205, tmp_dict_value_205 );
    tmp_dict_value_206 = const_str_digest_16cee986fdf2b02b5fedad397daf617e;
    tmp_dict_key_206 = const_str_plain_freemem;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_206, tmp_dict_value_206 );
    tmp_dict_value_207 = LIST_COPY( const_list_2a1cb5f1b6ad96684950fc2bb3e18869_list );
    tmp_dict_key_207 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_207, tmp_dict_value_207 );
    Py_DECREF( tmp_dict_value_207 );
    tmp_called_101 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_101 == NULL ))
    {
        tmp_called_101 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_101 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 578;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_142 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstringfunction );

    if (unlikely( tmp_call_arg_element_142 == NULL ))
    {
        tmp_call_arg_element_142 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstringfunction );
    }

    if ( tmp_call_arg_element_142 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126171 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 578;
        goto frame_exception_exit_1;
    }

    tmp_called_102 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_102 == NULL ))
    {
        tmp_called_102 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_102 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 578;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_144 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isfunction_wrap );

    if (unlikely( tmp_call_arg_element_144 == NULL ))
    {
        tmp_call_arg_element_144 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isfunction_wrap );
    }

    if ( tmp_call_arg_element_144 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126250 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 578;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 578;
    tmp_call_arg_element_143 = CALL_FUNCTION_WITH_ARGS1( tmp_called_102, tmp_call_arg_element_144 );
    if ( tmp_call_arg_element_143 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );

        frame_module->f_lineno = 578;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 578;
    tmp_dict_value_208 = CALL_FUNCTION_WITH_ARGS2( tmp_called_101, tmp_call_arg_element_142, tmp_call_arg_element_143 );
    Py_DECREF( tmp_call_arg_element_143 );
    if ( tmp_dict_value_208 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );

        frame_module->f_lineno = 578;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_208 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_208, tmp_dict_value_208 );
    Py_DECREF( tmp_dict_value_208 );
    PyList_SET_ITEM( tmp_assign_source_30, 8, tmp_list_element_2 );
    tmp_list_element_2 = _PyDict_NewPresized( 4 );
    tmp_dict_value_209 = const_str_digest_0801662fed55e93695b42ad17d40560e;
    tmp_dict_key_209 = const_str_plain_routdebugenter;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_209, tmp_dict_value_209 );
    tmp_dict_value_210 = const_str_digest_f763cd7bcd9a235a07c2d522dff79b8e;
    tmp_dict_key_210 = const_str_plain_routdebugleave;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_210, tmp_dict_value_210 );
    tmp_dict_value_211 = const_str_digest_42bb9daf118d76a1fcc036f908957a47;
    tmp_dict_key_211 = const_str_plain_routdebugfailure;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_211, tmp_dict_value_211 );
    tmp_dict_value_212 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_value_212 == NULL ))
    {
        tmp_dict_value_212 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_value_212 == NULL )
    {
        Py_DECREF( tmp_assign_source_30 );
        Py_DECREF( tmp_list_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 584;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_212 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_2, tmp_dict_key_212, tmp_dict_value_212 );
    PyList_SET_ITEM( tmp_assign_source_30, 9, tmp_list_element_2 );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_rout_rules, tmp_assign_source_30 );
    tmp_assign_source_31 = _PyDict_NewPresized( 11 );
    tmp_dict_value_213 = const_str_plain_long_long;
    tmp_dict_key_213 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islong_long );

    if (unlikely( tmp_dict_key_213 == NULL ))
    {
        tmp_dict_key_213 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_islong_long );
    }

    if ( tmp_dict_key_213 == NULL )
    {
        Py_DECREF( tmp_assign_source_31 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125033 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 590;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_assign_source_31, tmp_dict_key_213, tmp_dict_value_213 );
    tmp_dict_value_214 = const_str_plain_long_double;
    tmp_dict_key_214 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islong_double );

    if (unlikely( tmp_dict_key_214 == NULL ))
    {
        tmp_dict_key_214 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_islong_double );
    }

    if ( tmp_dict_key_214 == NULL )
    {
        Py_DECREF( tmp_assign_source_31 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125073 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 591;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_assign_source_31, tmp_dict_key_214, tmp_dict_value_214 );
    tmp_dict_value_215 = const_str_plain_complex_long_double;
    tmp_dict_key_215 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islong_complex );

    if (unlikely( tmp_dict_key_215 == NULL ))
    {
        tmp_dict_key_215 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_islong_complex );
    }

    if ( tmp_dict_key_215 == NULL )
    {
        Py_DECREF( tmp_assign_source_31 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151014 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 592;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_assign_source_31, tmp_dict_key_215, tmp_dict_value_215 );
    tmp_dict_value_216 = const_str_plain_unsigned_char;
    tmp_dict_key_216 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_char );

    if (unlikely( tmp_dict_key_216 == NULL ))
    {
        tmp_dict_key_216 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_char );
    }

    if ( tmp_dict_key_216 == NULL )
    {
        Py_DECREF( tmp_assign_source_31 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151050 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 593;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_assign_source_31, tmp_dict_key_216, tmp_dict_value_216 );
    tmp_dict_value_217 = const_str_plain_unsigned_short;
    tmp_dict_key_217 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_short );

    if (unlikely( tmp_dict_key_217 == NULL ))
    {
        tmp_dict_key_217 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_short );
    }

    if ( tmp_dict_key_217 == NULL )
    {
        Py_DECREF( tmp_assign_source_31 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151087 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 594;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_assign_source_31, tmp_dict_key_217, tmp_dict_value_217 );
    tmp_dict_value_218 = const_str_plain_unsigned;
    tmp_dict_key_218 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned );

    if (unlikely( tmp_dict_key_218 == NULL ))
    {
        tmp_dict_key_218 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned );
    }

    if ( tmp_dict_key_218 == NULL )
    {
        Py_DECREF( tmp_assign_source_31 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151125 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 595;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_assign_source_31, tmp_dict_key_218, tmp_dict_value_218 );
    tmp_dict_value_219 = const_str_plain_unsigned_long_long;
    tmp_dict_key_219 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_long_long );

    if (unlikely( tmp_dict_key_219 == NULL ))
    {
        tmp_dict_key_219 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_long_long );
    }

    if ( tmp_dict_key_219 == NULL )
    {
        Py_DECREF( tmp_assign_source_31 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151157 ], 42, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 596;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_assign_source_31, tmp_dict_key_219, tmp_dict_value_219 );
    tmp_dict_value_220 = const_str_plain_unsigned_char;
    tmp_dict_key_220 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_chararray );

    if (unlikely( tmp_dict_key_220 == NULL ))
    {
        tmp_dict_key_220 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_chararray );
    }

    if ( tmp_dict_key_220 == NULL )
    {
        Py_DECREF( tmp_assign_source_31 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151199 ], 42, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 597;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_assign_source_31, tmp_dict_key_220, tmp_dict_value_220 );
    tmp_dict_value_221 = const_str_plain_unsigned_short;
    tmp_dict_key_221 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_shortarray );

    if (unlikely( tmp_dict_key_221 == NULL ))
    {
        tmp_dict_key_221 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_shortarray );
    }

    if ( tmp_dict_key_221 == NULL )
    {
        Py_DECREF( tmp_assign_source_31 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151241 ], 43, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 598;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_assign_source_31, tmp_dict_key_221, tmp_dict_value_221 );
    tmp_dict_value_222 = const_str_plain_unsigned_long_long;
    tmp_dict_key_222 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_long_longarray );

    if (unlikely( tmp_dict_key_222 == NULL ))
    {
        tmp_dict_key_222 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_long_longarray );
    }

    if ( tmp_dict_key_222 == NULL )
    {
        Py_DECREF( tmp_assign_source_31 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151284 ], 47, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 599;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_assign_source_31, tmp_dict_key_222, tmp_dict_value_222 );
    tmp_dict_value_223 = const_str_plain_long_long;
    tmp_dict_key_223 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_issigned_long_longarray );

    if (unlikely( tmp_dict_key_223 == NULL ))
    {
        tmp_dict_key_223 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_issigned_long_longarray );
    }

    if ( tmp_dict_key_223 == NULL )
    {
        Py_DECREF( tmp_assign_source_31 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151331 ], 45, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 600;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_assign_source_31, tmp_dict_key_223, tmp_dict_value_223 );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_typedef_need_dict, tmp_assign_source_31 );
    tmp_assign_source_32 = PyList_New( 15 );
    tmp_list_element_12 = _PyDict_NewPresized( 1 );
    tmp_dict_value_224 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_sepdict );

    if (unlikely( tmp_dict_value_224 == NULL ))
    {
        tmp_dict_value_224 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sepdict );
    }

    if ( tmp_dict_value_224 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150753 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 605;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_224 = const_str_plain_separatorsfor;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_224, tmp_dict_value_224 );
    PyList_SET_ITEM( tmp_assign_source_32, 0, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_225 = PyList_New( 2 );
    tmp_list_element_13 = const_str_digest_15904c114d20d74a77febfc4dfb77b85;
    Py_INCREF( tmp_list_element_13 );
    PyList_SET_ITEM( tmp_dict_value_225, 0, tmp_list_element_13 );
    tmp_list_element_13 = _PyDict_NewPresized( 1 );
    tmp_dict_value_226 = const_str_digest_bd69b5f39c936f279a15218b0da5ea9b;
    tmp_dict_key_226 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_226 == NULL ))
    {
        tmp_dict_key_226 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_226 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_225 );
        Py_DECREF( tmp_list_element_13 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 609;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_13, tmp_dict_key_226, tmp_dict_value_226 );
    PyList_SET_ITEM( tmp_dict_value_225, 1, tmp_list_element_13 );
    tmp_dict_key_225 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_225, tmp_dict_value_225 );
    Py_DECREF( tmp_dict_value_225 );
    tmp_dict_value_227 = const_str_digest_2fa8b74c150f98704fd78cb5be16a2d3;
    tmp_dict_key_227 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_227, tmp_dict_value_227 );
    tmp_dict_value_228 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_typedef_need_dict );

    if (unlikely( tmp_dict_value_228 == NULL ))
    {
        tmp_dict_value_228 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_typedef_need_dict );
    }

    if ( tmp_dict_value_228 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151376 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 611;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_228 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_228, tmp_dict_value_228 );
    PyList_SET_ITEM( tmp_assign_source_32, 1, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 4 );
    tmp_dict_value_229 = const_str_digest_0d59acae85d063e3f672d8da6daa0a85;
    tmp_dict_key_229 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_229, tmp_dict_value_229 );
    tmp_dict_value_230 = _PyDict_NewPresized( 1 );
    tmp_dict_value_231 = const_str_digest_890854844f87190b1c6e74a24b3f6e6e;
    tmp_dict_key_231 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_231 == NULL ))
    {
        tmp_dict_key_231 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_231 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_230 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125444 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 616;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_230, tmp_dict_key_231, tmp_dict_value_231 );
    tmp_dict_key_230 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_230, tmp_dict_value_230 );
    Py_DECREF( tmp_dict_value_230 );
    tmp_dict_value_232 = _PyDict_NewPresized( 1 );
    tmp_dict_value_233 = const_str_digest_3661f078f2728e5304b2e950f133b5c4;
    tmp_dict_key_233 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_233 == NULL ))
    {
        tmp_dict_key_233 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_233 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_232 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125444 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 617;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_232, tmp_dict_key_233, tmp_dict_value_233 );
    tmp_dict_key_232 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_232, tmp_dict_value_232 );
    Py_DECREF( tmp_dict_value_232 );
    tmp_called_103 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_103 == NULL ))
    {
        tmp_called_103 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_103 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 618;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_145 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_call_arg_element_145 == NULL ))
    {
        tmp_call_arg_element_145 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_call_arg_element_145 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 72345 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 618;
        goto frame_exception_exit_1;
    }

    tmp_called_104 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_104 == NULL ))
    {
        tmp_called_104 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_104 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 618;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_147 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_call_arg_element_147 == NULL ))
    {
        tmp_call_arg_element_147 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_call_arg_element_147 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124745 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 618;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 618;
    tmp_call_arg_element_146 = CALL_FUNCTION_WITH_ARGS1( tmp_called_104, tmp_call_arg_element_147 );
    if ( tmp_call_arg_element_146 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );

        frame_module->f_lineno = 618;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 618;
    tmp_dict_value_234 = CALL_FUNCTION_WITH_ARGS2( tmp_called_103, tmp_call_arg_element_145, tmp_call_arg_element_146 );
    Py_DECREF( tmp_call_arg_element_146 );
    if ( tmp_dict_value_234 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );

        frame_module->f_lineno = 618;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_234 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_234, tmp_dict_value_234 );
    Py_DECREF( tmp_dict_value_234 );
    PyList_SET_ITEM( tmp_assign_source_32, 2, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 5 );
    tmp_dict_value_235 = const_str_digest_09de792d93cc23e6cd4f80b6fa458fd3;
    tmp_dict_key_235 = const_str_plain_return;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_235, tmp_dict_value_235 );
    tmp_dict_value_236 = const_str_digest_52f3cb551798f750c7eedaa7874151b2;
    tmp_dict_key_236 = const_str_plain_docstrout;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_236, tmp_dict_value_236 );
    tmp_dict_value_237 = const_str_digest_f872d11254dc4965c1a21e47d3db82a2;
    tmp_dict_key_237 = const_str_plain_docreturn;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_237, tmp_dict_value_237 );
    tmp_dict_value_238 = const_str_digest_e5fa1be03dc4204e78792261a4698ad0;
    tmp_dict_key_238 = const_str_plain_returnformat;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_238, tmp_dict_value_238 );
    tmp_called_105 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_105 == NULL ))
    {
        tmp_called_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_105 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 625;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_148 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_call_arg_element_148 == NULL ))
    {
        tmp_call_arg_element_148 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_call_arg_element_148 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 72345 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 625;
        goto frame_exception_exit_1;
    }

    tmp_called_106 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_106 == NULL ))
    {
        tmp_called_106 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_106 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 625;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_150 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_call_arg_element_150 == NULL ))
    {
        tmp_call_arg_element_150 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_call_arg_element_150 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124745 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 625;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 625;
    tmp_call_arg_element_149 = CALL_FUNCTION_WITH_ARGS1( tmp_called_106, tmp_call_arg_element_150 );
    if ( tmp_call_arg_element_149 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );

        frame_module->f_lineno = 625;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_151 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_call_arg_element_151 == NULL ))
    {
        tmp_call_arg_element_151 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_call_arg_element_151 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_call_arg_element_149 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124107 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 625;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 625;
    tmp_dict_value_239 = CALL_FUNCTION_WITH_ARGS3( tmp_called_105, tmp_call_arg_element_148, tmp_call_arg_element_149, tmp_call_arg_element_151 );
    Py_DECREF( tmp_call_arg_element_149 );
    if ( tmp_dict_value_239 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );

        frame_module->f_lineno = 625;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_239 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_239, tmp_dict_value_239 );
    Py_DECREF( tmp_dict_value_239 );
    PyList_SET_ITEM( tmp_assign_source_32, 3, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_240 = const_str_digest_6f3504cf0f8ede84a5eacc957cd112c0;
    tmp_dict_key_240 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_240, tmp_dict_value_240 );
    tmp_dict_value_241 = _PyDict_NewPresized( 1 );
    tmp_dict_value_242 = const_str_digest_b4d5fd0edbbdd276f1a0a17ef81e8860;
    tmp_dict_key_242 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_242 == NULL ))
    {
        tmp_dict_key_242 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_242 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_241 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125444 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 630;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_241, tmp_dict_key_242, tmp_dict_value_242 );
    tmp_dict_key_241 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_241, tmp_dict_value_241 );
    Py_DECREF( tmp_dict_value_241 );
    tmp_dict_value_243 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_dict_value_243 == NULL ))
    {
        tmp_dict_value_243 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_dict_value_243 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124745 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 631;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_243 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_243, tmp_dict_value_243 );
    PyList_SET_ITEM( tmp_assign_source_32, 4, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_244 = LIST_COPY( const_list_10b104c3768849b37f92dfc64a682f14_list );
    tmp_dict_key_244 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_244, tmp_dict_value_244 );
    Py_DECREF( tmp_dict_value_244 );
    tmp_dict_value_245 = LIST_COPY( const_list_str_digest_901a22001a0c7f25add446a5f68900d0_list );
    tmp_dict_key_245 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_245, tmp_dict_value_245 );
    Py_DECREF( tmp_dict_value_245 );
    tmp_dict_value_246 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstring );

    if (unlikely( tmp_dict_value_246 == NULL ))
    {
        tmp_dict_value_246 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstring );
    }

    if ( tmp_dict_value_246 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124629 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 639;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_246 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_246, tmp_dict_value_246 );
    PyList_SET_ITEM( tmp_assign_source_32, 5, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_247 = LIST_COPY( const_list_53e499b918b44aac469e052ee883b608_list );
    tmp_dict_key_247 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_247, tmp_dict_value_247 );
    Py_DECREF( tmp_dict_value_247 );
    tmp_dict_value_248 = PyList_New( 3 );
    tmp_list_element_14 = const_str_digest_901a22001a0c7f25add446a5f68900d0;
    Py_INCREF( tmp_list_element_14 );
    PyList_SET_ITEM( tmp_dict_value_248, 0, tmp_list_element_14 );
    tmp_list_element_14 = _PyDict_NewPresized( 1 );
    tmp_dict_value_249 = const_str_plain_forcomb;
    tmp_dict_key_249 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_249 == NULL ))
    {
        tmp_dict_key_249 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_249 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_248 );
        Py_DECREF( tmp_list_element_14 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125444 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 647;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_14, tmp_dict_key_249, tmp_dict_value_249 );
    PyList_SET_ITEM( tmp_dict_value_248, 1, tmp_list_element_14 );
    tmp_list_element_14 = _PyDict_NewPresized( 1 );
    tmp_dict_value_250 = const_str_plain_CFUNCSMESS;
    tmp_dict_key_250 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_250 == NULL ))
    {
        tmp_dict_key_250 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_250 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_248 );
        Py_DECREF( tmp_list_element_14 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125444 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 647;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_14, tmp_dict_key_250, tmp_dict_value_250 );
    PyList_SET_ITEM( tmp_dict_value_248, 2, tmp_list_element_14 );
    tmp_dict_key_248 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_248, tmp_dict_value_248 );
    Py_DECREF( tmp_dict_value_248 );
    tmp_dict_value_251 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_dict_value_251 == NULL ))
    {
        tmp_dict_value_251 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_dict_value_251 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124593 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 648;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_251 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_251, tmp_dict_value_251 );
    PyList_SET_ITEM( tmp_assign_source_32, 6, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 1 );
    tmp_called_107 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_107 == NULL ))
    {
        tmp_called_107 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_107 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 652;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_152 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_call_arg_element_152 == NULL ))
    {
        tmp_call_arg_element_152 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_call_arg_element_152 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124593 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 652;
        goto frame_exception_exit_1;
    }

    tmp_called_108 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_108 == NULL ))
    {
        tmp_called_108 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_108 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 652;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_154 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexarray );

    if (unlikely( tmp_call_arg_element_154 == NULL ))
    {
        tmp_call_arg_element_154 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexarray );
    }

    if ( tmp_call_arg_element_154 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128275 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 652;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 652;
    tmp_call_arg_element_153 = CALL_FUNCTION_WITH_ARGS1( tmp_called_108, tmp_call_arg_element_154 );
    if ( tmp_call_arg_element_153 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );

        frame_module->f_lineno = 652;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 652;
    tmp_dict_value_252 = CALL_FUNCTION_WITH_ARGS2( tmp_called_107, tmp_call_arg_element_152, tmp_call_arg_element_153 );
    Py_DECREF( tmp_call_arg_element_153 );
    if ( tmp_dict_value_252 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );

        frame_module->f_lineno = 652;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_252 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_252, tmp_dict_value_252 );
    Py_DECREF( tmp_dict_value_252 );
    PyList_SET_ITEM( tmp_assign_source_32, 7, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 1 );
    tmp_called_109 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_109 == NULL ))
    {
        tmp_called_109 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_109 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 654;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_155 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_call_arg_element_155 == NULL ))
    {
        tmp_call_arg_element_155 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_call_arg_element_155 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124593 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 654;
        goto frame_exception_exit_1;
    }

    tmp_called_110 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_110 == NULL ))
    {
        tmp_called_110 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_110 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 654;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_157 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexarray );

    if (unlikely( tmp_call_arg_element_157 == NULL ))
    {
        tmp_call_arg_element_157 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexarray );
    }

    if ( tmp_call_arg_element_157 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128275 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 654;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 654;
    tmp_call_arg_element_156 = CALL_FUNCTION_WITH_ARGS1( tmp_called_110, tmp_call_arg_element_157 );
    if ( tmp_call_arg_element_156 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );

        frame_module->f_lineno = 654;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_158 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_call_arg_element_158 == NULL ))
    {
        tmp_call_arg_element_158 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_call_arg_element_158 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_call_arg_element_156 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 654;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 654;
    tmp_dict_value_253 = CALL_FUNCTION_WITH_ARGS3( tmp_called_109, tmp_call_arg_element_155, tmp_call_arg_element_156, tmp_call_arg_element_158 );
    Py_DECREF( tmp_call_arg_element_156 );
    if ( tmp_dict_value_253 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );

        frame_module->f_lineno = 654;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_253 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_253, tmp_dict_value_253 );
    Py_DECREF( tmp_dict_value_253 );
    PyList_SET_ITEM( tmp_assign_source_32, 8, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_254 = const_str_digest_034683ceccce831b3c4724622e7c61e0;
    tmp_dict_key_254 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_254, tmp_dict_value_254 );
    tmp_dict_value_255 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isint1array );

    if (unlikely( tmp_dict_value_255 == NULL ))
    {
        tmp_dict_value_255 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isint1array );
    }

    if ( tmp_dict_value_255 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151415 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 658;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_255 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_255, tmp_dict_value_255 );
    tmp_dict_value_256 = const_str_empty;
    tmp_dict_key_256 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_256, tmp_dict_value_256 );
    PyList_SET_ITEM( tmp_assign_source_32, 9, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_257 = const_str_digest_034683ceccce831b3c4724622e7c61e0;
    tmp_dict_key_257 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_257, tmp_dict_value_257 );
    tmp_dict_value_258 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_chararray );

    if (unlikely( tmp_dict_value_258 == NULL ))
    {
        tmp_dict_value_258 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_chararray );
    }

    if ( tmp_dict_value_258 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151199 ], 42, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 663;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_258 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_258, tmp_dict_value_258 );
    tmp_dict_value_259 = const_str_empty;
    tmp_dict_key_259 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_259, tmp_dict_value_259 );
    PyList_SET_ITEM( tmp_assign_source_32, 10, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_260 = const_str_digest_034683ceccce831b3c4724622e7c61e0;
    tmp_dict_key_260 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_260, tmp_dict_value_260 );
    tmp_dict_value_261 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_shortarray );

    if (unlikely( tmp_dict_value_261 == NULL ))
    {
        tmp_dict_value_261 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_shortarray );
    }

    if ( tmp_dict_value_261 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151241 ], 43, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 668;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_261 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_261, tmp_dict_value_261 );
    tmp_dict_value_262 = const_str_empty;
    tmp_dict_key_262 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_262, tmp_dict_value_262 );
    PyList_SET_ITEM( tmp_assign_source_32, 11, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_263 = const_str_digest_034683ceccce831b3c4724622e7c61e0;
    tmp_dict_key_263 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_263, tmp_dict_value_263 );
    tmp_dict_value_264 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_long_longarray );

    if (unlikely( tmp_dict_value_264 == NULL ))
    {
        tmp_dict_value_264 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_long_longarray );
    }

    if ( tmp_dict_value_264 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151284 ], 47, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 673;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_264 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_264, tmp_dict_value_264 );
    tmp_dict_value_265 = const_str_empty;
    tmp_dict_key_265 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_265, tmp_dict_value_265 );
    PyList_SET_ITEM( tmp_assign_source_32, 12, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_266 = const_str_digest_034683ceccce831b3c4724622e7c61e0;
    tmp_dict_key_266 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_266, tmp_dict_value_266 );
    tmp_dict_value_267 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexarray );

    if (unlikely( tmp_dict_value_267 == NULL ))
    {
        tmp_dict_value_267 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexarray );
    }

    if ( tmp_dict_value_267 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128275 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 678;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_267 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_267, tmp_dict_value_267 );
    tmp_dict_value_268 = const_str_empty;
    tmp_dict_key_268 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_268, tmp_dict_value_268 );
    PyList_SET_ITEM( tmp_assign_source_32, 13, tmp_list_element_12 );
    tmp_list_element_12 = _PyDict_NewPresized( 3 );
    tmp_dict_value_269 = _PyDict_NewPresized( 1 );
    tmp_dict_value_270 = const_str_digest_fa68c6dda4f168588cd3f272b7e3b4fb;
    tmp_dict_key_270 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarrayofstrings );

    if (unlikely( tmp_dict_key_270 == NULL ))
    {
        tmp_dict_key_270 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarrayofstrings );
    }

    if ( tmp_dict_key_270 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        Py_DECREF( tmp_dict_value_269 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126501 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 683;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_269, tmp_dict_key_270, tmp_dict_value_270 );
    tmp_dict_key_269 = const_str_plain_callfortranappend;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_269, tmp_dict_value_269 );
    Py_DECREF( tmp_dict_value_269 );
    tmp_dict_value_271 = const_str_plain_string;
    tmp_dict_key_271 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_271, tmp_dict_value_271 );
    tmp_dict_value_272 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstringarray );

    if (unlikely( tmp_dict_value_272 == NULL ))
    {
        tmp_dict_value_272 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstringarray );
    }

    if ( tmp_dict_value_272 == NULL )
    {
        Py_DECREF( tmp_assign_source_32 );
        Py_DECREF( tmp_list_element_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124666 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 685;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_272 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_12, tmp_dict_key_272, tmp_dict_value_272 );
    PyList_SET_ITEM( tmp_assign_source_32, 14, tmp_list_element_12 );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_aux_rules, tmp_assign_source_32 );
    tmp_assign_source_33 = PyList_New( 42 );
    tmp_list_element_15 = _PyDict_NewPresized( 1 );
    tmp_dict_value_273 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_sepdict );

    if (unlikely( tmp_dict_value_273 == NULL ))
    {
        tmp_dict_value_273 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sepdict );
    }

    if ( tmp_dict_value_273 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 150753 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 691;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_273 = const_str_plain_separatorsfor;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_273, tmp_dict_value_273 );
    PyList_SET_ITEM( tmp_assign_source_33, 0, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 4 );
    tmp_dict_value_274 = PyList_New( 2 );
    tmp_list_element_16 = const_str_digest_c3144b55fa49931d99eadea25c55a6a9;
    Py_INCREF( tmp_list_element_16 );
    PyList_SET_ITEM( tmp_dict_value_274, 0, tmp_list_element_16 );
    tmp_list_element_16 = _PyDict_NewPresized( 1 );
    tmp_dict_value_275 = const_str_digest_bd69b5f39c936f279a15218b0da5ea9b;
    tmp_dict_key_275 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_275 == NULL ))
    {
        tmp_dict_key_275 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_275 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_274 );
        Py_DECREF( tmp_list_element_16 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 695;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_16, tmp_dict_key_275, tmp_dict_value_275 );
    PyList_SET_ITEM( tmp_dict_value_274, 1, tmp_list_element_16 );
    tmp_dict_key_274 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_274, tmp_dict_value_274 );
    Py_DECREF( tmp_dict_value_274 );
    tmp_dict_value_276 = const_str_digest_2fa8b74c150f98704fd78cb5be16a2d3;
    tmp_dict_key_276 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_276, tmp_dict_value_276 );
    tmp_dict_value_277 = const_str_empty;
    tmp_dict_key_277 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_277, tmp_dict_value_277 );
    tmp_dict_value_278 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_typedef_need_dict );

    if (unlikely( tmp_dict_value_278 == NULL ))
    {
        tmp_dict_value_278 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_typedef_need_dict );
    }

    if ( tmp_dict_value_278 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151376 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 698;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_278 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_278, tmp_dict_value_278 );
    PyList_SET_ITEM( tmp_assign_source_33, 1, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 7 );
    tmp_dict_value_279 = _PyDict_NewPresized( 1 );
    tmp_dict_value_280 = const_str_digest_f5c55f1a250689d1c890b2eab5aa0071;
    tmp_called_111 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_111 == NULL ))
    {
        tmp_called_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_111 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_279 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 702;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_159 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_call_arg_element_159 == NULL ))
    {
        tmp_call_arg_element_159 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_call_arg_element_159 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_279 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124244 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 702;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_160 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_call_arg_element_160 == NULL ))
    {
        tmp_call_arg_element_160 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_call_arg_element_160 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_279 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 702;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 702;
    tmp_dict_key_280 = CALL_FUNCTION_WITH_ARGS2( tmp_called_111, tmp_call_arg_element_159, tmp_call_arg_element_160 );
    if ( tmp_dict_key_280 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_279 );

        frame_module->f_lineno = 702;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_279, tmp_dict_key_280, tmp_dict_value_280 );
    Py_DECREF( tmp_dict_key_280 );
    tmp_dict_key_279 = const_str_plain_docstropt;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_279, tmp_dict_value_279 );
    Py_DECREF( tmp_dict_value_279 );
    tmp_dict_value_281 = _PyDict_NewPresized( 1 );
    tmp_dict_value_282 = const_str_digest_f5c55f1a250689d1c890b2eab5aa0071;
    tmp_called_112 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_112 == NULL ))
    {
        tmp_called_112 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_112 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_281 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 703;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_161 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_call_arg_element_161 == NULL ))
    {
        tmp_call_arg_element_161 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_call_arg_element_161 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_281 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128672 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 703;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_162 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_call_arg_element_162 == NULL ))
    {
        tmp_call_arg_element_162 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_call_arg_element_162 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_281 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 703;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 703;
    tmp_dict_key_282 = CALL_FUNCTION_WITH_ARGS2( tmp_called_112, tmp_call_arg_element_161, tmp_call_arg_element_162 );
    if ( tmp_dict_key_282 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_281 );

        frame_module->f_lineno = 703;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_281, tmp_dict_key_282, tmp_dict_value_282 );
    Py_DECREF( tmp_dict_key_282 );
    tmp_dict_key_281 = const_str_plain_docstrreq;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_281, tmp_dict_value_281 );
    Py_DECREF( tmp_dict_value_281 );
    tmp_dict_value_283 = _PyDict_NewPresized( 1 );
    tmp_dict_value_284 = const_str_digest_52f3cb551798f750c7eedaa7874151b2;
    tmp_dict_key_284 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_key_284 == NULL ))
    {
        tmp_dict_key_284 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_key_284 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_283 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124107 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 704;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_283, tmp_dict_key_284, tmp_dict_value_284 );
    tmp_dict_key_283 = const_str_plain_docstrout;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_283, tmp_dict_value_283 );
    Py_DECREF( tmp_dict_value_283 );
    tmp_dict_value_285 = _PyDict_NewPresized( 1 );
    tmp_dict_value_286 = PyList_New( 2 );
    tmp_list_element_17 = const_str_digest_8b28e68d7237750459f812a4e45fbbea;
    Py_INCREF( tmp_list_element_17 );
    PyList_SET_ITEM( tmp_dict_value_286, 0, tmp_list_element_17 );
    tmp_list_element_17 = _PyDict_NewPresized( 1 );
    tmp_dict_value_287 = const_str_digest_2fea6faaece8b13aba5205180919cad4;
    tmp_dict_key_287 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasnote );

    if (unlikely( tmp_dict_key_287 == NULL ))
    {
        tmp_dict_key_287 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasnote );
    }

    if ( tmp_dict_key_287 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_285 );
        Py_DECREF( tmp_dict_value_286 );
        Py_DECREF( tmp_list_element_17 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125485 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 706;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_17, tmp_dict_key_287, tmp_dict_value_287 );
    PyList_SET_ITEM( tmp_dict_value_286, 1, tmp_list_element_17 );
    tmp_called_113 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_113 == NULL ))
    {
        tmp_called_113 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_113 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_285 );
        Py_DECREF( tmp_dict_value_286 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 705;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_163 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_call_arg_element_163 == NULL ))
    {
        tmp_call_arg_element_163 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_call_arg_element_163 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_285 );
        Py_DECREF( tmp_dict_value_286 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124244 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 705;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_164 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_call_arg_element_164 == NULL ))
    {
        tmp_call_arg_element_164 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_call_arg_element_164 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_285 );
        Py_DECREF( tmp_dict_value_286 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 705;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 705;
    tmp_dict_key_286 = CALL_FUNCTION_WITH_ARGS2( tmp_called_113, tmp_call_arg_element_163, tmp_call_arg_element_164 );
    if ( tmp_dict_key_286 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_285 );
        Py_DECREF( tmp_dict_value_286 );

        frame_module->f_lineno = 705;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_285, tmp_dict_key_286, tmp_dict_value_286 );
    Py_DECREF( tmp_dict_value_286 );
    Py_DECREF( tmp_dict_key_286 );
    tmp_dict_key_285 = const_str_plain_latexdocstropt;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_285, tmp_dict_value_285 );
    Py_DECREF( tmp_dict_value_285 );
    tmp_dict_value_288 = _PyDict_NewPresized( 1 );
    tmp_dict_value_289 = PyList_New( 2 );
    tmp_list_element_18 = const_str_digest_8b28e68d7237750459f812a4e45fbbea;
    Py_INCREF( tmp_list_element_18 );
    PyList_SET_ITEM( tmp_dict_value_289, 0, tmp_list_element_18 );
    tmp_list_element_18 = _PyDict_NewPresized( 1 );
    tmp_dict_value_290 = const_str_digest_2fea6faaece8b13aba5205180919cad4;
    tmp_dict_key_290 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasnote );

    if (unlikely( tmp_dict_key_290 == NULL ))
    {
        tmp_dict_key_290 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasnote );
    }

    if ( tmp_dict_key_290 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_288 );
        Py_DECREF( tmp_dict_value_289 );
        Py_DECREF( tmp_list_element_18 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125485 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 708;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_18, tmp_dict_key_290, tmp_dict_value_290 );
    PyList_SET_ITEM( tmp_dict_value_289, 1, tmp_list_element_18 );
    tmp_called_114 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_114 == NULL ))
    {
        tmp_called_114 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_114 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_288 );
        Py_DECREF( tmp_dict_value_289 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 707;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_165 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_call_arg_element_165 == NULL ))
    {
        tmp_call_arg_element_165 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_call_arg_element_165 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_288 );
        Py_DECREF( tmp_dict_value_289 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128672 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 707;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_166 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_call_arg_element_166 == NULL ))
    {
        tmp_call_arg_element_166 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_call_arg_element_166 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_288 );
        Py_DECREF( tmp_dict_value_289 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 707;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 707;
    tmp_dict_key_289 = CALL_FUNCTION_WITH_ARGS2( tmp_called_114, tmp_call_arg_element_165, tmp_call_arg_element_166 );
    if ( tmp_dict_key_289 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_288 );
        Py_DECREF( tmp_dict_value_289 );

        frame_module->f_lineno = 707;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_288, tmp_dict_key_289, tmp_dict_value_289 );
    Py_DECREF( tmp_dict_value_289 );
    Py_DECREF( tmp_dict_key_289 );
    tmp_dict_key_288 = const_str_plain_latexdocstrreq;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_288, tmp_dict_value_288 );
    Py_DECREF( tmp_dict_value_288 );
    tmp_dict_value_291 = _PyDict_NewPresized( 1 );
    tmp_dict_value_292 = PyList_New( 2 );
    tmp_list_element_19 = const_str_digest_21848c21ee715afb46bb5dff54f12759;
    Py_INCREF( tmp_list_element_19 );
    PyList_SET_ITEM( tmp_dict_value_292, 0, tmp_list_element_19 );
    tmp_list_element_19 = _PyDict_NewPresized( 2 );
    tmp_dict_value_293 = const_str_digest_2fea6faaece8b13aba5205180919cad4;
    tmp_called_115 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_115 == NULL ))
    {
        tmp_called_115 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_115 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 710;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_167 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasnote );

    if (unlikely( tmp_call_arg_element_167 == NULL ))
    {
        tmp_call_arg_element_167 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasnote );
    }

    if ( tmp_call_arg_element_167 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125485 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 710;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_168 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_call_arg_element_168 == NULL ))
    {
        tmp_call_arg_element_168 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_call_arg_element_168 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124141 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 710;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 710;
    tmp_dict_key_293 = CALL_FUNCTION_WITH_ARGS2( tmp_called_115, tmp_call_arg_element_167, tmp_call_arg_element_168 );
    if ( tmp_dict_key_293 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );

        frame_module->f_lineno = 710;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_19, tmp_dict_key_293, tmp_dict_value_293 );
    Py_DECREF( tmp_dict_key_293 );
    tmp_dict_value_294 = const_str_digest_73a2c45e7b0015e7c3fd1d2bb61db866;
    tmp_called_116 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_116 == NULL ))
    {
        tmp_called_116 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_116 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 711;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_169 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasnote );

    if (unlikely( tmp_call_arg_element_169 == NULL ))
    {
        tmp_call_arg_element_169 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasnote );
    }

    if ( tmp_call_arg_element_169 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125485 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 711;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_170 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_call_arg_element_170 == NULL ))
    {
        tmp_call_arg_element_170 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_call_arg_element_170 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 711;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 711;
    tmp_dict_key_294 = CALL_FUNCTION_WITH_ARGS2( tmp_called_116, tmp_call_arg_element_169, tmp_call_arg_element_170 );
    if ( tmp_dict_key_294 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        Py_DECREF( tmp_list_element_19 );

        frame_module->f_lineno = 711;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_19, tmp_dict_key_294, tmp_dict_value_294 );
    Py_DECREF( tmp_dict_key_294 );
    PyList_SET_ITEM( tmp_dict_value_292, 1, tmp_list_element_19 );
    tmp_dict_key_292 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_key_292 == NULL ))
    {
        tmp_dict_key_292 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_key_292 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_291 );
        Py_DECREF( tmp_dict_value_292 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124107 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 709;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_291, tmp_dict_key_292, tmp_dict_value_292 );
    Py_DECREF( tmp_dict_value_292 );
    tmp_dict_key_291 = const_str_plain_latexdocstrout;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_291, tmp_dict_value_291 );
    Py_DECREF( tmp_dict_value_291 );
    tmp_dict_value_295 = const_str_empty;
    tmp_dict_key_295 = const_str_plain_depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_295, tmp_dict_value_295 );
    PyList_SET_ITEM( tmp_assign_source_33, 2, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_296 = const_str_digest_3675f5d015dddadfe52770fb5aa734ea;
    tmp_dict_key_296 = const_str_plain_kwlist;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_296, tmp_dict_value_296 );
    tmp_dict_value_297 = const_str_digest_8a412c5a481127f099db01c171a0fb22;
    tmp_dict_key_297 = const_str_plain_docsign;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_297, tmp_dict_value_297 );
    tmp_called_117 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_117 == NULL ))
    {
        tmp_called_117 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_117 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 718;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_171 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_call_arg_element_171 == NULL ))
    {
        tmp_call_arg_element_171 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_call_arg_element_171 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 718;
        goto frame_exception_exit_1;
    }

    tmp_called_118 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_118 == NULL ))
    {
        tmp_called_118 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_118 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 718;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_173 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_call_arg_element_173 == NULL ))
    {
        tmp_call_arg_element_173 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_call_arg_element_173 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124244 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 718;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 718;
    tmp_call_arg_element_172 = CALL_FUNCTION_WITH_ARGS1( tmp_called_118, tmp_call_arg_element_173 );
    if ( tmp_call_arg_element_172 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 718;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 718;
    tmp_dict_value_298 = CALL_FUNCTION_WITH_ARGS2( tmp_called_117, tmp_call_arg_element_171, tmp_call_arg_element_172 );
    Py_DECREF( tmp_call_arg_element_172 );
    if ( tmp_dict_value_298 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 718;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_298 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_298, tmp_dict_value_298 );
    Py_DECREF( tmp_dict_value_298 );
    PyList_SET_ITEM( tmp_assign_source_33, 3, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 4 );
    tmp_dict_value_299 = const_str_digest_3675f5d015dddadfe52770fb5aa734ea;
    tmp_dict_key_299 = const_str_plain_kwlistopt;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_299, tmp_dict_value_299 );
    tmp_dict_value_300 = const_str_digest_d4c31f89fcf78e3659ade9a24fdf42d4;
    tmp_dict_key_300 = const_str_plain_docsignopt;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_300, tmp_dict_value_300 );
    tmp_dict_value_301 = const_str_digest_8a412c5a481127f099db01c171a0fb22;
    tmp_dict_key_301 = const_str_plain_docsignoptshort;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_301, tmp_dict_value_301 );
    tmp_called_119 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_119 == NULL ))
    {
        tmp_called_119 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_119 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 724;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_174 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_call_arg_element_174 == NULL ))
    {
        tmp_call_arg_element_174 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_call_arg_element_174 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 724;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_175 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_call_arg_element_175 == NULL ))
    {
        tmp_call_arg_element_175 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_call_arg_element_175 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124244 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 724;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 724;
    tmp_dict_value_302 = CALL_FUNCTION_WITH_ARGS2( tmp_called_119, tmp_call_arg_element_174, tmp_call_arg_element_175 );
    if ( tmp_dict_value_302 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 724;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_302 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_302, tmp_dict_value_302 );
    Py_DECREF( tmp_dict_value_302 );
    PyList_SET_ITEM( tmp_assign_source_33, 4, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_303 = const_str_digest_f872d11254dc4965c1a21e47d3db82a2;
    tmp_dict_key_303 = const_str_plain_docreturn;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_303, tmp_dict_value_303 );
    tmp_dict_value_304 = const_str_digest_e5fa1be03dc4204e78792261a4698ad0;
    tmp_dict_key_304 = const_str_plain_returnformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_304, tmp_dict_value_304 );
    tmp_dict_value_305 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_value_305 == NULL ))
    {
        tmp_dict_value_305 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_value_305 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124107 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 730;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_305 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_305, tmp_dict_value_305 );
    PyList_SET_ITEM( tmp_assign_source_33, 5, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 18 );
    tmp_dict_value_306 = _PyDict_NewPresized( 1 );
    tmp_dict_value_307 = const_str_digest_41c2fd756c3e693448d5dfd166c13fac;
    tmp_dict_key_307 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_dict_key_307 == NULL ))
    {
        tmp_dict_key_307 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_dict_key_307 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_306 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 734;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_306, tmp_dict_key_307, tmp_dict_value_307 );
    tmp_dict_key_306 = const_str_plain_docsignxa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_306, tmp_dict_value_306 );
    Py_DECREF( tmp_dict_value_306 );
    tmp_dict_value_308 = _PyDict_NewPresized( 1 );
    tmp_dict_value_309 = const_str_digest_231cb7effd90b3fd8e0b9b743f769003;
    tmp_dict_key_309 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_dict_key_309 == NULL ))
    {
        tmp_dict_key_309 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_dict_key_309 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_308 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 735;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_308, tmp_dict_key_309, tmp_dict_value_309 );
    tmp_dict_key_308 = const_str_plain_docsignxashort;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_308, tmp_dict_value_308 );
    Py_DECREF( tmp_dict_value_308 );
    tmp_dict_value_310 = _PyDict_NewPresized( 1 );
    tmp_dict_value_311 = const_str_digest_941afd4ce1527d74fbd8be0829fa1a59;
    tmp_dict_key_311 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_dict_key_311 == NULL ))
    {
        tmp_dict_key_311 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_dict_key_311 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_310 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 736;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_310, tmp_dict_key_311, tmp_dict_value_311 );
    tmp_dict_key_310 = const_str_plain_docstropt;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_310, tmp_dict_value_310 );
    Py_DECREF( tmp_dict_value_310 );
    tmp_dict_value_312 = const_str_digest_7a89be2ff5758619ac83558d9a101c74;
    tmp_dict_key_312 = const_str_plain_docstrcbs;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_312, tmp_dict_value_312 );
    tmp_dict_value_313 = const_str_digest_b8ac32b2a634222f497d81e945fc69e2;
    tmp_dict_key_313 = const_str_plain_latexdocstrcbs;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_313, tmp_dict_value_313 );
    tmp_dict_value_314 = _PyDict_NewPresized( 1 );
    tmp_dict_value_315 = const_str_digest_8842d8dab6d8e1a03bd3209f4c7d8c85;
    tmp_dict_key_315 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_dict_key_315 == NULL ))
    {
        tmp_dict_key_315 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_dict_key_315 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_314 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 739;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_314, tmp_dict_key_315, tmp_dict_value_315 );
    tmp_dict_key_314 = const_str_plain_latexdocstropt;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_314, tmp_dict_value_314 );
    Py_DECREF( tmp_dict_value_314 );
    tmp_dict_value_316 = PyList_New( 5 );
    tmp_list_element_20 = const_str_digest_94bcdde9f91533758026d6169c99b194;
    Py_INCREF( tmp_list_element_20 );
    PyList_SET_ITEM( tmp_dict_value_316, 0, tmp_list_element_20 );
    tmp_list_element_20 = const_str_digest_27b50ea3e5fe50c3f9d4789d13716081;
    Py_INCREF( tmp_list_element_20 );
    PyList_SET_ITEM( tmp_dict_value_316, 1, tmp_list_element_20 );
    tmp_list_element_20 = const_str_digest_33de85b69c6ba37a90f1de39a0387d4e;
    Py_INCREF( tmp_list_element_20 );
    PyList_SET_ITEM( tmp_dict_value_316, 2, tmp_list_element_20 );
    tmp_list_element_20 = const_str_digest_9020c0154ba09b41a6ce32444468a5a6;
    Py_INCREF( tmp_list_element_20 );
    PyList_SET_ITEM( tmp_dict_value_316, 3, tmp_list_element_20 );
    tmp_list_element_20 = _PyDict_NewPresized( 1 );
    tmp_dict_value_317 = const_str_digest_d3d6e6f2fb7259f3a718f541c7ec9f99;
    tmp_called_120 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_120 == NULL ))
    {
        tmp_called_120 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_120 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_316 );
        Py_DECREF( tmp_list_element_20 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 744;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_176 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_callback );

    if (unlikely( tmp_call_arg_element_176 == NULL ))
    {
        tmp_call_arg_element_176 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_callback );
    }

    if ( tmp_call_arg_element_176 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_316 );
        Py_DECREF( tmp_list_element_20 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126349 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 744;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 744;
    tmp_dict_key_317 = CALL_FUNCTION_WITH_ARGS1( tmp_called_120, tmp_call_arg_element_176 );
    if ( tmp_dict_key_317 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_316 );
        Py_DECREF( tmp_list_element_20 );

        frame_module->f_lineno = 744;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_20, tmp_dict_key_317, tmp_dict_value_317 );
    Py_DECREF( tmp_dict_key_317 );
    PyList_SET_ITEM( tmp_dict_value_316, 4, tmp_list_element_20 );
    tmp_dict_key_316 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_316, tmp_dict_value_316 );
    Py_DECREF( tmp_dict_value_316 );
    tmp_dict_value_318 = _PyDict_NewPresized( 1 );
    tmp_dict_value_319 = const_str_digest_3583a8d3606919d394ff3742ea2991a0;
    tmp_dict_key_319 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_dict_key_319 == NULL ))
    {
        tmp_dict_key_319 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_dict_key_319 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_318 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 746;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_318, tmp_dict_key_319, tmp_dict_value_319 );
    tmp_dict_key_318 = const_str_plain_kwlistxa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_318, tmp_dict_value_318 );
    Py_DECREF( tmp_dict_value_318 );
    tmp_dict_value_320 = _PyDict_NewPresized( 1 );
    tmp_dict_value_321 = const_str_plain_O;
    tmp_dict_key_321 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_321 == NULL ))
    {
        tmp_dict_key_321 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_321 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_320 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128672 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 747;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_320, tmp_dict_key_321, tmp_dict_value_321 );
    tmp_dict_key_320 = const_str_plain_argformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_320, tmp_dict_value_320 );
    Py_DECREF( tmp_dict_value_320 );
    tmp_dict_value_322 = _PyDict_NewPresized( 1 );
    tmp_dict_value_323 = const_str_plain_O;
    tmp_dict_key_323 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_323 == NULL ))
    {
        tmp_dict_key_323 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_323 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_322 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124244 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 748;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_322, tmp_dict_key_323, tmp_dict_value_323 );
    tmp_dict_key_322 = const_str_plain_keyformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_322, tmp_dict_value_322 );
    Py_DECREF( tmp_dict_value_322 );
    tmp_dict_value_324 = _PyDict_NewPresized( 1 );
    tmp_dict_value_325 = const_str_digest_53d067d98ec3a8018e265af396e4cd76;
    tmp_dict_key_325 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_dict_key_325 == NULL ))
    {
        tmp_dict_key_325 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_dict_key_325 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_324 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 749;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_324, tmp_dict_key_325, tmp_dict_value_325 );
    tmp_dict_key_324 = const_str_plain_xaformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_324, tmp_dict_value_324 );
    Py_DECREF( tmp_dict_value_324 );
    tmp_dict_value_326 = _PyDict_NewPresized( 1 );
    tmp_dict_value_327 = const_str_digest_74327d7eb38e858582fe177e885d2475;
    tmp_dict_key_327 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_327 == NULL ))
    {
        tmp_dict_key_327 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_327 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_326 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128672 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 750;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_326, tmp_dict_key_327, tmp_dict_value_327 );
    tmp_dict_key_326 = const_str_plain_args_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_326, tmp_dict_value_326 );
    Py_DECREF( tmp_dict_value_326 );
    tmp_dict_value_328 = _PyDict_NewPresized( 1 );
    tmp_dict_value_329 = const_str_digest_74327d7eb38e858582fe177e885d2475;
    tmp_dict_key_329 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_329 == NULL ))
    {
        tmp_dict_key_329 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_329 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_328 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124244 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 751;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_328, tmp_dict_key_329, tmp_dict_value_329 );
    tmp_dict_key_328 = const_str_plain_keys_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_328, tmp_dict_value_328 );
    Py_DECREF( tmp_dict_value_328 );
    tmp_dict_value_330 = const_str_digest_d2f9453d0b79d1c9ade8eb7077960272;
    tmp_dict_key_330 = const_str_plain_keys_xa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_330, tmp_dict_value_330 );
    tmp_dict_value_331 = const_str_digest_1e609e98e6387a0eff2e0582a23e9403;
    tmp_dict_key_331 = const_str_plain_setjmpbuf;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_331, tmp_dict_value_331 );
    tmp_dict_value_332 = _PyDict_NewPresized( 1 );
    tmp_dict_value_333 = const_str_digest_e2418f9672b53d5c9e681cfa976e4ede;
    tmp_called_121 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_121 == NULL ))
    {
        tmp_called_121 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_121 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_332 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 754;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_177 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_callback );

    if (unlikely( tmp_call_arg_element_177 == NULL ))
    {
        tmp_call_arg_element_177 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_callback );
    }

    if ( tmp_call_arg_element_177 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_332 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126349 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 754;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 754;
    tmp_dict_key_333 = CALL_FUNCTION_WITH_ARGS1( tmp_called_121, tmp_call_arg_element_177 );
    if ( tmp_dict_key_333 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_332 );

        frame_module->f_lineno = 754;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_332, tmp_dict_key_333, tmp_dict_value_333 );
    Py_DECREF( tmp_dict_key_333 );
    tmp_dict_key_332 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_332, tmp_dict_value_332 );
    Py_DECREF( tmp_dict_value_332 );
    tmp_dict_value_334 = LIST_COPY( const_list_917626a5cab86448639269d43350330f_list );
    tmp_dict_key_334 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_334, tmp_dict_value_334 );
    Py_DECREF( tmp_dict_value_334 );
    tmp_dict_value_335 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isexternal );

    if (unlikely( tmp_dict_value_335 == NULL ))
    {
        tmp_dict_value_335 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isexternal );
    }

    if ( tmp_dict_value_335 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124516 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 756;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_335 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_335, tmp_dict_value_335 );
    PyList_SET_ITEM( tmp_assign_source_33, 6, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 5 );
    tmp_dict_value_336 = PyList_New( 5 );
    tmp_list_element_21 = _PyDict_NewPresized( 1 );
    tmp_dict_value_337 = const_str_digest_eaecd73b62fde941c6920f619a250093;
    tmp_called_122 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_122 == NULL ))
    {
        tmp_called_122 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_122 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 759;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_178 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_callback );

    if (unlikely( tmp_call_arg_element_178 == NULL ))
    {
        tmp_call_arg_element_178 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_callback );
    }

    if ( tmp_call_arg_element_178 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126349 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 759;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 759;
    tmp_dict_key_337 = CALL_FUNCTION_WITH_ARGS1( tmp_called_122, tmp_call_arg_element_178 );
    if ( tmp_dict_key_337 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );

        frame_module->f_lineno = 759;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_21, tmp_dict_key_337, tmp_dict_value_337 );
    Py_DECREF( tmp_dict_key_337 );
    PyList_SET_ITEM( tmp_dict_value_336, 0, tmp_list_element_21 );
    tmp_list_element_21 = _PyDict_NewPresized( 1 );
    tmp_dict_value_338 = const_str_digest_975e0d14a7d9a661ed02f62dd83c173a;
    tmp_dict_key_338 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_callback );

    if (unlikely( tmp_dict_key_338 == NULL ))
    {
        tmp_dict_key_338 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_callback );
    }

    if ( tmp_dict_key_338 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126349 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 765;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_21, tmp_dict_key_338, tmp_dict_value_338 );
    PyList_SET_ITEM( tmp_dict_value_336, 1, tmp_list_element_21 );
    tmp_list_element_21 = const_str_digest_2d092b06961d63e3c95e44a4ec6fc82d;
    Py_INCREF( tmp_list_element_21 );
    PyList_SET_ITEM( tmp_dict_value_336, 2, tmp_list_element_21 );
    tmp_list_element_21 = _PyDict_NewPresized( 1 );
    tmp_dict_value_339 = PyList_New( 2 );
    tmp_list_element_22 = const_str_digest_6fae23cc5869b6b96e109a8f2e78fbe4;
    Py_INCREF( tmp_list_element_22 );
    PyList_SET_ITEM( tmp_dict_value_339, 0, tmp_list_element_22 );
    tmp_list_element_22 = _PyDict_NewPresized( 1 );
    tmp_dict_value_340 = const_str_digest_2024ee09e6b745cfd788ae7f21f8ccb6;
    tmp_called_123 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_123 == NULL ))
    {
        tmp_called_123 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_123 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );
        Py_DECREF( tmp_dict_value_339 );
        Py_DECREF( tmp_list_element_22 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 801;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_179 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_callback );

    if (unlikely( tmp_call_arg_element_179 == NULL ))
    {
        tmp_call_arg_element_179 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_callback );
    }

    if ( tmp_call_arg_element_179 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );
        Py_DECREF( tmp_dict_value_339 );
        Py_DECREF( tmp_list_element_22 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126349 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 801;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 801;
    tmp_dict_key_340 = CALL_FUNCTION_WITH_ARGS1( tmp_called_123, tmp_call_arg_element_179 );
    if ( tmp_dict_key_340 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );
        Py_DECREF( tmp_dict_value_339 );
        Py_DECREF( tmp_list_element_22 );

        frame_module->f_lineno = 801;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_22, tmp_dict_key_340, tmp_dict_value_340 );
    Py_DECREF( tmp_dict_key_340 );
    PyList_SET_ITEM( tmp_dict_value_339, 1, tmp_list_element_22 );
    tmp_dict_key_339 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_339 == NULL ))
    {
        tmp_dict_key_339 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_339 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_336 );
        Py_DECREF( tmp_list_element_21 );
        Py_DECREF( tmp_dict_value_339 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 798;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_21, tmp_dict_key_339, tmp_dict_value_339 );
    Py_DECREF( tmp_dict_value_339 );
    PyList_SET_ITEM( tmp_dict_value_336, 3, tmp_list_element_21 );
    tmp_list_element_21 = const_str_digest_d8ce894b52970bea5aadfd06f6c6a09e;
    Py_INCREF( tmp_list_element_21 );
    PyList_SET_ITEM( tmp_dict_value_336, 4, tmp_list_element_21 );
    tmp_dict_key_336 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_336, tmp_dict_value_336 );
    Py_DECREF( tmp_dict_value_336 );
    tmp_dict_value_341 = const_str_digest_ee4983e7371c33b4bfdb0e9618656343;
    tmp_dict_key_341 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_341, tmp_dict_value_341 );
    tmp_dict_value_342 = LIST_COPY( const_list_str_plain_SWAP_str_plain_create_cb_arglist_list );
    tmp_dict_key_342 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_342, tmp_dict_value_342 );
    Py_DECREF( tmp_dict_value_342 );
    tmp_dict_value_343 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isexternal );

    if (unlikely( tmp_dict_value_343 == NULL ))
    {
        tmp_dict_value_343 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isexternal );
    }

    if ( tmp_dict_value_343 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124516 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 818;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_343 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_343, tmp_dict_value_343 );
    tmp_dict_value_344 = const_str_empty;
    tmp_dict_key_344 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_344, tmp_dict_value_344 );
    PyList_SET_ITEM( tmp_assign_source_33, 7, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 5 );
    tmp_dict_value_345 = const_str_digest_0d59acae85d063e3f672d8da6daa0a85;
    tmp_dict_key_345 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_345, tmp_dict_value_345 );
    tmp_dict_value_346 = _PyDict_NewPresized( 1 );
    tmp_dict_value_347 = const_str_digest_b0f41de0450f9223c04ee3ef6526d95f;
    tmp_dict_key_347 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_347 == NULL ))
    {
        tmp_dict_key_347 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_347 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_346 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 824;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_346, tmp_dict_key_347, tmp_dict_value_347 );
    tmp_dict_key_346 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_346, tmp_dict_value_346 );
    Py_DECREF( tmp_dict_value_346 );
    tmp_dict_value_348 = _PyDict_NewPresized( 2 );
    tmp_dict_value_349 = const_str_digest_8a412c5a481127f099db01c171a0fb22;
    tmp_dict_key_349 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_dict_key_349 == NULL ))
    {
        tmp_dict_key_349 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_dict_key_349 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_348 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124212 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 825;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_348, tmp_dict_key_349, tmp_dict_value_349 );
    tmp_dict_value_350 = const_str_digest_2861f69496685cab3ecd9e5bb974c70d;
    tmp_called_124 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_124 == NULL ))
    {
        tmp_called_124 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_124 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_348 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 825;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_180 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_call_arg_element_180 == NULL ))
    {
        tmp_call_arg_element_180 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_call_arg_element_180 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_348 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124212 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 825;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 825;
    tmp_dict_key_350 = CALL_FUNCTION_WITH_ARGS1( tmp_called_124, tmp_call_arg_element_180 );
    if ( tmp_dict_key_350 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_348 );

        frame_module->f_lineno = 825;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_348, tmp_dict_key_350, tmp_dict_value_350 );
    Py_DECREF( tmp_dict_key_350 );
    tmp_dict_key_348 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_348, tmp_dict_value_348 );
    Py_DECREF( tmp_dict_value_348 );
    tmp_dict_value_351 = _PyDict_NewPresized( 1 );
    tmp_dict_value_352 = const_str_digest_09de792d93cc23e6cd4f80b6fa458fd3;
    tmp_dict_key_352 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_key_352 == NULL ))
    {
        tmp_dict_key_352 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_key_352 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_351 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124107 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 826;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_351, tmp_dict_key_352, tmp_dict_value_352 );
    tmp_dict_key_351 = const_str_plain_return;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_351, tmp_dict_value_351 );
    Py_DECREF( tmp_dict_value_351 );
    tmp_called_125 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_125 == NULL ))
    {
        tmp_called_125 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_125 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 827;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_181 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_call_arg_element_181 == NULL ))
    {
        tmp_call_arg_element_181 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_call_arg_element_181 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 72345 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 827;
        goto frame_exception_exit_1;
    }

    tmp_called_126 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_126 == NULL ))
    {
        tmp_called_126 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_126 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 827;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_183 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_call_arg_element_183 == NULL ))
    {
        tmp_call_arg_element_183 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_call_arg_element_183 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124745 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 827;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 827;
    tmp_call_arg_element_182 = CALL_FUNCTION_WITH_ARGS1( tmp_called_126, tmp_call_arg_element_183 );
    if ( tmp_call_arg_element_182 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 827;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 827;
    tmp_dict_value_353 = CALL_FUNCTION_WITH_ARGS2( tmp_called_125, tmp_call_arg_element_181, tmp_call_arg_element_182 );
    Py_DECREF( tmp_call_arg_element_182 );
    if ( tmp_dict_value_353 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 827;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_353 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_353, tmp_dict_value_353 );
    Py_DECREF( tmp_dict_value_353 );
    PyList_SET_ITEM( tmp_assign_source_33, 8, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 2 );
    tmp_dict_value_354 = _PyDict_NewPresized( 1 );
    tmp_dict_value_355 = const_str_digest_890854844f87190b1c6e74a24b3f6e6e;
    tmp_dict_key_355 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_355 == NULL ))
    {
        tmp_dict_key_355 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_355 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_354 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125444 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 829;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_354, tmp_dict_key_355, tmp_dict_value_355 );
    tmp_dict_key_354 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_354, tmp_dict_value_354 );
    Py_DECREF( tmp_dict_value_354 );
    tmp_called_127 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_127 == NULL ))
    {
        tmp_called_127 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_127 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 830;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_184 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_call_arg_element_184 == NULL ))
    {
        tmp_call_arg_element_184 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_call_arg_element_184 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 72345 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 830;
        goto frame_exception_exit_1;
    }

    tmp_called_128 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_128 == NULL ))
    {
        tmp_called_128 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_128 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 830;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_186 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_call_arg_element_186 == NULL ))
    {
        tmp_call_arg_element_186 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_call_arg_element_186 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124745 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 830;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 830;
    tmp_call_arg_element_185 = CALL_FUNCTION_WITH_ARGS1( tmp_called_128, tmp_call_arg_element_186 );
    if ( tmp_call_arg_element_185 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 830;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 830;
    tmp_dict_value_356 = CALL_FUNCTION_WITH_ARGS2( tmp_called_127, tmp_call_arg_element_184, tmp_call_arg_element_185 );
    Py_DECREF( tmp_call_arg_element_185 );
    if ( tmp_dict_value_356 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 830;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_356 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_356, tmp_dict_value_356 );
    Py_DECREF( tmp_dict_value_356 );
    PyList_SET_ITEM( tmp_assign_source_33, 9, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 9 );
    tmp_dict_value_357 = const_str_digest_94bcdde9f91533758026d6169c99b194;
    tmp_dict_key_357 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_357, tmp_dict_value_357 );
    tmp_dict_value_358 = _PyDict_NewPresized( 1 );
    tmp_dict_value_359 = const_str_plain_O;
    tmp_dict_key_359 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_359 == NULL ))
    {
        tmp_dict_key_359 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_359 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_358 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128672 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 834;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_358, tmp_dict_key_359, tmp_dict_value_359 );
    tmp_dict_key_358 = const_str_plain_argformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_358, tmp_dict_value_358 );
    Py_DECREF( tmp_dict_value_358 );
    tmp_dict_value_360 = _PyDict_NewPresized( 1 );
    tmp_dict_value_361 = const_str_plain_O;
    tmp_dict_key_361 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_361 == NULL ))
    {
        tmp_dict_key_361 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_361 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_360 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124244 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 835;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_360, tmp_dict_key_361, tmp_dict_value_361 );
    tmp_dict_key_360 = const_str_plain_keyformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_360, tmp_dict_value_360 );
    Py_DECREF( tmp_dict_value_360 );
    tmp_dict_value_362 = _PyDict_NewPresized( 1 );
    tmp_dict_value_363 = const_str_digest_74327d7eb38e858582fe177e885d2475;
    tmp_dict_key_363 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_363 == NULL ))
    {
        tmp_dict_key_363 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_363 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_362 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128672 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 836;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_362, tmp_dict_key_363, tmp_dict_value_363 );
    tmp_dict_key_362 = const_str_plain_args_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_362, tmp_dict_value_362 );
    Py_DECREF( tmp_dict_value_362 );
    tmp_dict_value_364 = _PyDict_NewPresized( 1 );
    tmp_dict_value_365 = const_str_digest_74327d7eb38e858582fe177e885d2475;
    tmp_dict_key_365 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_365 == NULL ))
    {
        tmp_dict_key_365 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_365 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_364 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124244 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 837;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_364, tmp_dict_key_365, tmp_dict_value_365 );
    tmp_dict_key_364 = const_str_plain_keys_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_364, tmp_dict_value_364 );
    Py_DECREF( tmp_dict_value_364 );
    tmp_dict_value_366 = _PyDict_NewPresized( 1 );
    tmp_dict_value_367 = const_str_digest_9d495ac14a55bbb4c048faa1dd9740c4;
    tmp_dict_key_367 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_367 == NULL ))
    {
        tmp_dict_key_367 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_367 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_366 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124071 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 838;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_366, tmp_dict_key_367, tmp_dict_value_367 );
    tmp_dict_key_366 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_366, tmp_dict_value_366 );
    Py_DECREF( tmp_dict_value_366 );
    tmp_dict_value_368 = _PyDict_NewPresized( 1 );
    tmp_dict_value_369 = const_str_digest_3ff9b48b64cdbdd8b296b61508af401a;
    tmp_dict_key_369 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_369 == NULL ))
    {
        tmp_dict_key_369 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_369 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_368 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124071 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 841;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_368, tmp_dict_key_369, tmp_dict_value_369 );
    tmp_dict_key_368 = const_str_plain_closepyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_368, tmp_dict_value_368 );
    Py_DECREF( tmp_dict_value_368 );
    tmp_dict_value_370 = _PyDict_NewPresized( 1 );
    tmp_dict_value_371 = const_str_digest_ec9c6dcde4931b9286e950f1e97757e1;
    tmp_dict_key_371 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_371 == NULL ))
    {
        tmp_dict_key_371 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_371 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_370 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124071 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 842;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_370, tmp_dict_key_371, tmp_dict_value_371 );
    tmp_dict_key_370 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_370, tmp_dict_value_370 );
    Py_DECREF( tmp_dict_value_370 );
    tmp_called_129 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_129 == NULL ))
    {
        tmp_called_129 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_129 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 843;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_187 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_call_arg_element_187 == NULL ))
    {
        tmp_call_arg_element_187 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_call_arg_element_187 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 72345 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 843;
        goto frame_exception_exit_1;
    }

    tmp_called_130 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_130 == NULL ))
    {
        tmp_called_130 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_130 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 843;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_189 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_call_arg_element_189 == NULL ))
    {
        tmp_call_arg_element_189 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_call_arg_element_189 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124745 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 843;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 843;
    tmp_call_arg_element_188 = CALL_FUNCTION_WITH_ARGS1( tmp_called_130, tmp_call_arg_element_189 );
    if ( tmp_call_arg_element_188 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 843;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_190 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_call_arg_element_190 == NULL ))
    {
        tmp_call_arg_element_190 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_call_arg_element_190 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_call_arg_element_188 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 843;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 843;
    tmp_dict_value_372 = CALL_FUNCTION_WITH_ARGS3( tmp_called_129, tmp_call_arg_element_187, tmp_call_arg_element_188, tmp_call_arg_element_190 );
    Py_DECREF( tmp_call_arg_element_188 );
    if ( tmp_dict_value_372 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 843;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_372 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_372, tmp_dict_value_372 );
    Py_DECREF( tmp_dict_value_372 );
    PyList_SET_ITEM( tmp_assign_source_33, 10, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 5 );
    tmp_dict_value_373 = PyList_New( 4 );
    tmp_list_element_23 = _PyDict_NewPresized( 2 );
    tmp_dict_value_374 = const_str_digest_1957922661d0ebb79028a2cdcfc623e3;
    tmp_dict_key_374 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_374 == NULL ))
    {
        tmp_dict_key_374 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_374 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125444 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 861;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_23, tmp_dict_key_374, tmp_dict_value_374 );
    tmp_dict_value_375 = const_str_empty;
    tmp_dict_key_375 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_23, tmp_dict_key_375, tmp_dict_value_375 );
    PyList_SET_ITEM( tmp_dict_value_373, 0, tmp_list_element_23 );
    tmp_list_element_23 = _PyDict_NewPresized( 2 );
    tmp_dict_value_376 = const_str_digest_5c182b7cc989dc414beab715240ecd25;
    tmp_called_131 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_131 == NULL ))
    {
        tmp_called_131 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_131 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 863;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_191 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_call_arg_element_191 == NULL ))
    {
        tmp_call_arg_element_191 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_call_arg_element_191 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124244 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 863;
        goto frame_exception_exit_1;
    }

    tmp_called_132 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_132 == NULL ))
    {
        tmp_called_132 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_132 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 863;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_193 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_call_arg_element_193 == NULL ))
    {
        tmp_call_arg_element_193 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_call_arg_element_193 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125444 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 863;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 863;
    tmp_call_arg_element_192 = CALL_FUNCTION_WITH_ARGS1( tmp_called_132, tmp_call_arg_element_193 );
    if ( tmp_call_arg_element_192 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );

        frame_module->f_lineno = 863;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 863;
    tmp_dict_key_376 = CALL_FUNCTION_WITH_ARGS2( tmp_called_131, tmp_call_arg_element_191, tmp_call_arg_element_192 );
    Py_DECREF( tmp_call_arg_element_192 );
    if ( tmp_dict_key_376 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );

        frame_module->f_lineno = 863;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_23, tmp_dict_key_376, tmp_dict_value_376 );
    Py_DECREF( tmp_dict_key_376 );
    tmp_dict_value_377 = const_str_empty;
    tmp_dict_key_377 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_23, tmp_dict_key_377, tmp_dict_value_377 );
    PyList_SET_ITEM( tmp_dict_value_373, 1, tmp_list_element_23 );
    tmp_list_element_23 = _PyDict_NewPresized( 1 );
    tmp_dict_value_378 = const_str_digest_af413396ce224ead18aef866d1998f25;
    tmp_called_133 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_133 == NULL ))
    {
        tmp_called_133 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_133 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 865;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_194 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islogical );

    if (unlikely( tmp_call_arg_element_194 == NULL ))
    {
        tmp_call_arg_element_194 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_islogical );
    }

    if ( tmp_call_arg_element_194 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124995 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 865;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 865;
    tmp_dict_key_378 = CALL_FUNCTION_WITH_ARGS1( tmp_called_133, tmp_call_arg_element_194 );
    if ( tmp_dict_key_378 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );

        frame_module->f_lineno = 865;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_23, tmp_dict_key_378, tmp_dict_value_378 );
    Py_DECREF( tmp_dict_key_378 );
    PyList_SET_ITEM( tmp_dict_value_373, 2, tmp_list_element_23 );
    tmp_list_element_23 = _PyDict_NewPresized( 1 );
    tmp_dict_value_379 = const_str_digest_2936888493c6440f01314e5ae776f3e1;
    tmp_dict_key_379 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islogical );

    if (unlikely( tmp_dict_key_379 == NULL ))
    {
        tmp_dict_key_379 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_islogical );
    }

    if ( tmp_dict_key_379 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_373 );
        Py_DECREF( tmp_list_element_23 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124995 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 868;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_23, tmp_dict_key_379, tmp_dict_value_379 );
    PyList_SET_ITEM( tmp_dict_value_373, 3, tmp_list_element_23 );
    tmp_dict_key_373 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_373, tmp_dict_value_373 );
    Py_DECREF( tmp_dict_value_373 );
    tmp_dict_value_380 = const_str_digest_5739445260bb4ab7a7bde7699d67e1b0;
    tmp_dict_key_380 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_380, tmp_dict_value_380 );
    tmp_dict_value_381 = _PyDict_NewPresized( 1 );
    tmp_dict_value_382 = const_str_digest_aef332a279fc26992d9b07f03b37a7b7;
    tmp_called_134 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_134 == NULL ))
    {
        tmp_called_134 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_134 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_381 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 874;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_195 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_islogical );

    if (unlikely( tmp_call_arg_element_195 == NULL ))
    {
        tmp_call_arg_element_195 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_islogical );
    }

    if ( tmp_call_arg_element_195 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_381 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124995 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 874;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 874;
    tmp_dict_key_382 = CALL_FUNCTION_WITH_ARGS1( tmp_called_134, tmp_call_arg_element_195 );
    if ( tmp_dict_key_382 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_381 );

        frame_module->f_lineno = 874;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_381, tmp_dict_key_382, tmp_dict_value_382 );
    Py_DECREF( tmp_dict_key_382 );
    tmp_dict_key_381 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_381, tmp_dict_value_381 );
    Py_DECREF( tmp_dict_value_381 );
    tmp_called_135 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_135 == NULL ))
    {
        tmp_called_135 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_135 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 875;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_196 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_call_arg_element_196 == NULL ))
    {
        tmp_call_arg_element_196 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_call_arg_element_196 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 72345 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 875;
        goto frame_exception_exit_1;
    }

    tmp_called_136 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_136 == NULL ))
    {
        tmp_called_136 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_136 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 875;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_198 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_call_arg_element_198 == NULL ))
    {
        tmp_call_arg_element_198 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_call_arg_element_198 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124745 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 875;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 875;
    tmp_call_arg_element_197 = CALL_FUNCTION_WITH_ARGS1( tmp_called_136, tmp_call_arg_element_198 );
    if ( tmp_call_arg_element_197 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 875;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_199 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_call_arg_element_199 == NULL ))
    {
        tmp_call_arg_element_199 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_call_arg_element_199 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_call_arg_element_197 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 875;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 875;
    tmp_dict_value_383 = CALL_FUNCTION_WITH_ARGS3( tmp_called_135, tmp_call_arg_element_196, tmp_call_arg_element_197, tmp_call_arg_element_199 );
    Py_DECREF( tmp_call_arg_element_197 );
    if ( tmp_dict_value_383 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 875;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_383 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_383, tmp_dict_value_383 );
    Py_DECREF( tmp_dict_value_383 );
    tmp_dict_value_384 = const_str_empty;
    tmp_dict_key_384 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_384, tmp_dict_value_384 );
    PyList_SET_ITEM( tmp_assign_source_33, 11, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 4 );
    tmp_dict_value_385 = _PyDict_NewPresized( 1 );
    tmp_dict_value_386 = const_str_digest_3661f078f2728e5304b2e950f133b5c4;
    tmp_dict_key_386 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_386 == NULL ))
    {
        tmp_dict_key_386 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_386 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_385 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125444 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 880;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_385, tmp_dict_key_386, tmp_dict_value_386 );
    tmp_dict_key_385 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_385, tmp_dict_value_385 );
    Py_DECREF( tmp_dict_value_385 );
    tmp_dict_value_387 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_typedef_need_dict );

    if (unlikely( tmp_dict_value_387 == NULL ))
    {
        tmp_dict_value_387 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_typedef_need_dict );
    }

    if ( tmp_dict_value_387 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151376 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 881;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_387 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_387, tmp_dict_value_387 );
    tmp_called_137 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_137 == NULL ))
    {
        tmp_called_137 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_137 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 882;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_200 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_call_arg_element_200 == NULL ))
    {
        tmp_call_arg_element_200 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_call_arg_element_200 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 72345 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 882;
        goto frame_exception_exit_1;
    }

    tmp_called_138 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_138 == NULL ))
    {
        tmp_called_138 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_138 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 882;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_202 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_call_arg_element_202 == NULL ))
    {
        tmp_call_arg_element_202 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_call_arg_element_202 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124745 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 882;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 882;
    tmp_call_arg_element_201 = CALL_FUNCTION_WITH_ARGS1( tmp_called_138, tmp_call_arg_element_202 );
    if ( tmp_call_arg_element_201 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 882;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_203 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_call_arg_element_203 == NULL ))
    {
        tmp_call_arg_element_203 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_call_arg_element_203 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_call_arg_element_201 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124141 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 882;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 882;
    tmp_dict_value_388 = CALL_FUNCTION_WITH_ARGS3( tmp_called_137, tmp_call_arg_element_200, tmp_call_arg_element_201, tmp_call_arg_element_203 );
    Py_DECREF( tmp_call_arg_element_201 );
    if ( tmp_dict_value_388 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 882;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_388 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_388, tmp_dict_value_388 );
    Py_DECREF( tmp_dict_value_388 );
    tmp_dict_value_389 = const_str_empty;
    tmp_dict_key_389 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_389, tmp_dict_value_389 );
    PyList_SET_ITEM( tmp_assign_source_33, 12, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_390 = _PyDict_NewPresized( 1 );
    tmp_dict_value_391 = const_str_digest_b0f41de0450f9223c04ee3ef6526d95f;
    tmp_dict_key_391 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_391 == NULL ))
    {
        tmp_dict_key_391 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_391 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_390 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 885;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_390, tmp_dict_key_391, tmp_dict_value_391 );
    tmp_dict_key_390 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_390, tmp_dict_value_390 );
    Py_DECREF( tmp_dict_value_390 );
    tmp_called_139 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_139 == NULL ))
    {
        tmp_called_139 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_139 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 886;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_204 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_call_arg_element_204 == NULL ))
    {
        tmp_call_arg_element_204 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_call_arg_element_204 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 72345 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 886;
        goto frame_exception_exit_1;
    }

    tmp_called_140 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_140 == NULL ))
    {
        tmp_called_140 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_140 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 886;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_206 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_call_arg_element_206 == NULL ))
    {
        tmp_call_arg_element_206 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_call_arg_element_206 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124745 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 886;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 886;
    tmp_call_arg_element_205 = CALL_FUNCTION_WITH_ARGS1( tmp_called_140, tmp_call_arg_element_206 );
    if ( tmp_call_arg_element_205 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 886;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 886;
    tmp_dict_value_392 = CALL_FUNCTION_WITH_ARGS2( tmp_called_139, tmp_call_arg_element_204, tmp_call_arg_element_205 );
    Py_DECREF( tmp_call_arg_element_205 );
    if ( tmp_dict_value_392 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 886;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_392 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_392, tmp_dict_value_392 );
    Py_DECREF( tmp_dict_value_392 );
    tmp_dict_value_393 = const_str_empty;
    tmp_dict_key_393 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_393, tmp_dict_value_393 );
    PyList_SET_ITEM( tmp_assign_source_33, 13, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 5 );
    tmp_dict_value_394 = const_str_digest_6f3504cf0f8ede84a5eacc957cd112c0;
    tmp_dict_key_394 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_394, tmp_dict_value_394 );
    tmp_dict_value_395 = _PyDict_NewPresized( 2 );
    tmp_dict_value_396 = const_str_digest_8a412c5a481127f099db01c171a0fb22;
    tmp_dict_key_396 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_dict_key_396 == NULL ))
    {
        tmp_dict_key_396 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_dict_key_396 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_395 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124212 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 892;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_395, tmp_dict_key_396, tmp_dict_value_396 );
    tmp_dict_value_397 = const_str_digest_2861f69496685cab3ecd9e5bb974c70d;
    tmp_called_141 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_141 == NULL ))
    {
        tmp_called_141 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_141 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_395 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 892;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_207 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_c );

    if (unlikely( tmp_call_arg_element_207 == NULL ))
    {
        tmp_call_arg_element_207 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_c );
    }

    if ( tmp_call_arg_element_207 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_395 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124212 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 892;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 892;
    tmp_dict_key_397 = CALL_FUNCTION_WITH_ARGS1( tmp_called_141, tmp_call_arg_element_207 );
    if ( tmp_dict_key_397 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_395 );

        frame_module->f_lineno = 892;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_dict_value_395, tmp_dict_key_397, tmp_dict_value_397 );
    Py_DECREF( tmp_dict_key_397 );
    tmp_dict_key_395 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_395, tmp_dict_value_395 );
    Py_DECREF( tmp_dict_value_395 );
    tmp_dict_value_398 = _PyDict_NewPresized( 1 );
    tmp_dict_value_399 = const_str_digest_8eaf9c6f13f0ea629b9b1feef1acea8a;
    tmp_dict_key_399 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_399 == NULL ))
    {
        tmp_dict_key_399 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_399 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_398 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 893;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_398, tmp_dict_key_399, tmp_dict_value_399 );
    tmp_dict_key_398 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_398, tmp_dict_value_398 );
    Py_DECREF( tmp_dict_value_398 );
    tmp_dict_value_400 = _PyDict_NewPresized( 1 );
    tmp_dict_value_401 = const_str_digest_89b6f674a8a140e56310bcfec0ed5012;
    tmp_dict_key_401 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_key_401 == NULL ))
    {
        tmp_dict_key_401 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_key_401 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_400 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124107 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 894;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_400, tmp_dict_key_401, tmp_dict_value_401 );
    tmp_dict_key_400 = const_str_plain_return;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_400, tmp_dict_value_400 );
    Py_DECREF( tmp_dict_value_400 );
    tmp_dict_value_402 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_dict_value_402 == NULL ))
    {
        tmp_dict_value_402 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_dict_value_402 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124745 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 895;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_402 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_402, tmp_dict_value_402 );
    PyList_SET_ITEM( tmp_assign_source_33, 14, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 9 );
    tmp_dict_value_403 = const_str_digest_94bcdde9f91533758026d6169c99b194;
    tmp_dict_key_403 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_403, tmp_dict_value_403 );
    tmp_dict_value_404 = _PyDict_NewPresized( 1 );
    tmp_dict_value_405 = const_str_plain_O;
    tmp_dict_key_405 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_405 == NULL ))
    {
        tmp_dict_key_405 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_405 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_404 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128672 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 898;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_404, tmp_dict_key_405, tmp_dict_value_405 );
    tmp_dict_key_404 = const_str_plain_argformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_404, tmp_dict_value_404 );
    Py_DECREF( tmp_dict_value_404 );
    tmp_dict_value_406 = _PyDict_NewPresized( 1 );
    tmp_dict_value_407 = const_str_plain_O;
    tmp_dict_key_407 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_407 == NULL ))
    {
        tmp_dict_key_407 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_407 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_406 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124244 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 899;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_406, tmp_dict_key_407, tmp_dict_value_407 );
    tmp_dict_key_406 = const_str_plain_keyformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_406, tmp_dict_value_406 );
    Py_DECREF( tmp_dict_value_406 );
    tmp_dict_value_408 = _PyDict_NewPresized( 1 );
    tmp_dict_value_409 = const_str_digest_74327d7eb38e858582fe177e885d2475;
    tmp_dict_key_409 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_409 == NULL ))
    {
        tmp_dict_key_409 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_409 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_408 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128672 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 900;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_408, tmp_dict_key_409, tmp_dict_value_409 );
    tmp_dict_key_408 = const_str_plain_args_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_408, tmp_dict_value_408 );
    Py_DECREF( tmp_dict_value_408 );
    tmp_dict_value_410 = _PyDict_NewPresized( 1 );
    tmp_dict_value_411 = const_str_digest_74327d7eb38e858582fe177e885d2475;
    tmp_dict_key_411 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_411 == NULL ))
    {
        tmp_dict_key_411 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_411 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_410 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124244 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 901;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_410, tmp_dict_key_411, tmp_dict_value_411 );
    tmp_dict_key_410 = const_str_plain_keys_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_410, tmp_dict_value_410 );
    Py_DECREF( tmp_dict_value_410 );
    tmp_dict_value_412 = _PyDict_NewPresized( 1 );
    tmp_dict_value_413 = const_str_digest_ec9c6dcde4931b9286e950f1e97757e1;
    tmp_dict_key_413 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_413 == NULL ))
    {
        tmp_dict_key_413 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_413 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_412 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124071 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 902;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_412, tmp_dict_key_413, tmp_dict_value_413 );
    tmp_dict_key_412 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_412, tmp_dict_value_412 );
    Py_DECREF( tmp_dict_value_412 );
    tmp_dict_value_414 = _PyDict_NewPresized( 1 );
    tmp_dict_value_415 = const_str_digest_e831352a8f095fac61be53d333f6cde5;
    tmp_dict_key_415 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_415 == NULL ))
    {
        tmp_dict_key_415 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_415 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_414 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124071 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 903;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_414, tmp_dict_key_415, tmp_dict_value_415 );
    tmp_dict_key_414 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_414, tmp_dict_value_414 );
    Py_DECREF( tmp_dict_value_414 );
    tmp_dict_value_416 = _PyDict_NewPresized( 1 );
    tmp_dict_value_417 = const_str_digest_9269cde17a435135088bd15f2c77c487;
    tmp_dict_key_417 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_417 == NULL ))
    {
        tmp_dict_key_417 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_417 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_416 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124071 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 906;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_416, tmp_dict_key_417, tmp_dict_value_417 );
    tmp_dict_key_416 = const_str_plain_closepyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_416, tmp_dict_value_416 );
    Py_DECREF( tmp_dict_value_416 );
    tmp_called_142 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_142 == NULL ))
    {
        tmp_called_142 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_142 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 907;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_208 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_call_arg_element_208 == NULL ))
    {
        tmp_call_arg_element_208 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_call_arg_element_208 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124745 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 907;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_209 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_call_arg_element_209 == NULL ))
    {
        tmp_call_arg_element_209 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_call_arg_element_209 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 907;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 907;
    tmp_dict_value_418 = CALL_FUNCTION_WITH_ARGS2( tmp_called_142, tmp_call_arg_element_208, tmp_call_arg_element_209 );
    if ( tmp_dict_value_418 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 907;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_418 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_418, tmp_dict_value_418 );
    Py_DECREF( tmp_dict_value_418 );
    PyList_SET_ITEM( tmp_assign_source_33, 15, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 5 );
    tmp_dict_value_419 = PyList_New( 3 );
    tmp_list_element_24 = _PyDict_NewPresized( 1 );
    tmp_dict_value_420 = const_str_digest_1632bec27e568661b517322c67a7aa13;
    tmp_dict_key_420 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_420 == NULL ))
    {
        tmp_dict_key_420 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_420 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_419 );
        Py_DECREF( tmp_list_element_24 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125444 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 909;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_24, tmp_dict_key_420, tmp_dict_value_420 );
    PyList_SET_ITEM( tmp_dict_value_419, 0, tmp_list_element_24 );
    tmp_list_element_24 = _PyDict_NewPresized( 1 );
    tmp_dict_value_421 = const_str_digest_5c182b7cc989dc414beab715240ecd25;
    tmp_called_143 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_143 == NULL ))
    {
        tmp_called_143 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_143 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_419 );
        Py_DECREF( tmp_list_element_24 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 910;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_210 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_call_arg_element_210 == NULL ))
    {
        tmp_call_arg_element_210 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_call_arg_element_210 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_419 );
        Py_DECREF( tmp_list_element_24 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124244 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 910;
        goto frame_exception_exit_1;
    }

    tmp_called_144 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_144 == NULL ))
    {
        tmp_called_144 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_144 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_419 );
        Py_DECREF( tmp_list_element_24 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 910;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_212 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_call_arg_element_212 == NULL ))
    {
        tmp_call_arg_element_212 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_call_arg_element_212 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_419 );
        Py_DECREF( tmp_list_element_24 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125444 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 910;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 910;
    tmp_call_arg_element_211 = CALL_FUNCTION_WITH_ARGS1( tmp_called_144, tmp_call_arg_element_212 );
    if ( tmp_call_arg_element_211 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_419 );
        Py_DECREF( tmp_list_element_24 );

        frame_module->f_lineno = 910;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 910;
    tmp_dict_key_421 = CALL_FUNCTION_WITH_ARGS2( tmp_called_143, tmp_call_arg_element_210, tmp_call_arg_element_211 );
    Py_DECREF( tmp_call_arg_element_211 );
    if ( tmp_dict_key_421 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_419 );
        Py_DECREF( tmp_list_element_24 );

        frame_module->f_lineno = 910;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_24, tmp_dict_key_421, tmp_dict_value_421 );
    Py_DECREF( tmp_dict_key_421 );
    PyList_SET_ITEM( tmp_dict_value_419, 1, tmp_list_element_24 );
    tmp_list_element_24 = const_str_digest_af413396ce224ead18aef866d1998f25;
    Py_INCREF( tmp_list_element_24 );
    PyList_SET_ITEM( tmp_dict_value_419, 2, tmp_list_element_24 );
    tmp_dict_key_419 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_419, tmp_dict_value_419 );
    Py_DECREF( tmp_dict_value_419 );
    tmp_dict_value_422 = const_str_digest_3f6cd6988d5cc425c4d00868999a9c0b;
    tmp_dict_key_422 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_422, tmp_dict_value_422 );
    tmp_dict_value_423 = LIST_COPY( const_list_str_digest_aef332a279fc26992d9b07f03b37a7b7_list );
    tmp_dict_key_423 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_423, tmp_dict_value_423 );
    Py_DECREF( tmp_dict_value_423 );
    tmp_called_145 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_145 == NULL ))
    {
        tmp_called_145 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_145 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 916;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_213 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_call_arg_element_213 == NULL ))
    {
        tmp_call_arg_element_213 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_call_arg_element_213 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124745 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 916;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_214 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_call_arg_element_214 == NULL ))
    {
        tmp_call_arg_element_214 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_call_arg_element_214 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 916;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 916;
    tmp_dict_value_424 = CALL_FUNCTION_WITH_ARGS2( tmp_called_145, tmp_call_arg_element_213, tmp_call_arg_element_214 );
    if ( tmp_dict_value_424 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 916;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_424 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_424, tmp_dict_value_424 );
    Py_DECREF( tmp_dict_value_424 );
    tmp_dict_value_425 = const_str_empty;
    tmp_dict_key_425 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_425, tmp_dict_value_425 );
    PyList_SET_ITEM( tmp_assign_source_33, 16, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 2 );
    tmp_dict_value_426 = _PyDict_NewPresized( 1 );
    tmp_dict_value_427 = const_str_digest_94bcdde9f91533758026d6169c99b194;
    tmp_dict_key_427 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_key_427 == NULL ))
    {
        tmp_dict_key_427 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_key_427 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_426 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124107 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 919;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_426, tmp_dict_key_427, tmp_dict_value_427 );
    tmp_dict_key_426 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_426, tmp_dict_value_426 );
    Py_DECREF( tmp_dict_value_426 );
    tmp_called_146 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_146 == NULL ))
    {
        tmp_called_146 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_146 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 920;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_215 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_call_arg_element_215 == NULL ))
    {
        tmp_call_arg_element_215 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_call_arg_element_215 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124745 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 920;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_216 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_call_arg_element_216 == NULL ))
    {
        tmp_call_arg_element_216 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_call_arg_element_216 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124141 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 920;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 920;
    tmp_dict_value_428 = CALL_FUNCTION_WITH_ARGS2( tmp_called_146, tmp_call_arg_element_215, tmp_call_arg_element_216 );
    if ( tmp_dict_value_428 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 920;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_428 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_428, tmp_dict_value_428 );
    Py_DECREF( tmp_dict_value_428 );
    PyList_SET_ITEM( tmp_assign_source_33, 17, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_429 = _PyDict_NewPresized( 1 );
    tmp_dict_value_430 = const_str_digest_b4d5fd0edbbdd276f1a0a17ef81e8860;
    tmp_dict_key_430 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_430 == NULL ))
    {
        tmp_dict_key_430 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_430 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_429 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125444 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 922;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_429, tmp_dict_key_430, tmp_dict_value_430 );
    tmp_dict_key_429 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_429, tmp_dict_value_429 );
    Py_DECREF( tmp_dict_value_429 );
    tmp_called_147 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_147 == NULL ))
    {
        tmp_called_147 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_147 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 923;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_217 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_call_arg_element_217 == NULL ))
    {
        tmp_call_arg_element_217 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_call_arg_element_217 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124745 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 923;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_218 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_call_arg_element_218 == NULL ))
    {
        tmp_call_arg_element_218 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_call_arg_element_218 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124141 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 923;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 923;
    tmp_dict_value_431 = CALL_FUNCTION_WITH_ARGS2( tmp_called_147, tmp_call_arg_element_217, tmp_call_arg_element_218 );
    if ( tmp_dict_value_431 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 923;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_431 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_431, tmp_dict_value_431 );
    Py_DECREF( tmp_dict_value_431 );
    tmp_dict_value_432 = const_str_empty;
    tmp_dict_key_432 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_432, tmp_dict_value_432 );
    PyList_SET_ITEM( tmp_assign_source_33, 18, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_433 = _PyDict_NewPresized( 1 );
    tmp_dict_value_434 = const_str_digest_196e1deb2a177ed3e9d78c2c4c6ca852;
    tmp_dict_key_434 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_key_434 == NULL ))
    {
        tmp_dict_key_434 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_key_434 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_433 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124107 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 926;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_433, tmp_dict_key_434, tmp_dict_value_434 );
    tmp_dict_key_433 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_433, tmp_dict_value_433 );
    Py_DECREF( tmp_dict_value_433 );
    tmp_dict_value_435 = LIST_COPY( const_list_str_digest_e94bac8f3260b056e46d869b06fc3df5_list );
    tmp_dict_key_435 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_435, tmp_dict_value_435 );
    Py_DECREF( tmp_dict_value_435 );
    tmp_dict_value_436 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_dict_value_436 == NULL ))
    {
        tmp_dict_value_436 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_dict_value_436 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124745 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 928;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_436 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_436, tmp_dict_value_436 );
    PyList_SET_ITEM( tmp_assign_source_33, 19, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_437 = _PyDict_NewPresized( 1 );
    tmp_dict_value_438 = const_str_digest_8eaf9c6f13f0ea629b9b1feef1acea8a;
    tmp_dict_key_438 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_438 == NULL ))
    {
        tmp_dict_key_438 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_438 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_437 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 930;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_437, tmp_dict_key_438, tmp_dict_value_438 );
    tmp_dict_key_437 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_437, tmp_dict_value_437 );
    Py_DECREF( tmp_dict_value_437 );
    tmp_dict_value_439 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_dict_value_439 == NULL ))
    {
        tmp_dict_value_439 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_dict_value_439 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124745 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 931;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_439 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_439, tmp_dict_value_439 );
    tmp_dict_value_440 = const_str_empty;
    tmp_dict_key_440 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_440, tmp_dict_value_440 );
    PyList_SET_ITEM( tmp_assign_source_33, 20, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 7 );
    tmp_dict_value_441 = LIST_COPY( const_list_83502bc928309bee706fd67dc708d8b5_list );
    tmp_dict_key_441 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_441, tmp_dict_value_441 );
    Py_DECREF( tmp_dict_value_441 );
    tmp_dict_value_442 = const_str_digest_8a412c5a481127f099db01c171a0fb22;
    tmp_dict_key_442 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_442, tmp_dict_value_442 );
    tmp_dict_value_443 = const_str_digest_17650eb00d01333f79fd06fb9c61cd9d;
    tmp_dict_key_443 = const_str_plain_callfortranappend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_443, tmp_dict_value_443 );
    tmp_dict_value_444 = _PyDict_NewPresized( 1 );
    tmp_dict_value_445 = const_str_digest_11a75f7b161c1a48991f1986e1eab885;
    tmp_dict_key_445 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_445 == NULL ))
    {
        tmp_dict_key_445 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_445 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_444 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 941;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_444, tmp_dict_key_445, tmp_dict_value_445 );
    tmp_dict_key_444 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_444, tmp_dict_value_444 );
    Py_DECREF( tmp_dict_value_444 );
    tmp_dict_value_446 = _PyDict_NewPresized( 1 );
    tmp_dict_value_447 = const_str_digest_09de792d93cc23e6cd4f80b6fa458fd3;
    tmp_dict_key_447 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_key_447 == NULL ))
    {
        tmp_dict_key_447 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_key_447 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_446 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124107 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 943;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_446, tmp_dict_key_447, tmp_dict_value_447 );
    tmp_dict_key_446 = const_str_plain_return;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_446, tmp_dict_value_446 );
    Py_DECREF( tmp_dict_value_446 );
    tmp_dict_value_448 = LIST_COPY( const_list_str_digest_901a22001a0c7f25add446a5f68900d0_list );
    tmp_dict_key_448 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_448, tmp_dict_value_448 );
    Py_DECREF( tmp_dict_value_448 );
    tmp_dict_value_449 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstring );

    if (unlikely( tmp_dict_value_449 == NULL ))
    {
        tmp_dict_value_449 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstring );
    }

    if ( tmp_dict_value_449 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124629 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 945;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_449 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_449, tmp_dict_value_449 );
    PyList_SET_ITEM( tmp_assign_source_33, 21, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 5 );
    tmp_dict_value_450 = const_str_digest_07686c6fa7631f753789a51e91f8665c;
    tmp_dict_key_450 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_450, tmp_dict_value_450 );
    tmp_dict_value_451 = const_str_digest_87d6d4bda621123152af053c0dde833f;
    tmp_dict_key_451 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_451, tmp_dict_value_451 );
    tmp_dict_value_452 = LIST_COPY( const_list_0a418c59c89f9fccd0e4ae0f11838976_list );
    tmp_dict_key_452 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_452, tmp_dict_value_452 );
    Py_DECREF( tmp_dict_value_452 );
    tmp_dict_value_453 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstring );

    if (unlikely( tmp_dict_value_453 == NULL ))
    {
        tmp_dict_value_453 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstring );
    }

    if ( tmp_dict_value_453 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124629 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 955;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_453 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_453, tmp_dict_value_453 );
    tmp_dict_value_454 = const_str_empty;
    tmp_dict_key_454 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_454, tmp_dict_value_454 );
    PyList_SET_ITEM( tmp_assign_source_33, 22, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 8 );
    tmp_dict_value_455 = _PyDict_NewPresized( 1 );
    tmp_dict_value_456 = const_str_plain_O;
    tmp_dict_key_456 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_456 == NULL ))
    {
        tmp_dict_key_456 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_456 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_455 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128672 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 958;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_455, tmp_dict_key_456, tmp_dict_value_456 );
    tmp_dict_key_455 = const_str_plain_argformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_455, tmp_dict_value_455 );
    Py_DECREF( tmp_dict_value_455 );
    tmp_dict_value_457 = _PyDict_NewPresized( 1 );
    tmp_dict_value_458 = const_str_plain_O;
    tmp_dict_key_458 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_458 == NULL ))
    {
        tmp_dict_key_458 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_458 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_457 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124244 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 959;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_457, tmp_dict_key_458, tmp_dict_value_458 );
    tmp_dict_key_457 = const_str_plain_keyformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_457, tmp_dict_value_457 );
    Py_DECREF( tmp_dict_value_457 );
    tmp_dict_value_459 = _PyDict_NewPresized( 1 );
    tmp_dict_value_460 = const_str_digest_74327d7eb38e858582fe177e885d2475;
    tmp_dict_key_460 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_460 == NULL ))
    {
        tmp_dict_key_460 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_460 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_459 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128672 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 960;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_459, tmp_dict_key_460, tmp_dict_value_460 );
    tmp_dict_key_459 = const_str_plain_args_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_459, tmp_dict_value_459 );
    Py_DECREF( tmp_dict_value_459 );
    tmp_dict_value_461 = _PyDict_NewPresized( 1 );
    tmp_dict_value_462 = const_str_digest_74327d7eb38e858582fe177e885d2475;
    tmp_dict_key_462 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_462 == NULL ))
    {
        tmp_dict_key_462 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_462 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_461 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124244 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 961;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_461, tmp_dict_key_462, tmp_dict_value_462 );
    tmp_dict_key_461 = const_str_plain_keys_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_461, tmp_dict_value_461 );
    Py_DECREF( tmp_dict_value_461 );
    tmp_dict_value_463 = _PyDict_NewPresized( 1 );
    tmp_dict_value_464 = const_str_digest_dbea79683d26f1311c1d73725d1126c6;
    tmp_dict_key_464 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_464 == NULL ))
    {
        tmp_dict_key_464 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_464 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_463 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124071 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 962;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_463, tmp_dict_key_464, tmp_dict_value_464 );
    tmp_dict_key_463 = const_str_plain_pyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_463, tmp_dict_value_463 );
    Py_DECREF( tmp_dict_value_463 );
    tmp_dict_value_465 = _PyDict_NewPresized( 1 );
    tmp_dict_value_466 = const_str_digest_3ff9b48b64cdbdd8b296b61508af401a;
    tmp_dict_key_466 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_466 == NULL ))
    {
        tmp_dict_key_466 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_466 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_465 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124071 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 965;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_465, tmp_dict_key_466, tmp_dict_value_466 );
    tmp_dict_key_465 = const_str_plain_closepyobjfrom;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_465, tmp_dict_value_465 );
    Py_DECREF( tmp_dict_value_465 );
    tmp_dict_value_467 = _PyDict_NewPresized( 1 );
    tmp_dict_value_468 = const_str_digest_ec9c6dcde4931b9286e950f1e97757e1;
    tmp_dict_key_468 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_inout );

    if (unlikely( tmp_dict_key_468 == NULL ))
    {
        tmp_dict_key_468 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_inout );
    }

    if ( tmp_dict_key_468 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_467 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124071 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 966;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_467, tmp_dict_key_468, tmp_dict_value_468 );
    tmp_dict_key_467 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_467, tmp_dict_value_467 );
    Py_DECREF( tmp_dict_value_467 );
    tmp_called_148 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_148 == NULL ))
    {
        tmp_called_148 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_148 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 967;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_219 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstring );

    if (unlikely( tmp_call_arg_element_219 == NULL ))
    {
        tmp_call_arg_element_219 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstring );
    }

    if ( tmp_call_arg_element_219 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124629 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 967;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_220 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_call_arg_element_220 == NULL ))
    {
        tmp_call_arg_element_220 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_call_arg_element_220 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 967;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 967;
    tmp_dict_value_469 = CALL_FUNCTION_WITH_ARGS2( tmp_called_148, tmp_call_arg_element_219, tmp_call_arg_element_220 );
    if ( tmp_dict_value_469 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 967;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_469 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_469, tmp_dict_value_469 );
    Py_DECREF( tmp_dict_value_469 );
    PyList_SET_ITEM( tmp_assign_source_33, 23, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 1 );
    tmp_called_149 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_149 == NULL ))
    {
        tmp_called_149 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_149 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 969;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_221 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstring );

    if (unlikely( tmp_call_arg_element_221 == NULL ))
    {
        tmp_call_arg_element_221 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstring );
    }

    if ( tmp_call_arg_element_221 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124629 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 969;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_222 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_call_arg_element_222 == NULL ))
    {
        tmp_call_arg_element_222 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_call_arg_element_222 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124141 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 969;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 969;
    tmp_dict_value_470 = CALL_FUNCTION_WITH_ARGS2( tmp_called_149, tmp_call_arg_element_221, tmp_call_arg_element_222 );
    if ( tmp_dict_value_470 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 969;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_470 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_470, tmp_dict_value_470 );
    Py_DECREF( tmp_dict_value_470 );
    PyList_SET_ITEM( tmp_assign_source_33, 24, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_471 = _PyDict_NewPresized( 1 );
    tmp_dict_value_472 = const_str_digest_11a75f7b161c1a48991f1986e1eab885;
    tmp_dict_key_472 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_472 == NULL ))
    {
        tmp_dict_key_472 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_472 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_471 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 971;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_471, tmp_dict_key_472, tmp_dict_value_472 );
    tmp_dict_key_471 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_471, tmp_dict_value_471 );
    Py_DECREF( tmp_dict_value_471 );
    tmp_dict_value_473 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstring );

    if (unlikely( tmp_dict_value_473 == NULL ))
    {
        tmp_dict_value_473 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstring );
    }

    if ( tmp_dict_value_473 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124629 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 972;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_473 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_473, tmp_dict_value_473 );
    tmp_dict_value_474 = const_str_empty;
    tmp_dict_key_474 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_474, tmp_dict_value_474 );
    PyList_SET_ITEM( tmp_assign_source_33, 25, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 5 );
    tmp_dict_value_475 = LIST_COPY( const_list_a6fb55f787096d197a68d518259f030c_list );
    tmp_dict_key_475 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_475, tmp_dict_value_475 );
    Py_DECREF( tmp_dict_value_475 );
    tmp_dict_value_476 = const_str_digest_8a412c5a481127f099db01c171a0fb22;
    tmp_dict_key_476 = const_str_plain_callfortran;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_476, tmp_dict_value_476 );
    tmp_dict_value_477 = _PyDict_NewPresized( 1 );
    tmp_dict_value_478 = const_str_digest_0250bf479570e6e650f305dc350be4a1;
    tmp_dict_key_478 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_dict_key_478 == NULL ))
    {
        tmp_dict_key_478 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_dict_key_478 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_477 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124107 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 984;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_477, tmp_dict_key_478, tmp_dict_value_478 );
    tmp_dict_key_477 = const_str_plain_return;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_477, tmp_dict_value_477 );
    Py_DECREF( tmp_dict_value_477 );
    tmp_dict_value_479 = const_str_digest_901a22001a0c7f25add446a5f68900d0;
    tmp_dict_key_479 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_479, tmp_dict_value_479 );
    tmp_dict_value_480 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_dict_value_480 == NULL ))
    {
        tmp_dict_value_480 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_dict_value_480 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124593 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 986;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_480 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_480, tmp_dict_value_480 );
    PyList_SET_ITEM( tmp_assign_source_33, 26, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 8 );
    tmp_dict_value_481 = const_str_digest_a23ad65f708fe0ccf3375a05edaf137f;
    tmp_dict_key_481 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_481, tmp_dict_value_481 );
    tmp_dict_value_482 = const_str_digest_484347358833d2d05d8fc69e7493f100;
    tmp_dict_key_482 = const_str_plain_kwlistxa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_482, tmp_dict_value_482 );
    tmp_dict_value_483 = const_str_plain_i;
    tmp_dict_key_483 = const_str_plain_xaformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_483, tmp_dict_value_483 );
    tmp_dict_value_484 = const_str_digest_fa2c4b951468a9631db264c5434a4c6d;
    tmp_dict_key_484 = const_str_plain_keys_xa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_484, tmp_dict_value_484 );
    tmp_dict_value_485 = const_str_digest_b8c204bcd104359163fd2e01f36173c7;
    tmp_dict_key_485 = const_str_plain_docsignxa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_485, tmp_dict_value_485 );
    tmp_dict_value_486 = const_str_digest_152c5ee2b2e7dc93bd9f827427a9f43c;
    tmp_dict_key_486 = const_str_plain_docsignxashort;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_486, tmp_dict_value_486 );
    tmp_dict_value_487 = const_str_digest_773353192e877182884c50a8d0c0486a;
    tmp_dict_key_487 = const_str_plain_docstropt;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_487, tmp_dict_value_487 );
    tmp_called_150 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_150 == NULL ))
    {
        tmp_called_150 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_150 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 995;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_223 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_call_arg_element_223 == NULL ))
    {
        tmp_call_arg_element_223 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_call_arg_element_223 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124593 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 995;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_224 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_overwrite );

    if (unlikely( tmp_call_arg_element_224 == NULL ))
    {
        tmp_call_arg_element_224 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_overwrite );
    }

    if ( tmp_call_arg_element_224 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151448 ], 40, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 995;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 995;
    tmp_dict_value_488 = CALL_FUNCTION_WITH_ARGS2( tmp_called_150, tmp_call_arg_element_223, tmp_call_arg_element_224 );
    if ( tmp_dict_value_488 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 995;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_488 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_488, tmp_dict_value_488 );
    Py_DECREF( tmp_dict_value_488 );
    PyList_SET_ITEM( tmp_assign_source_33, 27, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_489 = const_str_digest_e1e3e29ea125920cd2f7a3b6ae5e81aa;
    tmp_dict_key_489 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_489, tmp_dict_value_489 );
    tmp_called_151 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_151 == NULL ))
    {
        tmp_called_151 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_151 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 998;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_225 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_call_arg_element_225 == NULL ))
    {
        tmp_call_arg_element_225 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_call_arg_element_225 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124593 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 998;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_226 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_overwrite );

    if (unlikely( tmp_call_arg_element_226 == NULL ))
    {
        tmp_call_arg_element_226 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_overwrite );
    }

    if ( tmp_call_arg_element_226 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151448 ], 40, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 998;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 998;
    tmp_dict_value_490 = CALL_FUNCTION_WITH_ARGS2( tmp_called_151, tmp_call_arg_element_225, tmp_call_arg_element_226 );
    if ( tmp_dict_value_490 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 998;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_490 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_490, tmp_dict_value_490 );
    Py_DECREF( tmp_dict_value_490 );
    tmp_dict_value_491 = const_str_empty;
    tmp_dict_key_491 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_491, tmp_dict_value_491 );
    PyList_SET_ITEM( tmp_assign_source_33, 28, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 8 );
    tmp_dict_value_492 = const_str_digest_ca50e6177ec63039f0422a4797375d0f;
    tmp_dict_key_492 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_492, tmp_dict_value_492 );
    tmp_dict_value_493 = const_str_digest_484347358833d2d05d8fc69e7493f100;
    tmp_dict_key_493 = const_str_plain_kwlistxa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_493, tmp_dict_value_493 );
    tmp_dict_value_494 = const_str_plain_i;
    tmp_dict_key_494 = const_str_plain_xaformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_494, tmp_dict_value_494 );
    tmp_dict_value_495 = const_str_digest_fa2c4b951468a9631db264c5434a4c6d;
    tmp_dict_key_495 = const_str_plain_keys_xa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_495, tmp_dict_value_495 );
    tmp_dict_value_496 = const_str_digest_617134fe87fb293497d3503a48221184;
    tmp_dict_key_496 = const_str_plain_docsignxa;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_496, tmp_dict_value_496 );
    tmp_dict_value_497 = const_str_digest_152c5ee2b2e7dc93bd9f827427a9f43c;
    tmp_dict_key_497 = const_str_plain_docsignxashort;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_497, tmp_dict_value_497 );
    tmp_dict_value_498 = const_str_digest_ac6a99e739693f272ebb761c3b4a46d8;
    tmp_dict_key_498 = const_str_plain_docstropt;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_498, tmp_dict_value_498 );
    tmp_called_152 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_152 == NULL ))
    {
        tmp_called_152 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_152 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1009;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_227 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_call_arg_element_227 == NULL ))
    {
        tmp_call_arg_element_227 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_call_arg_element_227 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124593 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1009;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_228 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_copy );

    if (unlikely( tmp_call_arg_element_228 == NULL ))
    {
        tmp_call_arg_element_228 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_copy );
    }

    if ( tmp_call_arg_element_228 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151488 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1009;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1009;
    tmp_dict_value_499 = CALL_FUNCTION_WITH_ARGS2( tmp_called_152, tmp_call_arg_element_227, tmp_call_arg_element_228 );
    if ( tmp_dict_value_499 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 1009;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_499 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_499, tmp_dict_value_499 );
    Py_DECREF( tmp_dict_value_499 );
    PyList_SET_ITEM( tmp_assign_source_33, 29, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_500 = const_str_digest_e1e3e29ea125920cd2f7a3b6ae5e81aa;
    tmp_dict_key_500 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_500, tmp_dict_value_500 );
    tmp_called_153 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_153 == NULL ))
    {
        tmp_called_153 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_153 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1012;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_229 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_call_arg_element_229 == NULL ))
    {
        tmp_call_arg_element_229 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_call_arg_element_229 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124593 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1012;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_230 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_copy );

    if (unlikely( tmp_call_arg_element_230 == NULL ))
    {
        tmp_call_arg_element_230 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_copy );
    }

    if ( tmp_call_arg_element_230 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151488 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1012;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1012;
    tmp_dict_value_501 = CALL_FUNCTION_WITH_ARGS2( tmp_called_153, tmp_call_arg_element_229, tmp_call_arg_element_230 );
    if ( tmp_dict_value_501 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 1012;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_501 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_501, tmp_dict_value_501 );
    Py_DECREF( tmp_dict_value_501 );
    tmp_dict_value_502 = const_str_empty;
    tmp_dict_key_502 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_502, tmp_dict_value_502 );
    PyList_SET_ITEM( tmp_assign_source_33, 30, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_503 = PyList_New( 2 );
    tmp_list_element_25 = _PyDict_NewPresized( 1 );
    tmp_dict_value_504 = const_str_plain_forcomb;
    tmp_dict_key_504 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_504 == NULL ))
    {
        tmp_dict_key_504 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_504 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_503 );
        Py_DECREF( tmp_list_element_25 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125444 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1015;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_25, tmp_dict_key_504, tmp_dict_value_504 );
    PyList_SET_ITEM( tmp_dict_value_503, 0, tmp_list_element_25 );
    tmp_list_element_25 = _PyDict_NewPresized( 1 );
    tmp_dict_value_505 = const_str_plain_CFUNCSMESS;
    tmp_dict_key_505 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_505 == NULL ))
    {
        tmp_dict_key_505 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_505 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_503 );
        Py_DECREF( tmp_list_element_25 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125444 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1015;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_25, tmp_dict_key_505, tmp_dict_value_505 );
    PyList_SET_ITEM( tmp_dict_value_503, 1, tmp_list_element_25 );
    tmp_dict_key_503 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_503, tmp_dict_value_503 );
    Py_DECREF( tmp_dict_value_503 );
    tmp_dict_value_506 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_dict_value_506 == NULL ))
    {
        tmp_dict_value_506 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_dict_value_506 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124593 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1016;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_506 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_506, tmp_dict_value_506 );
    tmp_dict_value_507 = const_str_empty;
    tmp_dict_key_507 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_507, tmp_dict_value_507 );
    PyList_SET_ITEM( tmp_assign_source_33, 31, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 6 );
    tmp_dict_value_508 = const_str_digest_94bcdde9f91533758026d6169c99b194;
    tmp_dict_key_508 = const_str_plain_decl;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_508, tmp_dict_value_508 );
    tmp_dict_value_509 = _PyDict_NewPresized( 1 );
    tmp_dict_value_510 = const_str_plain_O;
    tmp_dict_key_510 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_510 == NULL ))
    {
        tmp_dict_key_510 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_510 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_509 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128672 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1020;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_509, tmp_dict_key_510, tmp_dict_value_510 );
    tmp_dict_key_509 = const_str_plain_argformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_509, tmp_dict_value_509 );
    Py_DECREF( tmp_dict_value_509 );
    tmp_dict_value_511 = _PyDict_NewPresized( 1 );
    tmp_dict_value_512 = const_str_plain_O;
    tmp_dict_key_512 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_512 == NULL ))
    {
        tmp_dict_key_512 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_512 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_511 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124244 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1021;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_511, tmp_dict_key_512, tmp_dict_value_512 );
    tmp_dict_key_511 = const_str_plain_keyformat;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_511, tmp_dict_value_511 );
    Py_DECREF( tmp_dict_value_511 );
    tmp_dict_value_513 = _PyDict_NewPresized( 1 );
    tmp_dict_value_514 = const_str_digest_74327d7eb38e858582fe177e885d2475;
    tmp_dict_key_514 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isrequired );

    if (unlikely( tmp_dict_key_514 == NULL ))
    {
        tmp_dict_key_514 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isrequired );
    }

    if ( tmp_dict_key_514 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_513 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128672 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1022;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_513, tmp_dict_key_514, tmp_dict_value_514 );
    tmp_dict_key_513 = const_str_plain_args_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_513, tmp_dict_value_513 );
    Py_DECREF( tmp_dict_value_513 );
    tmp_dict_value_515 = _PyDict_NewPresized( 1 );
    tmp_dict_value_516 = const_str_digest_74327d7eb38e858582fe177e885d2475;
    tmp_dict_key_516 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isoptional );

    if (unlikely( tmp_dict_key_516 == NULL ))
    {
        tmp_dict_key_516 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isoptional );
    }

    if ( tmp_dict_key_516 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_515 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124244 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1023;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_515, tmp_dict_key_516, tmp_dict_value_516 );
    tmp_dict_key_515 = const_str_plain_keys_capi;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_515, tmp_dict_value_515 );
    Py_DECREF( tmp_dict_value_515 );
    tmp_called_154 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_154 == NULL ))
    {
        tmp_called_154 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_154 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1039;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_231 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_call_arg_element_231 == NULL ))
    {
        tmp_call_arg_element_231 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_call_arg_element_231 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124593 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1039;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_232 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_call_arg_element_232 == NULL ))
    {
        tmp_call_arg_element_232 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_call_arg_element_232 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1039;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1039;
    tmp_dict_value_517 = CALL_FUNCTION_WITH_ARGS2( tmp_called_154, tmp_call_arg_element_231, tmp_call_arg_element_232 );
    if ( tmp_dict_value_517 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 1039;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_517 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_517, tmp_dict_value_517 );
    Py_DECREF( tmp_dict_value_517 );
    PyList_SET_ITEM( tmp_assign_source_33, 32, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 4 );
    tmp_dict_value_518 = PyList_New( 6 );
    tmp_list_element_26 = const_str_digest_140b8c5286854407f508a0dae9b51bd0;
    Py_INCREF( tmp_list_element_26 );
    PyList_SET_ITEM( tmp_dict_value_518, 0, tmp_list_element_26 );
    tmp_list_element_26 = const_str_digest_4085e6150841584387baceb03e192208;
    Py_INCREF( tmp_list_element_26 );
    PyList_SET_ITEM( tmp_dict_value_518, 1, tmp_list_element_26 );
    tmp_list_element_26 = _PyDict_NewPresized( 1 );
    tmp_dict_value_519 = const_str_digest_3dc156e6a2d607058ba86c8c0498e4f7;
    tmp_dict_key_519 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_dict_key_519 == NULL ))
    {
        tmp_dict_key_519 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_dict_key_519 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124141 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1043;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_26, tmp_dict_key_519, tmp_dict_value_519 );
    PyList_SET_ITEM( tmp_dict_value_518, 2, tmp_list_element_26 );
    tmp_list_element_26 = _PyDict_NewPresized( 1 );
    tmp_dict_value_520 = const_str_digest_d88eb99589aadec9018c5dcfb35c3d1b;
    tmp_dict_key_520 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_dict_key_520 == NULL ))
    {
        tmp_dict_key_520 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_dict_key_520 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1044;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_26, tmp_dict_key_520, tmp_dict_value_520 );
    PyList_SET_ITEM( tmp_dict_value_518, 3, tmp_list_element_26 );
    tmp_list_element_26 = const_str_digest_e6393a97f5d5446e3f140f696e680264;
    Py_INCREF( tmp_list_element_26 );
    PyList_SET_ITEM( tmp_dict_value_518, 4, tmp_list_element_26 );
    tmp_list_element_26 = _PyDict_NewPresized( 1 );
    tmp_dict_value_521 = PyList_New( 4 );
    tmp_list_element_27 = _PyDict_NewPresized( 1 );
    tmp_dict_value_522 = const_str_digest_99db67e2828ac2898b82b9bee5044782;
    tmp_dict_key_522 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_dict_key_522 == NULL ))
    {
        tmp_dict_key_522 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_dict_key_522 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );
        Py_DECREF( tmp_dict_value_521 );
        Py_DECREF( tmp_list_element_27 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1053;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_27, tmp_dict_key_522, tmp_dict_value_522 );
    PyList_SET_ITEM( tmp_dict_value_521, 0, tmp_list_element_27 );
    tmp_list_element_27 = _PyDict_NewPresized( 1 );
    tmp_dict_value_523 = const_str_digest_9bfe93836a7a4bca28d53503f73d529f;
    tmp_dict_key_523 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_dict_key_523 == NULL ))
    {
        tmp_dict_key_523 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_dict_key_523 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );
        Py_DECREF( tmp_dict_value_521 );
        Py_DECREF( tmp_list_element_27 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124141 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1054;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_27, tmp_dict_key_523, tmp_dict_value_523 );
    PyList_SET_ITEM( tmp_dict_value_521, 1, tmp_list_element_27 );
    tmp_list_element_27 = _PyDict_NewPresized( 1 );
    tmp_dict_value_524 = const_str_digest_18c508c400e195b421fc11655c7a57b2;
    tmp_dict_key_524 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexarray );

    if (unlikely( tmp_dict_key_524 == NULL ))
    {
        tmp_dict_key_524 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexarray );
    }

    if ( tmp_dict_key_524 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );
        Py_DECREF( tmp_dict_value_521 );
        Py_DECREF( tmp_list_element_27 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128275 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1055;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_27, tmp_dict_key_524, tmp_dict_value_524 );
    PyList_SET_ITEM( tmp_dict_value_521, 2, tmp_list_element_27 );
    tmp_list_element_27 = const_str_digest_1177440af11d75a5bc642deb1185d476;
    Py_INCREF( tmp_list_element_27 );
    PyList_SET_ITEM( tmp_dict_value_521, 3, tmp_list_element_27 );
    tmp_dict_key_521 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_521 == NULL ))
    {
        tmp_dict_key_521 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_521 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_518 );
        Py_DECREF( tmp_list_element_26 );
        Py_DECREF( tmp_dict_value_521 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125444 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1052;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_26, tmp_dict_key_521, tmp_dict_value_521 );
    Py_DECREF( tmp_dict_value_521 );
    PyList_SET_ITEM( tmp_dict_value_518, 5, tmp_list_element_26 );
    tmp_dict_key_518 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_518, tmp_dict_value_518 );
    Py_DECREF( tmp_dict_value_518 );
    tmp_dict_value_525 = PyList_New( 4 );
    tmp_list_element_28 = const_str_digest_c008d08b40f62830643d6e456c174f44;
    Py_INCREF( tmp_list_element_28 );
    PyList_SET_ITEM( tmp_dict_value_525, 0, tmp_list_element_28 );
    tmp_list_element_28 = _PyDict_NewPresized( 1 );
    tmp_dict_value_526 = const_str_digest_ba96e1b0745354ebb9ebbd896eef2382;
    tmp_called_155 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_155 == NULL ))
    {
        tmp_called_155 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_155 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1072;
        goto frame_exception_exit_1;
    }

    tmp_called_156 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_or );

    if (unlikely( tmp_called_156 == NULL ))
    {
        tmp_called_156 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_or );
    }

    if ( tmp_called_156 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125281 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1072;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_234 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_call_arg_element_234 == NULL ))
    {
        tmp_call_arg_element_234 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_call_arg_element_234 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124107 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1072;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_235 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_call_arg_element_235 == NULL ))
    {
        tmp_call_arg_element_235 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_call_arg_element_235 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124141 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1072;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1072;
    tmp_call_arg_element_233 = CALL_FUNCTION_WITH_ARGS2( tmp_called_156, tmp_call_arg_element_234, tmp_call_arg_element_235 );
    if ( tmp_call_arg_element_233 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );

        frame_module->f_lineno = 1072;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 1072;
    tmp_dict_key_526 = CALL_FUNCTION_WITH_ARGS1( tmp_called_155, tmp_call_arg_element_233 );
    Py_DECREF( tmp_call_arg_element_233 );
    if ( tmp_dict_key_526 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );

        frame_module->f_lineno = 1072;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_28, tmp_dict_key_526, tmp_dict_value_526 );
    Py_DECREF( tmp_dict_key_526 );
    PyList_SET_ITEM( tmp_dict_value_525, 1, tmp_list_element_28 );
    tmp_list_element_28 = _PyDict_NewPresized( 1 );
    tmp_dict_value_527 = const_str_digest_428b1f0db6614bc681cf8230e37e4727;
    tmp_called_157 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_157 == NULL ))
    {
        tmp_called_157 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_157 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1075;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_236 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_hide );

    if (unlikely( tmp_call_arg_element_236 == NULL ))
    {
        tmp_call_arg_element_236 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_hide );
    }

    if ( tmp_call_arg_element_236 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124141 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1075;
        goto frame_exception_exit_1;
    }

    tmp_called_158 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_158 == NULL ))
    {
        tmp_called_158 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_158 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1075;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_238 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_out );

    if (unlikely( tmp_call_arg_element_238 == NULL ))
    {
        tmp_call_arg_element_238 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_out );
    }

    if ( tmp_call_arg_element_238 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124107 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1075;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1075;
    tmp_call_arg_element_237 = CALL_FUNCTION_WITH_ARGS1( tmp_called_158, tmp_call_arg_element_238 );
    if ( tmp_call_arg_element_237 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );

        frame_module->f_lineno = 1075;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 1075;
    tmp_dict_key_527 = CALL_FUNCTION_WITH_ARGS2( tmp_called_157, tmp_call_arg_element_236, tmp_call_arg_element_237 );
    Py_DECREF( tmp_call_arg_element_237 );
    if ( tmp_dict_key_527 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );

        frame_module->f_lineno = 1075;
        goto frame_exception_exit_1;
    }
    PyDict_SetItem( tmp_list_element_28, tmp_dict_key_527, tmp_dict_value_527 );
    Py_DECREF( tmp_dict_key_527 );
    PyList_SET_ITEM( tmp_dict_value_525, 2, tmp_list_element_28 );
    tmp_list_element_28 = _PyDict_NewPresized( 1 );
    tmp_dict_value_528 = const_str_digest_681c035c971246c828024e1eb1a024c7;
    tmp_dict_key_528 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_hasinitvalue );

    if (unlikely( tmp_dict_key_528 == NULL ))
    {
        tmp_dict_key_528 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_hasinitvalue );
    }

    if ( tmp_dict_key_528 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_525 );
        Py_DECREF( tmp_list_element_28 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125444 ], 34, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1076;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_list_element_28, tmp_dict_key_528, tmp_dict_value_528 );
    PyList_SET_ITEM( tmp_dict_value_525, 3, tmp_list_element_28 );
    tmp_dict_key_525 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_525, tmp_dict_value_525 );
    Py_DECREF( tmp_dict_value_525 );
    tmp_dict_value_529 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_dict_value_529 == NULL ))
    {
        tmp_dict_value_529 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_dict_value_529 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124593 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1078;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_529 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_529, tmp_dict_value_529 );
    tmp_dict_value_530 = const_str_empty;
    tmp_dict_key_530 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_530, tmp_dict_value_530 );
    PyList_SET_ITEM( tmp_assign_source_33, 33, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 1 );
    tmp_called_159 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_159 == NULL ))
    {
        tmp_called_159 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_159 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1087;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_239 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_call_arg_element_239 == NULL ))
    {
        tmp_call_arg_element_239 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_call_arg_element_239 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124593 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1087;
        goto frame_exception_exit_1;
    }

    tmp_called_160 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_160 == NULL ))
    {
        tmp_called_160 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_160 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1087;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_241 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexarray );

    if (unlikely( tmp_call_arg_element_241 == NULL ))
    {
        tmp_call_arg_element_241 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexarray );
    }

    if ( tmp_call_arg_element_241 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128275 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1087;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1087;
    tmp_call_arg_element_240 = CALL_FUNCTION_WITH_ARGS1( tmp_called_160, tmp_call_arg_element_241 );
    if ( tmp_call_arg_element_240 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 1087;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 1087;
    tmp_dict_value_531 = CALL_FUNCTION_WITH_ARGS2( tmp_called_159, tmp_call_arg_element_239, tmp_call_arg_element_240 );
    Py_DECREF( tmp_call_arg_element_240 );
    if ( tmp_dict_value_531 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 1087;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_531 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_531, tmp_dict_value_531 );
    Py_DECREF( tmp_dict_value_531 );
    PyList_SET_ITEM( tmp_assign_source_33, 34, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 1 );
    tmp_called_161 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_161 == NULL ))
    {
        tmp_called_161 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_161 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1089;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_242 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_call_arg_element_242 == NULL ))
    {
        tmp_call_arg_element_242 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_call_arg_element_242 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124593 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1089;
        goto frame_exception_exit_1;
    }

    tmp_called_162 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_162 == NULL ))
    {
        tmp_called_162 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_162 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1089;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_244 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexarray );

    if (unlikely( tmp_call_arg_element_244 == NULL ))
    {
        tmp_call_arg_element_244 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexarray );
    }

    if ( tmp_call_arg_element_244 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128275 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1089;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1089;
    tmp_call_arg_element_243 = CALL_FUNCTION_WITH_ARGS1( tmp_called_162, tmp_call_arg_element_244 );
    if ( tmp_call_arg_element_243 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 1089;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_245 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isintent_nothide );

    if (unlikely( tmp_call_arg_element_245 == NULL ))
    {
        tmp_call_arg_element_245 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isintent_nothide );
    }

    if ( tmp_call_arg_element_245 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_call_arg_element_243 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125197 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1089;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1089;
    tmp_dict_value_532 = CALL_FUNCTION_WITH_ARGS3( tmp_called_161, tmp_call_arg_element_242, tmp_call_arg_element_243, tmp_call_arg_element_245 );
    Py_DECREF( tmp_call_arg_element_243 );
    if ( tmp_dict_value_532 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );

        frame_module->f_lineno = 1089;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_532 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_532, tmp_dict_value_532 );
    Py_DECREF( tmp_dict_value_532 );
    PyList_SET_ITEM( tmp_assign_source_33, 35, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_533 = const_str_digest_034683ceccce831b3c4724622e7c61e0;
    tmp_dict_key_533 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_533, tmp_dict_value_533 );
    tmp_dict_value_534 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isint1array );

    if (unlikely( tmp_dict_value_534 == NULL ))
    {
        tmp_dict_value_534 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isint1array );
    }

    if ( tmp_dict_value_534 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151415 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1093;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_534 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_534, tmp_dict_value_534 );
    tmp_dict_value_535 = const_str_empty;
    tmp_dict_key_535 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_535, tmp_dict_value_535 );
    PyList_SET_ITEM( tmp_assign_source_33, 36, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_536 = const_str_digest_034683ceccce831b3c4724622e7c61e0;
    tmp_dict_key_536 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_536, tmp_dict_value_536 );
    tmp_dict_value_537 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_chararray );

    if (unlikely( tmp_dict_value_537 == NULL ))
    {
        tmp_dict_value_537 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_chararray );
    }

    if ( tmp_dict_value_537 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151199 ], 42, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1098;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_537 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_537, tmp_dict_value_537 );
    tmp_dict_value_538 = const_str_empty;
    tmp_dict_key_538 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_538, tmp_dict_value_538 );
    PyList_SET_ITEM( tmp_assign_source_33, 37, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_539 = const_str_digest_034683ceccce831b3c4724622e7c61e0;
    tmp_dict_key_539 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_539, tmp_dict_value_539 );
    tmp_dict_value_540 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_shortarray );

    if (unlikely( tmp_dict_value_540 == NULL ))
    {
        tmp_dict_value_540 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_shortarray );
    }

    if ( tmp_dict_value_540 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151241 ], 43, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1103;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_540 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_540, tmp_dict_value_540 );
    tmp_dict_value_541 = const_str_empty;
    tmp_dict_key_541 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_541, tmp_dict_value_541 );
    PyList_SET_ITEM( tmp_assign_source_33, 38, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_542 = const_str_digest_034683ceccce831b3c4724622e7c61e0;
    tmp_dict_key_542 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_542, tmp_dict_value_542 );
    tmp_dict_value_543 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isunsigned_long_longarray );

    if (unlikely( tmp_dict_value_543 == NULL ))
    {
        tmp_dict_value_543 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isunsigned_long_longarray );
    }

    if ( tmp_dict_value_543 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 151284 ], 47, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1108;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_543 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_543, tmp_dict_value_543 );
    tmp_dict_value_544 = const_str_empty;
    tmp_dict_key_544 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_544, tmp_dict_value_544 );
    PyList_SET_ITEM( tmp_assign_source_33, 39, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_545 = const_str_digest_034683ceccce831b3c4724622e7c61e0;
    tmp_dict_key_545 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_545, tmp_dict_value_545 );
    tmp_dict_value_546 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplexarray );

    if (unlikely( tmp_dict_value_546 == NULL ))
    {
        tmp_dict_value_546 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplexarray );
    }

    if ( tmp_dict_value_546 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128275 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1113;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_546 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_546, tmp_dict_value_546 );
    tmp_dict_value_547 = const_str_empty;
    tmp_dict_key_547 = const_str_plain__depend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_547, tmp_dict_value_547 );
    PyList_SET_ITEM( tmp_assign_source_33, 40, tmp_list_element_15 );
    tmp_list_element_15 = _PyDict_NewPresized( 3 );
    tmp_dict_value_548 = _PyDict_NewPresized( 1 );
    tmp_dict_value_549 = const_str_digest_fa68c6dda4f168588cd3f272b7e3b4fb;
    tmp_dict_key_549 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarrayofstrings );

    if (unlikely( tmp_dict_key_549 == NULL ))
    {
        tmp_dict_key_549 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarrayofstrings );
    }

    if ( tmp_dict_key_549 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        Py_DECREF( tmp_dict_value_548 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126501 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1118;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_548, tmp_dict_key_549, tmp_dict_value_549 );
    tmp_dict_key_548 = const_str_plain_callfortranappend;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_548, tmp_dict_value_548 );
    Py_DECREF( tmp_dict_value_548 );
    tmp_dict_value_550 = const_str_plain_string;
    tmp_dict_key_550 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_550, tmp_dict_value_550 );
    tmp_dict_value_551 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstringarray );

    if (unlikely( tmp_dict_value_551 == NULL ))
    {
        tmp_dict_value_551 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstringarray );
    }

    if ( tmp_dict_value_551 == NULL )
    {
        Py_DECREF( tmp_assign_source_33 );
        Py_DECREF( tmp_list_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124666 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1120;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_551 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_15, tmp_dict_key_551, tmp_dict_value_551 );
    PyList_SET_ITEM( tmp_assign_source_33, 41, tmp_list_element_15 );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_arg_rules, tmp_assign_source_33 );
    tmp_assign_source_34 = PyList_New( 5 );
    tmp_list_element_29 = _PyDict_NewPresized( 2 );
    tmp_dict_value_552 = _PyDict_NewPresized( 1 );
    tmp_dict_value_553 = const_str_digest_ba6e2734a4c4b33dd16fd510fc59eb6f;
    tmp_dict_key_553 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_debugcapi );

    if (unlikely( tmp_dict_key_553 == NULL ))
    {
        tmp_dict_key_553 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_debugcapi );
    }

    if ( tmp_dict_key_553 == NULL )
    {
        Py_DECREF( tmp_assign_source_34 );
        Py_DECREF( tmp_list_element_29 );
        Py_DECREF( tmp_dict_value_552 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 128634 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1128;
        goto frame_exception_exit_1;
    }

    PyDict_SetItem( tmp_dict_value_552, tmp_dict_key_553, tmp_dict_value_553 );
    tmp_dict_key_552 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_552, tmp_dict_value_552 );
    Py_DECREF( tmp_dict_value_552 );
    tmp_dict_value_554 = const_str_digest_901a22001a0c7f25add446a5f68900d0;
    tmp_dict_key_554 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_554, tmp_dict_value_554 );
    PyList_SET_ITEM( tmp_assign_source_34, 0, tmp_list_element_29 );
    tmp_list_element_29 = _PyDict_NewPresized( 5 );
    tmp_dict_value_555 = const_str_digest_a32269879300b041fd441d576a971aa4;
    tmp_dict_key_555 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_555, tmp_dict_value_555 );
    tmp_dict_value_556 = const_str_digest_2f4f3f7d23ec8a68ccbc66a579aca6d2;
    tmp_dict_key_556 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_556, tmp_dict_value_556 );
    tmp_dict_value_557 = const_str_plain_CHECKSCALAR;
    tmp_dict_key_557 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_557, tmp_dict_value_557 );
    tmp_called_163 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_and );

    if (unlikely( tmp_called_163 == NULL ))
    {
        tmp_called_163 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_and );
    }

    if ( tmp_called_163 == NULL )
    {
        Py_DECREF( tmp_assign_source_34 );
        Py_DECREF( tmp_list_element_29 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126137 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1134;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_246 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isscalar );

    if (unlikely( tmp_call_arg_element_246 == NULL ))
    {
        tmp_call_arg_element_246 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isscalar );
    }

    if ( tmp_call_arg_element_246 == NULL )
    {
        Py_DECREF( tmp_assign_source_34 );
        Py_DECREF( tmp_list_element_29 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 72345 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1134;
        goto frame_exception_exit_1;
    }

    tmp_called_164 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_l_not );

    if (unlikely( tmp_called_164 == NULL ))
    {
        tmp_called_164 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_l_not );
    }

    if ( tmp_called_164 == NULL )
    {
        Py_DECREF( tmp_assign_source_34 );
        Py_DECREF( tmp_list_element_29 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 126216 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1134;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_248 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_iscomplex );

    if (unlikely( tmp_call_arg_element_248 == NULL ))
    {
        tmp_call_arg_element_248 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iscomplex );
    }

    if ( tmp_call_arg_element_248 == NULL )
    {
        Py_DECREF( tmp_assign_source_34 );
        Py_DECREF( tmp_list_element_29 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124745 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1134;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 1134;
    tmp_call_arg_element_247 = CALL_FUNCTION_WITH_ARGS1( tmp_called_164, tmp_call_arg_element_248 );
    if ( tmp_call_arg_element_247 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_34 );
        Py_DECREF( tmp_list_element_29 );

        frame_module->f_lineno = 1134;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 1134;
    tmp_dict_value_558 = CALL_FUNCTION_WITH_ARGS2( tmp_called_163, tmp_call_arg_element_246, tmp_call_arg_element_247 );
    Py_DECREF( tmp_call_arg_element_247 );
    if ( tmp_dict_value_558 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_34 );
        Py_DECREF( tmp_list_element_29 );

        frame_module->f_lineno = 1134;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_558 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_558, tmp_dict_value_558 );
    Py_DECREF( tmp_dict_value_558 );
    tmp_dict_value_559 = const_str_empty;
    tmp_dict_key_559 = const_str_plain__break;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_559, tmp_dict_value_559 );
    PyList_SET_ITEM( tmp_assign_source_34, 1, tmp_list_element_29 );
    tmp_list_element_29 = _PyDict_NewPresized( 5 );
    tmp_dict_value_560 = const_str_digest_163dc3507d0a117b14a81f27113a31a1;
    tmp_dict_key_560 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_560, tmp_dict_value_560 );
    tmp_dict_value_561 = const_str_digest_ef99bdd7a9eb43f15832f068e2ea06fc;
    tmp_dict_key_561 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_561, tmp_dict_value_561 );
    tmp_dict_value_562 = const_str_plain_CHECKSTRING;
    tmp_dict_key_562 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_562, tmp_dict_value_562 );
    tmp_dict_value_563 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isstring );

    if (unlikely( tmp_dict_value_563 == NULL ))
    {
        tmp_dict_value_563 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isstring );
    }

    if ( tmp_dict_value_563 == NULL )
    {
        Py_DECREF( tmp_assign_source_34 );
        Py_DECREF( tmp_list_element_29 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124629 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1140;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_563 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_563, tmp_dict_value_563 );
    tmp_dict_value_564 = const_str_empty;
    tmp_dict_key_564 = const_str_plain__break;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_564, tmp_dict_value_564 );
    PyList_SET_ITEM( tmp_assign_source_34, 2, tmp_list_element_29 );
    tmp_list_element_29 = _PyDict_NewPresized( 5 );
    tmp_dict_value_565 = const_str_plain_CHECKARRAY;
    tmp_dict_key_565 = const_str_plain_need;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_565, tmp_dict_value_565 );
    tmp_dict_value_566 = const_str_digest_95b6249137a7d93810a38eee006bae9d;
    tmp_dict_key_566 = const_str_plain_frompyobj;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_566, tmp_dict_value_566 );
    tmp_dict_value_567 = const_str_digest_533c951d823b6e57c80e5d5b1a9091f9;
    tmp_dict_key_567 = const_str_plain_cleanupfrompyobj;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_567, tmp_dict_value_567 );
    tmp_dict_value_568 = GET_STRING_DICT_VALUE( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_isarray );

    if (unlikely( tmp_dict_value_568 == NULL ))
    {
        tmp_dict_value_568 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isarray );
    }

    if ( tmp_dict_value_568 == NULL )
    {
        Py_DECREF( tmp_assign_source_34 );
        Py_DECREF( tmp_list_element_29 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 124593 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1146;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_568 = const_str_plain__check;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_568, tmp_dict_value_568 );
    tmp_dict_value_569 = const_str_empty;
    tmp_dict_key_569 = const_str_plain__break;
    PyDict_SetItem( tmp_list_element_29, tmp_dict_key_569, tmp_dict_value_569 );
    PyList_SET_ITEM( tmp_assign_source_34, 3, tmp_list_element_29 );
    tmp_list_element_29 = PyDict_Copy( const_dict_c3b8e398c8954454fba85f0a68a2b3f2 );
    PyList_SET_ITEM( tmp_assign_source_34, 4, tmp_list_element_29 );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_check_rules, tmp_assign_source_34 );
    tmp_assign_source_35 = MAKE_FUNCTION_function_1_buildmodule_of_module_numpy$f2py$rules(  );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_35 );

        frame_module->f_lineno = 1159;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_buildmodule, tmp_assign_source_35 );
    tmp_assign_source_36 = PyDict_Copy( const_dict_055a5e2e8d3048ab4922e8d2791b57c7 );
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_stnd, tmp_assign_source_36 );
    tmp_assign_source_37 = MAKE_FUNCTION_function_2_buildapi_of_module_numpy$f2py$rules(  );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_37 );

        frame_module->f_lineno = 1327;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$f2py$rules, (Nuitka_StringObject *)const_str_plain_buildapi, tmp_assign_source_37 );

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif
    popFrameStack();

    assertFrameObject( frame_module );
    Py_DECREF( frame_module );

    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_module ) );
    }
    else if ( exception_tb->tb_frame != frame_module )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_module ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }

    // Put the previous frame back on top.
    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_module->f_executing -= 1;
#endif
    Py_DECREF( frame_module );

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_1:;

    return MOD_RETURN_VALUE( module_numpy$f2py$rules );
module_exception_exit:
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
