// Generated code for Python source for module 'numpy.lib.npyio'
// created by Nuitka version 0.5.5.3

// This code is in part copyright 2014 Kay Hayen.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "nuitka/prelude.hpp"

#include "__helpers.hpp"

// The _module_numpy$lib$npyio is a Python object pointer of module type.

// Note: For full compatability with CPython, every module variable access
// needs to go through it except for cases where the module cannot possibly
// have changed in the mean time.

PyObject *module_numpy$lib$npyio;
PyDictObject *moduledict_numpy$lib$npyio;

// The module constants used
extern PyObject *const_int_0;
extern PyObject *const_int_neg_1;
extern PyObject *const_int_neg_2;
extern PyObject *const_int_pos_1;
extern PyObject *const_int_pos_2;
extern PyObject *const_int_pos_3;
extern PyObject *const_str_empty;
extern PyObject *const_str_space;
extern PyObject *const_dict_empty;
extern PyObject *const_str_chr_35;
extern PyObject *const_str_chr_37;
extern PyObject *const_str_chr_44;
extern PyObject *const_str_newline;
extern PyObject *const_str_plain_N;
extern PyObject *const_str_plain_O;
extern PyObject *const_str_plain_T;
extern PyObject *const_str_plain_U;
extern PyObject *const_str_plain_X;
extern PyObject *const_str_plain__;
extern PyObject *const_str_plain_c;
extern PyObject *const_str_plain_f;
extern PyObject *const_str_plain_i;
extern PyObject *const_str_plain_j;
extern PyObject *const_str_plain_m;
extern PyObject *const_str_plain_n;
extern PyObject *const_str_plain_t;
extern PyObject *const_str_plain_v;
extern PyObject *const_str_plain_w;
extern PyObject *const_str_plain_x;
extern PyObject *const_tuple_empty;
extern PyObject *const_int_pos_1024;
extern PyObject *const_str_plain__m;
extern PyObject *const_str_plain__r;
extern PyObject *const_str_plain_dt;
extern PyObject *const_str_plain_fd;
extern PyObject *const_str_plain_fh;
extern PyObject *const_str_plain_nb;
extern PyObject *const_str_plain_np;
extern PyObject *const_str_plain_os;
extern PyObject *const_str_plain_rb;
extern PyObject *const_str_plain_re;
extern PyObject *const_str_plain_tp;
extern PyObject *const_str_plain_wb;
extern PyObject *const_str_plain_arr;
extern PyObject *const_str_plain_bz2;
extern PyObject *const_str_plain_dim;
extern PyObject *const_str_plain_fhd;
extern PyObject *const_str_plain_fid;
extern PyObject *const_str_plain_fmt;
extern PyObject *const_str_plain_get;
extern PyObject *const_str_plain_key;
extern PyObject *const_str_plain_len;
extern PyObject *const_str_plain_lib;
extern PyObject *const_str_plain_map;
extern PyObject *const_str_plain_max;
extern PyObject *const_str_plain_obj;
extern PyObject *const_str_plain_rbU;
extern PyObject *const_str_plain_ret;
extern PyObject *const_str_plain_row;
extern PyObject *const_str_plain_seq;
extern PyObject *const_str_plain_set;
extern PyObject *const_str_plain_str;
extern PyObject *const_str_plain_sys;
extern PyObject *const_str_plain_tmp;
extern PyObject *const_str_plain_typ;
extern PyObject *const_str_plain_val;
extern PyObject *const_str_plain_zip;
extern PyObject *const_list_none_list;
extern PyObject *const_str_plain__obj;
static PyObject *const_str_plain__zip;
extern PyObject *const_str_plain_args;
extern PyObject *const_str_plain_base;
extern PyObject *const_str_plain_bool;
extern PyObject *const_str_plain_char;
extern PyObject *const_str_plain_conv;
extern PyObject *const_str_plain_data;
extern PyObject *const_str_plain_dict;
extern PyObject *const_str_plain_file;
extern PyObject *const_str_plain_fill;
static PyObject *const_str_plain_fown;
extern PyObject *const_str_plain_fval;
extern PyObject *const_str_plain_gzip;
extern PyObject *const_str_plain_imag;
extern PyObject *const_str_plain_join;
extern PyObject *const_str_plain_keys;
extern PyObject *const_str_plain_kwds;
extern PyObject *const_str_plain_line;
extern PyObject *const_str_plain_list;
extern PyObject *const_str_plain_load;
static PyObject *const_str_plain_miss;
extern PyObject *const_str_plain_mode;
extern PyObject *const_str_plain_mval;
extern PyObject *const_str_plain_name;
static PyObject *const_str_plain_ncol;
extern PyObject *const_str_plain_ndim;
extern PyObject *const_str_plain_open;
extern PyObject *const_str_plain_prod;
extern PyObject *const_str_plain_read;
extern PyObject *const_str_plain_real;
static PyObject *const_str_plain_row2;
extern PyObject *const_str_plain_rows;
extern PyObject *const_str_plain_save;
extern PyObject *const_str_plain_seek;
extern PyObject *const_str_plain_self;
extern PyObject *const_str_plain_tell;
extern PyObject *const_str_plain_type;
extern PyObject *const_str_plain_vals;
extern PyObject *const_str_plain_view;
extern PyObject *const_str_plain_warn;
extern PyObject *const_str_plain__mask;
extern PyObject *const_str_plain_array;
extern PyObject *const_str_plain_asstr;
extern PyObject *const_str_plain_bool_;
extern PyObject *const_str_plain_bytes;
extern PyObject *const_str_plain_chain;
extern PyObject *const_str_plain_close;
extern PyObject *const_str_plain_count;
extern PyObject *const_str_plain_descr;
extern PyObject *const_str_plain_dtype;
extern PyObject *const_str_plain_entry;
extern PyObject *const_str_plain_error;
extern PyObject *const_str_plain_field;
extern PyObject *const_str_plain_files;
extern PyObject *const_str_plain_float;
extern PyObject *const_str_plain_fname;
extern PyObject *const_str_plain_index;
extern PyObject *const_str_plain_int64;
extern PyObject *const_str_plain_items;
extern PyObject *const_str_plain_loads;
static PyObject *const_str_plain_loose;
extern PyObject *const_str_plain_lower;
extern PyObject *const_str_plain_magic;
extern PyObject *const_str_plain_masks;
extern PyObject *const_str_plain_match;
extern PyObject *const_str_plain_names;
extern PyObject *const_str_plain_ndmin;
extern PyObject *const_str_plain_npyio;
extern PyObject *const_str_plain_numpy;
extern PyObject *const_str_plain_proxy;
static PyObject *const_str_plain_savez;
extern PyObject *const_str_plain_shape;
extern PyObject *const_str_plain_split;
extern PyObject *const_str_plain_start;
extern PyObject *const_str_plain_strip;
static PyObject *const_str_plain_ttype;
extern PyObject *const_str_plain_tuple;
extern PyObject *const_str_plain_types;
extern PyObject *const_str_plain_value;
extern PyObject *const_str_plain_write;
static PyObject *const_str_plain_zipit;
extern PyObject *const_str_angle_lambda;
static PyObject *const_str_plain_BagObj;
static PyObject *const_str_plain__files;
static PyObject *const_str_plain__savez;
extern PyObject *const_str_plain_append;
extern PyObject *const_str_plain_bytes_;
extern PyObject *const_str_plain_ddtype;
extern PyObject *const_str_plain_errmsg;
extern PyObject *const_str_plain_extend;
extern PyObject *const_str_plain_fields;
extern PyObject *const_str_plain_footer;
extern PyObject *const_str_plain_format;
extern PyObject *const_str_plain_header;
extern PyObject *const_str_plain_insert;
extern PyObject *const_str_plain_kwargs;
extern PyObject *const_str_plain_length;
extern PyObject *const_str_plain_locked;
extern PyObject *const_str_plain_mdtype;
extern PyObject *const_str_plain_member;
static PyObject *const_str_plain_nbcols;
static PyObject *const_str_plain_nbrows;
extern PyObject *const_str_plain_number;
extern PyObject *const_str_plain_object;
extern PyObject *const_str_plain_offset;
extern PyObject *const_str_plain_output;
static PyObject *const_str_plain_own_fh;
extern PyObject *const_str_plain_pickle;
extern PyObject *const_str_plain_regexp;
extern PyObject *const_str_plain_remove;
static PyObject *const_str_plain_rewind;
extern PyObject *const_str_plain_suffix;
extern PyObject *const_str_plain_uint64;
extern PyObject *const_str_plain_unpack;
extern PyObject *const_str_plain_update;
extern PyObject *const_str_plain_values;
extern PyObject *const_str_plain_whence;
extern PyObject *const_tuple_none_tuple;
extern PyObject *const_str_angle_genexpr;
extern PyObject *const_str_plain_BZ2File;
static PyObject *const_str_plain_NpzFile;
extern PyObject *const_str_plain_ZipFile;
extern PyObject *const_str_plain___all__;
extern PyObject *const_str_plain___del__;
extern PyObject *const_str_plain___doc__;
static PyObject *const_str_plain_arcname;
extern PyObject *const_str_plain_asarray;
extern PyObject *const_str_plain_asbytes;
extern PyObject *const_str_plain_cPickle;
extern PyObject *const_str_plain_compile;
extern PyObject *const_str_plain_complex;
extern PyObject *const_str_plain_current;
extern PyObject *const_str_plain_default;
static PyObject *const_str_plain_defconv;
extern PyObject *const_str_plain_fileobj;
extern PyObject *const_str_plain_findall;
extern PyObject *const_str_plain_flat_dt;
extern PyObject *const_str_plain_integer;
extern PyObject *const_str_plain_invalid;
static PyObject *const_str_plain_loadtxt;
static PyObject *const_str_plain_missing;
extern PyObject *const_str_plain_mkstemp;
extern PyObject *const_str_plain_newline;
static PyObject *const_str_plain_own_fhd;
static PyObject *const_str_plain_own_fid;
static PyObject *const_str_plain_packing;
extern PyObject *const_str_plain_replace;
extern PyObject *const_str_plain_savetxt;
extern PyObject *const_str_plain_squeeze;
extern PyObject *const_str_plain_string_;
extern PyObject *const_str_plain_tmpfile;
extern PyObject *const_str_plain_unicode;
extern PyObject *const_str_plain_upgrade;
static PyObject *const_str_plain_usecols;
static PyObject *const_str_plain_usemask;
extern PyObject *const_str_plain_weakref;
extern PyObject *const_str_plain_zipfile;
extern PyObject *const_tuple_false_tuple;
extern PyObject *const_tuple_int_0_tuple;
static PyObject *const_str_plain_GzipFile;
extern PyObject *const_str_plain___exit__;
extern PyObject *const_str_plain___file__;
extern PyObject *const_str_plain___init__;
extern PyObject *const_str_plain___iter__;
extern PyObject *const_str_plain__checked;
static PyObject *const_str_plain__getconv;
extern PyObject *const_str_plain__iotools;
extern PyObject *const_str_plain_comments;
extern PyObject *const_str_plain_compress;
extern PyObject *const_str_plain_division;
extern PyObject *const_str_plain_endswith;
extern PyObject *const_str_plain_exc_type;
extern PyObject *const_str_plain_filename;
extern PyObject *const_str_plain_floating;
extern PyObject *const_str_plain_iterkeys;
static PyObject *const_str_plain_namedict;
extern PyObject *const_str_plain_namelist;
static PyObject *const_str_plain_nbvalues;
extern PyObject *const_str_plain_newdtype;
extern PyObject *const_str_plain_operator;
extern PyObject *const_str_plain_packbits;
extern PyObject *const_str_plain_recarray;
static PyObject *const_str_plain_rowmasks;
static PyObject *const_str_plain_skiprows;
extern PyObject *const_str_plain_tempfile;
extern PyObject *const_str_plain_template;
extern PyObject *const_str_plain_warnings;
extern PyObject *const_str_plain___enter__;
extern PyObject *const_str_plain__handyman;
extern PyObject *const_str_plain_autostrip;
static PyObject *const_str_plain_converter;
extern PyObject *const_str_plain_delimiter;
extern PyObject *const_str_plain_enumerate;
extern PyObject *const_str_plain_exc_value;
static PyObject *const_str_plain_fromregex;
extern PyObject *const_str_plain_iteritems;
extern PyObject *const_str_plain_itertools;
static PyObject *const_str_plain_mafromtxt;
static PyObject *const_str_plain_mmap_mode;
static PyObject *const_str_plain_nbinvalid;
static PyObject *const_str_plain_ndfromtxt;
static PyObject *const_str_plain_strcolidx;
extern PyObject *const_str_plain_traceback;
static PyObject *const_str_plain_uc_update;
extern PyObject *const_str_plain_DataSource;
extern PyObject *const_str_plain_ZIP_STORED;
extern PyObject *const_str_plain___future__;
extern PyObject *const_str_plain___iterator;
extern PyObject *const_str_plain___module__;
static PyObject *const_str_plain_allowZip64;
extern PyObject *const_str_plain_asanyarray;
extern PyObject *const_str_plain_atleast_1d;
extern PyObject *const_str_plain_atleast_2d;
extern PyObject *const_str_plain_basestring;
static PyObject *const_str_plain_converters;
extern PyObject *const_str_plain_defaultfmt;
static PyObject *const_str_plain_dtype_flat;
extern PyObject *const_str_plain_easy_dtype;
extern PyObject *const_str_plain_first_line;
static PyObject *const_str_plain_first_vals;
static PyObject *const_str_plain_genfromtxt;
extern PyObject *const_str_plain_issubclass;
extern PyObject *const_str_plain_itemgetter;
static PyObject *const_str_plain_miss_chars;
extern PyObject *const_str_plain_outputmask;
static PyObject *const_str_plain_pack_items;
extern PyObject *const_str_plain_read_array;
static PyObject *const_str_plain_recfromcsv;
static PyObject *const_str_plain_recfromtxt;
static PyObject *const_str_plain_split_line;
extern PyObject *const_str_plain_startswith;
static PyObject *const_str_plain_subpacking;
extern PyObject *const_str_plain_unpackbits;
static PyObject *const_str_plain_user_value;
extern PyObject *const_str_plain_MaskedArray;
static PyObject *const_str_plain__ZIP_PREFIX;
extern PyObject *const_str_plain___getitem__;
extern PyObject *const_str_plain__datasource;
extern PyObject *const_str_plain__loose_call;
extern PyObject *const_str_plain_compression;
extern PyObject *const_str_plain_contraction;
extern PyObject *const_str_plain_deletechars;
static PyObject *const_str_plain_dtype_types;
extern PyObject *const_str_plain_excludelist;
static PyObject *const_str_plain_iscomplex_X;
extern PyObject *const_str_plain_iterupgrade;
static PyObject *const_str_plain_n_fmt_chars;
extern PyObject *const_str_plain_open_memmap;
static PyObject *const_str_plain_skip_footer;
static PyObject *const_str_plain_skip_header;
extern PyObject *const_str_plain_write_array;
extern PyObject *const_str_plain_LineSplitter;
extern PyObject *const_str_plain_MAGIC_PREFIX;
extern PyObject *const_str_plain_ZIP_DEFLATED;
extern PyObject *const_str_plain___contains__;
extern PyObject *const_str_plain__strict_call;
static PyObject *const_str_plain__string_like;
static PyObject *const_str_plain_column_types;
static PyObject *const_str_plain_first_values;
static PyObject *const_str_plain_flat_packing;
extern PyObject *const_str_plain_flatten_base;
extern PyObject *const_str_plain_iscomplexobj;
extern PyObject *const_str_plain_version_info;
extern PyObject *const_str_plain_MaskedRecords;
extern PyObject *const_str_plain_NameValidator;
extern PyObject *const_str_plain___metaclass__;
extern PyObject *const_str_plain_flatten_dtype;
static PyObject *const_str_plain_invalid_raise;
static PyObject *const_str_plain_ishomogeneous;
extern PyObject *const_str_plain_replace_space;
extern PyObject *const_str_plain_testing_value;
extern PyObject *const_tuple_str_plain_f_tuple;
extern PyObject *const_tuple_str_plain_x_tuple;
extern PyObject *const_str_plain_ConverterError;
extern PyObject *const_str_plain__bytes_to_name;
extern PyObject *const_str_plain__compiled_base;
static PyObject *const_str_plain_append_to_rows;
extern PyObject *const_str_plain_asbytes_nested;
extern PyObject *const_str_plain_case_sensitive;
static PyObject *const_str_plain_current_column;
static PyObject *const_str_plain_filling_values;
extern PyObject *const_str_plain_missing_values;
extern PyObject *const_str_plain_print_function;
static PyObject *const_str_plain_validate_names;
static PyObject *const_tuple_str_plain_dt_tuple;
extern PyObject *const_list_int_0_int_pos_1_list;
extern PyObject *const_str_plain_StringConverter;
extern PyObject *const_str_plain__is_string_like;
extern PyObject *const_str_plain_absolute_import;
static PyObject *const_str_plain_append_to_masks;
static PyObject *const_str_plain_future_builtins;
extern PyObject *const_str_plain_make_mask_descr;
static PyObject *const_str_plain_user_converters;
static PyObject *const_str_plain_zipfile_factory;
static PyObject *const_tuple_str_plain_map_tuple;
extern PyObject *const_str_plain___getattribute__;
static PyObject *const_str_plain_savez_compressed;
extern PyObject *const_tuple_str_plain_line_tuple;
extern PyObject *const_tuple_str_plain_self_tuple;
extern PyObject *const_str_plain_ConversionWarning;
static PyObject *const_str_plain_append_to_invalid;
extern PyObject *const_str_plain_has_nested_fields;
static PyObject *const_str_plain_nbinvalid_skipped;
static PyObject *const_str_plain_seek_gzip_factory;
extern PyObject *const_tuple_str_plain_dtype_tuple;
extern PyObject *const_str_plain_ConverterLockError;
extern PyObject *const_str_plain_DeprecationWarning;
static PyObject *const_tuple_str_plain_format_tuple;
static PyObject *const_str_plain_user_filling_values;
static PyObject *const_str_plain_user_missing_values;
extern PyObject *const_tuple_int_pos_1_int_neg_1_tuple;
extern PyObject *const_tuple_int_pos_1_int_pos_1_tuple;
static PyObject *const_tuple_str_plain_DataSource_tuple;
extern PyObject *const_tuple_str_plain___iterator_tuple;
static PyObject *const_tuple_str_plain_itemgetter_tuple;
static PyObject *const_list_int_0_int_pos_1_int_pos_2_list;
static PyObject *const_tuple_str_plain_MaskedRecords_tuple;
static PyObject *const_dict_46d6714f0f9e5bc216d813f2885cf823;
static PyObject *const_dict_6ad1c59d2b0499ccc49da39f4d02342c;
extern PyObject *const_tuple_str_plain_self_str_plain_f_tuple;
static PyObject *const_tuple_str_plain_file_str_plain_arr_tuple;
extern PyObject *const_tuple_str_plain_self_str_plain_key_tuple;
extern PyObject *const_tuple_str_plain_self_str_plain_obj_tuple;
static PyObject *const_tuple_str_plain_dtype_str_plain_typ_tuple;
static PyObject *const_list_10d01238bac918eb73a26dfa23444527_list;
static PyObject *const_str_digest_004a2c15dc330afee30f69dde4431968;
static PyObject *const_str_digest_067c12c909de11fd08597d6477b35edd;
static PyObject *const_str_digest_10893fd7cff66dca193f658ca9438d15;
static PyObject *const_str_digest_10dee0a20eec050839c7e69431ad8f23;
extern PyObject *const_str_digest_12decaf9245f4bf9f86ce8272481ee1f;
extern PyObject *const_str_digest_17c6f94ec8e324f393931ac71502d159;
static PyObject *const_str_digest_1ab39f5b61c8b69f3731c1e05667ecb1;
static PyObject *const_str_digest_1c59d20c34b0a3c9b1b21b85ccda9dce;
static PyObject *const_str_digest_1ca5f2956cc68b902d14da616a888010;
static PyObject *const_str_digest_1eef2b14bc751a9f1863190eadb02530;
static PyObject *const_str_digest_22474b205f3395909dffcf4a10cf5390;
static PyObject *const_str_digest_2344c0f53e4f39fd4fea65dd5dc2b6dd;
static PyObject *const_str_digest_26da8406ee02cdfd86f9e87f9283c147;
static PyObject *const_str_digest_28dd61d77f33b248a1292c3b07e50ec4;
static PyObject *const_str_digest_2a8a322c1b29f4eba18e44ea881f3f1e;
static PyObject *const_str_digest_2fe0a0603121c5510b13a0cb10976cbd;
static PyObject *const_str_digest_33fce6852d20435584366e7b887d4c8f;
static PyObject *const_str_digest_3744f9035f183a3bbe09fcd4db6bbcb7;
extern PyObject *const_str_digest_3b8dd03d590562732b9cbdf9e4fb8792;
static PyObject *const_str_digest_4683f9933452d9f92a5f1f104f1eb18d;
static PyObject *const_str_digest_4a2a4bd63dda336259583a63ba58fde5;
static PyObject *const_str_digest_552fee314d0fde6a1757bedc08c1838f;
static PyObject *const_str_digest_6564064723a4d150a1d1c98412e0367b;
static PyObject *const_str_digest_6a15231040ef3ba144a64ab2bdc54320;
static PyObject *const_str_digest_6a584cbfb04569ab7e6a6d57629c598a;
static PyObject *const_str_digest_7ab0c0bd737b4cfc8d26bbfde2c5a4dd;
extern PyObject *const_str_digest_81051bcc2cf1bedf378224b0a93e2877;
static PyObject *const_str_digest_885597d12c4d1fac9b16316df0ffc64d;
static PyObject *const_str_digest_8951e79384d592ce94aa279c94096f17;
static PyObject *const_str_digest_8b3057cee65c326ac9511e0e7910a946;
static PyObject *const_str_digest_8e18bbc9b85e605205cac33e6541ecd2;
static PyObject *const_str_digest_8fa48a7d33fb436be001be0ed86ed34e;
static PyObject *const_str_digest_905b0a9b681b1370d4e715da92cf8846;
extern PyObject *const_str_digest_91108cc74ff5192a68c4bb8e12fdb51d;
static PyObject *const_str_digest_922d47cd4e94607d500021eac317192f;
static PyObject *const_str_digest_924d560f9b66d0c12aabd3730362e71a;
extern PyObject *const_str_digest_9718270fe5d2c916ce2b6f64e75a37af;
extern PyObject *const_str_digest_9f00662a075e9a5786c0d1eee68d8c87;
static PyObject *const_str_digest_9f1ae8de19d56e8c8fd834eb15fd50e8;
static PyObject *const_str_digest_9f77fc8c52674e8121a3039171ef0943;
static PyObject *const_str_digest_a09f36138515a08c5120a78101de347a;
static PyObject *const_str_digest_a8bee1fc2e5b3f40b8d64ca5454c9c61;
static PyObject *const_str_digest_aabf7a43f42776f2bbcdfa1f8ebec5c3;
extern PyObject *const_str_digest_afbdc315ea87bcfed00384cda44945f8;
static PyObject *const_str_digest_c26f540e737088d590c8b7be5e011192;
static PyObject *const_str_digest_c2eb1af041addaab580cda864e6925b9;
static PyObject *const_str_digest_c5caabe961fe165c4f677876c8b497e2;
static PyObject *const_str_digest_cdb1742273c3c470271806ac9382e8c9;
static PyObject *const_str_digest_d79b7df98ba76bf9eb309893e11edcef;
static PyObject *const_str_digest_dd20d6e029861b8813b057f636c3afee;
static PyObject *const_str_digest_e0fa3050efd9be5205e9a0343e8219b3;
static PyObject *const_str_digest_e3210c23b0d79812a53f0ec7a97844df;
static PyObject *const_str_digest_e764cc639eb9ce7f1ac1317be5eb0fe4;
static PyObject *const_str_digest_e7b482dd1ecfb54a6c3e286a8aa5f43c;
static PyObject *const_str_digest_ec9162268e4318fe0587ff7650565e6b;
static PyObject *const_str_digest_f094c29ac4fd1e994d00cd55715e80e2;
static PyObject *const_str_digest_f2ec8d21648931e40e43cf2dcb1591a1;
static PyObject *const_str_digest_f6a290c3ba9b033c43d9ef045a4fcc7b;
static PyObject *const_str_digest_f74d060132cc5ee937c2b72144ac6a7c;
static PyObject *const_str_digest_f76fabe83b22766ecb6af11e49569613;
static PyObject *const_str_digest_f9ced9d872e0c06a2aa979bbaaa60082;
static PyObject *const_str_digest_fedcb110fe3130088d5b35c0225077fb;
extern PyObject *const_tuple_str_plain_args_str_plain_kwargs_tuple;
static PyObject *const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple;
static PyObject *const_tuple_076714028ded42070ef4b73f369890c1_tuple;
static PyObject *const_tuple_157813af5912dc21d3649d822e8ba067_tuple;
static PyObject *const_tuple_1a9d92d65892dabfe0582e276c018737_tuple;
static PyObject *const_tuple_1ebb03b67dd95acd97e5fc178ac9ed7a_tuple;
static PyObject *const_tuple_4056a0ef07ec9188d15ce9b607833855_tuple;
static PyObject *const_tuple_4b1c9f1021fd3ac676ac33686bed276c_tuple;
static PyObject *const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple;
static PyObject *const_tuple_60f8f7dc3e8ae723d6c96201e30e5b98_tuple;
static PyObject *const_tuple_652f70a59b9fb8433f9982771b3551ce_tuple;
static PyObject *const_tuple_84c7c8d06ce306105f5bbf478111a24a_tuple;
static PyObject *const_tuple_8e81b104acca9b3a2732b73b8d694309_tuple;
static PyObject *const_tuple_a920ae360b29c4cad631eea918060118_tuple;
extern PyObject *const_tuple_b3c114ff65e5229953139969fd8f9f4c_tuple;
static PyObject *const_tuple_bb981971e6ae1971f2b6a1438ef2476e_tuple;
static PyObject *const_tuple_bc6d4841015d64184409ed5f2811751f_tuple;
static PyObject *const_tuple_d64c64754afc774016c11fc2ac3ad984_tuple;
static PyObject *const_tuple_d941a7e3454ef3ab70168d2a1419891a_tuple;
static PyObject *const_tuple_d9b2c098c5c48e050096e57b44c920fc_tuple;
static PyObject *const_tuple_dfd6ff1fc1e2db0923286c96ceb9d6a8_tuple;
static PyObject *const_tuple_e325c4226ca12cec7c8b1810ea387dfb_tuple;
static PyObject *const_tuple_fc0577e28487990b79bf42e3da7d645c_tuple;
static PyObject *const_tuple_ff87d2217f8c4f07e66fc35f0737a36b_tuple;
static PyObject *const_tuple_str_plain_fname_str_plain_kwargs_tuple;
static PyObject *const_tuple_str_plain_items_str_plain_packing_tuple;
static PyObject *const_tuple_str_plain_file_str_plain_mmap_mode_tuple;
static PyObject *const_tuple_str_plain_packbits_str_plain_unpackbits_tuple;
static PyObject *const_tuple_str_plain_file_str_plain_args_str_plain_kwds_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_fid_str_plain_own_fid_tuple;
static PyObject *const_tuple_str_plain_MaskedArray_str_plain_make_mask_descr_tuple;
static PyObject *const_tuple_str_plain_file_str_plain_regexp_str_plain_dtype_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_offset_str_plain_whence_tuple;
static PyObject *const_tuple_str_plain_args_str_plain_kwargs_str_plain_zipfile_tuple;
static PyObject *const_tuple_str_plain_file_str_plain_arr_str_plain_own_fid_str_plain_fid_tuple;

static void _initModuleConstants(void)
{
    const_str_plain__zip = UNSTREAM_STRING( &constant_bin[ 169854 ], 4, 1 );
    const_str_plain_fown = UNSTREAM_STRING( &constant_bin[ 171115 ], 4, 1 );
    const_str_plain_miss = UNSTREAM_STRING( &constant_bin[ 54093 ], 4, 1 );
    const_str_plain_ncol = UNSTREAM_STRING( &constant_bin[ 171418 ], 4, 1 );
    const_str_plain_row2 = UNSTREAM_STRING( &constant_bin[ 171614 ], 4, 1 );
    const_str_plain_loose = UNSTREAM_STRING( &constant_bin[ 173592 ], 5, 1 );
    const_str_plain_savez = UNSTREAM_STRING( &constant_bin[ 170214 ], 5, 1 );
    const_str_plain_ttype = UNSTREAM_STRING( &constant_bin[ 174082 ], 5, 1 );
    const_str_plain_zipit = UNSTREAM_STRING( &constant_bin[ 1346904 ], 5, 1 );
    const_str_plain_BagObj = UNSTREAM_STRING( &constant_bin[ 169901 ], 6, 1 );
    const_str_plain__files = UNSTREAM_STRING( &constant_bin[ 49097 ], 6, 1 );
    const_str_plain__savez = UNSTREAM_STRING( &constant_bin[ 170213 ], 6, 1 );
    const_str_plain_nbcols = UNSTREAM_STRING( &constant_bin[ 172277 ], 6, 1 );
    const_str_plain_nbrows = UNSTREAM_STRING( &constant_bin[ 173329 ], 6, 1 );
    const_str_plain_own_fh = UNSTREAM_STRING( &constant_bin[ 171716 ], 6, 1 );
    const_str_plain_rewind = UNSTREAM_STRING( &constant_bin[ 331175 ], 6, 1 );
    const_str_plain_NpzFile = UNSTREAM_STRING( &constant_bin[ 170122 ], 7, 1 );
    const_str_plain_arcname = UNSTREAM_STRING( &constant_bin[ 1346909 ], 7, 1 );
    const_str_plain_defconv = UNSTREAM_STRING( &constant_bin[ 170786 ], 7, 1 );
    const_str_plain_loadtxt = UNSTREAM_STRING( &constant_bin[ 482514 ], 7, 1 );
    const_str_plain_missing = UNSTREAM_STRING( &constant_bin[ 54093 ], 7, 1 );
    const_str_plain_own_fhd = UNSTREAM_STRING( &constant_bin[ 173013 ], 7, 1 );
    const_str_plain_own_fid = UNSTREAM_STRING( &constant_bin[ 169939 ], 7, 1 );
    const_str_plain_packing = UNSTREAM_STRING( &constant_bin[ 171062 ], 7, 1 );
    const_str_plain_usecols = UNSTREAM_STRING( &constant_bin[ 170414 ], 7, 1 );
    const_str_plain_usemask = UNSTREAM_STRING( &constant_bin[ 171873 ], 7, 1 );
    const_str_plain_GzipFile = UNSTREAM_STRING( &constant_bin[ 169618 ], 8, 1 );
    const_str_plain__getconv = UNSTREAM_STRING( &constant_bin[ 170464 ], 8, 1 );
    const_str_plain_namedict = UNSTREAM_STRING( &constant_bin[ 170251 ], 8, 1 );
    const_str_plain_nbvalues = UNSTREAM_STRING( &constant_bin[ 172838 ], 8, 1 );
    const_str_plain_rowmasks = UNSTREAM_STRING( &constant_bin[ 1346916 ], 8, 1 );
    const_str_plain_skiprows = UNSTREAM_STRING( &constant_bin[ 170504 ], 8, 1 );
    const_str_plain_converter = UNSTREAM_STRING( &constant_bin[ 156370 ], 9, 1 );
    const_str_plain_fromregex = UNSTREAM_STRING( &constant_bin[ 1346924 ], 9, 1 );
    const_str_plain_mafromtxt = UNSTREAM_STRING( &constant_bin[ 1346933 ], 9, 1 );
    const_str_plain_mmap_mode = UNSTREAM_STRING( &constant_bin[ 170161 ], 9, 1 );
    const_str_plain_nbinvalid = UNSTREAM_STRING( &constant_bin[ 173381 ], 9, 1 );
    const_str_plain_ndfromtxt = UNSTREAM_STRING( &constant_bin[ 1346942 ], 9, 1 );
    const_str_plain_strcolidx = UNSTREAM_STRING( &constant_bin[ 173701 ], 9, 1 );
    const_str_plain_uc_update = UNSTREAM_STRING( &constant_bin[ 172720 ], 9, 1 );
    const_str_plain_allowZip64 = UNSTREAM_STRING( &constant_bin[ 1346951 ], 10, 1 );
    const_str_plain_converters = UNSTREAM_STRING( &constant_bin[ 170358 ], 10, 1 );
    const_str_plain_dtype_flat = UNSTREAM_STRING( &constant_bin[ 173860 ], 10, 1 );
    const_str_plain_first_vals = UNSTREAM_STRING( &constant_bin[ 170558 ], 10, 1 );
    const_str_plain_genfromtxt = UNSTREAM_STRING( &constant_bin[ 174243 ], 10, 1 );
    const_str_plain_miss_chars = UNSTREAM_STRING( &constant_bin[ 1346961 ], 10, 1 );
    const_str_plain_pack_items = UNSTREAM_STRING( &constant_bin[ 171006 ], 10, 1 );
    const_str_plain_recfromcsv = UNSTREAM_STRING( &constant_bin[ 1346971 ], 10, 1 );
    const_str_plain_recfromtxt = UNSTREAM_STRING( &constant_bin[ 1346981 ], 10, 1 );
    const_str_plain_split_line = UNSTREAM_STRING( &constant_bin[ 170614 ], 10, 1 );
    const_str_plain_subpacking = UNSTREAM_STRING( &constant_bin[ 171328 ], 10, 1 );
    const_str_plain_user_value = UNSTREAM_STRING( &constant_bin[ 172445 ], 10, 1 );
    const_str_plain__ZIP_PREFIX = UNSTREAM_STRING( &constant_bin[ 1346991 ], 11, 1 );
    const_str_plain_dtype_types = UNSTREAM_STRING( &constant_bin[ 170729 ], 11, 1 );
    const_str_plain_iscomplex_X = UNSTREAM_STRING( &constant_bin[ 171500 ], 11, 1 );
    const_str_plain_n_fmt_chars = UNSTREAM_STRING( &constant_bin[ 171557 ], 11, 1 );
    const_str_plain_skip_footer = UNSTREAM_STRING( &constant_bin[ 173272 ], 11, 1 );
    const_str_plain_skip_header = UNSTREAM_STRING( &constant_bin[ 171967 ], 11, 1 );
    const_str_plain__string_like = UNSTREAM_STRING( &constant_bin[ 155312 ], 12, 1 );
    const_str_plain_column_types = UNSTREAM_STRING( &constant_bin[ 173643 ], 12, 1 );
    const_str_plain_first_values = UNSTREAM_STRING( &constant_bin[ 172024 ], 12, 1 );
    const_str_plain_flat_packing = UNSTREAM_STRING( &constant_bin[ 171270 ], 12, 1 );
    const_str_plain_invalid_raise = UNSTREAM_STRING( &constant_bin[ 173436 ], 13, 1 );
    const_str_plain_ishomogeneous = UNSTREAM_STRING( &constant_bin[ 174023 ], 13, 1 );
    const_str_plain_append_to_rows = UNSTREAM_STRING( &constant_bin[ 172892 ], 14, 1 );
    const_str_plain_current_column = UNSTREAM_STRING( &constant_bin[ 173160 ], 14, 1 );
    const_str_plain_filling_values = UNSTREAM_STRING( &constant_bin[ 172501 ], 14, 1 );
    const_str_plain_validate_names = UNSTREAM_STRING( &constant_bin[ 172082 ], 14, 1 );
    const_tuple_str_plain_dt_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_dt_tuple, 0, const_str_plain_dt ); Py_INCREF( const_str_plain_dt );
    const_str_plain_append_to_masks = UNSTREAM_STRING( &constant_bin[ 172952 ], 15, 1 );
    const_str_plain_future_builtins = UNSTREAM_STRING( &constant_bin[ 1347002 ], 15, 1 );
    const_str_plain_user_converters = UNSTREAM_STRING( &constant_bin[ 170839 ], 15, 1 );
    const_str_plain_zipfile_factory = UNSTREAM_STRING( &constant_bin[ 169807 ], 15, 1 );
    const_tuple_str_plain_map_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_map_tuple, 0, const_str_plain_map ); Py_INCREF( const_str_plain_map );
    const_str_plain_savez_compressed = UNSTREAM_STRING( &constant_bin[ 1347017 ], 16, 1 );
    const_str_plain_append_to_invalid = UNSTREAM_STRING( &constant_bin[ 172775 ], 17, 1 );
    const_str_plain_nbinvalid_skipped = UNSTREAM_STRING( &constant_bin[ 1347033 ], 17, 1 );
    const_str_plain_seek_gzip_factory = UNSTREAM_STRING( &constant_bin[ 170076 ], 17, 1 );
    const_tuple_str_plain_format_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_format_tuple, 0, const_str_plain_format ); Py_INCREF( const_str_plain_format );
    const_str_plain_user_filling_values = UNSTREAM_STRING( &constant_bin[ 172561 ], 19, 1 );
    const_str_plain_user_missing_values = UNSTREAM_STRING( &constant_bin[ 172329 ], 19, 1 );
    const_tuple_str_plain_DataSource_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_DataSource_tuple, 0, const_str_plain_DataSource ); Py_INCREF( const_str_plain_DataSource );
    const_tuple_str_plain_itemgetter_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_itemgetter_tuple, 0, const_str_plain_itemgetter ); Py_INCREF( const_str_plain_itemgetter );
    const_list_int_0_int_pos_1_int_pos_2_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_int_0_int_pos_1_int_pos_2_list, 0, const_int_0 ); Py_INCREF( const_int_0 );
    PyList_SET_ITEM( const_list_int_0_int_pos_1_int_pos_2_list, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyList_SET_ITEM( const_list_int_0_int_pos_1_int_pos_2_list, 2, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    const_tuple_str_plain_MaskedRecords_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_MaskedRecords_tuple, 0, const_str_plain_MaskedRecords ); Py_INCREF( const_str_plain_MaskedRecords );
    const_dict_46d6714f0f9e5bc216d813f2885cf823 = _PyDict_NewPresized( 1 );
    const_str_digest_6a15231040ef3ba144a64ab2bdc54320 = UNSTREAM_STRING( &constant_bin[ 1347050 ], 10, 0 );
    PyDict_SetItem( const_dict_46d6714f0f9e5bc216d813f2885cf823, const_str_plain_suffix, const_str_digest_6a15231040ef3ba144a64ab2bdc54320 );
    const_dict_6ad1c59d2b0499ccc49da39f4d02342c = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_6ad1c59d2b0499ccc49da39f4d02342c, const_str_plain_flatten_base, Py_True );
    const_tuple_str_plain_file_str_plain_arr_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_file_str_plain_arr_tuple, 0, const_str_plain_file ); Py_INCREF( const_str_plain_file );
    PyTuple_SET_ITEM( const_tuple_str_plain_file_str_plain_arr_tuple, 1, const_str_plain_arr ); Py_INCREF( const_str_plain_arr );
    const_tuple_str_plain_dtype_str_plain_typ_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_dtype_str_plain_typ_tuple, 0, const_str_plain_dtype ); Py_INCREF( const_str_plain_dtype );
    PyTuple_SET_ITEM( const_tuple_str_plain_dtype_str_plain_typ_tuple, 1, const_str_plain_typ ); Py_INCREF( const_str_plain_typ );
    const_list_10d01238bac918eb73a26dfa23444527_list = PyList_New( 16 );
    PyList_SET_ITEM( const_list_10d01238bac918eb73a26dfa23444527_list, 0, const_str_plain_savetxt ); Py_INCREF( const_str_plain_savetxt );
    PyList_SET_ITEM( const_list_10d01238bac918eb73a26dfa23444527_list, 1, const_str_plain_loadtxt ); Py_INCREF( const_str_plain_loadtxt );
    PyList_SET_ITEM( const_list_10d01238bac918eb73a26dfa23444527_list, 2, const_str_plain_genfromtxt ); Py_INCREF( const_str_plain_genfromtxt );
    PyList_SET_ITEM( const_list_10d01238bac918eb73a26dfa23444527_list, 3, const_str_plain_ndfromtxt ); Py_INCREF( const_str_plain_ndfromtxt );
    PyList_SET_ITEM( const_list_10d01238bac918eb73a26dfa23444527_list, 4, const_str_plain_mafromtxt ); Py_INCREF( const_str_plain_mafromtxt );
    PyList_SET_ITEM( const_list_10d01238bac918eb73a26dfa23444527_list, 5, const_str_plain_recfromtxt ); Py_INCREF( const_str_plain_recfromtxt );
    PyList_SET_ITEM( const_list_10d01238bac918eb73a26dfa23444527_list, 6, const_str_plain_recfromcsv ); Py_INCREF( const_str_plain_recfromcsv );
    PyList_SET_ITEM( const_list_10d01238bac918eb73a26dfa23444527_list, 7, const_str_plain_load ); Py_INCREF( const_str_plain_load );
    PyList_SET_ITEM( const_list_10d01238bac918eb73a26dfa23444527_list, 8, const_str_plain_loads ); Py_INCREF( const_str_plain_loads );
    PyList_SET_ITEM( const_list_10d01238bac918eb73a26dfa23444527_list, 9, const_str_plain_save ); Py_INCREF( const_str_plain_save );
    PyList_SET_ITEM( const_list_10d01238bac918eb73a26dfa23444527_list, 10, const_str_plain_savez ); Py_INCREF( const_str_plain_savez );
    PyList_SET_ITEM( const_list_10d01238bac918eb73a26dfa23444527_list, 11, const_str_plain_savez_compressed ); Py_INCREF( const_str_plain_savez_compressed );
    PyList_SET_ITEM( const_list_10d01238bac918eb73a26dfa23444527_list, 12, const_str_plain_packbits ); Py_INCREF( const_str_plain_packbits );
    PyList_SET_ITEM( const_list_10d01238bac918eb73a26dfa23444527_list, 13, const_str_plain_unpackbits ); Py_INCREF( const_str_plain_unpackbits );
    PyList_SET_ITEM( const_list_10d01238bac918eb73a26dfa23444527_list, 14, const_str_plain_fromregex ); Py_INCREF( const_str_plain_fromregex );
    PyList_SET_ITEM( const_list_10d01238bac918eb73a26dfa23444527_list, 15, const_str_plain_DataSource ); Py_INCREF( const_str_plain_DataSource );
    const_str_digest_004a2c15dc330afee30f69dde4431968 = UNSTREAM_STRING( &constant_bin[ 1347060 ], 34, 0 );
    const_str_digest_067c12c909de11fd08597d6477b35edd = UNSTREAM_STRING( &constant_bin[ 1347094 ], 49, 0 );
    const_str_digest_10893fd7cff66dca193f658ca9438d15 = UNSTREAM_STRING( &constant_bin[ 1347143 ], 4, 0 );
    const_str_digest_10dee0a20eec050839c7e69431ad8f23 = UNSTREAM_STRING( &constant_bin[ 1347147 ], 88, 0 );
    const_str_digest_1ab39f5b61c8b69f3731c1e05667ecb1 = UNSTREAM_STRING( &constant_bin[ 1347235 ], 4, 0 );
    const_str_digest_1c59d20c34b0a3c9b1b21b85ccda9dce = UNSTREAM_STRING( &constant_bin[ 380770 ], 2, 0 );
    const_str_digest_1ca5f2956cc68b902d14da616a888010 = UNSTREAM_STRING( &constant_bin[ 1347239 ], 48, 0 );
    const_str_digest_1eef2b14bc751a9f1863190eadb02530 = UNSTREAM_STRING( &constant_bin[ 1347287 ], 1758, 0 );
    const_str_digest_22474b205f3395909dffcf4a10cf5390 = UNSTREAM_STRING( &constant_bin[ 1349045 ], 9, 0 );
    const_str_digest_2344c0f53e4f39fd4fea65dd5dc2b6dd = UNSTREAM_STRING( &constant_bin[ 1349054 ], 31, 0 );
    const_str_digest_26da8406ee02cdfd86f9e87f9283c147 = UNSTREAM_STRING( &constant_bin[ 1349085 ], 39, 0 );
    const_str_digest_28dd61d77f33b248a1292c3b07e50ec4 = UNSTREAM_STRING( &constant_bin[ 1349124 ], 49, 0 );
    const_str_digest_2a8a322c1b29f4eba18e44ea881f3f1e = UNSTREAM_STRING( &constant_bin[ 1349173 ], 3286, 0 );
    const_str_digest_2fe0a0603121c5510b13a0cb10976cbd = UNSTREAM_STRING( &constant_bin[ 1352459 ], 252, 0 );
    const_str_digest_33fce6852d20435584366e7b887d4c8f = UNSTREAM_STRING( &constant_bin[ 1352711 ], 34, 0 );
    const_str_digest_3744f9035f183a3bbe09fcd4db6bbcb7 = UNSTREAM_STRING( &constant_bin[ 1352745 ], 5, 0 );
    const_str_digest_4683f9933452d9f92a5f1f104f1eb18d = UNSTREAM_STRING( &constant_bin[ 1352750 ], 270, 0 );
    const_str_digest_4a2a4bd63dda336259583a63ba58fde5 = UNSTREAM_STRING( &constant_bin[ 1353020 ], 3661, 0 );
    const_str_digest_552fee314d0fde6a1757bedc08c1838f = UNSTREAM_STRING( &constant_bin[ 1356681 ], 52, 0 );
    const_str_digest_6564064723a4d150a1d1c98412e0367b = UNSTREAM_STRING( &constant_bin[ 1356733 ], 103, 0 );
    const_str_digest_6a584cbfb04569ab7e6a6d57629c598a = UNSTREAM_STRING( &constant_bin[ 1356836 ], 5956, 0 );
    const_str_digest_7ab0c0bd737b4cfc8d26bbfde2c5a4dd = UNSTREAM_STRING( &constant_bin[ 1362792 ], 602, 0 );
    const_str_digest_885597d12c4d1fac9b16316df0ffc64d = UNSTREAM_STRING( &constant_bin[ 1363394 ], 34, 0 );
    const_str_digest_8951e79384d592ce94aa279c94096f17 = UNSTREAM_STRING( &constant_bin[ 1363428 ], 15, 0 );
    const_str_digest_8b3057cee65c326ac9511e0e7910a946 = UNSTREAM_STRING( &constant_bin[ 1363443 ], 885, 0 );
    const_str_digest_8e18bbc9b85e605205cac33e6541ecd2 = UNSTREAM_STRING( &constant_bin[ 1364328 ], 49, 0 );
    const_str_digest_8fa48a7d33fb436be001be0ed86ed34e = UNSTREAM_STRING( &constant_bin[ 1364377 ], 27, 0 );
    const_str_digest_905b0a9b681b1370d4e715da92cf8846 = UNSTREAM_STRING( &constant_bin[ 1364404 ], 509, 0 );
    const_str_digest_922d47cd4e94607d500021eac317192f = UNSTREAM_STRING( &constant_bin[ 1364913 ], 39, 0 );
    const_str_digest_924d560f9b66d0c12aabd3730362e71a = UNSTREAM_STRING( &constant_bin[ 1364952 ], 1682, 0 );
    const_str_digest_9f1ae8de19d56e8c8fd834eb15fd50e8 = UNSTREAM_STRING( &constant_bin[ 1366634 ], 31, 0 );
    const_str_digest_9f77fc8c52674e8121a3039171ef0943 = UNSTREAM_STRING( &constant_bin[ 1366665 ], 2710, 0 );
    const_str_digest_a09f36138515a08c5120a78101de347a = UNSTREAM_STRING( &constant_bin[ 1369375 ], 54, 0 );
    const_str_digest_a8bee1fc2e5b3f40b8d64ca5454c9c61 = UNSTREAM_STRING( &constant_bin[ 1363681 ], 15, 0 );
    const_str_digest_aabf7a43f42776f2bbcdfa1f8ebec5c3 = UNSTREAM_STRING( &constant_bin[ 1369429 ], 86, 0 );
    const_str_digest_c26f540e737088d590c8b7be5e011192 = UNSTREAM_STRING( &constant_bin[ 1369515 ], 425, 0 );
    const_str_digest_c2eb1af041addaab580cda864e6925b9 = UNSTREAM_STRING( &constant_bin[ 1369940 ], 44, 0 );
    const_str_digest_c5caabe961fe165c4f677876c8b497e2 = UNSTREAM_STRING( &constant_bin[ 1369984 ], 24, 0 );
    const_str_digest_cdb1742273c3c470271806ac9382e8c9 = UNSTREAM_STRING( &constant_bin[ 1370008 ], 45, 0 );
    const_str_digest_d79b7df98ba76bf9eb309893e11edcef = UNSTREAM_STRING( &constant_bin[ 482868 ], 4, 0 );
    const_str_digest_dd20d6e029861b8813b057f636c3afee = UNSTREAM_STRING( &constant_bin[ 1370053 ], 65, 0 );
    const_str_digest_e0fa3050efd9be5205e9a0343e8219b3 = UNSTREAM_STRING( &constant_bin[ 1370118 ], 51, 0 );
    const_str_digest_e3210c23b0d79812a53f0ec7a97844df = UNSTREAM_STRING( &constant_bin[ 1370169 ], 52, 0 );
    const_str_digest_e764cc639eb9ce7f1ac1317be5eb0fe4 = UNSTREAM_STRING( &constant_bin[ 1370221 ], 909, 0 );
    const_str_digest_e7b482dd1ecfb54a6c3e286a8aa5f43c = UNSTREAM_STRING( &constant_bin[ 1371130 ], 34, 0 );
    const_str_digest_ec9162268e4318fe0587ff7650565e6b = UNSTREAM_STRING( &constant_bin[ 1371164 ], 59, 0 );
    const_str_digest_f094c29ac4fd1e994d00cd55715e80e2 = UNSTREAM_STRING( &constant_bin[ 1371223 ], 56, 0 );
    const_str_digest_f2ec8d21648931e40e43cf2dcb1591a1 = UNSTREAM_STRING( &constant_bin[ 1371279 ], 6, 0 );
    const_str_digest_f6a290c3ba9b033c43d9ef045a4fcc7b = UNSTREAM_STRING( &constant_bin[ 1220975 ], 4, 0 );
    const_str_digest_f74d060132cc5ee937c2b72144ac6a7c = UNSTREAM_STRING( &constant_bin[ 1371285 ], 78, 0 );
    const_str_digest_f76fabe83b22766ecb6af11e49569613 = UNSTREAM_STRING( &constant_bin[ 1371363 ], 105, 0 );
    const_str_digest_f9ced9d872e0c06a2aa979bbaaa60082 = UNSTREAM_STRING( &constant_bin[ 1371468 ], 2617, 0 );
    const_str_digest_fedcb110fe3130088d5b35c0225077fb = UNSTREAM_STRING( &constant_bin[ 1374085 ], 16, 0 );
    const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple = PyTuple_New( 11 );
    PyTuple_SET_ITEM( const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, 0, const_str_plain_LineSplitter ); Py_INCREF( const_str_plain_LineSplitter );
    PyTuple_SET_ITEM( const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, 1, const_str_plain_NameValidator ); Py_INCREF( const_str_plain_NameValidator );
    PyTuple_SET_ITEM( const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, 2, const_str_plain_StringConverter ); Py_INCREF( const_str_plain_StringConverter );
    PyTuple_SET_ITEM( const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, 3, const_str_plain_ConverterError ); Py_INCREF( const_str_plain_ConverterError );
    PyTuple_SET_ITEM( const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, 4, const_str_plain_ConverterLockError ); Py_INCREF( const_str_plain_ConverterLockError );
    PyTuple_SET_ITEM( const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, 5, const_str_plain_ConversionWarning ); Py_INCREF( const_str_plain_ConversionWarning );
    PyTuple_SET_ITEM( const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, 6, const_str_plain__is_string_like ); Py_INCREF( const_str_plain__is_string_like );
    PyTuple_SET_ITEM( const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, 7, const_str_plain_has_nested_fields ); Py_INCREF( const_str_plain_has_nested_fields );
    PyTuple_SET_ITEM( const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, 8, const_str_plain_flatten_dtype ); Py_INCREF( const_str_plain_flatten_dtype );
    PyTuple_SET_ITEM( const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, 9, const_str_plain_easy_dtype ); Py_INCREF( const_str_plain_easy_dtype );
    PyTuple_SET_ITEM( const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, 10, const_str_plain__bytes_to_name ); Py_INCREF( const_str_plain__bytes_to_name );
    const_tuple_076714028ded42070ef4b73f369890c1_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_076714028ded42070ef4b73f369890c1_tuple, 0, const_str_plain_file ); Py_INCREF( const_str_plain_file );
    PyTuple_SET_ITEM( const_tuple_076714028ded42070ef4b73f369890c1_tuple, 1, const_str_plain_regexp ); Py_INCREF( const_str_plain_regexp );
    PyTuple_SET_ITEM( const_tuple_076714028ded42070ef4b73f369890c1_tuple, 2, const_str_plain_dtype ); Py_INCREF( const_str_plain_dtype );
    PyTuple_SET_ITEM( const_tuple_076714028ded42070ef4b73f369890c1_tuple, 3, const_str_plain_own_fh ); Py_INCREF( const_str_plain_own_fh );
    PyTuple_SET_ITEM( const_tuple_076714028ded42070ef4b73f369890c1_tuple, 4, const_str_plain_seq ); Py_INCREF( const_str_plain_seq );
    PyTuple_SET_ITEM( const_tuple_076714028ded42070ef4b73f369890c1_tuple, 5, const_str_plain_newdtype ); Py_INCREF( const_str_plain_newdtype );
    PyTuple_SET_ITEM( const_tuple_076714028ded42070ef4b73f369890c1_tuple, 6, const_str_plain_output ); Py_INCREF( const_str_plain_output );
    const_tuple_157813af5912dc21d3649d822e8ba067_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_157813af5912dc21d3649d822e8ba067_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_157813af5912dc21d3649d822e8ba067_tuple, 1, const_str_plain_fid ); Py_INCREF( const_str_plain_fid );
    PyTuple_SET_ITEM( const_tuple_157813af5912dc21d3649d822e8ba067_tuple, 2, const_str_plain_own_fid ); Py_INCREF( const_str_plain_own_fid );
    PyTuple_SET_ITEM( const_tuple_157813af5912dc21d3649d822e8ba067_tuple, 3, const_str_plain__zip ); Py_INCREF( const_str_plain__zip );
    PyTuple_SET_ITEM( const_tuple_157813af5912dc21d3649d822e8ba067_tuple, 4, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    const_tuple_1a9d92d65892dabfe0582e276c018737_tuple = PyTuple_New( 11 );
    PyTuple_SET_ITEM( const_tuple_1a9d92d65892dabfe0582e276c018737_tuple, 0, const_str_plain_dt ); Py_INCREF( const_str_plain_dt );
    PyTuple_SET_ITEM( const_tuple_1a9d92d65892dabfe0582e276c018737_tuple, 1, const_str_plain_shape ); Py_INCREF( const_str_plain_shape );
    PyTuple_SET_ITEM( const_tuple_1a9d92d65892dabfe0582e276c018737_tuple, 2, const_str_plain_packing ); Py_INCREF( const_str_plain_packing );
    PyTuple_SET_ITEM( const_tuple_1a9d92d65892dabfe0582e276c018737_tuple, 3, const_str_plain_dim ); Py_INCREF( const_str_plain_dim );
    PyTuple_SET_ITEM( const_tuple_1a9d92d65892dabfe0582e276c018737_tuple, 4, const_str_plain_types ); Py_INCREF( const_str_plain_types );
    PyTuple_SET_ITEM( const_tuple_1a9d92d65892dabfe0582e276c018737_tuple, 5, const_str_plain_field ); Py_INCREF( const_str_plain_field );
    PyTuple_SET_ITEM( const_tuple_1a9d92d65892dabfe0582e276c018737_tuple, 6, const_str_plain_tp ); Py_INCREF( const_str_plain_tp );
    PyTuple_SET_ITEM( const_tuple_1a9d92d65892dabfe0582e276c018737_tuple, 7, const_str_plain_bytes ); Py_INCREF( const_str_plain_bytes );
    PyTuple_SET_ITEM( const_tuple_1a9d92d65892dabfe0582e276c018737_tuple, 8, const_str_plain_flat_dt ); Py_INCREF( const_str_plain_flat_dt );
    PyTuple_SET_ITEM( const_tuple_1a9d92d65892dabfe0582e276c018737_tuple, 9, const_str_plain_flat_packing ); Py_INCREF( const_str_plain_flat_packing );
    PyTuple_SET_ITEM( const_tuple_1a9d92d65892dabfe0582e276c018737_tuple, 10, const_str_plain_flatten_dtype ); Py_INCREF( const_str_plain_flatten_dtype );
    const_tuple_1ebb03b67dd95acd97e5fc178ac9ed7a_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_1ebb03b67dd95acd97e5fc178ac9ed7a_tuple, 0, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_1ebb03b67dd95acd97e5fc178ac9ed7a_tuple, 1, const_str_plain_gzip ); Py_INCREF( const_str_plain_gzip );
    PyTuple_SET_ITEM( const_tuple_1ebb03b67dd95acd97e5fc178ac9ed7a_tuple, 2, const_str_plain_GzipFile ); Py_INCREF( const_str_plain_GzipFile );
    PyTuple_SET_ITEM( const_tuple_1ebb03b67dd95acd97e5fc178ac9ed7a_tuple, 3, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_1ebb03b67dd95acd97e5fc178ac9ed7a_tuple, 4, const_str_plain_mode ); Py_INCREF( const_str_plain_mode );
    const_tuple_4056a0ef07ec9188d15ce9b607833855_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_4056a0ef07ec9188d15ce9b607833855_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_4056a0ef07ec9188d15ce9b607833855_tuple, 1, const_str_plain_exc_type ); Py_INCREF( const_str_plain_exc_type );
    PyTuple_SET_ITEM( const_tuple_4056a0ef07ec9188d15ce9b607833855_tuple, 2, const_str_plain_exc_value ); Py_INCREF( const_str_plain_exc_value );
    PyTuple_SET_ITEM( const_tuple_4056a0ef07ec9188d15ce9b607833855_tuple, 3, const_str_plain_traceback ); Py_INCREF( const_str_plain_traceback );
    const_tuple_4b1c9f1021fd3ac676ac33686bed276c_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_4b1c9f1021fd3ac676ac33686bed276c_tuple, 0, const_str_plain_fname ); Py_INCREF( const_str_plain_fname );
    PyTuple_SET_ITEM( const_tuple_4b1c9f1021fd3ac676ac33686bed276c_tuple, 1, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_4b1c9f1021fd3ac676ac33686bed276c_tuple, 2, const_str_plain_case_sensitive ); Py_INCREF( const_str_plain_case_sensitive );
    PyTuple_SET_ITEM( const_tuple_4b1c9f1021fd3ac676ac33686bed276c_tuple, 3, const_str_plain_names ); Py_INCREF( const_str_plain_names );
    PyTuple_SET_ITEM( const_tuple_4b1c9f1021fd3ac676ac33686bed276c_tuple, 4, const_str_plain_usemask ); Py_INCREF( const_str_plain_usemask );
    PyTuple_SET_ITEM( const_tuple_4b1c9f1021fd3ac676ac33686bed276c_tuple, 5, const_str_plain_output ); Py_INCREF( const_str_plain_output );
    PyTuple_SET_ITEM( const_tuple_4b1c9f1021fd3ac676ac33686bed276c_tuple, 6, const_str_plain_MaskedRecords ); Py_INCREF( const_str_plain_MaskedRecords );
    const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple = PyTuple_New( 16 );
    PyTuple_SET_ITEM( const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple, 0, const_str_plain_file ); Py_INCREF( const_str_plain_file );
    PyTuple_SET_ITEM( const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple, 1, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple, 2, const_str_plain_kwds ); Py_INCREF( const_str_plain_kwds );
    PyTuple_SET_ITEM( const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple, 3, const_str_plain_compress ); Py_INCREF( const_str_plain_compress );
    PyTuple_SET_ITEM( const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple, 4, const_str_plain_zipfile ); Py_INCREF( const_str_plain_zipfile );
    PyTuple_SET_ITEM( const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple, 5, const_str_plain_tempfile ); Py_INCREF( const_str_plain_tempfile );
    PyTuple_SET_ITEM( const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple, 6, const_str_plain_namedict ); Py_INCREF( const_str_plain_namedict );
    PyTuple_SET_ITEM( const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple, 7, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple, 8, const_str_plain_val ); Py_INCREF( const_str_plain_val );
    PyTuple_SET_ITEM( const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple, 9, const_str_plain_key ); Py_INCREF( const_str_plain_key );
    PyTuple_SET_ITEM( const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple, 10, const_str_plain_compression ); Py_INCREF( const_str_plain_compression );
    PyTuple_SET_ITEM( const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple, 11, const_str_plain_zip ); Py_INCREF( const_str_plain_zip );
    PyTuple_SET_ITEM( const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple, 12, const_str_plain_fd ); Py_INCREF( const_str_plain_fd );
    PyTuple_SET_ITEM( const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple, 13, const_str_plain_tmpfile ); Py_INCREF( const_str_plain_tmpfile );
    PyTuple_SET_ITEM( const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple, 14, const_str_plain_fname ); Py_INCREF( const_str_plain_fname );
    PyTuple_SET_ITEM( const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple, 15, const_str_plain_fid ); Py_INCREF( const_str_plain_fid );
    const_tuple_60f8f7dc3e8ae723d6c96201e30e5b98_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_60f8f7dc3e8ae723d6c96201e30e5b98_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_60f8f7dc3e8ae723d6c96201e30e5b98_tuple, 1, const_str_plain_key ); Py_INCREF( const_str_plain_key );
    PyTuple_SET_ITEM( const_tuple_60f8f7dc3e8ae723d6c96201e30e5b98_tuple, 2, const_str_plain_member ); Py_INCREF( const_str_plain_member );
    PyTuple_SET_ITEM( const_tuple_60f8f7dc3e8ae723d6c96201e30e5b98_tuple, 3, const_str_plain_bytes ); Py_INCREF( const_str_plain_bytes );
    PyTuple_SET_ITEM( const_tuple_60f8f7dc3e8ae723d6c96201e30e5b98_tuple, 4, const_str_plain_magic ); Py_INCREF( const_str_plain_magic );
    const_tuple_652f70a59b9fb8433f9982771b3551ce_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 1374101 ], 333 );
    const_tuple_84c7c8d06ce306105f5bbf478111a24a_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 1374434 ], 1176 );
    const_tuple_8e81b104acca9b3a2732b73b8d694309_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_8e81b104acca9b3a2732b73b8d694309_tuple, 0, const_str_plain_fname ); Py_INCREF( const_str_plain_fname );
    PyTuple_SET_ITEM( const_tuple_8e81b104acca9b3a2732b73b8d694309_tuple, 1, const_str_plain_X ); Py_INCREF( const_str_plain_X );
    PyTuple_SET_ITEM( const_tuple_8e81b104acca9b3a2732b73b8d694309_tuple, 2, const_str_plain_fmt ); Py_INCREF( const_str_plain_fmt );
    PyTuple_SET_ITEM( const_tuple_8e81b104acca9b3a2732b73b8d694309_tuple, 3, const_str_plain_delimiter ); Py_INCREF( const_str_plain_delimiter );
    PyTuple_SET_ITEM( const_tuple_8e81b104acca9b3a2732b73b8d694309_tuple, 4, const_str_plain_newline ); Py_INCREF( const_str_plain_newline );
    PyTuple_SET_ITEM( const_tuple_8e81b104acca9b3a2732b73b8d694309_tuple, 5, const_str_plain_header ); Py_INCREF( const_str_plain_header );
    PyTuple_SET_ITEM( const_tuple_8e81b104acca9b3a2732b73b8d694309_tuple, 6, const_str_plain_footer ); Py_INCREF( const_str_plain_footer );
    PyTuple_SET_ITEM( const_tuple_8e81b104acca9b3a2732b73b8d694309_tuple, 7, const_str_plain_comments ); Py_INCREF( const_str_plain_comments );
    const_tuple_a920ae360b29c4cad631eea918060118_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_a920ae360b29c4cad631eea918060118_tuple, 0, const_str_digest_3744f9035f183a3bbe09fcd4db6bbcb7 ); Py_INCREF( const_str_digest_3744f9035f183a3bbe09fcd4db6bbcb7 );
    PyTuple_SET_ITEM( const_tuple_a920ae360b29c4cad631eea918060118_tuple, 1, const_str_space ); Py_INCREF( const_str_space );
    PyTuple_SET_ITEM( const_tuple_a920ae360b29c4cad631eea918060118_tuple, 2, const_str_newline ); Py_INCREF( const_str_newline );
    PyTuple_SET_ITEM( const_tuple_a920ae360b29c4cad631eea918060118_tuple, 3, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_a920ae360b29c4cad631eea918060118_tuple, 4, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_a920ae360b29c4cad631eea918060118_tuple, 5, const_str_digest_1c59d20c34b0a3c9b1b21b85ccda9dce ); Py_INCREF( const_str_digest_1c59d20c34b0a3c9b1b21b85ccda9dce );
    const_tuple_bb981971e6ae1971f2b6a1438ef2476e_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 1375610 ], 355 );
    const_tuple_bc6d4841015d64184409ed5f2811751f_tuple = PyTuple_New( 19 );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 0, const_str_plain_fname ); Py_INCREF( const_str_plain_fname );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 1, const_str_plain_X ); Py_INCREF( const_str_plain_X );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 2, const_str_plain_fmt ); Py_INCREF( const_str_plain_fmt );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 3, const_str_plain_delimiter ); Py_INCREF( const_str_plain_delimiter );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 4, const_str_plain_newline ); Py_INCREF( const_str_plain_newline );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 5, const_str_plain_header ); Py_INCREF( const_str_plain_header );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 6, const_str_plain_footer ); Py_INCREF( const_str_plain_footer );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 7, const_str_plain_comments ); Py_INCREF( const_str_plain_comments );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 8, const_str_plain_own_fh ); Py_INCREF( const_str_plain_own_fh );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 9, const_str_plain_gzip ); Py_INCREF( const_str_plain_gzip );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 10, const_str_plain_fh ); Py_INCREF( const_str_plain_fh );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 11, const_str_plain_ncol ); Py_INCREF( const_str_plain_ncol );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 12, const_str_plain_iscomplex_X ); Py_INCREF( const_str_plain_iscomplex_X );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 13, const_str_plain_format ); Py_INCREF( const_str_plain_format );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 14, const_str_plain_n_fmt_chars ); Py_INCREF( const_str_plain_n_fmt_chars );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 15, const_str_plain_error ); Py_INCREF( const_str_plain_error );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 16, const_str_plain_row ); Py_INCREF( const_str_plain_row );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 17, const_str_plain_row2 ); Py_INCREF( const_str_plain_row2 );
    PyTuple_SET_ITEM( const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 18, const_str_plain_number ); Py_INCREF( const_str_plain_number );
    const_tuple_d64c64754afc774016c11fc2ac3ad984_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_d64c64754afc774016c11fc2ac3ad984_tuple, 0, const_str_plain_file ); Py_INCREF( const_str_plain_file );
    PyTuple_SET_ITEM( const_tuple_d64c64754afc774016c11fc2ac3ad984_tuple, 1, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_d64c64754afc774016c11fc2ac3ad984_tuple, 2, const_str_plain_kwds ); Py_INCREF( const_str_plain_kwds );
    PyTuple_SET_ITEM( const_tuple_d64c64754afc774016c11fc2ac3ad984_tuple, 3, const_str_plain_compress ); Py_INCREF( const_str_plain_compress );
    const_tuple_d941a7e3454ef3ab70168d2a1419891a_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_d941a7e3454ef3ab70168d2a1419891a_tuple, 0, const_str_plain_asbytes ); Py_INCREF( const_str_plain_asbytes );
    PyTuple_SET_ITEM( const_tuple_d941a7e3454ef3ab70168d2a1419891a_tuple, 1, const_str_plain_asstr ); Py_INCREF( const_str_plain_asstr );
    PyTuple_SET_ITEM( const_tuple_d941a7e3454ef3ab70168d2a1419891a_tuple, 2, const_str_plain_asbytes_nested ); Py_INCREF( const_str_plain_asbytes_nested );
    PyTuple_SET_ITEM( const_tuple_d941a7e3454ef3ab70168d2a1419891a_tuple, 3, const_str_plain_bytes ); Py_INCREF( const_str_plain_bytes );
    PyTuple_SET_ITEM( const_tuple_d941a7e3454ef3ab70168d2a1419891a_tuple, 4, const_str_plain_basestring ); Py_INCREF( const_str_plain_basestring );
    PyTuple_SET_ITEM( const_tuple_d941a7e3454ef3ab70168d2a1419891a_tuple, 5, const_str_plain_unicode ); Py_INCREF( const_str_plain_unicode );
    const_tuple_d9b2c098c5c48e050096e57b44c920fc_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_d9b2c098c5c48e050096e57b44c920fc_tuple, 0, const_str_plain_items ); Py_INCREF( const_str_plain_items );
    PyTuple_SET_ITEM( const_tuple_d9b2c098c5c48e050096e57b44c920fc_tuple, 1, const_str_plain_packing ); Py_INCREF( const_str_plain_packing );
    PyTuple_SET_ITEM( const_tuple_d9b2c098c5c48e050096e57b44c920fc_tuple, 2, const_str_plain_start ); Py_INCREF( const_str_plain_start );
    PyTuple_SET_ITEM( const_tuple_d9b2c098c5c48e050096e57b44c920fc_tuple, 3, const_str_plain_ret ); Py_INCREF( const_str_plain_ret );
    PyTuple_SET_ITEM( const_tuple_d9b2c098c5c48e050096e57b44c920fc_tuple, 4, const_str_plain_length ); Py_INCREF( const_str_plain_length );
    PyTuple_SET_ITEM( const_tuple_d9b2c098c5c48e050096e57b44c920fc_tuple, 5, const_str_plain_subpacking ); Py_INCREF( const_str_plain_subpacking );
    PyTuple_SET_ITEM( const_tuple_d9b2c098c5c48e050096e57b44c920fc_tuple, 6, const_str_plain_pack_items ); Py_INCREF( const_str_plain_pack_items );
    const_tuple_dfd6ff1fc1e2db0923286c96ceb9d6a8_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_dfd6ff1fc1e2db0923286c96ceb9d6a8_tuple, 0, const_str_plain_fname ); Py_INCREF( const_str_plain_fname );
    PyTuple_SET_ITEM( const_tuple_dfd6ff1fc1e2db0923286c96ceb9d6a8_tuple, 1, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_dfd6ff1fc1e2db0923286c96ceb9d6a8_tuple, 2, const_str_plain_usemask ); Py_INCREF( const_str_plain_usemask );
    PyTuple_SET_ITEM( const_tuple_dfd6ff1fc1e2db0923286c96ceb9d6a8_tuple, 3, const_str_plain_output ); Py_INCREF( const_str_plain_output );
    PyTuple_SET_ITEM( const_tuple_dfd6ff1fc1e2db0923286c96ceb9d6a8_tuple, 4, const_str_plain_MaskedRecords ); Py_INCREF( const_str_plain_MaskedRecords );
    const_tuple_e325c4226ca12cec7c8b1810ea387dfb_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_e325c4226ca12cec7c8b1810ea387dfb_tuple, 0, const_str_plain_fname ); Py_INCREF( const_str_plain_fname );
    PyTuple_SET_ITEM( const_tuple_e325c4226ca12cec7c8b1810ea387dfb_tuple, 1, const_str_plain_dtype ); Py_INCREF( const_str_plain_dtype );
    PyTuple_SET_ITEM( const_tuple_e325c4226ca12cec7c8b1810ea387dfb_tuple, 2, const_str_plain_comments ); Py_INCREF( const_str_plain_comments );
    PyTuple_SET_ITEM( const_tuple_e325c4226ca12cec7c8b1810ea387dfb_tuple, 3, const_str_plain_delimiter ); Py_INCREF( const_str_plain_delimiter );
    PyTuple_SET_ITEM( const_tuple_e325c4226ca12cec7c8b1810ea387dfb_tuple, 4, const_str_plain_converters ); Py_INCREF( const_str_plain_converters );
    PyTuple_SET_ITEM( const_tuple_e325c4226ca12cec7c8b1810ea387dfb_tuple, 5, const_str_plain_skiprows ); Py_INCREF( const_str_plain_skiprows );
    PyTuple_SET_ITEM( const_tuple_e325c4226ca12cec7c8b1810ea387dfb_tuple, 6, const_str_plain_usecols ); Py_INCREF( const_str_plain_usecols );
    PyTuple_SET_ITEM( const_tuple_e325c4226ca12cec7c8b1810ea387dfb_tuple, 7, const_str_plain_unpack ); Py_INCREF( const_str_plain_unpack );
    PyTuple_SET_ITEM( const_tuple_e325c4226ca12cec7c8b1810ea387dfb_tuple, 8, const_str_plain_ndmin ); Py_INCREF( const_str_plain_ndmin );
    const_tuple_fc0577e28487990b79bf42e3da7d645c_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_fc0577e28487990b79bf42e3da7d645c_tuple, 0, const_str_plain_file ); Py_INCREF( const_str_plain_file );
    PyTuple_SET_ITEM( const_tuple_fc0577e28487990b79bf42e3da7d645c_tuple, 1, const_str_plain_mmap_mode ); Py_INCREF( const_str_plain_mmap_mode );
    PyTuple_SET_ITEM( const_tuple_fc0577e28487990b79bf42e3da7d645c_tuple, 2, const_str_plain_gzip ); Py_INCREF( const_str_plain_gzip );
    PyTuple_SET_ITEM( const_tuple_fc0577e28487990b79bf42e3da7d645c_tuple, 3, const_str_plain_own_fid ); Py_INCREF( const_str_plain_own_fid );
    PyTuple_SET_ITEM( const_tuple_fc0577e28487990b79bf42e3da7d645c_tuple, 4, const_str_plain_fid ); Py_INCREF( const_str_plain_fid );
    PyTuple_SET_ITEM( const_tuple_fc0577e28487990b79bf42e3da7d645c_tuple, 5, const_str_plain__ZIP_PREFIX ); Py_INCREF( const_str_plain__ZIP_PREFIX );
    PyTuple_SET_ITEM( const_tuple_fc0577e28487990b79bf42e3da7d645c_tuple, 6, const_str_plain_N ); Py_INCREF( const_str_plain_N );
    PyTuple_SET_ITEM( const_tuple_fc0577e28487990b79bf42e3da7d645c_tuple, 7, const_str_plain_magic ); Py_INCREF( const_str_plain_magic );
    PyTuple_SET_ITEM( const_tuple_fc0577e28487990b79bf42e3da7d645c_tuple, 8, const_str_plain_tmp ); Py_INCREF( const_str_plain_tmp );
    const_tuple_ff87d2217f8c4f07e66fc35f0737a36b_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_ff87d2217f8c4f07e66fc35f0737a36b_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_ff87d2217f8c4f07e66fc35f0737a36b_tuple, 1, const_str_plain_offset ); Py_INCREF( const_str_plain_offset );
    PyTuple_SET_ITEM( const_tuple_ff87d2217f8c4f07e66fc35f0737a36b_tuple, 2, const_str_plain_whence ); Py_INCREF( const_str_plain_whence );
    PyTuple_SET_ITEM( const_tuple_ff87d2217f8c4f07e66fc35f0737a36b_tuple, 3, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    PyTuple_SET_ITEM( const_tuple_ff87d2217f8c4f07e66fc35f0737a36b_tuple, 4, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    const_tuple_str_plain_fname_str_plain_kwargs_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_fname_str_plain_kwargs_tuple, 0, const_str_plain_fname ); Py_INCREF( const_str_plain_fname );
    PyTuple_SET_ITEM( const_tuple_str_plain_fname_str_plain_kwargs_tuple, 1, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    const_tuple_str_plain_items_str_plain_packing_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_items_str_plain_packing_tuple, 0, const_str_plain_items ); Py_INCREF( const_str_plain_items );
    PyTuple_SET_ITEM( const_tuple_str_plain_items_str_plain_packing_tuple, 1, const_str_plain_packing ); Py_INCREF( const_str_plain_packing );
    const_tuple_str_plain_file_str_plain_mmap_mode_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_file_str_plain_mmap_mode_tuple, 0, const_str_plain_file ); Py_INCREF( const_str_plain_file );
    PyTuple_SET_ITEM( const_tuple_str_plain_file_str_plain_mmap_mode_tuple, 1, const_str_plain_mmap_mode ); Py_INCREF( const_str_plain_mmap_mode );
    const_tuple_str_plain_packbits_str_plain_unpackbits_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_packbits_str_plain_unpackbits_tuple, 0, const_str_plain_packbits ); Py_INCREF( const_str_plain_packbits );
    PyTuple_SET_ITEM( const_tuple_str_plain_packbits_str_plain_unpackbits_tuple, 1, const_str_plain_unpackbits ); Py_INCREF( const_str_plain_unpackbits );
    const_tuple_str_plain_file_str_plain_args_str_plain_kwds_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_file_str_plain_args_str_plain_kwds_tuple, 0, const_str_plain_file ); Py_INCREF( const_str_plain_file );
    PyTuple_SET_ITEM( const_tuple_str_plain_file_str_plain_args_str_plain_kwds_tuple, 1, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_str_plain_file_str_plain_args_str_plain_kwds_tuple, 2, const_str_plain_kwds ); Py_INCREF( const_str_plain_kwds );
    const_tuple_str_plain_self_str_plain_fid_str_plain_own_fid_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fid_str_plain_own_fid_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fid_str_plain_own_fid_tuple, 1, const_str_plain_fid ); Py_INCREF( const_str_plain_fid );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fid_str_plain_own_fid_tuple, 2, const_str_plain_own_fid ); Py_INCREF( const_str_plain_own_fid );
    const_tuple_str_plain_MaskedArray_str_plain_make_mask_descr_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_MaskedArray_str_plain_make_mask_descr_tuple, 0, const_str_plain_MaskedArray ); Py_INCREF( const_str_plain_MaskedArray );
    PyTuple_SET_ITEM( const_tuple_str_plain_MaskedArray_str_plain_make_mask_descr_tuple, 1, const_str_plain_make_mask_descr ); Py_INCREF( const_str_plain_make_mask_descr );
    const_tuple_str_plain_file_str_plain_regexp_str_plain_dtype_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_file_str_plain_regexp_str_plain_dtype_tuple, 0, const_str_plain_file ); Py_INCREF( const_str_plain_file );
    PyTuple_SET_ITEM( const_tuple_str_plain_file_str_plain_regexp_str_plain_dtype_tuple, 1, const_str_plain_regexp ); Py_INCREF( const_str_plain_regexp );
    PyTuple_SET_ITEM( const_tuple_str_plain_file_str_plain_regexp_str_plain_dtype_tuple, 2, const_str_plain_dtype ); Py_INCREF( const_str_plain_dtype );
    const_tuple_str_plain_self_str_plain_offset_str_plain_whence_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_offset_str_plain_whence_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_offset_str_plain_whence_tuple, 1, const_str_plain_offset ); Py_INCREF( const_str_plain_offset );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_offset_str_plain_whence_tuple, 2, const_str_plain_whence ); Py_INCREF( const_str_plain_whence );
    const_tuple_str_plain_args_str_plain_kwargs_str_plain_zipfile_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_kwargs_str_plain_zipfile_tuple, 0, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_kwargs_str_plain_zipfile_tuple, 1, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_kwargs_str_plain_zipfile_tuple, 2, const_str_plain_zipfile ); Py_INCREF( const_str_plain_zipfile );
    const_tuple_str_plain_file_str_plain_arr_str_plain_own_fid_str_plain_fid_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_file_str_plain_arr_str_plain_own_fid_str_plain_fid_tuple, 0, const_str_plain_file ); Py_INCREF( const_str_plain_file );
    PyTuple_SET_ITEM( const_tuple_str_plain_file_str_plain_arr_str_plain_own_fid_str_plain_fid_tuple, 1, const_str_plain_arr ); Py_INCREF( const_str_plain_arr );
    PyTuple_SET_ITEM( const_tuple_str_plain_file_str_plain_arr_str_plain_own_fid_str_plain_fid_tuple, 2, const_str_plain_own_fid ); Py_INCREF( const_str_plain_own_fid );
    PyTuple_SET_ITEM( const_tuple_str_plain_file_str_plain_arr_str_plain_own_fid_str_plain_fid_tuple, 3, const_str_plain_fid ); Py_INCREF( const_str_plain_fid );
}

// The module code objects.
static PyCodeObject *codeobj_ef0601944f8b0f4de98e3347ab8a2488;
static PyCodeObject *codeobj_dbd2066b7134629e6db54b8f4bd294e6;
static PyCodeObject *codeobj_994cbb7e39dde48b4f4f67b96c496c35;
static PyCodeObject *codeobj_487e7abc1e68201409fff2f651059a3a;
static PyCodeObject *codeobj_cf5fa671adf1d2cf2985b93dad159212;
static PyCodeObject *codeobj_610892fc74104878820543cb3370b4e6;
static PyCodeObject *codeobj_b8bbf370d2f2bbd60359d3eae68d40aa;
static PyCodeObject *codeobj_bfe9eef962a383861077fa9aaeb194d8;
static PyCodeObject *codeobj_df0efc96e0513309fecde9eb92042cce;
static PyCodeObject *codeobj_b474ea2cb3111757893cd9b7c4e504f2;
static PyCodeObject *codeobj_5a4a7ed34e0de27e321d0b6fb1f9193a;
static PyCodeObject *codeobj_54f03a30f1e60e625386b44845b5e638;
static PyCodeObject *codeobj_c2a784cd2e29cecd87803fd08535398f;
static PyCodeObject *codeobj_0e64996581145e783188458b48ef3ddd;
static PyCodeObject *codeobj_e5644c78ae13f597f4fae5af42fbe5e2;
static PyCodeObject *codeobj_65fb1146cea653e0c58330fc65dfd358;
static PyCodeObject *codeobj_f77ba8d29f7ad7a10f3dba54e4760cba;
static PyCodeObject *codeobj_f13c817d27ca2c0633ae3f5f8679038d;
static PyCodeObject *codeobj_bacaf3e31d79ecdba9196f09c0c5fd75;
static PyCodeObject *codeobj_c5b98c3dc8a4565dcf381ec14bc0ed8f;
static PyCodeObject *codeobj_0f6e2c08eb8c6f5af6d843834a026f4b;
static PyCodeObject *codeobj_88d889a664031ebe51555b6371017b5b;
static PyCodeObject *codeobj_858c53c73032b83f56c1cd6602258659;
static PyCodeObject *codeobj_7a23b547a4c6e2610ebe7d7a495ff53e;
static PyCodeObject *codeobj_7cd575dd0cf23799db8ace618049f78c;
static PyCodeObject *codeobj_02213ff35517b25d5dddf34dcb69999c;
static PyCodeObject *codeobj_098a49e93e8df74bd2d7adc9eb59f5b5;
static PyCodeObject *codeobj_52fd256f359093ff10a18d3c42f84afc;
static PyCodeObject *codeobj_2642607c0cd80833a97b98077efe70cf;
static PyCodeObject *codeobj_9877841204ddb3d0791965b6592bb1af;
static PyCodeObject *codeobj_5f8bff2b9d40e4b26360ac1a9e693e61;
static PyCodeObject *codeobj_35ad4fa7814f5a4d1ef444aa5cd38866;
static PyCodeObject *codeobj_1e1c5dcc475198480e4f8e343f4f2ba0;
static PyCodeObject *codeobj_b51a5b68131fa4cf8fdf5127df19492f;
static PyCodeObject *codeobj_bd818823fb58f0f82b1f104163262fdc;
static PyCodeObject *codeobj_84afe6edbdffb970df38359687f1689f;
static PyCodeObject *codeobj_50fc48b8ecdf741c6edc70e8dd13f680;
static PyCodeObject *codeobj_b9724683be823662c2182c02732795c7;
static PyCodeObject *codeobj_ffa72049d15f6d4e30d05cf7a74d3e1d;
static PyCodeObject *codeobj_2c06322e2c69e7d9aa63f3c2ce836007;
static PyCodeObject *codeobj_5d3fc0e2e89a801dc4c79dece7f241aa;
static PyCodeObject *codeobj_c6e13c8b7e445366b05ef6e25d37a43b;
static PyCodeObject *codeobj_9c899373730de2c0b406cab7b1cfde05;
static PyCodeObject *codeobj_8c66ac1d3c5bd204636c486868c3256e;
static PyCodeObject *codeobj_7d110c47319ed48ac6b57e13b717db91;
static PyCodeObject *codeobj_c1313d9f5e67051afb98727561321593;
static PyCodeObject *codeobj_5d169bcdba225fa472d75e5cd3927a51;
static PyCodeObject *codeobj_ed9f43d13593d66728116b895b165455;
static PyCodeObject *codeobj_c728753e4a78c15392865fd3a76a179a;
static PyCodeObject *codeobj_83e67002998937b20e0e4b88f5604af8;
static PyCodeObject *codeobj_6736d95c3091be0974974c9f6d8a5f9b;
static PyCodeObject *codeobj_629a16181f4ed496f2f106f9d7c69e66;
static PyCodeObject *codeobj_2b550bb6692c0a96e4cf4c0fc6048fa0;
static PyCodeObject *codeobj_ac877539981b3be186d5ccb7ff9e1a17;
static PyCodeObject *codeobj_4b3c2088275d5a314297ec25f63abbc1;
static PyCodeObject *codeobj_4281465ab8c87a2b851be814f282e50c;
static PyCodeObject *codeobj_f5f387ad2cf16fb181eed62b4ee3ab44;
static PyCodeObject *codeobj_2bf9a8f4d032371a0ba86d43e50ff276;
static PyCodeObject *codeobj_d47ed9e2e74f6c68df9f0392b26ed0a5;
static PyCodeObject *codeobj_71445539a828cd7de4536c198ea1cbee;
static PyCodeObject *codeobj_51d0a9031039eaf5e022fc0a522b42b4;
static PyCodeObject *codeobj_af8337516684945ff46aa1c0ec911575;
static PyCodeObject *codeobj_18da7184000b56fa5b92b5d75bb793a1;
static PyCodeObject *codeobj_65aa3e32986b03bb97432449351a5aa2;
static PyCodeObject *codeobj_3f1ea8ceeb17482af72b480e4805c0c9;
static PyCodeObject *codeobj_c31362d5889b132a3105d8547b10872f;
static PyCodeObject *codeobj_16b4bbd2dfd91f472d5dbe71078ffe0c;
static PyCodeObject *codeobj_81dca8f8938adcfc1e166e916dd5fb00;
static PyCodeObject *codeobj_17fce30a2ac0539e646ad4b1197c4520;
static PyCodeObject *codeobj_835a0f8750089ec5016ffcd8c73168d9;

static void _initModuleCodeObjects(void)
{
    codeobj_ef0601944f8b0f4de98e3347ab8a2488 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_angle_genexpr, 1705, const_tuple_str_plain___iterator_tuple, 1, CO_NEWLOCALS | CO_GENERATOR | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_dbd2066b7134629e6db54b8f4bd294e6 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_angle_genexpr, 1734, const_tuple_str_plain___iterator_tuple, 1, CO_NEWLOCALS | CO_GENERATOR | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_994cbb7e39dde48b4f4f67b96c496c35 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_angle_genexpr, 1763, const_tuple_str_plain___iterator_tuple, 1, CO_NEWLOCALS | CO_GENERATOR | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_487e7abc1e68201409fff2f651059a3a = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_angle_lambda, 610, const_tuple_str_plain_x_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_cf5fa671adf1d2cf2985b93dad159212 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_angle_lambda, 616, const_tuple_str_plain_x_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_610892fc74104878820543cb3370b4e6 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_BagObj, 90, const_tuple_empty, 0, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_b8bbf370d2f2bbd60359d3eae68d40aa = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_GzipFile, 49, const_tuple_empty, 0, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_bfe9eef962a383861077fa9aaeb194d8 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_NpzFile, 133, const_tuple_empty, 0, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_df0efc96e0513309fecde9eb92042cce = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain___contains__, 280, const_tuple_str_plain_self_str_plain_key_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_b474ea2cb3111757893cd9b7c4e504f2 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain___del__, 226, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_5a4a7ed34e0de27e321d0b6fb1f9193a = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain___enter__, 207, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_54f03a30f1e60e625386b44845b5e638 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain___exit__, 210, const_tuple_4056a0ef07ec9188d15ce9b607833855_tuple, 4, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_c2a784cd2e29cecd87803fd08535398f = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain___getattribute__, 122, const_tuple_str_plain_self_str_plain_key_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_0e64996581145e783188458b48ef3ddd = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain___getitem__, 229, const_tuple_str_plain_self_str_plain_key_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_e5644c78ae13f597f4fae5af42fbe5e2 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain___getitem__, 229, const_tuple_60f8f7dc3e8ae723d6c96201e30e5b98_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_65fb1146cea653e0c58330fc65dfd358 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain___init__, 119, const_tuple_str_plain_self_str_plain_obj_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_f77ba8d29f7ad7a10f3dba54e4760cba = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain___init__, 189, const_tuple_str_plain_self_str_plain_fid_str_plain_own_fid_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_f13c817d27ca2c0633ae3f5f8679038d = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain___init__, 189, const_tuple_157813af5912dc21d3649d822e8ba067_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_bacaf3e31d79ecdba9196f09c0c5fd75 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain___iter__, 257, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_c5b98c3dc8a4565dcf381ec14bc0ed8f = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain__getconv, 607, const_tuple_str_plain_dtype_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_0f6e2c08eb8c6f5af6d843834a026f4b = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain__getconv, 607, const_tuple_str_plain_dtype_str_plain_typ_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_88d889a664031ebe51555b6371017b5b = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain__savez, 560, const_tuple_d64c64754afc774016c11fc2ac3ad984_tuple, 4, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_858c53c73032b83f56c1cd6602258659 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain__savez, 560, const_tuple_5e9574903aa5fb1b9c28f8453a6c92f7_tuple, 4, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_7a23b547a4c6e2610ebe7d7a495ff53e = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_close, 213, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_7cd575dd0cf23799db8ace618049f78c = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_contraction, 1705, const_tuple_empty, 0, CO_NEWLOCALS | CO_GENERATOR | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_02213ff35517b25d5dddf34dcb69999c = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_contraction, 1734, const_tuple_empty, 0, CO_NEWLOCALS | CO_GENERATOR | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_098a49e93e8df74bd2d7adc9eb59f5b5 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_contraction, 1763, const_tuple_empty, 0, CO_NEWLOCALS | CO_GENERATOR | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_52fd256f359093ff10a18d3c42f84afc = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_flatten_dtype, 743, const_tuple_str_plain_dt_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_2642607c0cd80833a97b98077efe70cf = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_flatten_dtype, 743, const_tuple_1a9d92d65892dabfe0582e276c018737_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_9877841204ddb3d0791965b6592bb1af = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_fromregex, 1081, const_tuple_str_plain_file_str_plain_regexp_str_plain_dtype_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_5f8bff2b9d40e4b26360ac1a9e693e61 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_fromregex, 1081, const_tuple_076714028ded42070ef4b73f369890c1_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_35ad4fa7814f5a4d1ef444aa5cd38866 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_genfromtxt, 1172, const_tuple_652f70a59b9fb8433f9982771b3551ce_tuple, 23, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_1e1c5dcc475198480e4f8e343f4f2ba0 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_genfromtxt, 1172, const_tuple_84c7c8d06ce306105f5bbf478111a24a_tuple, 23, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_b51a5b68131fa4cf8fdf5127df19492f = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_items, 260, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_bd818823fb58f0f82b1f104163262fdc = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_items, 260, const_tuple_str_plain_self_str_plain_f_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_84afe6edbdffb970df38359687f1689f = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_iteritems, 267, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_GENERATOR | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_50fc48b8ecdf741c6edc70e8dd13f680 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_iteritems, 267, const_tuple_str_plain_self_str_plain_f_tuple, 1, CO_NEWLOCALS | CO_GENERATOR | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_b9724683be823662c2182c02732795c7 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_iterkeys, 276, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_ffa72049d15f6d4e30d05cf7a74d3e1d = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_keys, 272, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_2c06322e2c69e7d9aa63f3c2ce836007 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_load, 284, const_tuple_str_plain_file_str_plain_mmap_mode_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_5d3fc0e2e89a801dc4c79dece7f241aa = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_load, 284, const_tuple_fc0577e28487990b79bf42e3da7d645c_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_c6e13c8b7e445366b05ef6e25d37a43b = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_loadtxt, 628, const_tuple_e325c4226ca12cec7c8b1810ea387dfb_tuple, 9, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_9c899373730de2c0b406cab7b1cfde05 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_loadtxt, 628, const_tuple_bb981971e6ae1971f2b6a1438ef2476e_tuple, 9, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_8c66ac1d3c5bd204636c486868c3256e = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_mafromtxt, 1818, const_tuple_str_plain_fname_str_plain_kwargs_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_7d110c47319ed48ac6b57e13b717db91 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_mafromtxt, 1818, const_tuple_str_plain_fname_str_plain_kwargs_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_c1313d9f5e67051afb98727561321593 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_ndfromtxt, 1801, const_tuple_str_plain_fname_str_plain_kwargs_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_5d169bcdba225fa472d75e5cd3927a51 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_ndfromtxt, 1801, const_tuple_str_plain_fname_str_plain_kwargs_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_ed9f43d13593d66728116b895b165455 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_npyio, 0, const_tuple_empty, 0, CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_c728753e4a78c15392865fd3a76a179a = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_pack_items, 772, const_tuple_str_plain_items_str_plain_packing_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_83e67002998937b20e0e4b88f5604af8 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_pack_items, 772, const_tuple_d9b2c098c5c48e050096e57b44c920fc_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_6736d95c3091be0974974c9f6d8a5f9b = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_recfromcsv, 1867, const_tuple_str_plain_fname_str_plain_kwargs_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_629a16181f4ed496f2f106f9d7c69e66 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_recfromcsv, 1867, const_tuple_4b1c9f1021fd3ac676ac33686bed276c_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_2b550bb6692c0a96e4cf4c0fc6048fa0 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_recfromtxt, 1835, const_tuple_str_plain_fname_str_plain_kwargs_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_ac877539981b3be186d5ccb7ff9e1a17 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_recfromtxt, 1835, const_tuple_dfd6ff1fc1e2db0923286c96ceb9d6a8_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_4b3c2088275d5a314297ec25f63abbc1 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_save, 406, const_tuple_str_plain_file_str_plain_arr_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_4281465ab8c87a2b851be814f282e50c = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_save, 406, const_tuple_str_plain_file_str_plain_arr_str_plain_own_fid_str_plain_fid_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_f5f387ad2cf16fb181eed62b4ee3ab44 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_savetxt, 887, const_tuple_8e81b104acca9b3a2732b73b8d694309_tuple, 8, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_2bf9a8f4d032371a0ba86d43e50ff276 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_savetxt, 887, const_tuple_bc6d4841015d64184409ed5f2811751f_tuple, 8, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_d47ed9e2e74f6c68df9f0392b26ed0a5 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_savez, 458, const_tuple_str_plain_file_str_plain_args_str_plain_kwds_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_71445539a828cd7de4536c198ea1cbee = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_savez, 458, const_tuple_str_plain_file_str_plain_args_str_plain_kwds_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_51d0a9031039eaf5e022fc0a522b42b4 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_savez_compressed, 535, const_tuple_str_plain_file_str_plain_args_str_plain_kwds_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_af8337516684945ff46aa1c0ec911575 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_savez_compressed, 535, const_tuple_str_plain_file_str_plain_args_str_plain_kwds_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_18da7184000b56fa5b92b5d75bb793a1 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_seek, 51, const_tuple_str_plain_self_str_plain_offset_str_plain_whence_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_65aa3e32986b03bb97432449351a5aa2 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_seek, 51, const_tuple_ff87d2217f8c4f07e66fc35f0737a36b_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_3f1ea8ceeb17482af72b480e4805c0c9 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_seek_gzip_factory, 42, const_tuple_str_plain_f_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_c31362d5889b132a3105d8547b10872f = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_seek_gzip_factory, 42, const_tuple_1ebb03b67dd95acd97e5fc178ac9ed7a_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_16b4bbd2dfd91f472d5dbe71078ffe0c = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_split_line, 788, const_tuple_str_plain_line_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_81dca8f8938adcfc1e166e916dd5fb00 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_tell, 67, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_17fce30a2ac0539e646ad4b1197c4520 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_zipfile_factory, 128, const_tuple_str_plain_args_str_plain_kwargs_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_835a0f8750089ec5016ffcd8c73168d9 = MAKE_CODEOBJ( const_str_digest_e0fa3050efd9be5205e9a0343e8219b3, const_str_plain_zipfile_factory, 128, const_tuple_str_plain_args_str_plain_kwargs_str_plain_zipfile_tuple, 0, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
}

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_2_BagObj_of_module_numpy$lib$npyio(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_4_NpzFile_of_module_numpy$lib$npyio(  );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_1_of_function_14_genfromtxt_of_module_numpy$lib$npyio( PyObject *_python_par___iterator, PyObjectSharedLocalVariable& closure_i );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_2_of_function_14_genfromtxt_of_module_numpy$lib$npyio( PyObject *_python_par___iterator );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_3_of_function_14_genfromtxt_of_module_numpy$lib$npyio( PyObject *_python_par___iterator, PyObjectSharedLocalVariable& closure_i );


NUITKA_CROSS_MODULE PyObject *impl_function_2_complex_call_helper_star_list_star_dict_of_module___internal__( PyObject *_python_par_called, PyObject *_python_par_star_arg_list, PyObject *_python_par_star_arg_dict );


NUITKA_CROSS_MODULE PyObject *impl_function_3_complex_call_helper_star_list_of_module___internal__( PyObject *_python_par_called, PyObject *_python_par_star_arg_list );


NUITKA_CROSS_MODULE PyObject *impl_function_4_complex_call_helper_pos_star_dict_of_module___internal__( PyObject *_python_par_called, PyObject *_python_par_args, PyObject *_python_par_star_arg_dict );


static PyObject *MAKE_FUNCTION_function_10__getconv_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_10_keys_of_class_4_NpzFile_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_11_iterkeys_of_class_4_NpzFile_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_11_loadtxt_of_module_numpy$lib$npyio( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_12___contains___of_class_4_NpzFile_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_12_savetxt_of_module_numpy$lib$npyio( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_13_fromregex_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_14_genfromtxt_of_module_numpy$lib$npyio( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_15_ndfromtxt_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_16_mafromtxt_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_17_recfromtxt_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_18_recfromcsv_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_2_BagObj_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_4_NpzFile_of_module_numpy$lib$npyio( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio( PyObjectSharedLocalVariable &closure_flatten_dtype );


// This structure is for attachment as self of function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio.
// It is allocated at the time the function object is created.
struct _context_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio_t
{
    // The function can access a read-only closure of the creator.
    PyObjectSharedLocalVariable closure_flatten_dtype;
};

static void _context_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio_destructor( void *context_voidptr )
{
    _context_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio_t *_python_context = (_context_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_seek_gzip_factory_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_1_seek_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_2___enter___of_class_4_NpzFile_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_2___getattribute___of_class_2_BagObj_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio( PyObjectSharedLocalVariable &closure_pack_items );


// This structure is for attachment as self of function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio.
// It is allocated at the time the function object is created.
struct _context_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio_t
{
    // The function can access a read-only closure of the creator.
    PyObjectSharedLocalVariable closure_pack_items;
};

static void _context_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio_destructor( void *context_voidptr )
{
    _context_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio_t *_python_context = (_context_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_2_tell_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_3___exit___of_class_4_NpzFile_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio( PyObjectSharedLocalVariable &closure_comments, PyObjectSharedLocalVariable &closure_delimiter );


// This structure is for attachment as self of function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio.
// It is allocated at the time the function object is created.
struct _context_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio_t
{
    // The function can access a read-only closure of the creator.
    PyObjectSharedLocalVariable closure_comments;
    PyObjectSharedLocalVariable closure_delimiter;
};

static void _context_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio_destructor( void *context_voidptr )
{
    _context_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio_t *_python_context = (_context_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_3_zipfile_factory_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_4_close_of_class_4_NpzFile_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_5___del___of_class_4_NpzFile_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_5_load_of_module_numpy$lib$npyio( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_6___getitem___of_class_4_NpzFile_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_6_save_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_7___iter___of_class_4_NpzFile_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_7_savez_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_8_items_of_class_4_NpzFile_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_8_savez_compressed_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_9__savez_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_10__getconv_of_module_numpy$lib$npyio(  );


static PyObject *MAKE_FUNCTION_lambda_2_lambda_of_function_10__getconv_of_module_numpy$lib$npyio(  );


// The module function definitions.
static PyObject *impl_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_f )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_f; par_f.object = _python_par_f;
    PyObjectLocalVariable var_gzip;
    PyObjectLocalVariable var_GzipFile;
    PyObjectLocalVariable var_name;
    PyObjectLocalVariable var_mode;
    PyObjectTempVariable tmp_class_creation_1__bases;
    PyObjectTempVariable tmp_class_creation_1__class_dict;
    PyObjectTempVariable tmp_class_creation_1__metaclass;
    PyObjectTempVariable tmp_class_creation_1__class;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_class_bases_1;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_dget_dict_1;
    PyObject *tmp_dget_key_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    int tmp_tried_lineno_1;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_3f1ea8ceeb17482af72b480e4805c0c9, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_gzip.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_gzip,
            var_gzip.object
        );

    }
    if ((var_GzipFile.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_GzipFile,
            var_GzipFile.object
        );

    }
    if ((var_name.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_name,
            var_name.object
        );

    }
    if ((var_mode.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_mode,
            var_mode.object
        );

    }
    if ((par_f.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_f,
            par_f.object
        );

    }
    frame_function->f_lineno = 47;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_gzip, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 47;
        goto frame_exception_exit_1;
    }
    assert( var_gzip.object == NULL );
    var_gzip.object = tmp_assign_source_1;

    // Tried code
    tmp_assign_source_2 = PyTuple_New( 1 );
    tmp_source_name_1 = var_gzip.object;

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_GzipFile );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_2 );

        frame_function->f_lineno = 49;
        goto try_finally_handler_1;
    }
    PyTuple_SET_ITEM( tmp_assign_source_2, 0, tmp_tuple_element_1 );
    assert( tmp_class_creation_1__bases.object == NULL );
    tmp_class_creation_1__bases.object = tmp_assign_source_2;

    tmp_assign_source_3 = impl_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 49;
        goto try_finally_handler_1;
    }
    assert( tmp_class_creation_1__class_dict.object == NULL );
    tmp_class_creation_1__class_dict.object = tmp_assign_source_3;

    tmp_compare_left_1 = const_str_plain___metaclass__;
    tmp_compare_right_1 = tmp_class_creation_1__class_dict.object;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    if ( tmp_cmp_In_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 49;
        goto try_finally_handler_1;
    }
    if (tmp_cmp_In_1 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_dget_dict_1 = tmp_class_creation_1__class_dict.object;

    tmp_dget_key_1 = const_str_plain___metaclass__;
    tmp_assign_source_4 = DICT_GET_ITEM( tmp_dget_dict_1, tmp_dget_key_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 49;
        goto try_finally_handler_1;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_class_bases_1 = tmp_class_creation_1__bases.object;

    tmp_assign_source_4 = SELECT_METACLASS( tmp_class_bases_1, GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_1:;
    assert( tmp_class_creation_1__metaclass.object == NULL );
    tmp_class_creation_1__metaclass.object = tmp_assign_source_4;

    tmp_called_1 = tmp_class_creation_1__metaclass.object;

    tmp_call_arg_element_1 = const_str_plain_GzipFile;
    tmp_call_arg_element_2 = tmp_class_creation_1__bases.object;

    tmp_call_arg_element_3 = tmp_class_creation_1__class_dict.object;

    frame_function->f_lineno = 49;
    tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 49;
        goto try_finally_handler_1;
    }
    assert( tmp_class_creation_1__class.object == NULL );
    tmp_class_creation_1__class.object = tmp_assign_source_5;

    tmp_assign_source_6 = tmp_class_creation_1__class.object;

    assert( var_GzipFile.object == NULL );
    var_GzipFile.object = INCREASE_REFCOUNT( tmp_assign_source_6 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_class_creation_1__class.object );
    tmp_class_creation_1__class.object = NULL;

    Py_XDECREF( tmp_class_creation_1__bases.object );
    tmp_class_creation_1__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_1__class_dict.object );
    tmp_class_creation_1__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass.object );
    tmp_class_creation_1__metaclass.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_isinstance_inst_1 = par_f.object;

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6491 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 71;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_1 = LOOKUP_BUILTIN( const_str_plain_str );
    if ( tmp_isinstance_cls_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 71;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 71;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_2 = var_GzipFile.object;

    if ( tmp_called_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 169602 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 72;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_4 = par_f.object;

    if ( tmp_call_arg_element_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6491 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 72;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 72;
    tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_4 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 72;
        goto frame_exception_exit_1;
    }
    if (par_f.object == NULL)
    {
        par_f.object = tmp_assign_source_7;
    }
    else
    {
        PyObject *old = par_f.object;
        par_f.object = tmp_assign_source_7;
        Py_DECREF( old );
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_isinstance_inst_2 = par_f.object;

    if ( tmp_isinstance_inst_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6491 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 73;
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = var_gzip.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 169656 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 73;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_GzipFile );
    if ( tmp_isinstance_cls_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 73;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    Py_DECREF( tmp_isinstance_cls_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 73;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    // Tried block of try/except
    tmp_source_name_3 = par_f.object;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6491 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 77;
        goto try_except_handler_1;
    }

    tmp_assign_source_8 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_name );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 77;
        goto try_except_handler_1;
    }
    assert( var_name.object == NULL );
    var_name.object = tmp_assign_source_8;

    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_AttributeError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 78;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_4 = par_f.object;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6491 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 80;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_9 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_filename );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 80;
        goto frame_exception_exit_1;
    }
    if (var_name.object == NULL)
    {
        var_name.object = tmp_assign_source_9;
    }
    else
    {
        PyObject *old = var_name.object;
        var_name.object = tmp_assign_source_9;
        Py_DECREF( old );
    }
    goto branch_end_3;
    branch_no_3:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_3:;
    try_except_end_1:;
    tmp_source_name_5 = par_f.object;

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6491 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 81;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_10 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_mode );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 81;
        goto frame_exception_exit_1;
    }
    assert( var_mode.object == NULL );
    var_mode.object = tmp_assign_source_10;

    tmp_called_3 = var_GzipFile.object;

    if ( tmp_called_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 169602 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 83;
        goto frame_exception_exit_1;
    }

    tmp_call_kw_1 = _PyDict_NewPresized( 2 );
    tmp_source_name_6 = par_f.object;

    if ( tmp_source_name_6 == NULL )
    {
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6491 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 83;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_fileobj );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_kw_1 );

        frame_function->f_lineno = 83;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_fileobj;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    tmp_dict_value_2 = var_name.object;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 83;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_2 = const_str_plain_filename;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_2, tmp_dict_value_2 );
    frame_function->f_lineno = 83;
    tmp_assign_source_11 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_3, tmp_call_kw_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 83;
        goto frame_exception_exit_1;
    }
    if (par_f.object == NULL)
    {
        par_f.object = tmp_assign_source_11;
    }
    else
    {
        PyObject *old = par_f.object;
        par_f.object = tmp_assign_source_11;
        Py_DECREF( old );
    }
    tmp_assattr_name_1 = var_mode.object;

    tmp_assattr_target_1 = par_f.object;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_mode, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 84;
        goto frame_exception_exit_1;
    }
    branch_no_2:;
    branch_end_1:;
    tmp_return_value = par_f.object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6491 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 86;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_gzip.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_gzip,
            var_gzip.object
        );

    }
    if ((var_GzipFile.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_GzipFile,
            var_GzipFile.object
        );

    }
    if ((var_name.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_name,
            var_name.object
        );

    }
    if ((var_mode.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_mode,
            var_mode.object
        );

    }
    if ((par_f.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_f,
            par_f.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_f = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "seek_gzip_factory() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_f == key )
            {
                assert( _python_par_f == NULL );
                _python_par_f = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_f, key ) == 1 )
            {
                assert( _python_par_f == NULL );
                _python_par_f = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "seek_gzip_factory() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_f != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_f = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_f == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_f = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_f == NULL ))
    {
        PyObject *values[] = { _python_par_f };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( self, _python_par_f );

error_exit:;

    Py_XDECREF( _python_par_f );

    return NULL;
}

static PyObject *dparse_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var_seek;
    PyObjectLocalVariable var_tell;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_defaults_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_a8bee1fc2e5b3f40b8d64ca5454c9c61;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_b8bbf370d2f2bbd60359d3eae68d40aa, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_defaults_1 = const_tuple_int_0_tuple;
    tmp_assign_source_2 = MAKE_FUNCTION_function_1_seek_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( INCREASE_REFCOUNT( tmp_defaults_1 ) );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_2 );

        frame_function->f_lineno = 51;
        goto frame_exception_exit_1;
    }
    assert( var_seek.object == NULL );
    var_seek.object = tmp_assign_source_2;

    tmp_assign_source_3 = MAKE_FUNCTION_function_2_tell_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_3 );

        frame_function->f_lineno = 67;
        goto frame_exception_exit_1;
    }
    assert( var_tell.object == NULL );
    var_tell.object = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var_seek.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_seek,
            var_seek.object
        );

    }
    if ((var_tell.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_tell,
            var_tell.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var_seek.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_seek,
            var_seek.object
        );

    }
    if ((var_tell.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_tell,
            var_tell.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}


static PyObject *impl_function_1_seek_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_offset, PyObject *_python_par_whence )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_offset; par_offset.object = _python_par_offset;
    PyObjectLocalVariable par_whence; par_whence.object = _python_par_whence;
    PyObjectLocalVariable var_count;
    PyObjectLocalVariable var_i;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_left_3;
    PyObject *tmp_binop_left_4;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_binop_right_3;
    PyObject *tmp_binop_right_4;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Lt_1;
    int tmp_cmp_NotIn_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_range_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    int tmp_tried_lineno_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_18da7184000b56fa5b92b5d75bb793a1, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_whence.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 169706 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 53;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = const_int_pos_1;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 53;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 54;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_offset );
    if ( tmp_binop_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 54;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_1 = par_offset.object;

    if ( tmp_binop_right_1 == NULL )
    {
        Py_DECREF( tmp_binop_left_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1412 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 54;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_1 = BINARY_OPERATION_ADD( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_left_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 54;
        goto frame_exception_exit_1;
    }
    if (par_offset.object == NULL)
    {
        par_offset.object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = par_offset.object;
        par_offset.object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    branch_no_1:;
    tmp_compare_left_2 = par_whence.object;

    if ( tmp_compare_left_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 169706 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 56;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_2 = LIST_COPY( const_list_int_0_int_pos_1_list );
    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    if ( tmp_cmp_NotIn_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_2 );

        frame_function->f_lineno = 56;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_2 );
    if (tmp_cmp_NotIn_1 == 0)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_make_exception_arg_1 = const_str_digest_fedcb110fe3130088d5b35c0225077fb;
    frame_function->f_lineno = 57;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_IOError, tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 57;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 57;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_2:;
    tmp_compare_left_3 = par_offset.object;

    if ( tmp_compare_left_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1412 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 59;
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = par_self.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 59;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_offset );
    if ( tmp_compare_right_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 59;
        goto frame_exception_exit_1;
    }
    tmp_cmp_Lt_1 = RICH_COMPARE_BOOL_LT( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_cmp_Lt_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_3 );

        frame_function->f_lineno = 59;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_3 );
    if (tmp_cmp_Lt_1 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_3 = par_self.object;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 61;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_rewind );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 61;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 61;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 61;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_binop_left_2 = par_offset.object;

    if ( tmp_binop_left_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1412 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 62;
        goto frame_exception_exit_1;
    }

    tmp_source_name_4 = par_self.object;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 62;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_offset );
    if ( tmp_binop_right_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 62;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = BINARY_OPERATION_SUB( tmp_binop_left_2, tmp_binop_right_2 );
    Py_DECREF( tmp_binop_right_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 62;
        goto frame_exception_exit_1;
    }
    assert( var_count.object == NULL );
    var_count.object = tmp_assign_source_2;

    tmp_binop_left_3 = var_count.object;

    tmp_binop_right_3 = const_int_pos_1024;
    tmp_range_arg_1 = BINARY_OPERATION( PyNumber_FloorDivide, tmp_binop_left_3, tmp_binop_right_3 );
    if ( tmp_range_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 63;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_1 = BUILTIN_RANGE( tmp_range_arg_1 );
    Py_DECREF( tmp_range_arg_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 63;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 63;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_3;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_4 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 63;
            goto try_finally_handler_1;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_4;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_4;
        Py_DECREF( old );
    }
    tmp_assign_source_5 = tmp_for_loop_1__iter_value.object;

    if (var_i.object == NULL)
    {
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_5 );
    }
    else
    {
        PyObject *old = var_i.object;
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_5 );
        Py_DECREF( old );
    }
    tmp_source_name_5 = par_self.object;

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 64;
        goto try_finally_handler_1;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_read );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 64;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_1 = const_int_pos_1024;
    frame_function->f_lineno = 64;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 64;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 63;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_source_name_6 = par_self.object;

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 65;
        goto frame_exception_exit_1;
    }

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_read );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 65;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_4 = var_count.object;

    if ( tmp_binop_left_4 == NULL )
    {
        Py_DECREF( tmp_called_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 21147 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 65;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_4 = const_int_pos_1024;
    tmp_call_arg_element_2 = BINARY_OPERATION_REMAINDER( tmp_binop_left_4, tmp_binop_right_4 );
    if ( tmp_call_arg_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_3 );

        frame_function->f_lineno = 65;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 65;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_3 );
    Py_DECREF( tmp_call_arg_element_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 65;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_3:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_count.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_count,
            var_count.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_offset.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_offset,
            par_offset.object
        );

    }
    if ((par_whence.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_whence,
            par_whence.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1_seek_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_offset = NULL;
    PyObject *_python_par_whence = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "seek() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_offset == key )
            {
                assert( _python_par_offset == NULL );
                _python_par_offset = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_whence == key )
            {
                assert( _python_par_whence == NULL );
                _python_par_whence = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_offset, key ) == 1 )
            {
                assert( _python_par_offset == NULL );
                _python_par_offset = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_whence, key ) == 1 )
            {
                assert( _python_par_whence == NULL );
                _python_par_whence = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "seek() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_offset != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_offset = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_offset == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_offset = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_whence != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_whence = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_whence == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_whence = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_offset == NULL || _python_par_whence == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_offset, _python_par_whence };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1_seek_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( self, _python_par_self, _python_par_offset, _python_par_whence );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_offset );
    Py_XDECREF( _python_par_whence );

    return NULL;
}

static PyObject *dparse_function_1_seek_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_1_seek_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_seek_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_tell_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_81dca8f8938adcfc1e166e916dd5fb00, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 68;
        goto frame_exception_exit_1;
    }

    tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_offset );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 68;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_2_tell_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "tell() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "tell() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2_tell_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_tell_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_2_tell_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_tell_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_2_BagObj_of_module_numpy$lib$npyio(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___doc__;
    PyObjectLocalVariable var___init__;
    PyObjectLocalVariable var___getattribute__;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_a8bee1fc2e5b3f40b8d64ca5454c9c61;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    tmp_assign_source_2 = const_str_digest_8b3057cee65c326ac9511e0e7910a946;
    assert( var___doc__.object == NULL );
    var___doc__.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_610892fc74104878820543cb3370b4e6, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_assign_source_3 = MAKE_FUNCTION_function_1___init___of_class_2_BagObj_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_3 );

        frame_function->f_lineno = 119;
        goto frame_exception_exit_1;
    }
    assert( var___init__.object == NULL );
    var___init__.object = tmp_assign_source_3;

    tmp_assign_source_4 = MAKE_FUNCTION_function_2___getattribute___of_class_2_BagObj_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_4 );

        frame_function->f_lineno = 122;
        goto frame_exception_exit_1;
    }
    assert( var___getattribute__.object == NULL );
    var___getattribute__.object = tmp_assign_source_4;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var___getattribute__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___getattribute__,
            var___getattribute__.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var___getattribute__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___getattribute__,
            var___getattribute__.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}


static PyObject *impl_function_1___init___of_class_2_BagObj_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_obj; par_obj.object = _python_par_obj;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_65fb1146cea653e0c58330fc65dfd358, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_weakref );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_weakref );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 169758 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 121;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_proxy );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 121;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = par_obj.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 10401 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 121;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 121;
    tmp_assattr_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_assattr_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 121;
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_1 = par_self.object;

    if ( tmp_assattr_target_1 == NULL )
    {
        Py_DECREF( tmp_assattr_name_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 121;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__obj, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_name_1 );

        frame_function->f_lineno = 121;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_1 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_obj.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_obj,
            par_obj.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1___init___of_class_2_BagObj_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_obj = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_obj == key )
            {
                assert( _python_par_obj == NULL );
                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_obj, key ) == 1 )
            {
                assert( _python_par_obj == NULL );
                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_obj == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_obj = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_obj == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_obj };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1___init___of_class_2_BagObj_of_module_numpy$lib$npyio( self, _python_par_self, _python_par_obj );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_obj );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_2_BagObj_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_1___init___of_class_2_BagObj_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_2_BagObj_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___getattribute___of_class_2_BagObj_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_key )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_key; par_key.object = _python_par_key;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_called_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_c2a784cd2e29cecd87803fd08535398f, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried block of try/except
    tmp_source_name_1 = LOOKUP_BUILTIN( const_str_plain_object );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 124;
        goto try_except_handler_1;
    }
    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___getattribute__ );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 124;
        goto try_except_handler_1;
    }
    tmp_call_arg_element_1 = par_self.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 124;
        goto try_except_handler_1;
    }

    tmp_call_arg_element_2 = const_str_plain__obj;
    frame_function->f_lineno = 124;
    tmp_subscr_target_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_subscr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 124;
        goto try_except_handler_1;
    }
    tmp_subscr_subscript_1 = par_key.object;

    if ( tmp_subscr_subscript_1 == NULL )
    {
        Py_DECREF( tmp_subscr_target_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 124;
        goto try_except_handler_1;
    }

    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    Py_DECREF( tmp_subscr_target_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 124;
        goto try_except_handler_1;
    }
    goto frame_return_exit_1;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_KeyError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 125;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_make_exception_arg_1 = par_key.object;

    if ( tmp_make_exception_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 126;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 126;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_AttributeError, tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 126;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 126;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    goto branch_end_1;
    branch_no_1:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_1:;
    try_except_end_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_key.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_key,
            par_key.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_2___getattribute___of_class_2_BagObj_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_key = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__getattribute__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_key == key )
            {
                assert( _python_par_key == NULL );
                _python_par_key = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_key, key ) == 1 )
            {
                assert( _python_par_key == NULL );
                _python_par_key = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__getattribute__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_key != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_key = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_key == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_key = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_key == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_key };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2___getattribute___of_class_2_BagObj_of_module_numpy$lib$npyio( self, _python_par_self, _python_par_key );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_key );

    return NULL;
}

static PyObject *dparse_function_2___getattribute___of_class_2_BagObj_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_2___getattribute___of_class_2_BagObj_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___getattribute___of_class_2_BagObj_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_zipfile_factory_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_args; par_args.object = _python_par_args;
    PyObjectLocalVariable par_kwargs; par_kwargs.object = _python_par_kwargs;
    PyObjectLocalVariable var_zipfile;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_17fce30a2ac0539e646ad4b1197c4520, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_zipfile.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_zipfile,
            var_zipfile.object
        );

    }
    if ((par_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_args,
            par_args.object
        );

    }
    if ((par_kwargs.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_kwargs,
            par_kwargs.object
        );

    }
    frame_function->f_lineno = 129;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_zipfile, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 129;
        goto frame_exception_exit_1;
    }
    assert( var_zipfile.object == NULL );
    var_zipfile.object = tmp_assign_source_1;

    tmp_ass_subvalue_1 = Py_True;
    tmp_ass_subscribed_1 = par_kwargs.object;

    if ( tmp_ass_subscribed_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 130;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_1 = const_str_plain_allowZip64;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 130;
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = var_zipfile.object;

    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_ZipFile );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 131;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_args.object;

    if ( tmp_dircall_arg2_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5435 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 131;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg3_1 = par_kwargs.object;

    if ( tmp_dircall_arg3_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 131;
        goto frame_exception_exit_1;
    }

    tmp_return_value = impl_function_2_complex_call_helper_star_list_star_dict_of_module___internal__( tmp_dircall_arg1_1, INCREASE_REFCOUNT( tmp_dircall_arg2_1 ), INCREASE_REFCOUNT( tmp_dircall_arg3_1 ) );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 131;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_zipfile.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_zipfile,
            var_zipfile.object
        );

    }
    if ((par_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_args,
            par_args.object
        );

    }
    if ((par_kwargs.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kwargs,
            par_kwargs.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_3_zipfile_factory_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "zipfile_factory() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "zipfile_factory() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "zipfile_factory() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 0 )
    {
        _python_par_args = PyTuple_New( args_size - 0 );

        for( Py_ssize_t i = 0; i < args_size - 0; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[0+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( const_tuple_empty );
    }


    return impl_function_3_zipfile_factory_of_module_numpy$lib$npyio( self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_3_zipfile_factory_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_3_zipfile_factory_of_module_numpy$lib$npyio( self, MAKE_TUPLE( &args[ 0 ], size > 0 ? size-0 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_3_zipfile_factory_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_4_NpzFile_of_module_numpy$lib$npyio(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___doc__;
    PyObjectLocalVariable var___init__;
    PyObjectLocalVariable var___enter__;
    PyObjectLocalVariable var___exit__;
    PyObjectLocalVariable var_close;
    PyObjectLocalVariable var___del__;
    PyObjectLocalVariable var___getitem__;
    PyObjectLocalVariable var___iter__;
    PyObjectLocalVariable var_items;
    PyObjectLocalVariable var_iteritems;
    PyObjectLocalVariable var_keys;
    PyObjectLocalVariable var_iterkeys;
    PyObjectLocalVariable var___contains__;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_defaults_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_a8bee1fc2e5b3f40b8d64ca5454c9c61;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    tmp_assign_source_2 = const_str_digest_1eef2b14bc751a9f1863190eadb02530;
    assert( var___doc__.object == NULL );
    var___doc__.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_bfe9eef962a383861077fa9aaeb194d8, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_defaults_1 = const_tuple_false_tuple;
    tmp_assign_source_3 = MAKE_FUNCTION_function_1___init___of_class_4_NpzFile_of_module_numpy$lib$npyio( INCREASE_REFCOUNT( tmp_defaults_1 ) );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_3 );

        frame_function->f_lineno = 189;
        goto frame_exception_exit_1;
    }
    assert( var___init__.object == NULL );
    var___init__.object = tmp_assign_source_3;

    tmp_assign_source_4 = MAKE_FUNCTION_function_2___enter___of_class_4_NpzFile_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_4 );

        frame_function->f_lineno = 207;
        goto frame_exception_exit_1;
    }
    assert( var___enter__.object == NULL );
    var___enter__.object = tmp_assign_source_4;

    tmp_assign_source_5 = MAKE_FUNCTION_function_3___exit___of_class_4_NpzFile_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_5 );

        frame_function->f_lineno = 210;
        goto frame_exception_exit_1;
    }
    assert( var___exit__.object == NULL );
    var___exit__.object = tmp_assign_source_5;

    tmp_assign_source_6 = MAKE_FUNCTION_function_4_close_of_class_4_NpzFile_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_6 );

        frame_function->f_lineno = 213;
        goto frame_exception_exit_1;
    }
    assert( var_close.object == NULL );
    var_close.object = tmp_assign_source_6;

    tmp_assign_source_7 = MAKE_FUNCTION_function_5___del___of_class_4_NpzFile_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_7 );

        frame_function->f_lineno = 226;
        goto frame_exception_exit_1;
    }
    assert( var___del__.object == NULL );
    var___del__.object = tmp_assign_source_7;

    tmp_assign_source_8 = MAKE_FUNCTION_function_6___getitem___of_class_4_NpzFile_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_8 );

        frame_function->f_lineno = 229;
        goto frame_exception_exit_1;
    }
    assert( var___getitem__.object == NULL );
    var___getitem__.object = tmp_assign_source_8;

    tmp_assign_source_9 = MAKE_FUNCTION_function_7___iter___of_class_4_NpzFile_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_9 );

        frame_function->f_lineno = 257;
        goto frame_exception_exit_1;
    }
    assert( var___iter__.object == NULL );
    var___iter__.object = tmp_assign_source_9;

    tmp_assign_source_10 = MAKE_FUNCTION_function_8_items_of_class_4_NpzFile_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_10 );

        frame_function->f_lineno = 260;
        goto frame_exception_exit_1;
    }
    assert( var_items.object == NULL );
    var_items.object = tmp_assign_source_10;

    tmp_assign_source_11 = MAKE_FUNCTION_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_11 );

        frame_function->f_lineno = 267;
        goto frame_exception_exit_1;
    }
    assert( var_iteritems.object == NULL );
    var_iteritems.object = tmp_assign_source_11;

    tmp_assign_source_12 = MAKE_FUNCTION_function_10_keys_of_class_4_NpzFile_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_12 );

        frame_function->f_lineno = 272;
        goto frame_exception_exit_1;
    }
    assert( var_keys.object == NULL );
    var_keys.object = tmp_assign_source_12;

    tmp_assign_source_13 = MAKE_FUNCTION_function_11_iterkeys_of_class_4_NpzFile_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_13 );

        frame_function->f_lineno = 276;
        goto frame_exception_exit_1;
    }
    assert( var_iterkeys.object == NULL );
    var_iterkeys.object = tmp_assign_source_13;

    tmp_assign_source_14 = MAKE_FUNCTION_function_12___contains___of_class_4_NpzFile_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_14 );

        frame_function->f_lineno = 280;
        goto frame_exception_exit_1;
    }
    assert( var___contains__.object == NULL );
    var___contains__.object = tmp_assign_source_14;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var___enter__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___enter__,
            var___enter__.object
        );

    }
    if ((var___exit__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___exit__,
            var___exit__.object
        );

    }
    if ((var_close.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_close,
            var_close.object
        );

    }
    if ((var___del__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___del__,
            var___del__.object
        );

    }
    if ((var___getitem__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___getitem__,
            var___getitem__.object
        );

    }
    if ((var___iter__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___iter__,
            var___iter__.object
        );

    }
    if ((var_items.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_items,
            var_items.object
        );

    }
    if ((var_iteritems.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_iteritems,
            var_iteritems.object
        );

    }
    if ((var_keys.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_keys,
            var_keys.object
        );

    }
    if ((var_iterkeys.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_iterkeys,
            var_iterkeys.object
        );

    }
    if ((var___contains__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___contains__,
            var___contains__.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var___enter__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___enter__,
            var___enter__.object
        );

    }
    if ((var___exit__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___exit__,
            var___exit__.object
        );

    }
    if ((var_close.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_close,
            var_close.object
        );

    }
    if ((var___del__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___del__,
            var___del__.object
        );

    }
    if ((var___getitem__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___getitem__,
            var___getitem__.object
        );

    }
    if ((var___iter__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___iter__,
            var___iter__.object
        );

    }
    if ((var_items.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_items,
            var_items.object
        );

    }
    if ((var_iteritems.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_iteritems,
            var_iteritems.object
        );

    }
    if ((var_keys.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_keys,
            var_keys.object
        );

    }
    if ((var_iterkeys.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_iterkeys,
            var_iterkeys.object
        );

    }
    if ((var___contains__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___contains__,
            var___contains__.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}


static PyObject *impl_function_1___init___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_fid, PyObject *_python_par_own_fid )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_fid; par_fid.object = _python_par_fid;
    PyObjectLocalVariable par_own_fid; par_own_fid.object = _python_par_own_fid;
    PyObjectLocalVariable var__zip;
    PyObjectLocalVariable var_x;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_name_4;
    PyObject *tmp_assattr_name_5;
    PyObject *tmp_assattr_name_6;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assattr_target_4;
    PyObject *tmp_assattr_target_5;
    PyObject *tmp_assattr_target_6;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    Py_ssize_t tmp_slice_index_upper_1;
    PyObject *tmp_slice_source_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    int tmp_tried_lineno_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_f77ba8d29f7ad7a10f3dba54e4760cba, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_zipfile_factory );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_zipfile_factory );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 169794 ], 44, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 192;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = par_fid.object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67718 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 192;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 192;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 192;
        goto frame_exception_exit_1;
    }
    assert( var__zip.object == NULL );
    var__zip.object = tmp_assign_source_1;

    tmp_source_name_1 = var__zip.object;

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_namelist );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 193;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 193;
    tmp_assattr_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_assattr_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 193;
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_1 = par_self.object;

    if ( tmp_assattr_target_1 == NULL )
    {
        Py_DECREF( tmp_assattr_name_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 193;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__files, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_name_1 );

        frame_function->f_lineno = 193;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_1 );
    tmp_assattr_name_2 = PyList_New( 0 );
    tmp_assattr_target_2 = par_self.object;

    if ( tmp_assattr_target_2 == NULL )
    {
        Py_DECREF( tmp_assattr_name_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 194;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_files, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        frame_function->f_lineno = 194;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );
    tmp_source_name_2 = par_self.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 195;
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__files );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 195;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 195;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_2;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_3 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 195;
            goto try_finally_handler_1;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_3;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_3;
        Py_DECREF( old );
    }
    tmp_assign_source_4 = tmp_for_loop_1__iter_value.object;

    if (var_x.object == NULL)
    {
        var_x.object = INCREASE_REFCOUNT( tmp_assign_source_4 );
    }
    else
    {
        PyObject *old = var_x.object;
        var_x.object = INCREASE_REFCOUNT( tmp_assign_source_4 );
        Py_DECREF( old );
    }
    tmp_source_name_3 = var_x.object;

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_endswith );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 196;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_2 = const_str_digest_d79b7df98ba76bf9eb309893e11edcef;
    frame_function->f_lineno = 196;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 196;
        goto try_finally_handler_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        frame_function->f_lineno = 196;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_5 = par_self.object;

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 197;
        goto try_finally_handler_1;
    }

    tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_files );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 197;
        goto try_finally_handler_1;
    }
    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_append );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 197;
        goto try_finally_handler_1;
    }
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = -4;
    tmp_slice_source_1 = var_x.object;

    tmp_call_arg_element_3 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_call_arg_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_4 );

        frame_function->f_lineno = 197;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 197;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_3 );
    Py_DECREF( tmp_called_4 );
    Py_DECREF( tmp_call_arg_element_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 197;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_1;
    branch_no_1:;
    tmp_source_name_7 = par_self.object;

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 199;
        goto try_finally_handler_1;
    }

    tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_files );
    if ( tmp_source_name_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 199;
        goto try_finally_handler_1;
    }
    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_append );
    Py_DECREF( tmp_source_name_6 );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 199;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_4 = var_x.object;

    frame_function->f_lineno = 199;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 199;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_unused );
    branch_end_1:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 195;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_assattr_name_3 = var__zip.object;

    if ( tmp_assattr_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 169838 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 200;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_3 = par_self.object;

    if ( tmp_assattr_target_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 200;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_zip, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 200;
        goto frame_exception_exit_1;
    }
    tmp_called_6 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_BagObj );

    if (unlikely( tmp_called_6 == NULL ))
    {
        tmp_called_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BagObj );
    }

    if ( tmp_called_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 169888 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 201;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_5 = par_self.object;

    if ( tmp_call_arg_element_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 201;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 201;
    tmp_assattr_name_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_5 );
    if ( tmp_assattr_name_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 201;
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_4 = par_self.object;

    if ( tmp_assattr_target_4 == NULL )
    {
        Py_DECREF( tmp_assattr_name_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 201;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_f, tmp_assattr_name_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_name_4 );

        frame_function->f_lineno = 201;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_4 );
    tmp_cond_value_2 = par_own_fid.object;

    if ( tmp_cond_value_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 169923 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 202;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 202;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assattr_name_5 = par_fid.object;

    if ( tmp_assattr_name_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67718 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 203;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_5 = par_self.object;

    if ( tmp_assattr_target_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 203;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain_fid, tmp_assattr_name_5 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 203;
        goto frame_exception_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    tmp_assattr_name_6 = Py_None;
    tmp_assattr_target_6 = par_self.object;

    if ( tmp_assattr_target_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 205;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain_fid, tmp_assattr_name_6 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 205;
        goto frame_exception_exit_1;
    }
    branch_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var__zip.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__zip,
            var__zip.object
        );

    }
    if ((var_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            var_x.object
        );

    }
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_fid.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fid,
            par_fid.object
        );

    }
    if ((par_own_fid.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_own_fid,
            par_own_fid.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1___init___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_fid = NULL;
    PyObject *_python_par_own_fid = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_fid == key )
            {
                assert( _python_par_fid == NULL );
                _python_par_fid = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_own_fid == key )
            {
                assert( _python_par_own_fid == NULL );
                _python_par_own_fid = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_fid, key ) == 1 )
            {
                assert( _python_par_fid == NULL );
                _python_par_fid = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_own_fid, key ) == 1 )
            {
                assert( _python_par_own_fid == NULL );
                _python_par_own_fid = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_fid != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_fid = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_fid == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_fid = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_own_fid != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_own_fid = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_own_fid == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_own_fid = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_fid == NULL || _python_par_own_fid == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_fid, _python_par_own_fid };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1___init___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, _python_par_self, _python_par_fid, _python_par_own_fid );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_fid );
    Py_XDECREF( _python_par_own_fid );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_1___init___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___enter___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_5a4a7ed34e0de27e321d0b6fb1f9193a, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_return_value = par_self.object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 208;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_2___enter___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__enter__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__enter__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2___enter___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2___enter___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_2___enter___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___enter___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3___exit___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_exc_type, PyObject *_python_par_exc_value, PyObject *_python_par_traceback )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_exc_type; par_exc_type.object = _python_par_exc_type;
    PyObjectLocalVariable par_exc_value; par_exc_value.object = _python_par_exc_value;
    PyObjectLocalVariable par_traceback; par_traceback.object = _python_par_traceback;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_54f03a30f1e60e625386b44845b5e638, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 211;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_close );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 211;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 211;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 211;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_exc_type.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_exc_type,
            par_exc_type.object
        );

    }
    if ((par_exc_value.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_exc_value,
            par_exc_value.object
        );

    }
    if ((par_traceback.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_traceback,
            par_traceback.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_3___exit___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_exc_type = NULL;
    PyObject *_python_par_exc_value = NULL;
    PyObject *_python_par_traceback = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__exit__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_exc_type == key )
            {
                assert( _python_par_exc_type == NULL );
                _python_par_exc_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_exc_value == key )
            {
                assert( _python_par_exc_value == NULL );
                _python_par_exc_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_traceback == key )
            {
                assert( _python_par_traceback == NULL );
                _python_par_traceback = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_exc_type, key ) == 1 )
            {
                assert( _python_par_exc_type == NULL );
                _python_par_exc_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_exc_value, key ) == 1 )
            {
                assert( _python_par_exc_value == NULL );
                _python_par_exc_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_traceback, key ) == 1 )
            {
                assert( _python_par_traceback == NULL );
                _python_par_traceback = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__exit__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 4  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_exc_type != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_exc_type = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_exc_type == NULL )
    {
        if ( 1 + self->m_defaults_given >= 4  )
        {
            _python_par_exc_type = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_exc_value != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_exc_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_exc_value == NULL )
    {
        if ( 2 + self->m_defaults_given >= 4  )
        {
            _python_par_exc_value = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_traceback != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_traceback = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_traceback == NULL )
    {
        if ( 3 + self->m_defaults_given >= 4  )
        {
            _python_par_traceback = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_exc_type == NULL || _python_par_exc_value == NULL || _python_par_traceback == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_exc_type, _python_par_exc_value, _python_par_traceback };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_3___exit___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, _python_par_self, _python_par_exc_type, _python_par_exc_value, _python_par_traceback );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_exc_type );
    Py_XDECREF( _python_par_exc_value );
    Py_XDECREF( _python_par_traceback );

    return NULL;
}

static PyObject *dparse_function_3___exit___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4 )
    {
        return impl_function_3___exit___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3___exit___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_close_of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_frame_locals;
    bool tmp_isnot_1;
    bool tmp_isnot_2;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_7a23b547a4c6e2610ebe7d7a495ff53e, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 218;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_zip );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 218;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_1 != tmp_compare_right_1 );
    Py_DECREF( tmp_compare_left_1 );
    if (tmp_isnot_1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_3 = par_self.object;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 219;
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_zip );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 219;
        goto frame_exception_exit_1;
    }
    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_close );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 219;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 219;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 219;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assattr_name_1 = Py_None;
    tmp_assattr_target_1 = par_self.object;

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 220;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_zip, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 220;
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    tmp_source_name_4 = par_self.object;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 221;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_fid );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 221;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_2 = Py_None;
    tmp_isnot_2 = ( tmp_compare_left_2 != tmp_compare_right_2 );
    Py_DECREF( tmp_compare_left_2 );
    if (tmp_isnot_2)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_6 = par_self.object;

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 222;
        goto frame_exception_exit_1;
    }

    tmp_source_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_fid );
    if ( tmp_source_name_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 222;
        goto frame_exception_exit_1;
    }
    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_close );
    Py_DECREF( tmp_source_name_5 );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 222;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 222;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 222;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assattr_name_2 = Py_None;
    tmp_assattr_target_2 = par_self.object;

    if ( tmp_assattr_target_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 223;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_fid, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 223;
        goto frame_exception_exit_1;
    }
    branch_no_2:;
    tmp_assattr_name_3 = Py_None;
    tmp_assattr_target_3 = par_self.object;

    if ( tmp_assattr_target_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 224;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_f, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 224;
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_4_close_of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "close() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "close() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_4_close_of_class_4_NpzFile_of_module_numpy$lib$npyio( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_4_close_of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_4_close_of_class_4_NpzFile_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_close_of_class_4_NpzFile_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5___del___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_b474ea2cb3111757893cd9b7c4e504f2, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 227;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_close );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 227;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 227;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 227;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_5___del___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__del__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__del__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_5___del___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5___del___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_5___del___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5___del___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6___getitem___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_key )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_key; par_key.object = _python_par_key;
    PyObjectLocalVariable var_member;
    PyObjectLocalVariable var_bytes;
    PyObjectLocalVariable var_magic;
    PyObjectTempVariable tmp_inplace_assign_1__inplace_start;
    PyObjectTempVariable tmp_inplace_assign_1__inplace_end;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    int tmp_cmp_Eq_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_frame_locals;
    bool tmp_isnot_1;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    int tmp_tried_lineno_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_int_0;
    assert( var_member.object == NULL );
    var_member.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_0e64996581145e783188458b48ef3ddd, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_key.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 239;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 239;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__files );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 239;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    if ( tmp_cmp_In_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_1 );

        frame_function->f_lineno = 239;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_1 );
    if (tmp_cmp_In_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_assign_source_2 = const_int_pos_1;
    assert( var_member.object != NULL );
    {
        PyObject *old = var_member.object;
        var_member.object = INCREASE_REFCOUNT( tmp_assign_source_2 );
        Py_DECREF( old );
    }

    goto branch_end_1;
    branch_no_1:;
    tmp_compare_left_2 = par_key.object;

    if ( tmp_compare_left_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 241;
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = par_self.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 241;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_files );
    if ( tmp_compare_right_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 241;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    if ( tmp_cmp_In_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_2 );

        frame_function->f_lineno = 241;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_2 );
    if (tmp_cmp_In_2 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_3 = const_int_pos_1;
    assert( var_member.object != NULL );
    {
        PyObject *old = var_member.object;
        var_member.object = INCREASE_REFCOUNT( tmp_assign_source_3 );
        Py_DECREF( old );
    }

    tmp_assign_source_4 = par_key.object;

    if ( tmp_assign_source_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 243;
        goto frame_exception_exit_1;
    }

    assert( tmp_inplace_assign_1__inplace_start.object == NULL );
    tmp_inplace_assign_1__inplace_start.object = INCREASE_REFCOUNT( tmp_assign_source_4 );

    // Tried code
    tmp_binop_left_1 = tmp_inplace_assign_1__inplace_start.object;

    tmp_binop_right_1 = const_str_digest_d79b7df98ba76bf9eb309893e11edcef;
    tmp_assign_source_5 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_binop_left_1, tmp_binop_right_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 243;
        goto try_finally_handler_1;
    }
    assert( tmp_inplace_assign_1__inplace_end.object == NULL );
    tmp_inplace_assign_1__inplace_end.object = tmp_assign_source_5;

    tmp_compare_left_3 = tmp_inplace_assign_1__inplace_start.object;

    tmp_compare_right_3 = tmp_inplace_assign_1__inplace_end.object;

    tmp_isnot_1 = ( tmp_compare_left_3 != tmp_compare_right_3 );
    if (tmp_isnot_1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_6 = tmp_inplace_assign_1__inplace_end.object;

    if (par_key.object == NULL)
    {
        par_key.object = INCREASE_REFCOUNT( tmp_assign_source_6 );
    }
    else
    {
        PyObject *old = par_key.object;
        par_key.object = INCREASE_REFCOUNT( tmp_assign_source_6 );
        Py_DECREF( old );
    }
    branch_no_3:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    tmp_result = tmp_inplace_assign_1__inplace_start.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_inplace_assign_1__inplace_start.object );
        tmp_inplace_assign_1__inplace_start.object = NULL;
    }

    assert( tmp_result != false );
    Py_XDECREF( tmp_inplace_assign_1__inplace_end.object );
    tmp_inplace_assign_1__inplace_end.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    branch_no_2:;
    branch_end_1:;
    tmp_cond_value_1 = var_member.object;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 169976 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 244;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 244;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_source_name_4 = par_self.object;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 245;
        goto frame_exception_exit_1;
    }

    tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_zip );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 245;
        goto frame_exception_exit_1;
    }
    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_open );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 245;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = par_key.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 245;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 245;
    tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 245;
        goto frame_exception_exit_1;
    }
    assert( var_bytes.object == NULL );
    var_bytes.object = tmp_assign_source_7;

    tmp_source_name_5 = var_bytes.object;

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_read );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 246;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_format );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_format );
    }

    if ( tmp_source_name_6 == NULL )
    {
        Py_DECREF( tmp_called_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170028 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 246;
        goto frame_exception_exit_1;
    }

    tmp_len_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_MAGIC_PREFIX );
    if ( tmp_len_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_2 );

        frame_function->f_lineno = 246;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_2 = BUILTIN_LEN( tmp_len_arg_1 );
    Py_DECREF( tmp_len_arg_1 );
    if ( tmp_call_arg_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_2 );

        frame_function->f_lineno = 246;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 246;
    tmp_assign_source_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_2 );
    Py_DECREF( tmp_call_arg_element_2 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 246;
        goto frame_exception_exit_1;
    }
    assert( var_magic.object == NULL );
    var_magic.object = tmp_assign_source_8;

    tmp_source_name_7 = var_bytes.object;

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_close );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 247;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 247;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_3 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 247;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_compare_left_4 = var_magic.object;

    tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_format );

    if (unlikely( tmp_source_name_8 == NULL ))
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_format );
    }

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170028 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 248;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_MAGIC_PREFIX );
    if ( tmp_compare_right_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 248;
        goto frame_exception_exit_1;
    }
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_4 );

        frame_function->f_lineno = 248;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_4 );
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_source_name_10 = par_self.object;

    if ( tmp_source_name_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 249;
        goto frame_exception_exit_1;
    }

    tmp_source_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_zip );
    if ( tmp_source_name_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 249;
        goto frame_exception_exit_1;
    }
    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_open );
    Py_DECREF( tmp_source_name_9 );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 249;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_3 = par_key.object;

    if ( tmp_call_arg_element_3 == NULL )
    {
        Py_DECREF( tmp_called_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 249;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 249;
    tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_3 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 249;
        goto frame_exception_exit_1;
    }
    assert( var_bytes.object != NULL );
    {
        PyObject *old = var_bytes.object;
        var_bytes.object = tmp_assign_source_9;
        Py_DECREF( old );
    }

    tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_format );

    if (unlikely( tmp_source_name_11 == NULL ))
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_format );
    }

    if ( tmp_source_name_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170028 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 250;
        goto frame_exception_exit_1;
    }

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_read_array );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 250;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_4 = var_bytes.object;

    frame_function->f_lineno = 250;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 250;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_5;
    branch_no_5:;
    tmp_source_name_13 = par_self.object;

    if ( tmp_source_name_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 252;
        goto frame_exception_exit_1;
    }

    tmp_source_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_zip );
    if ( tmp_source_name_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 252;
        goto frame_exception_exit_1;
    }
    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_read );
    Py_DECREF( tmp_source_name_12 );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 252;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_5 = par_key.object;

    if ( tmp_call_arg_element_5 == NULL )
    {
        Py_DECREF( tmp_called_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 252;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 252;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_5 );
    Py_DECREF( tmp_called_6 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 252;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_end_5:;
    goto branch_end_4;
    branch_no_4:;
    tmp_binop_left_2 = const_str_digest_2344c0f53e4f39fd4fea65dd5dc2b6dd;
    tmp_binop_right_2 = par_key.object;

    if ( tmp_binop_right_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 254;
        goto frame_exception_exit_1;
    }

    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_2, tmp_binop_right_2 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 254;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 254;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_KeyError, tmp_make_exception_arg_1 );
    Py_DECREF( tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 254;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 254;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_end_4:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_member.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_member,
            var_member.object
        );

    }
    if ((var_bytes.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_bytes,
            var_bytes.object
        );

    }
    if ((var_magic.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_magic,
            var_magic.object
        );

    }
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_key.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_key,
            par_key.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_6___getitem___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_key = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_key == key )
            {
                assert( _python_par_key == NULL );
                _python_par_key = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_key, key ) == 1 )
            {
                assert( _python_par_key == NULL );
                _python_par_key = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__getitem__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_key != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_key = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_key == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_key = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_key == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_key };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_6___getitem___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, _python_par_self, _python_par_key );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_key );

    return NULL;
}

static PyObject *dparse_function_6___getitem___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_6___getitem___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6___getitem___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7___iter___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_bacaf3e31d79ecdba9196f09c0c5fd75, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 258;
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_files );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 258;
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 258;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_7___iter___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__iter__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__iter__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_7___iter___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_7___iter___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_7___iter___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7___iter___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_items_of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable var_f;
    PyObjectTempVariable tmp_listcontr_1__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_1__listcontr_result;
    PyObjectTempVariable tmp_listcontr_1__iter_value_0;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *tmp_append_to_1;
    PyObject *tmp_append_value_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_b51a5b68131fa4cf8fdf5127df19492f, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code
    tmp_return_value = NULL;
    // Tried code
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 265;
        goto try_finally_handler_2;
    }

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_files );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 265;
        goto try_finally_handler_2;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 265;
        goto try_finally_handler_2;
    }
    assert( tmp_listcontr_1__listcontr_iter.object == NULL );
    tmp_listcontr_1__listcontr_iter.object = tmp_assign_source_1;

    tmp_assign_source_2 = PyList_New( 0 );
    assert( tmp_listcontr_1__listcontr_result.object == NULL );
    tmp_listcontr_1__listcontr_result.object = tmp_assign_source_2;

    loop_start_1:;
    tmp_next_source_1 = tmp_listcontr_1__listcontr_iter.object;

    tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_3 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 265;
            goto try_finally_handler_2;
        }
    }

    if (tmp_listcontr_1__iter_value_0.object == NULL)
    {
        tmp_listcontr_1__iter_value_0.object = tmp_assign_source_3;
    }
    else
    {
        PyObject *old = tmp_listcontr_1__iter_value_0.object;
        tmp_listcontr_1__iter_value_0.object = tmp_assign_source_3;
        Py_DECREF( old );
    }
    tmp_assign_source_4 = tmp_listcontr_1__iter_value_0.object;

    if (var_f.object == NULL)
    {
        var_f.object = INCREASE_REFCOUNT( tmp_assign_source_4 );
    }
    else
    {
        PyObject *old = var_f.object;
        var_f.object = INCREASE_REFCOUNT( tmp_assign_source_4 );
        Py_DECREF( old );
    }
    tmp_append_to_1 = tmp_listcontr_1__listcontr_result.object;

    tmp_append_value_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = var_f.object;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_append_value_1, 0, tmp_tuple_element_1 );
    tmp_subscr_target_1 = par_self.object;

    if ( tmp_subscr_target_1 == NULL )
    {
        Py_DECREF( tmp_append_value_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 265;
        goto try_finally_handler_2;
    }

    tmp_subscr_subscript_1 = var_f.object;

    tmp_tuple_element_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_append_value_1 );

        frame_function->f_lineno = 265;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_append_value_1, 1, tmp_tuple_element_1 );
    tmp_res = PyList_Append( tmp_append_to_1, tmp_append_value_1 );
    Py_DECREF( tmp_append_value_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 265;
        goto try_finally_handler_2;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 265;
        goto try_finally_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    tmp_return_value = tmp_listcontr_1__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_1__iter_value_0.object );
    tmp_listcontr_1__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_1;
    }

    goto finally_end_1;
    finally_end_1:;
    Py_INCREF( tmp_return_value );
    goto try_finally_handler_start_1;
    try_finally_handler_start_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_1__listcontr_result.object );
    tmp_listcontr_1__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_1__listcontr_iter.object );
    tmp_listcontr_1__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto frame_exception_exit_1;
    }

    // Return value if any.
    if ( tmp_return_value != NULL )
    {
        goto frame_return_exit_1;
    }

    goto finally_end_2;
    finally_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_f.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_f,
            var_f.object
        );

    }
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_8_items_of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "items() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "items() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_8_items_of_class_4_NpzFile_of_module_numpy$lib$npyio( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_8_items_of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_8_items_of_class_4_NpzFile_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_items_of_class_4_NpzFile_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalVariable closure_self;
    PyObjectLocalVariable closure_f;
    PyObjectTempVariable closure_for_loop_1__for_iterator;
    PyObjectTempVariable closure_for_loop_1__iter_value;
};

static void _context_generator_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio_destructor( void *context_voidptr )
{
    _context_generator_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio_t *_python_context = (struct _context_generator_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio_t *)context_voidptr;

    delete _python_context;
}

#ifdef _NUITKA_MAKECONTEXT_INTS
static void function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio_context( int generator_address_1, int generator_address_2 )
{
    // Restore the pointer from ints should it be necessary, often it can be
    // directly received.
    int generator_addresses[2] = {
        generator_address_1,
        generator_address_2
    };

    Nuitka_GeneratorObject *generator = (Nuitka_GeneratorObject *)*(uintptr_t *)&generator_addresses[0];
#else
static void function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio_context( Nuitka_GeneratorObject *generator )
{
#endif

    assertObject( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Make context accessible if one is used.

    NUITKA_MAY_BE_UNUSED struct _context_generator_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio_t *_python_context = (_context_generator_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio_t *)generator->m_context;


    // Local variable inits
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    int tmp_tried_lineno_1;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    PyObject *tmp_yield_1;

    // Actual function code.
    PyFrameObject *frame_function = MAKE_FRAME( codeobj_84afe6edbdffb970df38359687f1689f, module_numpy$lib$npyio );

    Py_INCREF( frame_function );
    generator->m_frame = frame_function;
#if PYTHON_VERSION >= 340
    frame_function->f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->f_back );

    generator->m_frame->f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->f_back );

    PyThreadState_GET()->frame = generator->m_frame;

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Throwing into unstarted generators is possible. As they don't stand any
    // chance to deal with them, we might as well create traceback on the
    // outside,
    if ( generator->m_exception_type )
    {
        generator->m_yielded = NULL;

        exception_type = generator->m_exception_type;
        generator->m_exception_type = NULL;

        exception_value = generator->m_exception_value;
        generator->m_exception_value = NULL;

        exception_tb = generator->m_exception_tb;;
        generator->m_exception_tb = NULL;

        if (exception_tb == NULL)
        {
            goto frame_exception_exit_1;
        }
        else
        {
            goto function_exception_exit;
        }
    }

    tmp_source_name_1 = _python_context->closure_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 269;
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_files );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 269;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 269;
        goto frame_exception_exit_1;
    }
    assert( _python_context->closure_for_loop_1__for_iterator.object == NULL );
    _python_context->closure_for_loop_1__for_iterator.object = tmp_assign_source_1;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = _python_context->closure_for_loop_1__for_iterator.object;

    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_2 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 269;
            goto try_finally_handler_1;
        }
    }

    if (_python_context->closure_for_loop_1__iter_value.object == NULL)
    {
        _python_context->closure_for_loop_1__iter_value.object = tmp_assign_source_2;
    }
    else
    {
        PyObject *old = _python_context->closure_for_loop_1__iter_value.object;
        _python_context->closure_for_loop_1__iter_value.object = tmp_assign_source_2;
        Py_DECREF( old );
    }
    tmp_assign_source_3 = _python_context->closure_for_loop_1__iter_value.object;

    if (_python_context->closure_f.object == NULL)
    {
        _python_context->closure_f.object = INCREASE_REFCOUNT( tmp_assign_source_3 );
    }
    else
    {
        PyObject *old = _python_context->closure_f.object;
        _python_context->closure_f.object = INCREASE_REFCOUNT( tmp_assign_source_3 );
        Py_DECREF( old );
    }
    tmp_yield_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = _python_context->closure_f.object;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_yield_1, 0, tmp_tuple_element_1 );
    tmp_subscr_target_1 = _python_context->closure_self.object;

    if ( tmp_subscr_target_1 == NULL )
    {
        Py_DECREF( tmp_yield_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 270;
        goto try_finally_handler_1;
    }

    tmp_subscr_subscript_1 = _python_context->closure_f.object;

    tmp_tuple_element_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_1 );

        frame_function->f_lineno = 270;
        goto try_finally_handler_1;
    }
    PyTuple_SET_ITEM( tmp_yield_1, 1, tmp_tuple_element_1 );
    tmp_unused = YIELD( generator, tmp_yield_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 270;
        goto try_finally_handler_1;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 269;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( _python_context->closure_for_loop_1__iter_value.object );
    _python_context->closure_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( _python_context->closure_for_loop_1__for_iterator.object );
    _python_context->closure_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif

    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((_python_context->closure_f.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_f,
            _python_context->closure_f.object
        );

    }
    if ((_python_context->closure_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            _python_context->closure_self.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


#if PYTHON_VERSION > 300
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    Py_DECREF( frame_function );
    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    PyErr_Restore( INCREASE_REFCOUNT( PyExc_StopIteration ), NULL, NULL );

    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );

    // The above won't return, but we need to make it clear to the compiler
    // as well, or else it will complain and/or generate inferior code.
    assert(false);
    return;
function_exception_exit:
    assert( exception_type );
    assert( exception_tb );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );

}
static PyObject *impl_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // Create context if any
    struct _context_generator_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio_t *_python_context = new _context_generator_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio_t;

        PyObject *result = Nuitka_Generator_New(
            function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio_context,
            const_str_plain_iteritems,
            codeobj_84afe6edbdffb970df38359687f1689f,
            _python_context,
            _context_generator_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio_destructor
        );

    if (unlikely( result == NULL ))
    {
        PyErr_Format( PyExc_RuntimeError, "cannot create function iteritems" );
        return NULL;
    }

    // Copy to context parameter values and closured variables if any.
    _python_context->closure_self.object = _python_par_self;

    return result;
}
static PyObject *fparse_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "iteritems() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "iteritems() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_10_keys_of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_ffa72049d15f6d4e30d05cf7a74d3e1d, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 274;
        goto frame_exception_exit_1;
    }

    tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_files );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 274;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_10_keys_of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "keys() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "keys() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_10_keys_of_class_4_NpzFile_of_module_numpy$lib$npyio( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_10_keys_of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_10_keys_of_class_4_NpzFile_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_10_keys_of_class_4_NpzFile_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_11_iterkeys_of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_b9724683be823662c2182c02732795c7, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 278;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___iter__ );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 278;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 278;
    tmp_return_value = CALL_FUNCTION_NO_ARGS( tmp_called_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 278;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_11_iterkeys_of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "iterkeys() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "iterkeys() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_11_iterkeys_of_class_4_NpzFile_of_module_numpy$lib$npyio( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_11_iterkeys_of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_11_iterkeys_of_class_4_NpzFile_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_11_iterkeys_of_class_4_NpzFile_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_12___contains___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_key )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_key; par_key.object = _python_par_key;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_df0efc96e0513309fecde9eb92042cce, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_2 = par_self.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 281;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_files );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 281;
        goto frame_exception_exit_1;
    }
    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___contains__ );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 281;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = par_key.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 281;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 281;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 281;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_key.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_key,
            par_key.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_12___contains___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_key = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__contains__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_key == key )
            {
                assert( _python_par_key == NULL );
                _python_par_key = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_key, key ) == 1 )
            {
                assert( _python_par_key == NULL );
                _python_par_key = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__contains__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_key != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_key = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_key == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_key = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_key == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_key };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_12___contains___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, _python_par_self, _python_par_key );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_key );

    return NULL;
}

static PyObject *dparse_function_12___contains___of_class_4_NpzFile_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_12___contains___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_12___contains___of_class_4_NpzFile_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_load_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_file, PyObject *_python_par_mmap_mode )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_file; par_file.object = _python_par_file;
    PyObjectLocalVariable par_mmap_mode; par_mmap_mode.object = _python_par_mmap_mode;
    PyObjectLocalVariable var_gzip;
    PyObjectLocalVariable var_own_fid;
    PyObjectLocalVariable var_fid;
    PyObjectLocalVariable var__ZIP_PREFIX;
    PyObjectLocalVariable var_N;
    PyObjectLocalVariable var_magic;
    PyObjectLocalVariable var_tmp;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_kw_2;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_call_pos_2;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    int tmp_cmp_Eq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_open_filename_1;
    PyObject *tmp_open_mode_1;
    PyObject *tmp_raise_type_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    int tmp_tried_lineno_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_unary_arg_1;
    PyObject *tmp_unary_arg_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_2c06322e2c69e7d9aa63f3c2ce836007, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_gzip.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_gzip,
            var_gzip.object
        );

    }
    if ((var_own_fid.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_own_fid,
            var_own_fid.object
        );

    }
    if ((var_fid.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_fid,
            var_fid.object
        );

    }
    if ((var__ZIP_PREFIX.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain__ZIP_PREFIX,
            var__ZIP_PREFIX.object
        );

    }
    if ((var_N.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_N,
            var_N.object
        );

    }
    if ((var_magic.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_magic,
            var_magic.object
        );

    }
    if ((var_tmp.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_tmp,
            var_tmp.object
        );

    }
    if ((par_file.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_file,
            par_file.object
        );

    }
    if ((par_mmap_mode.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_mmap_mode,
            par_mmap_mode.object
        );

    }
    frame_function->f_lineno = 366;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_gzip, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 366;
        goto frame_exception_exit_1;
    }
    assert( var_gzip.object == NULL );
    var_gzip.object = tmp_assign_source_1;

    tmp_assign_source_2 = Py_False;
    assert( var_own_fid.object == NULL );
    var_own_fid.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    tmp_isinstance_inst_1 = par_file.object;

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 369;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_basestring );

    if (unlikely( tmp_isinstance_cls_1 == NULL ))
    {
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_basestring );
    }

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 68141 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 369;
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 369;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_open_filename_1 = par_file.object;

    if ( tmp_open_filename_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 370;
        goto frame_exception_exit_1;
    }

    tmp_open_mode_1 = const_str_plain_rb;
    tmp_assign_source_3 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 370;
        goto frame_exception_exit_1;
    }
    assert( var_fid.object == NULL );
    var_fid.object = tmp_assign_source_3;

    tmp_assign_source_4 = Py_True;
    assert( var_own_fid.object != NULL );
    {
        PyObject *old = var_own_fid.object;
        var_own_fid.object = INCREASE_REFCOUNT( tmp_assign_source_4 );
        Py_DECREF( old );
    }

    goto branch_end_1;
    branch_no_1:;
    tmp_isinstance_inst_2 = par_file.object;

    if ( tmp_isinstance_inst_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 372;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = var_gzip.object;

    tmp_isinstance_cls_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_GzipFile );
    if ( tmp_isinstance_cls_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 372;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    Py_DECREF( tmp_isinstance_cls_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 372;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_seek_gzip_factory );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_seek_gzip_factory );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170063 ], 46, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 373;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = par_file.object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 373;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 373;
    tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 373;
        goto frame_exception_exit_1;
    }
    assert( var_fid.object == NULL );
    var_fid.object = tmp_assign_source_5;

    goto branch_end_2;
    branch_no_2:;
    tmp_assign_source_6 = par_file.object;

    if ( tmp_assign_source_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 375;
        goto frame_exception_exit_1;
    }

    assert( var_fid.object == NULL );
    var_fid.object = INCREASE_REFCOUNT( tmp_assign_source_6 );

    branch_end_2:;
    branch_end_1:;
    // Tried code
    tmp_called_2 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_2 == NULL ))
    {
        tmp_called_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 379;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_2 = const_str_digest_10893fd7cff66dca193f658ca9438d15;
    frame_function->f_lineno = 379;
    tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 379;
        goto try_finally_handler_1;
    }
    assert( var__ZIP_PREFIX.object == NULL );
    var__ZIP_PREFIX.object = tmp_assign_source_7;

    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_format );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_format );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170028 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 380;
        goto try_finally_handler_1;
    }

    tmp_len_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_MAGIC_PREFIX );
    if ( tmp_len_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 380;
        goto try_finally_handler_1;
    }
    tmp_assign_source_8 = BUILTIN_LEN( tmp_len_arg_1 );
    Py_DECREF( tmp_len_arg_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 380;
        goto try_finally_handler_1;
    }
    assert( var_N.object == NULL );
    var_N.object = tmp_assign_source_8;

    tmp_source_name_3 = var_fid.object;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67718 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 381;
        goto try_finally_handler_1;
    }

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_read );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 381;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_3 = var_N.object;

    frame_function->f_lineno = 381;
    tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_3 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 381;
        goto try_finally_handler_1;
    }
    assert( var_magic.object == NULL );
    var_magic.object = tmp_assign_source_9;

    tmp_source_name_4 = var_fid.object;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67718 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 382;
        goto try_finally_handler_1;
    }

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_seek );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 382;
        goto try_finally_handler_1;
    }
    tmp_unary_arg_1 = var_N.object;

    tmp_call_arg_element_4 = UNARY_OPERATION( PyNumber_Negative, tmp_unary_arg_1 );
    if ( tmp_call_arg_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_4 );

        frame_function->f_lineno = 382;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_5 = const_int_pos_1;
    frame_function->f_lineno = 382;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_4, tmp_call_arg_element_4, tmp_call_arg_element_5 );
    Py_DECREF( tmp_called_4 );
    Py_DECREF( tmp_call_arg_element_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 382;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_5 = var_magic.object;

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_startswith );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 383;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_6 = var__ZIP_PREFIX.object;

    frame_function->f_lineno = 383;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_6 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 383;
        goto try_finally_handler_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        frame_function->f_lineno = 383;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_10 = var_own_fid.object;

    assert( var_tmp.object == NULL );
    var_tmp.object = INCREASE_REFCOUNT( tmp_assign_source_10 );

    tmp_assign_source_11 = Py_False;
    assert( var_own_fid.object != NULL );
    {
        PyObject *old = var_own_fid.object;
        var_own_fid.object = INCREASE_REFCOUNT( tmp_assign_source_11 );
        Py_DECREF( old );
    }

    tmp_called_6 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_NpzFile );

    if (unlikely( tmp_called_6 == NULL ))
    {
        tmp_called_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_NpzFile );
    }

    if ( tmp_called_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170109 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 388;
        goto try_finally_handler_1;
    }

    tmp_call_pos_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = var_fid.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67718 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 388;
        goto try_finally_handler_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    tmp_call_kw_1 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = var_tmp.object;

    tmp_dict_key_1 = const_str_plain_own_fid;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    frame_function->f_lineno = 388;
    tmp_return_value = CALL_FUNCTION( tmp_called_6, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 388;
        goto try_finally_handler_1;
    }
    goto try_finally_handler_start_1;
    goto branch_end_3;
    branch_no_3:;
    tmp_compare_left_1 = var_magic.object;

    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_format );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_format );
    }

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170028 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 389;
        goto try_finally_handler_1;
    }

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_MAGIC_PREFIX );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 389;
        goto try_finally_handler_1;
    }
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_1 );

        frame_function->f_lineno = 389;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_compare_right_1 );
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_cond_value_2 = par_mmap_mode.object;

    if ( tmp_cond_value_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170145 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 391;
        goto try_finally_handler_1;
    }

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 391;
        goto try_finally_handler_1;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_format );

    if (unlikely( tmp_source_name_7 == NULL ))
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_format );
    }

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170028 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 392;
        goto try_finally_handler_1;
    }

    tmp_called_7 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_open_memmap );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 392;
        goto try_finally_handler_1;
    }
    tmp_call_pos_2 = PyTuple_New( 1 );
    tmp_tuple_element_2 = par_file.object;

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_called_7 );
        Py_DECREF( tmp_call_pos_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 392;
        goto try_finally_handler_1;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_call_pos_2, 0, tmp_tuple_element_2 );
    tmp_call_kw_2 = _PyDict_NewPresized( 1 );
    tmp_dict_value_2 = par_mmap_mode.object;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_called_7 );
        Py_DECREF( tmp_call_pos_2 );
        Py_DECREF( tmp_call_kw_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170145 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 392;
        goto try_finally_handler_1;
    }

    tmp_dict_key_2 = const_str_plain_mode;
    PyDict_SetItem( tmp_call_kw_2, tmp_dict_key_2, tmp_dict_value_2 );
    frame_function->f_lineno = 392;
    tmp_return_value = CALL_FUNCTION( tmp_called_7, tmp_call_pos_2, tmp_call_kw_2 );
    Py_DECREF( tmp_called_7 );
    Py_DECREF( tmp_call_pos_2 );
    Py_DECREF( tmp_call_kw_2 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 392;
        goto try_finally_handler_1;
    }
    goto try_finally_handler_start_1;
    goto branch_end_5;
    branch_no_5:;
    tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_format );

    if (unlikely( tmp_source_name_8 == NULL ))
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_format );
    }

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170028 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 394;
        goto try_finally_handler_1;
    }

    tmp_called_8 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_read_array );
    if ( tmp_called_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 394;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_7 = var_fid.object;

    if ( tmp_call_arg_element_7 == NULL )
    {
        Py_DECREF( tmp_called_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67718 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 394;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 394;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_8, tmp_call_arg_element_7 );
    Py_DECREF( tmp_called_8 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 394;
        goto try_finally_handler_1;
    }
    goto try_finally_handler_start_1;
    branch_end_5:;
    goto branch_end_4;
    branch_no_4:;
    // Tried block of try/except
    tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_pickle );

    if (unlikely( tmp_source_name_9 == NULL ))
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_pickle );
    }

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71707 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 398;
        goto try_except_handler_1;
    }

    tmp_called_9 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_load );
    if ( tmp_called_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 398;
        goto try_except_handler_1;
    }
    tmp_call_arg_element_8 = var_fid.object;

    if ( tmp_call_arg_element_8 == NULL )
    {
        Py_DECREF( tmp_called_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67718 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 398;
        goto try_except_handler_1;
    }

    frame_function->f_lineno = 398;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_9, tmp_call_arg_element_8 );
    Py_DECREF( tmp_called_9 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 398;
        goto try_except_handler_1;
    }
    goto try_finally_handler_start_1;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_binop_left_1 = const_str_digest_26da8406ee02cdfd86f9e87f9283c147;
    tmp_unary_arg_2 = par_file.object;

    if ( tmp_unary_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 401;
        goto try_finally_handler_1;
    }

    tmp_binop_right_1 = UNARY_OPERATION( PyObject_Repr, tmp_unary_arg_2 );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 401;
        goto try_finally_handler_1;
    }
    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 401;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 400;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_IOError, tmp_make_exception_arg_1 );
    Py_DECREF( tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 400;
        goto try_finally_handler_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 400;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_1;
    try_except_end_1:;
    branch_end_4:;
    branch_end_3:;
    try_finally_handler_start_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    tmp_cond_value_3 = var_own_fid.object;

    if ( tmp_cond_value_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 169923 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 403;
        goto try_finally_handler_error_1;
    }

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 403;
        goto try_finally_handler_error_1;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_source_name_10 = var_fid.object;

    if ( tmp_source_name_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67718 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 404;
        goto try_finally_handler_error_1;
    }

    tmp_called_10 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_close );
    if ( tmp_called_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 404;
        goto try_finally_handler_error_1;
    }
    frame_function->f_lineno = 404;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_10 );
    Py_DECREF( tmp_called_10 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 404;
        goto try_finally_handler_error_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_6:;
    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    // Return value if any.
    if ( tmp_return_value != NULL )
    {
        goto frame_return_exit_1;
    }

    goto finally_end_1;
    try_finally_handler_error_1:;
    Py_XDECREF( exception_keeper_type_1 );exception_keeper_type_1 = NULL;
    Py_XDECREF( exception_keeper_value_1 );exception_keeper_value_1 = NULL;
    Py_XDECREF( exception_keeper_tb_1 );exception_keeper_tb_1 = NULL;
    goto frame_exception_exit_1;
    finally_end_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_gzip.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_gzip,
            var_gzip.object
        );

    }
    if ((var_own_fid.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_own_fid,
            var_own_fid.object
        );

    }
    if ((var_fid.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fid,
            var_fid.object
        );

    }
    if ((var__ZIP_PREFIX.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__ZIP_PREFIX,
            var__ZIP_PREFIX.object
        );

    }
    if ((var_N.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_N,
            var_N.object
        );

    }
    if ((var_magic.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_magic,
            var_magic.object
        );

    }
    if ((var_tmp.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_tmp,
            var_tmp.object
        );

    }
    if ((par_file.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_file,
            par_file.object
        );

    }
    if ((par_mmap_mode.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_mmap_mode,
            par_mmap_mode.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_5_load_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_file = NULL;
    PyObject *_python_par_mmap_mode = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "load() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_file == key )
            {
                assert( _python_par_file == NULL );
                _python_par_file = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_mmap_mode == key )
            {
                assert( _python_par_mmap_mode == NULL );
                _python_par_mmap_mode = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_file, key ) == 1 )
            {
                assert( _python_par_file == NULL );
                _python_par_file = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_mmap_mode, key ) == 1 )
            {
                assert( _python_par_mmap_mode == NULL );
                _python_par_mmap_mode = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "load() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_file != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_file = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_file == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_file = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_mmap_mode != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_mmap_mode = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_mmap_mode == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_mmap_mode = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_file == NULL || _python_par_mmap_mode == NULL ))
    {
        PyObject *values[] = { _python_par_file, _python_par_mmap_mode };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_5_load_of_module_numpy$lib$npyio( self, _python_par_file, _python_par_mmap_mode );

error_exit:;

    Py_XDECREF( _python_par_file );
    Py_XDECREF( _python_par_mmap_mode );

    return NULL;
}

static PyObject *dparse_function_5_load_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_5_load_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_load_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_save_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_file, PyObject *_python_par_arr )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_file; par_file.object = _python_par_file;
    PyObjectLocalVariable par_arr; par_arr.object = _python_par_arr;
    PyObjectLocalVariable var_own_fid;
    PyObjectLocalVariable var_fid;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_open_filename_1;
    PyObject *tmp_open_mode_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    int tmp_tried_lineno_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = Py_False;
    assert( var_own_fid.object == NULL );
    var_own_fid.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_4b3c2088275d5a314297ec25f63abbc1, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_isinstance_inst_1 = par_file.object;

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 443;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_basestring );

    if (unlikely( tmp_isinstance_cls_1 == NULL ))
    {
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_basestring );
    }

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 68141 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 443;
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 443;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = par_file.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 444;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_endswith );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 444;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_str_digest_d79b7df98ba76bf9eb309893e11edcef;
    frame_function->f_lineno = 444;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 444;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        frame_function->f_lineno = 444;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_no_2;
    }
    else
    {
        goto branch_yes_2;
    }
    branch_yes_2:;
    tmp_binop_left_1 = par_file.object;

    if ( tmp_binop_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 445;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_1 = const_str_digest_d79b7df98ba76bf9eb309893e11edcef;
    tmp_assign_source_2 = BINARY_OPERATION_ADD( tmp_binop_left_1, tmp_binop_right_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 445;
        goto frame_exception_exit_1;
    }
    if (par_file.object == NULL)
    {
        par_file.object = tmp_assign_source_2;
    }
    else
    {
        PyObject *old = par_file.object;
        par_file.object = tmp_assign_source_2;
        Py_DECREF( old );
    }
    branch_no_2:;
    tmp_open_filename_1 = par_file.object;

    if ( tmp_open_filename_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 446;
        goto frame_exception_exit_1;
    }

    tmp_open_mode_1 = const_str_plain_wb;
    tmp_assign_source_3 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 446;
        goto frame_exception_exit_1;
    }
    assert( var_fid.object == NULL );
    var_fid.object = tmp_assign_source_3;

    tmp_assign_source_4 = Py_True;
    assert( var_own_fid.object != NULL );
    {
        PyObject *old = var_own_fid.object;
        var_own_fid.object = INCREASE_REFCOUNT( tmp_assign_source_4 );
        Py_DECREF( old );
    }

    goto branch_end_1;
    branch_no_1:;
    tmp_assign_source_5 = par_file.object;

    if ( tmp_assign_source_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 449;
        goto frame_exception_exit_1;
    }

    assert( var_fid.object == NULL );
    var_fid.object = INCREASE_REFCOUNT( tmp_assign_source_5 );

    branch_end_1:;
    // Tried code
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 452;
        goto try_finally_handler_1;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_asanyarray );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 452;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_2 = par_arr.object;

    if ( tmp_call_arg_element_2 == NULL )
    {
        Py_DECREF( tmp_called_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 10450 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 452;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 452;
    tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 452;
        goto try_finally_handler_1;
    }
    if (par_arr.object == NULL)
    {
        par_arr.object = tmp_assign_source_6;
    }
    else
    {
        PyObject *old = par_arr.object;
        par_arr.object = tmp_assign_source_6;
        Py_DECREF( old );
    }
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_format );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_format );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170028 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 453;
        goto try_finally_handler_1;
    }

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_write_array );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 453;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_3 = var_fid.object;

    tmp_call_arg_element_4 = par_arr.object;

    frame_function->f_lineno = 453;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_3, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 453;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_unused );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    tmp_cond_value_2 = var_own_fid.object;

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 455;
        goto try_finally_handler_error_1;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_4 = var_fid.object;

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_close );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 456;
        goto try_finally_handler_error_1;
    }
    frame_function->f_lineno = 456;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_4 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 456;
        goto try_finally_handler_error_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_3:;
    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    try_finally_handler_error_1:;
    Py_XDECREF( exception_keeper_type_1 );exception_keeper_type_1 = NULL;
    Py_XDECREF( exception_keeper_value_1 );exception_keeper_value_1 = NULL;
    Py_XDECREF( exception_keeper_tb_1 );exception_keeper_tb_1 = NULL;
    goto frame_exception_exit_1;
    finally_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_own_fid.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_own_fid,
            var_own_fid.object
        );

    }
    if ((var_fid.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fid,
            var_fid.object
        );

    }
    if ((par_file.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_file,
            par_file.object
        );

    }
    if ((par_arr.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_arr,
            par_arr.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_6_save_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_file = NULL;
    PyObject *_python_par_arr = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "save() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_file == key )
            {
                assert( _python_par_file == NULL );
                _python_par_file = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_arr == key )
            {
                assert( _python_par_arr == NULL );
                _python_par_arr = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_file, key ) == 1 )
            {
                assert( _python_par_file == NULL );
                _python_par_file = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_arr, key ) == 1 )
            {
                assert( _python_par_arr == NULL );
                _python_par_arr = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "save() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_file != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_file = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_file == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_file = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_arr != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_arr = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_arr == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_arr = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_file == NULL || _python_par_arr == NULL ))
    {
        PyObject *values[] = { _python_par_file, _python_par_arr };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_6_save_of_module_numpy$lib$npyio( self, _python_par_file, _python_par_arr );

error_exit:;

    Py_XDECREF( _python_par_file );
    Py_XDECREF( _python_par_arr );

    return NULL;
}

static PyObject *dparse_function_6_save_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_6_save_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_save_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_savez_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_file, PyObject *_python_par_args, PyObject *_python_par_kwds )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_file; par_file.object = _python_par_file;
    PyObjectLocalVariable par_args; par_args.object = _python_par_args;
    PyObjectLocalVariable par_kwds; par_kwds.object = _python_par_kwds;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_71445539a828cd7de4536c198ea1cbee, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__savez );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__savez );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170200 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 533;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = par_file.object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 533;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_2 = par_args.object;

    if ( tmp_call_arg_element_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5435 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 533;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_3 = par_kwds.object;

    if ( tmp_call_arg_element_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 63043 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 533;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_4 = Py_False;
    frame_function->f_lineno = 533;
    tmp_unused = CALL_FUNCTION_WITH_ARGS4( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 533;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_file.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_file,
            par_file.object
        );

    }
    if ((par_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_args,
            par_args.object
        );

    }
    if ((par_kwds.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kwds,
            par_kwds.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_7_savez_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_file = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwds = NULL;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwds = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwds = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "savez() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwds, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "savez() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwds = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwds = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "savez() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwds, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwds = PyDict_New();
        }
    }

    // Check if argument file was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwds, const_str_plain_file );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_file == NULL );

            _python_par_file = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwds, const_str_plain_file );

            kw_found += 1;
        }
    }

    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_file != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_file = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_file == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_file = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_file == NULL ))
    {
        PyObject *values[] = { _python_par_file };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( const_tuple_empty );
    }


    return impl_function_7_savez_of_module_numpy$lib$npyio( self, _python_par_file, _python_par_args, _python_par_kwds );

error_exit:;

    Py_XDECREF( _python_par_file );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwds );

    return NULL;
}

static PyObject *dparse_function_7_savez_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_7_savez_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_7_savez_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_savez_compressed_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_file, PyObject *_python_par_args, PyObject *_python_par_kwds )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_file; par_file.object = _python_par_file;
    PyObjectLocalVariable par_args; par_args.object = _python_par_args;
    PyObjectLocalVariable par_kwds; par_kwds.object = _python_par_kwds;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_af8337516684945ff46aa1c0ec911575, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__savez );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__savez );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170200 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 558;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = par_file.object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 558;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_2 = par_args.object;

    if ( tmp_call_arg_element_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5435 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 558;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_3 = par_kwds.object;

    if ( tmp_call_arg_element_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 63043 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 558;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_4 = Py_True;
    frame_function->f_lineno = 558;
    tmp_unused = CALL_FUNCTION_WITH_ARGS4( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 558;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_file.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_file,
            par_file.object
        );

    }
    if ((par_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_args,
            par_args.object
        );

    }
    if ((par_kwds.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kwds,
            par_kwds.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_8_savez_compressed_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_file = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwds = NULL;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwds = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwds = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "savez_compressed() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwds, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "savez_compressed() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwds = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwds = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "savez_compressed() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwds, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwds = PyDict_New();
        }
    }

    // Check if argument file was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwds, const_str_plain_file );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_file == NULL );

            _python_par_file = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwds, const_str_plain_file );

            kw_found += 1;
        }
    }

    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_file != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_file = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_file == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_file = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_file == NULL ))
    {
        PyObject *values[] = { _python_par_file };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( const_tuple_empty );
    }


    return impl_function_8_savez_compressed_of_module_numpy$lib$npyio( self, _python_par_file, _python_par_args, _python_par_kwds );

error_exit:;

    Py_XDECREF( _python_par_file );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwds );

    return NULL;
}

static PyObject *dparse_function_8_savez_compressed_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_8_savez_compressed_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_8_savez_compressed_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9__savez_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_file, PyObject *_python_par_args, PyObject *_python_par_kwds, PyObject *_python_par_compress )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_file; par_file.object = _python_par_file;
    PyObjectLocalVariable par_args; par_args.object = _python_par_args;
    PyObjectLocalVariable par_kwds; par_kwds.object = _python_par_kwds;
    PyObjectLocalVariable par_compress; par_compress.object = _python_par_compress;
    PyObjectLocalVariable var_zipfile;
    PyObjectLocalVariable var_tempfile;
    PyObjectLocalVariable var_namedict;
    PyObjectLocalVariable var_i;
    PyObjectLocalVariable var_val;
    PyObjectLocalVariable var_key;
    PyObjectLocalVariable var_compression;
    PyObjectLocalVariable var_zip;
    PyObjectLocalVariable var_fd;
    PyObjectLocalVariable var_tmpfile;
    PyObjectLocalVariable var_fname;
    PyObjectLocalVariable var_fid;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_tuple_unpack_2__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_2__element_1;
    PyObjectTempVariable tmp_tuple_unpack_2__element_2;
    PyObjectTempVariable tmp_for_loop_2__for_iterator;
    PyObjectTempVariable tmp_for_loop_2__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_3__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_3__element_1;
    PyObjectTempVariable tmp_tuple_unpack_3__element_2;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_left_3;
    PyObject *tmp_binop_left_4;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_binop_right_3;
    PyObject *tmp_binop_right_4;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_kw_2;
    PyObject *tmp_call_kw_3;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_call_pos_2;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    PyObject *tmp_called_11;
    PyObject *tmp_called_12;
    PyObject *tmp_called_13;
    PyObject *tmp_called_14;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_locals_2;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iterator_attempt_1;
    PyObject *tmp_iterator_attempt_2;
    PyObject *tmp_iterator_attempt_3;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_iterator_name_2;
    PyObject *tmp_iterator_name_3;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_open_filename_1;
    PyObject *tmp_open_mode_1;
    PyObject *tmp_raise_type_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    int tmp_tried_lineno_4;
    int tmp_tried_lineno_5;
    int tmp_tried_lineno_6;
    int tmp_tried_lineno_7;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    PyObject *tmp_unpack_4;
    PyObject *tmp_unpack_5;
    PyObject *tmp_unpack_6;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_88d889a664031ebe51555b6371017b5b, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_zipfile.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_zipfile,
            var_zipfile.object
        );

    }
    if ((var_tempfile.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_tempfile,
            var_tempfile.object
        );

    }
    if ((var_namedict.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_namedict,
            var_namedict.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((var_key.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_key,
            var_key.object
        );

    }
    if ((var_compression.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_compression,
            var_compression.object
        );

    }
    if ((var_zip.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_zip,
            var_zip.object
        );

    }
    if ((var_fd.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_fd,
            var_fd.object
        );

    }
    if ((var_tmpfile.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_tmpfile,
            var_tmpfile.object
        );

    }
    if ((var_fname.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_fname,
            var_fname.object
        );

    }
    if ((var_fid.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_fid,
            var_fid.object
        );

    }
    if ((par_file.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_file,
            par_file.object
        );

    }
    if ((par_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_args,
            par_args.object
        );

    }
    if ((par_kwds.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_kwds,
            par_kwds.object
        );

    }
    if ((par_compress.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_compress,
            par_compress.object
        );

    }
    frame_function->f_lineno = 563;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_zipfile, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 563;
        goto frame_exception_exit_1;
    }
    assert( var_zipfile.object == NULL );
    var_zipfile.object = tmp_assign_source_1;

    tmp_import_globals_2 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    tmp_import_locals_2 = PyDict_New();
    if ((var_zipfile.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_zipfile,
            var_zipfile.object
        );

    }
    if ((var_tempfile.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_tempfile,
            var_tempfile.object
        );

    }
    if ((var_namedict.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_namedict,
            var_namedict.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((var_key.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_key,
            var_key.object
        );

    }
    if ((var_compression.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_compression,
            var_compression.object
        );

    }
    if ((var_zip.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_zip,
            var_zip.object
        );

    }
    if ((var_fd.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_fd,
            var_fd.object
        );

    }
    if ((var_tmpfile.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_tmpfile,
            var_tmpfile.object
        );

    }
    if ((var_fname.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_fname,
            var_fname.object
        );

    }
    if ((var_fid.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_fid,
            var_fid.object
        );

    }
    if ((par_file.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_file,
            par_file.object
        );

    }
    if ((par_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_args,
            par_args.object
        );

    }
    if ((par_kwds.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_kwds,
            par_kwds.object
        );

    }
    if ((par_compress.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_compress,
            par_compress.object
        );

    }
    frame_function->f_lineno = 565;
    tmp_assign_source_2 = IMPORT_MODULE( const_str_plain_tempfile, tmp_import_globals_2, tmp_import_locals_2, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 565;
        goto frame_exception_exit_1;
    }
    assert( var_tempfile.object == NULL );
    var_tempfile.object = tmp_assign_source_2;

    tmp_isinstance_inst_1 = par_file.object;

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 567;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_basestring );

    if (unlikely( tmp_isinstance_cls_1 == NULL ))
    {
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_basestring );
    }

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 68141 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 567;
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 567;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = par_file.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 568;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_endswith );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 568;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_str_digest_f6a290c3ba9b033c43d9ef045a4fcc7b;
    frame_function->f_lineno = 568;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 568;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        frame_function->f_lineno = 568;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_no_2;
    }
    else
    {
        goto branch_yes_2;
    }
    branch_yes_2:;
    tmp_binop_left_1 = par_file.object;

    if ( tmp_binop_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 569;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_1 = const_str_digest_f6a290c3ba9b033c43d9ef045a4fcc7b;
    tmp_assign_source_3 = BINARY_OPERATION_ADD( tmp_binop_left_1, tmp_binop_right_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 569;
        goto frame_exception_exit_1;
    }
    if (par_file.object == NULL)
    {
        par_file.object = tmp_assign_source_3;
    }
    else
    {
        PyObject *old = par_file.object;
        par_file.object = tmp_assign_source_3;
        Py_DECREF( old );
    }
    branch_no_2:;
    branch_no_1:;
    tmp_assign_source_4 = par_kwds.object;

    if ( tmp_assign_source_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 63043 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 571;
        goto frame_exception_exit_1;
    }

    assert( var_namedict.object == NULL );
    var_namedict.object = INCREASE_REFCOUNT( tmp_assign_source_4 );

    tmp_called_2 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 572;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_2 = par_args.object;

    if ( tmp_call_arg_element_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5435 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 572;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 572;
    tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 572;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_5 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 572;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_5;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_6 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_6 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 572;
            goto try_finally_handler_1;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_6;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_6;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_2 = tmp_for_loop_1__iter_value.object;

    tmp_assign_source_7 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 572;
        goto try_finally_handler_2;
    }
    if (tmp_tuple_unpack_1__source_iter.object == NULL)
    {
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_7;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter.object;
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_7;
        Py_DECREF( old );
    }
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_8 = UNPACK_PARAMETER_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_8 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 572;
        goto try_finally_handler_2;
    }
    if (tmp_tuple_unpack_1__element_1.object == NULL)
    {
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_8;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_1.object;
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_8;
        Py_DECREF( old );
    }
    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_9 = UNPACK_PARAMETER_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_9 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 572;
        goto try_finally_handler_2;
    }
    if (tmp_tuple_unpack_1__element_2.object == NULL)
    {
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_9;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_2.object;
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_9;
        Py_DECREF( old );
    }
    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_1 ); assert( PyIter_Check( tmp_iterator_name_1 ) );

    tmp_iterator_attempt_1 = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt_1 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_2;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_1 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_2;
    }
    tmp_assign_source_10 = tmp_tuple_unpack_1__element_1.object;

    if (var_i.object == NULL)
    {
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_10 );
    }
    else
    {
        PyObject *old = var_i.object;
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_10 );
        Py_DECREF( old );
    }
    tmp_assign_source_11 = tmp_tuple_unpack_1__element_2.object;

    if (var_val.object == NULL)
    {
        var_val.object = INCREASE_REFCOUNT( tmp_assign_source_11 );
    }
    else
    {
        PyObject *old = var_val.object;
        var_val.object = INCREASE_REFCOUNT( tmp_assign_source_11 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter.object );
    tmp_tuple_unpack_1__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1.object );
    tmp_tuple_unpack_1__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2.object );
    tmp_tuple_unpack_1__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_binop_left_2 = const_str_digest_f2ec8d21648931e40e43cf2dcb1591a1;
    tmp_binop_right_2 = var_i.object;

    if ( tmp_binop_right_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 573;
        goto try_finally_handler_1;
    }

    tmp_assign_source_12 = BINARY_OPERATION_REMAINDER( tmp_binop_left_2, tmp_binop_right_2 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 573;
        goto try_finally_handler_1;
    }
    if (var_key.object == NULL)
    {
        var_key.object = tmp_assign_source_12;
    }
    else
    {
        PyObject *old = var_key.object;
        var_key.object = tmp_assign_source_12;
        Py_DECREF( old );
    }
    tmp_compare_left_1 = var_key.object;

    tmp_source_name_2 = var_namedict.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170235 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 574;
        goto try_finally_handler_1;
    }

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_keys );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 574;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 574;
    tmp_compare_right_1 = CALL_FUNCTION_NO_ARGS( tmp_called_3 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 574;
        goto try_finally_handler_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    if ( tmp_cmp_In_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_1 );

        frame_function->f_lineno = 574;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_compare_right_1 );
    if (tmp_cmp_In_1 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_binop_left_3 = const_str_digest_c2eb1af041addaab580cda864e6925b9;
    tmp_binop_right_3 = var_key.object;

    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_3, tmp_binop_right_3 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 575;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 575;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, tmp_make_exception_arg_1 );
    Py_DECREF( tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 575;
        goto try_finally_handler_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 575;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_1;
    branch_no_3:;
    tmp_ass_subvalue_1 = var_val.object;

    if ( tmp_ass_subvalue_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28580 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 576;
        goto try_finally_handler_1;
    }

    tmp_ass_subscribed_1 = var_namedict.object;

    if ( tmp_ass_subscribed_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170235 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 576;
        goto try_finally_handler_1;
    }

    tmp_ass_subscript_1 = var_key.object;

    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 576;
        goto try_finally_handler_1;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 572;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto frame_exception_exit_1;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_cond_value_2 = par_compress.object;

    if ( tmp_cond_value_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 64510 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 578;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 578;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_source_name_3 = var_zipfile.object;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170289 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 579;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_13 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_ZIP_DEFLATED );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 579;
        goto frame_exception_exit_1;
    }
    assert( var_compression.object == NULL );
    var_compression.object = tmp_assign_source_13;

    goto branch_end_4;
    branch_no_4:;
    tmp_source_name_4 = var_zipfile.object;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170289 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 581;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_14 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_ZIP_STORED );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 581;
        goto frame_exception_exit_1;
    }
    assert( var_compression.object == NULL );
    var_compression.object = tmp_assign_source_14;

    branch_end_4:;
    tmp_called_4 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_zipfile_factory );

    if (unlikely( tmp_called_4 == NULL ))
    {
        tmp_called_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_zipfile_factory );
    }

    if ( tmp_called_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 169794 ], 44, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 583;
        goto frame_exception_exit_1;
    }

    tmp_call_pos_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_file.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 583;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    tmp_call_kw_1 = _PyDict_NewPresized( 2 );
    tmp_dict_value_1 = const_str_plain_w;
    tmp_dict_key_1 = const_str_plain_mode;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    tmp_dict_value_2 = var_compression.object;

    tmp_dict_key_2 = const_str_plain_compression;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_2, tmp_dict_value_2 );
    frame_function->f_lineno = 583;
    tmp_assign_source_15 = CALL_FUNCTION( tmp_called_4, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 583;
        goto frame_exception_exit_1;
    }
    assert( var_zip.object == NULL );
    var_zip.object = tmp_assign_source_15;

    // Tried code
    tmp_source_name_5 = var_tempfile.object;

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 147280 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 586;
        goto try_finally_handler_3;
    }

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_mkstemp );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 586;
        goto try_finally_handler_3;
    }
    tmp_call_kw_2 = PyDict_Copy( const_dict_46d6714f0f9e5bc216d813f2885cf823 );
    frame_function->f_lineno = 586;
    tmp_iter_arg_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_5, tmp_call_kw_2 );
    Py_DECREF( tmp_called_5 );
    Py_DECREF( tmp_call_kw_2 );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 586;
        goto try_finally_handler_3;
    }
    tmp_assign_source_16 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 586;
        goto try_finally_handler_3;
    }
    assert( tmp_tuple_unpack_2__source_iter.object == NULL );
    tmp_tuple_unpack_2__source_iter.object = tmp_assign_source_16;

    tmp_unpack_3 = tmp_tuple_unpack_2__source_iter.object;

    tmp_assign_source_17 = UNPACK_PARAMETER_NEXT( tmp_unpack_3, 0 );
    if ( tmp_assign_source_17 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 586;
        goto try_finally_handler_3;
    }
    assert( tmp_tuple_unpack_2__element_1.object == NULL );
    tmp_tuple_unpack_2__element_1.object = tmp_assign_source_17;

    tmp_unpack_4 = tmp_tuple_unpack_2__source_iter.object;

    tmp_assign_source_18 = UNPACK_PARAMETER_NEXT( tmp_unpack_4, 1 );
    if ( tmp_assign_source_18 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 586;
        goto try_finally_handler_3;
    }
    assert( tmp_tuple_unpack_2__element_2.object == NULL );
    tmp_tuple_unpack_2__element_2.object = tmp_assign_source_18;

    tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_2 ); assert( PyIter_Check( tmp_iterator_name_2 ) );

    tmp_iterator_attempt_2 = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

    if (likely( tmp_iterator_attempt_2 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_3;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_2 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_3;
    }
    tmp_assign_source_19 = tmp_tuple_unpack_2__element_1.object;

    assert( var_fd.object == NULL );
    var_fd.object = INCREASE_REFCOUNT( tmp_assign_source_19 );

    tmp_assign_source_20 = tmp_tuple_unpack_2__element_2.object;

    assert( var_tmpfile.object == NULL );
    var_tmpfile.object = INCREASE_REFCOUNT( tmp_assign_source_20 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_2__source_iter.object );
    tmp_tuple_unpack_2__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_1.object );
    tmp_tuple_unpack_2__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2.object );
    tmp_tuple_unpack_2__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto frame_exception_exit_1;
    }

    goto finally_end_3;
    finally_end_3:;
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6460 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 587;
        goto frame_exception_exit_1;
    }

    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_close );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 587;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_3 = var_fd.object;

    if ( tmp_call_arg_element_3 == NULL )
    {
        Py_DECREF( tmp_called_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 77834 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 587;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 587;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_3 );
    Py_DECREF( tmp_called_6 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 587;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code
    tmp_source_name_7 = var_namedict.object;

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170235 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 589;
        goto try_finally_handler_4;
    }

    tmp_called_7 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_items );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 589;
        goto try_finally_handler_4;
    }
    frame_function->f_lineno = 589;
    tmp_iter_arg_4 = CALL_FUNCTION_NO_ARGS( tmp_called_7 );
    Py_DECREF( tmp_called_7 );
    if ( tmp_iter_arg_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 589;
        goto try_finally_handler_4;
    }
    tmp_assign_source_21 = MAKE_ITERATOR( tmp_iter_arg_4 );
    Py_DECREF( tmp_iter_arg_4 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 589;
        goto try_finally_handler_4;
    }
    assert( tmp_for_loop_2__for_iterator.object == NULL );
    tmp_for_loop_2__for_iterator.object = tmp_assign_source_21;

    // Tried code
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator.object;

    tmp_assign_source_22 = ITERATOR_NEXT( tmp_next_source_2 );
    if (tmp_assign_source_22 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_2;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 589;
            goto try_finally_handler_5;
        }
    }

    if (tmp_for_loop_2__iter_value.object == NULL)
    {
        tmp_for_loop_2__iter_value.object = tmp_assign_source_22;
    }
    else
    {
        PyObject *old = tmp_for_loop_2__iter_value.object;
        tmp_for_loop_2__iter_value.object = tmp_assign_source_22;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_5 = tmp_for_loop_2__iter_value.object;

    tmp_assign_source_23 = MAKE_ITERATOR( tmp_iter_arg_5 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 589;
        goto try_finally_handler_6;
    }
    if (tmp_tuple_unpack_3__source_iter.object == NULL)
    {
        tmp_tuple_unpack_3__source_iter.object = tmp_assign_source_23;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_3__source_iter.object;
        tmp_tuple_unpack_3__source_iter.object = tmp_assign_source_23;
        Py_DECREF( old );
    }
    tmp_unpack_5 = tmp_tuple_unpack_3__source_iter.object;

    tmp_assign_source_24 = UNPACK_PARAMETER_NEXT( tmp_unpack_5, 0 );
    if ( tmp_assign_source_24 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 589;
        goto try_finally_handler_6;
    }
    if (tmp_tuple_unpack_3__element_1.object == NULL)
    {
        tmp_tuple_unpack_3__element_1.object = tmp_assign_source_24;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_3__element_1.object;
        tmp_tuple_unpack_3__element_1.object = tmp_assign_source_24;
        Py_DECREF( old );
    }
    tmp_unpack_6 = tmp_tuple_unpack_3__source_iter.object;

    tmp_assign_source_25 = UNPACK_PARAMETER_NEXT( tmp_unpack_6, 1 );
    if ( tmp_assign_source_25 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 589;
        goto try_finally_handler_6;
    }
    if (tmp_tuple_unpack_3__element_2.object == NULL)
    {
        tmp_tuple_unpack_3__element_2.object = tmp_assign_source_25;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_3__element_2.object;
        tmp_tuple_unpack_3__element_2.object = tmp_assign_source_25;
        Py_DECREF( old );
    }
    tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_3 ); assert( PyIter_Check( tmp_iterator_name_3 ) );

    tmp_iterator_attempt_3 = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

    if (likely( tmp_iterator_attempt_3 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_6;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_3 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_6;
    }
    tmp_assign_source_26 = tmp_tuple_unpack_3__element_1.object;

    if (var_key.object == NULL)
    {
        var_key.object = INCREASE_REFCOUNT( tmp_assign_source_26 );
    }
    else
    {
        PyObject *old = var_key.object;
        var_key.object = INCREASE_REFCOUNT( tmp_assign_source_26 );
        Py_DECREF( old );
    }
    tmp_assign_source_27 = tmp_tuple_unpack_3__element_2.object;

    if (var_val.object == NULL)
    {
        var_val.object = INCREASE_REFCOUNT( tmp_assign_source_27 );
    }
    else
    {
        PyObject *old = var_val.object;
        var_val.object = INCREASE_REFCOUNT( tmp_assign_source_27 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_4 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_3__source_iter.object );
    tmp_tuple_unpack_3__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_1.object );
    tmp_tuple_unpack_3__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_2.object );
    tmp_tuple_unpack_3__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_4;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto try_finally_handler_5;
    }

    goto finally_end_4;
    finally_end_4:;
    tmp_binop_left_4 = var_key.object;

    if ( tmp_binop_left_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 590;
        goto try_finally_handler_5;
    }

    tmp_binop_right_4 = const_str_digest_d79b7df98ba76bf9eb309893e11edcef;
    tmp_assign_source_28 = BINARY_OPERATION_ADD( tmp_binop_left_4, tmp_binop_right_4 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 590;
        goto try_finally_handler_5;
    }
    if (var_fname.object == NULL)
    {
        var_fname.object = tmp_assign_source_28;
    }
    else
    {
        PyObject *old = var_fname.object;
        var_fname.object = tmp_assign_source_28;
        Py_DECREF( old );
    }
    tmp_open_filename_1 = var_tmpfile.object;

    if ( tmp_open_filename_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 100842 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 591;
        goto try_finally_handler_5;
    }

    tmp_open_mode_1 = const_str_plain_wb;
    tmp_assign_source_29 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 591;
        goto try_finally_handler_5;
    }
    if (var_fid.object == NULL)
    {
        var_fid.object = tmp_assign_source_29;
    }
    else
    {
        PyObject *old = var_fid.object;
        var_fid.object = tmp_assign_source_29;
        Py_DECREF( old );
    }
    // Tried code
    tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_format );

    if (unlikely( tmp_source_name_8 == NULL ))
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_format );
    }

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170028 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 593;
        goto try_finally_handler_7;
    }

    tmp_called_8 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_write_array );
    if ( tmp_called_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 593;
        goto try_finally_handler_7;
    }
    tmp_call_arg_element_4 = var_fid.object;

    tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_9 == NULL ))
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_9 == NULL )
    {
        Py_DECREF( tmp_called_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 593;
        goto try_finally_handler_7;
    }

    tmp_called_9 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_asanyarray );
    if ( tmp_called_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_8 );

        frame_function->f_lineno = 593;
        goto try_finally_handler_7;
    }
    tmp_call_arg_element_6 = var_val.object;

    if ( tmp_call_arg_element_6 == NULL )
    {
        Py_DECREF( tmp_called_8 );
        Py_DECREF( tmp_called_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28580 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 593;
        goto try_finally_handler_7;
    }

    frame_function->f_lineno = 593;
    tmp_call_arg_element_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_9, tmp_call_arg_element_6 );
    Py_DECREF( tmp_called_9 );
    if ( tmp_call_arg_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_8 );

        frame_function->f_lineno = 593;
        goto try_finally_handler_7;
    }
    frame_function->f_lineno = 593;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_8, tmp_call_arg_element_4, tmp_call_arg_element_5 );
    Py_DECREF( tmp_called_8 );
    Py_DECREF( tmp_call_arg_element_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 593;
        goto try_finally_handler_7;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_10 = var_fid.object;

    tmp_called_10 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_close );
    if ( tmp_called_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 594;
        goto try_finally_handler_7;
    }
    frame_function->f_lineno = 594;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_10 );
    Py_DECREF( tmp_called_10 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 594;
        goto try_finally_handler_7;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_30 = Py_None;
    assert( var_fid.object != NULL );
    {
        PyObject *old = var_fid.object;
        var_fid.object = INCREASE_REFCOUNT( tmp_assign_source_30 );
        Py_DECREF( old );
    }

    tmp_source_name_11 = var_zip.object;

    if ( tmp_source_name_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 17170 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 596;
        goto try_finally_handler_7;
    }

    tmp_called_11 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_write );
    if ( tmp_called_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 596;
        goto try_finally_handler_7;
    }
    tmp_call_pos_2 = PyTuple_New( 1 );
    tmp_tuple_element_2 = var_tmpfile.object;

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_called_11 );
        Py_DECREF( tmp_call_pos_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 100842 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 596;
        goto try_finally_handler_7;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_call_pos_2, 0, tmp_tuple_element_2 );
    tmp_call_kw_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_3 = var_fname.object;

    tmp_dict_key_3 = const_str_plain_arcname;
    PyDict_SetItem( tmp_call_kw_3, tmp_dict_key_3, tmp_dict_value_3 );
    frame_function->f_lineno = 596;
    tmp_unused = CALL_FUNCTION( tmp_called_11, tmp_call_pos_2, tmp_call_kw_3 );
    Py_DECREF( tmp_called_11 );
    Py_DECREF( tmp_call_pos_2 );
    Py_DECREF( tmp_call_kw_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 596;
        goto try_finally_handler_7;
    }
    Py_DECREF( tmp_unused );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_7:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_5 = frame_function->f_lineno;
    tmp_cond_value_3 = var_fid.object;

    if ( tmp_cond_value_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67718 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 598;
        goto try_finally_handler_error_1;
    }

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 598;
        goto try_finally_handler_error_1;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_source_name_12 = var_fid.object;

    if ( tmp_source_name_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67718 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 599;
        goto try_finally_handler_error_1;
    }

    tmp_called_12 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_close );
    if ( tmp_called_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 599;
        goto try_finally_handler_error_1;
    }
    frame_function->f_lineno = 599;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_12 );
    Py_DECREF( tmp_called_12 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 599;
        goto try_finally_handler_error_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_5:;
    frame_function->f_lineno = tmp_tried_lineno_5;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto try_finally_handler_5;
    }

    goto finally_end_5;
    try_finally_handler_error_1:;
    Py_XDECREF( exception_keeper_type_5 );exception_keeper_type_5 = NULL;
    Py_XDECREF( exception_keeper_value_5 );exception_keeper_value_5 = NULL;
    Py_XDECREF( exception_keeper_tb_5 );exception_keeper_tb_5 = NULL;
    goto try_finally_handler_5;
    finally_end_5:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 589;
        goto try_finally_handler_5;
    }
    goto loop_start_2;
    loop_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_6 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_2__iter_value.object );
    tmp_for_loop_2__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator.object );
    tmp_for_loop_2__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_6;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto try_finally_handler_4;
    }

    goto finally_end_6;
    finally_end_6:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_7 = frame_function->f_lineno;
    tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_13 == NULL ))
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6460 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 601;
        goto try_finally_handler_error_2;
    }

    tmp_called_13 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_remove );
    if ( tmp_called_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 601;
        goto try_finally_handler_error_2;
    }
    tmp_call_arg_element_7 = var_tmpfile.object;

    if ( tmp_call_arg_element_7 == NULL )
    {
        Py_DECREF( tmp_called_13 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 100842 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 601;
        goto try_finally_handler_error_2;
    }

    frame_function->f_lineno = 601;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_13, tmp_call_arg_element_7 );
    Py_DECREF( tmp_called_13 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 601;
        goto try_finally_handler_error_2;
    }
    Py_DECREF( tmp_unused );
    frame_function->f_lineno = tmp_tried_lineno_7;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_7 != NULL )
    {
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;

        goto frame_exception_exit_1;
    }

    goto finally_end_7;
    try_finally_handler_error_2:;
    Py_XDECREF( exception_keeper_type_7 );exception_keeper_type_7 = NULL;
    Py_XDECREF( exception_keeper_value_7 );exception_keeper_value_7 = NULL;
    Py_XDECREF( exception_keeper_tb_7 );exception_keeper_tb_7 = NULL;
    goto frame_exception_exit_1;
    finally_end_7:;
    tmp_source_name_14 = var_zip.object;

    if ( tmp_source_name_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 17170 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 603;
        goto frame_exception_exit_1;
    }

    tmp_called_14 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_close );
    if ( tmp_called_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 603;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 603;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_14 );
    Py_DECREF( tmp_called_14 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 603;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_zipfile.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_zipfile,
            var_zipfile.object
        );

    }
    if ((var_tempfile.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_tempfile,
            var_tempfile.object
        );

    }
    if ((var_namedict.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_namedict,
            var_namedict.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((var_key.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_key,
            var_key.object
        );

    }
    if ((var_compression.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_compression,
            var_compression.object
        );

    }
    if ((var_zip.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_zip,
            var_zip.object
        );

    }
    if ((var_fd.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fd,
            var_fd.object
        );

    }
    if ((var_tmpfile.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_tmpfile,
            var_tmpfile.object
        );

    }
    if ((var_fname.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fname,
            var_fname.object
        );

    }
    if ((var_fid.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fid,
            var_fid.object
        );

    }
    if ((par_file.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_file,
            par_file.object
        );

    }
    if ((par_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_args,
            par_args.object
        );

    }
    if ((par_kwds.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kwds,
            par_kwds.object
        );

    }
    if ((par_compress.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_compress,
            par_compress.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_9__savez_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_file = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwds = NULL;
    PyObject *_python_par_compress = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_savez() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_file == key )
            {
                assert( _python_par_file == NULL );
                _python_par_file = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_args == key )
            {
                assert( _python_par_args == NULL );
                _python_par_args = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_kwds == key )
            {
                assert( _python_par_kwds == NULL );
                _python_par_kwds = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_compress == key )
            {
                assert( _python_par_compress == NULL );
                _python_par_compress = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_file, key ) == 1 )
            {
                assert( _python_par_file == NULL );
                _python_par_file = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_args, key ) == 1 )
            {
                assert( _python_par_args == NULL );
                _python_par_args = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_kwds, key ) == 1 )
            {
                assert( _python_par_kwds == NULL );
                _python_par_kwds = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_compress, key ) == 1 )
            {
                assert( _python_par_compress == NULL );
                _python_par_compress = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_savez() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_file != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_file = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_file == NULL )
    {
        if ( 0 + self->m_defaults_given >= 4  )
        {
            _python_par_file = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_args != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_args = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_args == NULL )
    {
        if ( 1 + self->m_defaults_given >= 4  )
        {
            _python_par_args = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_kwds != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_kwds = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_kwds == NULL )
    {
        if ( 2 + self->m_defaults_given >= 4  )
        {
            _python_par_kwds = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_compress != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_compress = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_compress == NULL )
    {
        if ( 3 + self->m_defaults_given >= 4  )
        {
            _python_par_compress = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_file == NULL || _python_par_args == NULL || _python_par_kwds == NULL || _python_par_compress == NULL ))
    {
        PyObject *values[] = { _python_par_file, _python_par_args, _python_par_kwds, _python_par_compress };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_9__savez_of_module_numpy$lib$npyio( self, _python_par_file, _python_par_args, _python_par_kwds, _python_par_compress );

error_exit:;

    Py_XDECREF( _python_par_file );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwds );
    Py_XDECREF( _python_par_compress );

    return NULL;
}

static PyObject *dparse_function_9__savez_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4 )
    {
        return impl_function_9__savez_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9__savez_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_10__getconv_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_dtype )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_dtype; par_dtype.object = _python_par_dtype;
    PyObjectLocalVariable var_typ;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_call_arg_element_14;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_c5b98c3dc8a4565dcf381ec14bc0ed8f, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_dtype.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 608;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_type );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 608;
        goto frame_exception_exit_1;
    }
    assert( var_typ.object == NULL );
    var_typ.object = tmp_assign_source_1;

    tmp_called_1 = LOOKUP_BUILTIN( const_str_plain_issubclass );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 609;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = var_typ.object;

    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 609;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_bool_ );
    if ( tmp_call_arg_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 609;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 609;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2 );
    Py_DECREF( tmp_call_arg_element_2 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 609;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        frame_function->f_lineno = 609;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = MAKE_FUNCTION_lambda_1_lambda_of_function_10__getconv_of_module_numpy$lib$npyio(  );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_return_value );

        frame_function->f_lineno = 610;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_called_2 = LOOKUP_BUILTIN( const_str_plain_issubclass );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 611;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_3 = var_typ.object;

    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 611;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_4 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_uint64 );
    if ( tmp_call_arg_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 611;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 611;
    tmp_cond_value_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_2, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    Py_DECREF( tmp_call_arg_element_4 );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 611;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        frame_function->f_lineno = 611;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 612;
        goto frame_exception_exit_1;
    }

    tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_uint64 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 612;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_no_2:;
    tmp_called_3 = LOOKUP_BUILTIN( const_str_plain_issubclass );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 613;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_5 = var_typ.object;

    tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_5 == NULL ))
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 613;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_int64 );
    if ( tmp_call_arg_element_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 613;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 613;
    tmp_cond_value_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_3, tmp_call_arg_element_5, tmp_call_arg_element_6 );
    Py_DECREF( tmp_call_arg_element_6 );
    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 613;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        frame_function->f_lineno = 613;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_3 );
    if (tmp_cond_truth_3 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 614;
        goto frame_exception_exit_1;
    }

    tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_int64 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 614;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_no_3:;
    tmp_called_4 = LOOKUP_BUILTIN( const_str_plain_issubclass );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 615;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_7 = var_typ.object;

    tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_7 == NULL ))
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 615;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_8 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_integer );
    if ( tmp_call_arg_element_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 615;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 615;
    tmp_cond_value_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_4, tmp_call_arg_element_7, tmp_call_arg_element_8 );
    Py_DECREF( tmp_call_arg_element_8 );
    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 615;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        frame_function->f_lineno = 615;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_4 );
    if (tmp_cond_truth_4 == 1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_return_value = MAKE_FUNCTION_lambda_2_lambda_of_function_10__getconv_of_module_numpy$lib$npyio(  );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_return_value );

        frame_function->f_lineno = 616;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_4;
    branch_no_4:;
    tmp_called_5 = LOOKUP_BUILTIN( const_str_plain_issubclass );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 617;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_9 = var_typ.object;

    tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_8 == NULL ))
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 617;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_10 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_floating );
    if ( tmp_call_arg_element_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 617;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 617;
    tmp_cond_value_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_5, tmp_call_arg_element_9, tmp_call_arg_element_10 );
    Py_DECREF( tmp_call_arg_element_10 );
    if ( tmp_cond_value_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 617;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_5 );

        frame_function->f_lineno = 617;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_5 );
    if (tmp_cond_truth_5 == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_return_value = LOOKUP_BUILTIN( const_str_plain_float );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 618;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    goto branch_end_5;
    branch_no_5:;
    tmp_called_6 = LOOKUP_BUILTIN( const_str_plain_issubclass );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 619;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_11 = var_typ.object;

    tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_9 == NULL ))
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 619;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_12 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_complex );
    if ( tmp_call_arg_element_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 619;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 619;
    tmp_cond_value_6 = CALL_FUNCTION_WITH_ARGS2( tmp_called_6, tmp_call_arg_element_11, tmp_call_arg_element_12 );
    Py_DECREF( tmp_call_arg_element_12 );
    if ( tmp_cond_value_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 619;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        frame_function->f_lineno = 619;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_6 );
    if (tmp_cond_truth_6 == 1)
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_return_value = LOOKUP_BUILTIN( const_str_plain_complex );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 620;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    goto branch_end_6;
    branch_no_6:;
    tmp_called_7 = LOOKUP_BUILTIN( const_str_plain_issubclass );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 621;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_13 = var_typ.object;

    tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_10 == NULL ))
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 621;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_14 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_bytes_ );
    if ( tmp_call_arg_element_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 621;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 621;
    tmp_cond_value_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_7, tmp_call_arg_element_13, tmp_call_arg_element_14 );
    Py_DECREF( tmp_call_arg_element_14 );
    if ( tmp_cond_value_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 621;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_7 );

        frame_function->f_lineno = 621;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_7 );
    if (tmp_cond_truth_7 == 1)
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_return_value = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_bytes );

    if (unlikely( tmp_return_value == NULL ))
    {
        tmp_return_value = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bytes );
    }

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52107 ], 34, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 622;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    goto branch_end_7;
    branch_no_7:;
    tmp_return_value = LOOKUP_BUILTIN( const_str_plain_str );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 624;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_end_7:;
    branch_end_6:;
    branch_end_5:;
    branch_end_4:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_typ.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_typ,
            var_typ.object
        );

    }
    if ((par_dtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_dtype,
            par_dtype.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_10__getconv_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_dtype = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_getconv() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_dtype == key )
            {
                assert( _python_par_dtype == NULL );
                _python_par_dtype = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_dtype, key ) == 1 )
            {
                assert( _python_par_dtype == NULL );
                _python_par_dtype = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_getconv() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_dtype != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_dtype = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_dtype == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_dtype = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_dtype == NULL ))
    {
        PyObject *values[] = { _python_par_dtype };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_10__getconv_of_module_numpy$lib$npyio( self, _python_par_dtype );

error_exit:;

    Py_XDECREF( _python_par_dtype );

    return NULL;
}

static PyObject *dparse_function_10__getconv_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_10__getconv_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_10__getconv_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_lambda_1_lambda_of_function_10__getconv_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_x; par_x.object = _python_par_x;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_bool_arg_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_int_arg_1;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_487e7abc1e68201409fff2f651059a3a, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_int_arg_1 = par_x.object;

    if ( tmp_int_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 610;
        goto frame_exception_exit_1;
    }

    tmp_bool_arg_1 = PyNumber_Int( tmp_int_arg_1 );
    if ( tmp_bool_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 610;
        goto frame_exception_exit_1;
    }
    tmp_return_value = TO_BOOL( tmp_bool_arg_1 );
    Py_DECREF( tmp_bool_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 610;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            par_x.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_lambda_1_lambda_of_function_10__getconv_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_x, key ) == 1 )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "<lambda>() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL ))
    {
        PyObject *values[] = { _python_par_x };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_lambda_1_lambda_of_function_10__getconv_of_module_numpy$lib$npyio( self, _python_par_x );

error_exit:;

    Py_XDECREF( _python_par_x );

    return NULL;
}

static PyObject *dparse_lambda_1_lambda_of_function_10__getconv_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_lambda_1_lambda_of_function_10__getconv_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_lambda_1_lambda_of_function_10__getconv_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_lambda_2_lambda_of_function_10__getconv_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_x; par_x.object = _python_par_x;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_float_arg_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_int_arg_1;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_cf5fa671adf1d2cf2985b93dad159212, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_float_arg_1 = par_x.object;

    if ( tmp_float_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 616;
        goto frame_exception_exit_1;
    }

    tmp_int_arg_1 = TO_FLOAT( tmp_float_arg_1 );
    if ( tmp_int_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 616;
        goto frame_exception_exit_1;
    }
    tmp_return_value = PyNumber_Int( tmp_int_arg_1 );
    Py_DECREF( tmp_int_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 616;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            par_x.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_lambda_2_lambda_of_function_10__getconv_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_x, key ) == 1 )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "<lambda>() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL ))
    {
        PyObject *values[] = { _python_par_x };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_lambda_2_lambda_of_function_10__getconv_of_module_numpy$lib$npyio( self, _python_par_x );

error_exit:;

    Py_XDECREF( _python_par_x );

    return NULL;
}

static PyObject *dparse_lambda_2_lambda_of_function_10__getconv_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_lambda_2_lambda_of_function_10__getconv_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_lambda_2_lambda_of_function_10__getconv_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_11_loadtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_fname, PyObject *_python_par_dtype, PyObject *_python_par_comments, PyObject *_python_par_delimiter, PyObject *_python_par_converters, PyObject *_python_par_skiprows, PyObject *_python_par_usecols, PyObject *_python_par_unpack, PyObject *_python_par_ndmin )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_fname; par_fname.object = _python_par_fname;
    PyObjectLocalVariable par_dtype; par_dtype.object = _python_par_dtype;
    PyObjectSharedLocalVariable par_comments; par_comments.storage->object = _python_par_comments;
    PyObjectSharedLocalVariable par_delimiter; par_delimiter.storage->object = _python_par_delimiter;
    PyObjectLocalVariable par_converters; par_converters.object = _python_par_converters;
    PyObjectLocalVariable par_skiprows; par_skiprows.object = _python_par_skiprows;
    PyObjectLocalVariable par_usecols; par_usecols.object = _python_par_usecols;
    PyObjectLocalVariable par_unpack; par_unpack.object = _python_par_unpack;
    PyObjectLocalVariable par_ndmin; par_ndmin.object = _python_par_ndmin;
    PyObjectLocalVariable var_user_converters;
    PyObjectLocalVariable var_fown;
    PyObjectLocalVariable var_fh;
    PyObjectLocalVariable var_bz2;
    PyObjectLocalVariable var_X;
    PyObjectSharedLocalVariable var_flatten_dtype;
    PyObjectSharedLocalVariable var_pack_items;
    PyObjectLocalVariable var_split_line;
    PyObjectLocalVariable var_defconv;
    PyObjectLocalVariable var_i;
    PyObjectLocalVariable var_first_vals;
    PyObjectLocalVariable var_first_line;
    PyObjectLocalVariable var_N;
    PyObjectLocalVariable var_dtype_types;
    PyObjectLocalVariable var_packing;
    PyObjectLocalVariable var_dt;
    PyObjectLocalVariable var_conv;
    PyObjectLocalVariable var_line;
    PyObjectLocalVariable var_vals;
    PyObjectLocalVariable var_val;
    PyObjectLocalVariable var_items;
    PyObjectLocalVariable var_field;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_or_1__value_1;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_listcontr_1__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_1__listcontr_result;
    PyObjectTempVariable tmp_listcontr_1__iter_value_0;
    PyObjectTempVariable tmp_listcontr_2__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_2__listcontr_result;
    PyObjectTempVariable tmp_listcontr_2__iter_value_0;
    PyObjectTempVariable tmp_or_2__value_1;
    PyObjectTempVariable tmp_for_loop_2__for_iterator;
    PyObjectTempVariable tmp_for_loop_2__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_2__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_2__element_1;
    PyObjectTempVariable tmp_tuple_unpack_2__element_2;
    PyObjectTempVariable tmp_for_loop_3__for_iterator;
    PyObjectTempVariable tmp_for_loop_3__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_3__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_3__element_1;
    PyObjectTempVariable tmp_tuple_unpack_3__element_2;
    PyObjectTempVariable tmp_listcontr_3__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_3__listcontr_result;
    PyObjectTempVariable tmp_listcontr_3__iter_value_0;
    PyObjectTempVariable tmp_listcontr_4__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_4__listcontr_result;
    PyObjectTempVariable tmp_listcontr_4__iter_value_0;
    PyObjectTempVariable tmp_tuple_unpack_4__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_4__element_1;
    PyObjectTempVariable tmp_tuple_unpack_4__element_2;
    PyObjectTempVariable tmp_and_1__value_1;
    PyObjectTempVariable tmp_listcontr_5__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_5__listcontr_result;
    PyObjectTempVariable tmp_listcontr_5__iter_value_0;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    PyObject *tmp_append_to_1;
    PyObject *tmp_append_to_2;
    PyObject *tmp_append_to_3;
    PyObject *tmp_append_to_4;
    PyObject *tmp_append_to_5;
    PyObject *tmp_append_value_1;
    PyObject *tmp_append_value_2;
    PyObject *tmp_append_value_3;
    PyObject *tmp_append_value_4;
    PyObject *tmp_append_value_5;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_call_arg_element_14;
    PyObject *tmp_call_arg_element_15;
    PyObject *tmp_call_arg_element_16;
    PyObject *tmp_call_arg_element_17;
    PyObject *tmp_call_arg_element_18;
    PyObject *tmp_call_arg_element_19;
    PyObject *tmp_call_arg_element_20;
    PyObject *tmp_call_arg_element_21;
    PyObject *tmp_call_arg_element_22;
    PyObject *tmp_call_arg_element_23;
    PyObject *tmp_call_arg_element_24;
    PyObject *tmp_call_arg_element_25;
    PyObject *tmp_call_arg_element_26;
    PyObject *tmp_call_arg_element_27;
    PyObject *tmp_call_arg_element_28;
    PyObject *tmp_call_arg_element_29;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    PyObject *tmp_called_11;
    PyObject *tmp_called_12;
    PyObject *tmp_called_13;
    PyObject *tmp_called_14;
    PyObject *tmp_called_15;
    PyObject *tmp_called_16;
    PyObject *tmp_called_17;
    PyObject *tmp_called_18;
    PyObject *tmp_called_19;
    PyObject *tmp_called_20;
    PyObject *tmp_called_21;
    PyObject *tmp_called_22;
    PyObject *tmp_called_23;
    PyObject *tmp_called_24;
    PyObject *tmp_called_25;
    PyObject *tmp_called_26;
    PyObject *tmp_called_27;
    PyObject *tmp_called_28;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Eq_3;
    int tmp_cmp_Eq_4;
    int tmp_cmp_Gt_1;
    int tmp_cmp_Gt_2;
    int tmp_cmp_Gt_3;
    int tmp_cmp_Gt_4;
    int tmp_cmp_Lt_1;
    int tmp_cmp_NotIn_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_left_14;
    PyObject *tmp_compare_left_15;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_compare_right_14;
    PyObject *tmp_compare_right_15;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    int tmp_exc_match_exception_match_1;
    int tmp_exc_match_exception_match_2;
    int tmp_exc_match_exception_match_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    bool tmp_isnot_1;
    bool tmp_isnot_2;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iter_arg_7;
    PyObject *tmp_iter_arg_8;
    PyObject *tmp_iter_arg_9;
    PyObject *tmp_iter_arg_10;
    PyObject *tmp_iter_arg_11;
    PyObject *tmp_iter_arg_12;
    PyObject *tmp_iter_arg_13;
    PyObject *tmp_iter_arg_14;
    PyObject *tmp_iter_arg_15;
    PyObject *tmp_iter_arg_16;
    PyObject *tmp_iter_arg_17;
    PyObject *tmp_iterator_attempt_1;
    PyObject *tmp_iterator_attempt_2;
    PyObject *tmp_iterator_attempt_3;
    PyObject *tmp_iterator_attempt_4;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_iterator_name_2;
    PyObject *tmp_iterator_name_3;
    PyObject *tmp_iterator_name_4;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_list_arg_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_list_element_2;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_next1_arg_1;
    PyObject *tmp_next1_arg_2;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_next_source_6;
    PyObject *tmp_next_source_7;
    PyObject *tmp_next_source_8;
    PyObject *tmp_open_filename_1;
    PyObject *tmp_open_filename_2;
    PyObject *tmp_open_mode_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_range_arg_1;
    PyObject *tmp_range_arg_2;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    Py_ssize_t tmp_slice_index_upper_1;
    PyObject *tmp_slice_source_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_subscript_2;
    PyObject *tmp_subscr_subscript_3;
    PyObject *tmp_subscr_target_1;
    PyObject *tmp_subscr_target_2;
    PyObject *tmp_subscr_target_3;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    int tmp_tried_lineno_4;
    int tmp_tried_lineno_5;
    int tmp_tried_lineno_6;
    int tmp_tried_lineno_7;
    int tmp_tried_lineno_8;
    int tmp_tried_lineno_9;
    int tmp_tried_lineno_10;
    int tmp_tried_lineno_11;
    int tmp_tried_lineno_12;
    int tmp_tried_lineno_13;
    int tmp_tried_lineno_14;
    int tmp_tried_lineno_15;
    int tmp_tried_lineno_16;
    int tmp_tried_lineno_17;
    int tmp_tried_lineno_18;
    int tmp_tried_lineno_19;
    int tmp_tried_lineno_20;
    int tmp_tried_lineno_21;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    PyObject *tmp_unpack_4;
    PyObject *tmp_unpack_5;
    PyObject *tmp_unpack_6;
    PyObject *tmp_unpack_7;
    PyObject *tmp_unpack_8;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_c6e13c8b7e445366b05ef6e25d37a43b, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 717;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = par_comments.storage->object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155754 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 717;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 717;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 717;
        goto frame_exception_exit_1;
    }
    if (par_comments.storage->object == NULL)
    {
        par_comments.storage->object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = par_comments.storage->object;
        par_comments.storage->object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    tmp_assign_source_2 = par_converters.object;

    if ( tmp_assign_source_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170342 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 718;
        goto frame_exception_exit_1;
    }

    assert( var_user_converters.object == NULL );
    var_user_converters.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    tmp_compare_left_1 = par_delimiter.storage->object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155808 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 719;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_1 != tmp_compare_right_1 );
    if (tmp_isnot_1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_2 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_2 == NULL ))
    {
        tmp_called_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 720;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_2 = par_delimiter.storage->object;

    if ( tmp_call_arg_element_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155808 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 720;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 720;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 720;
        goto frame_exception_exit_1;
    }
    if (par_delimiter.storage->object == NULL)
    {
        par_delimiter.storage->object = tmp_assign_source_3;
    }
    else
    {
        PyObject *old = par_delimiter.storage->object;
        par_delimiter.storage->object = tmp_assign_source_3;
        Py_DECREF( old );
    }
    branch_no_1:;
    tmp_compare_left_2 = par_usecols.object;

    if ( tmp_compare_left_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 721;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_2 = Py_None;
    tmp_isnot_2 = ( tmp_compare_left_2 != tmp_compare_right_2 );
    if (tmp_isnot_2)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_list_arg_1 = par_usecols.object;

    if ( tmp_list_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 722;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_4 = PySequence_List( tmp_list_arg_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 722;
        goto frame_exception_exit_1;
    }
    if (par_usecols.object == NULL)
    {
        par_usecols.object = tmp_assign_source_4;
    }
    else
    {
        PyObject *old = par_usecols.object;
        par_usecols.object = tmp_assign_source_4;
        Py_DECREF( old );
    }
    branch_no_2:;
    tmp_assign_source_5 = Py_False;
    assert( var_fown.object == NULL );
    var_fown.object = INCREASE_REFCOUNT( tmp_assign_source_5 );

    // Tried block of try/except
    tmp_called_3 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__is_string_like );

    if (unlikely( tmp_called_3 == NULL ))
    {
        tmp_called_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__is_string_like );
    }

    if ( tmp_called_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155296 ], 44, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 726;
        goto try_except_handler_1;
    }

    tmp_call_arg_element_3 = par_fname.object;

    if ( tmp_call_arg_element_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 726;
        goto try_except_handler_1;
    }

    frame_function->f_lineno = 726;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_3 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 726;
        goto try_except_handler_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        frame_function->f_lineno = 726;
        goto try_except_handler_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_6 = Py_True;
    assert( var_fown.object != NULL );
    {
        PyObject *old = var_fown.object;
        var_fown.object = INCREASE_REFCOUNT( tmp_assign_source_6 );
        Py_DECREF( old );
    }

    tmp_source_name_1 = par_fname.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 728;
        goto try_except_handler_1;
    }

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_endswith );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 728;
        goto try_except_handler_1;
    }
    tmp_call_arg_element_4 = const_str_digest_12decaf9245f4bf9f86ce8272481ee1f;
    frame_function->f_lineno = 728;
    tmp_cond_value_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 728;
        goto try_except_handler_1;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        frame_function->f_lineno = 728;
        goto try_except_handler_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_5 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_seek_gzip_factory );

    if (unlikely( tmp_called_5 == NULL ))
    {
        tmp_called_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_seek_gzip_factory );
    }

    if ( tmp_called_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170063 ], 46, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 729;
        goto try_except_handler_1;
    }

    tmp_call_arg_element_5 = par_fname.object;

    if ( tmp_call_arg_element_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 729;
        goto try_except_handler_1;
    }

    frame_function->f_lineno = 729;
    tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_5 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 729;
        goto try_except_handler_1;
    }
    tmp_assign_source_7 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 729;
        goto try_except_handler_1;
    }
    assert( var_fh.object == NULL );
    var_fh.object = tmp_assign_source_7;

    goto branch_end_4;
    branch_no_4:;
    tmp_source_name_2 = par_fname.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 730;
        goto try_except_handler_1;
    }

    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_endswith );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 730;
        goto try_except_handler_1;
    }
    tmp_call_arg_element_6 = const_str_digest_3b8dd03d590562732b9cbdf9e4fb8792;
    frame_function->f_lineno = 730;
    tmp_cond_value_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_6 );
    Py_DECREF( tmp_called_6 );
    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 730;
        goto try_except_handler_1;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        frame_function->f_lineno = 730;
        goto try_except_handler_1;
    }
    Py_DECREF( tmp_cond_value_3 );
    if (tmp_cond_truth_3 == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_user_converters.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_user_converters,
            var_user_converters.object
        );

    }
    if ((var_fown.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_fown,
            var_fown.object
        );

    }
    if ((var_fh.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_fh,
            var_fh.object
        );

    }
    if ((var_bz2.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_bz2,
            var_bz2.object
        );

    }
    if ((var_X.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_X,
            var_X.object
        );

    }
    if ((var_flatten_dtype.storage != NULL && var_flatten_dtype.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_flatten_dtype,
            var_flatten_dtype.storage->object
        );

    }
    if ((var_pack_items.storage != NULL && var_pack_items.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_pack_items,
            var_pack_items.storage->object
        );

    }
    if ((var_split_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_split_line,
            var_split_line.object
        );

    }
    if ((var_defconv.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_defconv,
            var_defconv.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((var_first_vals.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_first_vals,
            var_first_vals.object
        );

    }
    if ((var_first_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_first_line,
            var_first_line.object
        );

    }
    if ((var_N.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_N,
            var_N.object
        );

    }
    if ((var_dtype_types.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_dtype_types,
            var_dtype_types.object
        );

    }
    if ((var_packing.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_packing,
            var_packing.object
        );

    }
    if ((var_dt.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_dt,
            var_dt.object
        );

    }
    if ((var_conv.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_conv,
            var_conv.object
        );

    }
    if ((var_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_line,
            var_line.object
        );

    }
    if ((var_vals.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_vals,
            var_vals.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((var_items.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_items,
            var_items.object
        );

    }
    if ((var_field.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_field,
            var_field.object
        );

    }
    if ((par_fname.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_fname,
            par_fname.object
        );

    }
    if ((par_dtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_dtype,
            par_dtype.object
        );

    }
    if ((par_comments.storage != NULL && par_comments.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_comments,
            par_comments.storage->object
        );

    }
    if ((par_delimiter.storage != NULL && par_delimiter.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_delimiter,
            par_delimiter.storage->object
        );

    }
    if ((par_converters.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_converters,
            par_converters.object
        );

    }
    if ((par_skiprows.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_skiprows,
            par_skiprows.object
        );

    }
    if ((par_usecols.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_usecols,
            par_usecols.object
        );

    }
    if ((par_unpack.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_unpack,
            par_unpack.object
        );

    }
    if ((par_ndmin.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ndmin,
            par_ndmin.object
        );

    }
    frame_function->f_lineno = 731;
    tmp_assign_source_8 = IMPORT_MODULE( const_str_plain_bz2, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 731;
        goto try_except_handler_1;
    }
    assert( var_bz2.object == NULL );
    var_bz2.object = tmp_assign_source_8;

    tmp_source_name_3 = var_bz2.object;

    tmp_called_7 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_BZ2File );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 732;
        goto try_except_handler_1;
    }
    tmp_call_arg_element_7 = par_fname.object;

    if ( tmp_call_arg_element_7 == NULL )
    {
        Py_DECREF( tmp_called_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 732;
        goto try_except_handler_1;
    }

    frame_function->f_lineno = 732;
    tmp_iter_arg_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_7 );
    Py_DECREF( tmp_called_7 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 732;
        goto try_except_handler_1;
    }
    tmp_assign_source_9 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 732;
        goto try_except_handler_1;
    }
    assert( var_fh.object == NULL );
    var_fh.object = tmp_assign_source_9;

    goto branch_end_5;
    branch_no_5:;
    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5370 ], 32, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 733;
        goto try_except_handler_1;
    }

    tmp_subscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_version_info );
    if ( tmp_subscr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 733;
        goto try_except_handler_1;
    }
    tmp_subscr_subscript_1 = const_int_0;
    tmp_compare_left_3 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    Py_DECREF( tmp_subscr_target_1 );
    if ( tmp_compare_left_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 733;
        goto try_except_handler_1;
    }
    tmp_compare_right_3 = const_int_pos_2;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_3 );

        frame_function->f_lineno = 733;
        goto try_except_handler_1;
    }
    Py_DECREF( tmp_compare_left_3 );
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_open_filename_1 = par_fname.object;

    if ( tmp_open_filename_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 734;
        goto try_except_handler_1;
    }

    tmp_open_mode_1 = const_str_plain_U;
    tmp_iter_arg_3 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 734;
        goto try_except_handler_1;
    }
    tmp_assign_source_10 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 734;
        goto try_except_handler_1;
    }
    assert( var_fh.object == NULL );
    var_fh.object = tmp_assign_source_10;

    goto branch_end_6;
    branch_no_6:;
    tmp_open_filename_2 = par_fname.object;

    if ( tmp_open_filename_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 736;
        goto try_except_handler_1;
    }

    tmp_iter_arg_4 = BUILTIN_OPEN( tmp_open_filename_2, NULL, NULL );
    if ( tmp_iter_arg_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 736;
        goto try_except_handler_1;
    }
    tmp_assign_source_11 = MAKE_ITERATOR( tmp_iter_arg_4 );
    Py_DECREF( tmp_iter_arg_4 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 736;
        goto try_except_handler_1;
    }
    assert( var_fh.object == NULL );
    var_fh.object = tmp_assign_source_11;

    branch_end_6:;
    branch_end_5:;
    branch_end_4:;
    goto branch_end_3;
    branch_no_3:;
    tmp_iter_arg_5 = par_fname.object;

    if ( tmp_iter_arg_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 738;
        goto try_except_handler_1;
    }

    tmp_assign_source_12 = MAKE_ITERATOR( tmp_iter_arg_5 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 738;
        goto try_except_handler_1;
    }
    assert( var_fh.object == NULL );
    var_fh.object = tmp_assign_source_12;

    branch_end_3:;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_4 = PyThreadState_GET()->exc_type;
    tmp_compare_right_4 = PyExc_TypeError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 739;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_make_exception_arg_1 = const_str_digest_8e18bbc9b85e605205cac33e6541ecd2;
    frame_function->f_lineno = 740;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 740;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 740;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    goto branch_end_7;
    branch_no_7:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_7:;
    try_except_end_1:;
    tmp_assign_source_13 = PyList_New( 0 );
    assert( var_X.object == NULL );
    var_X.object = tmp_assign_source_13;

    tmp_assign_source_14 = MAKE_FUNCTION_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio( var_flatten_dtype );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_14 );

        frame_function->f_lineno = 743;
        goto frame_exception_exit_1;
    }
    if (var_flatten_dtype.storage->object == NULL)
    {
        var_flatten_dtype.storage->object = tmp_assign_source_14;
    }
    else
    {
        PyObject *old = var_flatten_dtype.storage->object;
        var_flatten_dtype.storage->object = tmp_assign_source_14;
        Py_DECREF( old );
    }
    tmp_assign_source_15 = MAKE_FUNCTION_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio( var_pack_items );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_15 );

        frame_function->f_lineno = 772;
        goto frame_exception_exit_1;
    }
    if (var_pack_items.storage->object == NULL)
    {
        var_pack_items.storage->object = tmp_assign_source_15;
    }
    else
    {
        PyObject *old = var_pack_items.storage->object;
        var_pack_items.storage->object = tmp_assign_source_15;
        Py_DECREF( old );
    }
    tmp_assign_source_16 = MAKE_FUNCTION_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio( par_comments, par_delimiter );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_16 );

        frame_function->f_lineno = 788;
        goto frame_exception_exit_1;
    }
    assert( var_split_line.object == NULL );
    var_split_line.object = tmp_assign_source_16;

    // Tried code
    tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_5 == NULL ))
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 798;
        goto try_finally_handler_1;
    }

    tmp_called_8 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_dtype );
    if ( tmp_called_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 798;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_8 = par_dtype.object;

    if ( tmp_call_arg_element_8 == NULL )
    {
        Py_DECREF( tmp_called_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 798;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 798;
    tmp_assign_source_17 = CALL_FUNCTION_WITH_ARGS1( tmp_called_8, tmp_call_arg_element_8 );
    Py_DECREF( tmp_called_8 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 798;
        goto try_finally_handler_1;
    }
    if (par_dtype.object == NULL)
    {
        par_dtype.object = tmp_assign_source_17;
    }
    else
    {
        PyObject *old = par_dtype.object;
        par_dtype.object = tmp_assign_source_17;
        Py_DECREF( old );
    }
    tmp_called_9 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__getconv );

    if (unlikely( tmp_called_9 == NULL ))
    {
        tmp_called_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__getconv );
    }

    if ( tmp_called_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170451 ], 37, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 799;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_9 = par_dtype.object;

    frame_function->f_lineno = 799;
    tmp_assign_source_18 = CALL_FUNCTION_WITH_ARGS1( tmp_called_9, tmp_call_arg_element_9 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 799;
        goto try_finally_handler_1;
    }
    assert( var_defconv.object == NULL );
    var_defconv.object = tmp_assign_source_18;

    tmp_range_arg_1 = par_skiprows.object;

    if ( tmp_range_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170488 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 802;
        goto try_finally_handler_1;
    }

    tmp_iter_arg_6 = BUILTIN_RANGE( tmp_range_arg_1 );
    if ( tmp_iter_arg_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 802;
        goto try_finally_handler_1;
    }
    tmp_assign_source_19 = MAKE_ITERATOR( tmp_iter_arg_6 );
    Py_DECREF( tmp_iter_arg_6 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 802;
        goto try_finally_handler_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_19;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_20 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_20 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 802;
            goto try_finally_handler_2;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_20;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_20;
        Py_DECREF( old );
    }
    tmp_assign_source_21 = tmp_for_loop_1__iter_value.object;

    if (var_i.object == NULL)
    {
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_21 );
    }
    else
    {
        PyObject *old = var_i.object;
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_21 );
        Py_DECREF( old );
    }
    tmp_next1_arg_1 = var_fh.object;

    if ( tmp_next1_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12843 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 803;
        goto try_finally_handler_2;
    }

    tmp_unused = ITERATOR_NEXT( tmp_next1_arg_1 );
    if ( tmp_unused == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 803;
        goto try_finally_handler_2;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 802;
        goto try_finally_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_assign_source_22 = Py_None;
    assert( var_first_vals.object == NULL );
    var_first_vals.object = INCREASE_REFCOUNT( tmp_assign_source_22 );

    // Tried block of try/except
    loop_start_2:;
    tmp_cond_value_4 = var_first_vals.object;

    if ( tmp_cond_value_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170542 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 809;
        goto try_except_handler_2;
    }

    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 809;
        goto try_except_handler_2;
    }
    if (tmp_cond_truth_4 == 1)
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    goto loop_end_2;
    branch_no_8:;
    tmp_next1_arg_2 = var_fh.object;

    if ( tmp_next1_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12843 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 810;
        goto try_except_handler_2;
    }

    tmp_assign_source_23 = ITERATOR_NEXT( tmp_next1_arg_2 );
    if ( tmp_assign_source_23 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 810;
        goto try_except_handler_2;
    }
    if (var_first_line.object == NULL)
    {
        var_first_line.object = tmp_assign_source_23;
    }
    else
    {
        PyObject *old = var_first_line.object;
        var_first_line.object = tmp_assign_source_23;
        Py_DECREF( old );
    }
    tmp_called_10 = var_split_line.object;

    if ( tmp_called_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170598 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 811;
        goto try_except_handler_2;
    }

    tmp_call_arg_element_10 = var_first_line.object;

    frame_function->f_lineno = 811;
    tmp_assign_source_24 = CALL_FUNCTION_WITH_ARGS1( tmp_called_10, tmp_call_arg_element_10 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 811;
        goto try_except_handler_2;
    }
    if (var_first_vals.object == NULL)
    {
        var_first_vals.object = tmp_assign_source_24;
    }
    else
    {
        PyObject *old = var_first_vals.object;
        var_first_vals.object = tmp_assign_source_24;
        Py_DECREF( old );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 809;
        goto try_except_handler_2;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_except_end_2;
    try_except_handler_2:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_5 = PyThreadState_GET()->exc_type;
    tmp_compare_right_5 = PyExc_StopIteration;
    tmp_exc_match_exception_match_2 = EXCEPTION_MATCH_BOOL( tmp_compare_left_5, tmp_compare_right_5 );
    if ( tmp_exc_match_exception_match_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 812;
        goto try_finally_handler_1;
    }
    if (tmp_exc_match_exception_match_2 == 1)
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_assign_source_25 = const_str_empty;
    if (var_first_line.object == NULL)
    {
        var_first_line.object = INCREASE_REFCOUNT( tmp_assign_source_25 );
    }
    else
    {
        PyObject *old = var_first_line.object;
        var_first_line.object = INCREASE_REFCOUNT( tmp_assign_source_25 );
        Py_DECREF( old );
    }
    tmp_assign_source_26 = PyList_New( 0 );
    if (var_first_vals.object == NULL)
    {
        var_first_vals.object = tmp_assign_source_26;
    }
    else
    {
        PyObject *old = var_first_vals.object;
        var_first_vals.object = tmp_assign_source_26;
        Py_DECREF( old );
    }
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_warnings );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
    }

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6827 ], 37, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 816;
        goto try_finally_handler_1;
    }

    tmp_called_11 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_warn );
    if ( tmp_called_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 816;
        goto try_finally_handler_1;
    }
    tmp_binop_left_1 = const_str_digest_9f1ae8de19d56e8c8fd834eb15fd50e8;
    tmp_binop_right_1 = par_fname.object;

    if ( tmp_binop_right_1 == NULL )
    {
        Py_DECREF( tmp_called_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 816;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_11 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    if ( tmp_call_arg_element_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_11 );

        frame_function->f_lineno = 816;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 816;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_11, tmp_call_arg_element_11 );
    Py_DECREF( tmp_called_11 );
    Py_DECREF( tmp_call_arg_element_11 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 816;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_9;
    branch_no_9:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_1;
    branch_end_9:;
    try_except_end_2:;
    tmp_called_12 = LOOKUP_BUILTIN( const_str_plain_len );
    if ( tmp_called_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 817;
        goto try_finally_handler_1;
    }
    tmp_call_pos_1 = NULL;
    // Tried code
    tmp_call_pos_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = NULL;
    // Tried code
    tmp_assign_source_28 = par_usecols.object;

    if ( tmp_assign_source_28 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 817;
        goto try_finally_handler_4;
    }

    assert( tmp_or_1__value_1.object == NULL );
    tmp_or_1__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_28 );

    tmp_cond_value_5 = tmp_or_1__value_1.object;

    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_1 );

        frame_function->f_lineno = 817;
        goto try_finally_handler_4;
    }
    if (tmp_cond_truth_5 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_tuple_element_1 = tmp_or_1__value_1.object;

    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_tuple_element_1 = NULL;
    // Tried code
    tmp_result = tmp_or_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_1__value_1.object );
        tmp_or_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_tuple_element_1 = var_first_vals.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170542 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 817;
        goto try_finally_handler_5;
    }

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_4;
    }

    goto finally_end_2;
    finally_end_2:;
    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto try_finally_handler_3;
    }

    goto finally_end_3;
    finally_end_3:;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_1__value_1.object );
    tmp_or_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto try_finally_handler_1;
    }

    goto finally_end_4;
    finally_end_4:;
    frame_function->f_lineno = 817;
    tmp_assign_source_27 = CALL_FUNCTION_WITH_POSARGS( tmp_called_12, tmp_call_pos_1 );
    Py_DECREF( tmp_call_pos_1 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 817;
        goto try_finally_handler_1;
    }
    assert( var_N.object == NULL );
    var_N.object = tmp_assign_source_27;

    // Tried code
    tmp_called_13 = var_flatten_dtype.storage->object;

    if ( tmp_called_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170654 ], 59, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 819;
        goto try_finally_handler_6;
    }

    tmp_call_arg_element_12 = par_dtype.object;

    if ( tmp_call_arg_element_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 819;
        goto try_finally_handler_6;
    }

    frame_function->f_lineno = 819;
    tmp_iter_arg_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_13, tmp_call_arg_element_12 );
    if ( tmp_iter_arg_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 819;
        goto try_finally_handler_6;
    }
    tmp_assign_source_29 = MAKE_ITERATOR( tmp_iter_arg_7 );
    Py_DECREF( tmp_iter_arg_7 );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 819;
        goto try_finally_handler_6;
    }
    assert( tmp_tuple_unpack_1__source_iter.object == NULL );
    tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_29;

    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_30 = UNPACK_PARAMETER_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_30 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 819;
        goto try_finally_handler_6;
    }
    assert( tmp_tuple_unpack_1__element_1.object == NULL );
    tmp_tuple_unpack_1__element_1.object = tmp_assign_source_30;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_31 = UNPACK_PARAMETER_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_31 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 819;
        goto try_finally_handler_6;
    }
    assert( tmp_tuple_unpack_1__element_2.object == NULL );
    tmp_tuple_unpack_1__element_2.object = tmp_assign_source_31;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_1 ); assert( PyIter_Check( tmp_iterator_name_1 ) );

    tmp_iterator_attempt_1 = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt_1 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_6;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_1 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_6;
    }
    tmp_assign_source_32 = tmp_tuple_unpack_1__element_1.object;

    assert( var_dtype_types.object == NULL );
    var_dtype_types.object = INCREASE_REFCOUNT( tmp_assign_source_32 );

    tmp_assign_source_33 = tmp_tuple_unpack_1__element_2.object;

    assert( var_packing.object == NULL );
    var_packing.object = INCREASE_REFCOUNT( tmp_assign_source_33 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter.object );
    tmp_tuple_unpack_1__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1.object );
    tmp_tuple_unpack_1__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2.object );
    tmp_tuple_unpack_1__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto try_finally_handler_1;
    }

    goto finally_end_5;
    finally_end_5:;
    tmp_len_arg_1 = var_dtype_types.object;

    if ( tmp_len_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170713 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 820;
        goto try_finally_handler_1;
    }

    tmp_compare_left_6 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_compare_left_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 820;
        goto try_finally_handler_1;
    }
    tmp_compare_right_6 = const_int_pos_1;
    tmp_cmp_Gt_1 = RICH_COMPARE_BOOL_GT( tmp_compare_left_6, tmp_compare_right_6 );
    if ( tmp_cmp_Gt_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_6 );

        frame_function->f_lineno = 820;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_compare_left_6 );
    if (tmp_cmp_Gt_1 == 1)
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    // Tried code
    tmp_assign_source_34 = NULL;
    // Tried code
    tmp_iter_arg_8 = var_dtype_types.object;

    if ( tmp_iter_arg_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170713 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 823;
        goto try_finally_handler_8;
    }

    tmp_assign_source_35 = MAKE_ITERATOR( tmp_iter_arg_8 );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 823;
        goto try_finally_handler_8;
    }
    assert( tmp_listcontr_1__listcontr_iter.object == NULL );
    tmp_listcontr_1__listcontr_iter.object = tmp_assign_source_35;

    tmp_assign_source_36 = PyList_New( 0 );
    assert( tmp_listcontr_1__listcontr_result.object == NULL );
    tmp_listcontr_1__listcontr_result.object = tmp_assign_source_36;

    loop_start_3:;
    tmp_next_source_2 = tmp_listcontr_1__listcontr_iter.object;

    tmp_assign_source_37 = ITERATOR_NEXT( tmp_next_source_2 );
    if (tmp_assign_source_37 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_3;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 823;
            goto try_finally_handler_8;
        }
    }

    if (tmp_listcontr_1__iter_value_0.object == NULL)
    {
        tmp_listcontr_1__iter_value_0.object = tmp_assign_source_37;
    }
    else
    {
        PyObject *old = tmp_listcontr_1__iter_value_0.object;
        tmp_listcontr_1__iter_value_0.object = tmp_assign_source_37;
        Py_DECREF( old );
    }
    tmp_assign_source_38 = tmp_listcontr_1__iter_value_0.object;

    if (var_dt.object == NULL)
    {
        var_dt.object = INCREASE_REFCOUNT( tmp_assign_source_38 );
    }
    else
    {
        PyObject *old = var_dt.object;
        var_dt.object = INCREASE_REFCOUNT( tmp_assign_source_38 );
        Py_DECREF( old );
    }
    tmp_append_to_1 = tmp_listcontr_1__listcontr_result.object;

    tmp_called_14 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__getconv );

    if (unlikely( tmp_called_14 == NULL ))
    {
        tmp_called_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__getconv );
    }

    if ( tmp_called_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170451 ], 37, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 823;
        goto try_finally_handler_8;
    }

    tmp_call_arg_element_13 = var_dt.object;

    frame_function->f_lineno = 823;
    tmp_append_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_14, tmp_call_arg_element_13 );
    if ( tmp_append_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 823;
        goto try_finally_handler_8;
    }
    tmp_res = PyList_Append( tmp_append_to_1, tmp_append_value_1 );
    Py_DECREF( tmp_append_value_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 823;
        goto try_finally_handler_8;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 823;
        goto try_finally_handler_8;
    }
    goto loop_start_3;
    loop_end_3:;
    tmp_assign_source_34 = tmp_listcontr_1__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_8:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_4 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_1__iter_value_0.object );
    tmp_listcontr_1__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_4;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto try_finally_handler_7;
    }

    goto finally_end_6;
    finally_end_6:;
    if (par_converters.object == NULL)
    {
        par_converters.object = INCREASE_REFCOUNT( tmp_assign_source_34 );
    }
    else
    {
        PyObject *old = par_converters.object;
        par_converters.object = INCREASE_REFCOUNT( tmp_assign_source_34 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_7:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_5 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_1__listcontr_result.object );
    tmp_listcontr_1__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_1__listcontr_iter.object );
    tmp_listcontr_1__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_5;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_7 != NULL )
    {
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;

        goto try_finally_handler_1;
    }

    goto finally_end_7;
    finally_end_7:;
    goto branch_end_10;
    branch_no_10:;
    // Tried code
    tmp_assign_source_39 = NULL;
    // Tried code
    tmp_range_arg_2 = var_N.object;

    if ( tmp_range_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71377 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 826;
        goto try_finally_handler_10;
    }

    tmp_iter_arg_9 = BUILTIN_RANGE( tmp_range_arg_2 );
    if ( tmp_iter_arg_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 826;
        goto try_finally_handler_10;
    }
    tmp_assign_source_40 = MAKE_ITERATOR( tmp_iter_arg_9 );
    Py_DECREF( tmp_iter_arg_9 );
    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 826;
        goto try_finally_handler_10;
    }
    assert( tmp_listcontr_2__listcontr_iter.object == NULL );
    tmp_listcontr_2__listcontr_iter.object = tmp_assign_source_40;

    tmp_assign_source_41 = PyList_New( 0 );
    assert( tmp_listcontr_2__listcontr_result.object == NULL );
    tmp_listcontr_2__listcontr_result.object = tmp_assign_source_41;

    loop_start_4:;
    tmp_next_source_3 = tmp_listcontr_2__listcontr_iter.object;

    tmp_assign_source_42 = ITERATOR_NEXT( tmp_next_source_3 );
    if (tmp_assign_source_42 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_4;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 826;
            goto try_finally_handler_10;
        }
    }

    if (tmp_listcontr_2__iter_value_0.object == NULL)
    {
        tmp_listcontr_2__iter_value_0.object = tmp_assign_source_42;
    }
    else
    {
        PyObject *old = tmp_listcontr_2__iter_value_0.object;
        tmp_listcontr_2__iter_value_0.object = tmp_assign_source_42;
        Py_DECREF( old );
    }
    tmp_assign_source_43 = tmp_listcontr_2__iter_value_0.object;

    if (var_i.object == NULL)
    {
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_43 );
    }
    else
    {
        PyObject *old = var_i.object;
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_43 );
        Py_DECREF( old );
    }
    tmp_append_to_2 = tmp_listcontr_2__listcontr_result.object;

    tmp_append_value_2 = var_defconv.object;

    if ( tmp_append_value_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170770 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 826;
        goto try_finally_handler_10;
    }

    tmp_res = PyList_Append( tmp_append_to_2, tmp_append_value_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 826;
        goto try_finally_handler_10;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 826;
        goto try_finally_handler_10;
    }
    goto loop_start_4;
    loop_end_4:;
    tmp_assign_source_39 = tmp_listcontr_2__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_10:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_6 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_2__iter_value_0.object );
    tmp_listcontr_2__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_6;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_8 != NULL )
    {
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;

        goto try_finally_handler_9;
    }

    goto finally_end_8;
    finally_end_8:;
    if (par_converters.object == NULL)
    {
        par_converters.object = INCREASE_REFCOUNT( tmp_assign_source_39 );
    }
    else
    {
        PyObject *old = par_converters.object;
        par_converters.object = INCREASE_REFCOUNT( tmp_assign_source_39 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_9:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_7 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_2__listcontr_result.object );
    tmp_listcontr_2__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_2__listcontr_iter.object );
    tmp_listcontr_2__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_7;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_9 != NULL )
    {
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;

        goto try_finally_handler_1;
    }

    goto finally_end_9;
    finally_end_9:;
    tmp_compare_left_7 = var_N.object;

    if ( tmp_compare_left_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71377 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 827;
        goto try_finally_handler_1;
    }

    tmp_compare_right_7 = const_int_pos_1;
    tmp_cmp_Gt_2 = RICH_COMPARE_BOOL_GT( tmp_compare_left_7, tmp_compare_right_7 );
    if ( tmp_cmp_Gt_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 827;
        goto try_finally_handler_1;
    }
    if (tmp_cmp_Gt_2 == 1)
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_assign_source_44 = PyList_New( 1 );
    tmp_list_element_1 = PyTuple_New( 2 );
    tmp_tuple_element_2 = var_N.object;

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_assign_source_44 );
        Py_DECREF( tmp_list_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71377 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 828;
        goto try_finally_handler_1;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_list_element_1, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = LOOKUP_BUILTIN( const_str_plain_tuple );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_44 );
        Py_DECREF( tmp_list_element_1 );

        frame_function->f_lineno = 828;
        goto try_finally_handler_1;
    }
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_list_element_1, 1, tmp_tuple_element_2 );
    PyList_SET_ITEM( tmp_assign_source_44, 0, tmp_list_element_1 );
    if (var_packing.object == NULL)
    {
        var_packing.object = tmp_assign_source_44;
    }
    else
    {
        PyObject *old = var_packing.object;
        var_packing.object = tmp_assign_source_44;
        Py_DECREF( old );
    }
    branch_no_11:;
    branch_end_10:;
    tmp_called_15 = NULL;
    // Tried code
    tmp_source_name_7 = NULL;
    // Tried code
    tmp_assign_source_46 = var_user_converters.object;

    if ( tmp_assign_source_46 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170823 ], 61, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 831;
        goto try_finally_handler_12;
    }

    assert( tmp_or_2__value_1.object == NULL );
    tmp_or_2__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_46 );

    tmp_cond_value_6 = tmp_or_2__value_1.object;

    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 831;
        goto try_finally_handler_12;
    }
    if (tmp_cond_truth_6 == 1)
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_source_name_7 = tmp_or_2__value_1.object;

    Py_INCREF( tmp_source_name_7 );
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_source_name_7 = NULL;
    // Tried code
    tmp_result = tmp_or_2__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_2__value_1.object );
        tmp_or_2__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_source_name_7 = PyDict_New();
    // Re-reraise as necessary after finally was executed.
    goto finally_end_10;
    finally_end_10:;
    condexpr_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_12:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_10 != NULL )
    {
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;

        goto try_finally_handler_11;
    }

    goto finally_end_11;
    finally_end_11:;
    tmp_called_15 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_items );
    Py_DECREF( tmp_source_name_7 );
    if ( tmp_called_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 831;
        goto try_finally_handler_11;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_11:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_8 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_2__value_1.object );
    tmp_or_2__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_8;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_11 != NULL )
    {
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;

        goto try_finally_handler_1;
    }

    goto finally_end_12;
    finally_end_12:;
    frame_function->f_lineno = 831;
    tmp_iter_arg_10 = CALL_FUNCTION_NO_ARGS( tmp_called_15 );
    Py_DECREF( tmp_called_15 );
    if ( tmp_iter_arg_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 831;
        goto try_finally_handler_1;
    }
    tmp_assign_source_45 = MAKE_ITERATOR( tmp_iter_arg_10 );
    Py_DECREF( tmp_iter_arg_10 );
    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 831;
        goto try_finally_handler_1;
    }
    assert( tmp_for_loop_2__for_iterator.object == NULL );
    tmp_for_loop_2__for_iterator.object = tmp_assign_source_45;

    // Tried code
    loop_start_5:;
    tmp_next_source_4 = tmp_for_loop_2__for_iterator.object;

    tmp_assign_source_47 = ITERATOR_NEXT( tmp_next_source_4 );
    if (tmp_assign_source_47 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_5;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 831;
            goto try_finally_handler_14;
        }
    }

    if (tmp_for_loop_2__iter_value.object == NULL)
    {
        tmp_for_loop_2__iter_value.object = tmp_assign_source_47;
    }
    else
    {
        PyObject *old = tmp_for_loop_2__iter_value.object;
        tmp_for_loop_2__iter_value.object = tmp_assign_source_47;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_11 = tmp_for_loop_2__iter_value.object;

    tmp_assign_source_48 = MAKE_ITERATOR( tmp_iter_arg_11 );
    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 831;
        goto try_finally_handler_15;
    }
    if (tmp_tuple_unpack_2__source_iter.object == NULL)
    {
        tmp_tuple_unpack_2__source_iter.object = tmp_assign_source_48;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_2__source_iter.object;
        tmp_tuple_unpack_2__source_iter.object = tmp_assign_source_48;
        Py_DECREF( old );
    }
    tmp_unpack_3 = tmp_tuple_unpack_2__source_iter.object;

    tmp_assign_source_49 = UNPACK_PARAMETER_NEXT( tmp_unpack_3, 0 );
    if ( tmp_assign_source_49 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 831;
        goto try_finally_handler_15;
    }
    if (tmp_tuple_unpack_2__element_1.object == NULL)
    {
        tmp_tuple_unpack_2__element_1.object = tmp_assign_source_49;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_2__element_1.object;
        tmp_tuple_unpack_2__element_1.object = tmp_assign_source_49;
        Py_DECREF( old );
    }
    tmp_unpack_4 = tmp_tuple_unpack_2__source_iter.object;

    tmp_assign_source_50 = UNPACK_PARAMETER_NEXT( tmp_unpack_4, 1 );
    if ( tmp_assign_source_50 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 831;
        goto try_finally_handler_15;
    }
    if (tmp_tuple_unpack_2__element_2.object == NULL)
    {
        tmp_tuple_unpack_2__element_2.object = tmp_assign_source_50;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_2__element_2.object;
        tmp_tuple_unpack_2__element_2.object = tmp_assign_source_50;
        Py_DECREF( old );
    }
    tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_2 ); assert( PyIter_Check( tmp_iterator_name_2 ) );

    tmp_iterator_attempt_2 = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

    if (likely( tmp_iterator_attempt_2 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_15;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_2 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_15;
    }
    tmp_assign_source_51 = tmp_tuple_unpack_2__element_1.object;

    if (var_i.object == NULL)
    {
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_51 );
    }
    else
    {
        PyObject *old = var_i.object;
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_51 );
        Py_DECREF( old );
    }
    tmp_assign_source_52 = tmp_tuple_unpack_2__element_2.object;

    if (var_conv.object == NULL)
    {
        var_conv.object = INCREASE_REFCOUNT( tmp_assign_source_52 );
    }
    else
    {
        PyObject *old = var_conv.object;
        var_conv.object = INCREASE_REFCOUNT( tmp_assign_source_52 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_15:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_9 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_2__source_iter.object );
    tmp_tuple_unpack_2__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_1.object );
    tmp_tuple_unpack_2__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2.object );
    tmp_tuple_unpack_2__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_9;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_12 != NULL )
    {
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;

        goto try_finally_handler_14;
    }

    goto finally_end_13;
    finally_end_13:;
    tmp_cond_value_7 = par_usecols.object;

    if ( tmp_cond_value_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 832;
        goto try_finally_handler_14;
    }

    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 832;
        goto try_finally_handler_14;
    }
    if (tmp_cond_truth_7 == 1)
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    // Tried block of try/except
    tmp_source_name_8 = par_usecols.object;

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 834;
        goto try_except_handler_3;
    }

    tmp_called_16 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_index );
    if ( tmp_called_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 834;
        goto try_except_handler_3;
    }
    tmp_call_arg_element_14 = var_i.object;

    if ( tmp_call_arg_element_14 == NULL )
    {
        Py_DECREF( tmp_called_16 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 834;
        goto try_except_handler_3;
    }

    frame_function->f_lineno = 834;
    tmp_assign_source_53 = CALL_FUNCTION_WITH_ARGS1( tmp_called_16, tmp_call_arg_element_14 );
    Py_DECREF( tmp_called_16 );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 834;
        goto try_except_handler_3;
    }
    if (var_i.object == NULL)
    {
        var_i.object = tmp_assign_source_53;
    }
    else
    {
        PyObject *old = var_i.object;
        var_i.object = tmp_assign_source_53;
        Py_DECREF( old );
    }
    goto try_except_end_3;
    try_except_handler_3:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_8 = PyThreadState_GET()->exc_type;
    tmp_compare_right_8 = PyExc_ValueError;
    tmp_exc_match_exception_match_3 = EXCEPTION_MATCH_BOOL( tmp_compare_left_8, tmp_compare_right_8 );
    if ( tmp_exc_match_exception_match_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 835;
        goto try_finally_handler_14;
    }
    if (tmp_exc_match_exception_match_3 == 1)
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    goto loop_start_5;
    goto branch_end_13;
    branch_no_13:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_14;
    branch_end_13:;
    try_except_end_3:;
    branch_no_12:;
    tmp_ass_subvalue_1 = var_conv.object;

    if ( tmp_ass_subvalue_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170884 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 838;
        goto try_finally_handler_14;
    }

    tmp_ass_subscribed_1 = par_converters.object;

    if ( tmp_ass_subscribed_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170342 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 838;
        goto try_finally_handler_14;
    }

    tmp_ass_subscript_1 = var_i.object;

    if ( tmp_ass_subscript_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 838;
        goto try_finally_handler_14;
    }

    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 838;
        goto try_finally_handler_14;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 831;
        goto try_finally_handler_14;
    }
    goto loop_start_5;
    loop_end_5:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_14:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_10 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_2__iter_value.object );
    tmp_for_loop_2__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator.object );
    tmp_for_loop_2__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_10;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_13 != NULL )
    {
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;

        goto try_finally_handler_1;
    }

    goto finally_end_14;
    finally_end_14:;
    tmp_called_17 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    if ( tmp_called_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 841;
        goto try_finally_handler_1;
    }
    tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_itertools );

    if (unlikely( tmp_source_name_9 == NULL ))
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_itertools );
    }

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 20136 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 841;
        goto try_finally_handler_1;
    }

    tmp_called_18 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_chain );
    if ( tmp_called_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 841;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_16 = PyList_New( 1 );
    tmp_list_element_2 = var_first_line.object;

    if ( tmp_list_element_2 == NULL )
    {
        Py_DECREF( tmp_called_18 );
        Py_DECREF( tmp_call_arg_element_16 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170934 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 841;
        goto try_finally_handler_1;
    }

    Py_INCREF( tmp_list_element_2 );
    PyList_SET_ITEM( tmp_call_arg_element_16, 0, tmp_list_element_2 );
    tmp_call_arg_element_17 = var_fh.object;

    if ( tmp_call_arg_element_17 == NULL )
    {
        Py_DECREF( tmp_called_18 );
        Py_DECREF( tmp_call_arg_element_16 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12843 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 841;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 841;
    tmp_call_arg_element_15 = CALL_FUNCTION_WITH_ARGS2( tmp_called_18, tmp_call_arg_element_16, tmp_call_arg_element_17 );
    Py_DECREF( tmp_called_18 );
    Py_DECREF( tmp_call_arg_element_16 );
    if ( tmp_call_arg_element_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 841;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 841;
    tmp_iter_arg_12 = CALL_FUNCTION_WITH_ARGS1( tmp_called_17, tmp_call_arg_element_15 );
    Py_DECREF( tmp_call_arg_element_15 );
    if ( tmp_iter_arg_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 841;
        goto try_finally_handler_1;
    }
    tmp_assign_source_54 = MAKE_ITERATOR( tmp_iter_arg_12 );
    Py_DECREF( tmp_iter_arg_12 );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 841;
        goto try_finally_handler_1;
    }
    assert( tmp_for_loop_3__for_iterator.object == NULL );
    tmp_for_loop_3__for_iterator.object = tmp_assign_source_54;

    // Tried code
    loop_start_6:;
    tmp_next_source_5 = tmp_for_loop_3__for_iterator.object;

    tmp_assign_source_55 = ITERATOR_NEXT( tmp_next_source_5 );
    if (tmp_assign_source_55 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_6;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 841;
            goto try_finally_handler_16;
        }
    }

    if (tmp_for_loop_3__iter_value.object == NULL)
    {
        tmp_for_loop_3__iter_value.object = tmp_assign_source_55;
    }
    else
    {
        PyObject *old = tmp_for_loop_3__iter_value.object;
        tmp_for_loop_3__iter_value.object = tmp_assign_source_55;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_13 = tmp_for_loop_3__iter_value.object;

    tmp_assign_source_56 = MAKE_ITERATOR( tmp_iter_arg_13 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 841;
        goto try_finally_handler_17;
    }
    if (tmp_tuple_unpack_3__source_iter.object == NULL)
    {
        tmp_tuple_unpack_3__source_iter.object = tmp_assign_source_56;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_3__source_iter.object;
        tmp_tuple_unpack_3__source_iter.object = tmp_assign_source_56;
        Py_DECREF( old );
    }
    tmp_unpack_5 = tmp_tuple_unpack_3__source_iter.object;

    tmp_assign_source_57 = UNPACK_PARAMETER_NEXT( tmp_unpack_5, 0 );
    if ( tmp_assign_source_57 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 841;
        goto try_finally_handler_17;
    }
    if (tmp_tuple_unpack_3__element_1.object == NULL)
    {
        tmp_tuple_unpack_3__element_1.object = tmp_assign_source_57;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_3__element_1.object;
        tmp_tuple_unpack_3__element_1.object = tmp_assign_source_57;
        Py_DECREF( old );
    }
    tmp_unpack_6 = tmp_tuple_unpack_3__source_iter.object;

    tmp_assign_source_58 = UNPACK_PARAMETER_NEXT( tmp_unpack_6, 1 );
    if ( tmp_assign_source_58 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 841;
        goto try_finally_handler_17;
    }
    if (tmp_tuple_unpack_3__element_2.object == NULL)
    {
        tmp_tuple_unpack_3__element_2.object = tmp_assign_source_58;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_3__element_2.object;
        tmp_tuple_unpack_3__element_2.object = tmp_assign_source_58;
        Py_DECREF( old );
    }
    tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_3 ); assert( PyIter_Check( tmp_iterator_name_3 ) );

    tmp_iterator_attempt_3 = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

    if (likely( tmp_iterator_attempt_3 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_17;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_3 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_17;
    }
    tmp_assign_source_59 = tmp_tuple_unpack_3__element_1.object;

    if (var_i.object == NULL)
    {
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_59 );
    }
    else
    {
        PyObject *old = var_i.object;
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_59 );
        Py_DECREF( old );
    }
    tmp_assign_source_60 = tmp_tuple_unpack_3__element_2.object;

    if (var_line.object == NULL)
    {
        var_line.object = INCREASE_REFCOUNT( tmp_assign_source_60 );
    }
    else
    {
        PyObject *old = var_line.object;
        var_line.object = INCREASE_REFCOUNT( tmp_assign_source_60 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_17:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_11 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_3__source_iter.object );
    tmp_tuple_unpack_3__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_1.object );
    tmp_tuple_unpack_3__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_2.object );
    tmp_tuple_unpack_3__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_11;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_14 != NULL )
    {
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;

        goto try_finally_handler_16;
    }

    goto finally_end_15;
    finally_end_15:;
    tmp_called_19 = var_split_line.object;

    if ( tmp_called_19 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170598 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 842;
        goto try_finally_handler_16;
    }

    tmp_call_arg_element_18 = var_line.object;

    if ( tmp_call_arg_element_18 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50418 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 842;
        goto try_finally_handler_16;
    }

    frame_function->f_lineno = 842;
    tmp_assign_source_61 = CALL_FUNCTION_WITH_ARGS1( tmp_called_19, tmp_call_arg_element_18 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 842;
        goto try_finally_handler_16;
    }
    if (var_vals.object == NULL)
    {
        var_vals.object = tmp_assign_source_61;
    }
    else
    {
        PyObject *old = var_vals.object;
        var_vals.object = tmp_assign_source_61;
        Py_DECREF( old );
    }
    tmp_len_arg_2 = var_vals.object;

    tmp_compare_left_9 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_compare_left_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 843;
        goto try_finally_handler_16;
    }
    tmp_compare_right_9 = const_int_0;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_9, tmp_compare_right_9 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_9 );

        frame_function->f_lineno = 843;
        goto try_finally_handler_16;
    }
    Py_DECREF( tmp_compare_left_9 );
    if (tmp_cmp_Eq_2 == 1)
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    goto loop_start_6;
    branch_no_14:;
    tmp_cond_value_8 = par_usecols.object;

    if ( tmp_cond_value_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 845;
        goto try_finally_handler_16;
    }

    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 845;
        goto try_finally_handler_16;
    }
    if (tmp_cond_truth_8 == 1)
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    // Tried code
    tmp_assign_source_62 = NULL;
    // Tried code
    tmp_iter_arg_14 = par_usecols.object;

    if ( tmp_iter_arg_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 846;
        goto try_finally_handler_19;
    }

    tmp_assign_source_63 = MAKE_ITERATOR( tmp_iter_arg_14 );
    if ( tmp_assign_source_63 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 846;
        goto try_finally_handler_19;
    }
    if (tmp_listcontr_3__listcontr_iter.object == NULL)
    {
        tmp_listcontr_3__listcontr_iter.object = tmp_assign_source_63;
    }
    else
    {
        PyObject *old = tmp_listcontr_3__listcontr_iter.object;
        tmp_listcontr_3__listcontr_iter.object = tmp_assign_source_63;
        Py_DECREF( old );
    }
    tmp_assign_source_64 = PyList_New( 0 );
    if (tmp_listcontr_3__listcontr_result.object == NULL)
    {
        tmp_listcontr_3__listcontr_result.object = tmp_assign_source_64;
    }
    else
    {
        PyObject *old = tmp_listcontr_3__listcontr_result.object;
        tmp_listcontr_3__listcontr_result.object = tmp_assign_source_64;
        Py_DECREF( old );
    }
    loop_start_7:;
    tmp_next_source_6 = tmp_listcontr_3__listcontr_iter.object;

    tmp_assign_source_65 = ITERATOR_NEXT( tmp_next_source_6 );
    if (tmp_assign_source_65 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_7;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 846;
            goto try_finally_handler_19;
        }
    }

    if (tmp_listcontr_3__iter_value_0.object == NULL)
    {
        tmp_listcontr_3__iter_value_0.object = tmp_assign_source_65;
    }
    else
    {
        PyObject *old = tmp_listcontr_3__iter_value_0.object;
        tmp_listcontr_3__iter_value_0.object = tmp_assign_source_65;
        Py_DECREF( old );
    }
    tmp_assign_source_66 = tmp_listcontr_3__iter_value_0.object;

    if (var_i.object == NULL)
    {
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_66 );
    }
    else
    {
        PyObject *old = var_i.object;
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_66 );
        Py_DECREF( old );
    }
    tmp_append_to_3 = tmp_listcontr_3__listcontr_result.object;

    tmp_subscr_target_2 = var_vals.object;

    if ( tmp_subscr_target_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 39043 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 846;
        goto try_finally_handler_19;
    }

    tmp_subscr_subscript_2 = var_i.object;

    tmp_append_value_3 = LOOKUP_SUBSCRIPT( tmp_subscr_target_2, tmp_subscr_subscript_2 );
    if ( tmp_append_value_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 846;
        goto try_finally_handler_19;
    }
    tmp_res = PyList_Append( tmp_append_to_3, tmp_append_value_3 );
    Py_DECREF( tmp_append_value_3 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 846;
        goto try_finally_handler_19;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 846;
        goto try_finally_handler_19;
    }
    goto loop_start_7;
    loop_end_7:;
    tmp_assign_source_62 = tmp_listcontr_3__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_19:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_12 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_3__iter_value_0.object );
    tmp_listcontr_3__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_12;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_15 != NULL )
    {
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;

        goto try_finally_handler_18;
    }

    goto finally_end_16;
    finally_end_16:;
    if (var_vals.object == NULL)
    {
        var_vals.object = INCREASE_REFCOUNT( tmp_assign_source_62 );
    }
    else
    {
        PyObject *old = var_vals.object;
        var_vals.object = INCREASE_REFCOUNT( tmp_assign_source_62 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_18:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_13 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_3__listcontr_result.object );
    tmp_listcontr_3__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_3__listcontr_iter.object );
    tmp_listcontr_3__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_13;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_16 != NULL )
    {
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;

        goto try_finally_handler_16;
    }

    goto finally_end_17;
    finally_end_17:;
    branch_no_15:;
    // Tried code
    tmp_assign_source_67 = NULL;
    // Tried code
    tmp_called_20 = LOOKUP_BUILTIN( const_str_plain_zip );
    if ( tmp_called_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 848;
        goto try_finally_handler_21;
    }
    tmp_call_arg_element_19 = par_converters.object;

    if ( tmp_call_arg_element_19 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170342 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 848;
        goto try_finally_handler_21;
    }

    tmp_call_arg_element_20 = var_vals.object;

    if ( tmp_call_arg_element_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 39043 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 848;
        goto try_finally_handler_21;
    }

    frame_function->f_lineno = 848;
    tmp_iter_arg_15 = CALL_FUNCTION_WITH_ARGS2( tmp_called_20, tmp_call_arg_element_19, tmp_call_arg_element_20 );
    if ( tmp_iter_arg_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 848;
        goto try_finally_handler_21;
    }
    tmp_assign_source_68 = MAKE_ITERATOR( tmp_iter_arg_15 );
    Py_DECREF( tmp_iter_arg_15 );
    if ( tmp_assign_source_68 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 848;
        goto try_finally_handler_21;
    }
    if (tmp_listcontr_4__listcontr_iter.object == NULL)
    {
        tmp_listcontr_4__listcontr_iter.object = tmp_assign_source_68;
    }
    else
    {
        PyObject *old = tmp_listcontr_4__listcontr_iter.object;
        tmp_listcontr_4__listcontr_iter.object = tmp_assign_source_68;
        Py_DECREF( old );
    }
    tmp_assign_source_69 = PyList_New( 0 );
    if (tmp_listcontr_4__listcontr_result.object == NULL)
    {
        tmp_listcontr_4__listcontr_result.object = tmp_assign_source_69;
    }
    else
    {
        PyObject *old = tmp_listcontr_4__listcontr_result.object;
        tmp_listcontr_4__listcontr_result.object = tmp_assign_source_69;
        Py_DECREF( old );
    }
    loop_start_8:;
    tmp_next_source_7 = tmp_listcontr_4__listcontr_iter.object;

    tmp_assign_source_70 = ITERATOR_NEXT( tmp_next_source_7 );
    if (tmp_assign_source_70 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_8;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 848;
            goto try_finally_handler_21;
        }
    }

    if (tmp_listcontr_4__iter_value_0.object == NULL)
    {
        tmp_listcontr_4__iter_value_0.object = tmp_assign_source_70;
    }
    else
    {
        PyObject *old = tmp_listcontr_4__iter_value_0.object;
        tmp_listcontr_4__iter_value_0.object = tmp_assign_source_70;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_16 = tmp_listcontr_4__iter_value_0.object;

    tmp_assign_source_71 = MAKE_ITERATOR( tmp_iter_arg_16 );
    if ( tmp_assign_source_71 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 848;
        goto try_finally_handler_22;
    }
    if (tmp_tuple_unpack_4__source_iter.object == NULL)
    {
        tmp_tuple_unpack_4__source_iter.object = tmp_assign_source_71;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_4__source_iter.object;
        tmp_tuple_unpack_4__source_iter.object = tmp_assign_source_71;
        Py_DECREF( old );
    }
    tmp_unpack_7 = tmp_tuple_unpack_4__source_iter.object;

    tmp_assign_source_72 = UNPACK_PARAMETER_NEXT( tmp_unpack_7, 0 );
    if ( tmp_assign_source_72 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 848;
        goto try_finally_handler_22;
    }
    if (tmp_tuple_unpack_4__element_1.object == NULL)
    {
        tmp_tuple_unpack_4__element_1.object = tmp_assign_source_72;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_4__element_1.object;
        tmp_tuple_unpack_4__element_1.object = tmp_assign_source_72;
        Py_DECREF( old );
    }
    tmp_unpack_8 = tmp_tuple_unpack_4__source_iter.object;

    tmp_assign_source_73 = UNPACK_PARAMETER_NEXT( tmp_unpack_8, 1 );
    if ( tmp_assign_source_73 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 848;
        goto try_finally_handler_22;
    }
    if (tmp_tuple_unpack_4__element_2.object == NULL)
    {
        tmp_tuple_unpack_4__element_2.object = tmp_assign_source_73;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_4__element_2.object;
        tmp_tuple_unpack_4__element_2.object = tmp_assign_source_73;
        Py_DECREF( old );
    }
    tmp_iterator_name_4 = tmp_tuple_unpack_4__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_4 ); assert( PyIter_Check( tmp_iterator_name_4 ) );

    tmp_iterator_attempt_4 = (*Py_TYPE( tmp_iterator_name_4 )->tp_iternext)( tmp_iterator_name_4 );

    if (likely( tmp_iterator_attempt_4 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_22;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_4 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_22;
    }
    tmp_assign_source_74 = tmp_tuple_unpack_4__element_1.object;

    if (var_conv.object == NULL)
    {
        var_conv.object = INCREASE_REFCOUNT( tmp_assign_source_74 );
    }
    else
    {
        PyObject *old = var_conv.object;
        var_conv.object = INCREASE_REFCOUNT( tmp_assign_source_74 );
        Py_DECREF( old );
    }
    tmp_assign_source_75 = tmp_tuple_unpack_4__element_2.object;

    if (var_val.object == NULL)
    {
        var_val.object = INCREASE_REFCOUNT( tmp_assign_source_75 );
    }
    else
    {
        PyObject *old = var_val.object;
        var_val.object = INCREASE_REFCOUNT( tmp_assign_source_75 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_22:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_14 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_4__source_iter.object );
    tmp_tuple_unpack_4__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_4__element_1.object );
    tmp_tuple_unpack_4__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_4__element_2.object );
    tmp_tuple_unpack_4__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_14;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_17 != NULL )
    {
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;

        goto try_finally_handler_21;
    }

    goto finally_end_18;
    finally_end_18:;
    tmp_append_to_4 = tmp_listcontr_4__listcontr_result.object;

    tmp_called_21 = var_conv.object;

    if ( tmp_called_21 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170884 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 848;
        goto try_finally_handler_21;
    }

    tmp_call_arg_element_21 = var_val.object;

    if ( tmp_call_arg_element_21 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28580 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 848;
        goto try_finally_handler_21;
    }

    frame_function->f_lineno = 848;
    tmp_append_value_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_21, tmp_call_arg_element_21 );
    if ( tmp_append_value_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 848;
        goto try_finally_handler_21;
    }
    tmp_res = PyList_Append( tmp_append_to_4, tmp_append_value_4 );
    Py_DECREF( tmp_append_value_4 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 848;
        goto try_finally_handler_21;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 848;
        goto try_finally_handler_21;
    }
    goto loop_start_8;
    loop_end_8:;
    tmp_assign_source_67 = tmp_listcontr_4__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_21:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_15 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_4__iter_value_0.object );
    tmp_listcontr_4__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_15;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_18 != NULL )
    {
        exception_type = exception_keeper_type_18;
        exception_value = exception_keeper_value_18;
        exception_tb = exception_keeper_tb_18;

        goto try_finally_handler_20;
    }

    goto finally_end_19;
    finally_end_19:;
    if (var_items.object == NULL)
    {
        var_items.object = INCREASE_REFCOUNT( tmp_assign_source_67 );
    }
    else
    {
        PyObject *old = var_items.object;
        var_items.object = INCREASE_REFCOUNT( tmp_assign_source_67 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_20:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_16 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_4__listcontr_result.object );
    tmp_listcontr_4__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_4__listcontr_iter.object );
    tmp_listcontr_4__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_16;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_19 != NULL )
    {
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;

        goto try_finally_handler_16;
    }

    goto finally_end_20;
    finally_end_20:;
    tmp_called_22 = var_pack_items.storage->object;

    if ( tmp_called_22 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170990 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 850;
        goto try_finally_handler_16;
    }

    tmp_call_arg_element_22 = var_items.object;

    if ( tmp_call_arg_element_22 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 41461 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 850;
        goto try_finally_handler_16;
    }

    tmp_call_arg_element_23 = var_packing.object;

    if ( tmp_call_arg_element_23 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171046 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 850;
        goto try_finally_handler_16;
    }

    frame_function->f_lineno = 850;
    tmp_assign_source_76 = CALL_FUNCTION_WITH_ARGS2( tmp_called_22, tmp_call_arg_element_22, tmp_call_arg_element_23 );
    if ( tmp_assign_source_76 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 850;
        goto try_finally_handler_16;
    }
    if (var_items.object == NULL)
    {
        var_items.object = tmp_assign_source_76;
    }
    else
    {
        PyObject *old = var_items.object;
        var_items.object = tmp_assign_source_76;
        Py_DECREF( old );
    }
    tmp_source_name_10 = var_X.object;

    if ( tmp_source_name_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 166501 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 851;
        goto try_finally_handler_16;
    }

    tmp_called_23 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_append );
    if ( tmp_called_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 851;
        goto try_finally_handler_16;
    }
    tmp_call_arg_element_24 = var_items.object;

    frame_function->f_lineno = 851;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_23, tmp_call_arg_element_24 );
    Py_DECREF( tmp_called_23 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 851;
        goto try_finally_handler_16;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 841;
        goto try_finally_handler_16;
    }
    goto loop_start_6;
    loop_end_6:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_16:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_17 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_3__iter_value.object );
    tmp_for_loop_3__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_3__for_iterator.object );
    tmp_for_loop_3__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_17;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_20 != NULL )
    {
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;

        goto try_finally_handler_1;
    }

    goto finally_end_21;
    finally_end_21:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_18 = frame_function->f_lineno;
    tmp_cond_value_9 = var_fown.object;

    if ( tmp_cond_value_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171099 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 853;
        goto try_finally_handler_error_1;
    }

    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 853;
        goto try_finally_handler_error_1;
    }
    if (tmp_cond_truth_9 == 1)
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_source_name_11 = var_fh.object;

    if ( tmp_source_name_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12843 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 854;
        goto try_finally_handler_error_1;
    }

    tmp_called_24 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_close );
    if ( tmp_called_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 854;
        goto try_finally_handler_error_1;
    }
    frame_function->f_lineno = 854;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_24 );
    Py_DECREF( tmp_called_24 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 854;
        goto try_finally_handler_error_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_16:;
    frame_function->f_lineno = tmp_tried_lineno_18;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_21 != NULL )
    {
        exception_type = exception_keeper_type_21;
        exception_value = exception_keeper_value_21;
        exception_tb = exception_keeper_tb_21;

        goto frame_exception_exit_1;
    }

    goto finally_end_22;
    try_finally_handler_error_1:;
    Py_XDECREF( exception_keeper_type_21 );exception_keeper_type_21 = NULL;
    Py_XDECREF( exception_keeper_value_21 );exception_keeper_value_21 = NULL;
    Py_XDECREF( exception_keeper_tb_21 );exception_keeper_tb_21 = NULL;
    goto frame_exception_exit_1;
    finally_end_22:;
    tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_12 == NULL ))
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 856;
        goto frame_exception_exit_1;
    }

    tmp_called_25 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_array );
    if ( tmp_called_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 856;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_25 = var_X.object;

    if ( tmp_call_arg_element_25 == NULL )
    {
        Py_DECREF( tmp_called_25 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 166501 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 856;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_26 = par_dtype.object;

    if ( tmp_call_arg_element_26 == NULL )
    {
        Py_DECREF( tmp_called_25 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 856;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 856;
    tmp_assign_source_77 = CALL_FUNCTION_WITH_ARGS2( tmp_called_25, tmp_call_arg_element_25, tmp_call_arg_element_26 );
    Py_DECREF( tmp_called_25 );
    if ( tmp_assign_source_77 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 856;
        goto frame_exception_exit_1;
    }
    if (var_X.object == NULL)
    {
        var_X.object = tmp_assign_source_77;
    }
    else
    {
        PyObject *old = var_X.object;
        var_X.object = tmp_assign_source_77;
        Py_DECREF( old );
    }
    // Tried code
    tmp_cond_value_10 = NULL;
    // Tried code
    tmp_source_name_13 = var_X.object;

    tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_ndim );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 859;
        goto try_finally_handler_24;
    }
    tmp_compexpr_right_1 = const_int_pos_3;
    tmp_assign_source_78 = RICH_COMPARE_EQ( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_assign_source_78 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 859;
        goto try_finally_handler_24;
    }
    assert( tmp_and_1__value_1.object == NULL );
    tmp_and_1__value_1.object = tmp_assign_source_78;

    tmp_cond_value_11 = tmp_and_1__value_1.object;

    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 859;
        goto try_finally_handler_24;
    }
    if (tmp_cond_truth_11 == 1)
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_cond_value_10 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1.object );
        tmp_and_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = 2;
    tmp_source_name_14 = var_X.object;

    tmp_slice_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_shape );
    if ( tmp_slice_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 859;
        goto try_finally_handler_25;
    }
    tmp_compexpr_left_2 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    Py_DECREF( tmp_slice_source_1 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 859;
        goto try_finally_handler_25;
    }
    tmp_compexpr_right_2 = const_tuple_int_pos_1_int_pos_1_tuple;
    tmp_cond_value_10 = RICH_COMPARE_EQ( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_cond_value_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 859;
        goto try_finally_handler_25;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_25:;
    exception_keeper_type_22 = exception_type;
    exception_keeper_value_22 = exception_value;
    exception_keeper_tb_22 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_22 != NULL )
    {
        exception_type = exception_keeper_type_22;
        exception_value = exception_keeper_value_22;
        exception_tb = exception_keeper_tb_22;

        goto try_finally_handler_24;
    }

    goto finally_end_23;
    finally_end_23:;
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_cond_value_10 = tmp_and_1__value_1.object;

    Py_INCREF( tmp_cond_value_10 );
    condexpr_end_3:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_24:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_23 != NULL )
    {
        exception_type = exception_keeper_type_23;
        exception_value = exception_keeper_value_23;
        exception_tb = exception_keeper_tb_23;

        goto try_finally_handler_23;
    }

    goto finally_end_24;
    finally_end_24:;
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_10 );

        frame_function->f_lineno = 859;
        goto try_finally_handler_23;
    }
    Py_DECREF( tmp_cond_value_10 );
    if (tmp_cond_truth_10 == 1)
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_assattr_name_1 = const_tuple_int_pos_1_int_neg_1_tuple;
    tmp_assattr_target_1 = var_X.object;

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 166501 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 860;
        goto try_finally_handler_23;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_shape, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 860;
        goto try_finally_handler_23;
    }
    branch_no_17:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_23:;
    exception_keeper_type_24 = exception_type;
    exception_keeper_value_24 = exception_value;
    exception_keeper_tb_24 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_19 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_1__value_1.object );
    tmp_and_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_19;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_24 != NULL )
    {
        exception_type = exception_keeper_type_24;
        exception_value = exception_keeper_value_24;
        exception_tb = exception_keeper_tb_24;

        goto frame_exception_exit_1;
    }

    goto finally_end_25;
    finally_end_25:;
    tmp_compare_left_10 = par_ndmin.object;

    if ( tmp_compare_left_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 168395 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 864;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_10 = LIST_COPY( const_list_int_0_int_pos_1_int_pos_2_list );
    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_10, tmp_compare_left_10 );
    if ( tmp_cmp_NotIn_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_10 );

        frame_function->f_lineno = 864;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_10 );
    if (tmp_cmp_NotIn_1 == 0)
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_binop_left_2 = const_str_digest_e7b482dd1ecfb54a6c3e286a8aa5f43c;
    tmp_binop_right_2 = par_ndmin.object;

    if ( tmp_binop_right_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 168395 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 865;
        goto frame_exception_exit_1;
    }

    tmp_make_exception_arg_2 = BINARY_OPERATION_REMAINDER( tmp_binop_left_2, tmp_binop_right_2 );
    if ( tmp_make_exception_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 865;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 865;
    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, tmp_make_exception_arg_2 );
    Py_DECREF( tmp_make_exception_arg_2 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 865;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_2;
    frame_function->f_lineno = 865;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_18:;
    tmp_source_name_15 = var_X.object;

    if ( tmp_source_name_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 166501 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 867;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_11 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_ndim );
    if ( tmp_compare_left_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 867;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_11 = par_ndmin.object;

    if ( tmp_compare_right_11 == NULL )
    {
        Py_DECREF( tmp_compare_left_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 168395 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 867;
        goto frame_exception_exit_1;
    }

    tmp_cmp_Gt_3 = RICH_COMPARE_BOOL_GT( tmp_compare_left_11, tmp_compare_right_11 );
    if ( tmp_cmp_Gt_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_11 );

        frame_function->f_lineno = 867;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_11 );
    if (tmp_cmp_Gt_3 == 1)
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_16 == NULL ))
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_16 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 868;
        goto frame_exception_exit_1;
    }

    tmp_called_26 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_squeeze );
    if ( tmp_called_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 868;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_27 = var_X.object;

    if ( tmp_call_arg_element_27 == NULL )
    {
        Py_DECREF( tmp_called_26 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 166501 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 868;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 868;
    tmp_assign_source_79 = CALL_FUNCTION_WITH_ARGS1( tmp_called_26, tmp_call_arg_element_27 );
    Py_DECREF( tmp_called_26 );
    if ( tmp_assign_source_79 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 868;
        goto frame_exception_exit_1;
    }
    if (var_X.object == NULL)
    {
        var_X.object = tmp_assign_source_79;
    }
    else
    {
        PyObject *old = var_X.object;
        var_X.object = tmp_assign_source_79;
        Py_DECREF( old );
    }
    branch_no_19:;
    tmp_source_name_17 = var_X.object;

    if ( tmp_source_name_17 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 166501 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 871;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_12 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_ndim );
    if ( tmp_compare_left_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 871;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_12 = par_ndmin.object;

    if ( tmp_compare_right_12 == NULL )
    {
        Py_DECREF( tmp_compare_left_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 168395 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 871;
        goto frame_exception_exit_1;
    }

    tmp_cmp_Lt_1 = RICH_COMPARE_BOOL_LT( tmp_compare_left_12, tmp_compare_right_12 );
    if ( tmp_cmp_Lt_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_12 );

        frame_function->f_lineno = 871;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_12 );
    if (tmp_cmp_Lt_1 == 1)
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_compare_left_13 = par_ndmin.object;

    if ( tmp_compare_left_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 168395 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 872;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_13 = const_int_pos_1;
    tmp_cmp_Eq_3 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_13, tmp_compare_right_13 );
    if ( tmp_cmp_Eq_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 872;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_3 == 1)
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_18 == NULL ))
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_18 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 873;
        goto frame_exception_exit_1;
    }

    tmp_called_27 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_atleast_1d );
    if ( tmp_called_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 873;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_28 = var_X.object;

    if ( tmp_call_arg_element_28 == NULL )
    {
        Py_DECREF( tmp_called_27 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 166501 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 873;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 873;
    tmp_assign_source_80 = CALL_FUNCTION_WITH_ARGS1( tmp_called_27, tmp_call_arg_element_28 );
    Py_DECREF( tmp_called_27 );
    if ( tmp_assign_source_80 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 873;
        goto frame_exception_exit_1;
    }
    if (var_X.object == NULL)
    {
        var_X.object = tmp_assign_source_80;
    }
    else
    {
        PyObject *old = var_X.object;
        var_X.object = tmp_assign_source_80;
        Py_DECREF( old );
    }
    goto branch_end_21;
    branch_no_21:;
    tmp_compare_left_14 = par_ndmin.object;

    if ( tmp_compare_left_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 168395 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 874;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_14 = const_int_pos_2;
    tmp_cmp_Eq_4 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_14, tmp_compare_right_14 );
    if ( tmp_cmp_Eq_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 874;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_4 == 1)
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_source_name_20 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_20 == NULL ))
    {
        tmp_source_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 875;
        goto frame_exception_exit_1;
    }

    tmp_called_28 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_atleast_2d );
    if ( tmp_called_28 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 875;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_29 = var_X.object;

    if ( tmp_call_arg_element_29 == NULL )
    {
        Py_DECREF( tmp_called_28 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 166501 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 875;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 875;
    tmp_source_name_19 = CALL_FUNCTION_WITH_ARGS1( tmp_called_28, tmp_call_arg_element_29 );
    Py_DECREF( tmp_called_28 );
    if ( tmp_source_name_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 875;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_81 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_T );
    Py_DECREF( tmp_source_name_19 );
    if ( tmp_assign_source_81 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 875;
        goto frame_exception_exit_1;
    }
    if (var_X.object == NULL)
    {
        var_X.object = tmp_assign_source_81;
    }
    else
    {
        PyObject *old = var_X.object;
        var_X.object = tmp_assign_source_81;
        Py_DECREF( old );
    }
    branch_no_22:;
    branch_end_21:;
    branch_no_20:;
    tmp_cond_value_12 = par_unpack.object;

    if ( tmp_cond_value_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171149 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 877;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 877;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_12 == 1)
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_len_arg_3 = var_dtype_types.object;

    if ( tmp_len_arg_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170713 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 878;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_15 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_compare_left_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 878;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_15 = const_int_pos_1;
    tmp_cmp_Gt_4 = RICH_COMPARE_BOOL_GT( tmp_compare_left_15, tmp_compare_right_15 );
    if ( tmp_cmp_Gt_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_15 );

        frame_function->f_lineno = 878;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_15 );
    if (tmp_cmp_Gt_4 == 1)
    {
        goto branch_yes_24;
    }
    else
    {
        goto branch_no_24;
    }
    branch_yes_24:;
    // Tried code
    tmp_return_value = NULL;
    // Tried code
    tmp_source_name_21 = par_dtype.object;

    if ( tmp_source_name_21 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 880;
        goto try_finally_handler_27;
    }

    tmp_iter_arg_17 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_names );
    if ( tmp_iter_arg_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 880;
        goto try_finally_handler_27;
    }
    tmp_assign_source_82 = MAKE_ITERATOR( tmp_iter_arg_17 );
    Py_DECREF( tmp_iter_arg_17 );
    if ( tmp_assign_source_82 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 880;
        goto try_finally_handler_27;
    }
    assert( tmp_listcontr_5__listcontr_iter.object == NULL );
    tmp_listcontr_5__listcontr_iter.object = tmp_assign_source_82;

    tmp_assign_source_83 = PyList_New( 0 );
    assert( tmp_listcontr_5__listcontr_result.object == NULL );
    tmp_listcontr_5__listcontr_result.object = tmp_assign_source_83;

    loop_start_9:;
    tmp_next_source_8 = tmp_listcontr_5__listcontr_iter.object;

    tmp_assign_source_84 = ITERATOR_NEXT( tmp_next_source_8 );
    if (tmp_assign_source_84 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_9;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 880;
            goto try_finally_handler_27;
        }
    }

    if (tmp_listcontr_5__iter_value_0.object == NULL)
    {
        tmp_listcontr_5__iter_value_0.object = tmp_assign_source_84;
    }
    else
    {
        PyObject *old = tmp_listcontr_5__iter_value_0.object;
        tmp_listcontr_5__iter_value_0.object = tmp_assign_source_84;
        Py_DECREF( old );
    }
    tmp_assign_source_85 = tmp_listcontr_5__iter_value_0.object;

    if (var_field.object == NULL)
    {
        var_field.object = INCREASE_REFCOUNT( tmp_assign_source_85 );
    }
    else
    {
        PyObject *old = var_field.object;
        var_field.object = INCREASE_REFCOUNT( tmp_assign_source_85 );
        Py_DECREF( old );
    }
    tmp_append_to_5 = tmp_listcontr_5__listcontr_result.object;

    tmp_subscr_target_3 = var_X.object;

    if ( tmp_subscr_target_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 166501 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 880;
        goto try_finally_handler_27;
    }

    tmp_subscr_subscript_3 = var_field.object;

    tmp_append_value_5 = LOOKUP_SUBSCRIPT( tmp_subscr_target_3, tmp_subscr_subscript_3 );
    if ( tmp_append_value_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 880;
        goto try_finally_handler_27;
    }
    tmp_res = PyList_Append( tmp_append_to_5, tmp_append_value_5 );
    Py_DECREF( tmp_append_value_5 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 880;
        goto try_finally_handler_27;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 880;
        goto try_finally_handler_27;
    }
    goto loop_start_9;
    loop_end_9:;
    tmp_return_value = tmp_listcontr_5__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_27:;
    exception_keeper_type_25 = exception_type;
    exception_keeper_value_25 = exception_value;
    exception_keeper_tb_25 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_20 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_5__iter_value_0.object );
    tmp_listcontr_5__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_20;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_25 != NULL )
    {
        exception_type = exception_keeper_type_25;
        exception_value = exception_keeper_value_25;
        exception_tb = exception_keeper_tb_25;

        goto try_finally_handler_26;
    }

    goto finally_end_26;
    finally_end_26:;
    Py_INCREF( tmp_return_value );
    goto try_finally_handler_start_1;
    try_finally_handler_start_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_26:;
    exception_keeper_type_26 = exception_type;
    exception_keeper_value_26 = exception_value;
    exception_keeper_tb_26 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_21 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_5__listcontr_result.object );
    tmp_listcontr_5__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_5__listcontr_iter.object );
    tmp_listcontr_5__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_21;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_26 != NULL )
    {
        exception_type = exception_keeper_type_26;
        exception_value = exception_keeper_value_26;
        exception_tb = exception_keeper_tb_26;

        goto frame_exception_exit_1;
    }

    // Return value if any.
    if ( tmp_return_value != NULL )
    {
        goto frame_return_exit_1;
    }

    goto finally_end_27;
    finally_end_27:;
    goto branch_end_24;
    branch_no_24:;
    tmp_source_name_22 = var_X.object;

    if ( tmp_source_name_22 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 166501 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 882;
        goto frame_exception_exit_1;
    }

    tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_T );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 882;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_end_24:;
    goto branch_end_23;
    branch_no_23:;
    tmp_return_value = var_X.object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 166501 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 884;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_end_23:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_user_converters.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_user_converters,
            var_user_converters.object
        );

    }
    if ((var_fown.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fown,
            var_fown.object
        );

    }
    if ((var_fh.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fh,
            var_fh.object
        );

    }
    if ((var_bz2.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_bz2,
            var_bz2.object
        );

    }
    if ((var_X.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_X,
            var_X.object
        );

    }
    if ((var_flatten_dtype.storage != NULL && var_flatten_dtype.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_flatten_dtype,
            var_flatten_dtype.storage->object
        );

    }
    if ((var_pack_items.storage != NULL && var_pack_items.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_pack_items,
            var_pack_items.storage->object
        );

    }
    if ((var_split_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_split_line,
            var_split_line.object
        );

    }
    if ((var_defconv.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_defconv,
            var_defconv.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((var_first_vals.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_first_vals,
            var_first_vals.object
        );

    }
    if ((var_first_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_first_line,
            var_first_line.object
        );

    }
    if ((var_N.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_N,
            var_N.object
        );

    }
    if ((var_dtype_types.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_dtype_types,
            var_dtype_types.object
        );

    }
    if ((var_packing.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_packing,
            var_packing.object
        );

    }
    if ((var_dt.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_dt,
            var_dt.object
        );

    }
    if ((var_conv.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_conv,
            var_conv.object
        );

    }
    if ((var_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_line,
            var_line.object
        );

    }
    if ((var_vals.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_vals,
            var_vals.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((var_items.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_items,
            var_items.object
        );

    }
    if ((var_field.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_field,
            var_field.object
        );

    }
    if ((par_fname.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fname,
            par_fname.object
        );

    }
    if ((par_dtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_dtype,
            par_dtype.object
        );

    }
    if ((par_comments.storage != NULL && par_comments.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_comments,
            par_comments.storage->object
        );

    }
    if ((par_delimiter.storage != NULL && par_delimiter.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_delimiter,
            par_delimiter.storage->object
        );

    }
    if ((par_converters.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_converters,
            par_converters.object
        );

    }
    if ((par_skiprows.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_skiprows,
            par_skiprows.object
        );

    }
    if ((par_usecols.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_usecols,
            par_usecols.object
        );

    }
    if ((par_unpack.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_unpack,
            par_unpack.object
        );

    }
    if ((par_ndmin.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ndmin,
            par_ndmin.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_11_loadtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_fname = NULL;
    PyObject *_python_par_dtype = NULL;
    PyObject *_python_par_comments = NULL;
    PyObject *_python_par_delimiter = NULL;
    PyObject *_python_par_converters = NULL;
    PyObject *_python_par_skiprows = NULL;
    PyObject *_python_par_usecols = NULL;
    PyObject *_python_par_unpack = NULL;
    PyObject *_python_par_ndmin = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "loadtxt() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_fname == key )
            {
                assert( _python_par_fname == NULL );
                _python_par_fname = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_dtype == key )
            {
                assert( _python_par_dtype == NULL );
                _python_par_dtype = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_comments == key )
            {
                assert( _python_par_comments == NULL );
                _python_par_comments = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_delimiter == key )
            {
                assert( _python_par_delimiter == NULL );
                _python_par_delimiter = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_converters == key )
            {
                assert( _python_par_converters == NULL );
                _python_par_converters = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_skiprows == key )
            {
                assert( _python_par_skiprows == NULL );
                _python_par_skiprows = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_usecols == key )
            {
                assert( _python_par_usecols == NULL );
                _python_par_usecols = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_unpack == key )
            {
                assert( _python_par_unpack == NULL );
                _python_par_unpack = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_ndmin == key )
            {
                assert( _python_par_ndmin == NULL );
                _python_par_ndmin = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_fname, key ) == 1 )
            {
                assert( _python_par_fname == NULL );
                _python_par_fname = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_dtype, key ) == 1 )
            {
                assert( _python_par_dtype == NULL );
                _python_par_dtype = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_comments, key ) == 1 )
            {
                assert( _python_par_comments == NULL );
                _python_par_comments = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_delimiter, key ) == 1 )
            {
                assert( _python_par_delimiter == NULL );
                _python_par_delimiter = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_converters, key ) == 1 )
            {
                assert( _python_par_converters == NULL );
                _python_par_converters = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_skiprows, key ) == 1 )
            {
                assert( _python_par_skiprows == NULL );
                _python_par_skiprows = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_usecols, key ) == 1 )
            {
                assert( _python_par_usecols == NULL );
                _python_par_usecols = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_unpack, key ) == 1 )
            {
                assert( _python_par_unpack == NULL );
                _python_par_unpack = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_ndmin, key ) == 1 )
            {
                assert( _python_par_ndmin == NULL );
                _python_par_ndmin = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "loadtxt() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 9 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_fname != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_fname = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_fname == NULL )
    {
        if ( 0 + self->m_defaults_given >= 9  )
        {
            _python_par_fname = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 9 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_dtype != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_dtype = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_dtype == NULL )
    {
        if ( 1 + self->m_defaults_given >= 9  )
        {
            _python_par_dtype = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 9 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_comments != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_comments = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_comments == NULL )
    {
        if ( 2 + self->m_defaults_given >= 9  )
        {
            _python_par_comments = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 9 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_delimiter != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_delimiter = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_delimiter == NULL )
    {
        if ( 3 + self->m_defaults_given >= 9  )
        {
            _python_par_delimiter = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 9 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 4 < args_given ))
    {
         if (unlikely( _python_par_converters != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 4 );
             goto error_exit;
         }

        _python_par_converters = INCREASE_REFCOUNT( args[ 4 ] );
    }
    else if ( _python_par_converters == NULL )
    {
        if ( 4 + self->m_defaults_given >= 9  )
        {
            _python_par_converters = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 4 - 9 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 5 < args_given ))
    {
         if (unlikely( _python_par_skiprows != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 5 );
             goto error_exit;
         }

        _python_par_skiprows = INCREASE_REFCOUNT( args[ 5 ] );
    }
    else if ( _python_par_skiprows == NULL )
    {
        if ( 5 + self->m_defaults_given >= 9  )
        {
            _python_par_skiprows = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 5 - 9 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 6 < args_given ))
    {
         if (unlikely( _python_par_usecols != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 6 );
             goto error_exit;
         }

        _python_par_usecols = INCREASE_REFCOUNT( args[ 6 ] );
    }
    else if ( _python_par_usecols == NULL )
    {
        if ( 6 + self->m_defaults_given >= 9  )
        {
            _python_par_usecols = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 6 - 9 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 7 < args_given ))
    {
         if (unlikely( _python_par_unpack != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 7 );
             goto error_exit;
         }

        _python_par_unpack = INCREASE_REFCOUNT( args[ 7 ] );
    }
    else if ( _python_par_unpack == NULL )
    {
        if ( 7 + self->m_defaults_given >= 9  )
        {
            _python_par_unpack = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 7 - 9 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 8 < args_given ))
    {
         if (unlikely( _python_par_ndmin != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 8 );
             goto error_exit;
         }

        _python_par_ndmin = INCREASE_REFCOUNT( args[ 8 ] );
    }
    else if ( _python_par_ndmin == NULL )
    {
        if ( 8 + self->m_defaults_given >= 9  )
        {
            _python_par_ndmin = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 8 - 9 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_fname == NULL || _python_par_dtype == NULL || _python_par_comments == NULL || _python_par_delimiter == NULL || _python_par_converters == NULL || _python_par_skiprows == NULL || _python_par_usecols == NULL || _python_par_unpack == NULL || _python_par_ndmin == NULL ))
    {
        PyObject *values[] = { _python_par_fname, _python_par_dtype, _python_par_comments, _python_par_delimiter, _python_par_converters, _python_par_skiprows, _python_par_usecols, _python_par_unpack, _python_par_ndmin };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_11_loadtxt_of_module_numpy$lib$npyio( self, _python_par_fname, _python_par_dtype, _python_par_comments, _python_par_delimiter, _python_par_converters, _python_par_skiprows, _python_par_usecols, _python_par_unpack, _python_par_ndmin );

error_exit:;

    Py_XDECREF( _python_par_fname );
    Py_XDECREF( _python_par_dtype );
    Py_XDECREF( _python_par_comments );
    Py_XDECREF( _python_par_delimiter );
    Py_XDECREF( _python_par_converters );
    Py_XDECREF( _python_par_skiprows );
    Py_XDECREF( _python_par_usecols );
    Py_XDECREF( _python_par_unpack );
    Py_XDECREF( _python_par_ndmin );

    return NULL;
}

static PyObject *dparse_function_11_loadtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 9 )
    {
        return impl_function_11_loadtxt_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), INCREASE_REFCOUNT( args[ 7 ] ), INCREASE_REFCOUNT( args[ 8 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_11_loadtxt_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_dt )
{
    // The context of the function.
    struct _context_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio_t *_python_context = (struct _context_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalVariable par_dt; par_dt.object = _python_par_dt;
    PyObjectLocalVariable var_shape;
    PyObjectLocalVariable var_packing;
    PyObjectLocalVariable var_dim;
    PyObjectLocalVariable var_types;
    PyObjectLocalVariable var_field;
    PyObjectLocalVariable var_tp;
    PyObjectLocalVariable var_bytes;
    PyObjectLocalVariable var_flat_dt;
    PyObjectLocalVariable var_flat_packing;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_for_loop_2__for_iterator;
    PyObjectTempVariable tmp_for_loop_2__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_tuple_unpack_2__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_2__element_1;
    PyObjectTempVariable tmp_tuple_unpack_2__element_2;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_left_3;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_binop_right_3;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Gt_1;
    int tmp_cmp_Gt_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_frame_locals;
    PyObject *tmp_int_arg_1;
    bool tmp_is_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iterator_attempt_1;
    PyObject *tmp_iterator_attempt_2;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_iterator_name_2;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_list_element_1;
    PyObject *tmp_list_element_2;
    PyObject *tmp_list_element_3;
    PyObject *tmp_list_element_4;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_return_value;
    PyObject *tmp_sliceobj_lower_1;
    PyObject *tmp_sliceobj_step_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_subscript_2;
    PyObject *tmp_subscr_subscript_3;
    PyObject *tmp_subscr_subscript_4;
    PyObject *tmp_subscr_subscript_5;
    PyObject *tmp_subscr_target_1;
    PyObject *tmp_subscr_target_2;
    PyObject *tmp_subscr_target_3;
    PyObject *tmp_subscr_target_4;
    PyObject *tmp_subscr_target_5;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    int tmp_tried_lineno_4;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    PyObject *tmp_unpack_4;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_52fd256f359093ff10a18d3c42f84afc, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_dt.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 54381 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 745;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_names );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 745;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    Py_DECREF( tmp_compare_left_1 );
    if (tmp_is_1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_2 = par_dt.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 54381 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 749;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_shape );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 749;
        goto frame_exception_exit_1;
    }
    assert( var_shape.object == NULL );
    var_shape.object = tmp_assign_source_1;

    tmp_len_arg_1 = var_shape.object;

    tmp_compare_left_2 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 750;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_2 = const_int_0;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_2 );

        frame_function->f_lineno = 750;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_2 );
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_return_value = PyTuple_New( 2 );
    tmp_tuple_element_1 = PyList_New( 1 );
    tmp_source_name_3 = par_dt.object;

    if ( tmp_source_name_3 == NULL )
    {
        Py_DECREF( tmp_return_value );
        Py_DECREF( tmp_tuple_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 54381 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 751;
        goto frame_exception_exit_1;
    }

    tmp_list_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_base );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_return_value );
        Py_DECREF( tmp_tuple_element_1 );

        frame_function->f_lineno = 751;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_tuple_element_1, 0, tmp_list_element_1 );
    PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = Py_None;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
    goto frame_return_exit_1;
    goto branch_end_2;
    branch_no_2:;
    tmp_assign_source_2 = PyList_New( 1 );
    tmp_list_element_2 = PyTuple_New( 2 );
    tmp_subscr_target_1 = var_shape.object;

    tmp_subscr_subscript_1 = const_int_neg_1;
    tmp_tuple_element_2 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_2 );
        Py_DECREF( tmp_list_element_2 );

        frame_function->f_lineno = 753;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_list_element_2, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = LOOKUP_BUILTIN( const_str_plain_list );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_2 );
        Py_DECREF( tmp_list_element_2 );

        frame_function->f_lineno = 753;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_list_element_2, 1, tmp_tuple_element_2 );
    PyList_SET_ITEM( tmp_assign_source_2, 0, tmp_list_element_2 );
    assert( var_packing.object == NULL );
    var_packing.object = tmp_assign_source_2;

    tmp_len_arg_2 = var_shape.object;

    tmp_compare_left_3 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_compare_left_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 754;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_3 = const_int_pos_1;
    tmp_cmp_Gt_1 = RICH_COMPARE_BOOL_GT( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_cmp_Gt_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_3 );

        frame_function->f_lineno = 754;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_3 );
    if (tmp_cmp_Gt_1 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_4 = par_dt.object;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 54381 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 755;
        goto frame_exception_exit_1;
    }

    tmp_subscr_target_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_shape );
    if ( tmp_subscr_target_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 755;
        goto frame_exception_exit_1;
    }
    tmp_sliceobj_lower_1 = const_int_neg_2;
    tmp_sliceobj_step_1 = const_int_neg_1;
    tmp_subscr_subscript_2 = MAKE_SLICEOBJ( tmp_sliceobj_lower_1, Py_None, tmp_sliceobj_step_1 );
    tmp_iter_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_2, tmp_subscr_subscript_2 );
    Py_DECREF( tmp_subscr_target_2 );
    Py_DECREF( tmp_subscr_subscript_2 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 755;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 755;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_3;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_4 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 755;
            goto try_finally_handler_1;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_4;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_4;
        Py_DECREF( old );
    }
    tmp_assign_source_5 = tmp_for_loop_1__iter_value.object;

    if (var_dim.object == NULL)
    {
        var_dim.object = INCREASE_REFCOUNT( tmp_assign_source_5 );
    }
    else
    {
        PyObject *old = var_dim.object;
        var_dim.object = INCREASE_REFCOUNT( tmp_assign_source_5 );
        Py_DECREF( old );
    }
    tmp_assign_source_6 = PyList_New( 1 );
    tmp_list_element_3 = PyTuple_New( 2 );
    tmp_binop_left_1 = var_dim.object;

    tmp_subscr_target_4 = var_packing.object;

    if ( tmp_subscr_target_4 == NULL )
    {
        Py_DECREF( tmp_assign_source_6 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171046 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 756;
        goto try_finally_handler_1;
    }

    tmp_subscr_subscript_4 = const_int_0;
    tmp_subscr_target_3 = LOOKUP_SUBSCRIPT( tmp_subscr_target_4, tmp_subscr_subscript_4 );
    if ( tmp_subscr_target_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_6 );
        Py_DECREF( tmp_list_element_3 );

        frame_function->f_lineno = 756;
        goto try_finally_handler_1;
    }
    tmp_subscr_subscript_3 = const_int_0;
    tmp_binop_right_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_3, tmp_subscr_subscript_3 );
    Py_DECREF( tmp_subscr_target_3 );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_6 );
        Py_DECREF( tmp_list_element_3 );

        frame_function->f_lineno = 756;
        goto try_finally_handler_1;
    }
    tmp_tuple_element_3 = BINARY_OPERATION_MUL( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_6 );
        Py_DECREF( tmp_list_element_3 );

        frame_function->f_lineno = 756;
        goto try_finally_handler_1;
    }
    PyTuple_SET_ITEM( tmp_list_element_3, 0, tmp_tuple_element_3 );
    tmp_binop_left_2 = var_packing.object;

    if ( tmp_binop_left_2 == NULL )
    {
        Py_DECREF( tmp_assign_source_6 );
        Py_DECREF( tmp_list_element_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171046 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 756;
        goto try_finally_handler_1;
    }

    tmp_binop_right_2 = var_dim.object;

    tmp_tuple_element_3 = BINARY_OPERATION_MUL( tmp_binop_left_2, tmp_binop_right_2 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_6 );
        Py_DECREF( tmp_list_element_3 );

        frame_function->f_lineno = 756;
        goto try_finally_handler_1;
    }
    PyTuple_SET_ITEM( tmp_list_element_3, 1, tmp_tuple_element_3 );
    PyList_SET_ITEM( tmp_assign_source_6, 0, tmp_list_element_3 );
    if (var_packing.object == NULL)
    {
        var_packing.object = tmp_assign_source_6;
    }
    else
    {
        PyObject *old = var_packing.object;
        var_packing.object = tmp_assign_source_6;
        Py_DECREF( old );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 755;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    branch_no_3:;
    tmp_return_value = PyTuple_New( 2 );
    tmp_binop_left_3 = PyList_New( 1 );
    tmp_source_name_5 = par_dt.object;

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_return_value );
        Py_DECREF( tmp_binop_left_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 54381 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 757;
        goto frame_exception_exit_1;
    }

    tmp_list_element_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_base );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_return_value );
        Py_DECREF( tmp_binop_left_3 );

        frame_function->f_lineno = 757;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_binop_left_3, 0, tmp_list_element_4 );
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_6 == NULL )
    {
        Py_DECREF( tmp_return_value );
        Py_DECREF( tmp_binop_left_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 757;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_prod );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_return_value );
        Py_DECREF( tmp_binop_left_3 );

        frame_function->f_lineno = 757;
        goto frame_exception_exit_1;
    }
    tmp_source_name_7 = par_dt.object;

    if ( tmp_source_name_7 == NULL )
    {
        Py_DECREF( tmp_return_value );
        Py_DECREF( tmp_binop_left_3 );
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 54381 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 757;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_shape );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_return_value );
        Py_DECREF( tmp_binop_left_3 );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 757;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 757;
    tmp_int_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_int_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_return_value );
        Py_DECREF( tmp_binop_left_3 );

        frame_function->f_lineno = 757;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_3 = PyNumber_Int( tmp_int_arg_1 );
    Py_DECREF( tmp_int_arg_1 );
    if ( tmp_binop_right_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_return_value );
        Py_DECREF( tmp_binop_left_3 );

        frame_function->f_lineno = 757;
        goto frame_exception_exit_1;
    }
    tmp_tuple_element_4 = BINARY_OPERATION_MUL( tmp_binop_left_3, tmp_binop_right_3 );
    Py_DECREF( tmp_binop_left_3 );
    Py_DECREF( tmp_binop_right_3 );
    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_return_value );

        frame_function->f_lineno = 757;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = var_packing.object;

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171046 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 757;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_4 );
    goto frame_return_exit_1;
    branch_end_2:;
    goto branch_end_1;
    branch_no_1:;
    tmp_assign_source_7 = PyList_New( 0 );
    assert( var_types.object == NULL );
    var_types.object = tmp_assign_source_7;

    tmp_assign_source_8 = PyList_New( 0 );
    assert( var_packing.object == NULL );
    var_packing.object = tmp_assign_source_8;

    tmp_source_name_8 = par_dt.object;

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 54381 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 761;
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_names );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 761;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_9 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 761;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator.object == NULL );
    tmp_for_loop_2__for_iterator.object = tmp_assign_source_9;

    // Tried code
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator.object;

    tmp_assign_source_10 = ITERATOR_NEXT( tmp_next_source_2 );
    if (tmp_assign_source_10 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_2;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 761;
            goto try_finally_handler_2;
        }
    }

    if (tmp_for_loop_2__iter_value.object == NULL)
    {
        tmp_for_loop_2__iter_value.object = tmp_assign_source_10;
    }
    else
    {
        PyObject *old = tmp_for_loop_2__iter_value.object;
        tmp_for_loop_2__iter_value.object = tmp_assign_source_10;
        Py_DECREF( old );
    }
    tmp_assign_source_11 = tmp_for_loop_2__iter_value.object;

    if (var_field.object == NULL)
    {
        var_field.object = INCREASE_REFCOUNT( tmp_assign_source_11 );
    }
    else
    {
        PyObject *old = var_field.object;
        var_field.object = INCREASE_REFCOUNT( tmp_assign_source_11 );
        Py_DECREF( old );
    }
    // Tried code
    tmp_source_name_9 = par_dt.object;

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 54381 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 762;
        goto try_finally_handler_3;
    }

    tmp_subscr_target_5 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_fields );
    if ( tmp_subscr_target_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 762;
        goto try_finally_handler_3;
    }
    tmp_subscr_subscript_5 = var_field.object;

    tmp_iter_arg_3 = LOOKUP_SUBSCRIPT( tmp_subscr_target_5, tmp_subscr_subscript_5 );
    Py_DECREF( tmp_subscr_target_5 );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 762;
        goto try_finally_handler_3;
    }
    tmp_assign_source_12 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 762;
        goto try_finally_handler_3;
    }
    if (tmp_tuple_unpack_1__source_iter.object == NULL)
    {
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_12;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter.object;
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_12;
        Py_DECREF( old );
    }
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_13 = UNPACK_PARAMETER_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_13 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 762;
        goto try_finally_handler_3;
    }
    if (tmp_tuple_unpack_1__element_1.object == NULL)
    {
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_13;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_1.object;
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_13;
        Py_DECREF( old );
    }
    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_14 = UNPACK_PARAMETER_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_14 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 762;
        goto try_finally_handler_3;
    }
    if (tmp_tuple_unpack_1__element_2.object == NULL)
    {
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_14;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_2.object;
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_14;
        Py_DECREF( old );
    }
    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_1 ); assert( PyIter_Check( tmp_iterator_name_1 ) );

    tmp_iterator_attempt_1 = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt_1 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_3;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_1 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_3;
    }
    tmp_assign_source_15 = tmp_tuple_unpack_1__element_1.object;

    if (var_tp.object == NULL)
    {
        var_tp.object = INCREASE_REFCOUNT( tmp_assign_source_15 );
    }
    else
    {
        PyObject *old = var_tp.object;
        var_tp.object = INCREASE_REFCOUNT( tmp_assign_source_15 );
        Py_DECREF( old );
    }
    tmp_assign_source_16 = tmp_tuple_unpack_1__element_2.object;

    if (var_bytes.object == NULL)
    {
        var_bytes.object = INCREASE_REFCOUNT( tmp_assign_source_16 );
    }
    else
    {
        PyObject *old = var_bytes.object;
        var_bytes.object = INCREASE_REFCOUNT( tmp_assign_source_16 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter.object );
    tmp_tuple_unpack_1__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1.object );
    tmp_tuple_unpack_1__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2.object );
    tmp_tuple_unpack_1__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_2;
    }

    goto finally_end_2;
    finally_end_2:;
    // Tried code
    tmp_called_2 = _python_context->closure_flatten_dtype.storage->object;

    if ( tmp_called_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170654 ], 59, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 763;
        goto try_finally_handler_4;
    }

    tmp_call_arg_element_2 = var_tp.object;

    if ( tmp_call_arg_element_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 79717 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 763;
        goto try_finally_handler_4;
    }

    frame_function->f_lineno = 763;
    tmp_iter_arg_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    if ( tmp_iter_arg_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 763;
        goto try_finally_handler_4;
    }
    tmp_assign_source_17 = MAKE_ITERATOR( tmp_iter_arg_4 );
    Py_DECREF( tmp_iter_arg_4 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 763;
        goto try_finally_handler_4;
    }
    if (tmp_tuple_unpack_2__source_iter.object == NULL)
    {
        tmp_tuple_unpack_2__source_iter.object = tmp_assign_source_17;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_2__source_iter.object;
        tmp_tuple_unpack_2__source_iter.object = tmp_assign_source_17;
        Py_DECREF( old );
    }
    tmp_unpack_3 = tmp_tuple_unpack_2__source_iter.object;

    tmp_assign_source_18 = UNPACK_PARAMETER_NEXT( tmp_unpack_3, 0 );
    if ( tmp_assign_source_18 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 763;
        goto try_finally_handler_4;
    }
    if (tmp_tuple_unpack_2__element_1.object == NULL)
    {
        tmp_tuple_unpack_2__element_1.object = tmp_assign_source_18;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_2__element_1.object;
        tmp_tuple_unpack_2__element_1.object = tmp_assign_source_18;
        Py_DECREF( old );
    }
    tmp_unpack_4 = tmp_tuple_unpack_2__source_iter.object;

    tmp_assign_source_19 = UNPACK_PARAMETER_NEXT( tmp_unpack_4, 1 );
    if ( tmp_assign_source_19 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 763;
        goto try_finally_handler_4;
    }
    if (tmp_tuple_unpack_2__element_2.object == NULL)
    {
        tmp_tuple_unpack_2__element_2.object = tmp_assign_source_19;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_2__element_2.object;
        tmp_tuple_unpack_2__element_2.object = tmp_assign_source_19;
        Py_DECREF( old );
    }
    tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_2 ); assert( PyIter_Check( tmp_iterator_name_2 ) );

    tmp_iterator_attempt_2 = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

    if (likely( tmp_iterator_attempt_2 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_4;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_2 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_4;
    }
    tmp_assign_source_20 = tmp_tuple_unpack_2__element_1.object;

    if (var_flat_dt.object == NULL)
    {
        var_flat_dt.object = INCREASE_REFCOUNT( tmp_assign_source_20 );
    }
    else
    {
        PyObject *old = var_flat_dt.object;
        var_flat_dt.object = INCREASE_REFCOUNT( tmp_assign_source_20 );
        Py_DECREF( old );
    }
    tmp_assign_source_21 = tmp_tuple_unpack_2__element_2.object;

    if (var_flat_packing.object == NULL)
    {
        var_flat_packing.object = INCREASE_REFCOUNT( tmp_assign_source_21 );
    }
    else
    {
        PyObject *old = var_flat_packing.object;
        var_flat_packing.object = INCREASE_REFCOUNT( tmp_assign_source_21 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_2__source_iter.object );
    tmp_tuple_unpack_2__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_1.object );
    tmp_tuple_unpack_2__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2.object );
    tmp_tuple_unpack_2__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto try_finally_handler_2;
    }

    goto finally_end_3;
    finally_end_3:;
    tmp_source_name_10 = var_types.object;

    if ( tmp_source_name_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155652 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 764;
        goto try_finally_handler_2;
    }

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_extend );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 764;
        goto try_finally_handler_2;
    }
    tmp_call_arg_element_3 = var_flat_dt.object;

    if ( tmp_call_arg_element_3 == NULL )
    {
        Py_DECREF( tmp_called_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171201 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 764;
        goto try_finally_handler_2;
    }

    frame_function->f_lineno = 764;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_3 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 764;
        goto try_finally_handler_2;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_11 = var_tp.object;

    if ( tmp_source_name_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 79717 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 766;
        goto try_finally_handler_2;
    }

    tmp_len_arg_3 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_shape );
    if ( tmp_len_arg_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 766;
        goto try_finally_handler_2;
    }
    tmp_compare_left_4 = BUILTIN_LEN( tmp_len_arg_3 );
    Py_DECREF( tmp_len_arg_3 );
    if ( tmp_compare_left_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 766;
        goto try_finally_handler_2;
    }
    tmp_compare_right_4 = const_int_0;
    tmp_cmp_Gt_2 = RICH_COMPARE_BOOL_GT( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_cmp_Gt_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_4 );

        frame_function->f_lineno = 766;
        goto try_finally_handler_2;
    }
    Py_DECREF( tmp_compare_left_4 );
    if (tmp_cmp_Gt_2 == 1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_source_name_12 = var_packing.object;

    if ( tmp_source_name_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171046 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 767;
        goto try_finally_handler_2;
    }

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_extend );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 767;
        goto try_finally_handler_2;
    }
    tmp_call_arg_element_4 = var_flat_packing.object;

    if ( tmp_call_arg_element_4 == NULL )
    {
        Py_DECREF( tmp_called_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171254 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 767;
        goto try_finally_handler_2;
    }

    frame_function->f_lineno = 767;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 767;
        goto try_finally_handler_2;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_4;
    branch_no_4:;
    tmp_source_name_13 = var_packing.object;

    if ( tmp_source_name_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171046 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 769;
        goto try_finally_handler_2;
    }

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_append );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 769;
        goto try_finally_handler_2;
    }
    tmp_call_arg_element_5 = PyTuple_New( 2 );
    tmp_len_arg_4 = var_flat_dt.object;

    if ( tmp_len_arg_4 == NULL )
    {
        Py_DECREF( tmp_called_5 );
        Py_DECREF( tmp_call_arg_element_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171201 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 769;
        goto try_finally_handler_2;
    }

    tmp_tuple_element_5 = BUILTIN_LEN( tmp_len_arg_4 );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_5 );
        Py_DECREF( tmp_call_arg_element_5 );

        frame_function->f_lineno = 769;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_call_arg_element_5, 0, tmp_tuple_element_5 );
    tmp_tuple_element_5 = var_flat_packing.object;

    if ( tmp_tuple_element_5 == NULL )
    {
        Py_DECREF( tmp_called_5 );
        Py_DECREF( tmp_call_arg_element_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171254 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 769;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_call_arg_element_5, 1, tmp_tuple_element_5 );
    frame_function->f_lineno = 769;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_5 );
    Py_DECREF( tmp_called_5 );
    Py_DECREF( tmp_call_arg_element_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 769;
        goto try_finally_handler_2;
    }
    Py_DECREF( tmp_unused );
    branch_end_4:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 761;
        goto try_finally_handler_2;
    }
    goto loop_start_2;
    loop_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_4 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_2__iter_value.object );
    tmp_for_loop_2__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator.object );
    tmp_for_loop_2__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_4;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto frame_exception_exit_1;
    }

    goto finally_end_4;
    finally_end_4:;
    tmp_return_value = PyTuple_New( 2 );
    tmp_tuple_element_6 = var_types.object;

    if ( tmp_tuple_element_6 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155652 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 770;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_6 );
    tmp_tuple_element_6 = var_packing.object;

    if ( tmp_tuple_element_6 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171046 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 770;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_6 );
    goto frame_return_exit_1;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_shape.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_shape,
            var_shape.object
        );

    }
    if ((var_packing.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_packing,
            var_packing.object
        );

    }
    if ((var_dim.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_dim,
            var_dim.object
        );

    }
    if ((var_types.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_types,
            var_types.object
        );

    }
    if ((var_field.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_field,
            var_field.object
        );

    }
    if ((var_tp.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_tp,
            var_tp.object
        );

    }
    if ((var_bytes.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_bytes,
            var_bytes.object
        );

    }
    if ((var_flat_dt.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_flat_dt,
            var_flat_dt.object
        );

    }
    if ((var_flat_packing.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_flat_packing,
            var_flat_packing.object
        );

    }
    if ((_python_context->closure_flatten_dtype.storage != NULL && _python_context->closure_flatten_dtype.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_flatten_dtype,
            _python_context->closure_flatten_dtype.storage->object
        );

    }
    if ((par_dt.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_dt,
            par_dt.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_dt = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "flatten_dtype() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_dt == key )
            {
                assert( _python_par_dt == NULL );
                _python_par_dt = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_dt, key ) == 1 )
            {
                assert( _python_par_dt == NULL );
                _python_par_dt = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "flatten_dtype() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_dt != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_dt = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_dt == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_dt = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_dt == NULL ))
    {
        PyObject *values[] = { _python_par_dt };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio( self, _python_par_dt );

error_exit:;

    Py_XDECREF( _python_par_dt );

    return NULL;
}

static PyObject *dparse_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_items, PyObject *_python_par_packing )
{
    // The context of the function.
    struct _context_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio_t *_python_context = (struct _context_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalVariable par_items; par_items.object = _python_par_items;
    PyObjectLocalVariable par_packing; par_packing.object = _python_par_packing;
    PyObjectLocalVariable var_start;
    PyObjectLocalVariable var_ret;
    PyObjectLocalVariable var_length;
    PyObjectLocalVariable var_subpacking;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_inplace_assign_1__inplace_start;
    PyObjectTempVariable tmp_inplace_assign_1__inplace_end;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    int tmp_cmp_Eq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_frame_locals;
    bool tmp_is_1;
    bool tmp_is_2;
    bool tmp_isnot_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iterator_attempt_1;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_list_arg_1;
    PyObject *tmp_next_source_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_upper_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    PyObject *tmp_tuple_arg_1;
    PyObject *tmp_tuple_arg_2;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_c728753e4a78c15392865fd3a76a179a, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_packing.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171046 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 774;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = Py_None;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 774;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_subscr_target_1 = par_items.object;

    if ( tmp_subscr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 41461 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 775;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_1 = const_int_0;
    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 775;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    tmp_compare_left_2 = par_packing.object;

    if ( tmp_compare_left_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171046 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 776;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_2 = LOOKUP_BUILTIN( const_str_plain_tuple );
    if ( tmp_compare_right_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 776;
        goto frame_exception_exit_1;
    }
    tmp_is_1 = ( tmp_compare_left_2 == tmp_compare_right_2 );
    if (tmp_is_1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_tuple_arg_1 = par_items.object;

    if ( tmp_tuple_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 41461 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 777;
        goto frame_exception_exit_1;
    }

    tmp_return_value = PySequence_Tuple( tmp_tuple_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 777;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_2;
    branch_no_2:;
    tmp_compare_left_3 = par_packing.object;

    if ( tmp_compare_left_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171046 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 778;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_3 = LOOKUP_BUILTIN( const_str_plain_list );
    if ( tmp_compare_right_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 778;
        goto frame_exception_exit_1;
    }
    tmp_is_2 = ( tmp_compare_left_3 == tmp_compare_right_3 );
    if (tmp_is_2)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_list_arg_1 = par_items.object;

    if ( tmp_list_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 41461 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 779;
        goto frame_exception_exit_1;
    }

    tmp_return_value = PySequence_List( tmp_list_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 779;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_3;
    branch_no_3:;
    tmp_assign_source_1 = const_int_0;
    assert( var_start.object == NULL );
    var_start.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    tmp_assign_source_2 = PyList_New( 0 );
    assert( var_ret.object == NULL );
    var_ret.object = tmp_assign_source_2;

    tmp_iter_arg_1 = par_packing.object;

    if ( tmp_iter_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171046 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 783;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 783;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_3;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_4 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 783;
            goto try_finally_handler_1;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_4;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_4;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_2 = tmp_for_loop_1__iter_value.object;

    tmp_assign_source_5 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 783;
        goto try_finally_handler_2;
    }
    if (tmp_tuple_unpack_1__source_iter.object == NULL)
    {
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_5;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter.object;
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_5;
        Py_DECREF( old );
    }
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_6 = UNPACK_PARAMETER_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_6 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 783;
        goto try_finally_handler_2;
    }
    if (tmp_tuple_unpack_1__element_1.object == NULL)
    {
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_6;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_1.object;
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_6;
        Py_DECREF( old );
    }
    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_7 = UNPACK_PARAMETER_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_7 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 783;
        goto try_finally_handler_2;
    }
    if (tmp_tuple_unpack_1__element_2.object == NULL)
    {
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_7;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_2.object;
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_7;
        Py_DECREF( old );
    }
    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_1 ); assert( PyIter_Check( tmp_iterator_name_1 ) );

    tmp_iterator_attempt_1 = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt_1 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_2;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_1 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_2;
    }
    tmp_assign_source_8 = tmp_tuple_unpack_1__element_1.object;

    if (var_length.object == NULL)
    {
        var_length.object = INCREASE_REFCOUNT( tmp_assign_source_8 );
    }
    else
    {
        PyObject *old = var_length.object;
        var_length.object = INCREASE_REFCOUNT( tmp_assign_source_8 );
        Py_DECREF( old );
    }
    tmp_assign_source_9 = tmp_tuple_unpack_1__element_2.object;

    if (var_subpacking.object == NULL)
    {
        var_subpacking.object = INCREASE_REFCOUNT( tmp_assign_source_9 );
    }
    else
    {
        PyObject *old = var_subpacking.object;
        var_subpacking.object = INCREASE_REFCOUNT( tmp_assign_source_9 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter.object );
    tmp_tuple_unpack_1__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1.object );
    tmp_tuple_unpack_1__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2.object );
    tmp_tuple_unpack_1__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_source_name_1 = var_ret.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 38779 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 784;
        goto try_finally_handler_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_append );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 784;
        goto try_finally_handler_1;
    }
    tmp_called_2 = _python_context->closure_pack_items.storage->object;

    if ( tmp_called_2 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170990 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 784;
        goto try_finally_handler_1;
    }

    tmp_slice_source_1 = par_items.object;

    if ( tmp_slice_source_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 41461 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 784;
        goto try_finally_handler_1;
    }

    tmp_slice_lower_1 = var_start.object;

    if ( tmp_slice_lower_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43988 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 784;
        goto try_finally_handler_1;
    }

    tmp_binop_left_1 = var_start.object;

    if ( tmp_binop_left_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43988 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 784;
        goto try_finally_handler_1;
    }

    tmp_binop_right_1 = var_length.object;

    if ( tmp_binop_right_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 16815 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 784;
        goto try_finally_handler_1;
    }

    tmp_slice_upper_1 = BINARY_OPERATION_ADD( tmp_binop_left_1, tmp_binop_right_1 );
    if ( tmp_slice_upper_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 784;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_2 = LOOKUP_SLICE( tmp_slice_source_1, tmp_slice_lower_1, tmp_slice_upper_1 );
    Py_DECREF( tmp_slice_upper_1 );
    if ( tmp_call_arg_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 784;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_3 = var_subpacking.object;

    if ( tmp_call_arg_element_3 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_arg_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171312 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 784;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 784;
    tmp_call_arg_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_2, tmp_call_arg_element_2, tmp_call_arg_element_3 );
    Py_DECREF( tmp_call_arg_element_2 );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 784;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 784;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 784;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_10 = var_start.object;

    if ( tmp_assign_source_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 43988 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 785;
        goto try_finally_handler_1;
    }

    if (tmp_inplace_assign_1__inplace_start.object == NULL)
    {
        tmp_inplace_assign_1__inplace_start.object = INCREASE_REFCOUNT( tmp_assign_source_10 );
    }
    else
    {
        PyObject *old = tmp_inplace_assign_1__inplace_start.object;
        tmp_inplace_assign_1__inplace_start.object = INCREASE_REFCOUNT( tmp_assign_source_10 );
        Py_DECREF( old );
    }
    // Tried code
    tmp_binop_left_2 = tmp_inplace_assign_1__inplace_start.object;

    tmp_binop_right_2 = var_length.object;

    if ( tmp_binop_right_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 16815 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 785;
        goto try_finally_handler_3;
    }

    tmp_assign_source_11 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_binop_left_2, tmp_binop_right_2 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 785;
        goto try_finally_handler_3;
    }
    if (tmp_inplace_assign_1__inplace_end.object == NULL)
    {
        tmp_inplace_assign_1__inplace_end.object = tmp_assign_source_11;
    }
    else
    {
        PyObject *old = tmp_inplace_assign_1__inplace_end.object;
        tmp_inplace_assign_1__inplace_end.object = tmp_assign_source_11;
        Py_DECREF( old );
    }
    tmp_compare_left_4 = tmp_inplace_assign_1__inplace_start.object;

    tmp_compare_right_4 = tmp_inplace_assign_1__inplace_end.object;

    tmp_isnot_1 = ( tmp_compare_left_4 != tmp_compare_right_4 );
    if (tmp_isnot_1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_assign_source_12 = tmp_inplace_assign_1__inplace_end.object;

    if (var_start.object == NULL)
    {
        var_start.object = INCREASE_REFCOUNT( tmp_assign_source_12 );
    }
    else
    {
        PyObject *old = var_start.object;
        var_start.object = INCREASE_REFCOUNT( tmp_assign_source_12 );
        Py_DECREF( old );
    }
    branch_no_4:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    tmp_result = tmp_inplace_assign_1__inplace_start.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_inplace_assign_1__inplace_start.object );
        tmp_inplace_assign_1__inplace_start.object = NULL;
    }

    assert( tmp_result != false );
    Py_XDECREF( tmp_inplace_assign_1__inplace_end.object );
    tmp_inplace_assign_1__inplace_end.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_1;
    }

    goto finally_end_2;
    finally_end_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 783;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto frame_exception_exit_1;
    }

    goto finally_end_3;
    finally_end_3:;
    tmp_tuple_arg_2 = var_ret.object;

    if ( tmp_tuple_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 38779 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 786;
        goto frame_exception_exit_1;
    }

    tmp_return_value = PySequence_Tuple( tmp_tuple_arg_2 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 786;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_end_3:;
    branch_end_2:;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_start.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_start,
            var_start.object
        );

    }
    if ((var_ret.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ret,
            var_ret.object
        );

    }
    if ((var_length.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_length,
            var_length.object
        );

    }
    if ((var_subpacking.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_subpacking,
            var_subpacking.object
        );

    }
    if ((_python_context->closure_pack_items.storage != NULL && _python_context->closure_pack_items.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_pack_items,
            _python_context->closure_pack_items.storage->object
        );

    }
    if ((par_items.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_items,
            par_items.object
        );

    }
    if ((par_packing.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_packing,
            par_packing.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_items = NULL;
    PyObject *_python_par_packing = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "pack_items() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_items == key )
            {
                assert( _python_par_items == NULL );
                _python_par_items = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_packing == key )
            {
                assert( _python_par_packing == NULL );
                _python_par_packing = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_items, key ) == 1 )
            {
                assert( _python_par_items == NULL );
                _python_par_items = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_packing, key ) == 1 )
            {
                assert( _python_par_packing == NULL );
                _python_par_packing = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "pack_items() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_items != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_items = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_items == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_items = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_packing != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_packing = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_packing == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_packing = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_items == NULL || _python_par_packing == NULL ))
    {
        PyObject *values[] = { _python_par_items, _python_par_packing };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio( self, _python_par_items, _python_par_packing );

error_exit:;

    Py_XDECREF( _python_par_items );
    Py_XDECREF( _python_par_packing );

    return NULL;
}

static PyObject *dparse_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_line )
{
    // The context of the function.
    struct _context_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio_t *_python_context = (struct _context_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalVariable par_line; par_line.object = _python_par_line;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_16b4bbd2dfd91f472d5dbe71078ffe0c, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_3 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_3 == NULL ))
    {
        tmp_called_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 790;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = par_line.object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50418 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 790;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 790;
    tmp_source_name_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_1 );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 790;
        goto frame_exception_exit_1;
    }
    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_split );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 790;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_2 = _python_context->closure_comments.storage->object;

    if ( tmp_call_arg_element_2 == NULL )
    {
        Py_DECREF( tmp_called_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155754 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 790;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 790;
    tmp_subscr_target_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_subscr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 790;
        goto frame_exception_exit_1;
    }
    tmp_subscr_subscript_1 = const_int_0;
    tmp_source_name_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    Py_DECREF( tmp_subscr_target_1 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 790;
        goto frame_exception_exit_1;
    }
    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_strip );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 790;
        goto frame_exception_exit_1;
    }
    tmp_called_4 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_4 == NULL ))
    {
        tmp_called_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_4 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 790;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_4 = const_str_digest_81051bcc2cf1bedf378224b0a93e2877;
    frame_function->f_lineno = 790;
    tmp_call_arg_element_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_4 );
    if ( tmp_call_arg_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 790;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 790;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_3 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_arg_element_3 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 790;
        goto frame_exception_exit_1;
    }
    if (par_line.object == NULL)
    {
        par_line.object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = par_line.object;
        par_line.object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    tmp_cond_value_1 = par_line.object;

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 791;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_3 = par_line.object;

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_split );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 792;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_5 = _python_context->closure_delimiter.storage->object;

    if ( tmp_call_arg_element_5 == NULL )
    {
        Py_DECREF( tmp_called_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155808 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 792;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 792;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_5 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 792;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    tmp_return_value = PyList_New( 0 );
    goto frame_return_exit_1;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_line,
            par_line.object
        );

    }
    if ((_python_context->closure_comments.storage != NULL && _python_context->closure_comments.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_comments,
            _python_context->closure_comments.storage->object
        );

    }
    if ((_python_context->closure_delimiter.storage != NULL && _python_context->closure_delimiter.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_delimiter,
            _python_context->closure_delimiter.storage->object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_line = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "split_line() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_line == key )
            {
                assert( _python_par_line == NULL );
                _python_par_line = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_line, key ) == 1 )
            {
                assert( _python_par_line == NULL );
                _python_par_line = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "split_line() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_line != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_line = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_line == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_line = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_line == NULL ))
    {
        PyObject *values[] = { _python_par_line };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio( self, _python_par_line );

error_exit:;

    Py_XDECREF( _python_par_line );

    return NULL;
}

static PyObject *dparse_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_12_savetxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_fname, PyObject *_python_par_X, PyObject *_python_par_fmt, PyObject *_python_par_delimiter, PyObject *_python_par_newline, PyObject *_python_par_header, PyObject *_python_par_footer, PyObject *_python_par_comments )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_fname; par_fname.object = _python_par_fname;
    PyObjectLocalVariable par_X; par_X.object = _python_par_X;
    PyObjectLocalVariable par_fmt; par_fmt.object = _python_par_fmt;
    PyObjectLocalVariable par_delimiter; par_delimiter.object = _python_par_delimiter;
    PyObjectLocalVariable par_newline; par_newline.object = _python_par_newline;
    PyObjectLocalVariable par_header; par_header.object = _python_par_header;
    PyObjectLocalVariable par_footer; par_footer.object = _python_par_footer;
    PyObjectLocalVariable par_comments; par_comments.object = _python_par_comments;
    PyObjectLocalVariable var_own_fh;
    PyObjectLocalVariable var_gzip;
    PyObjectLocalVariable var_fh;
    PyObjectLocalVariable var_ncol;
    PyObjectLocalVariable var_iscomplex_X;
    PyObjectLocalVariable var_format;
    PyObjectLocalVariable var_n_fmt_chars;
    PyObjectLocalVariable var_error;
    PyObjectLocalVariable var_row;
    PyObjectLocalVariable var_row2;
    PyObjectLocalVariable var_number;
    PyObjectTempVariable tmp_and_1__value_1;
    PyObjectTempVariable tmp_and_2__value_1;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_for_loop_2__for_iterator;
    PyObjectTempVariable tmp_for_loop_2__iter_value;
    PyObjectTempVariable tmp_for_loop_3__for_iterator;
    PyObjectTempVariable tmp_for_loop_3__iter_value;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_left_3;
    PyObject *tmp_binop_left_4;
    PyObject *tmp_binop_left_5;
    PyObject *tmp_binop_left_6;
    PyObject *tmp_binop_left_7;
    PyObject *tmp_binop_left_8;
    PyObject *tmp_binop_left_9;
    PyObject *tmp_binop_left_10;
    PyObject *tmp_binop_left_11;
    PyObject *tmp_binop_left_12;
    PyObject *tmp_binop_left_13;
    PyObject *tmp_binop_left_14;
    PyObject *tmp_binop_left_15;
    PyObject *tmp_binop_left_16;
    PyObject *tmp_binop_left_17;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_binop_right_3;
    PyObject *tmp_binop_right_4;
    PyObject *tmp_binop_right_5;
    PyObject *tmp_binop_right_6;
    PyObject *tmp_binop_right_7;
    PyObject *tmp_binop_right_8;
    PyObject *tmp_binop_right_9;
    PyObject *tmp_binop_right_10;
    PyObject *tmp_binop_right_11;
    PyObject *tmp_binop_right_12;
    PyObject *tmp_binop_right_13;
    PyObject *tmp_binop_right_14;
    PyObject *tmp_binop_right_15;
    PyObject *tmp_binop_right_16;
    PyObject *tmp_binop_right_17;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_call_arg_element_14;
    PyObject *tmp_call_arg_element_15;
    PyObject *tmp_call_arg_element_16;
    PyObject *tmp_call_arg_element_17;
    PyObject *tmp_call_arg_element_18;
    PyObject *tmp_call_arg_element_19;
    PyObject *tmp_call_arg_element_20;
    PyObject *tmp_call_arg_element_21;
    PyObject *tmp_call_arg_element_22;
    PyObject *tmp_call_arg_element_23;
    PyObject *tmp_call_arg_element_24;
    PyObject *tmp_call_arg_element_25;
    PyObject *tmp_call_arg_element_26;
    PyObject *tmp_call_arg_element_27;
    PyObject *tmp_call_arg_element_28;
    PyObject *tmp_call_arg_element_29;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    PyObject *tmp_called_11;
    PyObject *tmp_called_12;
    PyObject *tmp_called_13;
    PyObject *tmp_called_14;
    PyObject *tmp_called_15;
    PyObject *tmp_called_16;
    PyObject *tmp_called_17;
    PyObject *tmp_called_18;
    PyObject *tmp_called_19;
    PyObject *tmp_called_20;
    PyObject *tmp_called_21;
    PyObject *tmp_called_22;
    PyObject *tmp_called_23;
    PyObject *tmp_called_24;
    PyObject *tmp_called_25;
    PyObject *tmp_called_26;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Gt_1;
    int tmp_cmp_Gt_2;
    int tmp_cmp_GtE_1;
    int tmp_cmp_In_1;
    int tmp_cmp_NotEq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_frame_locals;
    PyObject *tmp_hasattr_attr_1;
    PyObject *tmp_hasattr_source_1;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    bool tmp_is_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_list_element_1;
    PyObject *tmp_list_element_2;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_make_exception_arg_3;
    PyObject *tmp_make_exception_arg_4;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_open_filename_1;
    PyObject *tmp_open_filename_2;
    PyObject *tmp_open_mode_1;
    PyObject *tmp_open_mode_2;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_type_3;
    PyObject *tmp_raise_type_4;
    PyObject *tmp_raise_type_5;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_str_arg_1;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_subscript_2;
    PyObject *tmp_subscr_target_1;
    PyObject *tmp_subscr_target_2;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    int tmp_tried_lineno_4;
    int tmp_tried_lineno_5;
    int tmp_tried_lineno_6;
    PyObject *tmp_tuple_arg_1;
    PyObject *tmp_tuple_arg_2;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_type_arg_1;
    PyObject *tmp_unary_arg_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_f5f387ad2cf16fb181eed62b4ee3ab44, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_isinstance_inst_1 = par_fmt.object;

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 39142 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1000;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_bytes );

    if (unlikely( tmp_isinstance_cls_1 == NULL ))
    {
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bytes );
    }

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52107 ], 34, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1000;
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1000;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asstr );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asstr );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171368 ], 34, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1001;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = par_fmt.object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 39142 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1001;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1001;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1001;
        goto frame_exception_exit_1;
    }
    if (par_fmt.object == NULL)
    {
        par_fmt.object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = par_fmt.object;
        par_fmt.object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    branch_no_1:;
    tmp_called_2 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asstr );

    if (unlikely( tmp_called_2 == NULL ))
    {
        tmp_called_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asstr );
    }

    if ( tmp_called_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171368 ], 34, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1002;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_2 = par_delimiter.object;

    if ( tmp_call_arg_element_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155808 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1002;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1002;
    tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1002;
        goto frame_exception_exit_1;
    }
    if (par_delimiter.object == NULL)
    {
        par_delimiter.object = tmp_assign_source_2;
    }
    else
    {
        PyObject *old = par_delimiter.object;
        par_delimiter.object = tmp_assign_source_2;
        Py_DECREF( old );
    }
    tmp_assign_source_3 = Py_False;
    assert( var_own_fh.object == NULL );
    var_own_fh.object = INCREASE_REFCOUNT( tmp_assign_source_3 );

    tmp_called_3 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__is_string_like );

    if (unlikely( tmp_called_3 == NULL ))
    {
        tmp_called_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__is_string_like );
    }

    if ( tmp_called_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155296 ], 44, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1005;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_3 = par_fname.object;

    if ( tmp_call_arg_element_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1005;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1005;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_3 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1005;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        frame_function->f_lineno = 1005;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_4 = Py_True;
    assert( var_own_fh.object != NULL );
    {
        PyObject *old = var_own_fh.object;
        var_own_fh.object = INCREASE_REFCOUNT( tmp_assign_source_4 );
        Py_DECREF( old );
    }

    tmp_source_name_1 = par_fname.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1007;
        goto frame_exception_exit_1;
    }

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_endswith );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1007;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_4 = const_str_digest_12decaf9245f4bf9f86ce8272481ee1f;
    frame_function->f_lineno = 1007;
    tmp_cond_value_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1007;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        frame_function->f_lineno = 1007;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_own_fh.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_own_fh,
            var_own_fh.object
        );

    }
    if ((var_gzip.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_gzip,
            var_gzip.object
        );

    }
    if ((var_fh.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_fh,
            var_fh.object
        );

    }
    if ((var_ncol.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ncol,
            var_ncol.object
        );

    }
    if ((var_iscomplex_X.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_iscomplex_X,
            var_iscomplex_X.object
        );

    }
    if ((var_format.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_format,
            var_format.object
        );

    }
    if ((var_n_fmt_chars.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_n_fmt_chars,
            var_n_fmt_chars.object
        );

    }
    if ((var_error.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_error,
            var_error.object
        );

    }
    if ((var_row.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_row,
            var_row.object
        );

    }
    if ((var_row2.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_row2,
            var_row2.object
        );

    }
    if ((var_number.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_number,
            var_number.object
        );

    }
    if ((par_fname.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_fname,
            par_fname.object
        );

    }
    if ((par_X.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_X,
            par_X.object
        );

    }
    if ((par_fmt.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_fmt,
            par_fmt.object
        );

    }
    if ((par_delimiter.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_delimiter,
            par_delimiter.object
        );

    }
    if ((par_newline.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_newline,
            par_newline.object
        );

    }
    if ((par_header.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_header,
            par_header.object
        );

    }
    if ((par_footer.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_footer,
            par_footer.object
        );

    }
    if ((par_comments.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_comments,
            par_comments.object
        );

    }
    frame_function->f_lineno = 1008;
    tmp_assign_source_5 = IMPORT_MODULE( const_str_plain_gzip, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1008;
        goto frame_exception_exit_1;
    }
    assert( var_gzip.object == NULL );
    var_gzip.object = tmp_assign_source_5;

    tmp_source_name_2 = var_gzip.object;

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_open );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1009;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_5 = par_fname.object;

    if ( tmp_call_arg_element_5 == NULL )
    {
        Py_DECREF( tmp_called_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1009;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_6 = const_str_plain_wb;
    frame_function->f_lineno = 1009;
    tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS2( tmp_called_5, tmp_call_arg_element_5, tmp_call_arg_element_6 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1009;
        goto frame_exception_exit_1;
    }
    assert( var_fh.object == NULL );
    var_fh.object = tmp_assign_source_6;

    goto branch_end_3;
    branch_no_3:;
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5370 ], 32, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1011;
        goto frame_exception_exit_1;
    }

    tmp_subscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_version_info );
    if ( tmp_subscr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1011;
        goto frame_exception_exit_1;
    }
    tmp_subscr_subscript_1 = const_int_0;
    tmp_compare_left_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    Py_DECREF( tmp_subscr_target_1 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1011;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = const_int_pos_3;
    tmp_cmp_GtE_1 = RICH_COMPARE_BOOL_GE( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_GtE_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        frame_function->f_lineno = 1011;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    if (tmp_cmp_GtE_1 == 1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_open_filename_1 = par_fname.object;

    if ( tmp_open_filename_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1012;
        goto frame_exception_exit_1;
    }

    tmp_open_mode_1 = const_str_plain_wb;
    tmp_assign_source_7 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1012;
        goto frame_exception_exit_1;
    }
    assert( var_fh.object == NULL );
    var_fh.object = tmp_assign_source_7;

    goto branch_end_4;
    branch_no_4:;
    tmp_open_filename_2 = par_fname.object;

    if ( tmp_open_filename_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1014;
        goto frame_exception_exit_1;
    }

    tmp_open_mode_2 = const_str_plain_w;
    tmp_assign_source_8 = BUILTIN_OPEN( tmp_open_filename_2, tmp_open_mode_2, NULL );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1014;
        goto frame_exception_exit_1;
    }
    assert( var_fh.object == NULL );
    var_fh.object = tmp_assign_source_8;

    branch_end_4:;
    branch_end_3:;
    goto branch_end_2;
    branch_no_2:;
    tmp_hasattr_source_1 = par_fname.object;

    if ( tmp_hasattr_source_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1015;
        goto frame_exception_exit_1;
    }

    tmp_hasattr_attr_1 = const_str_plain_write;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_1, tmp_hasattr_attr_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1015;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_assign_source_9 = par_fname.object;

    if ( tmp_assign_source_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1016;
        goto frame_exception_exit_1;
    }

    assert( var_fh.object == NULL );
    var_fh.object = INCREASE_REFCOUNT( tmp_assign_source_9 );

    goto branch_end_5;
    branch_no_5:;
    tmp_make_exception_arg_1 = const_str_digest_17c6f94ec8e324f393931ac71502d159;
    frame_function->f_lineno = 1018;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1018;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 1018;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_end_5:;
    branch_end_2:;
    // Tried code
    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1021;
        goto try_finally_handler_1;
    }

    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_asarray );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1021;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_7 = par_X.object;

    if ( tmp_call_arg_element_7 == NULL )
    {
        Py_DECREF( tmp_called_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 166501 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1021;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 1021;
    tmp_assign_source_10 = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_7 );
    Py_DECREF( tmp_called_6 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1021;
        goto try_finally_handler_1;
    }
    if (par_X.object == NULL)
    {
        par_X.object = tmp_assign_source_10;
    }
    else
    {
        PyObject *old = par_X.object;
        par_X.object = tmp_assign_source_10;
        Py_DECREF( old );
    }
    tmp_source_name_5 = par_X.object;

    tmp_compare_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_ndim );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1024;
        goto try_finally_handler_1;
    }
    tmp_compare_right_2 = const_int_pos_1;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_2 );

        frame_function->f_lineno = 1024;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_compare_left_2 );
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_source_name_7 = par_X.object;

    tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_dtype );
    if ( tmp_source_name_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1026;
        goto try_finally_handler_1;
    }
    tmp_compare_left_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_names );
    Py_DECREF( tmp_source_name_6 );
    if ( tmp_compare_left_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1026;
        goto try_finally_handler_1;
    }
    tmp_compare_right_3 = Py_None;
    tmp_is_1 = ( tmp_compare_left_3 == tmp_compare_right_3 );
    Py_DECREF( tmp_compare_left_3 );
    if (tmp_is_1)
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_9 == NULL ))
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1027;
        goto try_finally_handler_1;
    }

    tmp_called_7 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_atleast_2d );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1027;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_8 = par_X.object;

    frame_function->f_lineno = 1027;
    tmp_source_name_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_8 );
    Py_DECREF( tmp_called_7 );
    if ( tmp_source_name_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1027;
        goto try_finally_handler_1;
    }
    tmp_assign_source_11 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_T );
    Py_DECREF( tmp_source_name_8 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1027;
        goto try_finally_handler_1;
    }
    assert( par_X.object != NULL );
    {
        PyObject *old = par_X.object;
        par_X.object = tmp_assign_source_11;
        Py_DECREF( old );
    }

    tmp_assign_source_12 = const_int_pos_1;
    assert( var_ncol.object == NULL );
    var_ncol.object = INCREASE_REFCOUNT( tmp_assign_source_12 );

    goto branch_end_7;
    branch_no_7:;
    tmp_source_name_11 = par_X.object;

    tmp_source_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_dtype );
    if ( tmp_source_name_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1032;
        goto try_finally_handler_1;
    }
    tmp_len_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_descr );
    Py_DECREF( tmp_source_name_10 );
    if ( tmp_len_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1032;
        goto try_finally_handler_1;
    }
    tmp_assign_source_13 = BUILTIN_LEN( tmp_len_arg_1 );
    Py_DECREF( tmp_len_arg_1 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1032;
        goto try_finally_handler_1;
    }
    assert( var_ncol.object == NULL );
    var_ncol.object = tmp_assign_source_13;

    branch_end_7:;
    goto branch_end_6;
    branch_no_6:;
    tmp_source_name_12 = par_X.object;

    tmp_subscr_target_2 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_shape );
    if ( tmp_subscr_target_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1034;
        goto try_finally_handler_1;
    }
    tmp_subscr_subscript_2 = const_int_pos_1;
    tmp_assign_source_14 = LOOKUP_SUBSCRIPT( tmp_subscr_target_2, tmp_subscr_subscript_2 );
    Py_DECREF( tmp_subscr_target_2 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1034;
        goto try_finally_handler_1;
    }
    assert( var_ncol.object == NULL );
    var_ncol.object = tmp_assign_source_14;

    branch_end_6:;
    tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_13 == NULL ))
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1036;
        goto try_finally_handler_1;
    }

    tmp_called_8 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_iscomplexobj );
    if ( tmp_called_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1036;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_9 = par_X.object;

    if ( tmp_call_arg_element_9 == NULL )
    {
        Py_DECREF( tmp_called_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 166501 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1036;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 1036;
    tmp_assign_source_15 = CALL_FUNCTION_WITH_ARGS1( tmp_called_8, tmp_call_arg_element_9 );
    Py_DECREF( tmp_called_8 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1036;
        goto try_finally_handler_1;
    }
    assert( var_iscomplex_X.object == NULL );
    var_iscomplex_X.object = tmp_assign_source_15;

    tmp_type_arg_1 = par_fmt.object;

    if ( tmp_type_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 39142 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1039;
        goto try_finally_handler_1;
    }

    tmp_compare_left_4 = BUILTIN_TYPE1( tmp_type_arg_1 );
    if ( tmp_compare_left_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1039;
        goto try_finally_handler_1;
    }
    tmp_compare_right_4 = PyTuple_New( 2 );
    tmp_tuple_element_1 = LOOKUP_BUILTIN( const_str_plain_list );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_4 );
        Py_DECREF( tmp_compare_right_4 );

        frame_function->f_lineno = 1039;
        goto try_finally_handler_1;
    }
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_compare_right_4, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = LOOKUP_BUILTIN( const_str_plain_tuple );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_4 );
        Py_DECREF( tmp_compare_right_4 );

        frame_function->f_lineno = 1039;
        goto try_finally_handler_1;
    }
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_compare_right_4, 1, tmp_tuple_element_1 );
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    if ( tmp_cmp_In_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_4 );
        Py_DECREF( tmp_compare_right_4 );

        frame_function->f_lineno = 1039;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_compare_left_4 );
    Py_DECREF( tmp_compare_right_4 );
    if (tmp_cmp_In_1 == 1)
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_len_arg_2 = par_fmt.object;

    if ( tmp_len_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 39142 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1040;
        goto try_finally_handler_1;
    }

    tmp_compare_left_5 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_compare_left_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1040;
        goto try_finally_handler_1;
    }
    tmp_compare_right_5 = var_ncol.object;

    if ( tmp_compare_right_5 == NULL )
    {
        Py_DECREF( tmp_compare_left_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171402 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1040;
        goto try_finally_handler_1;
    }

    tmp_cmp_NotEq_1 = RICH_COMPARE_BOOL_NE( tmp_compare_left_5, tmp_compare_right_5 );
    if ( tmp_cmp_NotEq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_5 );

        frame_function->f_lineno = 1040;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_compare_left_5 );
    if (tmp_cmp_NotEq_1 == 1)
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_binop_left_1 = const_str_digest_c5caabe961fe165c4f677876c8b497e2;
    tmp_str_arg_1 = par_fmt.object;

    if ( tmp_str_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 39142 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1041;
        goto try_finally_handler_1;
    }

    tmp_binop_right_1 = PyObject_Str( tmp_str_arg_1 );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1041;
        goto try_finally_handler_1;
    }
    tmp_make_exception_arg_2 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_make_exception_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1041;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1041;
    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_AttributeError, tmp_make_exception_arg_2 );
    Py_DECREF( tmp_make_exception_arg_2 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1041;
        goto try_finally_handler_1;
    }
    exception_type = tmp_raise_type_2;
    frame_function->f_lineno = 1041;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_1;
    branch_no_9:;
    tmp_called_10 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asstr );

    if (unlikely( tmp_called_10 == NULL ))
    {
        tmp_called_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asstr );
    }

    if ( tmp_called_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171368 ], 34, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1042;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_10 = par_delimiter.object;

    frame_function->f_lineno = 1042;
    tmp_source_name_14 = CALL_FUNCTION_WITH_ARGS1( tmp_called_10, tmp_call_arg_element_10 );
    if ( tmp_source_name_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1042;
        goto try_finally_handler_1;
    }
    tmp_called_9 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_join );
    Py_DECREF( tmp_source_name_14 );
    if ( tmp_called_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1042;
        goto try_finally_handler_1;
    }
    tmp_called_11 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_map );

    if (unlikely( tmp_called_11 == NULL ))
    {
        tmp_called_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_map );
    }

    if ( tmp_called_11 == NULL )
    {
        Py_DECREF( tmp_called_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171452 ], 32, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1042;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_12 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asstr );

    if (unlikely( tmp_call_arg_element_12 == NULL ))
    {
        tmp_call_arg_element_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asstr );
    }

    if ( tmp_call_arg_element_12 == NULL )
    {
        Py_DECREF( tmp_called_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171368 ], 34, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1042;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_13 = par_fmt.object;

    if ( tmp_call_arg_element_13 == NULL )
    {
        Py_DECREF( tmp_called_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 39142 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1042;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 1042;
    tmp_call_arg_element_11 = CALL_FUNCTION_WITH_ARGS2( tmp_called_11, tmp_call_arg_element_12, tmp_call_arg_element_13 );
    if ( tmp_call_arg_element_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_9 );

        frame_function->f_lineno = 1042;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1042;
    tmp_assign_source_16 = CALL_FUNCTION_WITH_ARGS1( tmp_called_9, tmp_call_arg_element_11 );
    Py_DECREF( tmp_called_9 );
    Py_DECREF( tmp_call_arg_element_11 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1042;
        goto try_finally_handler_1;
    }
    assert( var_format.object == NULL );
    var_format.object = tmp_assign_source_16;

    goto branch_end_8;
    branch_no_8:;
    tmp_isinstance_inst_2 = par_fmt.object;

    if ( tmp_isinstance_inst_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 39142 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1043;
        goto try_finally_handler_1;
    }

    tmp_isinstance_cls_2 = LOOKUP_BUILTIN( const_str_plain_str );
    if ( tmp_isinstance_cls_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1043;
        goto try_finally_handler_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1043;
        goto try_finally_handler_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_source_name_15 = par_fmt.object;

    if ( tmp_source_name_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 39142 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1044;
        goto try_finally_handler_1;
    }

    tmp_called_12 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_count );
    if ( tmp_called_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1044;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_14 = const_str_chr_37;
    frame_function->f_lineno = 1044;
    tmp_assign_source_17 = CALL_FUNCTION_WITH_ARGS1( tmp_called_12, tmp_call_arg_element_14 );
    Py_DECREF( tmp_called_12 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1044;
        goto try_finally_handler_1;
    }
    assert( var_n_fmt_chars.object == NULL );
    var_n_fmt_chars.object = tmp_assign_source_17;

    tmp_binop_left_2 = const_str_digest_922d47cd4e94607d500021eac317192f;
    tmp_binop_right_2 = par_fmt.object;

    if ( tmp_binop_right_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 39142 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1045;
        goto try_finally_handler_1;
    }

    tmp_make_exception_arg_3 = BINARY_OPERATION_REMAINDER( tmp_binop_left_2, tmp_binop_right_2 );
    if ( tmp_make_exception_arg_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1045;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1045;
    tmp_assign_source_18 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, tmp_make_exception_arg_3 );
    Py_DECREF( tmp_make_exception_arg_3 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1045;
        goto try_finally_handler_1;
    }
    assert( var_error.object == NULL );
    var_error.object = tmp_assign_source_18;

    tmp_compare_left_6 = var_n_fmt_chars.object;

    tmp_compare_right_6 = const_int_pos_1;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_6, tmp_compare_right_6 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1046;
        goto try_finally_handler_1;
    }
    if (tmp_cmp_Eq_2 == 1)
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_cond_value_3 = var_iscomplex_X.object;

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1047;
        goto try_finally_handler_1;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_binop_left_3 = PyList_New( 1 );
    tmp_binop_left_4 = const_str_digest_22474b205f3395909dffcf4a10cf5390;
    tmp_binop_right_4 = PyTuple_New( 2 );
    tmp_tuple_element_2 = par_fmt.object;

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_binop_left_3 );
        Py_DECREF( tmp_binop_right_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 39142 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1048;
        goto try_finally_handler_1;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_binop_right_4, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = par_fmt.object;

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_binop_left_3 );
        Py_DECREF( tmp_binop_right_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 39142 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1048;
        goto try_finally_handler_1;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_binop_right_4, 1, tmp_tuple_element_2 );
    tmp_list_element_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_4, tmp_binop_right_4 );
    Py_DECREF( tmp_binop_right_4 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_3 );

        frame_function->f_lineno = 1048;
        goto try_finally_handler_1;
    }
    PyList_SET_ITEM( tmp_binop_left_3, 0, tmp_list_element_1 );
    tmp_binop_right_3 = var_ncol.object;

    if ( tmp_binop_right_3 == NULL )
    {
        Py_DECREF( tmp_binop_left_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171402 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1048;
        goto try_finally_handler_1;
    }

    tmp_assign_source_19 = BINARY_OPERATION_MUL( tmp_binop_left_3, tmp_binop_right_3 );
    Py_DECREF( tmp_binop_left_3 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1048;
        goto try_finally_handler_1;
    }
    if (par_fmt.object == NULL)
    {
        par_fmt.object = tmp_assign_source_19;
    }
    else
    {
        PyObject *old = par_fmt.object;
        par_fmt.object = tmp_assign_source_19;
        Py_DECREF( old );
    }
    goto branch_end_12;
    branch_no_12:;
    tmp_binop_left_5 = PyList_New( 1 );
    tmp_list_element_2 = par_fmt.object;

    if ( tmp_list_element_2 == NULL )
    {
        Py_DECREF( tmp_binop_left_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 39142 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1050;
        goto try_finally_handler_1;
    }

    Py_INCREF( tmp_list_element_2 );
    PyList_SET_ITEM( tmp_binop_left_5, 0, tmp_list_element_2 );
    tmp_binop_right_5 = var_ncol.object;

    if ( tmp_binop_right_5 == NULL )
    {
        Py_DECREF( tmp_binop_left_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171402 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1050;
        goto try_finally_handler_1;
    }

    tmp_assign_source_20 = BINARY_OPERATION_MUL( tmp_binop_left_5, tmp_binop_right_5 );
    Py_DECREF( tmp_binop_left_5 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1050;
        goto try_finally_handler_1;
    }
    if (par_fmt.object == NULL)
    {
        par_fmt.object = tmp_assign_source_20;
    }
    else
    {
        PyObject *old = par_fmt.object;
        par_fmt.object = tmp_assign_source_20;
        Py_DECREF( old );
    }
    branch_end_12:;
    tmp_source_name_16 = par_delimiter.object;

    tmp_called_13 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_join );
    if ( tmp_called_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1051;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_15 = par_fmt.object;

    frame_function->f_lineno = 1051;
    tmp_assign_source_21 = CALL_FUNCTION_WITH_ARGS1( tmp_called_13, tmp_call_arg_element_15 );
    Py_DECREF( tmp_called_13 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1051;
        goto try_finally_handler_1;
    }
    assert( var_format.object == NULL );
    var_format.object = tmp_assign_source_21;

    goto branch_end_11;
    branch_no_11:;
    // Tried code
    tmp_cond_value_4 = NULL;
    // Tried code
    tmp_assign_source_22 = var_iscomplex_X.object;

    assert( tmp_and_1__value_1.object == NULL );
    tmp_and_1__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_22 );

    tmp_cond_value_5 = tmp_and_1__value_1.object;

    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1052;
        goto try_finally_handler_3;
    }
    if (tmp_cond_truth_5 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_cond_value_4 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1.object );
        tmp_and_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_1 = var_n_fmt_chars.object;

    tmp_binop_left_6 = const_int_pos_2;
    tmp_binop_right_6 = var_ncol.object;

    if ( tmp_binop_right_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171402 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1052;
        goto try_finally_handler_4;
    }

    tmp_compexpr_right_1 = BINARY_OPERATION_MUL( tmp_binop_left_6, tmp_binop_right_6 );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1052;
        goto try_finally_handler_4;
    }
    tmp_cond_value_4 = RICH_COMPARE_NE( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1052;
        goto try_finally_handler_4;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_3;
    }

    goto finally_end_1;
    finally_end_1:;
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_cond_value_4 = tmp_and_1__value_1.object;

    Py_INCREF( tmp_cond_value_4 );
    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_2;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        frame_function->f_lineno = 1052;
        goto try_finally_handler_2;
    }
    Py_DECREF( tmp_cond_value_4 );
    if (tmp_cond_truth_4 == 1)
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_raise_type_3 = var_error.object;

    if ( tmp_raise_type_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12063 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1053;
        goto try_finally_handler_2;
    }

    exception_type = INCREASE_REFCOUNT( tmp_raise_type_3 );
    frame_function->f_lineno = 1053;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_2;
    goto branch_end_13;
    branch_no_13:;
    // Tried code
    tmp_cond_value_6 = NULL;
    // Tried code
    tmp_unary_arg_1 = var_iscomplex_X.object;

    if ( tmp_unary_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171484 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1054;
        goto try_finally_handler_6;
    }

    tmp_assign_source_23 = UNARY_OPERATION( UNARY_NOT, tmp_unary_arg_1 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1054;
        goto try_finally_handler_6;
    }
    assert( tmp_and_2__value_1.object == NULL );
    tmp_and_2__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_23 );

    tmp_cond_value_7 = tmp_and_2__value_1.object;

    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1054;
        goto try_finally_handler_6;
    }
    if (tmp_cond_truth_7 == 1)
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_cond_value_6 = NULL;
    // Tried code
    tmp_result = tmp_and_2__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_2__value_1.object );
        tmp_and_2__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_2 = var_n_fmt_chars.object;

    if ( tmp_compexpr_left_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171541 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1054;
        goto try_finally_handler_7;
    }

    tmp_compexpr_right_2 = var_ncol.object;

    if ( tmp_compexpr_right_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171402 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1054;
        goto try_finally_handler_7;
    }

    tmp_cond_value_6 = RICH_COMPARE_NE( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    if ( tmp_cond_value_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1054;
        goto try_finally_handler_7;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_7:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto try_finally_handler_6;
    }

    goto finally_end_3;
    finally_end_3:;
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_cond_value_6 = tmp_and_2__value_1.object;

    Py_INCREF( tmp_cond_value_6 );
    condexpr_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto try_finally_handler_5;
    }

    goto finally_end_4;
    finally_end_4:;
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        frame_function->f_lineno = 1054;
        goto try_finally_handler_5;
    }
    Py_DECREF( tmp_cond_value_6 );
    if (tmp_cond_truth_6 == 1)
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_raise_type_4 = var_error.object;

    if ( tmp_raise_type_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12063 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1055;
        goto try_finally_handler_5;
    }

    exception_type = INCREASE_REFCOUNT( tmp_raise_type_4 );
    frame_function->f_lineno = 1055;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_5;
    goto branch_end_14;
    branch_no_14:;
    tmp_assign_source_24 = par_fmt.object;

    if ( tmp_assign_source_24 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 39142 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1057;
        goto try_finally_handler_5;
    }

    if (var_format.object == NULL)
    {
        var_format.object = INCREASE_REFCOUNT( tmp_assign_source_24 );
    }
    else
    {
        PyObject *old = var_format.object;
        var_format.object = INCREASE_REFCOUNT( tmp_assign_source_24 );
        Py_DECREF( old );
    }
    branch_end_14:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_2__value_1.object );
    tmp_and_2__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto try_finally_handler_2;
    }

    goto finally_end_5;
    finally_end_5:;
    branch_end_13:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_1__value_1.object );
    tmp_and_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto try_finally_handler_1;
    }

    goto finally_end_6;
    finally_end_6:;
    branch_end_11:;
    goto branch_end_10;
    branch_no_10:;
    tmp_binop_left_7 = const_str_digest_8951e79384d592ce94aa279c94096f17;
    tmp_binop_right_7 = PyTuple_New( 1 );
    tmp_tuple_element_3 = par_fmt.object;

    if ( tmp_tuple_element_3 == NULL )
    {
        Py_DECREF( tmp_binop_right_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 39142 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1059;
        goto try_finally_handler_1;
    }

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_binop_right_7, 0, tmp_tuple_element_3 );
    tmp_make_exception_arg_4 = BINARY_OPERATION_REMAINDER( tmp_binop_left_7, tmp_binop_right_7 );
    Py_DECREF( tmp_binop_right_7 );
    if ( tmp_make_exception_arg_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1059;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1059;
    tmp_raise_type_5 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, tmp_make_exception_arg_4 );
    Py_DECREF( tmp_make_exception_arg_4 );
    if ( tmp_raise_type_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1059;
        goto try_finally_handler_1;
    }
    exception_type = tmp_raise_type_5;
    frame_function->f_lineno = 1059;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_1;
    branch_end_10:;
    branch_end_8:;
    tmp_len_arg_3 = par_header.object;

    if ( tmp_len_arg_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 645 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1061;
        goto try_finally_handler_1;
    }

    tmp_compare_left_7 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_compare_left_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1061;
        goto try_finally_handler_1;
    }
    tmp_compare_right_7 = const_int_0;
    tmp_cmp_Gt_1 = RICH_COMPARE_BOOL_GT( tmp_compare_left_7, tmp_compare_right_7 );
    if ( tmp_cmp_Gt_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_7 );

        frame_function->f_lineno = 1061;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_compare_left_7 );
    if (tmp_cmp_Gt_1 == 1)
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_source_name_17 = par_header.object;

    if ( tmp_source_name_17 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 645 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1062;
        goto try_finally_handler_1;
    }

    tmp_called_14 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_replace );
    if ( tmp_called_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1062;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_16 = const_str_newline;
    tmp_binop_left_8 = const_str_newline;
    tmp_binop_right_8 = par_comments.object;

    if ( tmp_binop_right_8 == NULL )
    {
        Py_DECREF( tmp_called_14 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155754 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1062;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_17 = BINARY_OPERATION_ADD( tmp_binop_left_8, tmp_binop_right_8 );
    if ( tmp_call_arg_element_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_14 );

        frame_function->f_lineno = 1062;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1062;
    tmp_assign_source_25 = CALL_FUNCTION_WITH_ARGS2( tmp_called_14, tmp_call_arg_element_16, tmp_call_arg_element_17 );
    Py_DECREF( tmp_called_14 );
    Py_DECREF( tmp_call_arg_element_17 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1062;
        goto try_finally_handler_1;
    }
    if (par_header.object == NULL)
    {
        par_header.object = tmp_assign_source_25;
    }
    else
    {
        PyObject *old = par_header.object;
        par_header.object = tmp_assign_source_25;
        Py_DECREF( old );
    }
    tmp_source_name_18 = var_fh.object;

    if ( tmp_source_name_18 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12843 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1063;
        goto try_finally_handler_1;
    }

    tmp_called_15 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_write );
    if ( tmp_called_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1063;
        goto try_finally_handler_1;
    }
    tmp_called_16 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_16 == NULL ))
    {
        tmp_called_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_16 == NULL )
    {
        Py_DECREF( tmp_called_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1063;
        goto try_finally_handler_1;
    }

    tmp_binop_left_10 = par_comments.object;

    if ( tmp_binop_left_10 == NULL )
    {
        Py_DECREF( tmp_called_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155754 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1063;
        goto try_finally_handler_1;
    }

    tmp_binop_right_10 = par_header.object;

    tmp_binop_left_9 = BINARY_OPERATION_ADD( tmp_binop_left_10, tmp_binop_right_10 );
    if ( tmp_binop_left_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_15 );

        frame_function->f_lineno = 1063;
        goto try_finally_handler_1;
    }
    tmp_binop_right_9 = par_newline.object;

    if ( tmp_binop_right_9 == NULL )
    {
        Py_DECREF( tmp_called_15 );
        Py_DECREF( tmp_binop_left_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 95076 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1063;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_19 = BINARY_OPERATION_ADD( tmp_binop_left_9, tmp_binop_right_9 );
    Py_DECREF( tmp_binop_left_9 );
    if ( tmp_call_arg_element_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_15 );

        frame_function->f_lineno = 1063;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1063;
    tmp_call_arg_element_18 = CALL_FUNCTION_WITH_ARGS1( tmp_called_16, tmp_call_arg_element_19 );
    Py_DECREF( tmp_call_arg_element_19 );
    if ( tmp_call_arg_element_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_15 );

        frame_function->f_lineno = 1063;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1063;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_15, tmp_call_arg_element_18 );
    Py_DECREF( tmp_called_15 );
    Py_DECREF( tmp_call_arg_element_18 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1063;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_15:;
    tmp_cond_value_8 = var_iscomplex_X.object;

    if ( tmp_cond_value_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171484 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1064;
        goto try_finally_handler_1;
    }

    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1064;
        goto try_finally_handler_1;
    }
    if (tmp_cond_truth_8 == 1)
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_iter_arg_1 = par_X.object;

    if ( tmp_iter_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 166501 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1065;
        goto try_finally_handler_1;
    }

    tmp_assign_source_26 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1065;
        goto try_finally_handler_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_26;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_27 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_27 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1065;
            goto try_finally_handler_8;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_27;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_27;
        Py_DECREF( old );
    }
    tmp_assign_source_28 = tmp_for_loop_1__iter_value.object;

    if (var_row.object == NULL)
    {
        var_row.object = INCREASE_REFCOUNT( tmp_assign_source_28 );
    }
    else
    {
        PyObject *old = var_row.object;
        var_row.object = INCREASE_REFCOUNT( tmp_assign_source_28 );
        Py_DECREF( old );
    }
    tmp_assign_source_29 = PyList_New( 0 );
    if (var_row2.object == NULL)
    {
        var_row2.object = tmp_assign_source_29;
    }
    else
    {
        PyObject *old = var_row2.object;
        var_row2.object = tmp_assign_source_29;
        Py_DECREF( old );
    }
    tmp_iter_arg_2 = var_row.object;

    tmp_assign_source_30 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_30 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1067;
        goto try_finally_handler_8;
    }
    if (tmp_for_loop_2__for_iterator.object == NULL)
    {
        tmp_for_loop_2__for_iterator.object = tmp_assign_source_30;
    }
    else
    {
        PyObject *old = tmp_for_loop_2__for_iterator.object;
        tmp_for_loop_2__for_iterator.object = tmp_assign_source_30;
        Py_DECREF( old );
    }
    // Tried code
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator.object;

    tmp_assign_source_31 = ITERATOR_NEXT( tmp_next_source_2 );
    if (tmp_assign_source_31 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_2;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1067;
            goto try_finally_handler_9;
        }
    }

    if (tmp_for_loop_2__iter_value.object == NULL)
    {
        tmp_for_loop_2__iter_value.object = tmp_assign_source_31;
    }
    else
    {
        PyObject *old = tmp_for_loop_2__iter_value.object;
        tmp_for_loop_2__iter_value.object = tmp_assign_source_31;
        Py_DECREF( old );
    }
    tmp_assign_source_32 = tmp_for_loop_2__iter_value.object;

    if (var_number.object == NULL)
    {
        var_number.object = INCREASE_REFCOUNT( tmp_assign_source_32 );
    }
    else
    {
        PyObject *old = var_number.object;
        var_number.object = INCREASE_REFCOUNT( tmp_assign_source_32 );
        Py_DECREF( old );
    }
    tmp_source_name_19 = var_row2.object;

    if ( tmp_source_name_19 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171598 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1068;
        goto try_finally_handler_9;
    }

    tmp_called_17 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_append );
    if ( tmp_called_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1068;
        goto try_finally_handler_9;
    }
    tmp_source_name_20 = var_number.object;

    tmp_call_arg_element_20 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_real );
    if ( tmp_call_arg_element_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_17 );

        frame_function->f_lineno = 1068;
        goto try_finally_handler_9;
    }
    frame_function->f_lineno = 1068;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_17, tmp_call_arg_element_20 );
    Py_DECREF( tmp_called_17 );
    Py_DECREF( tmp_call_arg_element_20 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1068;
        goto try_finally_handler_9;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_21 = var_row2.object;

    if ( tmp_source_name_21 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171598 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1069;
        goto try_finally_handler_9;
    }

    tmp_called_18 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_append );
    if ( tmp_called_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1069;
        goto try_finally_handler_9;
    }
    tmp_source_name_22 = var_number.object;

    tmp_call_arg_element_21 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_imag );
    if ( tmp_call_arg_element_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_18 );

        frame_function->f_lineno = 1069;
        goto try_finally_handler_9;
    }
    frame_function->f_lineno = 1069;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_18, tmp_call_arg_element_21 );
    Py_DECREF( tmp_called_18 );
    Py_DECREF( tmp_call_arg_element_21 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1069;
        goto try_finally_handler_9;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1067;
        goto try_finally_handler_9;
    }
    goto loop_start_2;
    loop_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_9:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_2__iter_value.object );
    tmp_for_loop_2__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator.object );
    tmp_for_loop_2__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_7 != NULL )
    {
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;

        goto try_finally_handler_8;
    }

    goto finally_end_7;
    finally_end_7:;
    tmp_source_name_23 = var_fh.object;

    if ( tmp_source_name_23 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12843 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1070;
        goto try_finally_handler_8;
    }

    tmp_called_19 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_write );
    if ( tmp_called_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1070;
        goto try_finally_handler_8;
    }
    tmp_called_20 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_20 == NULL ))
    {
        tmp_called_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_20 == NULL )
    {
        Py_DECREF( tmp_called_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1070;
        goto try_finally_handler_8;
    }

    tmp_binop_left_12 = var_format.object;

    if ( tmp_binop_left_12 == NULL )
    {
        Py_DECREF( tmp_called_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6408 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1070;
        goto try_finally_handler_8;
    }

    tmp_tuple_arg_1 = var_row2.object;

    if ( tmp_tuple_arg_1 == NULL )
    {
        Py_DECREF( tmp_called_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171598 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1070;
        goto try_finally_handler_8;
    }

    tmp_binop_right_12 = PySequence_Tuple( tmp_tuple_arg_1 );
    if ( tmp_binop_right_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_19 );

        frame_function->f_lineno = 1070;
        goto try_finally_handler_8;
    }
    tmp_binop_left_11 = BINARY_OPERATION_REMAINDER( tmp_binop_left_12, tmp_binop_right_12 );
    Py_DECREF( tmp_binop_right_12 );
    if ( tmp_binop_left_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_19 );

        frame_function->f_lineno = 1070;
        goto try_finally_handler_8;
    }
    tmp_binop_right_11 = par_newline.object;

    if ( tmp_binop_right_11 == NULL )
    {
        Py_DECREF( tmp_called_19 );
        Py_DECREF( tmp_binop_left_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 95076 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1070;
        goto try_finally_handler_8;
    }

    tmp_call_arg_element_23 = BINARY_OPERATION_ADD( tmp_binop_left_11, tmp_binop_right_11 );
    Py_DECREF( tmp_binop_left_11 );
    if ( tmp_call_arg_element_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_19 );

        frame_function->f_lineno = 1070;
        goto try_finally_handler_8;
    }
    frame_function->f_lineno = 1070;
    tmp_call_arg_element_22 = CALL_FUNCTION_WITH_ARGS1( tmp_called_20, tmp_call_arg_element_23 );
    Py_DECREF( tmp_call_arg_element_23 );
    if ( tmp_call_arg_element_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_19 );

        frame_function->f_lineno = 1070;
        goto try_finally_handler_8;
    }
    frame_function->f_lineno = 1070;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_19, tmp_call_arg_element_22 );
    Py_DECREF( tmp_called_19 );
    Py_DECREF( tmp_call_arg_element_22 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1070;
        goto try_finally_handler_8;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1065;
        goto try_finally_handler_8;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_8:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_4 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_4;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_8 != NULL )
    {
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;

        goto try_finally_handler_1;
    }

    goto finally_end_8;
    finally_end_8:;
    goto branch_end_16;
    branch_no_16:;
    tmp_iter_arg_3 = par_X.object;

    if ( tmp_iter_arg_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 166501 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1072;
        goto try_finally_handler_1;
    }

    tmp_assign_source_33 = MAKE_ITERATOR( tmp_iter_arg_3 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1072;
        goto try_finally_handler_1;
    }
    assert( tmp_for_loop_3__for_iterator.object == NULL );
    tmp_for_loop_3__for_iterator.object = tmp_assign_source_33;

    // Tried code
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator.object;

    tmp_assign_source_34 = ITERATOR_NEXT( tmp_next_source_3 );
    if (tmp_assign_source_34 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_3;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1072;
            goto try_finally_handler_10;
        }
    }

    if (tmp_for_loop_3__iter_value.object == NULL)
    {
        tmp_for_loop_3__iter_value.object = tmp_assign_source_34;
    }
    else
    {
        PyObject *old = tmp_for_loop_3__iter_value.object;
        tmp_for_loop_3__iter_value.object = tmp_assign_source_34;
        Py_DECREF( old );
    }
    tmp_assign_source_35 = tmp_for_loop_3__iter_value.object;

    if (var_row.object == NULL)
    {
        var_row.object = INCREASE_REFCOUNT( tmp_assign_source_35 );
    }
    else
    {
        PyObject *old = var_row.object;
        var_row.object = INCREASE_REFCOUNT( tmp_assign_source_35 );
        Py_DECREF( old );
    }
    tmp_source_name_24 = var_fh.object;

    if ( tmp_source_name_24 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12843 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1073;
        goto try_finally_handler_10;
    }

    tmp_called_21 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_write );
    if ( tmp_called_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1073;
        goto try_finally_handler_10;
    }
    tmp_called_22 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_22 == NULL ))
    {
        tmp_called_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_22 == NULL )
    {
        Py_DECREF( tmp_called_21 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1073;
        goto try_finally_handler_10;
    }

    tmp_binop_left_14 = var_format.object;

    if ( tmp_binop_left_14 == NULL )
    {
        Py_DECREF( tmp_called_21 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6408 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1073;
        goto try_finally_handler_10;
    }

    tmp_tuple_arg_2 = var_row.object;

    tmp_binop_right_14 = PySequence_Tuple( tmp_tuple_arg_2 );
    if ( tmp_binop_right_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_21 );

        frame_function->f_lineno = 1073;
        goto try_finally_handler_10;
    }
    tmp_binop_left_13 = BINARY_OPERATION_REMAINDER( tmp_binop_left_14, tmp_binop_right_14 );
    Py_DECREF( tmp_binop_right_14 );
    if ( tmp_binop_left_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_21 );

        frame_function->f_lineno = 1073;
        goto try_finally_handler_10;
    }
    tmp_binop_right_13 = par_newline.object;

    if ( tmp_binop_right_13 == NULL )
    {
        Py_DECREF( tmp_called_21 );
        Py_DECREF( tmp_binop_left_13 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 95076 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1073;
        goto try_finally_handler_10;
    }

    tmp_call_arg_element_25 = BINARY_OPERATION_ADD( tmp_binop_left_13, tmp_binop_right_13 );
    Py_DECREF( tmp_binop_left_13 );
    if ( tmp_call_arg_element_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_21 );

        frame_function->f_lineno = 1073;
        goto try_finally_handler_10;
    }
    frame_function->f_lineno = 1073;
    tmp_call_arg_element_24 = CALL_FUNCTION_WITH_ARGS1( tmp_called_22, tmp_call_arg_element_25 );
    Py_DECREF( tmp_call_arg_element_25 );
    if ( tmp_call_arg_element_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_21 );

        frame_function->f_lineno = 1073;
        goto try_finally_handler_10;
    }
    frame_function->f_lineno = 1073;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_21, tmp_call_arg_element_24 );
    Py_DECREF( tmp_called_21 );
    Py_DECREF( tmp_call_arg_element_24 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1073;
        goto try_finally_handler_10;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1072;
        goto try_finally_handler_10;
    }
    goto loop_start_3;
    loop_end_3:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_10:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_5 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_3__iter_value.object );
    tmp_for_loop_3__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_3__for_iterator.object );
    tmp_for_loop_3__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_5;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_9 != NULL )
    {
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;

        goto try_finally_handler_1;
    }

    goto finally_end_9;
    finally_end_9:;
    branch_end_16:;
    tmp_len_arg_4 = par_footer.object;

    if ( tmp_len_arg_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171648 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1074;
        goto try_finally_handler_1;
    }

    tmp_compare_left_8 = BUILTIN_LEN( tmp_len_arg_4 );
    if ( tmp_compare_left_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1074;
        goto try_finally_handler_1;
    }
    tmp_compare_right_8 = const_int_0;
    tmp_cmp_Gt_2 = RICH_COMPARE_BOOL_GT( tmp_compare_left_8, tmp_compare_right_8 );
    if ( tmp_cmp_Gt_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_8 );

        frame_function->f_lineno = 1074;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_compare_left_8 );
    if (tmp_cmp_Gt_2 == 1)
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_source_name_25 = par_footer.object;

    if ( tmp_source_name_25 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171648 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1075;
        goto try_finally_handler_1;
    }

    tmp_called_23 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_replace );
    if ( tmp_called_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1075;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_26 = const_str_newline;
    tmp_binop_left_15 = const_str_newline;
    tmp_binop_right_15 = par_comments.object;

    if ( tmp_binop_right_15 == NULL )
    {
        Py_DECREF( tmp_called_23 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155754 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1075;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_27 = BINARY_OPERATION_ADD( tmp_binop_left_15, tmp_binop_right_15 );
    if ( tmp_call_arg_element_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_23 );

        frame_function->f_lineno = 1075;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1075;
    tmp_assign_source_36 = CALL_FUNCTION_WITH_ARGS2( tmp_called_23, tmp_call_arg_element_26, tmp_call_arg_element_27 );
    Py_DECREF( tmp_called_23 );
    Py_DECREF( tmp_call_arg_element_27 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1075;
        goto try_finally_handler_1;
    }
    if (par_footer.object == NULL)
    {
        par_footer.object = tmp_assign_source_36;
    }
    else
    {
        PyObject *old = par_footer.object;
        par_footer.object = tmp_assign_source_36;
        Py_DECREF( old );
    }
    tmp_source_name_26 = var_fh.object;

    if ( tmp_source_name_26 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12843 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1076;
        goto try_finally_handler_1;
    }

    tmp_called_24 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_write );
    if ( tmp_called_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1076;
        goto try_finally_handler_1;
    }
    tmp_called_25 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_25 == NULL ))
    {
        tmp_called_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_25 == NULL )
    {
        Py_DECREF( tmp_called_24 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1076;
        goto try_finally_handler_1;
    }

    tmp_binop_left_17 = par_comments.object;

    if ( tmp_binop_left_17 == NULL )
    {
        Py_DECREF( tmp_called_24 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155754 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1076;
        goto try_finally_handler_1;
    }

    tmp_binop_right_17 = par_footer.object;

    tmp_binop_left_16 = BINARY_OPERATION_ADD( tmp_binop_left_17, tmp_binop_right_17 );
    if ( tmp_binop_left_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_24 );

        frame_function->f_lineno = 1076;
        goto try_finally_handler_1;
    }
    tmp_binop_right_16 = par_newline.object;

    if ( tmp_binop_right_16 == NULL )
    {
        Py_DECREF( tmp_called_24 );
        Py_DECREF( tmp_binop_left_16 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 95076 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1076;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_29 = BINARY_OPERATION_ADD( tmp_binop_left_16, tmp_binop_right_16 );
    Py_DECREF( tmp_binop_left_16 );
    if ( tmp_call_arg_element_29 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_24 );

        frame_function->f_lineno = 1076;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1076;
    tmp_call_arg_element_28 = CALL_FUNCTION_WITH_ARGS1( tmp_called_25, tmp_call_arg_element_29 );
    Py_DECREF( tmp_call_arg_element_29 );
    if ( tmp_call_arg_element_28 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_24 );

        frame_function->f_lineno = 1076;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1076;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_24, tmp_call_arg_element_28 );
    Py_DECREF( tmp_called_24 );
    Py_DECREF( tmp_call_arg_element_28 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1076;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_17:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_6 = frame_function->f_lineno;
    tmp_cond_value_9 = var_own_fh.object;

    if ( tmp_cond_value_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171700 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1078;
        goto try_finally_handler_error_1;
    }

    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1078;
        goto try_finally_handler_error_1;
    }
    if (tmp_cond_truth_9 == 1)
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_source_name_27 = var_fh.object;

    if ( tmp_source_name_27 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12843 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1079;
        goto try_finally_handler_error_1;
    }

    tmp_called_26 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_close );
    if ( tmp_called_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1079;
        goto try_finally_handler_error_1;
    }
    frame_function->f_lineno = 1079;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_26 );
    Py_DECREF( tmp_called_26 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1079;
        goto try_finally_handler_error_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_18:;
    frame_function->f_lineno = tmp_tried_lineno_6;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_10 != NULL )
    {
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;

        goto frame_exception_exit_1;
    }

    goto finally_end_10;
    try_finally_handler_error_1:;
    Py_XDECREF( exception_keeper_type_10 );exception_keeper_type_10 = NULL;
    Py_XDECREF( exception_keeper_value_10 );exception_keeper_value_10 = NULL;
    Py_XDECREF( exception_keeper_tb_10 );exception_keeper_tb_10 = NULL;
    goto frame_exception_exit_1;
    finally_end_10:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_own_fh.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_own_fh,
            var_own_fh.object
        );

    }
    if ((var_gzip.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_gzip,
            var_gzip.object
        );

    }
    if ((var_fh.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fh,
            var_fh.object
        );

    }
    if ((var_ncol.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ncol,
            var_ncol.object
        );

    }
    if ((var_iscomplex_X.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_iscomplex_X,
            var_iscomplex_X.object
        );

    }
    if ((var_format.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_format,
            var_format.object
        );

    }
    if ((var_n_fmt_chars.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_n_fmt_chars,
            var_n_fmt_chars.object
        );

    }
    if ((var_error.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_error,
            var_error.object
        );

    }
    if ((var_row.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_row,
            var_row.object
        );

    }
    if ((var_row2.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_row2,
            var_row2.object
        );

    }
    if ((var_number.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_number,
            var_number.object
        );

    }
    if ((par_fname.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fname,
            par_fname.object
        );

    }
    if ((par_X.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_X,
            par_X.object
        );

    }
    if ((par_fmt.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fmt,
            par_fmt.object
        );

    }
    if ((par_delimiter.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_delimiter,
            par_delimiter.object
        );

    }
    if ((par_newline.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_newline,
            par_newline.object
        );

    }
    if ((par_header.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_header,
            par_header.object
        );

    }
    if ((par_footer.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_footer,
            par_footer.object
        );

    }
    if ((par_comments.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_comments,
            par_comments.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_12_savetxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_fname = NULL;
    PyObject *_python_par_X = NULL;
    PyObject *_python_par_fmt = NULL;
    PyObject *_python_par_delimiter = NULL;
    PyObject *_python_par_newline = NULL;
    PyObject *_python_par_header = NULL;
    PyObject *_python_par_footer = NULL;
    PyObject *_python_par_comments = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "savetxt() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_fname == key )
            {
                assert( _python_par_fname == NULL );
                _python_par_fname = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_X == key )
            {
                assert( _python_par_X == NULL );
                _python_par_X = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_fmt == key )
            {
                assert( _python_par_fmt == NULL );
                _python_par_fmt = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_delimiter == key )
            {
                assert( _python_par_delimiter == NULL );
                _python_par_delimiter = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_newline == key )
            {
                assert( _python_par_newline == NULL );
                _python_par_newline = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_header == key )
            {
                assert( _python_par_header == NULL );
                _python_par_header = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_footer == key )
            {
                assert( _python_par_footer == NULL );
                _python_par_footer = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_comments == key )
            {
                assert( _python_par_comments == NULL );
                _python_par_comments = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_fname, key ) == 1 )
            {
                assert( _python_par_fname == NULL );
                _python_par_fname = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_X, key ) == 1 )
            {
                assert( _python_par_X == NULL );
                _python_par_X = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_fmt, key ) == 1 )
            {
                assert( _python_par_fmt == NULL );
                _python_par_fmt = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_delimiter, key ) == 1 )
            {
                assert( _python_par_delimiter == NULL );
                _python_par_delimiter = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_newline, key ) == 1 )
            {
                assert( _python_par_newline == NULL );
                _python_par_newline = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_header, key ) == 1 )
            {
                assert( _python_par_header == NULL );
                _python_par_header = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_footer, key ) == 1 )
            {
                assert( _python_par_footer == NULL );
                _python_par_footer = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_comments, key ) == 1 )
            {
                assert( _python_par_comments == NULL );
                _python_par_comments = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "savetxt() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 8 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_fname != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_fname = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_fname == NULL )
    {
        if ( 0 + self->m_defaults_given >= 8  )
        {
            _python_par_fname = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 8 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_X != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_X = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_X == NULL )
    {
        if ( 1 + self->m_defaults_given >= 8  )
        {
            _python_par_X = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 8 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_fmt != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_fmt = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_fmt == NULL )
    {
        if ( 2 + self->m_defaults_given >= 8  )
        {
            _python_par_fmt = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 8 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_delimiter != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_delimiter = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_delimiter == NULL )
    {
        if ( 3 + self->m_defaults_given >= 8  )
        {
            _python_par_delimiter = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 8 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 4 < args_given ))
    {
         if (unlikely( _python_par_newline != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 4 );
             goto error_exit;
         }

        _python_par_newline = INCREASE_REFCOUNT( args[ 4 ] );
    }
    else if ( _python_par_newline == NULL )
    {
        if ( 4 + self->m_defaults_given >= 8  )
        {
            _python_par_newline = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 4 - 8 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 5 < args_given ))
    {
         if (unlikely( _python_par_header != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 5 );
             goto error_exit;
         }

        _python_par_header = INCREASE_REFCOUNT( args[ 5 ] );
    }
    else if ( _python_par_header == NULL )
    {
        if ( 5 + self->m_defaults_given >= 8  )
        {
            _python_par_header = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 5 - 8 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 6 < args_given ))
    {
         if (unlikely( _python_par_footer != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 6 );
             goto error_exit;
         }

        _python_par_footer = INCREASE_REFCOUNT( args[ 6 ] );
    }
    else if ( _python_par_footer == NULL )
    {
        if ( 6 + self->m_defaults_given >= 8  )
        {
            _python_par_footer = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 6 - 8 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 7 < args_given ))
    {
         if (unlikely( _python_par_comments != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 7 );
             goto error_exit;
         }

        _python_par_comments = INCREASE_REFCOUNT( args[ 7 ] );
    }
    else if ( _python_par_comments == NULL )
    {
        if ( 7 + self->m_defaults_given >= 8  )
        {
            _python_par_comments = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 7 - 8 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_fname == NULL || _python_par_X == NULL || _python_par_fmt == NULL || _python_par_delimiter == NULL || _python_par_newline == NULL || _python_par_header == NULL || _python_par_footer == NULL || _python_par_comments == NULL ))
    {
        PyObject *values[] = { _python_par_fname, _python_par_X, _python_par_fmt, _python_par_delimiter, _python_par_newline, _python_par_header, _python_par_footer, _python_par_comments };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_12_savetxt_of_module_numpy$lib$npyio( self, _python_par_fname, _python_par_X, _python_par_fmt, _python_par_delimiter, _python_par_newline, _python_par_header, _python_par_footer, _python_par_comments );

error_exit:;

    Py_XDECREF( _python_par_fname );
    Py_XDECREF( _python_par_X );
    Py_XDECREF( _python_par_fmt );
    Py_XDECREF( _python_par_delimiter );
    Py_XDECREF( _python_par_newline );
    Py_XDECREF( _python_par_header );
    Py_XDECREF( _python_par_footer );
    Py_XDECREF( _python_par_comments );

    return NULL;
}

static PyObject *dparse_function_12_savetxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 8 )
    {
        return impl_function_12_savetxt_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), INCREASE_REFCOUNT( args[ 7 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_12_savetxt_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_13_fromregex_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_file, PyObject *_python_par_regexp, PyObject *_python_par_dtype )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_file; par_file.object = _python_par_file;
    PyObjectLocalVariable par_regexp; par_regexp.object = _python_par_regexp;
    PyObjectLocalVariable par_dtype; par_dtype.object = _python_par_dtype;
    PyObjectLocalVariable var_own_fh;
    PyObjectLocalVariable var_seq;
    PyObjectLocalVariable var_newdtype;
    PyObjectLocalVariable var_output;
    PyObjectTempVariable tmp_and_1__value_1;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_kw_2;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_call_pos_2;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_hasattr_attr_1;
    PyObject *tmp_hasattr_attr_2;
    PyObject *tmp_hasattr_source_1;
    PyObject *tmp_hasattr_source_2;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_open_filename_1;
    PyObject *tmp_open_mode_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_subscript_2;
    PyObject *tmp_subscr_subscript_3;
    PyObject *tmp_subscr_target_1;
    PyObject *tmp_subscr_target_2;
    PyObject *tmp_subscr_target_3;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_unary_arg_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = Py_False;
    assert( var_own_fh.object == NULL );
    var_own_fh.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_9877841204ddb3d0791965b6592bb1af, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_hasattr_source_1 = par_file.object;

    if ( tmp_hasattr_source_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1137;
        goto frame_exception_exit_1;
    }

    tmp_hasattr_attr_1 = const_str_plain_read;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_1, tmp_hasattr_attr_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1137;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_open_filename_1 = par_file.object;

    if ( tmp_open_filename_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1138;
        goto frame_exception_exit_1;
    }

    tmp_open_mode_1 = const_str_plain_rb;
    tmp_assign_source_2 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1138;
        goto frame_exception_exit_1;
    }
    if (par_file.object == NULL)
    {
        par_file.object = tmp_assign_source_2;
    }
    else
    {
        PyObject *old = par_file.object;
        par_file.object = tmp_assign_source_2;
        Py_DECREF( old );
    }
    tmp_assign_source_3 = Py_True;
    assert( var_own_fh.object != NULL );
    {
        PyObject *old = var_own_fh.object;
        var_own_fh.object = INCREASE_REFCOUNT( tmp_assign_source_3 );
        Py_DECREF( old );
    }

    branch_no_1:;
    // Tried code
    tmp_hasattr_source_2 = par_regexp.object;

    if ( tmp_hasattr_source_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171752 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1142;
        goto try_finally_handler_1;
    }

    tmp_hasattr_attr_2 = const_str_plain_match;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_2, tmp_hasattr_attr_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1142;
        goto try_finally_handler_1;
    }
    if (tmp_res == 1)
    {
        goto branch_no_2;
    }
    else
    {
        goto branch_yes_2;
    }
    branch_yes_2:;
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4450 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1143;
        goto try_finally_handler_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_compile );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1143;
        goto try_finally_handler_1;
    }
    tmp_called_2 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_2 == NULL ))
    {
        tmp_called_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_2 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1143;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_2 = par_regexp.object;

    if ( tmp_call_arg_element_2 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171752 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1143;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 1143;
    tmp_call_arg_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 1143;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1143;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1143;
        goto try_finally_handler_1;
    }
    if (par_regexp.object == NULL)
    {
        par_regexp.object = tmp_assign_source_4;
    }
    else
    {
        PyObject *old = par_regexp.object;
        par_regexp.object = tmp_assign_source_4;
        Py_DECREF( old );
    }
    branch_no_2:;
    tmp_isinstance_inst_1 = par_dtype.object;

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1144;
        goto try_finally_handler_1;
    }

    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1144;
        goto try_finally_handler_1;
    }

    tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_dtype );
    if ( tmp_isinstance_cls_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1144;
        goto try_finally_handler_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    Py_DECREF( tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1144;
        goto try_finally_handler_1;
    }
    if (tmp_res == 1)
    {
        goto branch_no_3;
    }
    else
    {
        goto branch_yes_3;
    }
    branch_yes_3:;
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1145;
        goto try_finally_handler_1;
    }

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_dtype );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1145;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_3 = par_dtype.object;

    if ( tmp_call_arg_element_3 == NULL )
    {
        Py_DECREF( tmp_called_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1145;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 1145;
    tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_3 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1145;
        goto try_finally_handler_1;
    }
    if (par_dtype.object == NULL)
    {
        par_dtype.object = tmp_assign_source_5;
    }
    else
    {
        PyObject *old = par_dtype.object;
        par_dtype.object = tmp_assign_source_5;
        Py_DECREF( old );
    }
    branch_no_3:;
    tmp_source_name_4 = par_regexp.object;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171752 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1147;
        goto try_finally_handler_1;
    }

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_findall );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1147;
        goto try_finally_handler_1;
    }
    tmp_source_name_5 = par_file.object;

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_called_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1147;
        goto try_finally_handler_1;
    }

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_read );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_4 );

        frame_function->f_lineno = 1147;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1147;
    tmp_call_arg_element_4 = CALL_FUNCTION_NO_ARGS( tmp_called_5 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_call_arg_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_4 );

        frame_function->f_lineno = 1147;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1147;
    tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_4 );
    Py_DECREF( tmp_call_arg_element_4 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1147;
        goto try_finally_handler_1;
    }
    assert( var_seq.object == NULL );
    var_seq.object = tmp_assign_source_6;

    // Tried code
    tmp_cond_value_1 = NULL;
    // Tried code
    tmp_assign_source_7 = var_seq.object;

    assert( tmp_and_1__value_1.object == NULL );
    tmp_and_1__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_7 );

    tmp_cond_value_2 = tmp_and_1__value_1.object;

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1148;
        goto try_finally_handler_3;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_cond_value_1 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1.object );
        tmp_and_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_subscr_target_1 = var_seq.object;

    tmp_subscr_subscript_1 = const_int_0;
    tmp_isinstance_inst_2 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_isinstance_inst_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1148;
        goto try_finally_handler_4;
    }
    tmp_isinstance_cls_2 = LOOKUP_BUILTIN( const_str_plain_tuple );
    if ( tmp_isinstance_cls_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_inst_2 );

        frame_function->f_lineno = 1148;
        goto try_finally_handler_4;
    }
    tmp_unary_arg_1 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    Py_DECREF( tmp_isinstance_inst_2 );
    if ( tmp_unary_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1148;
        goto try_finally_handler_4;
    }
    tmp_cond_value_1 = UNARY_OPERATION( UNARY_NOT, tmp_unary_arg_1 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1148;
        goto try_finally_handler_4;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_3;
    }

    goto finally_end_1;
    finally_end_1:;
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_cond_value_1 = tmp_and_1__value_1.object;

    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_2;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1148;
        goto try_finally_handler_2;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1152;
        goto try_finally_handler_2;
    }

    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_dtype );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1152;
        goto try_finally_handler_2;
    }
    tmp_subscr_target_2 = par_dtype.object;

    if ( tmp_subscr_target_2 == NULL )
    {
        Py_DECREF( tmp_called_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1152;
        goto try_finally_handler_2;
    }

    tmp_source_name_7 = par_dtype.object;

    if ( tmp_source_name_7 == NULL )
    {
        Py_DECREF( tmp_called_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1152;
        goto try_finally_handler_2;
    }

    tmp_subscr_target_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_names );
    if ( tmp_subscr_target_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_6 );

        frame_function->f_lineno = 1152;
        goto try_finally_handler_2;
    }
    tmp_subscr_subscript_3 = const_int_0;
    tmp_subscr_subscript_2 = LOOKUP_SUBSCRIPT( tmp_subscr_target_3, tmp_subscr_subscript_3 );
    Py_DECREF( tmp_subscr_target_3 );
    if ( tmp_subscr_subscript_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_6 );

        frame_function->f_lineno = 1152;
        goto try_finally_handler_2;
    }
    tmp_call_arg_element_5 = LOOKUP_SUBSCRIPT( tmp_subscr_target_2, tmp_subscr_subscript_2 );
    Py_DECREF( tmp_subscr_subscript_2 );
    if ( tmp_call_arg_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_6 );

        frame_function->f_lineno = 1152;
        goto try_finally_handler_2;
    }
    frame_function->f_lineno = 1152;
    tmp_assign_source_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_5 );
    Py_DECREF( tmp_called_6 );
    Py_DECREF( tmp_call_arg_element_5 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1152;
        goto try_finally_handler_2;
    }
    assert( var_newdtype.object == NULL );
    var_newdtype.object = tmp_assign_source_8;

    tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_8 == NULL ))
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1153;
        goto try_finally_handler_2;
    }

    tmp_called_7 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_array );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1153;
        goto try_finally_handler_2;
    }
    tmp_call_pos_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = var_seq.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_7 );
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51367 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1153;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    tmp_call_kw_1 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = var_newdtype.object;

    tmp_dict_key_1 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    frame_function->f_lineno = 1153;
    tmp_assign_source_9 = CALL_FUNCTION( tmp_called_7, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_called_7 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1153;
        goto try_finally_handler_2;
    }
    assert( var_output.object == NULL );
    var_output.object = tmp_assign_source_9;

    tmp_assattr_name_1 = par_dtype.object;

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1154;
        goto try_finally_handler_2;
    }

    tmp_assattr_target_1 = var_output.object;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_dtype, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1154;
        goto try_finally_handler_2;
    }
    goto branch_end_4;
    branch_no_4:;
    tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_9 == NULL ))
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1156;
        goto try_finally_handler_2;
    }

    tmp_called_8 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_array );
    if ( tmp_called_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1156;
        goto try_finally_handler_2;
    }
    tmp_call_pos_2 = PyTuple_New( 1 );
    tmp_tuple_element_2 = var_seq.object;

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_called_8 );
        Py_DECREF( tmp_call_pos_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51367 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1156;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_call_pos_2, 0, tmp_tuple_element_2 );
    tmp_call_kw_2 = _PyDict_NewPresized( 1 );
    tmp_dict_value_2 = par_dtype.object;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_called_8 );
        Py_DECREF( tmp_call_pos_2 );
        Py_DECREF( tmp_call_kw_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1156;
        goto try_finally_handler_2;
    }

    tmp_dict_key_2 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_2, tmp_dict_key_2, tmp_dict_value_2 );
    frame_function->f_lineno = 1156;
    tmp_assign_source_10 = CALL_FUNCTION( tmp_called_8, tmp_call_pos_2, tmp_call_kw_2 );
    Py_DECREF( tmp_called_8 );
    Py_DECREF( tmp_call_pos_2 );
    Py_DECREF( tmp_call_kw_2 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1156;
        goto try_finally_handler_2;
    }
    assert( var_output.object == NULL );
    var_output.object = tmp_assign_source_10;

    branch_end_4:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_1__value_1.object );
    tmp_and_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto try_finally_handler_1;
    }

    goto finally_end_3;
    finally_end_3:;
    tmp_return_value = var_output.object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 82676 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1158;
        goto try_finally_handler_1;
    }

    Py_INCREF( tmp_return_value );
    goto try_finally_handler_start_1;
    try_finally_handler_start_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    tmp_cond_value_3 = var_own_fh.object;

    if ( tmp_cond_value_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171700 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1160;
        goto try_finally_handler_error_1;
    }

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1160;
        goto try_finally_handler_error_1;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_source_name_10 = par_file.object;

    if ( tmp_source_name_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1161;
        goto try_finally_handler_error_1;
    }

    tmp_called_9 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_close );
    if ( tmp_called_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1161;
        goto try_finally_handler_error_1;
    }
    frame_function->f_lineno = 1161;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_9 );
    Py_DECREF( tmp_called_9 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1161;
        goto try_finally_handler_error_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_5:;
    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto frame_exception_exit_1;
    }

    // Return value if any.
    if ( tmp_return_value != NULL )
    {
        goto frame_return_exit_1;
    }

    goto finally_end_4;
    try_finally_handler_error_1:;
    Py_XDECREF( exception_keeper_type_4 );exception_keeper_type_4 = NULL;
    Py_XDECREF( exception_keeper_value_4 );exception_keeper_value_4 = NULL;
    Py_XDECREF( exception_keeper_tb_4 );exception_keeper_tb_4 = NULL;
    goto frame_exception_exit_1;
    finally_end_4:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_own_fh.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_own_fh,
            var_own_fh.object
        );

    }
    if ((var_seq.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_seq,
            var_seq.object
        );

    }
    if ((var_newdtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_newdtype,
            var_newdtype.object
        );

    }
    if ((var_output.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_output,
            var_output.object
        );

    }
    if ((par_file.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_file,
            par_file.object
        );

    }
    if ((par_regexp.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_regexp,
            par_regexp.object
        );

    }
    if ((par_dtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_dtype,
            par_dtype.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_13_fromregex_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_file = NULL;
    PyObject *_python_par_regexp = NULL;
    PyObject *_python_par_dtype = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "fromregex() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_file == key )
            {
                assert( _python_par_file == NULL );
                _python_par_file = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_regexp == key )
            {
                assert( _python_par_regexp == NULL );
                _python_par_regexp = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_dtype == key )
            {
                assert( _python_par_dtype == NULL );
                _python_par_dtype = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_file, key ) == 1 )
            {
                assert( _python_par_file == NULL );
                _python_par_file = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_regexp, key ) == 1 )
            {
                assert( _python_par_regexp == NULL );
                _python_par_regexp = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_dtype, key ) == 1 )
            {
                assert( _python_par_dtype == NULL );
                _python_par_dtype = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "fromregex() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_file != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_file = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_file == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_file = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_regexp != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_regexp = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_regexp == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_regexp = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_dtype != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_dtype = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_dtype == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_dtype = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_file == NULL || _python_par_regexp == NULL || _python_par_dtype == NULL ))
    {
        PyObject *values[] = { _python_par_file, _python_par_regexp, _python_par_dtype };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_13_fromregex_of_module_numpy$lib$npyio( self, _python_par_file, _python_par_regexp, _python_par_dtype );

error_exit:;

    Py_XDECREF( _python_par_file );
    Py_XDECREF( _python_par_regexp );
    Py_XDECREF( _python_par_dtype );

    return NULL;
}

static PyObject *dparse_function_13_fromregex_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_13_fromregex_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_13_fromregex_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_14_genfromtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_fname, PyObject *_python_par_dtype, PyObject *_python_par_comments, PyObject *_python_par_delimiter, PyObject *_python_par_skiprows, PyObject *_python_par_skip_header, PyObject *_python_par_skip_footer, PyObject *_python_par_converters, PyObject *_python_par_missing, PyObject *_python_par_missing_values, PyObject *_python_par_filling_values, PyObject *_python_par_usecols, PyObject *_python_par_names, PyObject *_python_par_excludelist, PyObject *_python_par_deletechars, PyObject *_python_par_replace_space, PyObject *_python_par_autostrip, PyObject *_python_par_case_sensitive, PyObject *_python_par_defaultfmt, PyObject *_python_par_unpack, PyObject *_python_par_usemask, PyObject *_python_par_loose, PyObject *_python_par_invalid_raise )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_fname; par_fname.object = _python_par_fname;
    PyObjectLocalVariable par_dtype; par_dtype.object = _python_par_dtype;
    PyObjectLocalVariable par_comments; par_comments.object = _python_par_comments;
    PyObjectLocalVariable par_delimiter; par_delimiter.object = _python_par_delimiter;
    PyObjectLocalVariable par_skiprows; par_skiprows.object = _python_par_skiprows;
    PyObjectLocalVariable par_skip_header; par_skip_header.object = _python_par_skip_header;
    PyObjectLocalVariable par_skip_footer; par_skip_footer.object = _python_par_skip_footer;
    PyObjectLocalVariable par_converters; par_converters.object = _python_par_converters;
    PyObjectLocalVariable par_missing; par_missing.object = _python_par_missing;
    PyObjectLocalVariable par_missing_values; par_missing_values.object = _python_par_missing_values;
    PyObjectLocalVariable par_filling_values; par_filling_values.object = _python_par_filling_values;
    PyObjectLocalVariable par_usecols; par_usecols.object = _python_par_usecols;
    PyObjectLocalVariable par_names; par_names.object = _python_par_names;
    PyObjectLocalVariable par_excludelist; par_excludelist.object = _python_par_excludelist;
    PyObjectLocalVariable par_deletechars; par_deletechars.object = _python_par_deletechars;
    PyObjectLocalVariable par_replace_space; par_replace_space.object = _python_par_replace_space;
    PyObjectLocalVariable par_autostrip; par_autostrip.object = _python_par_autostrip;
    PyObjectLocalVariable par_case_sensitive; par_case_sensitive.object = _python_par_case_sensitive;
    PyObjectLocalVariable par_defaultfmt; par_defaultfmt.object = _python_par_defaultfmt;
    PyObjectLocalVariable par_unpack; par_unpack.object = _python_par_unpack;
    PyObjectLocalVariable par_usemask; par_usemask.object = _python_par_usemask;
    PyObjectLocalVariable par_loose; par_loose.object = _python_par_loose;
    PyObjectLocalVariable par_invalid_raise; par_invalid_raise.object = _python_par_invalid_raise;
    PyObjectLocalVariable var_MaskedArray;
    PyObjectLocalVariable var_make_mask_descr;
    PyObjectLocalVariable var_user_converters;
    PyObjectLocalVariable var_errmsg;
    PyObjectLocalVariable var_own_fhd;
    PyObjectLocalVariable var_fhd;
    PyObjectLocalVariable var_split_line;
    PyObjectLocalVariable var_validate_names;
    PyObjectSharedLocalVariable var_i;
    PyObjectLocalVariable var_first_values;
    PyObjectLocalVariable var_first_line;
    PyObjectLocalVariable var_fval;
    PyObjectLocalVariable var__;
    PyObjectLocalVariable var_nbcols;
    PyObjectLocalVariable var_current;
    PyObjectLocalVariable var_descr;
    PyObjectLocalVariable var_user_missing_values;
    PyObjectLocalVariable var_key;
    PyObjectLocalVariable var_val;
    PyObjectLocalVariable var_miss;
    PyObjectLocalVariable var_value;
    PyObjectLocalVariable var_entry;
    PyObjectLocalVariable var_user_value;
    PyObjectLocalVariable var_values;
    PyObjectLocalVariable var_user_filling_values;
    PyObjectLocalVariable var_n;
    PyObjectLocalVariable var_fill;
    PyObjectLocalVariable var_dtype_flat;
    PyObjectLocalVariable var_zipit;
    PyObjectLocalVariable var_dt;
    PyObjectLocalVariable var_uc_update;
    PyObjectLocalVariable var_conv;
    PyObjectLocalVariable var_testing_value;
    PyObjectLocalVariable var_miss_chars;
    PyObjectLocalVariable var_rows;
    PyObjectLocalVariable var_append_to_rows;
    PyObjectLocalVariable var_masks;
    PyObjectLocalVariable var_append_to_masks;
    PyObjectLocalVariable var_invalid;
    PyObjectLocalVariable var_append_to_invalid;
    PyObjectLocalVariable var_line;
    PyObjectLocalVariable var_nbvalues;
    PyObjectLocalVariable var_v;
    PyObjectLocalVariable var_m;
    PyObjectLocalVariable var_converter;
    PyObjectLocalVariable var__m;
    PyObjectLocalVariable var_current_column;
    PyObjectLocalVariable var_j;
    PyObjectLocalVariable var_nbinvalid;
    PyObjectLocalVariable var_nbrows;
    PyObjectLocalVariable var_template;
    PyObjectLocalVariable var_nbinvalid_skipped;
    PyObjectLocalVariable var_nb;
    PyObjectLocalVariable var__r;
    PyObjectLocalVariable var_data;
    PyObjectLocalVariable var_column_types;
    PyObjectLocalVariable var_strcolidx;
    PyObjectLocalVariable var_c;
    PyObjectLocalVariable var_base;
    PyObjectLocalVariable var_ddtype;
    PyObjectLocalVariable var_mdtype;
    PyObjectLocalVariable var_output;
    PyObjectLocalVariable var_outputmask;
    PyObjectLocalVariable var_t;
    PyObjectLocalVariable var_rowmasks;
    PyObjectLocalVariable var_ishomogeneous;
    PyObjectLocalVariable var_ttype;
    PyObjectLocalVariable var_name;
    PyObjectLocalVariable var_mval;
    PyObjectTempVariable tmp_or_1__value_1;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_listcontr_1__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_1__listcontr_result;
    PyObjectTempVariable tmp_listcontr_1__iter_value_0;
    PyObjectTempVariable tmp_or_2__value_1;
    PyObjectTempVariable tmp_listcontr_2__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_2__listcontr_result;
    PyObjectTempVariable tmp_listcontr_2__iter_value_0;
    PyObjectTempVariable tmp_listcontr_3__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_3__listcontr_result;
    PyObjectTempVariable tmp_listcontr_3__iter_value_0;
    PyObjectTempVariable tmp_for_loop_2__for_iterator;
    PyObjectTempVariable tmp_for_loop_2__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_and_1__value_1;
    PyObjectTempVariable tmp_listcontr_4__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_4__listcontr_result;
    PyObjectTempVariable tmp_listcontr_4__iter_value_0;
    PyObjectTempVariable tmp_and_2__value_1;
    PyObjectTempVariable tmp_listcontr_5__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_5__listcontr_result;
    PyObjectTempVariable tmp_listcontr_5__iter_value_0;
    PyObjectTempVariable tmp_and_3__value_1;
    PyObjectTempVariable tmp_or_3__value_1;
    PyObjectTempVariable tmp_listcontr_6__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_6__listcontr_result;
    PyObjectTempVariable tmp_listcontr_6__iter_value_0;
    PyObjectTempVariable tmp_for_loop_3__for_iterator;
    PyObjectTempVariable tmp_for_loop_3__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_2__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_2__element_1;
    PyObjectTempVariable tmp_tuple_unpack_2__element_2;
    PyObjectTempVariable tmp_listcontr_7__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_7__listcontr_result;
    PyObjectTempVariable tmp_listcontr_7__iter_value_0;
    PyObjectTempVariable tmp_for_loop_4__for_iterator;
    PyObjectTempVariable tmp_for_loop_4__iter_value;
    PyObjectTempVariable tmp_for_loop_5__for_iterator;
    PyObjectTempVariable tmp_for_loop_5__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_3__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_3__element_1;
    PyObjectTempVariable tmp_tuple_unpack_3__element_2;
    PyObjectTempVariable tmp_for_loop_6__for_iterator;
    PyObjectTempVariable tmp_for_loop_6__iter_value;
    PyObjectTempVariable tmp_for_loop_7__for_iterator;
    PyObjectTempVariable tmp_for_loop_7__iter_value;
    PyObjectTempVariable tmp_listcontr_8__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_8__listcontr_result;
    PyObjectTempVariable tmp_listcontr_8__iter_value_0;
    PyObjectTempVariable tmp_for_loop_8__for_iterator;
    PyObjectTempVariable tmp_for_loop_8__iter_value;
    PyObjectTempVariable tmp_or_4__value_1;
    PyObjectTempVariable tmp_for_loop_9__for_iterator;
    PyObjectTempVariable tmp_for_loop_9__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_4__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_4__element_1;
    PyObjectTempVariable tmp_tuple_unpack_4__element_2;
    PyObjectTempVariable tmp_listcontr_9__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_9__listcontr_result;
    PyObjectTempVariable tmp_listcontr_9__iter_value_0;
    PyObjectTempVariable tmp_tuple_unpack_5__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_5__element_1;
    PyObjectTempVariable tmp_tuple_unpack_5__element_2;
    PyObjectTempVariable tmp_listcontr_10__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_10__listcontr_result;
    PyObjectTempVariable tmp_listcontr_10__iter_value_0;
    PyObjectTempVariable tmp_tuple_unpack_6__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_6__element_1;
    PyObjectTempVariable tmp_tuple_unpack_6__element_2;
    PyObjectTempVariable tmp_tuple_unpack_6__element_3;
    PyObjectTempVariable tmp_listcontr_11__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_11__listcontr_result;
    PyObjectTempVariable tmp_listcontr_11__iter_value_0;
    PyObjectTempVariable tmp_tuple_unpack_7__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_7__element_1;
    PyObjectTempVariable tmp_tuple_unpack_7__element_2;
    PyObjectTempVariable tmp_for_loop_10__for_iterator;
    PyObjectTempVariable tmp_for_loop_10__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_8__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_8__element_1;
    PyObjectTempVariable tmp_tuple_unpack_8__element_2;
    PyObjectTempVariable tmp_listcontr_12__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_12__listcontr_result;
    PyObjectTempVariable tmp_listcontr_12__iter_value_0;
    PyObjectTempVariable tmp_for_loop_11__for_iterator;
    PyObjectTempVariable tmp_for_loop_11__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_9__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_9__element_1;
    PyObjectTempVariable tmp_tuple_unpack_9__element_2;
    PyObjectTempVariable tmp_listcontr_13__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_13__listcontr_result;
    PyObjectTempVariable tmp_listcontr_13__iter_value_0;
    PyObjectTempVariable tmp_listcontr_14__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_14__listcontr_result;
    PyObjectTempVariable tmp_listcontr_14__iter_value_0;
    PyObjectTempVariable tmp_tuple_unpack_10__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_10__element_1;
    PyObjectTempVariable tmp_tuple_unpack_10__element_2;
    PyObjectTempVariable tmp_for_loop_12__for_iterator;
    PyObjectTempVariable tmp_for_loop_12__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_11__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_11__element_1;
    PyObjectTempVariable tmp_tuple_unpack_11__element_2;
    PyObjectTempVariable tmp_listcontr_15__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_15__listcontr_result;
    PyObjectTempVariable tmp_listcontr_15__iter_value_0;
    PyObjectTempVariable tmp_for_loop_13__for_iterator;
    PyObjectTempVariable tmp_for_loop_13__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_12__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_12__element_1;
    PyObjectTempVariable tmp_tuple_unpack_12__element_2;
    PyObjectTempVariable tmp_inplace_assign_1__inplace_start;
    PyObjectTempVariable tmp_inplace_assign_1__inplace_end;
    PyObjectTempVariable tmp_inplace_assign_2__inplace_start;
    PyObjectTempVariable tmp_inplace_assign_2__inplace_end;
    PyObjectTempVariable tmp_listcontr_16__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_16__listcontr_result;
    PyObjectTempVariable tmp_listcontr_16__iter_value_0;
    PyObjectTempVariable tmp_inplace_assign_3__inplace_start;
    PyObjectTempVariable tmp_inplace_assign_3__inplace_end;
    PyObjectTempVariable tmp_listcontr_17__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_17__listcontr_result;
    PyObjectTempVariable tmp_listcontr_17__iter_value_0;
    PyObjectTempVariable tmp_tuple_unpack_13__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_13__element_1;
    PyObjectTempVariable tmp_tuple_unpack_13__element_2;
    PyObjectTempVariable tmp_listcontr_18__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_18__listcontr_result;
    PyObjectTempVariable tmp_listcontr_19__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_19__listcontr_result;
    PyObjectTempVariable tmp_listcontr_19__iter_value_0;
    PyObjectTempVariable tmp_listcontr_18__iter_value_0;
    PyObjectTempVariable tmp_tuple_unpack_14__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_14__element_1;
    PyObjectTempVariable tmp_tuple_unpack_14__element_2;
    PyObjectTempVariable tmp_listcontr_20__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_20__listcontr_result;
    PyObjectTempVariable tmp_listcontr_21__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_21__listcontr_result;
    PyObjectTempVariable tmp_listcontr_21__iter_value_0;
    PyObjectTempVariable tmp_listcontr_20__iter_value_0;
    PyObjectTempVariable tmp_tuple_unpack_15__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_15__element_1;
    PyObjectTempVariable tmp_tuple_unpack_15__element_2;
    PyObjectTempVariable tmp_listcontr_22__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_22__listcontr_result;
    PyObjectTempVariable tmp_listcontr_22__iter_value_0;
    PyObjectTempVariable tmp_listcontr_23__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_23__listcontr_result;
    PyObjectTempVariable tmp_listcontr_23__iter_value_0;
    PyObjectTempVariable tmp_tuple_unpack_16__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_16__element_1;
    PyObjectTempVariable tmp_tuple_unpack_16__element_2;
    PyObjectTempVariable tmp_for_loop_14__for_iterator;
    PyObjectTempVariable tmp_for_loop_14__iter_value;
    PyObjectTempVariable tmp_listcontr_24__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_24__listcontr_result;
    PyObjectTempVariable tmp_listcontr_24__iter_value_0;
    PyObjectTempVariable tmp_tuple_unpack_17__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_17__element_1;
    PyObjectTempVariable tmp_tuple_unpack_17__element_2;
    PyObjectTempVariable tmp_listcontr_25__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_25__listcontr_result;
    PyObjectTempVariable tmp_listcontr_25__iter_value_0;
    PyObjectTempVariable tmp_tuple_unpack_18__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_18__element_1;
    PyObjectTempVariable tmp_tuple_unpack_18__element_2;
    PyObjectTempVariable tmp_listcontr_26__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_26__listcontr_result;
    PyObjectTempVariable tmp_listcontr_26__iter_value_0;
    PyObjectTempVariable tmp_tuple_unpack_19__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_19__element_1;
    PyObjectTempVariable tmp_tuple_unpack_19__element_2;
    PyObjectTempVariable tmp_and_4__value_1;
    PyObjectTempVariable tmp_listcontr_27__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_27__listcontr_result;
    PyObjectTempVariable tmp_listcontr_27__iter_value_0;
    PyObjectTempVariable tmp_listcontr_28__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_28__listcontr_result;
    PyObjectTempVariable tmp_listcontr_28__iter_value_0;
    PyObjectTempVariable tmp_listcontr_29__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_29__listcontr_result;
    PyObjectTempVariable tmp_listcontr_29__iter_value_0;
    PyObjectTempVariable tmp_for_loop_15__for_iterator;
    PyObjectTempVariable tmp_for_loop_15__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_20__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_20__element_1;
    PyObjectTempVariable tmp_tuple_unpack_20__element_2;
    PyObjectTempVariable tmp_inplace_assign_4__inplace_start;
    PyObjectTempVariable tmp_inplace_assign_4__inplace_end;
    PyObjectTempVariable tmp_listcontr_30__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_30__listcontr_result;
    PyObjectTempVariable tmp_listcontr_30__iter_value_0;
    PyObjectTempVariable tmp_and_5__value_1;
    PyObjectTempVariable tmp_or_5__value_1;
    PyObjectTempVariable tmp_for_loop_16__for_iterator;
    PyObjectTempVariable tmp_for_loop_16__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_21__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_21__element_1;
    PyObjectTempVariable tmp_tuple_unpack_21__element_2;
    PyObjectTempVariable tmp_listcontr_31__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_31__listcontr_result;
    PyObjectTempVariable tmp_listcontr_31__iter_value_0;
    PyObjectTempVariable tmp_for_loop_17__for_iterator;
    PyObjectTempVariable tmp_for_loop_17__iter_value;
    PyObjectTempVariable tmp_inplace_assign_5__inplace_target;
    PyObjectTempVariable tmp_inplace_assign_5__inplace_subscript;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    PyObject *exception_keeper_type_34;
    PyObject *exception_keeper_value_34;
    PyTracebackObject *exception_keeper_tb_34;
    PyObject *exception_keeper_type_35;
    PyObject *exception_keeper_value_35;
    PyTracebackObject *exception_keeper_tb_35;
    PyObject *exception_keeper_type_36;
    PyObject *exception_keeper_value_36;
    PyTracebackObject *exception_keeper_tb_36;
    PyObject *exception_keeper_type_37;
    PyObject *exception_keeper_value_37;
    PyTracebackObject *exception_keeper_tb_37;
    PyObject *exception_keeper_type_38;
    PyObject *exception_keeper_value_38;
    PyTracebackObject *exception_keeper_tb_38;
    PyObject *exception_keeper_type_39;
    PyObject *exception_keeper_value_39;
    PyTracebackObject *exception_keeper_tb_39;
    PyObject *exception_keeper_type_40;
    PyObject *exception_keeper_value_40;
    PyTracebackObject *exception_keeper_tb_40;
    PyObject *exception_keeper_type_41;
    PyObject *exception_keeper_value_41;
    PyTracebackObject *exception_keeper_tb_41;
    PyObject *exception_keeper_type_42;
    PyObject *exception_keeper_value_42;
    PyTracebackObject *exception_keeper_tb_42;
    PyObject *exception_keeper_type_43;
    PyObject *exception_keeper_value_43;
    PyTracebackObject *exception_keeper_tb_43;
    PyObject *exception_keeper_type_44;
    PyObject *exception_keeper_value_44;
    PyTracebackObject *exception_keeper_tb_44;
    PyObject *exception_keeper_type_45;
    PyObject *exception_keeper_value_45;
    PyTracebackObject *exception_keeper_tb_45;
    PyObject *exception_keeper_type_46;
    PyObject *exception_keeper_value_46;
    PyTracebackObject *exception_keeper_tb_46;
    PyObject *exception_keeper_type_47;
    PyObject *exception_keeper_value_47;
    PyTracebackObject *exception_keeper_tb_47;
    PyObject *exception_keeper_type_48;
    PyObject *exception_keeper_value_48;
    PyTracebackObject *exception_keeper_tb_48;
    PyObject *exception_keeper_type_49;
    PyObject *exception_keeper_value_49;
    PyTracebackObject *exception_keeper_tb_49;
    PyObject *exception_keeper_type_50;
    PyObject *exception_keeper_value_50;
    PyTracebackObject *exception_keeper_tb_50;
    PyObject *exception_keeper_type_51;
    PyObject *exception_keeper_value_51;
    PyTracebackObject *exception_keeper_tb_51;
    PyObject *exception_keeper_type_52;
    PyObject *exception_keeper_value_52;
    PyTracebackObject *exception_keeper_tb_52;
    PyObject *exception_keeper_type_53;
    PyObject *exception_keeper_value_53;
    PyTracebackObject *exception_keeper_tb_53;
    PyObject *exception_keeper_type_54;
    PyObject *exception_keeper_value_54;
    PyTracebackObject *exception_keeper_tb_54;
    PyObject *exception_keeper_type_55;
    PyObject *exception_keeper_value_55;
    PyTracebackObject *exception_keeper_tb_55;
    PyObject *exception_keeper_type_56;
    PyObject *exception_keeper_value_56;
    PyTracebackObject *exception_keeper_tb_56;
    PyObject *exception_keeper_type_57;
    PyObject *exception_keeper_value_57;
    PyTracebackObject *exception_keeper_tb_57;
    PyObject *exception_keeper_type_58;
    PyObject *exception_keeper_value_58;
    PyTracebackObject *exception_keeper_tb_58;
    PyObject *exception_keeper_type_59;
    PyObject *exception_keeper_value_59;
    PyTracebackObject *exception_keeper_tb_59;
    PyObject *exception_keeper_type_60;
    PyObject *exception_keeper_value_60;
    PyTracebackObject *exception_keeper_tb_60;
    PyObject *exception_keeper_type_61;
    PyObject *exception_keeper_value_61;
    PyTracebackObject *exception_keeper_tb_61;
    PyObject *exception_keeper_type_62;
    PyObject *exception_keeper_value_62;
    PyTracebackObject *exception_keeper_tb_62;
    PyObject *exception_keeper_type_63;
    PyObject *exception_keeper_value_63;
    PyTracebackObject *exception_keeper_tb_63;
    PyObject *exception_keeper_type_64;
    PyObject *exception_keeper_value_64;
    PyTracebackObject *exception_keeper_tb_64;
    PyObject *exception_keeper_type_65;
    PyObject *exception_keeper_value_65;
    PyTracebackObject *exception_keeper_tb_65;
    PyObject *exception_keeper_type_66;
    PyObject *exception_keeper_value_66;
    PyTracebackObject *exception_keeper_tb_66;
    PyObject *exception_keeper_type_67;
    PyObject *exception_keeper_value_67;
    PyTracebackObject *exception_keeper_tb_67;
    PyObject *exception_keeper_type_68;
    PyObject *exception_keeper_value_68;
    PyTracebackObject *exception_keeper_tb_68;
    PyObject *exception_keeper_type_69;
    PyObject *exception_keeper_value_69;
    PyTracebackObject *exception_keeper_tb_69;
    PyObject *exception_keeper_type_70;
    PyObject *exception_keeper_value_70;
    PyTracebackObject *exception_keeper_tb_70;
    PyObject *exception_keeper_type_71;
    PyObject *exception_keeper_value_71;
    PyTracebackObject *exception_keeper_tb_71;
    PyObject *exception_keeper_type_72;
    PyObject *exception_keeper_value_72;
    PyTracebackObject *exception_keeper_tb_72;
    PyObject *exception_keeper_type_73;
    PyObject *exception_keeper_value_73;
    PyTracebackObject *exception_keeper_tb_73;
    PyObject *exception_keeper_type_74;
    PyObject *exception_keeper_value_74;
    PyTracebackObject *exception_keeper_tb_74;
    PyObject *exception_keeper_type_75;
    PyObject *exception_keeper_value_75;
    PyTracebackObject *exception_keeper_tb_75;
    PyObject *exception_keeper_type_76;
    PyObject *exception_keeper_value_76;
    PyTracebackObject *exception_keeper_tb_76;
    PyObject *exception_keeper_type_77;
    PyObject *exception_keeper_value_77;
    PyTracebackObject *exception_keeper_tb_77;
    PyObject *exception_keeper_type_78;
    PyObject *exception_keeper_value_78;
    PyTracebackObject *exception_keeper_tb_78;
    PyObject *exception_keeper_type_79;
    PyObject *exception_keeper_value_79;
    PyTracebackObject *exception_keeper_tb_79;
    PyObject *exception_keeper_type_80;
    PyObject *exception_keeper_value_80;
    PyTracebackObject *exception_keeper_tb_80;
    PyObject *exception_keeper_type_81;
    PyObject *exception_keeper_value_81;
    PyTracebackObject *exception_keeper_tb_81;
    PyObject *exception_keeper_type_82;
    PyObject *exception_keeper_value_82;
    PyTracebackObject *exception_keeper_tb_82;
    PyObject *exception_keeper_type_83;
    PyObject *exception_keeper_value_83;
    PyTracebackObject *exception_keeper_tb_83;
    PyObject *exception_keeper_type_84;
    PyObject *exception_keeper_value_84;
    PyTracebackObject *exception_keeper_tb_84;
    PyObject *exception_keeper_type_85;
    PyObject *exception_keeper_value_85;
    PyTracebackObject *exception_keeper_tb_85;
    PyObject *exception_keeper_type_86;
    PyObject *exception_keeper_value_86;
    PyTracebackObject *exception_keeper_tb_86;
    PyObject *exception_keeper_type_87;
    PyObject *exception_keeper_value_87;
    PyTracebackObject *exception_keeper_tb_87;
    PyObject *exception_keeper_type_88;
    PyObject *exception_keeper_value_88;
    PyTracebackObject *exception_keeper_tb_88;
    PyObject *exception_keeper_type_89;
    PyObject *exception_keeper_value_89;
    PyTracebackObject *exception_keeper_tb_89;
    PyObject *exception_keeper_type_90;
    PyObject *exception_keeper_value_90;
    PyTracebackObject *exception_keeper_tb_90;
    PyObject *exception_keeper_type_91;
    PyObject *exception_keeper_value_91;
    PyTracebackObject *exception_keeper_tb_91;
    PyObject *exception_keeper_type_92;
    PyObject *exception_keeper_value_92;
    PyTracebackObject *exception_keeper_tb_92;
    PyObject *exception_keeper_type_93;
    PyObject *exception_keeper_value_93;
    PyTracebackObject *exception_keeper_tb_93;
    PyObject *exception_keeper_type_94;
    PyObject *exception_keeper_value_94;
    PyTracebackObject *exception_keeper_tb_94;
    PyObject *exception_keeper_type_95;
    PyObject *exception_keeper_value_95;
    PyTracebackObject *exception_keeper_tb_95;
    PyObject *exception_keeper_type_96;
    PyObject *exception_keeper_value_96;
    PyTracebackObject *exception_keeper_tb_96;
    PyObject *exception_keeper_type_97;
    PyObject *exception_keeper_value_97;
    PyTracebackObject *exception_keeper_tb_97;
    PyObject *exception_keeper_type_98;
    PyObject *exception_keeper_value_98;
    PyTracebackObject *exception_keeper_tb_98;
    PyObject *exception_keeper_type_99;
    PyObject *exception_keeper_value_99;
    PyTracebackObject *exception_keeper_tb_99;
    PyObject *exception_keeper_type_100;
    PyObject *exception_keeper_value_100;
    PyTracebackObject *exception_keeper_tb_100;
    PyObject *exception_keeper_type_101;
    PyObject *exception_keeper_value_101;
    PyTracebackObject *exception_keeper_tb_101;
    PyObject *exception_keeper_type_102;
    PyObject *exception_keeper_value_102;
    PyTracebackObject *exception_keeper_tb_102;
    PyObject *exception_keeper_type_103;
    PyObject *exception_keeper_value_103;
    PyTracebackObject *exception_keeper_tb_103;
    PyObject *exception_keeper_type_104;
    PyObject *exception_keeper_value_104;
    PyTracebackObject *exception_keeper_tb_104;
    PyObject *exception_keeper_type_105;
    PyObject *exception_keeper_value_105;
    PyTracebackObject *exception_keeper_tb_105;
    PyObject *exception_keeper_type_106;
    PyObject *exception_keeper_value_106;
    PyTracebackObject *exception_keeper_tb_106;
    PyObject *exception_keeper_type_107;
    PyObject *exception_keeper_value_107;
    PyTracebackObject *exception_keeper_tb_107;
    PyObject *exception_keeper_type_108;
    PyObject *exception_keeper_value_108;
    PyTracebackObject *exception_keeper_tb_108;
    PyObject *exception_keeper_type_109;
    PyObject *exception_keeper_value_109;
    PyTracebackObject *exception_keeper_tb_109;
    PyObject *exception_keeper_type_110;
    PyObject *exception_keeper_value_110;
    PyTracebackObject *exception_keeper_tb_110;
    PyObject *exception_keeper_type_111;
    PyObject *exception_keeper_value_111;
    PyTracebackObject *exception_keeper_tb_111;
    PyObject *exception_keeper_type_112;
    PyObject *exception_keeper_value_112;
    PyTracebackObject *exception_keeper_tb_112;
    PyObject *exception_keeper_type_113;
    PyObject *exception_keeper_value_113;
    PyTracebackObject *exception_keeper_tb_113;
    PyObject *exception_keeper_type_114;
    PyObject *exception_keeper_value_114;
    PyTracebackObject *exception_keeper_tb_114;
    PyObject *exception_keeper_type_115;
    PyObject *exception_keeper_value_115;
    PyTracebackObject *exception_keeper_tb_115;
    PyObject *exception_keeper_type_116;
    PyObject *exception_keeper_value_116;
    PyTracebackObject *exception_keeper_tb_116;
    PyObject *exception_keeper_type_117;
    PyObject *exception_keeper_value_117;
    PyTracebackObject *exception_keeper_tb_117;
    PyObject *exception_keeper_type_118;
    PyObject *exception_keeper_value_118;
    PyTracebackObject *exception_keeper_tb_118;
    PyObject *exception_keeper_type_119;
    PyObject *exception_keeper_value_119;
    PyTracebackObject *exception_keeper_tb_119;
    PyObject *exception_keeper_type_120;
    PyObject *exception_keeper_value_120;
    PyTracebackObject *exception_keeper_tb_120;
    PyObject *exception_keeper_type_121;
    PyObject *exception_keeper_value_121;
    PyTracebackObject *exception_keeper_tb_121;
    PyObject *exception_keeper_type_122;
    PyObject *exception_keeper_value_122;
    PyTracebackObject *exception_keeper_tb_122;
    PyObject *exception_keeper_type_123;
    PyObject *exception_keeper_value_123;
    PyTracebackObject *exception_keeper_tb_123;
    PyObject *exception_keeper_type_124;
    PyObject *exception_keeper_value_124;
    PyTracebackObject *exception_keeper_tb_124;
    PyObject *exception_keeper_type_125;
    PyObject *exception_keeper_value_125;
    PyTracebackObject *exception_keeper_tb_125;
    PyObject *exception_keeper_type_126;
    PyObject *exception_keeper_value_126;
    PyTracebackObject *exception_keeper_tb_126;
    PyObject *exception_keeper_type_127;
    PyObject *exception_keeper_value_127;
    PyTracebackObject *exception_keeper_tb_127;
    PyObject *exception_keeper_type_128;
    PyObject *exception_keeper_value_128;
    PyTracebackObject *exception_keeper_tb_128;
    PyObject *exception_keeper_type_129;
    PyObject *exception_keeper_value_129;
    PyTracebackObject *exception_keeper_tb_129;
    PyObject *exception_keeper_type_130;
    PyObject *exception_keeper_value_130;
    PyTracebackObject *exception_keeper_tb_130;
    PyObject *tmp_append_to_1;
    PyObject *tmp_append_to_2;
    PyObject *tmp_append_to_3;
    PyObject *tmp_append_to_4;
    PyObject *tmp_append_to_5;
    PyObject *tmp_append_to_6;
    PyObject *tmp_append_to_7;
    PyObject *tmp_append_to_8;
    PyObject *tmp_append_to_9;
    PyObject *tmp_append_to_10;
    PyObject *tmp_append_to_11;
    PyObject *tmp_append_to_12;
    PyObject *tmp_append_to_13;
    PyObject *tmp_append_to_14;
    PyObject *tmp_append_to_15;
    PyObject *tmp_append_to_16;
    PyObject *tmp_append_to_17;
    PyObject *tmp_append_to_18;
    PyObject *tmp_append_to_19;
    PyObject *tmp_append_to_20;
    PyObject *tmp_append_to_21;
    PyObject *tmp_append_to_22;
    PyObject *tmp_append_to_23;
    PyObject *tmp_append_to_24;
    PyObject *tmp_append_to_25;
    PyObject *tmp_append_to_26;
    PyObject *tmp_append_to_27;
    PyObject *tmp_append_to_28;
    PyObject *tmp_append_to_29;
    PyObject *tmp_append_to_30;
    PyObject *tmp_append_to_31;
    PyObject *tmp_append_value_1;
    PyObject *tmp_append_value_2;
    PyObject *tmp_append_value_3;
    PyObject *tmp_append_value_4;
    PyObject *tmp_append_value_5;
    PyObject *tmp_append_value_6;
    PyObject *tmp_append_value_7;
    PyObject *tmp_append_value_8;
    PyObject *tmp_append_value_9;
    PyObject *tmp_append_value_10;
    PyObject *tmp_append_value_11;
    PyObject *tmp_append_value_12;
    PyObject *tmp_append_value_13;
    PyObject *tmp_append_value_14;
    PyObject *tmp_append_value_15;
    PyObject *tmp_append_value_16;
    PyObject *tmp_append_value_17;
    PyObject *tmp_append_value_18;
    PyObject *tmp_append_value_19;
    PyObject *tmp_append_value_20;
    PyObject *tmp_append_value_21;
    PyObject *tmp_append_value_22;
    PyObject *tmp_append_value_23;
    PyObject *tmp_append_value_24;
    PyObject *tmp_append_value_25;
    PyObject *tmp_append_value_26;
    PyObject *tmp_append_value_27;
    PyObject *tmp_append_value_28;
    PyObject *tmp_append_value_29;
    PyObject *tmp_append_value_30;
    PyObject *tmp_append_value_31;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscribed_2;
    PyObject *tmp_ass_subscribed_3;
    PyObject *tmp_ass_subscribed_4;
    PyObject *tmp_ass_subscribed_5;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subscript_2;
    PyObject *tmp_ass_subscript_3;
    PyObject *tmp_ass_subscript_4;
    PyObject *tmp_ass_subscript_5;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_ass_subvalue_2;
    PyObject *tmp_ass_subvalue_3;
    PyObject *tmp_ass_subvalue_4;
    PyObject *tmp_ass_subvalue_5;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_assign_source_88;
    PyObject *tmp_assign_source_89;
    PyObject *tmp_assign_source_90;
    PyObject *tmp_assign_source_91;
    PyObject *tmp_assign_source_92;
    PyObject *tmp_assign_source_93;
    PyObject *tmp_assign_source_94;
    PyObject *tmp_assign_source_95;
    PyObject *tmp_assign_source_96;
    PyObject *tmp_assign_source_97;
    PyObject *tmp_assign_source_98;
    PyObject *tmp_assign_source_99;
    PyObject *tmp_assign_source_100;
    PyObject *tmp_assign_source_101;
    PyObject *tmp_assign_source_102;
    PyObject *tmp_assign_source_103;
    PyObject *tmp_assign_source_104;
    PyObject *tmp_assign_source_105;
    PyObject *tmp_assign_source_106;
    PyObject *tmp_assign_source_107;
    PyObject *tmp_assign_source_108;
    PyObject *tmp_assign_source_109;
    PyObject *tmp_assign_source_110;
    PyObject *tmp_assign_source_111;
    PyObject *tmp_assign_source_112;
    PyObject *tmp_assign_source_113;
    PyObject *tmp_assign_source_114;
    PyObject *tmp_assign_source_115;
    PyObject *tmp_assign_source_116;
    PyObject *tmp_assign_source_117;
    PyObject *tmp_assign_source_118;
    PyObject *tmp_assign_source_119;
    PyObject *tmp_assign_source_120;
    PyObject *tmp_assign_source_121;
    PyObject *tmp_assign_source_122;
    PyObject *tmp_assign_source_123;
    PyObject *tmp_assign_source_124;
    PyObject *tmp_assign_source_125;
    PyObject *tmp_assign_source_126;
    PyObject *tmp_assign_source_127;
    PyObject *tmp_assign_source_128;
    PyObject *tmp_assign_source_129;
    PyObject *tmp_assign_source_130;
    PyObject *tmp_assign_source_131;
    PyObject *tmp_assign_source_132;
    PyObject *tmp_assign_source_133;
    PyObject *tmp_assign_source_134;
    PyObject *tmp_assign_source_135;
    PyObject *tmp_assign_source_136;
    PyObject *tmp_assign_source_137;
    PyObject *tmp_assign_source_138;
    PyObject *tmp_assign_source_139;
    PyObject *tmp_assign_source_140;
    PyObject *tmp_assign_source_141;
    PyObject *tmp_assign_source_142;
    PyObject *tmp_assign_source_143;
    PyObject *tmp_assign_source_144;
    PyObject *tmp_assign_source_145;
    PyObject *tmp_assign_source_146;
    PyObject *tmp_assign_source_147;
    PyObject *tmp_assign_source_148;
    PyObject *tmp_assign_source_149;
    PyObject *tmp_assign_source_150;
    PyObject *tmp_assign_source_151;
    PyObject *tmp_assign_source_152;
    PyObject *tmp_assign_source_153;
    PyObject *tmp_assign_source_154;
    PyObject *tmp_assign_source_155;
    PyObject *tmp_assign_source_156;
    PyObject *tmp_assign_source_157;
    PyObject *tmp_assign_source_158;
    PyObject *tmp_assign_source_159;
    PyObject *tmp_assign_source_160;
    PyObject *tmp_assign_source_161;
    PyObject *tmp_assign_source_162;
    PyObject *tmp_assign_source_163;
    PyObject *tmp_assign_source_164;
    PyObject *tmp_assign_source_165;
    PyObject *tmp_assign_source_166;
    PyObject *tmp_assign_source_167;
    PyObject *tmp_assign_source_168;
    PyObject *tmp_assign_source_169;
    PyObject *tmp_assign_source_170;
    PyObject *tmp_assign_source_171;
    PyObject *tmp_assign_source_172;
    PyObject *tmp_assign_source_173;
    PyObject *tmp_assign_source_174;
    PyObject *tmp_assign_source_175;
    PyObject *tmp_assign_source_176;
    PyObject *tmp_assign_source_177;
    PyObject *tmp_assign_source_178;
    PyObject *tmp_assign_source_179;
    PyObject *tmp_assign_source_180;
    PyObject *tmp_assign_source_181;
    PyObject *tmp_assign_source_182;
    PyObject *tmp_assign_source_183;
    PyObject *tmp_assign_source_184;
    PyObject *tmp_assign_source_185;
    PyObject *tmp_assign_source_186;
    PyObject *tmp_assign_source_187;
    PyObject *tmp_assign_source_188;
    PyObject *tmp_assign_source_189;
    PyObject *tmp_assign_source_190;
    PyObject *tmp_assign_source_191;
    PyObject *tmp_assign_source_192;
    PyObject *tmp_assign_source_193;
    PyObject *tmp_assign_source_194;
    PyObject *tmp_assign_source_195;
    PyObject *tmp_assign_source_196;
    PyObject *tmp_assign_source_197;
    PyObject *tmp_assign_source_198;
    PyObject *tmp_assign_source_199;
    PyObject *tmp_assign_source_200;
    PyObject *tmp_assign_source_201;
    PyObject *tmp_assign_source_202;
    PyObject *tmp_assign_source_203;
    PyObject *tmp_assign_source_204;
    PyObject *tmp_assign_source_205;
    PyObject *tmp_assign_source_206;
    PyObject *tmp_assign_source_207;
    PyObject *tmp_assign_source_208;
    PyObject *tmp_assign_source_209;
    PyObject *tmp_assign_source_210;
    PyObject *tmp_assign_source_211;
    PyObject *tmp_assign_source_212;
    PyObject *tmp_assign_source_213;
    PyObject *tmp_assign_source_214;
    PyObject *tmp_assign_source_215;
    PyObject *tmp_assign_source_216;
    PyObject *tmp_assign_source_217;
    PyObject *tmp_assign_source_218;
    PyObject *tmp_assign_source_219;
    PyObject *tmp_assign_source_220;
    PyObject *tmp_assign_source_221;
    PyObject *tmp_assign_source_222;
    PyObject *tmp_assign_source_223;
    PyObject *tmp_assign_source_224;
    PyObject *tmp_assign_source_225;
    PyObject *tmp_assign_source_226;
    PyObject *tmp_assign_source_227;
    PyObject *tmp_assign_source_228;
    PyObject *tmp_assign_source_229;
    PyObject *tmp_assign_source_230;
    PyObject *tmp_assign_source_231;
    PyObject *tmp_assign_source_232;
    PyObject *tmp_assign_source_233;
    PyObject *tmp_assign_source_234;
    PyObject *tmp_assign_source_235;
    PyObject *tmp_assign_source_236;
    PyObject *tmp_assign_source_237;
    PyObject *tmp_assign_source_238;
    PyObject *tmp_assign_source_239;
    PyObject *tmp_assign_source_240;
    PyObject *tmp_assign_source_241;
    PyObject *tmp_assign_source_242;
    PyObject *tmp_assign_source_243;
    PyObject *tmp_assign_source_244;
    PyObject *tmp_assign_source_245;
    PyObject *tmp_assign_source_246;
    PyObject *tmp_assign_source_247;
    PyObject *tmp_assign_source_248;
    PyObject *tmp_assign_source_249;
    PyObject *tmp_assign_source_250;
    PyObject *tmp_assign_source_251;
    PyObject *tmp_assign_source_252;
    PyObject *tmp_assign_source_253;
    PyObject *tmp_assign_source_254;
    PyObject *tmp_assign_source_255;
    PyObject *tmp_assign_source_256;
    PyObject *tmp_assign_source_257;
    PyObject *tmp_assign_source_258;
    PyObject *tmp_assign_source_259;
    PyObject *tmp_assign_source_260;
    PyObject *tmp_assign_source_261;
    PyObject *tmp_assign_source_262;
    PyObject *tmp_assign_source_263;
    PyObject *tmp_assign_source_264;
    PyObject *tmp_assign_source_265;
    PyObject *tmp_assign_source_266;
    PyObject *tmp_assign_source_267;
    PyObject *tmp_assign_source_268;
    PyObject *tmp_assign_source_269;
    PyObject *tmp_assign_source_270;
    PyObject *tmp_assign_source_271;
    PyObject *tmp_assign_source_272;
    PyObject *tmp_assign_source_273;
    PyObject *tmp_assign_source_274;
    PyObject *tmp_assign_source_275;
    PyObject *tmp_assign_source_276;
    PyObject *tmp_assign_source_277;
    PyObject *tmp_assign_source_278;
    PyObject *tmp_assign_source_279;
    PyObject *tmp_assign_source_280;
    PyObject *tmp_assign_source_281;
    PyObject *tmp_assign_source_282;
    PyObject *tmp_assign_source_283;
    PyObject *tmp_assign_source_284;
    PyObject *tmp_assign_source_285;
    PyObject *tmp_assign_source_286;
    PyObject *tmp_assign_source_287;
    PyObject *tmp_assign_source_288;
    PyObject *tmp_assign_source_289;
    PyObject *tmp_assign_source_290;
    PyObject *tmp_assign_source_291;
    PyObject *tmp_assign_source_292;
    PyObject *tmp_assign_source_293;
    PyObject *tmp_assign_source_294;
    PyObject *tmp_assign_source_295;
    PyObject *tmp_assign_source_296;
    PyObject *tmp_assign_source_297;
    PyObject *tmp_assign_source_298;
    PyObject *tmp_assign_source_299;
    PyObject *tmp_assign_source_300;
    PyObject *tmp_assign_source_301;
    PyObject *tmp_assign_source_302;
    PyObject *tmp_assign_source_303;
    PyObject *tmp_assign_source_304;
    PyObject *tmp_assign_source_305;
    PyObject *tmp_assign_source_306;
    PyObject *tmp_assign_source_307;
    PyObject *tmp_assign_source_308;
    PyObject *tmp_assign_source_309;
    PyObject *tmp_assign_source_310;
    PyObject *tmp_assign_source_311;
    PyObject *tmp_assign_source_312;
    PyObject *tmp_assign_source_313;
    PyObject *tmp_assign_source_314;
    PyObject *tmp_assign_source_315;
    PyObject *tmp_assign_source_316;
    PyObject *tmp_assign_source_317;
    PyObject *tmp_assign_source_318;
    PyObject *tmp_assign_source_319;
    PyObject *tmp_assign_source_320;
    PyObject *tmp_assign_source_321;
    PyObject *tmp_assign_source_322;
    PyObject *tmp_assign_source_323;
    PyObject *tmp_assign_source_324;
    PyObject *tmp_assign_source_325;
    PyObject *tmp_assign_source_326;
    PyObject *tmp_assign_source_327;
    PyObject *tmp_assign_source_328;
    PyObject *tmp_assign_source_329;
    PyObject *tmp_assign_source_330;
    PyObject *tmp_assign_source_331;
    PyObject *tmp_assign_source_332;
    PyObject *tmp_assign_source_333;
    PyObject *tmp_assign_source_334;
    PyObject *tmp_assign_source_335;
    PyObject *tmp_assign_source_336;
    PyObject *tmp_assign_source_337;
    PyObject *tmp_assign_source_338;
    PyObject *tmp_assign_source_339;
    PyObject *tmp_assign_source_340;
    PyObject *tmp_assign_source_341;
    PyObject *tmp_assign_source_342;
    PyObject *tmp_assign_source_343;
    PyObject *tmp_assign_source_344;
    PyObject *tmp_assign_source_345;
    PyObject *tmp_assign_source_346;
    PyObject *tmp_assign_source_347;
    PyObject *tmp_assign_source_348;
    PyObject *tmp_assign_source_349;
    PyObject *tmp_assign_source_350;
    PyObject *tmp_assign_source_351;
    PyObject *tmp_assign_source_352;
    PyObject *tmp_assign_source_353;
    PyObject *tmp_assign_source_354;
    PyObject *tmp_assign_source_355;
    PyObject *tmp_assign_source_356;
    PyObject *tmp_assign_source_357;
    PyObject *tmp_assign_source_358;
    PyObject *tmp_assign_source_359;
    PyObject *tmp_assign_source_360;
    PyObject *tmp_assign_source_361;
    PyObject *tmp_assign_source_362;
    PyObject *tmp_assign_source_363;
    PyObject *tmp_assign_source_364;
    PyObject *tmp_assign_source_365;
    PyObject *tmp_assign_source_366;
    PyObject *tmp_assign_source_367;
    PyObject *tmp_assign_source_368;
    PyObject *tmp_assign_source_369;
    PyObject *tmp_assign_source_370;
    PyObject *tmp_assign_source_371;
    PyObject *tmp_assign_source_372;
    PyObject *tmp_assign_source_373;
    PyObject *tmp_assign_source_374;
    PyObject *tmp_assign_source_375;
    PyObject *tmp_assign_source_376;
    PyObject *tmp_assign_source_377;
    PyObject *tmp_assign_source_378;
    PyObject *tmp_assign_source_379;
    PyObject *tmp_assign_source_380;
    PyObject *tmp_assign_source_381;
    PyObject *tmp_assign_source_382;
    PyObject *tmp_assign_source_383;
    PyObject *tmp_assign_source_384;
    PyObject *tmp_assign_source_385;
    PyObject *tmp_assign_source_386;
    PyObject *tmp_assign_source_387;
    PyObject *tmp_assign_source_388;
    PyObject *tmp_assign_source_389;
    PyObject *tmp_assign_source_390;
    PyObject *tmp_assign_source_391;
    PyObject *tmp_assign_source_392;
    PyObject *tmp_assign_source_393;
    PyObject *tmp_assign_source_394;
    PyObject *tmp_assign_source_395;
    PyObject *tmp_assign_source_396;
    PyObject *tmp_assign_source_397;
    PyObject *tmp_assign_source_398;
    PyObject *tmp_assign_source_399;
    PyObject *tmp_assign_source_400;
    PyObject *tmp_assign_source_401;
    PyObject *tmp_assign_source_402;
    PyObject *tmp_assign_source_403;
    PyObject *tmp_assign_source_404;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_left_3;
    PyObject *tmp_binop_left_4;
    PyObject *tmp_binop_left_5;
    PyObject *tmp_binop_left_6;
    PyObject *tmp_binop_left_7;
    PyObject *tmp_binop_left_8;
    PyObject *tmp_binop_left_9;
    PyObject *tmp_binop_left_10;
    PyObject *tmp_binop_left_11;
    PyObject *tmp_binop_left_12;
    PyObject *tmp_binop_left_13;
    PyObject *tmp_binop_left_14;
    PyObject *tmp_binop_left_15;
    PyObject *tmp_binop_left_16;
    PyObject *tmp_binop_left_17;
    PyObject *tmp_binop_left_18;
    PyObject *tmp_binop_left_19;
    PyObject *tmp_binop_left_20;
    PyObject *tmp_binop_left_21;
    PyObject *tmp_binop_left_22;
    PyObject *tmp_binop_left_23;
    PyObject *tmp_binop_left_24;
    PyObject *tmp_binop_left_25;
    PyObject *tmp_binop_left_26;
    PyObject *tmp_binop_left_27;
    PyObject *tmp_binop_left_28;
    PyObject *tmp_binop_left_29;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_binop_right_3;
    PyObject *tmp_binop_right_4;
    PyObject *tmp_binop_right_5;
    PyObject *tmp_binop_right_6;
    PyObject *tmp_binop_right_7;
    PyObject *tmp_binop_right_8;
    PyObject *tmp_binop_right_9;
    PyObject *tmp_binop_right_10;
    PyObject *tmp_binop_right_11;
    PyObject *tmp_binop_right_12;
    PyObject *tmp_binop_right_13;
    PyObject *tmp_binop_right_14;
    PyObject *tmp_binop_right_15;
    PyObject *tmp_binop_right_16;
    PyObject *tmp_binop_right_17;
    PyObject *tmp_binop_right_18;
    PyObject *tmp_binop_right_19;
    PyObject *tmp_binop_right_20;
    PyObject *tmp_binop_right_21;
    PyObject *tmp_binop_right_22;
    PyObject *tmp_binop_right_23;
    PyObject *tmp_binop_right_24;
    PyObject *tmp_binop_right_25;
    PyObject *tmp_binop_right_26;
    PyObject *tmp_binop_right_27;
    PyObject *tmp_binop_right_28;
    PyObject *tmp_binop_right_29;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_call_arg_element_14;
    PyObject *tmp_call_arg_element_15;
    PyObject *tmp_call_arg_element_16;
    PyObject *tmp_call_arg_element_17;
    PyObject *tmp_call_arg_element_18;
    PyObject *tmp_call_arg_element_19;
    PyObject *tmp_call_arg_element_20;
    PyObject *tmp_call_arg_element_21;
    PyObject *tmp_call_arg_element_22;
    PyObject *tmp_call_arg_element_23;
    PyObject *tmp_call_arg_element_24;
    PyObject *tmp_call_arg_element_25;
    PyObject *tmp_call_arg_element_26;
    PyObject *tmp_call_arg_element_27;
    PyObject *tmp_call_arg_element_28;
    PyObject *tmp_call_arg_element_29;
    PyObject *tmp_call_arg_element_30;
    PyObject *tmp_call_arg_element_31;
    PyObject *tmp_call_arg_element_32;
    PyObject *tmp_call_arg_element_33;
    PyObject *tmp_call_arg_element_34;
    PyObject *tmp_call_arg_element_35;
    PyObject *tmp_call_arg_element_36;
    PyObject *tmp_call_arg_element_37;
    PyObject *tmp_call_arg_element_38;
    PyObject *tmp_call_arg_element_39;
    PyObject *tmp_call_arg_element_40;
    PyObject *tmp_call_arg_element_41;
    PyObject *tmp_call_arg_element_42;
    PyObject *tmp_call_arg_element_43;
    PyObject *tmp_call_arg_element_44;
    PyObject *tmp_call_arg_element_45;
    PyObject *tmp_call_arg_element_46;
    PyObject *tmp_call_arg_element_47;
    PyObject *tmp_call_arg_element_48;
    PyObject *tmp_call_arg_element_49;
    PyObject *tmp_call_arg_element_50;
    PyObject *tmp_call_arg_element_51;
    PyObject *tmp_call_arg_element_52;
    PyObject *tmp_call_arg_element_53;
    PyObject *tmp_call_arg_element_54;
    PyObject *tmp_call_arg_element_55;
    PyObject *tmp_call_arg_element_56;
    PyObject *tmp_call_arg_element_57;
    PyObject *tmp_call_arg_element_58;
    PyObject *tmp_call_arg_element_59;
    PyObject *tmp_call_arg_element_60;
    PyObject *tmp_call_arg_element_61;
    PyObject *tmp_call_arg_element_62;
    PyObject *tmp_call_arg_element_63;
    PyObject *tmp_call_arg_element_64;
    PyObject *tmp_call_arg_element_65;
    PyObject *tmp_call_arg_element_66;
    PyObject *tmp_call_arg_element_67;
    PyObject *tmp_call_arg_element_68;
    PyObject *tmp_call_arg_element_69;
    PyObject *tmp_call_arg_element_70;
    PyObject *tmp_call_arg_element_71;
    PyObject *tmp_call_arg_element_72;
    PyObject *tmp_call_arg_element_73;
    PyObject *tmp_call_arg_element_74;
    PyObject *tmp_call_arg_element_75;
    PyObject *tmp_call_arg_element_76;
    PyObject *tmp_call_arg_element_77;
    PyObject *tmp_call_arg_element_78;
    PyObject *tmp_call_arg_element_79;
    PyObject *tmp_call_arg_element_80;
    PyObject *tmp_call_arg_element_81;
    PyObject *tmp_call_arg_element_82;
    PyObject *tmp_call_arg_element_83;
    PyObject *tmp_call_arg_element_84;
    PyObject *tmp_call_arg_element_85;
    PyObject *tmp_call_arg_element_86;
    PyObject *tmp_call_arg_element_87;
    PyObject *tmp_call_arg_element_88;
    PyObject *tmp_call_arg_element_89;
    PyObject *tmp_call_arg_element_90;
    PyObject *tmp_call_arg_element_91;
    PyObject *tmp_call_arg_element_92;
    PyObject *tmp_call_arg_element_93;
    PyObject *tmp_call_arg_element_94;
    PyObject *tmp_call_arg_element_95;
    PyObject *tmp_call_arg_element_96;
    PyObject *tmp_call_arg_element_97;
    PyObject *tmp_call_arg_element_98;
    PyObject *tmp_call_arg_element_99;
    PyObject *tmp_call_arg_element_100;
    PyObject *tmp_call_arg_element_101;
    PyObject *tmp_call_arg_element_102;
    PyObject *tmp_call_arg_element_103;
    PyObject *tmp_call_arg_element_104;
    PyObject *tmp_call_arg_element_105;
    PyObject *tmp_call_arg_element_106;
    PyObject *tmp_call_arg_element_107;
    PyObject *tmp_call_arg_element_108;
    PyObject *tmp_call_arg_element_109;
    PyObject *tmp_call_arg_element_110;
    PyObject *tmp_call_arg_element_111;
    PyObject *tmp_call_arg_element_112;
    PyObject *tmp_call_arg_element_113;
    PyObject *tmp_call_arg_element_114;
    PyObject *tmp_call_arg_element_115;
    PyObject *tmp_call_arg_element_116;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_kw_2;
    PyObject *tmp_call_kw_3;
    PyObject *tmp_call_kw_4;
    PyObject *tmp_call_kw_5;
    PyObject *tmp_call_kw_6;
    PyObject *tmp_call_kw_7;
    PyObject *tmp_call_kw_8;
    PyObject *tmp_call_kw_9;
    PyObject *tmp_call_kw_10;
    PyObject *tmp_call_kw_11;
    PyObject *tmp_call_kw_12;
    PyObject *tmp_call_kw_13;
    PyObject *tmp_call_kw_14;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_call_pos_2;
    PyObject *tmp_call_pos_3;
    PyObject *tmp_call_pos_4;
    PyObject *tmp_call_pos_5;
    PyObject *tmp_call_pos_6;
    PyObject *tmp_call_pos_7;
    PyObject *tmp_call_pos_8;
    PyObject *tmp_call_pos_9;
    PyObject *tmp_call_pos_10;
    PyObject *tmp_call_pos_11;
    PyObject *tmp_call_pos_12;
    PyObject *tmp_call_pos_13;
    PyObject *tmp_call_pos_14;
    PyObject *tmp_call_pos_15;
    PyObject *tmp_call_pos_16;
    PyObject *tmp_call_pos_17;
    PyObject *tmp_call_pos_18;
    PyObject *tmp_call_pos_19;
    PyObject *tmp_call_pos_20;
    PyObject *tmp_call_pos_21;
    PyObject *tmp_call_pos_22;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    PyObject *tmp_called_11;
    PyObject *tmp_called_12;
    PyObject *tmp_called_13;
    PyObject *tmp_called_14;
    PyObject *tmp_called_15;
    PyObject *tmp_called_16;
    PyObject *tmp_called_17;
    PyObject *tmp_called_18;
    PyObject *tmp_called_19;
    PyObject *tmp_called_20;
    PyObject *tmp_called_21;
    PyObject *tmp_called_22;
    PyObject *tmp_called_23;
    PyObject *tmp_called_24;
    PyObject *tmp_called_25;
    PyObject *tmp_called_26;
    PyObject *tmp_called_27;
    PyObject *tmp_called_28;
    PyObject *tmp_called_29;
    PyObject *tmp_called_30;
    PyObject *tmp_called_31;
    PyObject *tmp_called_32;
    PyObject *tmp_called_33;
    PyObject *tmp_called_34;
    PyObject *tmp_called_35;
    PyObject *tmp_called_36;
    PyObject *tmp_called_37;
    PyObject *tmp_called_38;
    PyObject *tmp_called_39;
    PyObject *tmp_called_40;
    PyObject *tmp_called_41;
    PyObject *tmp_called_42;
    PyObject *tmp_called_43;
    PyObject *tmp_called_44;
    PyObject *tmp_called_45;
    PyObject *tmp_called_46;
    PyObject *tmp_called_47;
    PyObject *tmp_called_48;
    PyObject *tmp_called_49;
    PyObject *tmp_called_50;
    PyObject *tmp_called_51;
    PyObject *tmp_called_52;
    PyObject *tmp_called_53;
    PyObject *tmp_called_54;
    PyObject *tmp_called_55;
    PyObject *tmp_called_56;
    PyObject *tmp_called_57;
    PyObject *tmp_called_58;
    PyObject *tmp_called_59;
    PyObject *tmp_called_60;
    PyObject *tmp_called_61;
    PyObject *tmp_called_62;
    PyObject *tmp_called_63;
    PyObject *tmp_called_64;
    PyObject *tmp_called_65;
    PyObject *tmp_called_66;
    PyObject *tmp_called_67;
    PyObject *tmp_called_68;
    PyObject *tmp_called_69;
    PyObject *tmp_called_70;
    PyObject *tmp_called_71;
    PyObject *tmp_called_72;
    PyObject *tmp_called_73;
    PyObject *tmp_called_74;
    PyObject *tmp_called_75;
    PyObject *tmp_called_76;
    PyObject *tmp_called_77;
    PyObject *tmp_called_78;
    PyObject *tmp_called_79;
    PyObject *tmp_called_80;
    PyObject *tmp_called_81;
    PyObject *tmp_called_82;
    PyObject *tmp_called_83;
    PyObject *tmp_called_84;
    PyObject *tmp_called_85;
    PyObject *tmp_called_86;
    PyObject *tmp_called_87;
    PyObject *tmp_called_88;
    PyObject *tmp_called_89;
    PyObject *tmp_called_90;
    PyObject *tmp_called_91;
    PyObject *tmp_called_92;
    PyObject *tmp_called_93;
    PyObject *tmp_called_94;
    PyObject *tmp_called_95;
    PyObject *tmp_called_96;
    PyObject *tmp_called_97;
    PyObject *tmp_called_98;
    PyObject *tmp_called_99;
    PyObject *tmp_called_100;
    PyObject *tmp_called_101;
    PyObject *tmp_called_102;
    PyObject *tmp_called_103;
    PyObject *tmp_called_104;
    PyObject *tmp_called_105;
    PyObject *tmp_called_106;
    PyObject *tmp_called_107;
    PyObject *tmp_called_108;
    PyObject *tmp_called_109;
    PyObject *tmp_called_110;
    PyObject *tmp_called_111;
    PyObject *tmp_called_112;
    PyObject *tmp_called_113;
    PyObject *tmp_called_114;
    PyObject *tmp_called_115;
    PyObject *tmp_called_116;
    PyObject *tmp_called_117;
    PyObject *tmp_called_118;
    PyObject *tmp_called_119;
    PyObject *tmp_called_120;
    PyObject *tmp_called_121;
    PyObject *tmp_called_122;
    PyObject *tmp_called_123;
    PyObject *tmp_called_124;
    PyObject *tmp_called_125;
    PyObject *tmp_called_126;
    PyObject *tmp_called_127;
    PyObject *tmp_called_128;
    PyObject *tmp_called_129;
    PyObject *tmp_called_130;
    PyObject *tmp_called_131;
    PyObject *tmp_called_132;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Eq_3;
    int tmp_cmp_Eq_4;
    int tmp_cmp_Gt_1;
    int tmp_cmp_Gt_2;
    int tmp_cmp_Gt_3;
    int tmp_cmp_Gt_4;
    int tmp_cmp_Gt_5;
    int tmp_cmp_Gt_6;
    int tmp_cmp_Gt_7;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_Lt_1;
    int tmp_cmp_LtE_1;
    int tmp_cmp_NotEq_1;
    int tmp_cmp_NotEq_2;
    int tmp_cmp_NotEq_3;
    int tmp_cmp_NotIn_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_left_14;
    PyObject *tmp_compare_left_15;
    PyObject *tmp_compare_left_16;
    PyObject *tmp_compare_left_17;
    PyObject *tmp_compare_left_18;
    PyObject *tmp_compare_left_19;
    PyObject *tmp_compare_left_20;
    PyObject *tmp_compare_left_21;
    PyObject *tmp_compare_left_22;
    PyObject *tmp_compare_left_23;
    PyObject *tmp_compare_left_24;
    PyObject *tmp_compare_left_25;
    PyObject *tmp_compare_left_26;
    PyObject *tmp_compare_left_27;
    PyObject *tmp_compare_left_28;
    PyObject *tmp_compare_left_29;
    PyObject *tmp_compare_left_30;
    PyObject *tmp_compare_left_31;
    PyObject *tmp_compare_left_32;
    PyObject *tmp_compare_left_33;
    PyObject *tmp_compare_left_34;
    PyObject *tmp_compare_left_35;
    PyObject *tmp_compare_left_36;
    PyObject *tmp_compare_left_37;
    PyObject *tmp_compare_left_38;
    PyObject *tmp_compare_left_39;
    PyObject *tmp_compare_left_40;
    PyObject *tmp_compare_left_41;
    PyObject *tmp_compare_left_42;
    PyObject *tmp_compare_left_43;
    PyObject *tmp_compare_left_44;
    PyObject *tmp_compare_left_45;
    PyObject *tmp_compare_left_46;
    PyObject *tmp_compare_left_47;
    PyObject *tmp_compare_left_48;
    PyObject *tmp_compare_left_49;
    PyObject *tmp_compare_left_50;
    PyObject *tmp_compare_left_51;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_compare_right_14;
    PyObject *tmp_compare_right_15;
    PyObject *tmp_compare_right_16;
    PyObject *tmp_compare_right_17;
    PyObject *tmp_compare_right_18;
    PyObject *tmp_compare_right_19;
    PyObject *tmp_compare_right_20;
    PyObject *tmp_compare_right_21;
    PyObject *tmp_compare_right_22;
    PyObject *tmp_compare_right_23;
    PyObject *tmp_compare_right_24;
    PyObject *tmp_compare_right_25;
    PyObject *tmp_compare_right_26;
    PyObject *tmp_compare_right_27;
    PyObject *tmp_compare_right_28;
    PyObject *tmp_compare_right_29;
    PyObject *tmp_compare_right_30;
    PyObject *tmp_compare_right_31;
    PyObject *tmp_compare_right_32;
    PyObject *tmp_compare_right_33;
    PyObject *tmp_compare_right_34;
    PyObject *tmp_compare_right_35;
    PyObject *tmp_compare_right_36;
    PyObject *tmp_compare_right_37;
    PyObject *tmp_compare_right_38;
    PyObject *tmp_compare_right_39;
    PyObject *tmp_compare_right_40;
    PyObject *tmp_compare_right_41;
    PyObject *tmp_compare_right_42;
    PyObject *tmp_compare_right_43;
    PyObject *tmp_compare_right_44;
    PyObject *tmp_compare_right_45;
    PyObject *tmp_compare_right_46;
    PyObject *tmp_compare_right_47;
    PyObject *tmp_compare_right_48;
    PyObject *tmp_compare_right_49;
    PyObject *tmp_compare_right_50;
    PyObject *tmp_compare_right_51;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_left_6;
    PyObject *tmp_compexpr_left_7;
    PyObject *tmp_compexpr_left_8;
    PyObject *tmp_compexpr_left_9;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    PyObject *tmp_compexpr_right_6;
    PyObject *tmp_compexpr_right_7;
    PyObject *tmp_compexpr_right_8;
    PyObject *tmp_compexpr_right_9;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    int tmp_cond_truth_13;
    int tmp_cond_truth_14;
    int tmp_cond_truth_15;
    int tmp_cond_truth_16;
    int tmp_cond_truth_17;
    int tmp_cond_truth_18;
    int tmp_cond_truth_19;
    int tmp_cond_truth_20;
    int tmp_cond_truth_21;
    int tmp_cond_truth_22;
    int tmp_cond_truth_23;
    int tmp_cond_truth_24;
    int tmp_cond_truth_25;
    int tmp_cond_truth_26;
    int tmp_cond_truth_27;
    int tmp_cond_truth_28;
    int tmp_cond_truth_29;
    int tmp_cond_truth_30;
    int tmp_cond_truth_31;
    int tmp_cond_truth_32;
    int tmp_cond_truth_33;
    int tmp_cond_truth_34;
    int tmp_cond_truth_35;
    int tmp_cond_truth_36;
    int tmp_cond_truth_37;
    int tmp_cond_truth_38;
    int tmp_cond_truth_39;
    int tmp_cond_truth_40;
    int tmp_cond_truth_41;
    int tmp_cond_truth_42;
    int tmp_cond_truth_43;
    int tmp_cond_truth_44;
    int tmp_cond_truth_45;
    int tmp_cond_truth_46;
    int tmp_cond_truth_47;
    int tmp_cond_truth_48;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_cond_value_13;
    PyObject *tmp_cond_value_14;
    PyObject *tmp_cond_value_15;
    PyObject *tmp_cond_value_16;
    PyObject *tmp_cond_value_17;
    PyObject *tmp_cond_value_18;
    PyObject *tmp_cond_value_19;
    PyObject *tmp_cond_value_20;
    PyObject *tmp_cond_value_21;
    PyObject *tmp_cond_value_22;
    PyObject *tmp_cond_value_23;
    PyObject *tmp_cond_value_24;
    PyObject *tmp_cond_value_25;
    PyObject *tmp_cond_value_26;
    PyObject *tmp_cond_value_27;
    PyObject *tmp_cond_value_28;
    PyObject *tmp_cond_value_29;
    PyObject *tmp_cond_value_30;
    PyObject *tmp_cond_value_31;
    PyObject *tmp_cond_value_32;
    PyObject *tmp_cond_value_33;
    PyObject *tmp_cond_value_34;
    PyObject *tmp_cond_value_35;
    PyObject *tmp_cond_value_36;
    PyObject *tmp_cond_value_37;
    PyObject *tmp_cond_value_38;
    PyObject *tmp_cond_value_39;
    PyObject *tmp_cond_value_40;
    PyObject *tmp_cond_value_41;
    PyObject *tmp_cond_value_42;
    PyObject *tmp_cond_value_43;
    PyObject *tmp_cond_value_44;
    PyObject *tmp_cond_value_45;
    PyObject *tmp_cond_value_46;
    PyObject *tmp_cond_value_47;
    PyObject *tmp_cond_value_48;
    PyObject *tmp_delsubscr_subscript_1;
    PyObject *tmp_delsubscr_target_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_key_10;
    PyObject *tmp_dict_key_11;
    PyObject *tmp_dict_key_12;
    PyObject *tmp_dict_key_13;
    PyObject *tmp_dict_key_14;
    PyObject *tmp_dict_key_15;
    PyObject *tmp_dict_key_16;
    PyObject *tmp_dict_key_17;
    PyObject *tmp_dict_key_18;
    PyObject *tmp_dict_key_19;
    PyObject *tmp_dict_key_20;
    PyObject *tmp_dict_key_21;
    PyObject *tmp_dict_key_22;
    PyObject *tmp_dict_key_23;
    PyObject *tmp_dict_key_24;
    PyObject *tmp_dict_key_25;
    PyObject *tmp_dict_key_26;
    PyObject *tmp_dict_key_27;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_dict_value_10;
    PyObject *tmp_dict_value_11;
    PyObject *tmp_dict_value_12;
    PyObject *tmp_dict_value_13;
    PyObject *tmp_dict_value_14;
    PyObject *tmp_dict_value_15;
    PyObject *tmp_dict_value_16;
    PyObject *tmp_dict_value_17;
    PyObject *tmp_dict_value_18;
    PyObject *tmp_dict_value_19;
    PyObject *tmp_dict_value_20;
    PyObject *tmp_dict_value_21;
    PyObject *tmp_dict_value_22;
    PyObject *tmp_dict_value_23;
    PyObject *tmp_dict_value_24;
    PyObject *tmp_dict_value_25;
    PyObject *tmp_dict_value_26;
    PyObject *tmp_dict_value_27;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg1_2;
    PyObject *tmp_dircall_arg1_3;
    PyObject *tmp_dircall_arg1_4;
    PyObject *tmp_dircall_arg1_5;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg2_2;
    int tmp_exc_match_exception_match_1;
    int tmp_exc_match_exception_match_2;
    int tmp_exc_match_exception_match_3;
    int tmp_exc_match_exception_match_4;
    int tmp_exc_match_exception_match_5;
    int tmp_exc_match_exception_match_6;
    int tmp_exc_match_exception_match_7;
    int tmp_exc_match_exception_match_8;
    int tmp_exc_match_exception_match_9;
    int tmp_exc_match_exception_match_10;
    int tmp_exc_match_exception_match_11;
    int tmp_exc_match_exception_match_12;
    int tmp_exc_match_exception_match_13;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_locals_2;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    bool tmp_is_1;
    bool tmp_is_2;
    bool tmp_is_3;
    bool tmp_is_4;
    bool tmp_is_5;
    bool tmp_is_6;
    bool tmp_is_7;
    bool tmp_is_8;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_cls_3;
    PyObject *tmp_isinstance_cls_4;
    PyObject *tmp_isinstance_cls_5;
    PyObject *tmp_isinstance_cls_6;
    PyObject *tmp_isinstance_cls_7;
    PyObject *tmp_isinstance_cls_8;
    PyObject *tmp_isinstance_cls_9;
    PyObject *tmp_isinstance_cls_10;
    PyObject *tmp_isinstance_cls_11;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_isinstance_inst_3;
    PyObject *tmp_isinstance_inst_4;
    PyObject *tmp_isinstance_inst_5;
    PyObject *tmp_isinstance_inst_6;
    PyObject *tmp_isinstance_inst_7;
    PyObject *tmp_isinstance_inst_8;
    PyObject *tmp_isinstance_inst_9;
    PyObject *tmp_isinstance_inst_10;
    PyObject *tmp_isinstance_inst_11;
    bool tmp_isnot_1;
    bool tmp_isnot_2;
    bool tmp_isnot_3;
    bool tmp_isnot_4;
    bool tmp_isnot_5;
    bool tmp_isnot_6;
    bool tmp_isnot_7;
    bool tmp_isnot_8;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iter_arg_7;
    PyObject *tmp_iter_arg_8;
    PyObject *tmp_iter_arg_9;
    PyObject *tmp_iter_arg_10;
    PyObject *tmp_iter_arg_11;
    PyObject *tmp_iter_arg_12;
    PyObject *tmp_iter_arg_13;
    PyObject *tmp_iter_arg_14;
    PyObject *tmp_iter_arg_15;
    PyObject *tmp_iter_arg_16;
    PyObject *tmp_iter_arg_17;
    PyObject *tmp_iter_arg_18;
    PyObject *tmp_iter_arg_19;
    PyObject *tmp_iter_arg_20;
    PyObject *tmp_iter_arg_21;
    PyObject *tmp_iter_arg_22;
    PyObject *tmp_iter_arg_23;
    PyObject *tmp_iter_arg_24;
    PyObject *tmp_iter_arg_25;
    PyObject *tmp_iter_arg_26;
    PyObject *tmp_iter_arg_27;
    PyObject *tmp_iter_arg_28;
    PyObject *tmp_iter_arg_29;
    PyObject *tmp_iter_arg_30;
    PyObject *tmp_iter_arg_31;
    PyObject *tmp_iter_arg_32;
    PyObject *tmp_iter_arg_33;
    PyObject *tmp_iter_arg_34;
    PyObject *tmp_iter_arg_35;
    PyObject *tmp_iter_arg_36;
    PyObject *tmp_iter_arg_37;
    PyObject *tmp_iter_arg_38;
    PyObject *tmp_iter_arg_39;
    PyObject *tmp_iter_arg_40;
    PyObject *tmp_iter_arg_41;
    PyObject *tmp_iter_arg_42;
    PyObject *tmp_iter_arg_43;
    PyObject *tmp_iter_arg_44;
    PyObject *tmp_iter_arg_45;
    PyObject *tmp_iter_arg_46;
    PyObject *tmp_iter_arg_47;
    PyObject *tmp_iter_arg_48;
    PyObject *tmp_iter_arg_49;
    PyObject *tmp_iter_arg_50;
    PyObject *tmp_iter_arg_51;
    PyObject *tmp_iter_arg_52;
    PyObject *tmp_iter_arg_53;
    PyObject *tmp_iter_arg_54;
    PyObject *tmp_iter_arg_55;
    PyObject *tmp_iter_arg_56;
    PyObject *tmp_iter_arg_57;
    PyObject *tmp_iter_arg_58;
    PyObject *tmp_iter_arg_59;
    PyObject *tmp_iter_arg_60;
    PyObject *tmp_iter_arg_61;
    PyObject *tmp_iter_arg_62;
    PyObject *tmp_iter_arg_63;
    PyObject *tmp_iter_arg_64;
    PyObject *tmp_iter_arg_65;
    PyObject *tmp_iter_arg_66;
    PyObject *tmp_iter_arg_67;
    PyObject *tmp_iter_arg_68;
    PyObject *tmp_iter_arg_69;
    PyObject *tmp_iter_arg_70;
    PyObject *tmp_iter_arg_71;
    PyObject *tmp_iter_arg_72;
    PyObject *tmp_iter_arg_73;
    PyObject *tmp_iter_arg_74;
    PyObject *tmp_iter_arg_75;
    PyObject *tmp_iterator_attempt_1;
    PyObject *tmp_iterator_attempt_2;
    PyObject *tmp_iterator_attempt_3;
    PyObject *tmp_iterator_attempt_4;
    PyObject *tmp_iterator_attempt_5;
    PyObject *tmp_iterator_attempt_6;
    PyObject *tmp_iterator_attempt_7;
    PyObject *tmp_iterator_attempt_8;
    PyObject *tmp_iterator_attempt_9;
    PyObject *tmp_iterator_attempt_10;
    PyObject *tmp_iterator_attempt_11;
    PyObject *tmp_iterator_attempt_12;
    PyObject *tmp_iterator_attempt_13;
    PyObject *tmp_iterator_attempt_14;
    PyObject *tmp_iterator_attempt_15;
    PyObject *tmp_iterator_attempt_16;
    PyObject *tmp_iterator_attempt_17;
    PyObject *tmp_iterator_attempt_18;
    PyObject *tmp_iterator_attempt_19;
    PyObject *tmp_iterator_attempt_20;
    PyObject *tmp_iterator_attempt_21;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_iterator_name_2;
    PyObject *tmp_iterator_name_3;
    PyObject *tmp_iterator_name_4;
    PyObject *tmp_iterator_name_5;
    PyObject *tmp_iterator_name_6;
    PyObject *tmp_iterator_name_7;
    PyObject *tmp_iterator_name_8;
    PyObject *tmp_iterator_name_9;
    PyObject *tmp_iterator_name_10;
    PyObject *tmp_iterator_name_11;
    PyObject *tmp_iterator_name_12;
    PyObject *tmp_iterator_name_13;
    PyObject *tmp_iterator_name_14;
    PyObject *tmp_iterator_name_15;
    PyObject *tmp_iterator_name_16;
    PyObject *tmp_iterator_name_17;
    PyObject *tmp_iterator_name_18;
    PyObject *tmp_iterator_name_19;
    PyObject *tmp_iterator_name_20;
    PyObject *tmp_iterator_name_21;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_len_arg_5;
    PyObject *tmp_len_arg_6;
    PyObject *tmp_len_arg_7;
    PyObject *tmp_len_arg_8;
    PyObject *tmp_len_arg_9;
    PyObject *tmp_len_arg_10;
    PyObject *tmp_len_arg_11;
    PyObject *tmp_len_arg_12;
    PyObject *tmp_len_arg_13;
    PyObject *tmp_len_arg_14;
    PyObject *tmp_list_arg_1;
    PyObject *tmp_list_arg_2;
    PyObject *tmp_list_arg_3;
    PyObject *tmp_list_arg_4;
    PyObject *tmp_list_arg_5;
    PyObject *tmp_list_arg_6;
    PyObject *tmp_list_arg_7;
    PyObject *tmp_list_arg_8;
    PyObject *tmp_list_arg_9;
    PyObject *tmp_list_arg_10;
    PyObject *tmp_list_element_1;
    PyObject *tmp_list_element_2;
    PyObject *tmp_list_element_3;
    PyObject *tmp_list_element_4;
    PyObject *tmp_list_element_5;
    PyObject *tmp_list_element_6;
    PyObject *tmp_list_element_7;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_make_exception_arg_3;
    PyObject *tmp_make_exception_arg_4;
    PyObject *tmp_next1_arg_1;
    PyObject *tmp_next1_arg_2;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_next_source_6;
    PyObject *tmp_next_source_7;
    PyObject *tmp_next_source_8;
    PyObject *tmp_next_source_9;
    PyObject *tmp_next_source_10;
    PyObject *tmp_next_source_11;
    PyObject *tmp_next_source_12;
    PyObject *tmp_next_source_13;
    PyObject *tmp_next_source_14;
    PyObject *tmp_next_source_15;
    PyObject *tmp_next_source_16;
    PyObject *tmp_next_source_17;
    PyObject *tmp_next_source_18;
    PyObject *tmp_next_source_19;
    PyObject *tmp_next_source_20;
    PyObject *tmp_next_source_21;
    PyObject *tmp_next_source_22;
    PyObject *tmp_next_source_23;
    PyObject *tmp_next_source_24;
    PyObject *tmp_next_source_25;
    PyObject *tmp_next_source_26;
    PyObject *tmp_next_source_27;
    PyObject *tmp_next_source_28;
    PyObject *tmp_next_source_29;
    PyObject *tmp_next_source_30;
    PyObject *tmp_next_source_31;
    PyObject *tmp_next_source_32;
    PyObject *tmp_next_source_33;
    PyObject *tmp_next_source_34;
    PyObject *tmp_next_source_35;
    PyObject *tmp_next_source_36;
    PyObject *tmp_next_source_37;
    PyObject *tmp_next_source_38;
    PyObject *tmp_next_source_39;
    PyObject *tmp_next_source_40;
    PyObject *tmp_next_source_41;
    PyObject *tmp_next_source_42;
    PyObject *tmp_next_source_43;
    PyObject *tmp_next_source_44;
    PyObject *tmp_next_source_45;
    PyObject *tmp_next_source_46;
    PyObject *tmp_next_source_47;
    PyObject *tmp_next_source_48;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_type_3;
    PyObject *tmp_raise_type_4;
    PyObject *tmp_raise_type_5;
    PyObject *tmp_range_arg_1;
    PyObject *tmp_range_arg_2;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    Py_ssize_t tmp_slice_index_upper_1;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_upper_1;
    PyObject *tmp_slice_upper_2;
    PyObject *tmp_slice_upper_3;
    PyObject *tmp_slice_upper_4;
    PyObject *tmp_sliceass_target_1;
    PyObject *tmp_sliceass_upper_1;
    PyObject *tmp_sliceass_value_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_source_name_28;
    PyObject *tmp_source_name_29;
    PyObject *tmp_source_name_30;
    PyObject *tmp_source_name_31;
    PyObject *tmp_source_name_32;
    PyObject *tmp_source_name_33;
    PyObject *tmp_source_name_34;
    PyObject *tmp_source_name_35;
    PyObject *tmp_source_name_36;
    PyObject *tmp_source_name_37;
    PyObject *tmp_source_name_38;
    PyObject *tmp_source_name_39;
    PyObject *tmp_source_name_40;
    PyObject *tmp_source_name_41;
    PyObject *tmp_source_name_42;
    PyObject *tmp_source_name_43;
    PyObject *tmp_source_name_44;
    PyObject *tmp_source_name_45;
    PyObject *tmp_source_name_46;
    PyObject *tmp_source_name_47;
    PyObject *tmp_source_name_48;
    PyObject *tmp_source_name_49;
    PyObject *tmp_source_name_50;
    PyObject *tmp_source_name_51;
    PyObject *tmp_source_name_52;
    PyObject *tmp_source_name_53;
    PyObject *tmp_source_name_54;
    PyObject *tmp_source_name_55;
    PyObject *tmp_source_name_56;
    PyObject *tmp_source_name_57;
    PyObject *tmp_source_name_58;
    PyObject *tmp_source_name_59;
    PyObject *tmp_source_name_60;
    PyObject *tmp_source_name_61;
    PyObject *tmp_source_name_62;
    PyObject *tmp_source_name_63;
    PyObject *tmp_source_name_64;
    PyObject *tmp_source_name_65;
    PyObject *tmp_source_name_66;
    PyObject *tmp_source_name_67;
    PyObject *tmp_source_name_68;
    PyObject *tmp_source_name_69;
    PyObject *tmp_source_name_70;
    PyObject *tmp_source_name_71;
    PyObject *tmp_source_name_72;
    PyObject *tmp_source_name_73;
    PyObject *tmp_source_name_74;
    PyObject *tmp_source_name_75;
    PyObject *tmp_source_name_76;
    PyObject *tmp_source_name_77;
    PyObject *tmp_source_name_78;
    PyObject *tmp_source_name_79;
    PyObject *tmp_source_name_80;
    PyObject *tmp_source_name_81;
    PyObject *tmp_source_name_82;
    PyObject *tmp_source_name_83;
    PyObject *tmp_source_name_84;
    PyObject *tmp_source_name_85;
    PyObject *tmp_source_name_86;
    PyObject *tmp_source_name_87;
    PyObject *tmp_source_name_88;
    PyObject *tmp_source_name_89;
    PyObject *tmp_source_name_90;
    PyObject *tmp_source_name_91;
    PyObject *tmp_source_name_92;
    PyObject *tmp_source_name_93;
    PyObject *tmp_source_name_94;
    PyObject *tmp_source_name_95;
    PyObject *tmp_str_arg_1;
    PyObject *tmp_str_arg_2;
    PyObject *tmp_str_arg_3;
    PyObject *tmp_str_arg_4;
    PyObject *tmp_str_arg_5;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_subscript_2;
    PyObject *tmp_subscr_subscript_3;
    PyObject *tmp_subscr_subscript_4;
    PyObject *tmp_subscr_subscript_5;
    PyObject *tmp_subscr_subscript_6;
    PyObject *tmp_subscr_subscript_7;
    PyObject *tmp_subscr_subscript_8;
    PyObject *tmp_subscr_subscript_9;
    PyObject *tmp_subscr_subscript_10;
    PyObject *tmp_subscr_subscript_11;
    PyObject *tmp_subscr_subscript_12;
    PyObject *tmp_subscr_subscript_13;
    PyObject *tmp_subscr_subscript_14;
    PyObject *tmp_subscr_target_1;
    PyObject *tmp_subscr_target_2;
    PyObject *tmp_subscr_target_3;
    PyObject *tmp_subscr_target_4;
    PyObject *tmp_subscr_target_5;
    PyObject *tmp_subscr_target_6;
    PyObject *tmp_subscr_target_7;
    PyObject *tmp_subscr_target_8;
    PyObject *tmp_subscr_target_9;
    PyObject *tmp_subscr_target_10;
    PyObject *tmp_subscr_target_11;
    PyObject *tmp_subscr_target_12;
    PyObject *tmp_subscr_target_13;
    PyObject *tmp_subscr_target_14;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    int tmp_tried_lineno_4;
    int tmp_tried_lineno_5;
    int tmp_tried_lineno_6;
    int tmp_tried_lineno_7;
    int tmp_tried_lineno_8;
    int tmp_tried_lineno_9;
    int tmp_tried_lineno_10;
    int tmp_tried_lineno_11;
    int tmp_tried_lineno_12;
    int tmp_tried_lineno_13;
    int tmp_tried_lineno_14;
    int tmp_tried_lineno_15;
    int tmp_tried_lineno_16;
    int tmp_tried_lineno_17;
    int tmp_tried_lineno_18;
    int tmp_tried_lineno_19;
    int tmp_tried_lineno_20;
    int tmp_tried_lineno_21;
    int tmp_tried_lineno_22;
    int tmp_tried_lineno_23;
    int tmp_tried_lineno_24;
    int tmp_tried_lineno_25;
    int tmp_tried_lineno_26;
    int tmp_tried_lineno_27;
    int tmp_tried_lineno_28;
    int tmp_tried_lineno_29;
    int tmp_tried_lineno_30;
    int tmp_tried_lineno_31;
    int tmp_tried_lineno_32;
    int tmp_tried_lineno_33;
    int tmp_tried_lineno_34;
    int tmp_tried_lineno_35;
    int tmp_tried_lineno_36;
    int tmp_tried_lineno_37;
    int tmp_tried_lineno_38;
    int tmp_tried_lineno_39;
    int tmp_tried_lineno_40;
    int tmp_tried_lineno_41;
    int tmp_tried_lineno_42;
    int tmp_tried_lineno_43;
    int tmp_tried_lineno_44;
    int tmp_tried_lineno_45;
    int tmp_tried_lineno_46;
    int tmp_tried_lineno_47;
    int tmp_tried_lineno_48;
    int tmp_tried_lineno_49;
    int tmp_tried_lineno_50;
    int tmp_tried_lineno_51;
    int tmp_tried_lineno_52;
    int tmp_tried_lineno_53;
    int tmp_tried_lineno_54;
    int tmp_tried_lineno_55;
    int tmp_tried_lineno_56;
    int tmp_tried_lineno_57;
    int tmp_tried_lineno_58;
    int tmp_tried_lineno_59;
    int tmp_tried_lineno_60;
    int tmp_tried_lineno_61;
    int tmp_tried_lineno_62;
    int tmp_tried_lineno_63;
    int tmp_tried_lineno_64;
    int tmp_tried_lineno_65;
    int tmp_tried_lineno_66;
    int tmp_tried_lineno_67;
    int tmp_tried_lineno_68;
    int tmp_tried_lineno_69;
    int tmp_tried_lineno_70;
    int tmp_tried_lineno_71;
    int tmp_tried_lineno_72;
    int tmp_tried_lineno_73;
    int tmp_tried_lineno_74;
    int tmp_tried_lineno_75;
    int tmp_tried_lineno_76;
    int tmp_tried_lineno_77;
    int tmp_tried_lineno_78;
    int tmp_tried_lineno_79;
    int tmp_tried_lineno_80;
    int tmp_tried_lineno_81;
    int tmp_tried_lineno_82;
    int tmp_tried_lineno_83;
    int tmp_tried_lineno_84;
    int tmp_tried_lineno_85;
    int tmp_tried_lineno_86;
    int tmp_tried_lineno_87;
    int tmp_tried_lineno_88;
    int tmp_tried_lineno_89;
    int tmp_tried_lineno_90;
    int tmp_tried_lineno_91;
    int tmp_tried_lineno_92;
    int tmp_tried_lineno_93;
    int tmp_tried_lineno_94;
    int tmp_tried_lineno_95;
    int tmp_tried_lineno_96;
    int tmp_tried_lineno_97;
    int tmp_tried_lineno_98;
    int tmp_tried_lineno_99;
    int tmp_tried_lineno_100;
    int tmp_tried_lineno_101;
    int tmp_tried_lineno_102;
    int tmp_tried_lineno_103;
    int tmp_tried_lineno_104;
    int tmp_tried_lineno_105;
    int tmp_tried_lineno_106;
    int tmp_tried_lineno_107;
    int tmp_tried_lineno_108;
    int tmp_tried_lineno_109;
    int tmp_tried_lineno_110;
    int tmp_tried_lineno_111;
    int tmp_tried_lineno_112;
    int tmp_tried_lineno_113;
    int tmp_tried_lineno_114;
    int tmp_tried_lineno_115;
    PyObject *tmp_tuple_arg_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_tuple_element_8;
    PyObject *tmp_tuple_element_9;
    PyObject *tmp_tuple_element_10;
    PyObject *tmp_tuple_element_11;
    PyObject *tmp_tuple_element_12;
    PyObject *tmp_tuple_element_13;
    PyObject *tmp_tuple_element_14;
    PyObject *tmp_tuple_element_15;
    PyObject *tmp_tuple_element_16;
    PyObject *tmp_tuple_element_17;
    PyObject *tmp_tuple_element_18;
    PyObject *tmp_tuple_element_19;
    PyObject *tmp_tuple_element_20;
    PyObject *tmp_tuple_element_21;
    PyObject *tmp_tuple_element_22;
    PyObject *tmp_tuple_element_23;
    PyObject *tmp_tuple_element_24;
    PyObject *tmp_tuple_element_25;
    PyObject *tmp_tuple_element_26;
    PyObject *tmp_tuple_element_27;
    PyObject *tmp_tuple_element_28;
    PyObject *tmp_tuple_element_29;
    PyObject *tmp_tuple_element_30;
    PyObject *tmp_tuple_element_31;
    PyObject *tmp_tuple_element_32;
    PyObject *tmp_tuple_element_33;
    PyObject *tmp_tuple_element_34;
    PyObject *tmp_tuple_element_35;
    PyObject *tmp_tuple_element_36;
    PyObject *tmp_tuple_element_37;
    PyObject *tmp_tuple_element_38;
    PyObject *tmp_tuple_element_39;
    PyObject *tmp_tuple_element_40;
    PyObject *tmp_type_arg_1;
    PyObject *tmp_type_arg_2;
    PyObject *tmp_unary_arg_1;
    PyObject *tmp_unary_arg_2;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    PyObject *tmp_unpack_4;
    PyObject *tmp_unpack_5;
    PyObject *tmp_unpack_6;
    PyObject *tmp_unpack_7;
    PyObject *tmp_unpack_8;
    PyObject *tmp_unpack_9;
    PyObject *tmp_unpack_10;
    PyObject *tmp_unpack_11;
    PyObject *tmp_unpack_12;
    PyObject *tmp_unpack_13;
    PyObject *tmp_unpack_14;
    PyObject *tmp_unpack_15;
    PyObject *tmp_unpack_16;
    PyObject *tmp_unpack_17;
    PyObject *tmp_unpack_18;
    PyObject *tmp_unpack_19;
    PyObject *tmp_unpack_20;
    PyObject *tmp_unpack_21;
    PyObject *tmp_unpack_22;
    PyObject *tmp_unpack_23;
    PyObject *tmp_unpack_24;
    PyObject *tmp_unpack_25;
    PyObject *tmp_unpack_26;
    PyObject *tmp_unpack_27;
    PyObject *tmp_unpack_28;
    PyObject *tmp_unpack_29;
    PyObject *tmp_unpack_30;
    PyObject *tmp_unpack_31;
    PyObject *tmp_unpack_32;
    PyObject *tmp_unpack_33;
    PyObject *tmp_unpack_34;
    PyObject *tmp_unpack_35;
    PyObject *tmp_unpack_36;
    PyObject *tmp_unpack_37;
    PyObject *tmp_unpack_38;
    PyObject *tmp_unpack_39;
    PyObject *tmp_unpack_40;
    PyObject *tmp_unpack_41;
    PyObject *tmp_unpack_42;
    PyObject *tmp_unpack_43;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_35ad4fa7814f5a4d1ef444aa5cd38866, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_comments.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155754 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1320;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_1 != tmp_compare_right_1 );
    if (tmp_isnot_1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1321;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = par_comments.object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155754 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1321;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1321;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1321;
        goto frame_exception_exit_1;
    }
    if (par_comments.object == NULL)
    {
        par_comments.object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = par_comments.object;
        par_comments.object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    branch_no_1:;
    tmp_isinstance_inst_1 = par_delimiter.object;

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155808 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1322;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_unicode );

    if (unlikely( tmp_isinstance_cls_1 == NULL ))
    {
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode );
    }

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52141 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1322;
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1322;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_2 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_2 == NULL ))
    {
        tmp_called_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1323;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_2 = par_delimiter.object;

    if ( tmp_call_arg_element_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155808 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1323;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1323;
    tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1323;
        goto frame_exception_exit_1;
    }
    if (par_delimiter.object == NULL)
    {
        par_delimiter.object = tmp_assign_source_2;
    }
    else
    {
        PyObject *old = par_delimiter.object;
        par_delimiter.object = tmp_assign_source_2;
        Py_DECREF( old );
    }
    branch_no_2:;
    tmp_isinstance_inst_2 = par_missing.object;

    if ( tmp_isinstance_inst_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171804 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1324;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_2 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_unicode );

    if (unlikely( tmp_isinstance_cls_2 == NULL ))
    {
        tmp_isinstance_cls_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode );
    }

    if ( tmp_isinstance_cls_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52141 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1324;
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1324;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_called_3 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_3 == NULL ))
    {
        tmp_called_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1325;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_3 = par_missing.object;

    if ( tmp_call_arg_element_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171804 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1325;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1325;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_3 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1325;
        goto frame_exception_exit_1;
    }
    if (par_missing.object == NULL)
    {
        par_missing.object = tmp_assign_source_3;
    }
    else
    {
        PyObject *old = par_missing.object;
        par_missing.object = tmp_assign_source_3;
        Py_DECREF( old );
    }
    branch_no_3:;
    tmp_isinstance_inst_3 = par_missing_values.object;

    if ( tmp_isinstance_inst_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156787 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1326;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_3 = PyTuple_New( 3 );
    tmp_tuple_element_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_unicode );

    if (unlikely( tmp_tuple_element_1 == NULL ))
    {
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode );
    }

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_isinstance_cls_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52141 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1326;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_3, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = LOOKUP_BUILTIN( const_str_plain_list );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_cls_3 );

        frame_function->f_lineno = 1326;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_3, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = LOOKUP_BUILTIN( const_str_plain_tuple );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_cls_3 );

        frame_function->f_lineno = 1326;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_3, 2, tmp_tuple_element_1 );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
    Py_DECREF( tmp_isinstance_cls_3 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1326;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_4 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes_nested );

    if (unlikely( tmp_called_4 == NULL ))
    {
        tmp_called_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes_nested );
    }

    if ( tmp_called_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52177 ], 43, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1327;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_4 = par_missing_values.object;

    if ( tmp_call_arg_element_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156787 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1327;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1327;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_4 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1327;
        goto frame_exception_exit_1;
    }
    if (par_missing_values.object == NULL)
    {
        par_missing_values.object = tmp_assign_source_4;
    }
    else
    {
        PyObject *old = par_missing_values.object;
        par_missing_values.object = tmp_assign_source_4;
        Py_DECREF( old );
    }
    branch_no_4:;
    tmp_cond_value_1 = par_usemask.object;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171857 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1330;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1330;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_MaskedArray.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_MaskedArray,
            var_MaskedArray.object
        );

    }
    if ((var_make_mask_descr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_make_mask_descr,
            var_make_mask_descr.object
        );

    }
    if ((var_user_converters.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_user_converters,
            var_user_converters.object
        );

    }
    if ((var_errmsg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_errmsg,
            var_errmsg.object
        );

    }
    if ((var_own_fhd.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_own_fhd,
            var_own_fhd.object
        );

    }
    if ((var_fhd.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_fhd,
            var_fhd.object
        );

    }
    if ((var_split_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_split_line,
            var_split_line.object
        );

    }
    if ((var_validate_names.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_validate_names,
            var_validate_names.object
        );

    }
    if ((var_i.storage != NULL && var_i.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_i,
            var_i.storage->object
        );

    }
    if ((var_first_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_first_values,
            var_first_values.object
        );

    }
    if ((var_first_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_first_line,
            var_first_line.object
        );

    }
    if ((var_fval.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_fval,
            var_fval.object
        );

    }
    if ((var__.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain__,
            var__.object
        );

    }
    if ((var_nbcols.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_nbcols,
            var_nbcols.object
        );

    }
    if ((var_current.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_current,
            var_current.object
        );

    }
    if ((var_descr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_descr,
            var_descr.object
        );

    }
    if ((var_user_missing_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_user_missing_values,
            var_user_missing_values.object
        );

    }
    if ((var_key.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_key,
            var_key.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((var_miss.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_miss,
            var_miss.object
        );

    }
    if ((var_value.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_value,
            var_value.object
        );

    }
    if ((var_entry.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_entry,
            var_entry.object
        );

    }
    if ((var_user_value.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_user_value,
            var_user_value.object
        );

    }
    if ((var_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_values,
            var_values.object
        );

    }
    if ((var_user_filling_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_user_filling_values,
            var_user_filling_values.object
        );

    }
    if ((var_n.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_n,
            var_n.object
        );

    }
    if ((var_fill.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_fill,
            var_fill.object
        );

    }
    if ((var_dtype_flat.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_dtype_flat,
            var_dtype_flat.object
        );

    }
    if ((var_zipit.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_zipit,
            var_zipit.object
        );

    }
    if ((var_dt.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_dt,
            var_dt.object
        );

    }
    if ((var_uc_update.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_uc_update,
            var_uc_update.object
        );

    }
    if ((var_conv.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_conv,
            var_conv.object
        );

    }
    if ((var_testing_value.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_testing_value,
            var_testing_value.object
        );

    }
    if ((var_miss_chars.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_miss_chars,
            var_miss_chars.object
        );

    }
    if ((var_rows.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_rows,
            var_rows.object
        );

    }
    if ((var_append_to_rows.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_append_to_rows,
            var_append_to_rows.object
        );

    }
    if ((var_masks.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_masks,
            var_masks.object
        );

    }
    if ((var_append_to_masks.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_append_to_masks,
            var_append_to_masks.object
        );

    }
    if ((var_invalid.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_invalid,
            var_invalid.object
        );

    }
    if ((var_append_to_invalid.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_append_to_invalid,
            var_append_to_invalid.object
        );

    }
    if ((var_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_line,
            var_line.object
        );

    }
    if ((var_nbvalues.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_nbvalues,
            var_nbvalues.object
        );

    }
    if ((var_v.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_v,
            var_v.object
        );

    }
    if ((var_m.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_m,
            var_m.object
        );

    }
    if ((var_converter.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_converter,
            var_converter.object
        );

    }
    if ((var__m.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain__m,
            var__m.object
        );

    }
    if ((var_current_column.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_current_column,
            var_current_column.object
        );

    }
    if ((var_j.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_j,
            var_j.object
        );

    }
    if ((var_nbinvalid.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_nbinvalid,
            var_nbinvalid.object
        );

    }
    if ((var_nbrows.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_nbrows,
            var_nbrows.object
        );

    }
    if ((var_template.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_template,
            var_template.object
        );

    }
    if ((var_nbinvalid_skipped.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_nbinvalid_skipped,
            var_nbinvalid_skipped.object
        );

    }
    if ((var_nb.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_nb,
            var_nb.object
        );

    }
    if ((var__r.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain__r,
            var__r.object
        );

    }
    if ((var_data.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_data,
            var_data.object
        );

    }
    if ((var_column_types.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_column_types,
            var_column_types.object
        );

    }
    if ((var_strcolidx.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_strcolidx,
            var_strcolidx.object
        );

    }
    if ((var_c.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_c,
            var_c.object
        );

    }
    if ((var_base.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_base,
            var_base.object
        );

    }
    if ((var_ddtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ddtype,
            var_ddtype.object
        );

    }
    if ((var_mdtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_mdtype,
            var_mdtype.object
        );

    }
    if ((var_output.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_output,
            var_output.object
        );

    }
    if ((var_outputmask.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_outputmask,
            var_outputmask.object
        );

    }
    if ((var_t.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_t,
            var_t.object
        );

    }
    if ((var_rowmasks.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_rowmasks,
            var_rowmasks.object
        );

    }
    if ((var_ishomogeneous.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ishomogeneous,
            var_ishomogeneous.object
        );

    }
    if ((var_ttype.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ttype,
            var_ttype.object
        );

    }
    if ((var_name.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_name,
            var_name.object
        );

    }
    if ((var_mval.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_mval,
            var_mval.object
        );

    }
    if ((par_fname.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_fname,
            par_fname.object
        );

    }
    if ((par_dtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_dtype,
            par_dtype.object
        );

    }
    if ((par_comments.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_comments,
            par_comments.object
        );

    }
    if ((par_delimiter.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_delimiter,
            par_delimiter.object
        );

    }
    if ((par_skiprows.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_skiprows,
            par_skiprows.object
        );

    }
    if ((par_skip_header.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_skip_header,
            par_skip_header.object
        );

    }
    if ((par_skip_footer.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_skip_footer,
            par_skip_footer.object
        );

    }
    if ((par_converters.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_converters,
            par_converters.object
        );

    }
    if ((par_missing.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_missing,
            par_missing.object
        );

    }
    if ((par_missing_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_missing_values,
            par_missing_values.object
        );

    }
    if ((par_filling_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_filling_values,
            par_filling_values.object
        );

    }
    if ((par_usecols.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_usecols,
            par_usecols.object
        );

    }
    if ((par_names.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_names,
            par_names.object
        );

    }
    if ((par_excludelist.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_excludelist,
            par_excludelist.object
        );

    }
    if ((par_deletechars.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_deletechars,
            par_deletechars.object
        );

    }
    if ((par_replace_space.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_replace_space,
            par_replace_space.object
        );

    }
    if ((par_autostrip.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_autostrip,
            par_autostrip.object
        );

    }
    if ((par_case_sensitive.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_case_sensitive,
            par_case_sensitive.object
        );

    }
    if ((par_defaultfmt.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_defaultfmt,
            par_defaultfmt.object
        );

    }
    if ((par_unpack.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_unpack,
            par_unpack.object
        );

    }
    if ((par_usemask.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_usemask,
            par_usemask.object
        );

    }
    if ((par_loose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_loose,
            par_loose.object
        );

    }
    if ((par_invalid_raise.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_invalid_raise,
            par_invalid_raise.object
        );

    }
    frame_function->f_lineno = 1331;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_digest_91108cc74ff5192a68c4bb8e12fdb51d, tmp_import_globals_1, tmp_import_locals_1, const_tuple_str_plain_MaskedArray_str_plain_make_mask_descr_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1331;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_5 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_MaskedArray );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1331;
        goto frame_exception_exit_1;
    }
    assert( var_MaskedArray.object == NULL );
    var_MaskedArray.object = tmp_assign_source_5;

    tmp_import_globals_2 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    tmp_import_locals_2 = PyDict_New();
    if ((var_MaskedArray.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_MaskedArray,
            var_MaskedArray.object
        );

    }
    if ((var_make_mask_descr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_make_mask_descr,
            var_make_mask_descr.object
        );

    }
    if ((var_user_converters.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_user_converters,
            var_user_converters.object
        );

    }
    if ((var_errmsg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_errmsg,
            var_errmsg.object
        );

    }
    if ((var_own_fhd.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_own_fhd,
            var_own_fhd.object
        );

    }
    if ((var_fhd.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_fhd,
            var_fhd.object
        );

    }
    if ((var_split_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_split_line,
            var_split_line.object
        );

    }
    if ((var_validate_names.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_validate_names,
            var_validate_names.object
        );

    }
    if ((var_i.storage != NULL && var_i.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_i,
            var_i.storage->object
        );

    }
    if ((var_first_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_first_values,
            var_first_values.object
        );

    }
    if ((var_first_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_first_line,
            var_first_line.object
        );

    }
    if ((var_fval.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_fval,
            var_fval.object
        );

    }
    if ((var__.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain__,
            var__.object
        );

    }
    if ((var_nbcols.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_nbcols,
            var_nbcols.object
        );

    }
    if ((var_current.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_current,
            var_current.object
        );

    }
    if ((var_descr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_descr,
            var_descr.object
        );

    }
    if ((var_user_missing_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_user_missing_values,
            var_user_missing_values.object
        );

    }
    if ((var_key.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_key,
            var_key.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((var_miss.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_miss,
            var_miss.object
        );

    }
    if ((var_value.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_value,
            var_value.object
        );

    }
    if ((var_entry.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_entry,
            var_entry.object
        );

    }
    if ((var_user_value.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_user_value,
            var_user_value.object
        );

    }
    if ((var_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_values,
            var_values.object
        );

    }
    if ((var_user_filling_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_user_filling_values,
            var_user_filling_values.object
        );

    }
    if ((var_n.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_n,
            var_n.object
        );

    }
    if ((var_fill.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_fill,
            var_fill.object
        );

    }
    if ((var_dtype_flat.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_dtype_flat,
            var_dtype_flat.object
        );

    }
    if ((var_zipit.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_zipit,
            var_zipit.object
        );

    }
    if ((var_dt.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_dt,
            var_dt.object
        );

    }
    if ((var_uc_update.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_uc_update,
            var_uc_update.object
        );

    }
    if ((var_conv.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_conv,
            var_conv.object
        );

    }
    if ((var_testing_value.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_testing_value,
            var_testing_value.object
        );

    }
    if ((var_miss_chars.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_miss_chars,
            var_miss_chars.object
        );

    }
    if ((var_rows.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_rows,
            var_rows.object
        );

    }
    if ((var_append_to_rows.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_append_to_rows,
            var_append_to_rows.object
        );

    }
    if ((var_masks.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_masks,
            var_masks.object
        );

    }
    if ((var_append_to_masks.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_append_to_masks,
            var_append_to_masks.object
        );

    }
    if ((var_invalid.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_invalid,
            var_invalid.object
        );

    }
    if ((var_append_to_invalid.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_append_to_invalid,
            var_append_to_invalid.object
        );

    }
    if ((var_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_line,
            var_line.object
        );

    }
    if ((var_nbvalues.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_nbvalues,
            var_nbvalues.object
        );

    }
    if ((var_v.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_v,
            var_v.object
        );

    }
    if ((var_m.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_m,
            var_m.object
        );

    }
    if ((var_converter.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_converter,
            var_converter.object
        );

    }
    if ((var__m.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain__m,
            var__m.object
        );

    }
    if ((var_current_column.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_current_column,
            var_current_column.object
        );

    }
    if ((var_j.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_j,
            var_j.object
        );

    }
    if ((var_nbinvalid.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_nbinvalid,
            var_nbinvalid.object
        );

    }
    if ((var_nbrows.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_nbrows,
            var_nbrows.object
        );

    }
    if ((var_template.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_template,
            var_template.object
        );

    }
    if ((var_nbinvalid_skipped.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_nbinvalid_skipped,
            var_nbinvalid_skipped.object
        );

    }
    if ((var_nb.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_nb,
            var_nb.object
        );

    }
    if ((var__r.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain__r,
            var__r.object
        );

    }
    if ((var_data.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_data,
            var_data.object
        );

    }
    if ((var_column_types.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_column_types,
            var_column_types.object
        );

    }
    if ((var_strcolidx.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_strcolidx,
            var_strcolidx.object
        );

    }
    if ((var_c.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_c,
            var_c.object
        );

    }
    if ((var_base.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_base,
            var_base.object
        );

    }
    if ((var_ddtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_ddtype,
            var_ddtype.object
        );

    }
    if ((var_mdtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_mdtype,
            var_mdtype.object
        );

    }
    if ((var_output.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_output,
            var_output.object
        );

    }
    if ((var_outputmask.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_outputmask,
            var_outputmask.object
        );

    }
    if ((var_t.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_t,
            var_t.object
        );

    }
    if ((var_rowmasks.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_rowmasks,
            var_rowmasks.object
        );

    }
    if ((var_ishomogeneous.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_ishomogeneous,
            var_ishomogeneous.object
        );

    }
    if ((var_ttype.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_ttype,
            var_ttype.object
        );

    }
    if ((var_name.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_name,
            var_name.object
        );

    }
    if ((var_mval.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_mval,
            var_mval.object
        );

    }
    if ((par_fname.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_fname,
            par_fname.object
        );

    }
    if ((par_dtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_dtype,
            par_dtype.object
        );

    }
    if ((par_comments.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_comments,
            par_comments.object
        );

    }
    if ((par_delimiter.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_delimiter,
            par_delimiter.object
        );

    }
    if ((par_skiprows.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_skiprows,
            par_skiprows.object
        );

    }
    if ((par_skip_header.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_skip_header,
            par_skip_header.object
        );

    }
    if ((par_skip_footer.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_skip_footer,
            par_skip_footer.object
        );

    }
    if ((par_converters.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_converters,
            par_converters.object
        );

    }
    if ((par_missing.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_missing,
            par_missing.object
        );

    }
    if ((par_missing_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_missing_values,
            par_missing_values.object
        );

    }
    if ((par_filling_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_filling_values,
            par_filling_values.object
        );

    }
    if ((par_usecols.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_usecols,
            par_usecols.object
        );

    }
    if ((par_names.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_names,
            par_names.object
        );

    }
    if ((par_excludelist.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_excludelist,
            par_excludelist.object
        );

    }
    if ((par_deletechars.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_deletechars,
            par_deletechars.object
        );

    }
    if ((par_replace_space.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_replace_space,
            par_replace_space.object
        );

    }
    if ((par_autostrip.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_autostrip,
            par_autostrip.object
        );

    }
    if ((par_case_sensitive.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_case_sensitive,
            par_case_sensitive.object
        );

    }
    if ((par_defaultfmt.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_defaultfmt,
            par_defaultfmt.object
        );

    }
    if ((par_unpack.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_unpack,
            par_unpack.object
        );

    }
    if ((par_usemask.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_usemask,
            par_usemask.object
        );

    }
    if ((par_loose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_loose,
            par_loose.object
        );

    }
    if ((par_invalid_raise.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_invalid_raise,
            par_invalid_raise.object
        );

    }
    frame_function->f_lineno = 1331;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_digest_91108cc74ff5192a68c4bb8e12fdb51d, tmp_import_globals_2, tmp_import_locals_2, const_tuple_str_plain_MaskedArray_str_plain_make_mask_descr_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_2 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1331;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_6 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_make_mask_descr );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1331;
        goto frame_exception_exit_1;
    }
    assert( var_make_mask_descr.object == NULL );
    var_make_mask_descr.object = tmp_assign_source_6;

    branch_no_5:;
    // Tried code
    tmp_assign_source_7 = NULL;
    // Tried code
    tmp_assign_source_8 = par_converters.object;

    if ( tmp_assign_source_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170342 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1333;
        goto try_finally_handler_2;
    }

    assert( tmp_or_1__value_1.object == NULL );
    tmp_or_1__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_8 );

    tmp_cond_value_2 = tmp_or_1__value_1.object;

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1333;
        goto try_finally_handler_2;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_assign_source_7 = tmp_or_1__value_1.object;

    Py_INCREF( tmp_assign_source_7 );
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_assign_source_7 = NULL;
    // Tried code
    tmp_result = tmp_or_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_1__value_1.object );
        tmp_or_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_assign_source_7 = PyDict_New();
    // Re-reraise as necessary after finally was executed.
    goto finally_end_1;
    finally_end_1:;
    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_1;
    }

    goto finally_end_2;
    finally_end_2:;
    assert( var_user_converters.object == NULL );
    var_user_converters.object = tmp_assign_source_7;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_1__value_1.object );
    tmp_or_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto frame_exception_exit_1;
    }

    goto finally_end_3;
    finally_end_3:;
    tmp_isinstance_inst_4 = var_user_converters.object;

    if ( tmp_isinstance_inst_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170823 ], 61, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1334;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_4 = LOOKUP_BUILTIN( const_str_plain_dict );
    if ( tmp_isinstance_cls_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1334;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_4, tmp_isinstance_cls_4 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1334;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_no_6;
    }
    else
    {
        goto branch_yes_6;
    }
    branch_yes_6:;
    tmp_assign_source_9 = const_str_digest_f74d060132cc5ee937c2b72144ac6a7c;
    assert( var_errmsg.object == NULL );
    var_errmsg.object = INCREASE_REFCOUNT( tmp_assign_source_9 );

    tmp_binop_left_1 = var_errmsg.object;

    tmp_type_arg_1 = var_user_converters.object;

    if ( tmp_type_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170823 ], 61, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1337;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1337;
        goto frame_exception_exit_1;
    }
    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1337;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1337;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, tmp_make_exception_arg_1 );
    Py_DECREF( tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1337;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 1337;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_6:;
    tmp_assign_source_10 = Py_False;
    assert( var_own_fhd.object == NULL );
    var_own_fhd.object = INCREASE_REFCOUNT( tmp_assign_source_10 );

    // Tried block of try/except
    tmp_isinstance_inst_5 = par_fname.object;

    if ( tmp_isinstance_inst_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1342;
        goto try_except_handler_1;
    }

    tmp_isinstance_cls_5 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_basestring );

    if (unlikely( tmp_isinstance_cls_5 == NULL ))
    {
        tmp_isinstance_cls_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_basestring );
    }

    if ( tmp_isinstance_cls_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 68141 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1342;
        goto try_except_handler_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_5, tmp_isinstance_cls_5 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1342;
        goto try_except_handler_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5370 ], 32, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1343;
        goto try_except_handler_1;
    }

    tmp_subscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_version_info );
    if ( tmp_subscr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1343;
        goto try_except_handler_1;
    }
    tmp_subscr_subscript_1 = const_int_0;
    tmp_compare_left_2 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    Py_DECREF( tmp_subscr_target_1 );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1343;
        goto try_except_handler_1;
    }
    tmp_compare_right_2 = const_int_pos_2;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_2 );

        frame_function->f_lineno = 1343;
        goto try_except_handler_1;
    }
    Py_DECREF( tmp_compare_left_2 );
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1344;
        goto try_except_handler_1;
    }

    tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_lib );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1344;
        goto try_except_handler_1;
    }
    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__datasource );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1344;
        goto try_except_handler_1;
    }
    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_open );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1344;
        goto try_except_handler_1;
    }
    tmp_call_arg_element_5 = par_fname.object;

    if ( tmp_call_arg_element_5 == NULL )
    {
        Py_DECREF( tmp_called_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1344;
        goto try_except_handler_1;
    }

    tmp_call_arg_element_6 = const_str_plain_rbU;
    frame_function->f_lineno = 1344;
    tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_5, tmp_call_arg_element_5, tmp_call_arg_element_6 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1344;
        goto try_except_handler_1;
    }
    tmp_assign_source_11 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1344;
        goto try_except_handler_1;
    }
    assert( var_fhd.object == NULL );
    var_fhd.object = tmp_assign_source_11;

    goto branch_end_8;
    branch_no_8:;
    tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_7 == NULL ))
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1346;
        goto try_except_handler_1;
    }

    tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_lib );
    if ( tmp_source_name_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1346;
        goto try_except_handler_1;
    }
    tmp_source_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__datasource );
    Py_DECREF( tmp_source_name_6 );
    if ( tmp_source_name_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1346;
        goto try_except_handler_1;
    }
    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_open );
    Py_DECREF( tmp_source_name_5 );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1346;
        goto try_except_handler_1;
    }
    tmp_call_arg_element_7 = par_fname.object;

    if ( tmp_call_arg_element_7 == NULL )
    {
        Py_DECREF( tmp_called_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1346;
        goto try_except_handler_1;
    }

    tmp_call_arg_element_8 = const_str_plain_rb;
    frame_function->f_lineno = 1346;
    tmp_iter_arg_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_6, tmp_call_arg_element_7, tmp_call_arg_element_8 );
    Py_DECREF( tmp_called_6 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1346;
        goto try_except_handler_1;
    }
    tmp_assign_source_12 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1346;
        goto try_except_handler_1;
    }
    assert( var_fhd.object == NULL );
    var_fhd.object = tmp_assign_source_12;

    branch_end_8:;
    tmp_assign_source_13 = Py_True;
    assert( var_own_fhd.object != NULL );
    {
        PyObject *old = var_own_fhd.object;
        var_own_fhd.object = INCREASE_REFCOUNT( tmp_assign_source_13 );
        Py_DECREF( old );
    }

    goto branch_end_7;
    branch_no_7:;
    tmp_iter_arg_3 = par_fname.object;

    if ( tmp_iter_arg_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1349;
        goto try_except_handler_1;
    }

    tmp_assign_source_14 = MAKE_ITERATOR( tmp_iter_arg_3 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1349;
        goto try_except_handler_1;
    }
    assert( var_fhd.object == NULL );
    var_fhd.object = tmp_assign_source_14;

    branch_end_7:;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_3 = PyThreadState_GET()->exc_type;
    tmp_compare_right_3 = PyExc_TypeError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1350;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_binop_left_2 = const_str_digest_dd20d6e029861b8813b057f636c3afee;
    tmp_type_arg_2 = par_fname.object;

    if ( tmp_type_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1352;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_2 = BUILTIN_TYPE1( tmp_type_arg_2 );
    if ( tmp_binop_right_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1352;
        goto frame_exception_exit_1;
    }
    tmp_make_exception_arg_2 = BINARY_OPERATION_REMAINDER( tmp_binop_left_2, tmp_binop_right_2 );
    Py_DECREF( tmp_binop_right_2 );
    if ( tmp_make_exception_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1351;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1351;
    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, tmp_make_exception_arg_2 );
    Py_DECREF( tmp_make_exception_arg_2 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1351;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_2;
    frame_function->f_lineno = 1351;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    goto branch_end_9;
    branch_no_9:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_9:;
    try_except_end_1:;
    tmp_called_7 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_LineSplitter );

    if (unlikely( tmp_called_7 == NULL ))
    {
        tmp_called_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LineSplitter );
    }

    if ( tmp_called_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171910 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1354;
        goto frame_exception_exit_1;
    }

    tmp_call_kw_1 = _PyDict_NewPresized( 3 );
    tmp_dict_value_1 = par_delimiter.object;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155808 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1354;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_1 = const_str_plain_delimiter;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    tmp_dict_value_2 = par_comments.object;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155754 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1354;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_2 = const_str_plain_comments;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_2, tmp_dict_value_2 );
    tmp_dict_value_3 = par_autostrip.object;

    if ( tmp_dict_value_3 == NULL )
    {
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155906 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1355;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_3 = const_str_plain_autostrip;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_3, tmp_dict_value_3 );
    frame_function->f_lineno = 1355;
    tmp_source_name_8 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_7, tmp_call_kw_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_source_name_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1355;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_15 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__handyman );
    Py_DECREF( tmp_source_name_8 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1354;
        goto frame_exception_exit_1;
    }
    assert( var_split_line.object == NULL );
    var_split_line.object = tmp_assign_source_15;

    tmp_called_8 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_NameValidator );

    if (unlikely( tmp_called_8 == NULL ))
    {
        tmp_called_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_NameValidator );
    }

    if ( tmp_called_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 157413 ], 42, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1356;
        goto frame_exception_exit_1;
    }

    tmp_call_kw_2 = _PyDict_NewPresized( 4 );
    tmp_dict_value_4 = par_excludelist.object;

    if ( tmp_dict_value_4 == NULL )
    {
        Py_DECREF( tmp_call_kw_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156119 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1356;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_4 = const_str_plain_excludelist;
    PyDict_SetItem( tmp_call_kw_2, tmp_dict_key_4, tmp_dict_value_4 );
    tmp_dict_value_5 = par_deletechars.object;

    if ( tmp_dict_value_5 == NULL )
    {
        Py_DECREF( tmp_call_kw_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 60735 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1357;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_5 = const_str_plain_deletechars;
    PyDict_SetItem( tmp_call_kw_2, tmp_dict_key_5, tmp_dict_value_5 );
    tmp_dict_value_6 = par_case_sensitive.object;

    if ( tmp_dict_value_6 == NULL )
    {
        Py_DECREF( tmp_call_kw_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156176 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1358;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_6 = const_str_plain_case_sensitive;
    PyDict_SetItem( tmp_call_kw_2, tmp_dict_key_6, tmp_dict_value_6 );
    tmp_dict_value_7 = par_replace_space.object;

    if ( tmp_dict_value_7 == NULL )
    {
        Py_DECREF( tmp_call_kw_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156236 ], 59, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1359;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_7 = const_str_plain_replace_space;
    PyDict_SetItem( tmp_call_kw_2, tmp_dict_key_7, tmp_dict_value_7 );
    frame_function->f_lineno = 1359;
    tmp_assign_source_16 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_8, tmp_call_kw_2 );
    Py_DECREF( tmp_call_kw_2 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1359;
        goto frame_exception_exit_1;
    }
    assert( var_validate_names.object == NULL );
    var_validate_names.object = tmp_assign_source_16;

    tmp_cond_value_3 = par_skiprows.object;

    if ( tmp_cond_value_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170488 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1362;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1362;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_warnings );

    if (unlikely( tmp_source_name_9 == NULL ))
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
    }

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6827 ], 37, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1363;
        goto frame_exception_exit_1;
    }

    tmp_called_9 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_warn );
    if ( tmp_called_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1363;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_9 = const_str_digest_6564064723a4d150a1d1c98412e0367b;
    tmp_call_arg_element_10 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );

    if (unlikely( tmp_call_arg_element_10 == NULL ))
    {
        tmp_call_arg_element_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );
    }

    if ( tmp_call_arg_element_10 == NULL )
    {
        Py_DECREF( tmp_called_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6864 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1366;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1366;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_9, tmp_call_arg_element_9, tmp_call_arg_element_10 );
    Py_DECREF( tmp_called_9 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1366;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_17 = par_skiprows.object;

    if ( tmp_assign_source_17 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170488 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1367;
        goto frame_exception_exit_1;
    }

    if (par_skip_header.object == NULL)
    {
        par_skip_header.object = INCREASE_REFCOUNT( tmp_assign_source_17 );
    }
    else
    {
        PyObject *old = par_skip_header.object;
        par_skip_header.object = INCREASE_REFCOUNT( tmp_assign_source_17 );
        Py_DECREF( old );
    }
    branch_no_10:;
    tmp_range_arg_1 = par_skip_header.object;

    if ( tmp_range_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171951 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1369;
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_4 = BUILTIN_RANGE( tmp_range_arg_1 );
    if ( tmp_iter_arg_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1369;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_18 = MAKE_ITERATOR( tmp_iter_arg_4 );
    Py_DECREF( tmp_iter_arg_4 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1369;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_18;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_19 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_19 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1369;
            goto try_finally_handler_4;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_19;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_19;
        Py_DECREF( old );
    }
    tmp_assign_source_20 = tmp_for_loop_1__iter_value.object;

    if (var_i.storage->object == NULL)
    {
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_20 );
    }
    else
    {
        PyObject *old = var_i.storage->object;
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_20 );
        Py_DECREF( old );
    }
    tmp_next1_arg_1 = var_fhd.object;

    if ( tmp_next1_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155399 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1370;
        goto try_finally_handler_4;
    }

    tmp_unused = ITERATOR_NEXT( tmp_next1_arg_1 );
    if ( tmp_unused == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1370;
        goto try_finally_handler_4;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1369;
        goto try_finally_handler_4;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto frame_exception_exit_1;
    }

    goto finally_end_4;
    finally_end_4:;
    tmp_assign_source_21 = Py_None;
    assert( var_first_values.object == NULL );
    var_first_values.object = INCREASE_REFCOUNT( tmp_assign_source_21 );

    // Tried block of try/except
    loop_start_2:;
    tmp_cond_value_4 = var_first_values.object;

    if ( tmp_cond_value_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172008 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1375;
        goto try_except_handler_2;
    }

    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1375;
        goto try_except_handler_2;
    }
    if (tmp_cond_truth_4 == 1)
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    goto loop_end_2;
    branch_no_11:;
    tmp_next1_arg_2 = var_fhd.object;

    if ( tmp_next1_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155399 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1376;
        goto try_except_handler_2;
    }

    tmp_assign_source_22 = ITERATOR_NEXT( tmp_next1_arg_2 );
    if ( tmp_assign_source_22 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1376;
        goto try_except_handler_2;
    }
    if (var_first_line.object == NULL)
    {
        var_first_line.object = tmp_assign_source_22;
    }
    else
    {
        PyObject *old = var_first_line.object;
        var_first_line.object = tmp_assign_source_22;
        Py_DECREF( old );
    }
    tmp_compare_left_4 = par_names.object;

    if ( tmp_compare_left_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1377;
        goto try_except_handler_2;
    }

    tmp_compare_right_4 = Py_True;
    tmp_is_1 = ( tmp_compare_left_4 == tmp_compare_right_4 );
    if (tmp_is_1)
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_compare_left_5 = par_comments.object;

    if ( tmp_compare_left_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155754 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1378;
        goto try_except_handler_2;
    }

    tmp_compare_right_5 = var_first_line.object;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    if ( tmp_cmp_In_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1378;
        goto try_except_handler_2;
    }
    if (tmp_cmp_In_1 == 1)
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_called_11 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_11 == NULL ))
    {
        tmp_called_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1379;
        goto try_except_handler_2;
    }

    tmp_call_arg_element_11 = const_str_empty;
    frame_function->f_lineno = 1379;
    tmp_source_name_10 = CALL_FUNCTION_WITH_ARGS1( tmp_called_11, tmp_call_arg_element_11 );
    if ( tmp_source_name_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1379;
        goto try_except_handler_2;
    }
    tmp_called_10 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_join );
    Py_DECREF( tmp_source_name_10 );
    if ( tmp_called_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1379;
        goto try_except_handler_2;
    }
    tmp_sliceslicedel_index_lower_1 = 1;
    tmp_slice_index_upper_1 = PY_SSIZE_T_MAX;
    tmp_source_name_11 = var_first_line.object;

    tmp_called_12 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_split );
    if ( tmp_called_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_10 );

        frame_function->f_lineno = 1379;
        goto try_except_handler_2;
    }
    tmp_call_arg_element_13 = par_comments.object;

    if ( tmp_call_arg_element_13 == NULL )
    {
        Py_DECREF( tmp_called_10 );
        Py_DECREF( tmp_called_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155754 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1379;
        goto try_except_handler_2;
    }

    frame_function->f_lineno = 1379;
    tmp_slice_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_12, tmp_call_arg_element_13 );
    Py_DECREF( tmp_called_12 );
    if ( tmp_slice_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_10 );

        frame_function->f_lineno = 1379;
        goto try_except_handler_2;
    }
    tmp_call_arg_element_12 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    Py_DECREF( tmp_slice_source_1 );
    if ( tmp_call_arg_element_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_10 );

        frame_function->f_lineno = 1379;
        goto try_except_handler_2;
    }
    frame_function->f_lineno = 1379;
    tmp_assign_source_23 = CALL_FUNCTION_WITH_ARGS1( tmp_called_10, tmp_call_arg_element_12 );
    Py_DECREF( tmp_called_10 );
    Py_DECREF( tmp_call_arg_element_12 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1379;
        goto try_except_handler_2;
    }
    assert( var_first_line.object != NULL );
    {
        PyObject *old = var_first_line.object;
        var_first_line.object = tmp_assign_source_23;
        Py_DECREF( old );
    }

    branch_no_13:;
    branch_no_12:;
    tmp_called_13 = var_split_line.object;

    if ( tmp_called_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170598 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1380;
        goto try_except_handler_2;
    }

    tmp_call_arg_element_14 = var_first_line.object;

    if ( tmp_call_arg_element_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170934 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1380;
        goto try_except_handler_2;
    }

    frame_function->f_lineno = 1380;
    tmp_assign_source_24 = CALL_FUNCTION_WITH_ARGS1( tmp_called_13, tmp_call_arg_element_14 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1380;
        goto try_except_handler_2;
    }
    if (var_first_values.object == NULL)
    {
        var_first_values.object = tmp_assign_source_24;
    }
    else
    {
        PyObject *old = var_first_values.object;
        var_first_values.object = tmp_assign_source_24;
        Py_DECREF( old );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1375;
        goto try_except_handler_2;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_except_end_2;
    try_except_handler_2:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_6 = PyThreadState_GET()->exc_type;
    tmp_compare_right_6 = PyExc_StopIteration;
    tmp_exc_match_exception_match_2 = EXCEPTION_MATCH_BOOL( tmp_compare_left_6, tmp_compare_right_6 );
    if ( tmp_exc_match_exception_match_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1381;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_2 == 1)
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_called_14 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_14 == NULL ))
    {
        tmp_called_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1383;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_15 = const_str_empty;
    frame_function->f_lineno = 1383;
    tmp_assign_source_25 = CALL_FUNCTION_WITH_ARGS1( tmp_called_14, tmp_call_arg_element_15 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1383;
        goto frame_exception_exit_1;
    }
    if (var_first_line.object == NULL)
    {
        var_first_line.object = tmp_assign_source_25;
    }
    else
    {
        PyObject *old = var_first_line.object;
        var_first_line.object = tmp_assign_source_25;
        Py_DECREF( old );
    }
    tmp_assign_source_26 = PyList_New( 0 );
    if (var_first_values.object == NULL)
    {
        var_first_values.object = tmp_assign_source_26;
    }
    else
    {
        PyObject *old = var_first_values.object;
        var_first_values.object = tmp_assign_source_26;
        Py_DECREF( old );
    }
    tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_warnings );

    if (unlikely( tmp_source_name_12 == NULL ))
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
    }

    if ( tmp_source_name_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6827 ], 37, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1385;
        goto frame_exception_exit_1;
    }

    tmp_called_15 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_warn );
    if ( tmp_called_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1385;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_3 = const_str_digest_33fce6852d20435584366e7b887d4c8f;
    tmp_binop_right_3 = par_fname.object;

    if ( tmp_binop_right_3 == NULL )
    {
        Py_DECREF( tmp_called_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1385;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_16 = BINARY_OPERATION_REMAINDER( tmp_binop_left_3, tmp_binop_right_3 );
    if ( tmp_call_arg_element_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_15 );

        frame_function->f_lineno = 1385;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1385;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_15, tmp_call_arg_element_16 );
    Py_DECREF( tmp_called_15 );
    Py_DECREF( tmp_call_arg_element_16 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1385;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_14;
    branch_no_14:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_14:;
    try_except_end_2:;
    tmp_compare_left_7 = par_names.object;

    if ( tmp_compare_left_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1388;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_7 = Py_True;
    tmp_is_2 = ( tmp_compare_left_7 == tmp_compare_right_7 );
    if (tmp_is_2)
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_subscr_target_2 = var_first_values.object;

    if ( tmp_subscr_target_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172008 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1389;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_2 = const_int_0;
    tmp_source_name_13 = LOOKUP_SUBSCRIPT( tmp_subscr_target_2, tmp_subscr_subscript_2 );
    if ( tmp_source_name_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1389;
        goto frame_exception_exit_1;
    }
    tmp_called_16 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_strip );
    Py_DECREF( tmp_source_name_13 );
    if ( tmp_called_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1389;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1389;
    tmp_assign_source_27 = CALL_FUNCTION_NO_ARGS( tmp_called_16 );
    Py_DECREF( tmp_called_16 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1389;
        goto frame_exception_exit_1;
    }
    assert( var_fval.object == NULL );
    var_fval.object = tmp_assign_source_27;

    tmp_compare_left_8 = var_fval.object;

    tmp_compare_right_8 = par_comments.object;

    if ( tmp_compare_right_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155754 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1390;
        goto frame_exception_exit_1;
    }

    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    if ( tmp_cmp_In_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1390;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_In_2 == 1)
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_delsubscr_target_1 = var_first_values.object;

    if ( tmp_delsubscr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172008 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1391;
        goto frame_exception_exit_1;
    }

    tmp_delsubscr_subscript_1 = const_int_0;
    tmp_result = DEL_SUBSCRIPT( tmp_delsubscr_target_1, tmp_delsubscr_subscript_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1391;
        goto frame_exception_exit_1;
    }
    branch_no_16:;
    branch_no_15:;
    tmp_compare_left_9 = par_usecols.object;

    if ( tmp_compare_left_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1394;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_9 = Py_None;
    tmp_isnot_2 = ( tmp_compare_left_9 != tmp_compare_right_9 );
    if (tmp_isnot_2)
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    // Tried block of try/except
    // Tried code
    tmp_assign_source_28 = NULL;
    // Tried code
    tmp_source_name_14 = par_usecols.object;

    if ( tmp_source_name_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1396;
        goto try_finally_handler_6;
    }

    tmp_called_17 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_split );
    if ( tmp_called_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1396;
        goto try_finally_handler_6;
    }
    tmp_call_arg_element_17 = const_str_chr_44;
    frame_function->f_lineno = 1396;
    tmp_iter_arg_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_17, tmp_call_arg_element_17 );
    Py_DECREF( tmp_called_17 );
    if ( tmp_iter_arg_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1396;
        goto try_finally_handler_6;
    }
    tmp_assign_source_29 = MAKE_ITERATOR( tmp_iter_arg_5 );
    Py_DECREF( tmp_iter_arg_5 );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1396;
        goto try_finally_handler_6;
    }
    assert( tmp_listcontr_1__listcontr_iter.object == NULL );
    tmp_listcontr_1__listcontr_iter.object = tmp_assign_source_29;

    tmp_assign_source_30 = PyList_New( 0 );
    assert( tmp_listcontr_1__listcontr_result.object == NULL );
    tmp_listcontr_1__listcontr_result.object = tmp_assign_source_30;

    loop_start_3:;
    tmp_next_source_2 = tmp_listcontr_1__listcontr_iter.object;

    tmp_assign_source_31 = ITERATOR_NEXT( tmp_next_source_2 );
    if (tmp_assign_source_31 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_3;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1396;
            goto try_finally_handler_6;
        }
    }

    if (tmp_listcontr_1__iter_value_0.object == NULL)
    {
        tmp_listcontr_1__iter_value_0.object = tmp_assign_source_31;
    }
    else
    {
        PyObject *old = tmp_listcontr_1__iter_value_0.object;
        tmp_listcontr_1__iter_value_0.object = tmp_assign_source_31;
        Py_DECREF( old );
    }
    tmp_assign_source_32 = tmp_listcontr_1__iter_value_0.object;

    if (var__.object == NULL)
    {
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_32 );
    }
    else
    {
        PyObject *old = var__.object;
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_32 );
        Py_DECREF( old );
    }
    tmp_append_to_1 = tmp_listcontr_1__listcontr_result.object;

    tmp_source_name_15 = var__.object;

    tmp_called_18 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_strip );
    if ( tmp_called_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1396;
        goto try_finally_handler_6;
    }
    frame_function->f_lineno = 1396;
    tmp_append_value_1 = CALL_FUNCTION_NO_ARGS( tmp_called_18 );
    Py_DECREF( tmp_called_18 );
    if ( tmp_append_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1396;
        goto try_finally_handler_6;
    }
    tmp_res = PyList_Append( tmp_append_to_1, tmp_append_value_1 );
    Py_DECREF( tmp_append_value_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1396;
        goto try_finally_handler_6;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1396;
        goto try_finally_handler_6;
    }
    goto loop_start_3;
    loop_end_3:;
    tmp_assign_source_28 = tmp_listcontr_1__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_1__iter_value_0.object );
    tmp_listcontr_1__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto try_finally_handler_5;
    }

    goto finally_end_5;
    finally_end_5:;
    if (par_usecols.object == NULL)
    {
        par_usecols.object = INCREASE_REFCOUNT( tmp_assign_source_28 );
    }
    else
    {
        PyObject *old = par_usecols.object;
        par_usecols.object = INCREASE_REFCOUNT( tmp_assign_source_28 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_4 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_1__listcontr_result.object );
    tmp_listcontr_1__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_1__listcontr_iter.object );
    tmp_listcontr_1__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_4;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto try_except_handler_3;
    }

    goto finally_end_6;
    finally_end_6:;
    goto try_except_end_3;
    try_except_handler_3:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_10 = PyThreadState_GET()->exc_type;
    tmp_compare_right_10 = PyExc_AttributeError;
    tmp_exc_match_exception_match_3 = EXCEPTION_MATCH_BOOL( tmp_compare_left_10, tmp_compare_right_10 );
    if ( tmp_exc_match_exception_match_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1397;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_3 == 1)
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    // Tried block of try/except
    tmp_list_arg_1 = par_usecols.object;

    if ( tmp_list_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1399;
        goto try_except_handler_4;
    }

    tmp_assign_source_33 = PySequence_List( tmp_list_arg_1 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1399;
        goto try_except_handler_4;
    }
    if (par_usecols.object == NULL)
    {
        par_usecols.object = tmp_assign_source_33;
    }
    else
    {
        PyObject *old = par_usecols.object;
        par_usecols.object = tmp_assign_source_33;
        Py_DECREF( old );
    }
    goto try_except_end_4;
    try_except_handler_4:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_11 = PyThreadState_GET()->exc_type;
    tmp_compare_right_11 = PyExc_TypeError;
    tmp_exc_match_exception_match_4 = EXCEPTION_MATCH_BOOL( tmp_compare_left_11, tmp_compare_right_11 );
    if ( tmp_exc_match_exception_match_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1400;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_4 == 1)
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_assign_source_34 = PyList_New( 1 );
    tmp_list_element_1 = par_usecols.object;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_34 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1401;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_assign_source_34, 0, tmp_list_element_1 );
    if (par_usecols.object == NULL)
    {
        par_usecols.object = tmp_assign_source_34;
    }
    else
    {
        PyObject *old = par_usecols.object;
        par_usecols.object = tmp_assign_source_34;
        Py_DECREF( old );
    }
    goto branch_end_19;
    branch_no_19:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_19:;
    try_except_end_4:;
    goto branch_end_18;
    branch_no_18:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_18:;
    try_except_end_3:;
    branch_no_17:;
    tmp_called_19 = LOOKUP_BUILTIN( const_str_plain_len );
    if ( tmp_called_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1402;
        goto frame_exception_exit_1;
    }
    tmp_call_pos_1 = NULL;
    // Tried code
    tmp_call_pos_1 = PyTuple_New( 1 );
    tmp_tuple_element_2 = NULL;
    // Tried code
    tmp_assign_source_36 = par_usecols.object;

    if ( tmp_assign_source_36 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1402;
        goto try_finally_handler_8;
    }

    assert( tmp_or_2__value_1.object == NULL );
    tmp_or_2__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_36 );

    tmp_cond_value_5 = tmp_or_2__value_1.object;

    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_1 );

        frame_function->f_lineno = 1402;
        goto try_finally_handler_8;
    }
    if (tmp_cond_truth_5 == 1)
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_tuple_element_2 = tmp_or_2__value_1.object;

    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_tuple_element_2 = NULL;
    // Tried code
    tmp_result = tmp_or_2__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_2__value_1.object );
        tmp_or_2__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_tuple_element_2 = var_first_values.object;

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172008 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1402;
        goto try_finally_handler_9;
    }

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_9:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto try_finally_handler_8;
    }

    goto finally_end_7;
    finally_end_7:;
    condexpr_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_8:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_7 != NULL )
    {
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;

        goto try_finally_handler_7;
    }

    goto finally_end_8;
    finally_end_8:;
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_2 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_7:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_5 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_2__value_1.object );
    tmp_or_2__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_5;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_8 != NULL )
    {
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;

        goto frame_exception_exit_1;
    }

    goto finally_end_9;
    finally_end_9:;
    frame_function->f_lineno = 1402;
    tmp_assign_source_35 = CALL_FUNCTION_WITH_POSARGS( tmp_called_19, tmp_call_pos_1 );
    Py_DECREF( tmp_call_pos_1 );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1402;
        goto frame_exception_exit_1;
    }
    assert( var_nbcols.object == NULL );
    var_nbcols.object = tmp_assign_source_35;

    tmp_compare_left_12 = par_names.object;

    if ( tmp_compare_left_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1405;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_12 = Py_True;
    tmp_is_3 = ( tmp_compare_left_12 == tmp_compare_right_12 );
    if (tmp_is_3)
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_called_20 = var_validate_names.object;

    if ( tmp_called_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172066 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1406;
        goto frame_exception_exit_1;
    }

    tmp_call_pos_2 = NULL;
    // Tried code
    tmp_call_pos_2 = PyTuple_New( 1 );
    tmp_tuple_element_3 = NULL;
    // Tried code
    tmp_iter_arg_6 = var_first_values.object;

    if ( tmp_iter_arg_6 == NULL )
    {
        Py_DECREF( tmp_call_pos_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172008 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1407;
        goto try_finally_handler_11;
    }

    tmp_assign_source_38 = MAKE_ITERATOR( tmp_iter_arg_6 );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_2 );

        frame_function->f_lineno = 1406;
        goto try_finally_handler_11;
    }
    assert( tmp_listcontr_2__listcontr_iter.object == NULL );
    tmp_listcontr_2__listcontr_iter.object = tmp_assign_source_38;

    tmp_assign_source_39 = PyList_New( 0 );
    assert( tmp_listcontr_2__listcontr_result.object == NULL );
    tmp_listcontr_2__listcontr_result.object = tmp_assign_source_39;

    loop_start_4:;
    tmp_next_source_3 = tmp_listcontr_2__listcontr_iter.object;

    tmp_assign_source_40 = ITERATOR_NEXT( tmp_next_source_3 );
    if (tmp_assign_source_40 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_4;

        }
        else
        {
            Py_DECREF( tmp_call_pos_2 );
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1406;
            goto try_finally_handler_11;
        }
    }

    if (tmp_listcontr_2__iter_value_0.object == NULL)
    {
        tmp_listcontr_2__iter_value_0.object = tmp_assign_source_40;
    }
    else
    {
        PyObject *old = tmp_listcontr_2__iter_value_0.object;
        tmp_listcontr_2__iter_value_0.object = tmp_assign_source_40;
        Py_DECREF( old );
    }
    tmp_assign_source_41 = tmp_listcontr_2__iter_value_0.object;

    if (var__.object == NULL)
    {
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_41 );
    }
    else
    {
        PyObject *old = var__.object;
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_41 );
        Py_DECREF( old );
    }
    tmp_append_to_2 = tmp_listcontr_2__listcontr_result.object;

    tmp_called_21 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__bytes_to_name );

    if (unlikely( tmp_called_21 == NULL ))
    {
        tmp_called_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__bytes_to_name );
    }

    if ( tmp_called_21 == NULL )
    {
        Py_DECREF( tmp_call_pos_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172126 ], 43, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1406;
        goto try_finally_handler_11;
    }

    tmp_source_name_16 = var__.object;

    tmp_called_22 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_strip );
    if ( tmp_called_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_2 );

        frame_function->f_lineno = 1406;
        goto try_finally_handler_11;
    }
    frame_function->f_lineno = 1406;
    tmp_call_arg_element_18 = CALL_FUNCTION_NO_ARGS( tmp_called_22 );
    Py_DECREF( tmp_called_22 );
    if ( tmp_call_arg_element_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_2 );

        frame_function->f_lineno = 1406;
        goto try_finally_handler_11;
    }
    frame_function->f_lineno = 1406;
    tmp_append_value_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_21, tmp_call_arg_element_18 );
    Py_DECREF( tmp_call_arg_element_18 );
    if ( tmp_append_value_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_2 );

        frame_function->f_lineno = 1406;
        goto try_finally_handler_11;
    }
    tmp_res = PyList_Append( tmp_append_to_2, tmp_append_value_2 );
    Py_DECREF( tmp_append_value_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_2 );

        frame_function->f_lineno = 1406;
        goto try_finally_handler_11;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_2 );

        frame_function->f_lineno = 1406;
        goto try_finally_handler_11;
    }
    goto loop_start_4;
    loop_end_4:;
    tmp_tuple_element_3 = tmp_listcontr_2__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_11:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_6 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_2__iter_value_0.object );
    tmp_listcontr_2__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_6;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_9 != NULL )
    {
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;

        goto try_finally_handler_10;
    }

    goto finally_end_10;
    finally_end_10:;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_call_pos_2, 0, tmp_tuple_element_3 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_10:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_7 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_2__listcontr_result.object );
    tmp_listcontr_2__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_2__listcontr_iter.object );
    tmp_listcontr_2__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_7;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_10 != NULL )
    {
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;

        goto frame_exception_exit_1;
    }

    goto finally_end_11;
    finally_end_11:;
    frame_function->f_lineno = 1406;
    tmp_assign_source_37 = CALL_FUNCTION_WITH_POSARGS( tmp_called_20, tmp_call_pos_2 );
    Py_DECREF( tmp_call_pos_2 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1406;
        goto frame_exception_exit_1;
    }
    if (par_names.object == NULL)
    {
        par_names.object = tmp_assign_source_37;
    }
    else
    {
        PyObject *old = par_names.object;
        par_names.object = tmp_assign_source_37;
        Py_DECREF( old );
    }
    tmp_called_23 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_23 == NULL ))
    {
        tmp_called_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_23 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1408;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_19 = const_str_empty;
    frame_function->f_lineno = 1408;
    tmp_assign_source_42 = CALL_FUNCTION_WITH_ARGS1( tmp_called_23, tmp_call_arg_element_19 );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1408;
        goto frame_exception_exit_1;
    }
    if (var_first_line.object == NULL)
    {
        var_first_line.object = tmp_assign_source_42;
    }
    else
    {
        PyObject *old = var_first_line.object;
        var_first_line.object = tmp_assign_source_42;
        Py_DECREF( old );
    }
    goto branch_end_20;
    branch_no_20:;
    tmp_called_24 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__is_string_like );

    if (unlikely( tmp_called_24 == NULL ))
    {
        tmp_called_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__is_string_like );
    }

    if ( tmp_called_24 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155296 ], 44, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1409;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_20 = par_names.object;

    if ( tmp_call_arg_element_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1409;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1409;
    tmp_cond_value_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_24, tmp_call_arg_element_20 );
    if ( tmp_cond_value_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1409;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        frame_function->f_lineno = 1409;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_6 );
    if (tmp_cond_truth_6 == 1)
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_called_25 = var_validate_names.object;

    if ( tmp_called_25 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172066 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1410;
        goto frame_exception_exit_1;
    }

    tmp_call_pos_3 = NULL;
    // Tried code
    tmp_call_pos_3 = PyTuple_New( 1 );
    tmp_tuple_element_4 = NULL;
    // Tried code
    tmp_source_name_17 = par_names.object;

    if ( tmp_source_name_17 == NULL )
    {
        Py_DECREF( tmp_call_pos_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1410;
        goto try_finally_handler_13;
    }

    tmp_called_26 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_split );
    if ( tmp_called_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_3 );

        frame_function->f_lineno = 1410;
        goto try_finally_handler_13;
    }
    tmp_call_arg_element_21 = const_str_chr_44;
    frame_function->f_lineno = 1410;
    tmp_iter_arg_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_26, tmp_call_arg_element_21 );
    Py_DECREF( tmp_called_26 );
    if ( tmp_iter_arg_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_3 );

        frame_function->f_lineno = 1410;
        goto try_finally_handler_13;
    }
    tmp_assign_source_44 = MAKE_ITERATOR( tmp_iter_arg_7 );
    Py_DECREF( tmp_iter_arg_7 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_3 );

        frame_function->f_lineno = 1410;
        goto try_finally_handler_13;
    }
    assert( tmp_listcontr_3__listcontr_iter.object == NULL );
    tmp_listcontr_3__listcontr_iter.object = tmp_assign_source_44;

    tmp_assign_source_45 = PyList_New( 0 );
    assert( tmp_listcontr_3__listcontr_result.object == NULL );
    tmp_listcontr_3__listcontr_result.object = tmp_assign_source_45;

    loop_start_5:;
    tmp_next_source_4 = tmp_listcontr_3__listcontr_iter.object;

    tmp_assign_source_46 = ITERATOR_NEXT( tmp_next_source_4 );
    if (tmp_assign_source_46 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_5;

        }
        else
        {
            Py_DECREF( tmp_call_pos_3 );
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1410;
            goto try_finally_handler_13;
        }
    }

    if (tmp_listcontr_3__iter_value_0.object == NULL)
    {
        tmp_listcontr_3__iter_value_0.object = tmp_assign_source_46;
    }
    else
    {
        PyObject *old = tmp_listcontr_3__iter_value_0.object;
        tmp_listcontr_3__iter_value_0.object = tmp_assign_source_46;
        Py_DECREF( old );
    }
    tmp_assign_source_47 = tmp_listcontr_3__iter_value_0.object;

    if (var__.object == NULL)
    {
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_47 );
    }
    else
    {
        PyObject *old = var__.object;
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_47 );
        Py_DECREF( old );
    }
    tmp_append_to_3 = tmp_listcontr_3__listcontr_result.object;

    tmp_source_name_18 = var__.object;

    tmp_called_27 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_strip );
    if ( tmp_called_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_3 );

        frame_function->f_lineno = 1410;
        goto try_finally_handler_13;
    }
    frame_function->f_lineno = 1410;
    tmp_append_value_3 = CALL_FUNCTION_NO_ARGS( tmp_called_27 );
    Py_DECREF( tmp_called_27 );
    if ( tmp_append_value_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_3 );

        frame_function->f_lineno = 1410;
        goto try_finally_handler_13;
    }
    tmp_res = PyList_Append( tmp_append_to_3, tmp_append_value_3 );
    Py_DECREF( tmp_append_value_3 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_3 );

        frame_function->f_lineno = 1410;
        goto try_finally_handler_13;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_3 );

        frame_function->f_lineno = 1410;
        goto try_finally_handler_13;
    }
    goto loop_start_5;
    loop_end_5:;
    tmp_tuple_element_4 = tmp_listcontr_3__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_13:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_8 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_3__iter_value_0.object );
    tmp_listcontr_3__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_8;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_11 != NULL )
    {
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;

        goto try_finally_handler_12;
    }

    goto finally_end_12;
    finally_end_12:;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_call_pos_3, 0, tmp_tuple_element_4 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_12:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_9 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_3__listcontr_result.object );
    tmp_listcontr_3__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_3__listcontr_iter.object );
    tmp_listcontr_3__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_9;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_12 != NULL )
    {
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;

        goto frame_exception_exit_1;
    }

    goto finally_end_13;
    finally_end_13:;
    frame_function->f_lineno = 1410;
    tmp_assign_source_43 = CALL_FUNCTION_WITH_POSARGS( tmp_called_25, tmp_call_pos_3 );
    Py_DECREF( tmp_call_pos_3 );
    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1410;
        goto frame_exception_exit_1;
    }
    if (par_names.object == NULL)
    {
        par_names.object = tmp_assign_source_43;
    }
    else
    {
        PyObject *old = par_names.object;
        par_names.object = tmp_assign_source_43;
        Py_DECREF( old );
    }
    goto branch_end_21;
    branch_no_21:;
    tmp_cond_value_7 = par_names.object;

    if ( tmp_cond_value_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1411;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1411;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_7 == 1)
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_called_28 = var_validate_names.object;

    if ( tmp_called_28 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172066 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1412;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_22 = par_names.object;

    if ( tmp_call_arg_element_22 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1412;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1412;
    tmp_assign_source_48 = CALL_FUNCTION_WITH_ARGS1( tmp_called_28, tmp_call_arg_element_22 );
    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1412;
        goto frame_exception_exit_1;
    }
    if (par_names.object == NULL)
    {
        par_names.object = tmp_assign_source_48;
    }
    else
    {
        PyObject *old = par_names.object;
        par_names.object = tmp_assign_source_48;
        Py_DECREF( old );
    }
    branch_no_22:;
    branch_end_21:;
    branch_end_20:;
    tmp_compare_left_13 = par_dtype.object;

    if ( tmp_compare_left_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1414;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_13 = Py_None;
    tmp_isnot_3 = ( tmp_compare_left_13 != tmp_compare_right_13 );
    if (tmp_isnot_3)
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_called_29 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_easy_dtype );

    if (unlikely( tmp_called_29 == NULL ))
    {
        tmp_called_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_easy_dtype );
    }

    if ( tmp_called_29 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172169 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1415;
        goto frame_exception_exit_1;
    }

    tmp_call_pos_4 = PyTuple_New( 1 );
    tmp_tuple_element_5 = par_dtype.object;

    if ( tmp_tuple_element_5 == NULL )
    {
        Py_DECREF( tmp_call_pos_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1415;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_call_pos_4, 0, tmp_tuple_element_5 );
    tmp_call_kw_3 = _PyDict_NewPresized( 2 );
    tmp_dict_value_8 = par_defaultfmt.object;

    if ( tmp_dict_value_8 == NULL )
    {
        Py_DECREF( tmp_call_pos_4 );
        Py_DECREF( tmp_call_kw_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156409 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1415;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_8 = const_str_plain_defaultfmt;
    PyDict_SetItem( tmp_call_kw_3, tmp_dict_key_8, tmp_dict_value_8 );
    tmp_dict_value_9 = par_names.object;

    if ( tmp_dict_value_9 == NULL )
    {
        Py_DECREF( tmp_call_pos_4 );
        Py_DECREF( tmp_call_kw_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1415;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_9 = const_str_plain_names;
    PyDict_SetItem( tmp_call_kw_3, tmp_dict_key_9, tmp_dict_value_9 );
    frame_function->f_lineno = 1415;
    tmp_assign_source_49 = CALL_FUNCTION( tmp_called_29, tmp_call_pos_4, tmp_call_kw_3 );
    Py_DECREF( tmp_call_pos_4 );
    Py_DECREF( tmp_call_kw_3 );
    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1415;
        goto frame_exception_exit_1;
    }
    if (par_dtype.object == NULL)
    {
        par_dtype.object = tmp_assign_source_49;
    }
    else
    {
        PyObject *old = par_dtype.object;
        par_dtype.object = tmp_assign_source_49;
        Py_DECREF( old );
    }
    branch_no_23:;
    tmp_compare_left_14 = par_names.object;

    if ( tmp_compare_left_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1417;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_14 = Py_None;
    tmp_isnot_4 = ( tmp_compare_left_14 != tmp_compare_right_14 );
    if (tmp_isnot_4)
    {
        goto branch_yes_24;
    }
    else
    {
        goto branch_no_24;
    }
    branch_yes_24:;
    tmp_list_arg_2 = par_names.object;

    if ( tmp_list_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1418;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_50 = PySequence_List( tmp_list_arg_2 );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1418;
        goto frame_exception_exit_1;
    }
    if (par_names.object == NULL)
    {
        par_names.object = tmp_assign_source_50;
    }
    else
    {
        PyObject *old = par_names.object;
        par_names.object = tmp_assign_source_50;
        Py_DECREF( old );
    }
    branch_no_24:;
    tmp_cond_value_8 = par_usecols.object;

    if ( tmp_cond_value_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1421;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1421;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_8 == 1)
    {
        goto branch_yes_25;
    }
    else
    {
        goto branch_no_25;
    }
    branch_yes_25:;
    tmp_called_30 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    if ( tmp_called_30 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1422;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_23 = par_usecols.object;

    if ( tmp_call_arg_element_23 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1422;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1422;
    tmp_iter_arg_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_30, tmp_call_arg_element_23 );
    if ( tmp_iter_arg_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1422;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_51 = MAKE_ITERATOR( tmp_iter_arg_8 );
    Py_DECREF( tmp_iter_arg_8 );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1422;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator.object == NULL );
    tmp_for_loop_2__for_iterator.object = tmp_assign_source_51;

    // Tried code
    loop_start_6:;
    tmp_next_source_5 = tmp_for_loop_2__for_iterator.object;

    tmp_assign_source_52 = ITERATOR_NEXT( tmp_next_source_5 );
    if (tmp_assign_source_52 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_6;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1422;
            goto try_finally_handler_14;
        }
    }

    if (tmp_for_loop_2__iter_value.object == NULL)
    {
        tmp_for_loop_2__iter_value.object = tmp_assign_source_52;
    }
    else
    {
        PyObject *old = tmp_for_loop_2__iter_value.object;
        tmp_for_loop_2__iter_value.object = tmp_assign_source_52;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_9 = tmp_for_loop_2__iter_value.object;

    tmp_assign_source_53 = MAKE_ITERATOR( tmp_iter_arg_9 );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1422;
        goto try_finally_handler_15;
    }
    if (tmp_tuple_unpack_1__source_iter.object == NULL)
    {
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_53;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter.object;
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_53;
        Py_DECREF( old );
    }
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_54 = UNPACK_PARAMETER_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_54 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1422;
        goto try_finally_handler_15;
    }
    if (tmp_tuple_unpack_1__element_1.object == NULL)
    {
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_54;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_1.object;
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_54;
        Py_DECREF( old );
    }
    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_55 = UNPACK_PARAMETER_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_55 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1422;
        goto try_finally_handler_15;
    }
    if (tmp_tuple_unpack_1__element_2.object == NULL)
    {
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_55;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_2.object;
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_55;
        Py_DECREF( old );
    }
    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_1 ); assert( PyIter_Check( tmp_iterator_name_1 ) );

    tmp_iterator_attempt_1 = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt_1 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_15;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_1 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_15;
    }
    tmp_assign_source_56 = tmp_tuple_unpack_1__element_1.object;

    if (var_i.storage->object == NULL)
    {
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_56 );
    }
    else
    {
        PyObject *old = var_i.storage->object;
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_56 );
        Py_DECREF( old );
    }
    tmp_assign_source_57 = tmp_tuple_unpack_1__element_2.object;

    if (var_current.object == NULL)
    {
        var_current.object = INCREASE_REFCOUNT( tmp_assign_source_57 );
    }
    else
    {
        PyObject *old = var_current.object;
        var_current.object = INCREASE_REFCOUNT( tmp_assign_source_57 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_15:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_10 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter.object );
    tmp_tuple_unpack_1__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1.object );
    tmp_tuple_unpack_1__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2.object );
    tmp_tuple_unpack_1__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_10;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_13 != NULL )
    {
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;

        goto try_finally_handler_14;
    }

    goto finally_end_14;
    finally_end_14:;
    tmp_called_31 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__is_string_like );

    if (unlikely( tmp_called_31 == NULL ))
    {
        tmp_called_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__is_string_like );
    }

    if ( tmp_called_31 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155296 ], 44, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1424;
        goto try_finally_handler_14;
    }

    tmp_call_arg_element_24 = var_current.object;

    if ( tmp_call_arg_element_24 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172208 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1424;
        goto try_finally_handler_14;
    }

    frame_function->f_lineno = 1424;
    tmp_cond_value_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_31, tmp_call_arg_element_24 );
    if ( tmp_cond_value_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1424;
        goto try_finally_handler_14;
    }
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_9 );

        frame_function->f_lineno = 1424;
        goto try_finally_handler_14;
    }
    Py_DECREF( tmp_cond_value_9 );
    if (tmp_cond_truth_9 == 1)
    {
        goto branch_yes_26;
    }
    else
    {
        goto branch_no_26;
    }
    branch_yes_26:;
    tmp_source_name_19 = par_names.object;

    if ( tmp_source_name_19 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1425;
        goto try_finally_handler_14;
    }

    tmp_called_32 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_index );
    if ( tmp_called_32 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1425;
        goto try_finally_handler_14;
    }
    tmp_call_arg_element_25 = var_current.object;

    if ( tmp_call_arg_element_25 == NULL )
    {
        Py_DECREF( tmp_called_32 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172208 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1425;
        goto try_finally_handler_14;
    }

    frame_function->f_lineno = 1425;
    tmp_ass_subvalue_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_32, tmp_call_arg_element_25 );
    Py_DECREF( tmp_called_32 );
    if ( tmp_ass_subvalue_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1425;
        goto try_finally_handler_14;
    }
    tmp_ass_subscribed_1 = par_usecols.object;

    if ( tmp_ass_subscribed_1 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1425;
        goto try_finally_handler_14;
    }

    tmp_ass_subscript_1 = var_i.storage->object;

    if ( tmp_ass_subscript_1 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1425;
        goto try_finally_handler_14;
    }

    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1425;
        goto try_finally_handler_14;
    }
    goto branch_end_26;
    branch_no_26:;
    tmp_compare_left_15 = var_current.object;

    if ( tmp_compare_left_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172208 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1426;
        goto try_finally_handler_14;
    }

    tmp_compare_right_15 = const_int_0;
    tmp_cmp_Lt_1 = RICH_COMPARE_BOOL_LT( tmp_compare_left_15, tmp_compare_right_15 );
    if ( tmp_cmp_Lt_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1426;
        goto try_finally_handler_14;
    }
    if (tmp_cmp_Lt_1 == 1)
    {
        goto branch_yes_27;
    }
    else
    {
        goto branch_no_27;
    }
    branch_yes_27:;
    tmp_binop_left_4 = var_current.object;

    if ( tmp_binop_left_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172208 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1427;
        goto try_finally_handler_14;
    }

    tmp_len_arg_1 = var_first_values.object;

    if ( tmp_len_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172008 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1427;
        goto try_finally_handler_14;
    }

    tmp_binop_right_4 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_binop_right_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1427;
        goto try_finally_handler_14;
    }
    tmp_ass_subvalue_2 = BINARY_OPERATION_ADD( tmp_binop_left_4, tmp_binop_right_4 );
    Py_DECREF( tmp_binop_right_4 );
    if ( tmp_ass_subvalue_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1427;
        goto try_finally_handler_14;
    }
    tmp_ass_subscribed_2 = par_usecols.object;

    if ( tmp_ass_subscribed_2 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1427;
        goto try_finally_handler_14;
    }

    tmp_ass_subscript_2 = var_i.storage->object;

    if ( tmp_ass_subscript_2 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1427;
        goto try_finally_handler_14;
    }

    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
    Py_DECREF( tmp_ass_subvalue_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1427;
        goto try_finally_handler_14;
    }
    branch_no_27:;
    branch_end_26:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1422;
        goto try_finally_handler_14;
    }
    goto loop_start_6;
    loop_end_6:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_14:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_11 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_2__iter_value.object );
    tmp_for_loop_2__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator.object );
    tmp_for_loop_2__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_11;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_14 != NULL )
    {
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;

        goto frame_exception_exit_1;
    }

    goto finally_end_15;
    finally_end_15:;
    // Tried code
    tmp_cond_value_10 = NULL;
    // Tried code
    tmp_compexpr_left_1 = par_dtype.object;

    if ( tmp_compexpr_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1429;
        goto try_finally_handler_17;
    }

    tmp_compexpr_right_1 = Py_None;
    tmp_assign_source_58 = BOOL_FROM( tmp_compexpr_left_1 != tmp_compexpr_right_1 );
    assert( tmp_and_1__value_1.object == NULL );
    tmp_and_1__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_58 );

    tmp_cond_value_11 = tmp_and_1__value_1.object;

    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1429;
        goto try_finally_handler_17;
    }
    if (tmp_cond_truth_11 == 1)
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_cond_value_10 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1.object );
        tmp_and_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_len_arg_2 = par_dtype.object;

    if ( tmp_len_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1429;
        goto try_finally_handler_18;
    }

    tmp_compexpr_left_2 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1429;
        goto try_finally_handler_18;
    }
    tmp_compexpr_right_2 = var_nbcols.object;

    if ( tmp_compexpr_right_2 == NULL )
    {
        Py_DECREF( tmp_compexpr_left_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172261 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1429;
        goto try_finally_handler_18;
    }

    tmp_cond_value_10 = RICH_COMPARE_GT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_cond_value_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1429;
        goto try_finally_handler_18;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_18:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_15 != NULL )
    {
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;

        goto try_finally_handler_17;
    }

    goto finally_end_16;
    finally_end_16:;
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_cond_value_10 = tmp_and_1__value_1.object;

    Py_INCREF( tmp_cond_value_10 );
    condexpr_end_3:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_17:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_16 != NULL )
    {
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;

        goto try_finally_handler_16;
    }

    goto finally_end_17;
    finally_end_17:;
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_10 );

        frame_function->f_lineno = 1429;
        goto try_finally_handler_16;
    }
    Py_DECREF( tmp_cond_value_10 );
    if (tmp_cond_truth_10 == 1)
    {
        goto branch_yes_28;
    }
    else
    {
        goto branch_no_28;
    }
    branch_yes_28:;
    tmp_source_name_20 = par_dtype.object;

    if ( tmp_source_name_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1430;
        goto try_finally_handler_16;
    }

    tmp_assign_source_59 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_descr );
    if ( tmp_assign_source_59 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1430;
        goto try_finally_handler_16;
    }
    assert( var_descr.object == NULL );
    var_descr.object = tmp_assign_source_59;

    tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_21 == NULL ))
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_21 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1431;
        goto try_finally_handler_16;
    }

    tmp_called_33 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_dtype );
    if ( tmp_called_33 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1431;
        goto try_finally_handler_16;
    }
    tmp_call_pos_5 = NULL;
    // Tried code
    tmp_call_pos_5 = PyTuple_New( 1 );
    tmp_tuple_element_6 = NULL;
    // Tried code
    tmp_iter_arg_10 = par_usecols.object;

    if ( tmp_iter_arg_10 == NULL )
    {
        Py_DECREF( tmp_called_33 );
        Py_DECREF( tmp_call_pos_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1431;
        goto try_finally_handler_20;
    }

    tmp_assign_source_61 = MAKE_ITERATOR( tmp_iter_arg_10 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_33 );
        Py_DECREF( tmp_call_pos_5 );

        frame_function->f_lineno = 1431;
        goto try_finally_handler_20;
    }
    assert( tmp_listcontr_4__listcontr_iter.object == NULL );
    tmp_listcontr_4__listcontr_iter.object = tmp_assign_source_61;

    tmp_assign_source_62 = PyList_New( 0 );
    assert( tmp_listcontr_4__listcontr_result.object == NULL );
    tmp_listcontr_4__listcontr_result.object = tmp_assign_source_62;

    loop_start_7:;
    tmp_next_source_6 = tmp_listcontr_4__listcontr_iter.object;

    tmp_assign_source_63 = ITERATOR_NEXT( tmp_next_source_6 );
    if (tmp_assign_source_63 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_7;

        }
        else
        {
            Py_DECREF( tmp_called_33 );
            Py_DECREF( tmp_call_pos_5 );
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1431;
            goto try_finally_handler_20;
        }
    }

    if (tmp_listcontr_4__iter_value_0.object == NULL)
    {
        tmp_listcontr_4__iter_value_0.object = tmp_assign_source_63;
    }
    else
    {
        PyObject *old = tmp_listcontr_4__iter_value_0.object;
        tmp_listcontr_4__iter_value_0.object = tmp_assign_source_63;
        Py_DECREF( old );
    }
    tmp_assign_source_64 = tmp_listcontr_4__iter_value_0.object;

    if (var__.object == NULL)
    {
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_64 );
    }
    else
    {
        PyObject *old = var__.object;
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_64 );
        Py_DECREF( old );
    }
    tmp_append_to_4 = tmp_listcontr_4__listcontr_result.object;

    tmp_subscr_target_3 = var_descr.object;

    if ( tmp_subscr_target_3 == NULL )
    {
        Py_DECREF( tmp_called_33 );
        Py_DECREF( tmp_call_pos_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 68090 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1431;
        goto try_finally_handler_20;
    }

    tmp_subscr_subscript_3 = var__.object;

    tmp_append_value_4 = LOOKUP_SUBSCRIPT( tmp_subscr_target_3, tmp_subscr_subscript_3 );
    if ( tmp_append_value_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_33 );
        Py_DECREF( tmp_call_pos_5 );

        frame_function->f_lineno = 1431;
        goto try_finally_handler_20;
    }
    tmp_res = PyList_Append( tmp_append_to_4, tmp_append_value_4 );
    Py_DECREF( tmp_append_value_4 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_33 );
        Py_DECREF( tmp_call_pos_5 );

        frame_function->f_lineno = 1431;
        goto try_finally_handler_20;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_33 );
        Py_DECREF( tmp_call_pos_5 );

        frame_function->f_lineno = 1431;
        goto try_finally_handler_20;
    }
    goto loop_start_7;
    loop_end_7:;
    tmp_tuple_element_6 = tmp_listcontr_4__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_20:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_12 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_4__iter_value_0.object );
    tmp_listcontr_4__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_12;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_17 != NULL )
    {
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;

        goto try_finally_handler_19;
    }

    goto finally_end_18;
    finally_end_18:;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_call_pos_5, 0, tmp_tuple_element_6 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_19:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_13 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_4__listcontr_result.object );
    tmp_listcontr_4__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_4__listcontr_iter.object );
    tmp_listcontr_4__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_13;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_18 != NULL )
    {
        exception_type = exception_keeper_type_18;
        exception_value = exception_keeper_value_18;
        exception_tb = exception_keeper_tb_18;

        goto try_finally_handler_16;
    }

    goto finally_end_19;
    finally_end_19:;
    frame_function->f_lineno = 1431;
    tmp_assign_source_60 = CALL_FUNCTION_WITH_POSARGS( tmp_called_33, tmp_call_pos_5 );
    Py_DECREF( tmp_called_33 );
    Py_DECREF( tmp_call_pos_5 );
    if ( tmp_assign_source_60 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1431;
        goto try_finally_handler_16;
    }
    if (par_dtype.object == NULL)
    {
        par_dtype.object = tmp_assign_source_60;
    }
    else
    {
        PyObject *old = par_dtype.object;
        par_dtype.object = tmp_assign_source_60;
        Py_DECREF( old );
    }
    tmp_source_name_22 = par_dtype.object;

    tmp_list_arg_3 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_names );
    if ( tmp_list_arg_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1432;
        goto try_finally_handler_16;
    }
    tmp_assign_source_65 = PySequence_List( tmp_list_arg_3 );
    Py_DECREF( tmp_list_arg_3 );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1432;
        goto try_finally_handler_16;
    }
    if (par_names.object == NULL)
    {
        par_names.object = tmp_assign_source_65;
    }
    else
    {
        PyObject *old = par_names.object;
        par_names.object = tmp_assign_source_65;
        Py_DECREF( old );
    }
    goto branch_end_28;
    branch_no_28:;
    // Tried code
    tmp_cond_value_12 = NULL;
    // Tried code
    tmp_compexpr_left_3 = par_names.object;

    if ( tmp_compexpr_left_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1434;
        goto try_finally_handler_22;
    }

    tmp_compexpr_right_3 = Py_None;
    tmp_assign_source_66 = BOOL_FROM( tmp_compexpr_left_3 != tmp_compexpr_right_3 );
    assert( tmp_and_2__value_1.object == NULL );
    tmp_and_2__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_66 );

    tmp_cond_value_13 = tmp_and_2__value_1.object;

    tmp_cond_truth_13 = CHECK_IF_TRUE( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1434;
        goto try_finally_handler_22;
    }
    if (tmp_cond_truth_13 == 1)
    {
        goto condexpr_true_4;
    }
    else
    {
        goto condexpr_false_4;
    }
    condexpr_true_4:;
    tmp_cond_value_12 = NULL;
    // Tried code
    tmp_result = tmp_and_2__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_2__value_1.object );
        tmp_and_2__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_len_arg_3 = par_names.object;

    if ( tmp_len_arg_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1434;
        goto try_finally_handler_23;
    }

    tmp_compexpr_left_4 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1434;
        goto try_finally_handler_23;
    }
    tmp_compexpr_right_4 = var_nbcols.object;

    if ( tmp_compexpr_right_4 == NULL )
    {
        Py_DECREF( tmp_compexpr_left_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172261 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1434;
        goto try_finally_handler_23;
    }

    tmp_cond_value_12 = RICH_COMPARE_GT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    if ( tmp_cond_value_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1434;
        goto try_finally_handler_23;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_23:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_19 != NULL )
    {
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;

        goto try_finally_handler_22;
    }

    goto finally_end_20;
    finally_end_20:;
    goto condexpr_end_4;
    condexpr_false_4:;
    tmp_cond_value_12 = tmp_and_2__value_1.object;

    Py_INCREF( tmp_cond_value_12 );
    condexpr_end_4:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_22:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_20 != NULL )
    {
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;

        goto try_finally_handler_21;
    }

    goto finally_end_21;
    finally_end_21:;
    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_12 );

        frame_function->f_lineno = 1434;
        goto try_finally_handler_21;
    }
    Py_DECREF( tmp_cond_value_12 );
    if (tmp_cond_truth_12 == 1)
    {
        goto branch_yes_29;
    }
    else
    {
        goto branch_no_29;
    }
    branch_yes_29:;
    // Tried code
    tmp_assign_source_67 = NULL;
    // Tried code
    tmp_iter_arg_11 = par_usecols.object;

    if ( tmp_iter_arg_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1435;
        goto try_finally_handler_25;
    }

    tmp_assign_source_68 = MAKE_ITERATOR( tmp_iter_arg_11 );
    if ( tmp_assign_source_68 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1435;
        goto try_finally_handler_25;
    }
    assert( tmp_listcontr_5__listcontr_iter.object == NULL );
    tmp_listcontr_5__listcontr_iter.object = tmp_assign_source_68;

    tmp_assign_source_69 = PyList_New( 0 );
    assert( tmp_listcontr_5__listcontr_result.object == NULL );
    tmp_listcontr_5__listcontr_result.object = tmp_assign_source_69;

    loop_start_8:;
    tmp_next_source_7 = tmp_listcontr_5__listcontr_iter.object;

    tmp_assign_source_70 = ITERATOR_NEXT( tmp_next_source_7 );
    if (tmp_assign_source_70 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_8;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1435;
            goto try_finally_handler_25;
        }
    }

    if (tmp_listcontr_5__iter_value_0.object == NULL)
    {
        tmp_listcontr_5__iter_value_0.object = tmp_assign_source_70;
    }
    else
    {
        PyObject *old = tmp_listcontr_5__iter_value_0.object;
        tmp_listcontr_5__iter_value_0.object = tmp_assign_source_70;
        Py_DECREF( old );
    }
    tmp_assign_source_71 = tmp_listcontr_5__iter_value_0.object;

    if (var__.object == NULL)
    {
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_71 );
    }
    else
    {
        PyObject *old = var__.object;
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_71 );
        Py_DECREF( old );
    }
    tmp_append_to_5 = tmp_listcontr_5__listcontr_result.object;

    tmp_subscr_target_4 = par_names.object;

    if ( tmp_subscr_target_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1435;
        goto try_finally_handler_25;
    }

    tmp_subscr_subscript_4 = var__.object;

    tmp_append_value_5 = LOOKUP_SUBSCRIPT( tmp_subscr_target_4, tmp_subscr_subscript_4 );
    if ( tmp_append_value_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1435;
        goto try_finally_handler_25;
    }
    tmp_res = PyList_Append( tmp_append_to_5, tmp_append_value_5 );
    Py_DECREF( tmp_append_value_5 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1435;
        goto try_finally_handler_25;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1435;
        goto try_finally_handler_25;
    }
    goto loop_start_8;
    loop_end_8:;
    tmp_assign_source_67 = tmp_listcontr_5__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_25:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_14 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_5__iter_value_0.object );
    tmp_listcontr_5__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_14;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_21 != NULL )
    {
        exception_type = exception_keeper_type_21;
        exception_value = exception_keeper_value_21;
        exception_tb = exception_keeper_tb_21;

        goto try_finally_handler_24;
    }

    goto finally_end_22;
    finally_end_22:;
    if (par_names.object == NULL)
    {
        par_names.object = INCREASE_REFCOUNT( tmp_assign_source_67 );
    }
    else
    {
        PyObject *old = par_names.object;
        par_names.object = INCREASE_REFCOUNT( tmp_assign_source_67 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_24:;
    exception_keeper_type_22 = exception_type;
    exception_keeper_value_22 = exception_value;
    exception_keeper_tb_22 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_15 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_5__listcontr_result.object );
    tmp_listcontr_5__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_5__listcontr_iter.object );
    tmp_listcontr_5__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_15;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_22 != NULL )
    {
        exception_type = exception_keeper_type_22;
        exception_value = exception_keeper_value_22;
        exception_tb = exception_keeper_tb_22;

        goto try_finally_handler_21;
    }

    goto finally_end_23;
    finally_end_23:;
    branch_no_29:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_21:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_16 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_2__value_1.object );
    tmp_and_2__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_16;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_23 != NULL )
    {
        exception_type = exception_keeper_type_23;
        exception_value = exception_keeper_value_23;
        exception_tb = exception_keeper_tb_23;

        goto try_finally_handler_16;
    }

    goto finally_end_24;
    finally_end_24:;
    branch_end_28:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_16:;
    exception_keeper_type_24 = exception_type;
    exception_keeper_value_24 = exception_value;
    exception_keeper_tb_24 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_17 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_1__value_1.object );
    tmp_and_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_17;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_24 != NULL )
    {
        exception_type = exception_keeper_type_24;
        exception_value = exception_keeper_value_24;
        exception_tb = exception_keeper_tb_24;

        goto frame_exception_exit_1;
    }

    goto finally_end_25;
    finally_end_25:;
    goto branch_end_25;
    branch_no_25:;
    // Tried code
    tmp_cond_value_14 = NULL;
    // Tried code
    tmp_compexpr_left_5 = par_names.object;

    if ( tmp_compexpr_left_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1436;
        goto try_finally_handler_27;
    }

    tmp_compexpr_right_5 = Py_None;
    tmp_assign_source_72 = BOOL_FROM( tmp_compexpr_left_5 != tmp_compexpr_right_5 );
    assert( tmp_and_3__value_1.object == NULL );
    tmp_and_3__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_72 );

    tmp_cond_value_15 = tmp_and_3__value_1.object;

    tmp_cond_truth_15 = CHECK_IF_TRUE( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1436;
        goto try_finally_handler_27;
    }
    if (tmp_cond_truth_15 == 1)
    {
        goto condexpr_true_5;
    }
    else
    {
        goto condexpr_false_5;
    }
    condexpr_true_5:;
    tmp_cond_value_14 = NULL;
    // Tried code
    tmp_result = tmp_and_3__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_3__value_1.object );
        tmp_and_3__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_6 = par_dtype.object;

    if ( tmp_compexpr_left_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1436;
        goto try_finally_handler_28;
    }

    tmp_compexpr_right_6 = Py_None;
    tmp_cond_value_14 = BOOL_FROM( tmp_compexpr_left_6 != tmp_compexpr_right_6 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_28:;
    exception_keeper_type_25 = exception_type;
    exception_keeper_value_25 = exception_value;
    exception_keeper_tb_25 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_25 != NULL )
    {
        exception_type = exception_keeper_type_25;
        exception_value = exception_keeper_value_25;
        exception_tb = exception_keeper_tb_25;

        goto try_finally_handler_27;
    }

    goto finally_end_26;
    finally_end_26:;
    goto condexpr_end_5;
    condexpr_false_5:;
    tmp_cond_value_14 = tmp_and_3__value_1.object;

    condexpr_end_5:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_27:;
    exception_keeper_type_26 = exception_type;
    exception_keeper_value_26 = exception_value;
    exception_keeper_tb_26 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_26 != NULL )
    {
        exception_type = exception_keeper_type_26;
        exception_value = exception_keeper_value_26;
        exception_tb = exception_keeper_tb_26;

        goto try_finally_handler_26;
    }

    goto finally_end_27;
    finally_end_27:;
    tmp_cond_truth_14 = CHECK_IF_TRUE( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1436;
        goto try_finally_handler_26;
    }
    if (tmp_cond_truth_14 == 1)
    {
        goto branch_yes_30;
    }
    else
    {
        goto branch_no_30;
    }
    branch_yes_30:;
    tmp_source_name_23 = par_dtype.object;

    if ( tmp_source_name_23 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1437;
        goto try_finally_handler_26;
    }

    tmp_list_arg_4 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_names );
    if ( tmp_list_arg_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1437;
        goto try_finally_handler_26;
    }
    tmp_assign_source_73 = PySequence_List( tmp_list_arg_4 );
    Py_DECREF( tmp_list_arg_4 );
    if ( tmp_assign_source_73 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1437;
        goto try_finally_handler_26;
    }
    if (par_names.object == NULL)
    {
        par_names.object = tmp_assign_source_73;
    }
    else
    {
        PyObject *old = par_names.object;
        par_names.object = tmp_assign_source_73;
        Py_DECREF( old );
    }
    branch_no_30:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_26:;
    exception_keeper_type_27 = exception_type;
    exception_keeper_value_27 = exception_value;
    exception_keeper_tb_27 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_18 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_3__value_1.object );
    tmp_and_3__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_18;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_27 != NULL )
    {
        exception_type = exception_keeper_type_27;
        exception_value = exception_keeper_value_27;
        exception_tb = exception_keeper_tb_27;

        goto frame_exception_exit_1;
    }

    goto finally_end_28;
    finally_end_28:;
    branch_end_25:;
    // Tried code
    tmp_assign_source_74 = NULL;
    // Tried code
    tmp_assign_source_75 = par_missing_values.object;

    if ( tmp_assign_source_75 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156787 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1442;
        goto try_finally_handler_30;
    }

    assert( tmp_or_3__value_1.object == NULL );
    tmp_or_3__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_75 );

    tmp_cond_value_16 = tmp_or_3__value_1.object;

    tmp_cond_truth_16 = CHECK_IF_TRUE( tmp_cond_value_16 );
    if ( tmp_cond_truth_16 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1442;
        goto try_finally_handler_30;
    }
    if (tmp_cond_truth_16 == 1)
    {
        goto condexpr_true_6;
    }
    else
    {
        goto condexpr_false_6;
    }
    condexpr_true_6:;
    tmp_assign_source_74 = tmp_or_3__value_1.object;

    goto condexpr_end_6;
    condexpr_false_6:;
    tmp_assign_source_74 = NULL;
    // Tried code
    tmp_result = tmp_or_3__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_3__value_1.object );
        tmp_or_3__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_assign_source_74 = const_tuple_empty;
    // Re-reraise as necessary after finally was executed.
    goto finally_end_29;
    finally_end_29:;
    condexpr_end_6:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_30:;
    exception_keeper_type_28 = exception_type;
    exception_keeper_value_28 = exception_value;
    exception_keeper_tb_28 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_28 != NULL )
    {
        exception_type = exception_keeper_type_28;
        exception_value = exception_keeper_value_28;
        exception_tb = exception_keeper_tb_28;

        goto try_finally_handler_29;
    }

    goto finally_end_30;
    finally_end_30:;
    assert( var_user_missing_values.object == NULL );
    var_user_missing_values.object = INCREASE_REFCOUNT( tmp_assign_source_74 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_29:;
    exception_keeper_type_29 = exception_type;
    exception_keeper_value_29 = exception_value;
    exception_keeper_tb_29 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_19 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_3__value_1.object );
    tmp_or_3__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_19;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_29 != NULL )
    {
        exception_type = exception_keeper_type_29;
        exception_value = exception_keeper_value_29;
        exception_tb = exception_keeper_tb_29;

        goto frame_exception_exit_1;
    }

    goto finally_end_31;
    finally_end_31:;
    // Tried code
    tmp_assign_source_76 = NULL;
    // Tried code
    tmp_range_arg_2 = var_nbcols.object;

    if ( tmp_range_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172261 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1445;
        goto try_finally_handler_33;
    }

    tmp_iter_arg_12 = BUILTIN_RANGE( tmp_range_arg_2 );
    if ( tmp_iter_arg_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1445;
        goto try_finally_handler_33;
    }
    tmp_assign_source_77 = MAKE_ITERATOR( tmp_iter_arg_12 );
    Py_DECREF( tmp_iter_arg_12 );
    if ( tmp_assign_source_77 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1445;
        goto try_finally_handler_33;
    }
    assert( tmp_listcontr_6__listcontr_iter.object == NULL );
    tmp_listcontr_6__listcontr_iter.object = tmp_assign_source_77;

    tmp_assign_source_78 = PyList_New( 0 );
    assert( tmp_listcontr_6__listcontr_result.object == NULL );
    tmp_listcontr_6__listcontr_result.object = tmp_assign_source_78;

    loop_start_9:;
    tmp_next_source_8 = tmp_listcontr_6__listcontr_iter.object;

    tmp_assign_source_79 = ITERATOR_NEXT( tmp_next_source_8 );
    if (tmp_assign_source_79 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_9;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1445;
            goto try_finally_handler_33;
        }
    }

    if (tmp_listcontr_6__iter_value_0.object == NULL)
    {
        tmp_listcontr_6__iter_value_0.object = tmp_assign_source_79;
    }
    else
    {
        PyObject *old = tmp_listcontr_6__iter_value_0.object;
        tmp_listcontr_6__iter_value_0.object = tmp_assign_source_79;
        Py_DECREF( old );
    }
    tmp_assign_source_80 = tmp_listcontr_6__iter_value_0.object;

    if (var__.object == NULL)
    {
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_80 );
    }
    else
    {
        PyObject *old = var__.object;
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_80 );
        Py_DECREF( old );
    }
    tmp_append_to_6 = tmp_listcontr_6__listcontr_result.object;

    tmp_list_arg_5 = PyList_New( 1 );
    tmp_called_34 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_34 == NULL ))
    {
        tmp_called_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_34 == NULL )
    {
        Py_DECREF( tmp_list_arg_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1445;
        goto try_finally_handler_33;
    }

    tmp_call_arg_element_26 = const_str_empty;
    frame_function->f_lineno = 1445;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_34, tmp_call_arg_element_26 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_list_arg_5 );

        frame_function->f_lineno = 1445;
        goto try_finally_handler_33;
    }
    PyList_SET_ITEM( tmp_list_arg_5, 0, tmp_list_element_2 );
    tmp_append_value_6 = PySequence_List( tmp_list_arg_5 );
    Py_DECREF( tmp_list_arg_5 );
    if ( tmp_append_value_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1445;
        goto try_finally_handler_33;
    }
    tmp_res = PyList_Append( tmp_append_to_6, tmp_append_value_6 );
    Py_DECREF( tmp_append_value_6 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1445;
        goto try_finally_handler_33;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1445;
        goto try_finally_handler_33;
    }
    goto loop_start_9;
    loop_end_9:;
    tmp_assign_source_76 = tmp_listcontr_6__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_33:;
    exception_keeper_type_30 = exception_type;
    exception_keeper_value_30 = exception_value;
    exception_keeper_tb_30 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_20 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_6__iter_value_0.object );
    tmp_listcontr_6__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_20;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_30 != NULL )
    {
        exception_type = exception_keeper_type_30;
        exception_value = exception_keeper_value_30;
        exception_tb = exception_keeper_tb_30;

        goto try_finally_handler_32;
    }

    goto finally_end_32;
    finally_end_32:;
    if (par_missing_values.object == NULL)
    {
        par_missing_values.object = INCREASE_REFCOUNT( tmp_assign_source_76 );
    }
    else
    {
        PyObject *old = par_missing_values.object;
        par_missing_values.object = INCREASE_REFCOUNT( tmp_assign_source_76 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_32:;
    exception_keeper_type_31 = exception_type;
    exception_keeper_value_31 = exception_value;
    exception_keeper_tb_31 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_21 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_6__listcontr_result.object );
    tmp_listcontr_6__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_6__listcontr_iter.object );
    tmp_listcontr_6__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_21;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_31 != NULL )
    {
        exception_type = exception_keeper_type_31;
        exception_value = exception_keeper_value_31;
        exception_tb = exception_keeper_tb_31;

        goto frame_exception_exit_1;
    }

    goto finally_end_33;
    finally_end_33:;
    tmp_isinstance_inst_6 = var_user_missing_values.object;

    if ( tmp_isinstance_inst_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172313 ], 65, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1448;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_6 = LOOKUP_BUILTIN( const_str_plain_dict );
    if ( tmp_isinstance_cls_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1448;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_6, tmp_isinstance_cls_6 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1448;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_31;
    }
    else
    {
        goto branch_no_31;
    }
    branch_yes_31:;
    tmp_source_name_24 = var_user_missing_values.object;

    if ( tmp_source_name_24 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172313 ], 65, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1450;
        goto frame_exception_exit_1;
    }

    tmp_called_35 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_items );
    if ( tmp_called_35 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1450;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1450;
    tmp_iter_arg_13 = CALL_FUNCTION_NO_ARGS( tmp_called_35 );
    Py_DECREF( tmp_called_35 );
    if ( tmp_iter_arg_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1450;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_81 = MAKE_ITERATOR( tmp_iter_arg_13 );
    Py_DECREF( tmp_iter_arg_13 );
    if ( tmp_assign_source_81 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1450;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_3__for_iterator.object == NULL );
    tmp_for_loop_3__for_iterator.object = tmp_assign_source_81;

    // Tried code
    loop_start_10:;
    tmp_next_source_9 = tmp_for_loop_3__for_iterator.object;

    tmp_assign_source_82 = ITERATOR_NEXT( tmp_next_source_9 );
    if (tmp_assign_source_82 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_10;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1450;
            goto try_finally_handler_34;
        }
    }

    if (tmp_for_loop_3__iter_value.object == NULL)
    {
        tmp_for_loop_3__iter_value.object = tmp_assign_source_82;
    }
    else
    {
        PyObject *old = tmp_for_loop_3__iter_value.object;
        tmp_for_loop_3__iter_value.object = tmp_assign_source_82;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_14 = tmp_for_loop_3__iter_value.object;

    tmp_assign_source_83 = MAKE_ITERATOR( tmp_iter_arg_14 );
    if ( tmp_assign_source_83 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1450;
        goto try_finally_handler_35;
    }
    if (tmp_tuple_unpack_2__source_iter.object == NULL)
    {
        tmp_tuple_unpack_2__source_iter.object = tmp_assign_source_83;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_2__source_iter.object;
        tmp_tuple_unpack_2__source_iter.object = tmp_assign_source_83;
        Py_DECREF( old );
    }
    tmp_unpack_3 = tmp_tuple_unpack_2__source_iter.object;

    tmp_assign_source_84 = UNPACK_PARAMETER_NEXT( tmp_unpack_3, 0 );
    if ( tmp_assign_source_84 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1450;
        goto try_finally_handler_35;
    }
    if (tmp_tuple_unpack_2__element_1.object == NULL)
    {
        tmp_tuple_unpack_2__element_1.object = tmp_assign_source_84;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_2__element_1.object;
        tmp_tuple_unpack_2__element_1.object = tmp_assign_source_84;
        Py_DECREF( old );
    }
    tmp_unpack_4 = tmp_tuple_unpack_2__source_iter.object;

    tmp_assign_source_85 = UNPACK_PARAMETER_NEXT( tmp_unpack_4, 1 );
    if ( tmp_assign_source_85 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1450;
        goto try_finally_handler_35;
    }
    if (tmp_tuple_unpack_2__element_2.object == NULL)
    {
        tmp_tuple_unpack_2__element_2.object = tmp_assign_source_85;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_2__element_2.object;
        tmp_tuple_unpack_2__element_2.object = tmp_assign_source_85;
        Py_DECREF( old );
    }
    tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_2 ); assert( PyIter_Check( tmp_iterator_name_2 ) );

    tmp_iterator_attempt_2 = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

    if (likely( tmp_iterator_attempt_2 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_35;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_2 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_35;
    }
    tmp_assign_source_86 = tmp_tuple_unpack_2__element_1.object;

    if (var_key.object == NULL)
    {
        var_key.object = INCREASE_REFCOUNT( tmp_assign_source_86 );
    }
    else
    {
        PyObject *old = var_key.object;
        var_key.object = INCREASE_REFCOUNT( tmp_assign_source_86 );
        Py_DECREF( old );
    }
    tmp_assign_source_87 = tmp_tuple_unpack_2__element_2.object;

    if (var_val.object == NULL)
    {
        var_val.object = INCREASE_REFCOUNT( tmp_assign_source_87 );
    }
    else
    {
        PyObject *old = var_val.object;
        var_val.object = INCREASE_REFCOUNT( tmp_assign_source_87 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_35:;
    exception_keeper_type_32 = exception_type;
    exception_keeper_value_32 = exception_value;
    exception_keeper_tb_32 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_22 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_2__source_iter.object );
    tmp_tuple_unpack_2__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_1.object );
    tmp_tuple_unpack_2__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2.object );
    tmp_tuple_unpack_2__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_22;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_32 != NULL )
    {
        exception_type = exception_keeper_type_32;
        exception_value = exception_keeper_value_32;
        exception_tb = exception_keeper_tb_32;

        goto try_finally_handler_34;
    }

    goto finally_end_34;
    finally_end_34:;
    tmp_called_36 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__is_string_like );

    if (unlikely( tmp_called_36 == NULL ))
    {
        tmp_called_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__is_string_like );
    }

    if ( tmp_called_36 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155296 ], 44, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1452;
        goto try_finally_handler_34;
    }

    tmp_call_arg_element_27 = var_key.object;

    if ( tmp_call_arg_element_27 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1452;
        goto try_finally_handler_34;
    }

    frame_function->f_lineno = 1452;
    tmp_cond_value_17 = CALL_FUNCTION_WITH_ARGS1( tmp_called_36, tmp_call_arg_element_27 );
    if ( tmp_cond_value_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1452;
        goto try_finally_handler_34;
    }
    tmp_cond_truth_17 = CHECK_IF_TRUE( tmp_cond_value_17 );
    if ( tmp_cond_truth_17 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_17 );

        frame_function->f_lineno = 1452;
        goto try_finally_handler_34;
    }
    Py_DECREF( tmp_cond_value_17 );
    if (tmp_cond_truth_17 == 1)
    {
        goto branch_yes_32;
    }
    else
    {
        goto branch_no_32;
    }
    branch_yes_32:;
    // Tried block of try/except
    tmp_source_name_25 = par_names.object;

    if ( tmp_source_name_25 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1455;
        goto try_except_handler_5;
    }

    tmp_called_37 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_index );
    if ( tmp_called_37 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1455;
        goto try_except_handler_5;
    }
    tmp_call_arg_element_28 = var_key.object;

    if ( tmp_call_arg_element_28 == NULL )
    {
        Py_DECREF( tmp_called_37 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1455;
        goto try_except_handler_5;
    }

    frame_function->f_lineno = 1455;
    tmp_assign_source_88 = CALL_FUNCTION_WITH_ARGS1( tmp_called_37, tmp_call_arg_element_28 );
    Py_DECREF( tmp_called_37 );
    if ( tmp_assign_source_88 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1455;
        goto try_except_handler_5;
    }
    if (var_key.object == NULL)
    {
        var_key.object = tmp_assign_source_88;
    }
    else
    {
        PyObject *old = var_key.object;
        var_key.object = tmp_assign_source_88;
        Py_DECREF( old );
    }
    goto try_except_end_5;
    try_except_handler_5:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_16 = PyThreadState_GET()->exc_type;
    tmp_compare_right_16 = PyExc_ValueError;
    tmp_exc_match_exception_match_5 = EXCEPTION_MATCH_BOOL( tmp_compare_left_16, tmp_compare_right_16 );
    if ( tmp_exc_match_exception_match_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1456;
        goto try_finally_handler_34;
    }
    if (tmp_exc_match_exception_match_5 == 1)
    {
        goto branch_yes_33;
    }
    else
    {
        goto branch_no_33;
    }
    branch_yes_33:;
    goto loop_start_10;
    goto branch_end_33;
    branch_no_33:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_34;
    branch_end_33:;
    try_except_end_5:;
    branch_no_32:;
    tmp_cond_value_18 = par_usecols.object;

    if ( tmp_cond_value_18 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1460;
        goto try_finally_handler_34;
    }

    tmp_cond_truth_18 = CHECK_IF_TRUE( tmp_cond_value_18 );
    if ( tmp_cond_truth_18 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1460;
        goto try_finally_handler_34;
    }
    if (tmp_cond_truth_18 == 1)
    {
        goto branch_yes_34;
    }
    else
    {
        goto branch_no_34;
    }
    branch_yes_34:;
    // Tried block of try/except
    tmp_source_name_26 = par_usecols.object;

    if ( tmp_source_name_26 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1462;
        goto try_except_handler_6;
    }

    tmp_called_38 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_index );
    if ( tmp_called_38 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1462;
        goto try_except_handler_6;
    }
    tmp_call_arg_element_29 = var_key.object;

    if ( tmp_call_arg_element_29 == NULL )
    {
        Py_DECREF( tmp_called_38 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1462;
        goto try_except_handler_6;
    }

    frame_function->f_lineno = 1462;
    tmp_assign_source_89 = CALL_FUNCTION_WITH_ARGS1( tmp_called_38, tmp_call_arg_element_29 );
    Py_DECREF( tmp_called_38 );
    if ( tmp_assign_source_89 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1462;
        goto try_except_handler_6;
    }
    if (var_key.object == NULL)
    {
        var_key.object = tmp_assign_source_89;
    }
    else
    {
        PyObject *old = var_key.object;
        var_key.object = tmp_assign_source_89;
        Py_DECREF( old );
    }
    goto try_except_end_6;
    try_except_handler_6:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_17 = PyThreadState_GET()->exc_type;
    tmp_compare_right_17 = PyExc_ValueError;
    tmp_exc_match_exception_match_6 = EXCEPTION_MATCH_BOOL( tmp_compare_left_17, tmp_compare_right_17 );
    if ( tmp_exc_match_exception_match_6 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1463;
        goto try_finally_handler_34;
    }
    if (tmp_exc_match_exception_match_6 == 1)
    {
        goto branch_no_35;
    }
    else
    {
        goto branch_yes_35;
    }
    branch_yes_35:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_34;
    branch_no_35:;
    try_except_end_6:;
    branch_no_34:;
    tmp_isinstance_inst_7 = var_val.object;

    if ( tmp_isinstance_inst_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28580 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1466;
        goto try_finally_handler_34;
    }

    tmp_isinstance_cls_7 = PyTuple_New( 2 );
    tmp_tuple_element_7 = LOOKUP_BUILTIN( const_str_plain_list );
    if ( tmp_tuple_element_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_cls_7 );

        frame_function->f_lineno = 1466;
        goto try_finally_handler_34;
    }
    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_7, 0, tmp_tuple_element_7 );
    tmp_tuple_element_7 = LOOKUP_BUILTIN( const_str_plain_tuple );
    if ( tmp_tuple_element_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_cls_7 );

        frame_function->f_lineno = 1466;
        goto try_finally_handler_34;
    }
    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_7, 1, tmp_tuple_element_7 );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_7, tmp_isinstance_cls_7 );
    Py_DECREF( tmp_isinstance_cls_7 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1466;
        goto try_finally_handler_34;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_36;
    }
    else
    {
        goto branch_no_36;
    }
    branch_yes_36:;
    // Tried code
    tmp_assign_source_90 = NULL;
    // Tried code
    tmp_iter_arg_15 = var_val.object;

    if ( tmp_iter_arg_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28580 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1467;
        goto try_finally_handler_37;
    }

    tmp_assign_source_91 = MAKE_ITERATOR( tmp_iter_arg_15 );
    if ( tmp_assign_source_91 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1467;
        goto try_finally_handler_37;
    }
    if (tmp_listcontr_7__listcontr_iter.object == NULL)
    {
        tmp_listcontr_7__listcontr_iter.object = tmp_assign_source_91;
    }
    else
    {
        PyObject *old = tmp_listcontr_7__listcontr_iter.object;
        tmp_listcontr_7__listcontr_iter.object = tmp_assign_source_91;
        Py_DECREF( old );
    }
    tmp_assign_source_92 = PyList_New( 0 );
    if (tmp_listcontr_7__listcontr_result.object == NULL)
    {
        tmp_listcontr_7__listcontr_result.object = tmp_assign_source_92;
    }
    else
    {
        PyObject *old = tmp_listcontr_7__listcontr_result.object;
        tmp_listcontr_7__listcontr_result.object = tmp_assign_source_92;
        Py_DECREF( old );
    }
    loop_start_11:;
    tmp_next_source_10 = tmp_listcontr_7__listcontr_iter.object;

    tmp_assign_source_93 = ITERATOR_NEXT( tmp_next_source_10 );
    if (tmp_assign_source_93 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_11;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1467;
            goto try_finally_handler_37;
        }
    }

    if (tmp_listcontr_7__iter_value_0.object == NULL)
    {
        tmp_listcontr_7__iter_value_0.object = tmp_assign_source_93;
    }
    else
    {
        PyObject *old = tmp_listcontr_7__iter_value_0.object;
        tmp_listcontr_7__iter_value_0.object = tmp_assign_source_93;
        Py_DECREF( old );
    }
    tmp_assign_source_94 = tmp_listcontr_7__iter_value_0.object;

    if (var__.object == NULL)
    {
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_94 );
    }
    else
    {
        PyObject *old = var__.object;
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_94 );
        Py_DECREF( old );
    }
    tmp_append_to_7 = tmp_listcontr_7__listcontr_result.object;

    tmp_str_arg_1 = var__.object;

    tmp_append_value_7 = PyObject_Str( tmp_str_arg_1 );
    if ( tmp_append_value_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1467;
        goto try_finally_handler_37;
    }
    tmp_res = PyList_Append( tmp_append_to_7, tmp_append_value_7 );
    Py_DECREF( tmp_append_value_7 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1467;
        goto try_finally_handler_37;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1467;
        goto try_finally_handler_37;
    }
    goto loop_start_11;
    loop_end_11:;
    tmp_assign_source_90 = tmp_listcontr_7__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_37:;
    exception_keeper_type_33 = exception_type;
    exception_keeper_value_33 = exception_value;
    exception_keeper_tb_33 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_23 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_7__iter_value_0.object );
    tmp_listcontr_7__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_23;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_33 != NULL )
    {
        exception_type = exception_keeper_type_33;
        exception_value = exception_keeper_value_33;
        exception_tb = exception_keeper_tb_33;

        goto try_finally_handler_36;
    }

    goto finally_end_35;
    finally_end_35:;
    if (var_val.object == NULL)
    {
        var_val.object = INCREASE_REFCOUNT( tmp_assign_source_90 );
    }
    else
    {
        PyObject *old = var_val.object;
        var_val.object = INCREASE_REFCOUNT( tmp_assign_source_90 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_36:;
    exception_keeper_type_34 = exception_type;
    exception_keeper_value_34 = exception_value;
    exception_keeper_tb_34 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_24 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_7__listcontr_result.object );
    tmp_listcontr_7__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_7__listcontr_iter.object );
    tmp_listcontr_7__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_24;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_34 != NULL )
    {
        exception_type = exception_keeper_type_34;
        exception_value = exception_keeper_value_34;
        exception_tb = exception_keeper_tb_34;

        goto try_finally_handler_34;
    }

    goto finally_end_36;
    finally_end_36:;
    goto branch_end_36;
    branch_no_36:;
    tmp_assign_source_95 = PyList_New( 1 );
    tmp_str_arg_2 = var_val.object;

    if ( tmp_str_arg_2 == NULL )
    {
        Py_DECREF( tmp_assign_source_95 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28580 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1469;
        goto try_finally_handler_34;
    }

    tmp_list_element_3 = PyObject_Str( tmp_str_arg_2 );
    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_95 );

        frame_function->f_lineno = 1469;
        goto try_finally_handler_34;
    }
    PyList_SET_ITEM( tmp_assign_source_95, 0, tmp_list_element_3 );
    if (var_val.object == NULL)
    {
        var_val.object = tmp_assign_source_95;
    }
    else
    {
        PyObject *old = var_val.object;
        var_val.object = tmp_assign_source_95;
        Py_DECREF( old );
    }
    branch_end_36:;
    tmp_compare_left_18 = var_key.object;

    if ( tmp_compare_left_18 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1471;
        goto try_finally_handler_34;
    }

    tmp_compare_right_18 = Py_None;
    tmp_is_4 = ( tmp_compare_left_18 == tmp_compare_right_18 );
    if (tmp_is_4)
    {
        goto branch_yes_37;
    }
    else
    {
        goto branch_no_37;
    }
    branch_yes_37:;
    tmp_iter_arg_16 = par_missing_values.object;

    if ( tmp_iter_arg_16 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156787 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1473;
        goto try_finally_handler_34;
    }

    tmp_assign_source_96 = MAKE_ITERATOR( tmp_iter_arg_16 );
    if ( tmp_assign_source_96 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1473;
        goto try_finally_handler_34;
    }
    if (tmp_for_loop_4__for_iterator.object == NULL)
    {
        tmp_for_loop_4__for_iterator.object = tmp_assign_source_96;
    }
    else
    {
        PyObject *old = tmp_for_loop_4__for_iterator.object;
        tmp_for_loop_4__for_iterator.object = tmp_assign_source_96;
        Py_DECREF( old );
    }
    // Tried code
    loop_start_12:;
    tmp_next_source_11 = tmp_for_loop_4__for_iterator.object;

    tmp_assign_source_97 = ITERATOR_NEXT( tmp_next_source_11 );
    if (tmp_assign_source_97 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_12;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1473;
            goto try_finally_handler_38;
        }
    }

    if (tmp_for_loop_4__iter_value.object == NULL)
    {
        tmp_for_loop_4__iter_value.object = tmp_assign_source_97;
    }
    else
    {
        PyObject *old = tmp_for_loop_4__iter_value.object;
        tmp_for_loop_4__iter_value.object = tmp_assign_source_97;
        Py_DECREF( old );
    }
    tmp_assign_source_98 = tmp_for_loop_4__iter_value.object;

    if (var_miss.object == NULL)
    {
        var_miss.object = INCREASE_REFCOUNT( tmp_assign_source_98 );
    }
    else
    {
        PyObject *old = var_miss.object;
        var_miss.object = INCREASE_REFCOUNT( tmp_assign_source_98 );
        Py_DECREF( old );
    }
    tmp_source_name_27 = var_miss.object;

    tmp_called_39 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_extend );
    if ( tmp_called_39 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1474;
        goto try_finally_handler_38;
    }
    tmp_call_arg_element_30 = var_val.object;

    if ( tmp_call_arg_element_30 == NULL )
    {
        Py_DECREF( tmp_called_39 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28580 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1474;
        goto try_finally_handler_38;
    }

    frame_function->f_lineno = 1474;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_39, tmp_call_arg_element_30 );
    Py_DECREF( tmp_called_39 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1474;
        goto try_finally_handler_38;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1473;
        goto try_finally_handler_38;
    }
    goto loop_start_12;
    loop_end_12:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_38:;
    exception_keeper_type_35 = exception_type;
    exception_keeper_value_35 = exception_value;
    exception_keeper_tb_35 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_25 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_4__iter_value.object );
    tmp_for_loop_4__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_4__for_iterator.object );
    tmp_for_loop_4__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_25;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_35 != NULL )
    {
        exception_type = exception_keeper_type_35;
        exception_value = exception_keeper_value_35;
        exception_tb = exception_keeper_tb_35;

        goto try_finally_handler_34;
    }

    goto finally_end_37;
    finally_end_37:;
    goto branch_end_37;
    branch_no_37:;
    tmp_subscr_target_5 = par_missing_values.object;

    if ( tmp_subscr_target_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156787 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1476;
        goto try_finally_handler_34;
    }

    tmp_subscr_subscript_5 = var_key.object;

    if ( tmp_subscr_subscript_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1476;
        goto try_finally_handler_34;
    }

    tmp_source_name_28 = LOOKUP_SUBSCRIPT( tmp_subscr_target_5, tmp_subscr_subscript_5 );
    if ( tmp_source_name_28 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1476;
        goto try_finally_handler_34;
    }
    tmp_called_40 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_extend );
    Py_DECREF( tmp_source_name_28 );
    if ( tmp_called_40 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1476;
        goto try_finally_handler_34;
    }
    tmp_call_arg_element_31 = var_val.object;

    if ( tmp_call_arg_element_31 == NULL )
    {
        Py_DECREF( tmp_called_40 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28580 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1476;
        goto try_finally_handler_34;
    }

    frame_function->f_lineno = 1476;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_40, tmp_call_arg_element_31 );
    Py_DECREF( tmp_called_40 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1476;
        goto try_finally_handler_34;
    }
    Py_DECREF( tmp_unused );
    branch_end_37:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1450;
        goto try_finally_handler_34;
    }
    goto loop_start_10;
    loop_end_10:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_34:;
    exception_keeper_type_36 = exception_type;
    exception_keeper_value_36 = exception_value;
    exception_keeper_tb_36 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_26 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_3__iter_value.object );
    tmp_for_loop_3__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_3__for_iterator.object );
    tmp_for_loop_3__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_26;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_36 != NULL )
    {
        exception_type = exception_keeper_type_36;
        exception_value = exception_keeper_value_36;
        exception_tb = exception_keeper_tb_36;

        goto frame_exception_exit_1;
    }

    goto finally_end_38;
    finally_end_38:;
    goto branch_end_31;
    branch_no_31:;
    tmp_isinstance_inst_8 = var_user_missing_values.object;

    if ( tmp_isinstance_inst_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172313 ], 65, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1478;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_8 = PyTuple_New( 2 );
    tmp_tuple_element_8 = LOOKUP_BUILTIN( const_str_plain_list );
    if ( tmp_tuple_element_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_cls_8 );

        frame_function->f_lineno = 1478;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_8, 0, tmp_tuple_element_8 );
    tmp_tuple_element_8 = LOOKUP_BUILTIN( const_str_plain_tuple );
    if ( tmp_tuple_element_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_cls_8 );

        frame_function->f_lineno = 1478;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_8, 1, tmp_tuple_element_8 );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_8, tmp_isinstance_cls_8 );
    Py_DECREF( tmp_isinstance_cls_8 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1478;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_38;
    }
    else
    {
        goto branch_no_38;
    }
    branch_yes_38:;
    tmp_called_41 = LOOKUP_BUILTIN( const_str_plain_zip );
    if ( tmp_called_41 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1479;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_32 = var_user_missing_values.object;

    if ( tmp_call_arg_element_32 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172313 ], 65, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1479;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_33 = par_missing_values.object;

    if ( tmp_call_arg_element_33 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156787 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1479;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1479;
    tmp_iter_arg_17 = CALL_FUNCTION_WITH_ARGS2( tmp_called_41, tmp_call_arg_element_32, tmp_call_arg_element_33 );
    if ( tmp_iter_arg_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1479;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_99 = MAKE_ITERATOR( tmp_iter_arg_17 );
    Py_DECREF( tmp_iter_arg_17 );
    if ( tmp_assign_source_99 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1479;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_5__for_iterator.object == NULL );
    tmp_for_loop_5__for_iterator.object = tmp_assign_source_99;

    // Tried code
    loop_start_13:;
    tmp_next_source_12 = tmp_for_loop_5__for_iterator.object;

    tmp_assign_source_100 = ITERATOR_NEXT( tmp_next_source_12 );
    if (tmp_assign_source_100 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_13;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1479;
            goto try_finally_handler_39;
        }
    }

    if (tmp_for_loop_5__iter_value.object == NULL)
    {
        tmp_for_loop_5__iter_value.object = tmp_assign_source_100;
    }
    else
    {
        PyObject *old = tmp_for_loop_5__iter_value.object;
        tmp_for_loop_5__iter_value.object = tmp_assign_source_100;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_18 = tmp_for_loop_5__iter_value.object;

    tmp_assign_source_101 = MAKE_ITERATOR( tmp_iter_arg_18 );
    if ( tmp_assign_source_101 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1479;
        goto try_finally_handler_40;
    }
    if (tmp_tuple_unpack_3__source_iter.object == NULL)
    {
        tmp_tuple_unpack_3__source_iter.object = tmp_assign_source_101;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_3__source_iter.object;
        tmp_tuple_unpack_3__source_iter.object = tmp_assign_source_101;
        Py_DECREF( old );
    }
    tmp_unpack_5 = tmp_tuple_unpack_3__source_iter.object;

    tmp_assign_source_102 = UNPACK_PARAMETER_NEXT( tmp_unpack_5, 0 );
    if ( tmp_assign_source_102 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1479;
        goto try_finally_handler_40;
    }
    if (tmp_tuple_unpack_3__element_1.object == NULL)
    {
        tmp_tuple_unpack_3__element_1.object = tmp_assign_source_102;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_3__element_1.object;
        tmp_tuple_unpack_3__element_1.object = tmp_assign_source_102;
        Py_DECREF( old );
    }
    tmp_unpack_6 = tmp_tuple_unpack_3__source_iter.object;

    tmp_assign_source_103 = UNPACK_PARAMETER_NEXT( tmp_unpack_6, 1 );
    if ( tmp_assign_source_103 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1479;
        goto try_finally_handler_40;
    }
    if (tmp_tuple_unpack_3__element_2.object == NULL)
    {
        tmp_tuple_unpack_3__element_2.object = tmp_assign_source_103;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_3__element_2.object;
        tmp_tuple_unpack_3__element_2.object = tmp_assign_source_103;
        Py_DECREF( old );
    }
    tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_3 ); assert( PyIter_Check( tmp_iterator_name_3 ) );

    tmp_iterator_attempt_3 = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

    if (likely( tmp_iterator_attempt_3 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_40;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_3 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_40;
    }
    tmp_assign_source_104 = tmp_tuple_unpack_3__element_1.object;

    if (var_value.object == NULL)
    {
        var_value.object = INCREASE_REFCOUNT( tmp_assign_source_104 );
    }
    else
    {
        PyObject *old = var_value.object;
        var_value.object = INCREASE_REFCOUNT( tmp_assign_source_104 );
        Py_DECREF( old );
    }
    tmp_assign_source_105 = tmp_tuple_unpack_3__element_2.object;

    if (var_entry.object == NULL)
    {
        var_entry.object = INCREASE_REFCOUNT( tmp_assign_source_105 );
    }
    else
    {
        PyObject *old = var_entry.object;
        var_entry.object = INCREASE_REFCOUNT( tmp_assign_source_105 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_40:;
    exception_keeper_type_37 = exception_type;
    exception_keeper_value_37 = exception_value;
    exception_keeper_tb_37 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_27 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_3__source_iter.object );
    tmp_tuple_unpack_3__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_1.object );
    tmp_tuple_unpack_3__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_2.object );
    tmp_tuple_unpack_3__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_27;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_37 != NULL )
    {
        exception_type = exception_keeper_type_37;
        exception_value = exception_keeper_value_37;
        exception_tb = exception_keeper_tb_37;

        goto try_finally_handler_39;
    }

    goto finally_end_39;
    finally_end_39:;
    tmp_str_arg_3 = var_value.object;

    if ( tmp_str_arg_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5634 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1480;
        goto try_finally_handler_39;
    }

    tmp_assign_source_106 = PyObject_Str( tmp_str_arg_3 );
    if ( tmp_assign_source_106 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1480;
        goto try_finally_handler_39;
    }
    if (var_value.object == NULL)
    {
        var_value.object = tmp_assign_source_106;
    }
    else
    {
        PyObject *old = var_value.object;
        var_value.object = tmp_assign_source_106;
        Py_DECREF( old );
    }
    tmp_compare_left_19 = var_value.object;

    tmp_compare_right_19 = var_entry.object;

    if ( tmp_compare_right_19 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172378 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1481;
        goto try_finally_handler_39;
    }

    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_19, tmp_compare_left_19 );
    if ( tmp_cmp_NotIn_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1481;
        goto try_finally_handler_39;
    }
    if (tmp_cmp_NotIn_1 == 0)
    {
        goto branch_yes_39;
    }
    else
    {
        goto branch_no_39;
    }
    branch_yes_39:;
    tmp_source_name_29 = var_entry.object;

    if ( tmp_source_name_29 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172378 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1482;
        goto try_finally_handler_39;
    }

    tmp_called_42 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_append );
    if ( tmp_called_42 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1482;
        goto try_finally_handler_39;
    }
    tmp_call_arg_element_34 = var_value.object;

    frame_function->f_lineno = 1482;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_42, tmp_call_arg_element_34 );
    Py_DECREF( tmp_called_42 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1482;
        goto try_finally_handler_39;
    }
    Py_DECREF( tmp_unused );
    branch_no_39:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1479;
        goto try_finally_handler_39;
    }
    goto loop_start_13;
    loop_end_13:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_39:;
    exception_keeper_type_38 = exception_type;
    exception_keeper_value_38 = exception_value;
    exception_keeper_tb_38 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_28 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_5__iter_value.object );
    tmp_for_loop_5__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_5__for_iterator.object );
    tmp_for_loop_5__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_28;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_38 != NULL )
    {
        exception_type = exception_keeper_type_38;
        exception_value = exception_keeper_value_38;
        exception_tb = exception_keeper_tb_38;

        goto frame_exception_exit_1;
    }

    goto finally_end_40;
    finally_end_40:;
    goto branch_end_38;
    branch_no_38:;
    tmp_isinstance_inst_9 = var_user_missing_values.object;

    if ( tmp_isinstance_inst_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172313 ], 65, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1484;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_9 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_bytes );

    if (unlikely( tmp_isinstance_cls_9 == NULL ))
    {
        tmp_isinstance_cls_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bytes );
    }

    if ( tmp_isinstance_cls_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52107 ], 34, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1484;
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_9, tmp_isinstance_cls_9 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1484;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_40;
    }
    else
    {
        goto branch_no_40;
    }
    branch_yes_40:;
    tmp_source_name_30 = var_user_missing_values.object;

    if ( tmp_source_name_30 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172313 ], 65, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1485;
        goto frame_exception_exit_1;
    }

    tmp_called_43 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_split );
    if ( tmp_called_43 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1485;
        goto frame_exception_exit_1;
    }
    tmp_called_44 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_44 == NULL ))
    {
        tmp_called_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_44 == NULL )
    {
        Py_DECREF( tmp_called_43 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1485;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_36 = const_str_chr_44;
    frame_function->f_lineno = 1485;
    tmp_call_arg_element_35 = CALL_FUNCTION_WITH_ARGS1( tmp_called_44, tmp_call_arg_element_36 );
    if ( tmp_call_arg_element_35 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_43 );

        frame_function->f_lineno = 1485;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1485;
    tmp_assign_source_107 = CALL_FUNCTION_WITH_ARGS1( tmp_called_43, tmp_call_arg_element_35 );
    Py_DECREF( tmp_called_43 );
    Py_DECREF( tmp_call_arg_element_35 );
    if ( tmp_assign_source_107 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1485;
        goto frame_exception_exit_1;
    }
    assert( var_user_value.object == NULL );
    var_user_value.object = tmp_assign_source_107;

    tmp_iter_arg_19 = par_missing_values.object;

    if ( tmp_iter_arg_19 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156787 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1486;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_108 = MAKE_ITERATOR( tmp_iter_arg_19 );
    if ( tmp_assign_source_108 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1486;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_6__for_iterator.object == NULL );
    tmp_for_loop_6__for_iterator.object = tmp_assign_source_108;

    // Tried code
    loop_start_14:;
    tmp_next_source_13 = tmp_for_loop_6__for_iterator.object;

    tmp_assign_source_109 = ITERATOR_NEXT( tmp_next_source_13 );
    if (tmp_assign_source_109 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_14;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1486;
            goto try_finally_handler_41;
        }
    }

    if (tmp_for_loop_6__iter_value.object == NULL)
    {
        tmp_for_loop_6__iter_value.object = tmp_assign_source_109;
    }
    else
    {
        PyObject *old = tmp_for_loop_6__iter_value.object;
        tmp_for_loop_6__iter_value.object = tmp_assign_source_109;
        Py_DECREF( old );
    }
    tmp_assign_source_110 = tmp_for_loop_6__iter_value.object;

    if (var_entry.object == NULL)
    {
        var_entry.object = INCREASE_REFCOUNT( tmp_assign_source_110 );
    }
    else
    {
        PyObject *old = var_entry.object;
        var_entry.object = INCREASE_REFCOUNT( tmp_assign_source_110 );
        Py_DECREF( old );
    }
    tmp_source_name_31 = var_entry.object;

    tmp_called_45 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_extend );
    if ( tmp_called_45 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1487;
        goto try_finally_handler_41;
    }
    tmp_call_arg_element_37 = var_user_value.object;

    if ( tmp_call_arg_element_37 == NULL )
    {
        Py_DECREF( tmp_called_45 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172429 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1487;
        goto try_finally_handler_41;
    }

    frame_function->f_lineno = 1487;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_45, tmp_call_arg_element_37 );
    Py_DECREF( tmp_called_45 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1487;
        goto try_finally_handler_41;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1486;
        goto try_finally_handler_41;
    }
    goto loop_start_14;
    loop_end_14:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_41:;
    exception_keeper_type_39 = exception_type;
    exception_keeper_value_39 = exception_value;
    exception_keeper_tb_39 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_29 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_6__iter_value.object );
    tmp_for_loop_6__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_6__for_iterator.object );
    tmp_for_loop_6__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_29;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_39 != NULL )
    {
        exception_type = exception_keeper_type_39;
        exception_value = exception_keeper_value_39;
        exception_tb = exception_keeper_tb_39;

        goto frame_exception_exit_1;
    }

    goto finally_end_41;
    finally_end_41:;
    goto branch_end_40;
    branch_no_40:;
    tmp_iter_arg_20 = par_missing_values.object;

    if ( tmp_iter_arg_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156787 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1490;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_111 = MAKE_ITERATOR( tmp_iter_arg_20 );
    if ( tmp_assign_source_111 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1490;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_7__for_iterator.object == NULL );
    tmp_for_loop_7__for_iterator.object = tmp_assign_source_111;

    // Tried code
    loop_start_15:;
    tmp_next_source_14 = tmp_for_loop_7__for_iterator.object;

    tmp_assign_source_112 = ITERATOR_NEXT( tmp_next_source_14 );
    if (tmp_assign_source_112 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_15;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1490;
            goto try_finally_handler_42;
        }
    }

    if (tmp_for_loop_7__iter_value.object == NULL)
    {
        tmp_for_loop_7__iter_value.object = tmp_assign_source_112;
    }
    else
    {
        PyObject *old = tmp_for_loop_7__iter_value.object;
        tmp_for_loop_7__iter_value.object = tmp_assign_source_112;
        Py_DECREF( old );
    }
    tmp_assign_source_113 = tmp_for_loop_7__iter_value.object;

    if (var_entry.object == NULL)
    {
        var_entry.object = INCREASE_REFCOUNT( tmp_assign_source_113 );
    }
    else
    {
        PyObject *old = var_entry.object;
        var_entry.object = INCREASE_REFCOUNT( tmp_assign_source_113 );
        Py_DECREF( old );
    }
    tmp_source_name_32 = var_entry.object;

    tmp_called_46 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_extend );
    if ( tmp_called_46 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1491;
        goto try_finally_handler_42;
    }
    tmp_call_arg_element_38 = PyList_New( 1 );
    tmp_str_arg_4 = var_user_missing_values.object;

    if ( tmp_str_arg_4 == NULL )
    {
        Py_DECREF( tmp_called_46 );
        Py_DECREF( tmp_call_arg_element_38 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172313 ], 65, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1491;
        goto try_finally_handler_42;
    }

    tmp_list_element_4 = PyObject_Str( tmp_str_arg_4 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_46 );
        Py_DECREF( tmp_call_arg_element_38 );

        frame_function->f_lineno = 1491;
        goto try_finally_handler_42;
    }
    PyList_SET_ITEM( tmp_call_arg_element_38, 0, tmp_list_element_4 );
    frame_function->f_lineno = 1491;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_46, tmp_call_arg_element_38 );
    Py_DECREF( tmp_called_46 );
    Py_DECREF( tmp_call_arg_element_38 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1491;
        goto try_finally_handler_42;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1490;
        goto try_finally_handler_42;
    }
    goto loop_start_15;
    loop_end_15:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_42:;
    exception_keeper_type_40 = exception_type;
    exception_keeper_value_40 = exception_value;
    exception_keeper_tb_40 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_30 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_7__iter_value.object );
    tmp_for_loop_7__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_7__for_iterator.object );
    tmp_for_loop_7__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_30;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_40 != NULL )
    {
        exception_type = exception_keeper_type_40;
        exception_value = exception_keeper_value_40;
        exception_tb = exception_keeper_tb_40;

        goto frame_exception_exit_1;
    }

    goto finally_end_42;
    finally_end_42:;
    branch_end_40:;
    branch_end_38:;
    branch_end_31:;
    tmp_compare_left_20 = par_missing.object;

    if ( tmp_compare_left_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171804 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1494;
        goto frame_exception_exit_1;
    }

    tmp_called_47 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_47 == NULL ))
    {
        tmp_called_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_47 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1494;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_39 = const_str_empty;
    frame_function->f_lineno = 1494;
    tmp_compare_right_20 = CALL_FUNCTION_WITH_ARGS1( tmp_called_47, tmp_call_arg_element_39 );
    if ( tmp_compare_right_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1494;
        goto frame_exception_exit_1;
    }
    tmp_cmp_NotEq_1 = RICH_COMPARE_BOOL_NE( tmp_compare_left_20, tmp_compare_right_20 );
    if ( tmp_cmp_NotEq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_20 );

        frame_function->f_lineno = 1494;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_20 );
    if (tmp_cmp_NotEq_1 == 1)
    {
        goto branch_yes_41;
    }
    else
    {
        goto branch_no_41;
    }
    branch_yes_41:;
    tmp_source_name_33 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_warnings );

    if (unlikely( tmp_source_name_33 == NULL ))
    {
        tmp_source_name_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
    }

    if ( tmp_source_name_33 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6827 ], 37, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1495;
        goto frame_exception_exit_1;
    }

    tmp_called_48 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_warn );
    if ( tmp_called_48 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1495;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_40 = const_str_digest_f76fabe83b22766ecb6af11e49569613;
    tmp_call_arg_element_41 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );

    if (unlikely( tmp_call_arg_element_41 == NULL ))
    {
        tmp_call_arg_element_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );
    }

    if ( tmp_call_arg_element_41 == NULL )
    {
        Py_DECREF( tmp_called_48 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6864 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1498;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1498;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_48, tmp_call_arg_element_40, tmp_call_arg_element_41 );
    Py_DECREF( tmp_called_48 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1498;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code
    tmp_assign_source_114 = NULL;
    // Tried code
    tmp_source_name_34 = par_missing.object;

    if ( tmp_source_name_34 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171804 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1499;
        goto try_finally_handler_44;
    }

    tmp_called_49 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_split );
    if ( tmp_called_49 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1499;
        goto try_finally_handler_44;
    }
    tmp_called_50 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_50 == NULL ))
    {
        tmp_called_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_50 == NULL )
    {
        Py_DECREF( tmp_called_49 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1499;
        goto try_finally_handler_44;
    }

    tmp_call_arg_element_43 = const_str_chr_44;
    frame_function->f_lineno = 1499;
    tmp_call_arg_element_42 = CALL_FUNCTION_WITH_ARGS1( tmp_called_50, tmp_call_arg_element_43 );
    if ( tmp_call_arg_element_42 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_49 );

        frame_function->f_lineno = 1499;
        goto try_finally_handler_44;
    }
    frame_function->f_lineno = 1499;
    tmp_iter_arg_21 = CALL_FUNCTION_WITH_ARGS1( tmp_called_49, tmp_call_arg_element_42 );
    Py_DECREF( tmp_called_49 );
    Py_DECREF( tmp_call_arg_element_42 );
    if ( tmp_iter_arg_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1499;
        goto try_finally_handler_44;
    }
    tmp_assign_source_115 = MAKE_ITERATOR( tmp_iter_arg_21 );
    Py_DECREF( tmp_iter_arg_21 );
    if ( tmp_assign_source_115 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1499;
        goto try_finally_handler_44;
    }
    assert( tmp_listcontr_8__listcontr_iter.object == NULL );
    tmp_listcontr_8__listcontr_iter.object = tmp_assign_source_115;

    tmp_assign_source_116 = PyList_New( 0 );
    assert( tmp_listcontr_8__listcontr_result.object == NULL );
    tmp_listcontr_8__listcontr_result.object = tmp_assign_source_116;

    loop_start_16:;
    tmp_next_source_15 = tmp_listcontr_8__listcontr_iter.object;

    tmp_assign_source_117 = ITERATOR_NEXT( tmp_next_source_15 );
    if (tmp_assign_source_117 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_16;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1499;
            goto try_finally_handler_44;
        }
    }

    if (tmp_listcontr_8__iter_value_0.object == NULL)
    {
        tmp_listcontr_8__iter_value_0.object = tmp_assign_source_117;
    }
    else
    {
        PyObject *old = tmp_listcontr_8__iter_value_0.object;
        tmp_listcontr_8__iter_value_0.object = tmp_assign_source_117;
        Py_DECREF( old );
    }
    tmp_assign_source_118 = tmp_listcontr_8__iter_value_0.object;

    if (var__.object == NULL)
    {
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_118 );
    }
    else
    {
        PyObject *old = var__.object;
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_118 );
        Py_DECREF( old );
    }
    tmp_append_to_8 = tmp_listcontr_8__listcontr_result.object;

    tmp_str_arg_5 = var__.object;

    tmp_append_value_8 = PyObject_Str( tmp_str_arg_5 );
    if ( tmp_append_value_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1499;
        goto try_finally_handler_44;
    }
    tmp_res = PyList_Append( tmp_append_to_8, tmp_append_value_8 );
    Py_DECREF( tmp_append_value_8 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1499;
        goto try_finally_handler_44;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1499;
        goto try_finally_handler_44;
    }
    goto loop_start_16;
    loop_end_16:;
    tmp_assign_source_114 = tmp_listcontr_8__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_44:;
    exception_keeper_type_41 = exception_type;
    exception_keeper_value_41 = exception_value;
    exception_keeper_tb_41 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_31 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_8__iter_value_0.object );
    tmp_listcontr_8__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_31;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_41 != NULL )
    {
        exception_type = exception_keeper_type_41;
        exception_value = exception_keeper_value_41;
        exception_tb = exception_keeper_tb_41;

        goto try_finally_handler_43;
    }

    goto finally_end_43;
    finally_end_43:;
    assert( var_values.object == NULL );
    var_values.object = INCREASE_REFCOUNT( tmp_assign_source_114 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_43:;
    exception_keeper_type_42 = exception_type;
    exception_keeper_value_42 = exception_value;
    exception_keeper_tb_42 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_32 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_8__listcontr_result.object );
    tmp_listcontr_8__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_8__listcontr_iter.object );
    tmp_listcontr_8__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_32;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_42 != NULL )
    {
        exception_type = exception_keeper_type_42;
        exception_value = exception_keeper_value_42;
        exception_tb = exception_keeper_tb_42;

        goto frame_exception_exit_1;
    }

    goto finally_end_44;
    finally_end_44:;
    tmp_iter_arg_22 = par_missing_values.object;

    if ( tmp_iter_arg_22 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156787 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1500;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_119 = MAKE_ITERATOR( tmp_iter_arg_22 );
    if ( tmp_assign_source_119 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1500;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_8__for_iterator.object == NULL );
    tmp_for_loop_8__for_iterator.object = tmp_assign_source_119;

    // Tried code
    loop_start_17:;
    tmp_next_source_16 = tmp_for_loop_8__for_iterator.object;

    tmp_assign_source_120 = ITERATOR_NEXT( tmp_next_source_16 );
    if (tmp_assign_source_120 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_17;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1500;
            goto try_finally_handler_45;
        }
    }

    if (tmp_for_loop_8__iter_value.object == NULL)
    {
        tmp_for_loop_8__iter_value.object = tmp_assign_source_120;
    }
    else
    {
        PyObject *old = tmp_for_loop_8__iter_value.object;
        tmp_for_loop_8__iter_value.object = tmp_assign_source_120;
        Py_DECREF( old );
    }
    tmp_assign_source_121 = tmp_for_loop_8__iter_value.object;

    if (var_entry.object == NULL)
    {
        var_entry.object = INCREASE_REFCOUNT( tmp_assign_source_121 );
    }
    else
    {
        PyObject *old = var_entry.object;
        var_entry.object = INCREASE_REFCOUNT( tmp_assign_source_121 );
        Py_DECREF( old );
    }
    tmp_source_name_35 = var_entry.object;

    tmp_called_51 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_extend );
    if ( tmp_called_51 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1501;
        goto try_finally_handler_45;
    }
    tmp_call_arg_element_44 = var_values.object;

    if ( tmp_call_arg_element_44 == NULL )
    {
        Py_DECREF( tmp_called_51 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 20224 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1501;
        goto try_finally_handler_45;
    }

    frame_function->f_lineno = 1501;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_51, tmp_call_arg_element_44 );
    Py_DECREF( tmp_called_51 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1501;
        goto try_finally_handler_45;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1500;
        goto try_finally_handler_45;
    }
    goto loop_start_17;
    loop_end_17:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_45:;
    exception_keeper_type_43 = exception_type;
    exception_keeper_value_43 = exception_value;
    exception_keeper_tb_43 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_33 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_8__iter_value.object );
    tmp_for_loop_8__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_8__for_iterator.object );
    tmp_for_loop_8__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_33;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_43 != NULL )
    {
        exception_type = exception_keeper_type_43;
        exception_value = exception_keeper_value_43;
        exception_tb = exception_keeper_tb_43;

        goto frame_exception_exit_1;
    }

    goto finally_end_45;
    finally_end_45:;
    branch_no_41:;
    // Tried code
    tmp_assign_source_122 = NULL;
    // Tried code
    tmp_assign_source_123 = par_filling_values.object;

    if ( tmp_assign_source_123 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172485 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1505;
        goto try_finally_handler_47;
    }

    assert( tmp_or_4__value_1.object == NULL );
    tmp_or_4__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_123 );

    tmp_cond_value_19 = tmp_or_4__value_1.object;

    tmp_cond_truth_19 = CHECK_IF_TRUE( tmp_cond_value_19 );
    if ( tmp_cond_truth_19 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1505;
        goto try_finally_handler_47;
    }
    if (tmp_cond_truth_19 == 1)
    {
        goto condexpr_true_7;
    }
    else
    {
        goto condexpr_false_7;
    }
    condexpr_true_7:;
    tmp_assign_source_122 = tmp_or_4__value_1.object;

    Py_INCREF( tmp_assign_source_122 );
    goto condexpr_end_7;
    condexpr_false_7:;
    tmp_assign_source_122 = NULL;
    // Tried code
    tmp_result = tmp_or_4__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_4__value_1.object );
        tmp_or_4__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_assign_source_122 = PyList_New( 0 );
    // Re-reraise as necessary after finally was executed.
    goto finally_end_46;
    finally_end_46:;
    condexpr_end_7:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_47:;
    exception_keeper_type_44 = exception_type;
    exception_keeper_value_44 = exception_value;
    exception_keeper_tb_44 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_44 != NULL )
    {
        exception_type = exception_keeper_type_44;
        exception_value = exception_keeper_value_44;
        exception_tb = exception_keeper_tb_44;

        goto try_finally_handler_46;
    }

    goto finally_end_47;
    finally_end_47:;
    assert( var_user_filling_values.object == NULL );
    var_user_filling_values.object = tmp_assign_source_122;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_46:;
    exception_keeper_type_45 = exception_type;
    exception_keeper_value_45 = exception_value;
    exception_keeper_tb_45 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_34 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_4__value_1.object );
    tmp_or_4__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_34;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_45 != NULL )
    {
        exception_type = exception_keeper_type_45;
        exception_value = exception_keeper_value_45;
        exception_tb = exception_keeper_tb_45;

        goto frame_exception_exit_1;
    }

    goto finally_end_48;
    finally_end_48:;
    tmp_binop_left_5 = LIST_COPY( const_list_none_list );
    tmp_binop_right_5 = var_nbcols.object;

    if ( tmp_binop_right_5 == NULL )
    {
        Py_DECREF( tmp_binop_left_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172261 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1507;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_124 = BINARY_OPERATION_MUL( tmp_binop_left_5, tmp_binop_right_5 );
    Py_DECREF( tmp_binop_left_5 );
    if ( tmp_assign_source_124 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1507;
        goto frame_exception_exit_1;
    }
    if (par_filling_values.object == NULL)
    {
        par_filling_values.object = tmp_assign_source_124;
    }
    else
    {
        PyObject *old = par_filling_values.object;
        par_filling_values.object = tmp_assign_source_124;
        Py_DECREF( old );
    }
    tmp_isinstance_inst_10 = var_user_filling_values.object;

    if ( tmp_isinstance_inst_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172545 ], 65, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1509;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_10 = LOOKUP_BUILTIN( const_str_plain_dict );
    if ( tmp_isinstance_cls_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1509;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_10, tmp_isinstance_cls_10 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1509;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_42;
    }
    else
    {
        goto branch_no_42;
    }
    branch_yes_42:;
    tmp_source_name_36 = var_user_filling_values.object;

    if ( tmp_source_name_36 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172545 ], 65, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1510;
        goto frame_exception_exit_1;
    }

    tmp_called_52 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_items );
    if ( tmp_called_52 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1510;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1510;
    tmp_iter_arg_23 = CALL_FUNCTION_NO_ARGS( tmp_called_52 );
    Py_DECREF( tmp_called_52 );
    if ( tmp_iter_arg_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1510;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_125 = MAKE_ITERATOR( tmp_iter_arg_23 );
    Py_DECREF( tmp_iter_arg_23 );
    if ( tmp_assign_source_125 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1510;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_9__for_iterator.object == NULL );
    tmp_for_loop_9__for_iterator.object = tmp_assign_source_125;

    // Tried code
    loop_start_18:;
    tmp_next_source_17 = tmp_for_loop_9__for_iterator.object;

    tmp_assign_source_126 = ITERATOR_NEXT( tmp_next_source_17 );
    if (tmp_assign_source_126 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_18;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1510;
            goto try_finally_handler_49;
        }
    }

    if (tmp_for_loop_9__iter_value.object == NULL)
    {
        tmp_for_loop_9__iter_value.object = tmp_assign_source_126;
    }
    else
    {
        PyObject *old = tmp_for_loop_9__iter_value.object;
        tmp_for_loop_9__iter_value.object = tmp_assign_source_126;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_24 = tmp_for_loop_9__iter_value.object;

    tmp_assign_source_127 = MAKE_ITERATOR( tmp_iter_arg_24 );
    if ( tmp_assign_source_127 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1510;
        goto try_finally_handler_50;
    }
    if (tmp_tuple_unpack_4__source_iter.object == NULL)
    {
        tmp_tuple_unpack_4__source_iter.object = tmp_assign_source_127;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_4__source_iter.object;
        tmp_tuple_unpack_4__source_iter.object = tmp_assign_source_127;
        Py_DECREF( old );
    }
    tmp_unpack_7 = tmp_tuple_unpack_4__source_iter.object;

    tmp_assign_source_128 = UNPACK_PARAMETER_NEXT( tmp_unpack_7, 0 );
    if ( tmp_assign_source_128 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1510;
        goto try_finally_handler_50;
    }
    if (tmp_tuple_unpack_4__element_1.object == NULL)
    {
        tmp_tuple_unpack_4__element_1.object = tmp_assign_source_128;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_4__element_1.object;
        tmp_tuple_unpack_4__element_1.object = tmp_assign_source_128;
        Py_DECREF( old );
    }
    tmp_unpack_8 = tmp_tuple_unpack_4__source_iter.object;

    tmp_assign_source_129 = UNPACK_PARAMETER_NEXT( tmp_unpack_8, 1 );
    if ( tmp_assign_source_129 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1510;
        goto try_finally_handler_50;
    }
    if (tmp_tuple_unpack_4__element_2.object == NULL)
    {
        tmp_tuple_unpack_4__element_2.object = tmp_assign_source_129;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_4__element_2.object;
        tmp_tuple_unpack_4__element_2.object = tmp_assign_source_129;
        Py_DECREF( old );
    }
    tmp_iterator_name_4 = tmp_tuple_unpack_4__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_4 ); assert( PyIter_Check( tmp_iterator_name_4 ) );

    tmp_iterator_attempt_4 = (*Py_TYPE( tmp_iterator_name_4 )->tp_iternext)( tmp_iterator_name_4 );

    if (likely( tmp_iterator_attempt_4 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_50;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_4 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_50;
    }
    tmp_assign_source_130 = tmp_tuple_unpack_4__element_1.object;

    if (var_key.object == NULL)
    {
        var_key.object = INCREASE_REFCOUNT( tmp_assign_source_130 );
    }
    else
    {
        PyObject *old = var_key.object;
        var_key.object = INCREASE_REFCOUNT( tmp_assign_source_130 );
        Py_DECREF( old );
    }
    tmp_assign_source_131 = tmp_tuple_unpack_4__element_2.object;

    if (var_val.object == NULL)
    {
        var_val.object = INCREASE_REFCOUNT( tmp_assign_source_131 );
    }
    else
    {
        PyObject *old = var_val.object;
        var_val.object = INCREASE_REFCOUNT( tmp_assign_source_131 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_50:;
    exception_keeper_type_46 = exception_type;
    exception_keeper_value_46 = exception_value;
    exception_keeper_tb_46 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_35 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_4__source_iter.object );
    tmp_tuple_unpack_4__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_4__element_1.object );
    tmp_tuple_unpack_4__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_4__element_2.object );
    tmp_tuple_unpack_4__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_35;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_46 != NULL )
    {
        exception_type = exception_keeper_type_46;
        exception_value = exception_keeper_value_46;
        exception_tb = exception_keeper_tb_46;

        goto try_finally_handler_49;
    }

    goto finally_end_49;
    finally_end_49:;
    tmp_called_53 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__is_string_like );

    if (unlikely( tmp_called_53 == NULL ))
    {
        tmp_called_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__is_string_like );
    }

    if ( tmp_called_53 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155296 ], 44, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1511;
        goto try_finally_handler_49;
    }

    tmp_call_arg_element_45 = var_key.object;

    if ( tmp_call_arg_element_45 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1511;
        goto try_finally_handler_49;
    }

    frame_function->f_lineno = 1511;
    tmp_cond_value_20 = CALL_FUNCTION_WITH_ARGS1( tmp_called_53, tmp_call_arg_element_45 );
    if ( tmp_cond_value_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1511;
        goto try_finally_handler_49;
    }
    tmp_cond_truth_20 = CHECK_IF_TRUE( tmp_cond_value_20 );
    if ( tmp_cond_truth_20 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_20 );

        frame_function->f_lineno = 1511;
        goto try_finally_handler_49;
    }
    Py_DECREF( tmp_cond_value_20 );
    if (tmp_cond_truth_20 == 1)
    {
        goto branch_yes_43;
    }
    else
    {
        goto branch_no_43;
    }
    branch_yes_43:;
    // Tried block of try/except
    tmp_source_name_37 = par_names.object;

    if ( tmp_source_name_37 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1514;
        goto try_except_handler_7;
    }

    tmp_called_54 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain_index );
    if ( tmp_called_54 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1514;
        goto try_except_handler_7;
    }
    tmp_call_arg_element_46 = var_key.object;

    if ( tmp_call_arg_element_46 == NULL )
    {
        Py_DECREF( tmp_called_54 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1514;
        goto try_except_handler_7;
    }

    frame_function->f_lineno = 1514;
    tmp_assign_source_132 = CALL_FUNCTION_WITH_ARGS1( tmp_called_54, tmp_call_arg_element_46 );
    Py_DECREF( tmp_called_54 );
    if ( tmp_assign_source_132 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1514;
        goto try_except_handler_7;
    }
    if (var_key.object == NULL)
    {
        var_key.object = tmp_assign_source_132;
    }
    else
    {
        PyObject *old = var_key.object;
        var_key.object = tmp_assign_source_132;
        Py_DECREF( old );
    }
    goto try_except_end_7;
    try_except_handler_7:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_21 = PyThreadState_GET()->exc_type;
    tmp_compare_right_21 = PyExc_ValueError;
    tmp_exc_match_exception_match_7 = EXCEPTION_MATCH_BOOL( tmp_compare_left_21, tmp_compare_right_21 );
    if ( tmp_exc_match_exception_match_7 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1515;
        goto try_finally_handler_49;
    }
    if (tmp_exc_match_exception_match_7 == 1)
    {
        goto branch_yes_44;
    }
    else
    {
        goto branch_no_44;
    }
    branch_yes_44:;
    goto loop_start_18;
    goto branch_end_44;
    branch_no_44:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_49;
    branch_end_44:;
    try_except_end_7:;
    branch_no_43:;
    tmp_cond_value_21 = par_usecols.object;

    if ( tmp_cond_value_21 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1519;
        goto try_finally_handler_49;
    }

    tmp_cond_truth_21 = CHECK_IF_TRUE( tmp_cond_value_21 );
    if ( tmp_cond_truth_21 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1519;
        goto try_finally_handler_49;
    }
    if (tmp_cond_truth_21 == 1)
    {
        goto branch_yes_45;
    }
    else
    {
        goto branch_no_45;
    }
    branch_yes_45:;
    // Tried block of try/except
    tmp_source_name_38 = par_usecols.object;

    if ( tmp_source_name_38 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1521;
        goto try_except_handler_8;
    }

    tmp_called_55 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain_index );
    if ( tmp_called_55 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1521;
        goto try_except_handler_8;
    }
    tmp_call_arg_element_47 = var_key.object;

    if ( tmp_call_arg_element_47 == NULL )
    {
        Py_DECREF( tmp_called_55 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1521;
        goto try_except_handler_8;
    }

    frame_function->f_lineno = 1521;
    tmp_assign_source_133 = CALL_FUNCTION_WITH_ARGS1( tmp_called_55, tmp_call_arg_element_47 );
    Py_DECREF( tmp_called_55 );
    if ( tmp_assign_source_133 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1521;
        goto try_except_handler_8;
    }
    if (var_key.object == NULL)
    {
        var_key.object = tmp_assign_source_133;
    }
    else
    {
        PyObject *old = var_key.object;
        var_key.object = tmp_assign_source_133;
        Py_DECREF( old );
    }
    goto try_except_end_8;
    try_except_handler_8:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_22 = PyThreadState_GET()->exc_type;
    tmp_compare_right_22 = PyExc_ValueError;
    tmp_exc_match_exception_match_8 = EXCEPTION_MATCH_BOOL( tmp_compare_left_22, tmp_compare_right_22 );
    if ( tmp_exc_match_exception_match_8 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1522;
        goto try_finally_handler_49;
    }
    if (tmp_exc_match_exception_match_8 == 1)
    {
        goto branch_no_46;
    }
    else
    {
        goto branch_yes_46;
    }
    branch_yes_46:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_49;
    branch_no_46:;
    try_except_end_8:;
    branch_no_45:;
    tmp_ass_subvalue_3 = var_val.object;

    if ( tmp_ass_subvalue_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28580 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1525;
        goto try_finally_handler_49;
    }

    tmp_ass_subscribed_3 = par_filling_values.object;

    if ( tmp_ass_subscribed_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172485 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1525;
        goto try_finally_handler_49;
    }

    tmp_ass_subscript_3 = var_key.object;

    if ( tmp_ass_subscript_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 15396 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1525;
        goto try_finally_handler_49;
    }

    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1525;
        goto try_finally_handler_49;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1510;
        goto try_finally_handler_49;
    }
    goto loop_start_18;
    loop_end_18:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_49:;
    exception_keeper_type_47 = exception_type;
    exception_keeper_value_47 = exception_value;
    exception_keeper_tb_47 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_36 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_9__iter_value.object );
    tmp_for_loop_9__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_9__for_iterator.object );
    tmp_for_loop_9__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_36;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_47 != NULL )
    {
        exception_type = exception_keeper_type_47;
        exception_value = exception_keeper_value_47;
        exception_tb = exception_keeper_tb_47;

        goto frame_exception_exit_1;
    }

    goto finally_end_50;
    finally_end_50:;
    goto branch_end_42;
    branch_no_42:;
    tmp_isinstance_inst_11 = var_user_filling_values.object;

    if ( tmp_isinstance_inst_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172545 ], 65, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1527;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_11 = PyTuple_New( 2 );
    tmp_tuple_element_9 = LOOKUP_BUILTIN( const_str_plain_list );
    if ( tmp_tuple_element_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_cls_11 );

        frame_function->f_lineno = 1527;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_11, 0, tmp_tuple_element_9 );
    tmp_tuple_element_9 = LOOKUP_BUILTIN( const_str_plain_tuple );
    if ( tmp_tuple_element_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_cls_11 );

        frame_function->f_lineno = 1527;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_11, 1, tmp_tuple_element_9 );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_11, tmp_isinstance_cls_11 );
    Py_DECREF( tmp_isinstance_cls_11 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1527;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_47;
    }
    else
    {
        goto branch_no_47;
    }
    branch_yes_47:;
    tmp_len_arg_4 = var_user_filling_values.object;

    if ( tmp_len_arg_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172545 ], 65, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1528;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_134 = BUILTIN_LEN( tmp_len_arg_4 );
    if ( tmp_assign_source_134 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1528;
        goto frame_exception_exit_1;
    }
    assert( var_n.object == NULL );
    var_n.object = tmp_assign_source_134;

    tmp_compare_left_23 = var_n.object;

    tmp_compare_right_23 = var_nbcols.object;

    if ( tmp_compare_right_23 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172261 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1529;
        goto frame_exception_exit_1;
    }

    tmp_cmp_LtE_1 = RICH_COMPARE_BOOL_LE( tmp_compare_left_23, tmp_compare_right_23 );
    if ( tmp_cmp_LtE_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1529;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_LtE_1 == 1)
    {
        goto branch_yes_48;
    }
    else
    {
        goto branch_no_48;
    }
    branch_yes_48:;
    tmp_sliceass_value_1 = var_user_filling_values.object;

    if ( tmp_sliceass_value_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172545 ], 65, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1530;
        goto frame_exception_exit_1;
    }

    tmp_sliceass_target_1 = par_filling_values.object;

    tmp_sliceass_upper_1 = var_n.object;

    tmp_result = SET_SLICE( tmp_sliceass_target_1, Py_None, tmp_sliceass_upper_1, tmp_sliceass_value_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1530;
        goto frame_exception_exit_1;
    }
    goto branch_end_48;
    branch_no_48:;
    tmp_slice_source_2 = var_user_filling_values.object;

    if ( tmp_slice_source_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172545 ], 65, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1532;
        goto frame_exception_exit_1;
    }

    tmp_slice_upper_1 = var_nbcols.object;

    if ( tmp_slice_upper_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172261 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1532;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_135 = LOOKUP_SLICE( tmp_slice_source_2, Py_None, tmp_slice_upper_1 );
    if ( tmp_assign_source_135 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1532;
        goto frame_exception_exit_1;
    }
    assert( par_filling_values.object != NULL );
    {
        PyObject *old = par_filling_values.object;
        par_filling_values.object = tmp_assign_source_135;
        Py_DECREF( old );
    }

    branch_end_48:;
    goto branch_end_47;
    branch_no_47:;
    tmp_binop_left_6 = PyList_New( 1 );
    tmp_list_element_5 = var_user_filling_values.object;

    if ( tmp_list_element_5 == NULL )
    {
        Py_DECREF( tmp_binop_left_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172545 ], 65, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1535;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_5 );
    PyList_SET_ITEM( tmp_binop_left_6, 0, tmp_list_element_5 );
    tmp_binop_right_6 = var_nbcols.object;

    if ( tmp_binop_right_6 == NULL )
    {
        Py_DECREF( tmp_binop_left_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172261 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1535;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_136 = BINARY_OPERATION_MUL( tmp_binop_left_6, tmp_binop_right_6 );
    Py_DECREF( tmp_binop_left_6 );
    if ( tmp_assign_source_136 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1535;
        goto frame_exception_exit_1;
    }
    assert( par_filling_values.object != NULL );
    {
        PyObject *old = par_filling_values.object;
        par_filling_values.object = tmp_assign_source_136;
        Py_DECREF( old );
    }

    branch_end_47:;
    branch_end_42:;
    tmp_compare_left_24 = par_dtype.object;

    if ( tmp_compare_left_24 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1538;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_24 = Py_None;
    tmp_is_5 = ( tmp_compare_left_24 == tmp_compare_right_24 );
    if (tmp_is_5)
    {
        goto branch_yes_49;
    }
    else
    {
        goto branch_no_49;
    }
    branch_yes_49:;
    // Tried code
    tmp_assign_source_137 = NULL;
    // Tried code
    tmp_called_56 = LOOKUP_BUILTIN( const_str_plain_zip );
    if ( tmp_called_56 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1542;
        goto try_finally_handler_52;
    }
    tmp_call_arg_element_48 = par_missing_values.object;

    if ( tmp_call_arg_element_48 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156787 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1542;
        goto try_finally_handler_52;
    }

    tmp_call_arg_element_49 = par_filling_values.object;

    if ( tmp_call_arg_element_49 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172485 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1542;
        goto try_finally_handler_52;
    }

    frame_function->f_lineno = 1542;
    tmp_iter_arg_25 = CALL_FUNCTION_WITH_ARGS2( tmp_called_56, tmp_call_arg_element_48, tmp_call_arg_element_49 );
    if ( tmp_iter_arg_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1542;
        goto try_finally_handler_52;
    }
    tmp_assign_source_138 = MAKE_ITERATOR( tmp_iter_arg_25 );
    Py_DECREF( tmp_iter_arg_25 );
    if ( tmp_assign_source_138 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1541;
        goto try_finally_handler_52;
    }
    assert( tmp_listcontr_9__listcontr_iter.object == NULL );
    tmp_listcontr_9__listcontr_iter.object = tmp_assign_source_138;

    tmp_assign_source_139 = PyList_New( 0 );
    assert( tmp_listcontr_9__listcontr_result.object == NULL );
    tmp_listcontr_9__listcontr_result.object = tmp_assign_source_139;

    loop_start_19:;
    tmp_next_source_18 = tmp_listcontr_9__listcontr_iter.object;

    tmp_assign_source_140 = ITERATOR_NEXT( tmp_next_source_18 );
    if (tmp_assign_source_140 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_19;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1541;
            goto try_finally_handler_52;
        }
    }

    if (tmp_listcontr_9__iter_value_0.object == NULL)
    {
        tmp_listcontr_9__iter_value_0.object = tmp_assign_source_140;
    }
    else
    {
        PyObject *old = tmp_listcontr_9__iter_value_0.object;
        tmp_listcontr_9__iter_value_0.object = tmp_assign_source_140;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_26 = tmp_listcontr_9__iter_value_0.object;

    tmp_assign_source_141 = MAKE_ITERATOR( tmp_iter_arg_26 );
    if ( tmp_assign_source_141 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1541;
        goto try_finally_handler_53;
    }
    if (tmp_tuple_unpack_5__source_iter.object == NULL)
    {
        tmp_tuple_unpack_5__source_iter.object = tmp_assign_source_141;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_5__source_iter.object;
        tmp_tuple_unpack_5__source_iter.object = tmp_assign_source_141;
        Py_DECREF( old );
    }
    tmp_unpack_9 = tmp_tuple_unpack_5__source_iter.object;

    tmp_assign_source_142 = UNPACK_PARAMETER_NEXT( tmp_unpack_9, 0 );
    if ( tmp_assign_source_142 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1541;
        goto try_finally_handler_53;
    }
    if (tmp_tuple_unpack_5__element_1.object == NULL)
    {
        tmp_tuple_unpack_5__element_1.object = tmp_assign_source_142;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_5__element_1.object;
        tmp_tuple_unpack_5__element_1.object = tmp_assign_source_142;
        Py_DECREF( old );
    }
    tmp_unpack_10 = tmp_tuple_unpack_5__source_iter.object;

    tmp_assign_source_143 = UNPACK_PARAMETER_NEXT( tmp_unpack_10, 1 );
    if ( tmp_assign_source_143 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1541;
        goto try_finally_handler_53;
    }
    if (tmp_tuple_unpack_5__element_2.object == NULL)
    {
        tmp_tuple_unpack_5__element_2.object = tmp_assign_source_143;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_5__element_2.object;
        tmp_tuple_unpack_5__element_2.object = tmp_assign_source_143;
        Py_DECREF( old );
    }
    tmp_iterator_name_5 = tmp_tuple_unpack_5__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_5 ); assert( PyIter_Check( tmp_iterator_name_5 ) );

    tmp_iterator_attempt_5 = (*Py_TYPE( tmp_iterator_name_5 )->tp_iternext)( tmp_iterator_name_5 );

    if (likely( tmp_iterator_attempt_5 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_53;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_5 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_53;
    }
    tmp_assign_source_144 = tmp_tuple_unpack_5__element_1.object;

    if (var_miss.object == NULL)
    {
        var_miss.object = INCREASE_REFCOUNT( tmp_assign_source_144 );
    }
    else
    {
        PyObject *old = var_miss.object;
        var_miss.object = INCREASE_REFCOUNT( tmp_assign_source_144 );
        Py_DECREF( old );
    }
    tmp_assign_source_145 = tmp_tuple_unpack_5__element_2.object;

    if (var_fill.object == NULL)
    {
        var_fill.object = INCREASE_REFCOUNT( tmp_assign_source_145 );
    }
    else
    {
        PyObject *old = var_fill.object;
        var_fill.object = INCREASE_REFCOUNT( tmp_assign_source_145 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_53:;
    exception_keeper_type_48 = exception_type;
    exception_keeper_value_48 = exception_value;
    exception_keeper_tb_48 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_37 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_5__source_iter.object );
    tmp_tuple_unpack_5__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_5__element_1.object );
    tmp_tuple_unpack_5__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_5__element_2.object );
    tmp_tuple_unpack_5__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_37;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_48 != NULL )
    {
        exception_type = exception_keeper_type_48;
        exception_value = exception_keeper_value_48;
        exception_tb = exception_keeper_tb_48;

        goto try_finally_handler_52;
    }

    goto finally_end_51;
    finally_end_51:;
    tmp_append_to_9 = tmp_listcontr_9__listcontr_result.object;

    tmp_called_57 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_StringConverter );

    if (unlikely( tmp_called_57 == NULL ))
    {
        tmp_called_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StringConverter );
    }

    if ( tmp_called_57 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172610 ], 44, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1541;
        goto try_finally_handler_52;
    }

    tmp_call_pos_6 = const_tuple_none_tuple;
    tmp_call_kw_4 = _PyDict_NewPresized( 2 );
    tmp_dict_value_10 = var_miss.object;

    if ( tmp_dict_value_10 == NULL )
    {
        Py_DECREF( tmp_call_kw_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172654 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1541;
        goto try_finally_handler_52;
    }

    tmp_dict_key_10 = const_str_plain_missing_values;
    PyDict_SetItem( tmp_call_kw_4, tmp_dict_key_10, tmp_dict_value_10 );
    tmp_dict_value_11 = var_fill.object;

    if ( tmp_dict_value_11 == NULL )
    {
        Py_DECREF( tmp_call_kw_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 9691 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1541;
        goto try_finally_handler_52;
    }

    tmp_dict_key_11 = const_str_plain_default;
    PyDict_SetItem( tmp_call_kw_4, tmp_dict_key_11, tmp_dict_value_11 );
    frame_function->f_lineno = 1541;
    tmp_append_value_9 = CALL_FUNCTION( tmp_called_57, tmp_call_pos_6, tmp_call_kw_4 );
    Py_DECREF( tmp_call_kw_4 );
    if ( tmp_append_value_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1541;
        goto try_finally_handler_52;
    }
    tmp_res = PyList_Append( tmp_append_to_9, tmp_append_value_9 );
    Py_DECREF( tmp_append_value_9 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1541;
        goto try_finally_handler_52;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1541;
        goto try_finally_handler_52;
    }
    goto loop_start_19;
    loop_end_19:;
    tmp_assign_source_137 = tmp_listcontr_9__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_52:;
    exception_keeper_type_49 = exception_type;
    exception_keeper_value_49 = exception_value;
    exception_keeper_tb_49 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_38 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_9__iter_value_0.object );
    tmp_listcontr_9__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_38;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_49 != NULL )
    {
        exception_type = exception_keeper_type_49;
        exception_value = exception_keeper_value_49;
        exception_tb = exception_keeper_tb_49;

        goto try_finally_handler_51;
    }

    goto finally_end_52;
    finally_end_52:;
    if (par_converters.object == NULL)
    {
        par_converters.object = INCREASE_REFCOUNT( tmp_assign_source_137 );
    }
    else
    {
        PyObject *old = par_converters.object;
        par_converters.object = INCREASE_REFCOUNT( tmp_assign_source_137 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_51:;
    exception_keeper_type_50 = exception_type;
    exception_keeper_value_50 = exception_value;
    exception_keeper_tb_50 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_39 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_9__listcontr_result.object );
    tmp_listcontr_9__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_9__listcontr_iter.object );
    tmp_listcontr_9__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_39;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_50 != NULL )
    {
        exception_type = exception_keeper_type_50;
        exception_value = exception_keeper_value_50;
        exception_tb = exception_keeper_tb_50;

        goto frame_exception_exit_1;
    }

    goto finally_end_53;
    finally_end_53:;
    goto branch_end_49;
    branch_no_49:;
    tmp_called_58 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_flatten_dtype );

    if (unlikely( tmp_called_58 == NULL ))
    {
        tmp_called_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_flatten_dtype );
    }

    if ( tmp_called_58 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155610 ], 42, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1544;
        goto frame_exception_exit_1;
    }

    tmp_call_pos_7 = PyTuple_New( 1 );
    tmp_tuple_element_10 = par_dtype.object;

    if ( tmp_tuple_element_10 == NULL )
    {
        Py_DECREF( tmp_call_pos_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1544;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_call_pos_7, 0, tmp_tuple_element_10 );
    tmp_call_kw_5 = PyDict_Copy( const_dict_6ad1c59d2b0499ccc49da39f4d02342c );
    frame_function->f_lineno = 1544;
    tmp_assign_source_146 = CALL_FUNCTION( tmp_called_58, tmp_call_pos_7, tmp_call_kw_5 );
    Py_DECREF( tmp_call_pos_7 );
    Py_DECREF( tmp_call_kw_5 );
    if ( tmp_assign_source_146 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1544;
        goto frame_exception_exit_1;
    }
    assert( var_dtype_flat.object == NULL );
    var_dtype_flat.object = tmp_assign_source_146;

    tmp_len_arg_5 = var_dtype_flat.object;

    tmp_compare_left_25 = BUILTIN_LEN( tmp_len_arg_5 );
    if ( tmp_compare_left_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1546;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_25 = const_int_pos_1;
    tmp_cmp_Gt_1 = RICH_COMPARE_BOOL_GT( tmp_compare_left_25, tmp_compare_right_25 );
    if ( tmp_cmp_Gt_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_25 );

        frame_function->f_lineno = 1546;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_25 );
    if (tmp_cmp_Gt_1 == 1)
    {
        goto branch_yes_50;
    }
    else
    {
        goto branch_no_50;
    }
    branch_yes_50:;
    tmp_called_59 = LOOKUP_BUILTIN( const_str_plain_zip );
    if ( tmp_called_59 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1548;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_50 = var_dtype_flat.object;

    tmp_call_arg_element_51 = par_missing_values.object;

    if ( tmp_call_arg_element_51 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156787 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1548;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_52 = par_filling_values.object;

    if ( tmp_call_arg_element_52 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172485 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1548;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1548;
    tmp_assign_source_147 = CALL_FUNCTION_WITH_ARGS3( tmp_called_59, tmp_call_arg_element_50, tmp_call_arg_element_51, tmp_call_arg_element_52 );
    if ( tmp_assign_source_147 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1548;
        goto frame_exception_exit_1;
    }
    assert( var_zipit.object == NULL );
    var_zipit.object = tmp_assign_source_147;

    // Tried code
    tmp_assign_source_148 = NULL;
    // Tried code
    tmp_iter_arg_27 = var_zipit.object;

    tmp_assign_source_149 = MAKE_ITERATOR( tmp_iter_arg_27 );
    if ( tmp_assign_source_149 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1549;
        goto try_finally_handler_55;
    }
    assert( tmp_listcontr_10__listcontr_iter.object == NULL );
    tmp_listcontr_10__listcontr_iter.object = tmp_assign_source_149;

    tmp_assign_source_150 = PyList_New( 0 );
    assert( tmp_listcontr_10__listcontr_result.object == NULL );
    tmp_listcontr_10__listcontr_result.object = tmp_assign_source_150;

    loop_start_20:;
    tmp_next_source_19 = tmp_listcontr_10__listcontr_iter.object;

    tmp_assign_source_151 = ITERATOR_NEXT( tmp_next_source_19 );
    if (tmp_assign_source_151 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_20;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1549;
            goto try_finally_handler_55;
        }
    }

    if (tmp_listcontr_10__iter_value_0.object == NULL)
    {
        tmp_listcontr_10__iter_value_0.object = tmp_assign_source_151;
    }
    else
    {
        PyObject *old = tmp_listcontr_10__iter_value_0.object;
        tmp_listcontr_10__iter_value_0.object = tmp_assign_source_151;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_28 = tmp_listcontr_10__iter_value_0.object;

    tmp_assign_source_152 = MAKE_ITERATOR( tmp_iter_arg_28 );
    if ( tmp_assign_source_152 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1549;
        goto try_finally_handler_56;
    }
    if (tmp_tuple_unpack_6__source_iter.object == NULL)
    {
        tmp_tuple_unpack_6__source_iter.object = tmp_assign_source_152;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_6__source_iter.object;
        tmp_tuple_unpack_6__source_iter.object = tmp_assign_source_152;
        Py_DECREF( old );
    }
    tmp_unpack_11 = tmp_tuple_unpack_6__source_iter.object;

    tmp_assign_source_153 = UNPACK_PARAMETER_NEXT( tmp_unpack_11, 0 );
    if ( tmp_assign_source_153 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1549;
        goto try_finally_handler_56;
    }
    if (tmp_tuple_unpack_6__element_1.object == NULL)
    {
        tmp_tuple_unpack_6__element_1.object = tmp_assign_source_153;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_6__element_1.object;
        tmp_tuple_unpack_6__element_1.object = tmp_assign_source_153;
        Py_DECREF( old );
    }
    tmp_unpack_12 = tmp_tuple_unpack_6__source_iter.object;

    tmp_assign_source_154 = UNPACK_PARAMETER_NEXT( tmp_unpack_12, 1 );
    if ( tmp_assign_source_154 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1549;
        goto try_finally_handler_56;
    }
    if (tmp_tuple_unpack_6__element_2.object == NULL)
    {
        tmp_tuple_unpack_6__element_2.object = tmp_assign_source_154;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_6__element_2.object;
        tmp_tuple_unpack_6__element_2.object = tmp_assign_source_154;
        Py_DECREF( old );
    }
    tmp_unpack_13 = tmp_tuple_unpack_6__source_iter.object;

    tmp_assign_source_155 = UNPACK_PARAMETER_NEXT( tmp_unpack_13, 2 );
    if ( tmp_assign_source_155 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1549;
        goto try_finally_handler_56;
    }
    if (tmp_tuple_unpack_6__element_3.object == NULL)
    {
        tmp_tuple_unpack_6__element_3.object = tmp_assign_source_155;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_6__element_3.object;
        tmp_tuple_unpack_6__element_3.object = tmp_assign_source_155;
        Py_DECREF( old );
    }
    tmp_iterator_name_6 = tmp_tuple_unpack_6__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_6 ); assert( PyIter_Check( tmp_iterator_name_6 ) );

    tmp_iterator_attempt_6 = (*Py_TYPE( tmp_iterator_name_6 )->tp_iternext)( tmp_iterator_name_6 );

    if (likely( tmp_iterator_attempt_6 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_56;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_6 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_56;
    }
    tmp_assign_source_156 = tmp_tuple_unpack_6__element_1.object;

    if (var_dt.object == NULL)
    {
        var_dt.object = INCREASE_REFCOUNT( tmp_assign_source_156 );
    }
    else
    {
        PyObject *old = var_dt.object;
        var_dt.object = INCREASE_REFCOUNT( tmp_assign_source_156 );
        Py_DECREF( old );
    }
    tmp_assign_source_157 = tmp_tuple_unpack_6__element_2.object;

    if (var_miss.object == NULL)
    {
        var_miss.object = INCREASE_REFCOUNT( tmp_assign_source_157 );
    }
    else
    {
        PyObject *old = var_miss.object;
        var_miss.object = INCREASE_REFCOUNT( tmp_assign_source_157 );
        Py_DECREF( old );
    }
    tmp_assign_source_158 = tmp_tuple_unpack_6__element_3.object;

    if (var_fill.object == NULL)
    {
        var_fill.object = INCREASE_REFCOUNT( tmp_assign_source_158 );
    }
    else
    {
        PyObject *old = var_fill.object;
        var_fill.object = INCREASE_REFCOUNT( tmp_assign_source_158 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_56:;
    exception_keeper_type_51 = exception_type;
    exception_keeper_value_51 = exception_value;
    exception_keeper_tb_51 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_40 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_6__source_iter.object );
    tmp_tuple_unpack_6__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_6__element_1.object );
    tmp_tuple_unpack_6__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_6__element_2.object );
    tmp_tuple_unpack_6__element_2.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_6__element_3.object );
    tmp_tuple_unpack_6__element_3.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_40;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_51 != NULL )
    {
        exception_type = exception_keeper_type_51;
        exception_value = exception_keeper_value_51;
        exception_tb = exception_keeper_tb_51;

        goto try_finally_handler_55;
    }

    goto finally_end_54;
    finally_end_54:;
    tmp_append_to_10 = tmp_listcontr_10__listcontr_result.object;

    tmp_called_60 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_StringConverter );

    if (unlikely( tmp_called_60 == NULL ))
    {
        tmp_called_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StringConverter );
    }

    if ( tmp_called_60 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172610 ], 44, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1549;
        goto try_finally_handler_55;
    }

    tmp_call_pos_8 = PyTuple_New( 1 );
    tmp_tuple_element_11 = var_dt.object;

    if ( tmp_tuple_element_11 == NULL )
    {
        Py_DECREF( tmp_call_pos_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 54381 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1549;
        goto try_finally_handler_55;
    }

    Py_INCREF( tmp_tuple_element_11 );
    PyTuple_SET_ITEM( tmp_call_pos_8, 0, tmp_tuple_element_11 );
    tmp_call_kw_6 = _PyDict_NewPresized( 3 );
    tmp_dict_value_12 = Py_True;
    tmp_dict_key_12 = const_str_plain_locked;
    PyDict_SetItem( tmp_call_kw_6, tmp_dict_key_12, tmp_dict_value_12 );
    tmp_dict_value_13 = var_miss.object;

    if ( tmp_dict_value_13 == NULL )
    {
        Py_DECREF( tmp_call_pos_8 );
        Py_DECREF( tmp_call_kw_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172654 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1550;
        goto try_finally_handler_55;
    }

    tmp_dict_key_13 = const_str_plain_missing_values;
    PyDict_SetItem( tmp_call_kw_6, tmp_dict_key_13, tmp_dict_value_13 );
    tmp_dict_value_14 = var_fill.object;

    if ( tmp_dict_value_14 == NULL )
    {
        Py_DECREF( tmp_call_pos_8 );
        Py_DECREF( tmp_call_kw_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 9691 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1550;
        goto try_finally_handler_55;
    }

    tmp_dict_key_14 = const_str_plain_default;
    PyDict_SetItem( tmp_call_kw_6, tmp_dict_key_14, tmp_dict_value_14 );
    frame_function->f_lineno = 1550;
    tmp_append_value_10 = CALL_FUNCTION( tmp_called_60, tmp_call_pos_8, tmp_call_kw_6 );
    Py_DECREF( tmp_call_pos_8 );
    Py_DECREF( tmp_call_kw_6 );
    if ( tmp_append_value_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1550;
        goto try_finally_handler_55;
    }
    tmp_res = PyList_Append( tmp_append_to_10, tmp_append_value_10 );
    Py_DECREF( tmp_append_value_10 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1549;
        goto try_finally_handler_55;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1549;
        goto try_finally_handler_55;
    }
    goto loop_start_20;
    loop_end_20:;
    tmp_assign_source_148 = tmp_listcontr_10__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_55:;
    exception_keeper_type_52 = exception_type;
    exception_keeper_value_52 = exception_value;
    exception_keeper_tb_52 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_41 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_10__iter_value_0.object );
    tmp_listcontr_10__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_41;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_52 != NULL )
    {
        exception_type = exception_keeper_type_52;
        exception_value = exception_keeper_value_52;
        exception_tb = exception_keeper_tb_52;

        goto try_finally_handler_54;
    }

    goto finally_end_55;
    finally_end_55:;
    if (par_converters.object == NULL)
    {
        par_converters.object = INCREASE_REFCOUNT( tmp_assign_source_148 );
    }
    else
    {
        PyObject *old = par_converters.object;
        par_converters.object = INCREASE_REFCOUNT( tmp_assign_source_148 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_54:;
    exception_keeper_type_53 = exception_type;
    exception_keeper_value_53 = exception_value;
    exception_keeper_tb_53 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_42 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_10__listcontr_result.object );
    tmp_listcontr_10__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_10__listcontr_iter.object );
    tmp_listcontr_10__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_42;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_53 != NULL )
    {
        exception_type = exception_keeper_type_53;
        exception_value = exception_keeper_value_53;
        exception_tb = exception_keeper_tb_53;

        goto frame_exception_exit_1;
    }

    goto finally_end_56;
    finally_end_56:;
    goto branch_end_50;
    branch_no_50:;
    tmp_called_61 = LOOKUP_BUILTIN( const_str_plain_zip );
    if ( tmp_called_61 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1554;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_53 = par_missing_values.object;

    if ( tmp_call_arg_element_53 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156787 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1554;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_54 = par_filling_values.object;

    if ( tmp_call_arg_element_54 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172485 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1554;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1554;
    tmp_assign_source_159 = CALL_FUNCTION_WITH_ARGS2( tmp_called_61, tmp_call_arg_element_53, tmp_call_arg_element_54 );
    if ( tmp_assign_source_159 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1554;
        goto frame_exception_exit_1;
    }
    assert( var_zipit.object == NULL );
    var_zipit.object = tmp_assign_source_159;

    // Tried code
    tmp_assign_source_160 = NULL;
    // Tried code
    tmp_iter_arg_29 = var_zipit.object;

    tmp_assign_source_161 = MAKE_ITERATOR( tmp_iter_arg_29 );
    if ( tmp_assign_source_161 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1555;
        goto try_finally_handler_58;
    }
    assert( tmp_listcontr_11__listcontr_iter.object == NULL );
    tmp_listcontr_11__listcontr_iter.object = tmp_assign_source_161;

    tmp_assign_source_162 = PyList_New( 0 );
    assert( tmp_listcontr_11__listcontr_result.object == NULL );
    tmp_listcontr_11__listcontr_result.object = tmp_assign_source_162;

    loop_start_21:;
    tmp_next_source_20 = tmp_listcontr_11__listcontr_iter.object;

    tmp_assign_source_163 = ITERATOR_NEXT( tmp_next_source_20 );
    if (tmp_assign_source_163 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_21;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1555;
            goto try_finally_handler_58;
        }
    }

    if (tmp_listcontr_11__iter_value_0.object == NULL)
    {
        tmp_listcontr_11__iter_value_0.object = tmp_assign_source_163;
    }
    else
    {
        PyObject *old = tmp_listcontr_11__iter_value_0.object;
        tmp_listcontr_11__iter_value_0.object = tmp_assign_source_163;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_30 = tmp_listcontr_11__iter_value_0.object;

    tmp_assign_source_164 = MAKE_ITERATOR( tmp_iter_arg_30 );
    if ( tmp_assign_source_164 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1555;
        goto try_finally_handler_59;
    }
    if (tmp_tuple_unpack_7__source_iter.object == NULL)
    {
        tmp_tuple_unpack_7__source_iter.object = tmp_assign_source_164;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_7__source_iter.object;
        tmp_tuple_unpack_7__source_iter.object = tmp_assign_source_164;
        Py_DECREF( old );
    }
    tmp_unpack_14 = tmp_tuple_unpack_7__source_iter.object;

    tmp_assign_source_165 = UNPACK_PARAMETER_NEXT( tmp_unpack_14, 0 );
    if ( tmp_assign_source_165 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1555;
        goto try_finally_handler_59;
    }
    if (tmp_tuple_unpack_7__element_1.object == NULL)
    {
        tmp_tuple_unpack_7__element_1.object = tmp_assign_source_165;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_7__element_1.object;
        tmp_tuple_unpack_7__element_1.object = tmp_assign_source_165;
        Py_DECREF( old );
    }
    tmp_unpack_15 = tmp_tuple_unpack_7__source_iter.object;

    tmp_assign_source_166 = UNPACK_PARAMETER_NEXT( tmp_unpack_15, 1 );
    if ( tmp_assign_source_166 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1555;
        goto try_finally_handler_59;
    }
    if (tmp_tuple_unpack_7__element_2.object == NULL)
    {
        tmp_tuple_unpack_7__element_2.object = tmp_assign_source_166;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_7__element_2.object;
        tmp_tuple_unpack_7__element_2.object = tmp_assign_source_166;
        Py_DECREF( old );
    }
    tmp_iterator_name_7 = tmp_tuple_unpack_7__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_7 ); assert( PyIter_Check( tmp_iterator_name_7 ) );

    tmp_iterator_attempt_7 = (*Py_TYPE( tmp_iterator_name_7 )->tp_iternext)( tmp_iterator_name_7 );

    if (likely( tmp_iterator_attempt_7 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_59;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_7 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_59;
    }
    tmp_assign_source_167 = tmp_tuple_unpack_7__element_1.object;

    if (var_miss.object == NULL)
    {
        var_miss.object = INCREASE_REFCOUNT( tmp_assign_source_167 );
    }
    else
    {
        PyObject *old = var_miss.object;
        var_miss.object = INCREASE_REFCOUNT( tmp_assign_source_167 );
        Py_DECREF( old );
    }
    tmp_assign_source_168 = tmp_tuple_unpack_7__element_2.object;

    if (var_fill.object == NULL)
    {
        var_fill.object = INCREASE_REFCOUNT( tmp_assign_source_168 );
    }
    else
    {
        PyObject *old = var_fill.object;
        var_fill.object = INCREASE_REFCOUNT( tmp_assign_source_168 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_59:;
    exception_keeper_type_54 = exception_type;
    exception_keeper_value_54 = exception_value;
    exception_keeper_tb_54 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_43 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_7__source_iter.object );
    tmp_tuple_unpack_7__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_7__element_1.object );
    tmp_tuple_unpack_7__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_7__element_2.object );
    tmp_tuple_unpack_7__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_43;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_54 != NULL )
    {
        exception_type = exception_keeper_type_54;
        exception_value = exception_keeper_value_54;
        exception_tb = exception_keeper_tb_54;

        goto try_finally_handler_58;
    }

    goto finally_end_57;
    finally_end_57:;
    tmp_append_to_11 = tmp_listcontr_11__listcontr_result.object;

    tmp_called_62 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_StringConverter );

    if (unlikely( tmp_called_62 == NULL ))
    {
        tmp_called_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StringConverter );
    }

    if ( tmp_called_62 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172610 ], 44, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1555;
        goto try_finally_handler_58;
    }

    tmp_call_pos_9 = PyTuple_New( 1 );
    tmp_tuple_element_12 = par_dtype.object;

    if ( tmp_tuple_element_12 == NULL )
    {
        Py_DECREF( tmp_call_pos_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1555;
        goto try_finally_handler_58;
    }

    Py_INCREF( tmp_tuple_element_12 );
    PyTuple_SET_ITEM( tmp_call_pos_9, 0, tmp_tuple_element_12 );
    tmp_call_kw_7 = _PyDict_NewPresized( 3 );
    tmp_dict_value_15 = Py_True;
    tmp_dict_key_15 = const_str_plain_locked;
    PyDict_SetItem( tmp_call_kw_7, tmp_dict_key_15, tmp_dict_value_15 );
    tmp_dict_value_16 = var_miss.object;

    if ( tmp_dict_value_16 == NULL )
    {
        Py_DECREF( tmp_call_pos_9 );
        Py_DECREF( tmp_call_kw_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172654 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1556;
        goto try_finally_handler_58;
    }

    tmp_dict_key_16 = const_str_plain_missing_values;
    PyDict_SetItem( tmp_call_kw_7, tmp_dict_key_16, tmp_dict_value_16 );
    tmp_dict_value_17 = var_fill.object;

    if ( tmp_dict_value_17 == NULL )
    {
        Py_DECREF( tmp_call_pos_9 );
        Py_DECREF( tmp_call_kw_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 9691 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1556;
        goto try_finally_handler_58;
    }

    tmp_dict_key_17 = const_str_plain_default;
    PyDict_SetItem( tmp_call_kw_7, tmp_dict_key_17, tmp_dict_value_17 );
    frame_function->f_lineno = 1556;
    tmp_append_value_11 = CALL_FUNCTION( tmp_called_62, tmp_call_pos_9, tmp_call_kw_7 );
    Py_DECREF( tmp_call_pos_9 );
    Py_DECREF( tmp_call_kw_7 );
    if ( tmp_append_value_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1556;
        goto try_finally_handler_58;
    }
    tmp_res = PyList_Append( tmp_append_to_11, tmp_append_value_11 );
    Py_DECREF( tmp_append_value_11 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1555;
        goto try_finally_handler_58;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1555;
        goto try_finally_handler_58;
    }
    goto loop_start_21;
    loop_end_21:;
    tmp_assign_source_160 = tmp_listcontr_11__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_58:;
    exception_keeper_type_55 = exception_type;
    exception_keeper_value_55 = exception_value;
    exception_keeper_tb_55 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_44 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_11__iter_value_0.object );
    tmp_listcontr_11__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_44;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_55 != NULL )
    {
        exception_type = exception_keeper_type_55;
        exception_value = exception_keeper_value_55;
        exception_tb = exception_keeper_tb_55;

        goto try_finally_handler_57;
    }

    goto finally_end_58;
    finally_end_58:;
    if (par_converters.object == NULL)
    {
        par_converters.object = INCREASE_REFCOUNT( tmp_assign_source_160 );
    }
    else
    {
        PyObject *old = par_converters.object;
        par_converters.object = INCREASE_REFCOUNT( tmp_assign_source_160 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_57:;
    exception_keeper_type_56 = exception_type;
    exception_keeper_value_56 = exception_value;
    exception_keeper_tb_56 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_45 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_11__listcontr_result.object );
    tmp_listcontr_11__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_11__listcontr_iter.object );
    tmp_listcontr_11__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_45;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_56 != NULL )
    {
        exception_type = exception_keeper_type_56;
        exception_value = exception_keeper_value_56;
        exception_tb = exception_keeper_tb_56;

        goto frame_exception_exit_1;
    }

    goto finally_end_59;
    finally_end_59:;
    branch_end_50:;
    branch_end_49:;
    tmp_assign_source_169 = PyList_New( 0 );
    assert( var_uc_update.object == NULL );
    var_uc_update.object = tmp_assign_source_169;

    tmp_source_name_39 = var_user_converters.object;

    if ( tmp_source_name_39 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170823 ], 61, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1560;
        goto frame_exception_exit_1;
    }

    tmp_called_63 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain_items );
    if ( tmp_called_63 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1560;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1560;
    tmp_iter_arg_31 = CALL_FUNCTION_NO_ARGS( tmp_called_63 );
    Py_DECREF( tmp_called_63 );
    if ( tmp_iter_arg_31 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1560;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_170 = MAKE_ITERATOR( tmp_iter_arg_31 );
    Py_DECREF( tmp_iter_arg_31 );
    if ( tmp_assign_source_170 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1560;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_10__for_iterator.object == NULL );
    tmp_for_loop_10__for_iterator.object = tmp_assign_source_170;

    // Tried code
    loop_start_22:;
    tmp_next_source_21 = tmp_for_loop_10__for_iterator.object;

    tmp_assign_source_171 = ITERATOR_NEXT( tmp_next_source_21 );
    if (tmp_assign_source_171 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_22;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1560;
            goto try_finally_handler_60;
        }
    }

    if (tmp_for_loop_10__iter_value.object == NULL)
    {
        tmp_for_loop_10__iter_value.object = tmp_assign_source_171;
    }
    else
    {
        PyObject *old = tmp_for_loop_10__iter_value.object;
        tmp_for_loop_10__iter_value.object = tmp_assign_source_171;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_32 = tmp_for_loop_10__iter_value.object;

    tmp_assign_source_172 = MAKE_ITERATOR( tmp_iter_arg_32 );
    if ( tmp_assign_source_172 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1560;
        goto try_finally_handler_61;
    }
    if (tmp_tuple_unpack_8__source_iter.object == NULL)
    {
        tmp_tuple_unpack_8__source_iter.object = tmp_assign_source_172;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_8__source_iter.object;
        tmp_tuple_unpack_8__source_iter.object = tmp_assign_source_172;
        Py_DECREF( old );
    }
    tmp_unpack_16 = tmp_tuple_unpack_8__source_iter.object;

    tmp_assign_source_173 = UNPACK_PARAMETER_NEXT( tmp_unpack_16, 0 );
    if ( tmp_assign_source_173 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1560;
        goto try_finally_handler_61;
    }
    if (tmp_tuple_unpack_8__element_1.object == NULL)
    {
        tmp_tuple_unpack_8__element_1.object = tmp_assign_source_173;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_8__element_1.object;
        tmp_tuple_unpack_8__element_1.object = tmp_assign_source_173;
        Py_DECREF( old );
    }
    tmp_unpack_17 = tmp_tuple_unpack_8__source_iter.object;

    tmp_assign_source_174 = UNPACK_PARAMETER_NEXT( tmp_unpack_17, 1 );
    if ( tmp_assign_source_174 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1560;
        goto try_finally_handler_61;
    }
    if (tmp_tuple_unpack_8__element_2.object == NULL)
    {
        tmp_tuple_unpack_8__element_2.object = tmp_assign_source_174;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_8__element_2.object;
        tmp_tuple_unpack_8__element_2.object = tmp_assign_source_174;
        Py_DECREF( old );
    }
    tmp_iterator_name_8 = tmp_tuple_unpack_8__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_8 ); assert( PyIter_Check( tmp_iterator_name_8 ) );

    tmp_iterator_attempt_8 = (*Py_TYPE( tmp_iterator_name_8 )->tp_iternext)( tmp_iterator_name_8 );

    if (likely( tmp_iterator_attempt_8 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_61;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_8 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_61;
    }
    tmp_assign_source_175 = tmp_tuple_unpack_8__element_1.object;

    if (var_i.storage->object == NULL)
    {
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_175 );
    }
    else
    {
        PyObject *old = var_i.storage->object;
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_175 );
        Py_DECREF( old );
    }
    tmp_assign_source_176 = tmp_tuple_unpack_8__element_2.object;

    if (var_conv.object == NULL)
    {
        var_conv.object = INCREASE_REFCOUNT( tmp_assign_source_176 );
    }
    else
    {
        PyObject *old = var_conv.object;
        var_conv.object = INCREASE_REFCOUNT( tmp_assign_source_176 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_61:;
    exception_keeper_type_57 = exception_type;
    exception_keeper_value_57 = exception_value;
    exception_keeper_tb_57 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_46 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_8__source_iter.object );
    tmp_tuple_unpack_8__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_8__element_1.object );
    tmp_tuple_unpack_8__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_8__element_2.object );
    tmp_tuple_unpack_8__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_46;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_57 != NULL )
    {
        exception_type = exception_keeper_type_57;
        exception_value = exception_keeper_value_57;
        exception_tb = exception_keeper_tb_57;

        goto try_finally_handler_60;
    }

    goto finally_end_60;
    finally_end_60:;
    tmp_called_64 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__is_string_like );

    if (unlikely( tmp_called_64 == NULL ))
    {
        tmp_called_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__is_string_like );
    }

    if ( tmp_called_64 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155296 ], 44, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1562;
        goto try_finally_handler_60;
    }

    tmp_call_arg_element_55 = var_i.storage->object;

    if ( tmp_call_arg_element_55 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1562;
        goto try_finally_handler_60;
    }

    frame_function->f_lineno = 1562;
    tmp_cond_value_22 = CALL_FUNCTION_WITH_ARGS1( tmp_called_64, tmp_call_arg_element_55 );
    if ( tmp_cond_value_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1562;
        goto try_finally_handler_60;
    }
    tmp_cond_truth_22 = CHECK_IF_TRUE( tmp_cond_value_22 );
    if ( tmp_cond_truth_22 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_22 );

        frame_function->f_lineno = 1562;
        goto try_finally_handler_60;
    }
    Py_DECREF( tmp_cond_value_22 );
    if (tmp_cond_truth_22 == 1)
    {
        goto branch_yes_51;
    }
    else
    {
        goto branch_no_51;
    }
    branch_yes_51:;
    // Tried block of try/except
    tmp_source_name_40 = par_names.object;

    if ( tmp_source_name_40 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1564;
        goto try_except_handler_9;
    }

    tmp_called_65 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain_index );
    if ( tmp_called_65 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1564;
        goto try_except_handler_9;
    }
    tmp_call_arg_element_56 = var_i.storage->object;

    if ( tmp_call_arg_element_56 == NULL )
    {
        Py_DECREF( tmp_called_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1564;
        goto try_except_handler_9;
    }

    frame_function->f_lineno = 1564;
    tmp_assign_source_177 = CALL_FUNCTION_WITH_ARGS1( tmp_called_65, tmp_call_arg_element_56 );
    Py_DECREF( tmp_called_65 );
    if ( tmp_assign_source_177 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1564;
        goto try_except_handler_9;
    }
    if (var_i.storage->object == NULL)
    {
        var_i.storage->object = tmp_assign_source_177;
    }
    else
    {
        PyObject *old = var_i.storage->object;
        var_i.storage->object = tmp_assign_source_177;
        Py_DECREF( old );
    }
    goto try_except_end_9;
    try_except_handler_9:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_26 = PyThreadState_GET()->exc_type;
    tmp_compare_right_26 = PyExc_ValueError;
    tmp_exc_match_exception_match_9 = EXCEPTION_MATCH_BOOL( tmp_compare_left_26, tmp_compare_right_26 );
    if ( tmp_exc_match_exception_match_9 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1565;
        goto try_finally_handler_60;
    }
    if (tmp_exc_match_exception_match_9 == 1)
    {
        goto branch_yes_52;
    }
    else
    {
        goto branch_no_52;
    }
    branch_yes_52:;
    goto loop_start_22;
    goto branch_end_52;
    branch_no_52:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_60;
    branch_end_52:;
    try_except_end_9:;
    goto branch_end_51;
    branch_no_51:;
    tmp_cond_value_23 = par_usecols.object;

    if ( tmp_cond_value_23 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1567;
        goto try_finally_handler_60;
    }

    tmp_cond_truth_23 = CHECK_IF_TRUE( tmp_cond_value_23 );
    if ( tmp_cond_truth_23 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1567;
        goto try_finally_handler_60;
    }
    if (tmp_cond_truth_23 == 1)
    {
        goto branch_yes_53;
    }
    else
    {
        goto branch_no_53;
    }
    branch_yes_53:;
    // Tried block of try/except
    tmp_source_name_41 = par_usecols.object;

    if ( tmp_source_name_41 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1569;
        goto try_except_handler_10;
    }

    tmp_called_66 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain_index );
    if ( tmp_called_66 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1569;
        goto try_except_handler_10;
    }
    tmp_call_arg_element_57 = var_i.storage->object;

    if ( tmp_call_arg_element_57 == NULL )
    {
        Py_DECREF( tmp_called_66 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1569;
        goto try_except_handler_10;
    }

    frame_function->f_lineno = 1569;
    tmp_assign_source_178 = CALL_FUNCTION_WITH_ARGS1( tmp_called_66, tmp_call_arg_element_57 );
    Py_DECREF( tmp_called_66 );
    if ( tmp_assign_source_178 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1569;
        goto try_except_handler_10;
    }
    if (var_i.storage->object == NULL)
    {
        var_i.storage->object = tmp_assign_source_178;
    }
    else
    {
        PyObject *old = var_i.storage->object;
        var_i.storage->object = tmp_assign_source_178;
        Py_DECREF( old );
    }
    goto try_except_end_10;
    try_except_handler_10:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_27 = PyThreadState_GET()->exc_type;
    tmp_compare_right_27 = PyExc_ValueError;
    tmp_exc_match_exception_match_10 = EXCEPTION_MATCH_BOOL( tmp_compare_left_27, tmp_compare_right_27 );
    if ( tmp_exc_match_exception_match_10 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1570;
        goto try_finally_handler_60;
    }
    if (tmp_exc_match_exception_match_10 == 1)
    {
        goto branch_yes_54;
    }
    else
    {
        goto branch_no_54;
    }
    branch_yes_54:;
    goto loop_start_22;
    goto branch_end_54;
    branch_no_54:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_60;
    branch_end_54:;
    try_except_end_10:;
    branch_no_53:;
    branch_end_51:;
    tmp_len_arg_6 = var_first_line.object;

    if ( tmp_len_arg_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170934 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1574;
        goto try_finally_handler_60;
    }

    tmp_cond_value_24 = BUILTIN_LEN( tmp_len_arg_6 );
    if ( tmp_cond_value_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1574;
        goto try_finally_handler_60;
    }
    tmp_cond_truth_24 = CHECK_IF_TRUE( tmp_cond_value_24 );
    if ( tmp_cond_truth_24 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_24 );

        frame_function->f_lineno = 1574;
        goto try_finally_handler_60;
    }
    Py_DECREF( tmp_cond_value_24 );
    if (tmp_cond_truth_24 == 1)
    {
        goto branch_yes_55;
    }
    else
    {
        goto branch_no_55;
    }
    branch_yes_55:;
    tmp_subscr_target_6 = var_first_values.object;

    if ( tmp_subscr_target_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172008 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1575;
        goto try_finally_handler_60;
    }

    tmp_subscr_subscript_6 = var_i.storage->object;

    if ( tmp_subscr_subscript_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1575;
        goto try_finally_handler_60;
    }

    tmp_assign_source_179 = LOOKUP_SUBSCRIPT( tmp_subscr_target_6, tmp_subscr_subscript_6 );
    if ( tmp_assign_source_179 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1575;
        goto try_finally_handler_60;
    }
    if (var_testing_value.object == NULL)
    {
        var_testing_value.object = tmp_assign_source_179;
    }
    else
    {
        PyObject *old = var_testing_value.object;
        var_testing_value.object = tmp_assign_source_179;
        Py_DECREF( old );
    }
    goto branch_end_55;
    branch_no_55:;
    tmp_assign_source_180 = Py_None;
    if (var_testing_value.object == NULL)
    {
        var_testing_value.object = INCREASE_REFCOUNT( tmp_assign_source_180 );
    }
    else
    {
        PyObject *old = var_testing_value.object;
        var_testing_value.object = INCREASE_REFCOUNT( tmp_assign_source_180 );
        Py_DECREF( old );
    }
    branch_end_55:;
    tmp_subscr_target_7 = par_converters.object;

    if ( tmp_subscr_target_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170342 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1578;
        goto try_finally_handler_60;
    }

    tmp_subscr_subscript_7 = var_i.storage->object;

    if ( tmp_subscr_subscript_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1578;
        goto try_finally_handler_60;
    }

    tmp_source_name_42 = LOOKUP_SUBSCRIPT( tmp_subscr_target_7, tmp_subscr_subscript_7 );
    if ( tmp_source_name_42 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1578;
        goto try_finally_handler_60;
    }
    tmp_called_67 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain_update );
    Py_DECREF( tmp_source_name_42 );
    if ( tmp_called_67 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1578;
        goto try_finally_handler_60;
    }
    tmp_call_pos_10 = PyTuple_New( 1 );
    tmp_tuple_element_13 = var_conv.object;

    if ( tmp_tuple_element_13 == NULL )
    {
        Py_DECREF( tmp_called_67 );
        Py_DECREF( tmp_call_pos_10 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170884 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1578;
        goto try_finally_handler_60;
    }

    Py_INCREF( tmp_tuple_element_13 );
    PyTuple_SET_ITEM( tmp_call_pos_10, 0, tmp_tuple_element_13 );
    tmp_call_kw_8 = _PyDict_NewPresized( 4 );
    tmp_dict_value_18 = Py_True;
    tmp_dict_key_18 = const_str_plain_locked;
    PyDict_SetItem( tmp_call_kw_8, tmp_dict_key_18, tmp_dict_value_18 );
    tmp_dict_value_19 = var_testing_value.object;

    tmp_dict_key_19 = const_str_plain_testing_value;
    PyDict_SetItem( tmp_call_kw_8, tmp_dict_key_19, tmp_dict_value_19 );
    tmp_subscr_target_8 = par_filling_values.object;

    if ( tmp_subscr_target_8 == NULL )
    {
        Py_DECREF( tmp_called_67 );
        Py_DECREF( tmp_call_pos_10 );
        Py_DECREF( tmp_call_kw_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172485 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1580;
        goto try_finally_handler_60;
    }

    tmp_subscr_subscript_8 = var_i.storage->object;

    if ( tmp_subscr_subscript_8 == NULL )
    {
        Py_DECREF( tmp_called_67 );
        Py_DECREF( tmp_call_pos_10 );
        Py_DECREF( tmp_call_kw_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1580;
        goto try_finally_handler_60;
    }

    tmp_dict_value_20 = LOOKUP_SUBSCRIPT( tmp_subscr_target_8, tmp_subscr_subscript_8 );
    if ( tmp_dict_value_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_67 );
        Py_DECREF( tmp_call_pos_10 );
        Py_DECREF( tmp_call_kw_8 );

        frame_function->f_lineno = 1580;
        goto try_finally_handler_60;
    }
    tmp_dict_key_20 = const_str_plain_default;
    PyDict_SetItem( tmp_call_kw_8, tmp_dict_key_20, tmp_dict_value_20 );
    Py_DECREF( tmp_dict_value_20 );
    tmp_subscr_target_9 = par_missing_values.object;

    if ( tmp_subscr_target_9 == NULL )
    {
        Py_DECREF( tmp_called_67 );
        Py_DECREF( tmp_call_pos_10 );
        Py_DECREF( tmp_call_kw_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156787 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1581;
        goto try_finally_handler_60;
    }

    tmp_subscr_subscript_9 = var_i.storage->object;

    if ( tmp_subscr_subscript_9 == NULL )
    {
        Py_DECREF( tmp_called_67 );
        Py_DECREF( tmp_call_pos_10 );
        Py_DECREF( tmp_call_kw_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1581;
        goto try_finally_handler_60;
    }

    tmp_dict_value_21 = LOOKUP_SUBSCRIPT( tmp_subscr_target_9, tmp_subscr_subscript_9 );
    if ( tmp_dict_value_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_67 );
        Py_DECREF( tmp_call_pos_10 );
        Py_DECREF( tmp_call_kw_8 );

        frame_function->f_lineno = 1581;
        goto try_finally_handler_60;
    }
    tmp_dict_key_21 = const_str_plain_missing_values;
    PyDict_SetItem( tmp_call_kw_8, tmp_dict_key_21, tmp_dict_value_21 );
    Py_DECREF( tmp_dict_value_21 );
    frame_function->f_lineno = 1581;
    tmp_unused = CALL_FUNCTION( tmp_called_67, tmp_call_pos_10, tmp_call_kw_8 );
    Py_DECREF( tmp_called_67 );
    Py_DECREF( tmp_call_pos_10 );
    Py_DECREF( tmp_call_kw_8 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1581;
        goto try_finally_handler_60;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_43 = var_uc_update.object;

    if ( tmp_source_name_43 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172704 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1582;
        goto try_finally_handler_60;
    }

    tmp_called_68 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain_append );
    if ( tmp_called_68 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1582;
        goto try_finally_handler_60;
    }
    tmp_call_arg_element_58 = PyTuple_New( 2 );
    tmp_tuple_element_14 = var_i.storage->object;

    if ( tmp_tuple_element_14 == NULL )
    {
        Py_DECREF( tmp_called_68 );
        Py_DECREF( tmp_call_arg_element_58 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1582;
        goto try_finally_handler_60;
    }

    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_call_arg_element_58, 0, tmp_tuple_element_14 );
    tmp_tuple_element_14 = var_conv.object;

    if ( tmp_tuple_element_14 == NULL )
    {
        Py_DECREF( tmp_called_68 );
        Py_DECREF( tmp_call_arg_element_58 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170884 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1582;
        goto try_finally_handler_60;
    }

    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_call_arg_element_58, 1, tmp_tuple_element_14 );
    frame_function->f_lineno = 1582;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_68, tmp_call_arg_element_58 );
    Py_DECREF( tmp_called_68 );
    Py_DECREF( tmp_call_arg_element_58 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1582;
        goto try_finally_handler_60;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1560;
        goto try_finally_handler_60;
    }
    goto loop_start_22;
    loop_end_22:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_60:;
    exception_keeper_type_58 = exception_type;
    exception_keeper_value_58 = exception_value;
    exception_keeper_tb_58 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_47 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_10__iter_value.object );
    tmp_for_loop_10__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_10__for_iterator.object );
    tmp_for_loop_10__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_47;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_58 != NULL )
    {
        exception_type = exception_keeper_type_58;
        exception_value = exception_keeper_value_58;
        exception_tb = exception_keeper_tb_58;

        goto frame_exception_exit_1;
    }

    goto finally_end_61;
    finally_end_61:;
    tmp_source_name_44 = var_user_converters.object;

    if ( tmp_source_name_44 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170823 ], 61, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1584;
        goto frame_exception_exit_1;
    }

    tmp_called_69 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain_update );
    if ( tmp_called_69 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1584;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_59 = var_uc_update.object;

    if ( tmp_call_arg_element_59 == NULL )
    {
        Py_DECREF( tmp_called_69 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172704 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1584;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1584;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_69, tmp_call_arg_element_59 );
    Py_DECREF( tmp_called_69 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1584;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code
    tmp_assign_source_181 = NULL;
    // Tried code
    tmp_iter_arg_33 = par_converters.object;

    if ( tmp_iter_arg_33 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170342 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1586;
        goto try_finally_handler_63;
    }

    tmp_assign_source_182 = MAKE_ITERATOR( tmp_iter_arg_33 );
    if ( tmp_assign_source_182 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1586;
        goto try_finally_handler_63;
    }
    assert( tmp_listcontr_12__listcontr_iter.object == NULL );
    tmp_listcontr_12__listcontr_iter.object = tmp_assign_source_182;

    tmp_assign_source_183 = PyList_New( 0 );
    assert( tmp_listcontr_12__listcontr_result.object == NULL );
    tmp_listcontr_12__listcontr_result.object = tmp_assign_source_183;

    loop_start_23:;
    tmp_next_source_22 = tmp_listcontr_12__listcontr_iter.object;

    tmp_assign_source_184 = ITERATOR_NEXT( tmp_next_source_22 );
    if (tmp_assign_source_184 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_23;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1586;
            goto try_finally_handler_63;
        }
    }

    if (tmp_listcontr_12__iter_value_0.object == NULL)
    {
        tmp_listcontr_12__iter_value_0.object = tmp_assign_source_184;
    }
    else
    {
        PyObject *old = tmp_listcontr_12__iter_value_0.object;
        tmp_listcontr_12__iter_value_0.object = tmp_assign_source_184;
        Py_DECREF( old );
    }
    tmp_assign_source_185 = tmp_listcontr_12__iter_value_0.object;

    if (var__.object == NULL)
    {
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_185 );
    }
    else
    {
        PyObject *old = var__.object;
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_185 );
        Py_DECREF( old );
    }
    tmp_append_to_12 = tmp_listcontr_12__listcontr_result.object;

    tmp_source_name_45 = var__.object;

    tmp_append_value_12 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain_missing_values );
    if ( tmp_append_value_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1586;
        goto try_finally_handler_63;
    }
    tmp_res = PyList_Append( tmp_append_to_12, tmp_append_value_12 );
    Py_DECREF( tmp_append_value_12 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1586;
        goto try_finally_handler_63;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1586;
        goto try_finally_handler_63;
    }
    goto loop_start_23;
    loop_end_23:;
    tmp_assign_source_181 = tmp_listcontr_12__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_63:;
    exception_keeper_type_59 = exception_type;
    exception_keeper_value_59 = exception_value;
    exception_keeper_tb_59 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_48 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_12__iter_value_0.object );
    tmp_listcontr_12__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_48;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_59 != NULL )
    {
        exception_type = exception_keeper_type_59;
        exception_value = exception_keeper_value_59;
        exception_tb = exception_keeper_tb_59;

        goto try_finally_handler_62;
    }

    goto finally_end_62;
    finally_end_62:;
    assert( var_miss_chars.object == NULL );
    var_miss_chars.object = INCREASE_REFCOUNT( tmp_assign_source_181 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_62:;
    exception_keeper_type_60 = exception_type;
    exception_keeper_value_60 = exception_value;
    exception_keeper_tb_60 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_49 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_12__listcontr_result.object );
    tmp_listcontr_12__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_12__listcontr_iter.object );
    tmp_listcontr_12__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_49;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_60 != NULL )
    {
        exception_type = exception_keeper_type_60;
        exception_value = exception_keeper_value_60;
        exception_tb = exception_keeper_tb_60;

        goto frame_exception_exit_1;
    }

    goto finally_end_63;
    finally_end_63:;
    tmp_assign_source_186 = PyList_New( 0 );
    assert( var_rows.object == NULL );
    var_rows.object = tmp_assign_source_186;

    tmp_source_name_46 = var_rows.object;

    tmp_assign_source_187 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain_append );
    if ( tmp_assign_source_187 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1592;
        goto frame_exception_exit_1;
    }
    assert( var_append_to_rows.object == NULL );
    var_append_to_rows.object = tmp_assign_source_187;

    tmp_cond_value_25 = par_usemask.object;

    if ( tmp_cond_value_25 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171857 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1594;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_25 = CHECK_IF_TRUE( tmp_cond_value_25 );
    if ( tmp_cond_truth_25 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1594;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_25 == 1)
    {
        goto branch_yes_56;
    }
    else
    {
        goto branch_no_56;
    }
    branch_yes_56:;
    tmp_assign_source_188 = PyList_New( 0 );
    assert( var_masks.object == NULL );
    var_masks.object = tmp_assign_source_188;

    tmp_source_name_47 = var_masks.object;

    tmp_assign_source_189 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain_append );
    if ( tmp_assign_source_189 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1596;
        goto frame_exception_exit_1;
    }
    assert( var_append_to_masks.object == NULL );
    var_append_to_masks.object = tmp_assign_source_189;

    branch_no_56:;
    tmp_assign_source_190 = PyList_New( 0 );
    assert( var_invalid.object == NULL );
    var_invalid.object = tmp_assign_source_190;

    tmp_source_name_48 = var_invalid.object;

    tmp_assign_source_191 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain_append );
    if ( tmp_assign_source_191 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1599;
        goto frame_exception_exit_1;
    }
    assert( var_append_to_invalid.object == NULL );
    var_append_to_invalid.object = tmp_assign_source_191;

    tmp_called_70 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    if ( tmp_called_70 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1602;
        goto frame_exception_exit_1;
    }
    tmp_source_name_49 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_itertools );

    if (unlikely( tmp_source_name_49 == NULL ))
    {
        tmp_source_name_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_itertools );
    }

    if ( tmp_source_name_49 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 20136 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1602;
        goto frame_exception_exit_1;
    }

    tmp_called_71 = LOOKUP_ATTRIBUTE( tmp_source_name_49, const_str_plain_chain );
    if ( tmp_called_71 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1602;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_61 = PyList_New( 1 );
    tmp_list_element_6 = var_first_line.object;

    if ( tmp_list_element_6 == NULL )
    {
        Py_DECREF( tmp_called_71 );
        Py_DECREF( tmp_call_arg_element_61 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170934 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1602;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_6 );
    PyList_SET_ITEM( tmp_call_arg_element_61, 0, tmp_list_element_6 );
    tmp_call_arg_element_62 = var_fhd.object;

    if ( tmp_call_arg_element_62 == NULL )
    {
        Py_DECREF( tmp_called_71 );
        Py_DECREF( tmp_call_arg_element_61 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155399 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1602;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1602;
    tmp_call_arg_element_60 = CALL_FUNCTION_WITH_ARGS2( tmp_called_71, tmp_call_arg_element_61, tmp_call_arg_element_62 );
    Py_DECREF( tmp_called_71 );
    Py_DECREF( tmp_call_arg_element_61 );
    if ( tmp_call_arg_element_60 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1602;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1602;
    tmp_iter_arg_34 = CALL_FUNCTION_WITH_ARGS1( tmp_called_70, tmp_call_arg_element_60 );
    Py_DECREF( tmp_call_arg_element_60 );
    if ( tmp_iter_arg_34 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1602;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_192 = MAKE_ITERATOR( tmp_iter_arg_34 );
    Py_DECREF( tmp_iter_arg_34 );
    if ( tmp_assign_source_192 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1602;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_11__for_iterator.object == NULL );
    tmp_for_loop_11__for_iterator.object = tmp_assign_source_192;

    // Tried code
    loop_start_24:;
    tmp_next_source_23 = tmp_for_loop_11__for_iterator.object;

    tmp_assign_source_193 = ITERATOR_NEXT( tmp_next_source_23 );
    if (tmp_assign_source_193 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_24;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1602;
            goto try_finally_handler_64;
        }
    }

    if (tmp_for_loop_11__iter_value.object == NULL)
    {
        tmp_for_loop_11__iter_value.object = tmp_assign_source_193;
    }
    else
    {
        PyObject *old = tmp_for_loop_11__iter_value.object;
        tmp_for_loop_11__iter_value.object = tmp_assign_source_193;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_35 = tmp_for_loop_11__iter_value.object;

    tmp_assign_source_194 = MAKE_ITERATOR( tmp_iter_arg_35 );
    if ( tmp_assign_source_194 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1602;
        goto try_finally_handler_65;
    }
    if (tmp_tuple_unpack_9__source_iter.object == NULL)
    {
        tmp_tuple_unpack_9__source_iter.object = tmp_assign_source_194;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_9__source_iter.object;
        tmp_tuple_unpack_9__source_iter.object = tmp_assign_source_194;
        Py_DECREF( old );
    }
    tmp_unpack_18 = tmp_tuple_unpack_9__source_iter.object;

    tmp_assign_source_195 = UNPACK_PARAMETER_NEXT( tmp_unpack_18, 0 );
    if ( tmp_assign_source_195 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1602;
        goto try_finally_handler_65;
    }
    if (tmp_tuple_unpack_9__element_1.object == NULL)
    {
        tmp_tuple_unpack_9__element_1.object = tmp_assign_source_195;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_9__element_1.object;
        tmp_tuple_unpack_9__element_1.object = tmp_assign_source_195;
        Py_DECREF( old );
    }
    tmp_unpack_19 = tmp_tuple_unpack_9__source_iter.object;

    tmp_assign_source_196 = UNPACK_PARAMETER_NEXT( tmp_unpack_19, 1 );
    if ( tmp_assign_source_196 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1602;
        goto try_finally_handler_65;
    }
    if (tmp_tuple_unpack_9__element_2.object == NULL)
    {
        tmp_tuple_unpack_9__element_2.object = tmp_assign_source_196;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_9__element_2.object;
        tmp_tuple_unpack_9__element_2.object = tmp_assign_source_196;
        Py_DECREF( old );
    }
    tmp_iterator_name_9 = tmp_tuple_unpack_9__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_9 ); assert( PyIter_Check( tmp_iterator_name_9 ) );

    tmp_iterator_attempt_9 = (*Py_TYPE( tmp_iterator_name_9 )->tp_iternext)( tmp_iterator_name_9 );

    if (likely( tmp_iterator_attempt_9 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_65;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_9 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_65;
    }
    tmp_assign_source_197 = tmp_tuple_unpack_9__element_1.object;

    if (var_i.storage->object == NULL)
    {
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_197 );
    }
    else
    {
        PyObject *old = var_i.storage->object;
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_197 );
        Py_DECREF( old );
    }
    tmp_assign_source_198 = tmp_tuple_unpack_9__element_2.object;

    if (var_line.object == NULL)
    {
        var_line.object = INCREASE_REFCOUNT( tmp_assign_source_198 );
    }
    else
    {
        PyObject *old = var_line.object;
        var_line.object = INCREASE_REFCOUNT( tmp_assign_source_198 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_65:;
    exception_keeper_type_61 = exception_type;
    exception_keeper_value_61 = exception_value;
    exception_keeper_tb_61 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_50 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_9__source_iter.object );
    tmp_tuple_unpack_9__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_9__element_1.object );
    tmp_tuple_unpack_9__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_9__element_2.object );
    tmp_tuple_unpack_9__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_50;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_61 != NULL )
    {
        exception_type = exception_keeper_type_61;
        exception_value = exception_keeper_value_61;
        exception_tb = exception_keeper_tb_61;

        goto try_finally_handler_64;
    }

    goto finally_end_64;
    finally_end_64:;
    tmp_called_72 = var_split_line.object;

    if ( tmp_called_72 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170598 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1603;
        goto try_finally_handler_64;
    }

    tmp_call_arg_element_63 = var_line.object;

    if ( tmp_call_arg_element_63 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50418 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1603;
        goto try_finally_handler_64;
    }

    frame_function->f_lineno = 1603;
    tmp_assign_source_199 = CALL_FUNCTION_WITH_ARGS1( tmp_called_72, tmp_call_arg_element_63 );
    if ( tmp_assign_source_199 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1603;
        goto try_finally_handler_64;
    }
    if (var_values.object == NULL)
    {
        var_values.object = tmp_assign_source_199;
    }
    else
    {
        PyObject *old = var_values.object;
        var_values.object = tmp_assign_source_199;
        Py_DECREF( old );
    }
    tmp_len_arg_7 = var_values.object;

    tmp_assign_source_200 = BUILTIN_LEN( tmp_len_arg_7 );
    if ( tmp_assign_source_200 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1604;
        goto try_finally_handler_64;
    }
    if (var_nbvalues.object == NULL)
    {
        var_nbvalues.object = tmp_assign_source_200;
    }
    else
    {
        PyObject *old = var_nbvalues.object;
        var_nbvalues.object = tmp_assign_source_200;
        Py_DECREF( old );
    }
    tmp_compare_left_28 = var_nbvalues.object;

    tmp_compare_right_28 = const_int_0;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_28, tmp_compare_right_28 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1606;
        goto try_finally_handler_64;
    }
    if (tmp_cmp_Eq_2 == 1)
    {
        goto branch_yes_57;
    }
    else
    {
        goto branch_no_57;
    }
    branch_yes_57:;
    goto loop_start_24;
    branch_no_57:;
    tmp_cond_value_26 = par_usecols.object;

    if ( tmp_cond_value_26 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1609;
        goto try_finally_handler_64;
    }

    tmp_cond_truth_26 = CHECK_IF_TRUE( tmp_cond_value_26 );
    if ( tmp_cond_truth_26 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1609;
        goto try_finally_handler_64;
    }
    if (tmp_cond_truth_26 == 1)
    {
        goto branch_yes_58;
    }
    else
    {
        goto branch_no_58;
    }
    branch_yes_58:;
    // Tried block of try/except
    // Tried code
    tmp_assign_source_201 = NULL;
    // Tried code
    tmp_iter_arg_36 = par_usecols.object;

    if ( tmp_iter_arg_36 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170398 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1611;
        goto try_finally_handler_67;
    }

    tmp_assign_source_202 = MAKE_ITERATOR( tmp_iter_arg_36 );
    if ( tmp_assign_source_202 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1611;
        goto try_finally_handler_67;
    }
    if (tmp_listcontr_13__listcontr_iter.object == NULL)
    {
        tmp_listcontr_13__listcontr_iter.object = tmp_assign_source_202;
    }
    else
    {
        PyObject *old = tmp_listcontr_13__listcontr_iter.object;
        tmp_listcontr_13__listcontr_iter.object = tmp_assign_source_202;
        Py_DECREF( old );
    }
    tmp_assign_source_203 = PyList_New( 0 );
    if (tmp_listcontr_13__listcontr_result.object == NULL)
    {
        tmp_listcontr_13__listcontr_result.object = tmp_assign_source_203;
    }
    else
    {
        PyObject *old = tmp_listcontr_13__listcontr_result.object;
        tmp_listcontr_13__listcontr_result.object = tmp_assign_source_203;
        Py_DECREF( old );
    }
    loop_start_25:;
    tmp_next_source_24 = tmp_listcontr_13__listcontr_iter.object;

    tmp_assign_source_204 = ITERATOR_NEXT( tmp_next_source_24 );
    if (tmp_assign_source_204 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_25;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1611;
            goto try_finally_handler_67;
        }
    }

    if (tmp_listcontr_13__iter_value_0.object == NULL)
    {
        tmp_listcontr_13__iter_value_0.object = tmp_assign_source_204;
    }
    else
    {
        PyObject *old = tmp_listcontr_13__iter_value_0.object;
        tmp_listcontr_13__iter_value_0.object = tmp_assign_source_204;
        Py_DECREF( old );
    }
    tmp_assign_source_205 = tmp_listcontr_13__iter_value_0.object;

    if (var__.object == NULL)
    {
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_205 );
    }
    else
    {
        PyObject *old = var__.object;
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_205 );
        Py_DECREF( old );
    }
    tmp_append_to_13 = tmp_listcontr_13__listcontr_result.object;

    tmp_subscr_target_10 = var_values.object;

    if ( tmp_subscr_target_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 20224 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1611;
        goto try_finally_handler_67;
    }

    tmp_subscr_subscript_10 = var__.object;

    tmp_append_value_13 = LOOKUP_SUBSCRIPT( tmp_subscr_target_10, tmp_subscr_subscript_10 );
    if ( tmp_append_value_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1611;
        goto try_finally_handler_67;
    }
    tmp_res = PyList_Append( tmp_append_to_13, tmp_append_value_13 );
    Py_DECREF( tmp_append_value_13 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1611;
        goto try_finally_handler_67;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1611;
        goto try_finally_handler_67;
    }
    goto loop_start_25;
    loop_end_25:;
    tmp_assign_source_201 = tmp_listcontr_13__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_67:;
    exception_keeper_type_62 = exception_type;
    exception_keeper_value_62 = exception_value;
    exception_keeper_tb_62 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_51 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_13__iter_value_0.object );
    tmp_listcontr_13__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_51;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_62 != NULL )
    {
        exception_type = exception_keeper_type_62;
        exception_value = exception_keeper_value_62;
        exception_tb = exception_keeper_tb_62;

        goto try_finally_handler_66;
    }

    goto finally_end_65;
    finally_end_65:;
    if (var_values.object == NULL)
    {
        var_values.object = INCREASE_REFCOUNT( tmp_assign_source_201 );
    }
    else
    {
        PyObject *old = var_values.object;
        var_values.object = INCREASE_REFCOUNT( tmp_assign_source_201 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_66:;
    exception_keeper_type_63 = exception_type;
    exception_keeper_value_63 = exception_value;
    exception_keeper_tb_63 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_52 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_13__listcontr_result.object );
    tmp_listcontr_13__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_13__listcontr_iter.object );
    tmp_listcontr_13__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_52;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_63 != NULL )
    {
        exception_type = exception_keeper_type_63;
        exception_value = exception_keeper_value_63;
        exception_tb = exception_keeper_tb_63;

        goto try_except_handler_11;
    }

    goto finally_end_66;
    finally_end_66:;
    goto try_except_end_11;
    try_except_handler_11:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_29 = PyThreadState_GET()->exc_type;
    tmp_compare_right_29 = PyExc_IndexError;
    tmp_exc_match_exception_match_11 = EXCEPTION_MATCH_BOOL( tmp_compare_left_29, tmp_compare_right_29 );
    if ( tmp_exc_match_exception_match_11 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1612;
        goto try_finally_handler_64;
    }
    if (tmp_exc_match_exception_match_11 == 1)
    {
        goto branch_yes_59;
    }
    else
    {
        goto branch_no_59;
    }
    branch_yes_59:;
    tmp_called_73 = var_append_to_invalid.object;

    if ( tmp_called_73 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172759 ], 63, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1613;
        goto try_finally_handler_64;
    }

    tmp_call_arg_element_64 = PyTuple_New( 2 );
    tmp_binop_left_8 = var_i.storage->object;

    if ( tmp_binop_left_8 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_64 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1613;
        goto try_finally_handler_64;
    }

    tmp_binop_right_8 = par_skip_header.object;

    if ( tmp_binop_right_8 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_64 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171951 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1613;
        goto try_finally_handler_64;
    }

    tmp_binop_left_7 = BINARY_OPERATION_ADD( tmp_binop_left_8, tmp_binop_right_8 );
    if ( tmp_binop_left_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_64 );

        frame_function->f_lineno = 1613;
        goto try_finally_handler_64;
    }
    tmp_binop_right_7 = const_int_pos_1;
    tmp_tuple_element_15 = BINARY_OPERATION_ADD( tmp_binop_left_7, tmp_binop_right_7 );
    Py_DECREF( tmp_binop_left_7 );
    if ( tmp_tuple_element_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_64 );

        frame_function->f_lineno = 1613;
        goto try_finally_handler_64;
    }
    PyTuple_SET_ITEM( tmp_call_arg_element_64, 0, tmp_tuple_element_15 );
    tmp_tuple_element_15 = var_nbvalues.object;

    if ( tmp_tuple_element_15 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_64 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172822 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1613;
        goto try_finally_handler_64;
    }

    Py_INCREF( tmp_tuple_element_15 );
    PyTuple_SET_ITEM( tmp_call_arg_element_64, 1, tmp_tuple_element_15 );
    frame_function->f_lineno = 1613;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_73, tmp_call_arg_element_64 );
    Py_DECREF( tmp_call_arg_element_64 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1613;
        goto try_finally_handler_64;
    }
    Py_DECREF( tmp_unused );
    goto loop_start_24;
    goto branch_end_59;
    branch_no_59:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_64;
    branch_end_59:;
    try_except_end_11:;
    goto branch_end_58;
    branch_no_58:;
    tmp_compare_left_30 = var_nbvalues.object;

    tmp_compare_right_30 = var_nbcols.object;

    if ( tmp_compare_right_30 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172261 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1615;
        goto try_finally_handler_64;
    }

    tmp_cmp_NotEq_2 = RICH_COMPARE_BOOL_NE( tmp_compare_left_30, tmp_compare_right_30 );
    if ( tmp_cmp_NotEq_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1615;
        goto try_finally_handler_64;
    }
    if (tmp_cmp_NotEq_2 == 1)
    {
        goto branch_yes_60;
    }
    else
    {
        goto branch_no_60;
    }
    branch_yes_60:;
    tmp_called_74 = var_append_to_invalid.object;

    if ( tmp_called_74 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172759 ], 63, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1616;
        goto try_finally_handler_64;
    }

    tmp_call_arg_element_65 = PyTuple_New( 2 );
    tmp_binop_left_10 = var_i.storage->object;

    if ( tmp_binop_left_10 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1616;
        goto try_finally_handler_64;
    }

    tmp_binop_right_10 = par_skip_header.object;

    if ( tmp_binop_right_10 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171951 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1616;
        goto try_finally_handler_64;
    }

    tmp_binop_left_9 = BINARY_OPERATION_ADD( tmp_binop_left_10, tmp_binop_right_10 );
    if ( tmp_binop_left_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_65 );

        frame_function->f_lineno = 1616;
        goto try_finally_handler_64;
    }
    tmp_binop_right_9 = const_int_pos_1;
    tmp_tuple_element_16 = BINARY_OPERATION_ADD( tmp_binop_left_9, tmp_binop_right_9 );
    Py_DECREF( tmp_binop_left_9 );
    if ( tmp_tuple_element_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_65 );

        frame_function->f_lineno = 1616;
        goto try_finally_handler_64;
    }
    PyTuple_SET_ITEM( tmp_call_arg_element_65, 0, tmp_tuple_element_16 );
    tmp_tuple_element_16 = var_nbvalues.object;

    Py_INCREF( tmp_tuple_element_16 );
    PyTuple_SET_ITEM( tmp_call_arg_element_65, 1, tmp_tuple_element_16 );
    frame_function->f_lineno = 1616;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_74, tmp_call_arg_element_65 );
    Py_DECREF( tmp_call_arg_element_65 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1616;
        goto try_finally_handler_64;
    }
    Py_DECREF( tmp_unused );
    goto loop_start_24;
    branch_no_60:;
    branch_end_58:;
    tmp_called_75 = var_append_to_rows.object;

    if ( tmp_called_75 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172876 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1619;
        goto try_finally_handler_64;
    }

    tmp_tuple_arg_1 = var_values.object;

    if ( tmp_tuple_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 20224 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1619;
        goto try_finally_handler_64;
    }

    tmp_call_arg_element_66 = PySequence_Tuple( tmp_tuple_arg_1 );
    if ( tmp_call_arg_element_66 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1619;
        goto try_finally_handler_64;
    }
    frame_function->f_lineno = 1619;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_75, tmp_call_arg_element_66 );
    Py_DECREF( tmp_call_arg_element_66 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1619;
        goto try_finally_handler_64;
    }
    Py_DECREF( tmp_unused );
    tmp_cond_value_27 = par_usemask.object;

    if ( tmp_cond_value_27 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171857 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1620;
        goto try_finally_handler_64;
    }

    tmp_cond_truth_27 = CHECK_IF_TRUE( tmp_cond_value_27 );
    if ( tmp_cond_truth_27 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1620;
        goto try_finally_handler_64;
    }
    if (tmp_cond_truth_27 == 1)
    {
        goto branch_yes_61;
    }
    else
    {
        goto branch_no_61;
    }
    branch_yes_61:;
    tmp_called_76 = var_append_to_masks.object;

    if ( tmp_called_76 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172936 ], 61, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1621;
        goto try_finally_handler_64;
    }

    tmp_called_77 = LOOKUP_BUILTIN( const_str_plain_tuple );
    if ( tmp_called_77 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1621;
        goto try_finally_handler_64;
    }
    tmp_call_pos_11 = NULL;
    // Tried code
    tmp_call_pos_11 = PyTuple_New( 1 );
    tmp_tuple_element_17 = NULL;
    // Tried code
    tmp_called_78 = LOOKUP_BUILTIN( const_str_plain_zip );
    if ( tmp_called_78 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_11 );

        frame_function->f_lineno = 1622;
        goto try_finally_handler_69;
    }
    tmp_call_arg_element_68 = var_values.object;

    if ( tmp_call_arg_element_68 == NULL )
    {
        Py_DECREF( tmp_call_pos_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 20224 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1622;
        goto try_finally_handler_69;
    }

    tmp_call_arg_element_69 = par_missing_values.object;

    if ( tmp_call_arg_element_69 == NULL )
    {
        Py_DECREF( tmp_call_pos_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156787 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1622;
        goto try_finally_handler_69;
    }

    frame_function->f_lineno = 1622;
    tmp_iter_arg_37 = CALL_FUNCTION_WITH_ARGS2( tmp_called_78, tmp_call_arg_element_68, tmp_call_arg_element_69 );
    if ( tmp_iter_arg_37 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_11 );

        frame_function->f_lineno = 1622;
        goto try_finally_handler_69;
    }
    tmp_assign_source_206 = MAKE_ITERATOR( tmp_iter_arg_37 );
    Py_DECREF( tmp_iter_arg_37 );
    if ( tmp_assign_source_206 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_11 );

        frame_function->f_lineno = 1621;
        goto try_finally_handler_69;
    }
    if (tmp_listcontr_14__listcontr_iter.object == NULL)
    {
        tmp_listcontr_14__listcontr_iter.object = tmp_assign_source_206;
    }
    else
    {
        PyObject *old = tmp_listcontr_14__listcontr_iter.object;
        tmp_listcontr_14__listcontr_iter.object = tmp_assign_source_206;
        Py_DECREF( old );
    }
    tmp_assign_source_207 = PyList_New( 0 );
    if (tmp_listcontr_14__listcontr_result.object == NULL)
    {
        tmp_listcontr_14__listcontr_result.object = tmp_assign_source_207;
    }
    else
    {
        PyObject *old = tmp_listcontr_14__listcontr_result.object;
        tmp_listcontr_14__listcontr_result.object = tmp_assign_source_207;
        Py_DECREF( old );
    }
    loop_start_26:;
    tmp_next_source_25 = tmp_listcontr_14__listcontr_iter.object;

    tmp_assign_source_208 = ITERATOR_NEXT( tmp_next_source_25 );
    if (tmp_assign_source_208 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_26;

        }
        else
        {
            Py_DECREF( tmp_call_pos_11 );
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1621;
            goto try_finally_handler_69;
        }
    }

    if (tmp_listcontr_14__iter_value_0.object == NULL)
    {
        tmp_listcontr_14__iter_value_0.object = tmp_assign_source_208;
    }
    else
    {
        PyObject *old = tmp_listcontr_14__iter_value_0.object;
        tmp_listcontr_14__iter_value_0.object = tmp_assign_source_208;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_38 = tmp_listcontr_14__iter_value_0.object;

    tmp_assign_source_209 = MAKE_ITERATOR( tmp_iter_arg_38 );
    if ( tmp_assign_source_209 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_11 );

        frame_function->f_lineno = 1621;
        goto try_finally_handler_70;
    }
    if (tmp_tuple_unpack_10__source_iter.object == NULL)
    {
        tmp_tuple_unpack_10__source_iter.object = tmp_assign_source_209;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_10__source_iter.object;
        tmp_tuple_unpack_10__source_iter.object = tmp_assign_source_209;
        Py_DECREF( old );
    }
    tmp_unpack_20 = tmp_tuple_unpack_10__source_iter.object;

    tmp_assign_source_210 = UNPACK_PARAMETER_NEXT( tmp_unpack_20, 0 );
    if ( tmp_assign_source_210 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }
        Py_DECREF( tmp_call_pos_11 );

        frame_function->f_lineno = 1621;
        goto try_finally_handler_70;
    }
    if (tmp_tuple_unpack_10__element_1.object == NULL)
    {
        tmp_tuple_unpack_10__element_1.object = tmp_assign_source_210;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_10__element_1.object;
        tmp_tuple_unpack_10__element_1.object = tmp_assign_source_210;
        Py_DECREF( old );
    }
    tmp_unpack_21 = tmp_tuple_unpack_10__source_iter.object;

    tmp_assign_source_211 = UNPACK_PARAMETER_NEXT( tmp_unpack_21, 1 );
    if ( tmp_assign_source_211 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }
        Py_DECREF( tmp_call_pos_11 );

        frame_function->f_lineno = 1621;
        goto try_finally_handler_70;
    }
    if (tmp_tuple_unpack_10__element_2.object == NULL)
    {
        tmp_tuple_unpack_10__element_2.object = tmp_assign_source_211;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_10__element_2.object;
        tmp_tuple_unpack_10__element_2.object = tmp_assign_source_211;
        Py_DECREF( old );
    }
    tmp_iterator_name_10 = tmp_tuple_unpack_10__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_10 ); assert( PyIter_Check( tmp_iterator_name_10 ) );

    tmp_iterator_attempt_10 = (*Py_TYPE( tmp_iterator_name_10 )->tp_iternext)( tmp_iterator_name_10 );

    if (likely( tmp_iterator_attempt_10 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
            Py_DECREF( tmp_call_pos_11 );
            goto try_finally_handler_70;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_10 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_11 );
        goto try_finally_handler_70;
    }
    tmp_assign_source_212 = tmp_tuple_unpack_10__element_1.object;

    if (var_v.object == NULL)
    {
        var_v.object = INCREASE_REFCOUNT( tmp_assign_source_212 );
    }
    else
    {
        PyObject *old = var_v.object;
        var_v.object = INCREASE_REFCOUNT( tmp_assign_source_212 );
        Py_DECREF( old );
    }
    tmp_assign_source_213 = tmp_tuple_unpack_10__element_2.object;

    if (var_m.object == NULL)
    {
        var_m.object = INCREASE_REFCOUNT( tmp_assign_source_213 );
    }
    else
    {
        PyObject *old = var_m.object;
        var_m.object = INCREASE_REFCOUNT( tmp_assign_source_213 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_70:;
    exception_keeper_type_64 = exception_type;
    exception_keeper_value_64 = exception_value;
    exception_keeper_tb_64 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_53 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_10__source_iter.object );
    tmp_tuple_unpack_10__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_10__element_1.object );
    tmp_tuple_unpack_10__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_10__element_2.object );
    tmp_tuple_unpack_10__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_53;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_64 != NULL )
    {
        exception_type = exception_keeper_type_64;
        exception_value = exception_keeper_value_64;
        exception_tb = exception_keeper_tb_64;

        goto try_finally_handler_69;
    }

    goto finally_end_67;
    finally_end_67:;
    tmp_append_to_14 = tmp_listcontr_14__listcontr_result.object;

    tmp_source_name_50 = var_v.object;

    if ( tmp_source_name_50 == NULL )
    {
        Py_DECREF( tmp_call_pos_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4481 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1621;
        goto try_finally_handler_69;
    }

    tmp_called_79 = LOOKUP_ATTRIBUTE( tmp_source_name_50, const_str_plain_strip );
    if ( tmp_called_79 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_11 );

        frame_function->f_lineno = 1621;
        goto try_finally_handler_69;
    }
    frame_function->f_lineno = 1621;
    tmp_compexpr_left_7 = CALL_FUNCTION_NO_ARGS( tmp_called_79 );
    Py_DECREF( tmp_called_79 );
    if ( tmp_compexpr_left_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_11 );

        frame_function->f_lineno = 1621;
        goto try_finally_handler_69;
    }
    tmp_compexpr_right_7 = var_m.object;

    if ( tmp_compexpr_right_7 == NULL )
    {
        Py_DECREF( tmp_call_pos_11 );
        Py_DECREF( tmp_compexpr_left_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 13535 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1621;
        goto try_finally_handler_69;
    }

    tmp_append_value_14 = SEQUENCE_CONTAINS( tmp_compexpr_left_7, tmp_compexpr_right_7 );
    if ( tmp_append_value_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_11 );
        Py_DECREF( tmp_compexpr_left_7 );

        frame_function->f_lineno = 1621;
        goto try_finally_handler_69;
    }
    Py_DECREF( tmp_compexpr_left_7 );
    tmp_res = PyList_Append( tmp_append_to_14, tmp_append_value_14 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_11 );

        frame_function->f_lineno = 1621;
        goto try_finally_handler_69;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_11 );

        frame_function->f_lineno = 1621;
        goto try_finally_handler_69;
    }
    goto loop_start_26;
    loop_end_26:;
    tmp_tuple_element_17 = tmp_listcontr_14__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_69:;
    exception_keeper_type_65 = exception_type;
    exception_keeper_value_65 = exception_value;
    exception_keeper_tb_65 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_54 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_14__iter_value_0.object );
    tmp_listcontr_14__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_54;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_65 != NULL )
    {
        exception_type = exception_keeper_type_65;
        exception_value = exception_keeper_value_65;
        exception_tb = exception_keeper_tb_65;

        goto try_finally_handler_68;
    }

    goto finally_end_68;
    finally_end_68:;
    Py_INCREF( tmp_tuple_element_17 );
    PyTuple_SET_ITEM( tmp_call_pos_11, 0, tmp_tuple_element_17 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_68:;
    exception_keeper_type_66 = exception_type;
    exception_keeper_value_66 = exception_value;
    exception_keeper_tb_66 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_55 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_14__listcontr_result.object );
    tmp_listcontr_14__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_14__listcontr_iter.object );
    tmp_listcontr_14__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_55;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_66 != NULL )
    {
        exception_type = exception_keeper_type_66;
        exception_value = exception_keeper_value_66;
        exception_tb = exception_keeper_tb_66;

        goto try_finally_handler_64;
    }

    goto finally_end_69;
    finally_end_69:;
    frame_function->f_lineno = 1621;
    tmp_call_arg_element_67 = CALL_FUNCTION_WITH_POSARGS( tmp_called_77, tmp_call_pos_11 );
    Py_DECREF( tmp_call_pos_11 );
    if ( tmp_call_arg_element_67 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1621;
        goto try_finally_handler_64;
    }
    frame_function->f_lineno = 1621;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_76, tmp_call_arg_element_67 );
    Py_DECREF( tmp_call_arg_element_67 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1621;
        goto try_finally_handler_64;
    }
    Py_DECREF( tmp_unused );
    branch_no_61:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1602;
        goto try_finally_handler_64;
    }
    goto loop_start_24;
    loop_end_24:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_64:;
    exception_keeper_type_67 = exception_type;
    exception_keeper_value_67 = exception_value;
    exception_keeper_tb_67 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_56 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_11__iter_value.object );
    tmp_for_loop_11__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_11__for_iterator.object );
    tmp_for_loop_11__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_56;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_67 != NULL )
    {
        exception_type = exception_keeper_type_67;
        exception_value = exception_keeper_value_67;
        exception_tb = exception_keeper_tb_67;

        goto frame_exception_exit_1;
    }

    goto finally_end_70;
    finally_end_70:;
    tmp_cond_value_28 = var_own_fhd.object;

    if ( tmp_cond_value_28 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172997 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1624;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_28 = CHECK_IF_TRUE( tmp_cond_value_28 );
    if ( tmp_cond_truth_28 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1624;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_28 == 1)
    {
        goto branch_yes_62;
    }
    else
    {
        goto branch_no_62;
    }
    branch_yes_62:;
    tmp_source_name_51 = var_fhd.object;

    if ( tmp_source_name_51 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155399 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1625;
        goto frame_exception_exit_1;
    }

    tmp_called_80 = LOOKUP_ATTRIBUTE( tmp_source_name_51, const_str_plain_close );
    if ( tmp_called_80 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1625;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1625;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_80 );
    Py_DECREF( tmp_called_80 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1625;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_62:;
    tmp_compare_left_31 = par_dtype.object;

    if ( tmp_compare_left_31 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1628;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_31 = Py_None;
    tmp_is_6 = ( tmp_compare_left_31 == tmp_compare_right_31 );
    if (tmp_is_6)
    {
        goto branch_yes_63;
    }
    else
    {
        goto branch_no_63;
    }
    branch_yes_63:;
    tmp_called_81 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    if ( tmp_called_81 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1629;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_70 = par_converters.object;

    if ( tmp_call_arg_element_70 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170342 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1629;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1629;
    tmp_iter_arg_39 = CALL_FUNCTION_WITH_ARGS1( tmp_called_81, tmp_call_arg_element_70 );
    if ( tmp_iter_arg_39 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1629;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_214 = MAKE_ITERATOR( tmp_iter_arg_39 );
    Py_DECREF( tmp_iter_arg_39 );
    if ( tmp_assign_source_214 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1629;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_12__for_iterator.object == NULL );
    tmp_for_loop_12__for_iterator.object = tmp_assign_source_214;

    // Tried code
    loop_start_27:;
    tmp_next_source_26 = tmp_for_loop_12__for_iterator.object;

    tmp_assign_source_215 = ITERATOR_NEXT( tmp_next_source_26 );
    if (tmp_assign_source_215 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_27;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1629;
            goto try_finally_handler_71;
        }
    }

    if (tmp_for_loop_12__iter_value.object == NULL)
    {
        tmp_for_loop_12__iter_value.object = tmp_assign_source_215;
    }
    else
    {
        PyObject *old = tmp_for_loop_12__iter_value.object;
        tmp_for_loop_12__iter_value.object = tmp_assign_source_215;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_40 = tmp_for_loop_12__iter_value.object;

    tmp_assign_source_216 = MAKE_ITERATOR( tmp_iter_arg_40 );
    if ( tmp_assign_source_216 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1629;
        goto try_finally_handler_72;
    }
    if (tmp_tuple_unpack_11__source_iter.object == NULL)
    {
        tmp_tuple_unpack_11__source_iter.object = tmp_assign_source_216;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_11__source_iter.object;
        tmp_tuple_unpack_11__source_iter.object = tmp_assign_source_216;
        Py_DECREF( old );
    }
    tmp_unpack_22 = tmp_tuple_unpack_11__source_iter.object;

    tmp_assign_source_217 = UNPACK_PARAMETER_NEXT( tmp_unpack_22, 0 );
    if ( tmp_assign_source_217 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1629;
        goto try_finally_handler_72;
    }
    if (tmp_tuple_unpack_11__element_1.object == NULL)
    {
        tmp_tuple_unpack_11__element_1.object = tmp_assign_source_217;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_11__element_1.object;
        tmp_tuple_unpack_11__element_1.object = tmp_assign_source_217;
        Py_DECREF( old );
    }
    tmp_unpack_23 = tmp_tuple_unpack_11__source_iter.object;

    tmp_assign_source_218 = UNPACK_PARAMETER_NEXT( tmp_unpack_23, 1 );
    if ( tmp_assign_source_218 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1629;
        goto try_finally_handler_72;
    }
    if (tmp_tuple_unpack_11__element_2.object == NULL)
    {
        tmp_tuple_unpack_11__element_2.object = tmp_assign_source_218;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_11__element_2.object;
        tmp_tuple_unpack_11__element_2.object = tmp_assign_source_218;
        Py_DECREF( old );
    }
    tmp_iterator_name_11 = tmp_tuple_unpack_11__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_11 ); assert( PyIter_Check( tmp_iterator_name_11 ) );

    tmp_iterator_attempt_11 = (*Py_TYPE( tmp_iterator_name_11 )->tp_iternext)( tmp_iterator_name_11 );

    if (likely( tmp_iterator_attempt_11 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_72;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_11 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_72;
    }
    tmp_assign_source_219 = tmp_tuple_unpack_11__element_1.object;

    if (var_i.storage->object == NULL)
    {
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_219 );
    }
    else
    {
        PyObject *old = var_i.storage->object;
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_219 );
        Py_DECREF( old );
    }
    tmp_assign_source_220 = tmp_tuple_unpack_11__element_2.object;

    if (var_converter.object == NULL)
    {
        var_converter.object = INCREASE_REFCOUNT( tmp_assign_source_220 );
    }
    else
    {
        PyObject *old = var_converter.object;
        var_converter.object = INCREASE_REFCOUNT( tmp_assign_source_220 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_72:;
    exception_keeper_type_68 = exception_type;
    exception_keeper_value_68 = exception_value;
    exception_keeper_tb_68 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_57 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_11__source_iter.object );
    tmp_tuple_unpack_11__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_11__element_1.object );
    tmp_tuple_unpack_11__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_11__element_2.object );
    tmp_tuple_unpack_11__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_57;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_68 != NULL )
    {
        exception_type = exception_keeper_type_68;
        exception_value = exception_keeper_value_68;
        exception_tb = exception_keeper_tb_68;

        goto try_finally_handler_71;
    }

    goto finally_end_71;
    finally_end_71:;
    // Tried code
    tmp_assign_source_221 = NULL;
    // Tried code
    tmp_iter_arg_41 = var_rows.object;

    if ( tmp_iter_arg_41 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 76958 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1630;
        goto try_finally_handler_74;
    }

    tmp_assign_source_222 = MAKE_ITERATOR( tmp_iter_arg_41 );
    if ( tmp_assign_source_222 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1630;
        goto try_finally_handler_74;
    }
    if (tmp_listcontr_15__listcontr_iter.object == NULL)
    {
        tmp_listcontr_15__listcontr_iter.object = tmp_assign_source_222;
    }
    else
    {
        PyObject *old = tmp_listcontr_15__listcontr_iter.object;
        tmp_listcontr_15__listcontr_iter.object = tmp_assign_source_222;
        Py_DECREF( old );
    }
    tmp_assign_source_223 = PyList_New( 0 );
    if (tmp_listcontr_15__listcontr_result.object == NULL)
    {
        tmp_listcontr_15__listcontr_result.object = tmp_assign_source_223;
    }
    else
    {
        PyObject *old = tmp_listcontr_15__listcontr_result.object;
        tmp_listcontr_15__listcontr_result.object = tmp_assign_source_223;
        Py_DECREF( old );
    }
    loop_start_28:;
    tmp_next_source_27 = tmp_listcontr_15__listcontr_iter.object;

    tmp_assign_source_224 = ITERATOR_NEXT( tmp_next_source_27 );
    if (tmp_assign_source_224 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_28;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1630;
            goto try_finally_handler_74;
        }
    }

    if (tmp_listcontr_15__iter_value_0.object == NULL)
    {
        tmp_listcontr_15__iter_value_0.object = tmp_assign_source_224;
    }
    else
    {
        PyObject *old = tmp_listcontr_15__iter_value_0.object;
        tmp_listcontr_15__iter_value_0.object = tmp_assign_source_224;
        Py_DECREF( old );
    }
    tmp_assign_source_225 = tmp_listcontr_15__iter_value_0.object;

    if (var__m.object == NULL)
    {
        var__m.object = INCREASE_REFCOUNT( tmp_assign_source_225 );
    }
    else
    {
        PyObject *old = var__m.object;
        var__m.object = INCREASE_REFCOUNT( tmp_assign_source_225 );
        Py_DECREF( old );
    }
    tmp_append_to_15 = tmp_listcontr_15__listcontr_result.object;

    tmp_called_83 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_itemgetter );

    if (unlikely( tmp_called_83 == NULL ))
    {
        tmp_called_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_itemgetter );
    }

    if ( tmp_called_83 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173050 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1630;
        goto try_finally_handler_74;
    }

    tmp_call_arg_element_71 = var_i.storage->object;

    if ( tmp_call_arg_element_71 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1630;
        goto try_finally_handler_74;
    }

    frame_function->f_lineno = 1630;
    tmp_called_82 = CALL_FUNCTION_WITH_ARGS1( tmp_called_83, tmp_call_arg_element_71 );
    if ( tmp_called_82 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1630;
        goto try_finally_handler_74;
    }
    tmp_call_arg_element_72 = var__m.object;

    frame_function->f_lineno = 1630;
    tmp_append_value_15 = CALL_FUNCTION_WITH_ARGS1( tmp_called_82, tmp_call_arg_element_72 );
    Py_DECREF( tmp_called_82 );
    if ( tmp_append_value_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1630;
        goto try_finally_handler_74;
    }
    tmp_res = PyList_Append( tmp_append_to_15, tmp_append_value_15 );
    Py_DECREF( tmp_append_value_15 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1630;
        goto try_finally_handler_74;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1630;
        goto try_finally_handler_74;
    }
    goto loop_start_28;
    loop_end_28:;
    tmp_assign_source_221 = tmp_listcontr_15__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_74:;
    exception_keeper_type_69 = exception_type;
    exception_keeper_value_69 = exception_value;
    exception_keeper_tb_69 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_58 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_15__iter_value_0.object );
    tmp_listcontr_15__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_58;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_69 != NULL )
    {
        exception_type = exception_keeper_type_69;
        exception_value = exception_keeper_value_69;
        exception_tb = exception_keeper_tb_69;

        goto try_finally_handler_73;
    }

    goto finally_end_72;
    finally_end_72:;
    if (var_current_column.object == NULL)
    {
        var_current_column.object = INCREASE_REFCOUNT( tmp_assign_source_221 );
    }
    else
    {
        PyObject *old = var_current_column.object;
        var_current_column.object = INCREASE_REFCOUNT( tmp_assign_source_221 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_73:;
    exception_keeper_type_70 = exception_type;
    exception_keeper_value_70 = exception_value;
    exception_keeper_tb_70 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_59 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_15__listcontr_result.object );
    tmp_listcontr_15__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_15__listcontr_iter.object );
    tmp_listcontr_15__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_59;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_70 != NULL )
    {
        exception_type = exception_keeper_type_70;
        exception_value = exception_keeper_value_70;
        exception_tb = exception_keeper_tb_70;

        goto try_finally_handler_71;
    }

    goto finally_end_73;
    finally_end_73:;
    // Tried block of try/except
    tmp_source_name_52 = var_converter.object;

    if ( tmp_source_name_52 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173089 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1632;
        goto try_except_handler_12;
    }

    tmp_called_84 = LOOKUP_ATTRIBUTE( tmp_source_name_52, const_str_plain_iterupgrade );
    if ( tmp_called_84 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1632;
        goto try_except_handler_12;
    }
    tmp_call_arg_element_73 = var_current_column.object;

    if ( tmp_call_arg_element_73 == NULL )
    {
        Py_DECREF( tmp_called_84 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173144 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1632;
        goto try_except_handler_12;
    }

    frame_function->f_lineno = 1632;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_84, tmp_call_arg_element_73 );
    Py_DECREF( tmp_called_84 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1632;
        goto try_except_handler_12;
    }
    Py_DECREF( tmp_unused );
    goto try_except_end_12;
    try_except_handler_12:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_32 = PyThreadState_GET()->exc_type;
    tmp_compare_right_32 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_ConverterLockError );

    if (unlikely( tmp_compare_right_32 == NULL ))
    {
        tmp_compare_right_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ConverterLockError );
    }

    if ( tmp_compare_right_32 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 157154 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1633;
        goto try_finally_handler_71;
    }

    tmp_exc_match_exception_match_12 = EXCEPTION_MATCH_BOOL( tmp_compare_left_32, tmp_compare_right_32 );
    if ( tmp_exc_match_exception_match_12 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1633;
        goto try_finally_handler_71;
    }
    if (tmp_exc_match_exception_match_12 == 1)
    {
        goto branch_yes_64;
    }
    else
    {
        goto branch_no_64;
    }
    branch_yes_64:;
    tmp_binop_left_11 = const_str_digest_1ca5f2956cc68b902d14da616a888010;
    tmp_binop_right_11 = var_i.storage->object;

    if ( tmp_binop_right_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1634;
        goto try_finally_handler_71;
    }

    tmp_assign_source_226 = BINARY_OPERATION_REMAINDER( tmp_binop_left_11, tmp_binop_right_11 );
    if ( tmp_assign_source_226 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1634;
        goto try_finally_handler_71;
    }
    if (var_errmsg.object == NULL)
    {
        var_errmsg.object = tmp_assign_source_226;
    }
    else
    {
        PyObject *old = var_errmsg.object;
        var_errmsg.object = tmp_assign_source_226;
        Py_DECREF( old );
    }
    tmp_called_85 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_map );

    if (unlikely( tmp_called_85 == NULL ))
    {
        tmp_called_85 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_map );
    }

    if ( tmp_called_85 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171452 ], 32, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1635;
        goto try_finally_handler_71;
    }

    tmp_called_86 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_itemgetter );

    if (unlikely( tmp_called_86 == NULL ))
    {
        tmp_called_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_itemgetter );
    }

    if ( tmp_called_86 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173050 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1635;
        goto try_finally_handler_71;
    }

    tmp_call_arg_element_75 = var_i.storage->object;

    if ( tmp_call_arg_element_75 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1635;
        goto try_finally_handler_71;
    }

    frame_function->f_lineno = 1635;
    tmp_call_arg_element_74 = CALL_FUNCTION_WITH_ARGS1( tmp_called_86, tmp_call_arg_element_75 );
    if ( tmp_call_arg_element_74 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1635;
        goto try_finally_handler_71;
    }
    tmp_call_arg_element_76 = var_rows.object;

    if ( tmp_call_arg_element_76 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_74 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 76958 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1635;
        goto try_finally_handler_71;
    }

    frame_function->f_lineno = 1635;
    tmp_assign_source_227 = CALL_FUNCTION_WITH_ARGS2( tmp_called_85, tmp_call_arg_element_74, tmp_call_arg_element_76 );
    Py_DECREF( tmp_call_arg_element_74 );
    if ( tmp_assign_source_227 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1635;
        goto try_finally_handler_71;
    }
    if (var_current_column.object == NULL)
    {
        var_current_column.object = tmp_assign_source_227;
    }
    else
    {
        PyObject *old = var_current_column.object;
        var_current_column.object = tmp_assign_source_227;
        Py_DECREF( old );
    }
    tmp_called_87 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    if ( tmp_called_87 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1636;
        goto try_finally_handler_71;
    }
    tmp_call_arg_element_77 = var_current_column.object;

    frame_function->f_lineno = 1636;
    tmp_iter_arg_42 = CALL_FUNCTION_WITH_ARGS1( tmp_called_87, tmp_call_arg_element_77 );
    if ( tmp_iter_arg_42 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1636;
        goto try_finally_handler_71;
    }
    tmp_assign_source_228 = MAKE_ITERATOR( tmp_iter_arg_42 );
    Py_DECREF( tmp_iter_arg_42 );
    if ( tmp_assign_source_228 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1636;
        goto try_finally_handler_71;
    }
    if (tmp_for_loop_13__for_iterator.object == NULL)
    {
        tmp_for_loop_13__for_iterator.object = tmp_assign_source_228;
    }
    else
    {
        PyObject *old = tmp_for_loop_13__for_iterator.object;
        tmp_for_loop_13__for_iterator.object = tmp_assign_source_228;
        Py_DECREF( old );
    }
    // Tried code
    loop_start_29:;
    tmp_next_source_28 = tmp_for_loop_13__for_iterator.object;

    tmp_assign_source_229 = ITERATOR_NEXT( tmp_next_source_28 );
    if (tmp_assign_source_229 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_29;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1636;
            goto try_finally_handler_75;
        }
    }

    if (tmp_for_loop_13__iter_value.object == NULL)
    {
        tmp_for_loop_13__iter_value.object = tmp_assign_source_229;
    }
    else
    {
        PyObject *old = tmp_for_loop_13__iter_value.object;
        tmp_for_loop_13__iter_value.object = tmp_assign_source_229;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_43 = tmp_for_loop_13__iter_value.object;

    tmp_assign_source_230 = MAKE_ITERATOR( tmp_iter_arg_43 );
    if ( tmp_assign_source_230 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1636;
        goto try_finally_handler_76;
    }
    if (tmp_tuple_unpack_12__source_iter.object == NULL)
    {
        tmp_tuple_unpack_12__source_iter.object = tmp_assign_source_230;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_12__source_iter.object;
        tmp_tuple_unpack_12__source_iter.object = tmp_assign_source_230;
        Py_DECREF( old );
    }
    tmp_unpack_24 = tmp_tuple_unpack_12__source_iter.object;

    tmp_assign_source_231 = UNPACK_PARAMETER_NEXT( tmp_unpack_24, 0 );
    if ( tmp_assign_source_231 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1636;
        goto try_finally_handler_76;
    }
    if (tmp_tuple_unpack_12__element_1.object == NULL)
    {
        tmp_tuple_unpack_12__element_1.object = tmp_assign_source_231;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_12__element_1.object;
        tmp_tuple_unpack_12__element_1.object = tmp_assign_source_231;
        Py_DECREF( old );
    }
    tmp_unpack_25 = tmp_tuple_unpack_12__source_iter.object;

    tmp_assign_source_232 = UNPACK_PARAMETER_NEXT( tmp_unpack_25, 1 );
    if ( tmp_assign_source_232 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1636;
        goto try_finally_handler_76;
    }
    if (tmp_tuple_unpack_12__element_2.object == NULL)
    {
        tmp_tuple_unpack_12__element_2.object = tmp_assign_source_232;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_12__element_2.object;
        tmp_tuple_unpack_12__element_2.object = tmp_assign_source_232;
        Py_DECREF( old );
    }
    tmp_iterator_name_12 = tmp_tuple_unpack_12__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_12 ); assert( PyIter_Check( tmp_iterator_name_12 ) );

    tmp_iterator_attempt_12 = (*Py_TYPE( tmp_iterator_name_12 )->tp_iternext)( tmp_iterator_name_12 );

    if (likely( tmp_iterator_attempt_12 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_76;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_12 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_76;
    }
    tmp_assign_source_233 = tmp_tuple_unpack_12__element_1.object;

    if (var_j.object == NULL)
    {
        var_j.object = INCREASE_REFCOUNT( tmp_assign_source_233 );
    }
    else
    {
        PyObject *old = var_j.object;
        var_j.object = INCREASE_REFCOUNT( tmp_assign_source_233 );
        Py_DECREF( old );
    }
    tmp_assign_source_234 = tmp_tuple_unpack_12__element_2.object;

    if (var_value.object == NULL)
    {
        var_value.object = INCREASE_REFCOUNT( tmp_assign_source_234 );
    }
    else
    {
        PyObject *old = var_value.object;
        var_value.object = INCREASE_REFCOUNT( tmp_assign_source_234 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_76:;
    exception_keeper_type_71 = exception_type;
    exception_keeper_value_71 = exception_value;
    exception_keeper_tb_71 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_60 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_12__source_iter.object );
    tmp_tuple_unpack_12__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_12__element_1.object );
    tmp_tuple_unpack_12__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_12__element_2.object );
    tmp_tuple_unpack_12__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_60;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_71 != NULL )
    {
        exception_type = exception_keeper_type_71;
        exception_value = exception_keeper_value_71;
        exception_tb = exception_keeper_tb_71;

        goto try_finally_handler_75;
    }

    goto finally_end_74;
    finally_end_74:;
    // Tried block of try/except
    tmp_source_name_53 = var_converter.object;

    if ( tmp_source_name_53 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173089 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1638;
        goto try_except_handler_13;
    }

    tmp_called_88 = LOOKUP_ATTRIBUTE( tmp_source_name_53, const_str_plain_upgrade );
    if ( tmp_called_88 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1638;
        goto try_except_handler_13;
    }
    tmp_call_arg_element_78 = var_value.object;

    if ( tmp_call_arg_element_78 == NULL )
    {
        Py_DECREF( tmp_called_88 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5634 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1638;
        goto try_except_handler_13;
    }

    frame_function->f_lineno = 1638;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_88, tmp_call_arg_element_78 );
    Py_DECREF( tmp_called_88 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1638;
        goto try_except_handler_13;
    }
    Py_DECREF( tmp_unused );
    goto try_except_end_13;
    try_except_handler_13:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_33 = PyThreadState_GET()->exc_type;
    tmp_compare_right_33 = PyTuple_New( 2 );
    tmp_tuple_element_18 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_ConverterError );

    if (unlikely( tmp_tuple_element_18 == NULL ))
    {
        tmp_tuple_element_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ConverterError );
    }

    if ( tmp_tuple_element_18 == NULL )
    {
        Py_DECREF( tmp_compare_right_33 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 157201 ], 43, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1639;
        goto try_finally_handler_75;
    }

    Py_INCREF( tmp_tuple_element_18 );
    PyTuple_SET_ITEM( tmp_compare_right_33, 0, tmp_tuple_element_18 );
    tmp_tuple_element_18 = PyExc_ValueError;
    Py_INCREF( tmp_tuple_element_18 );
    PyTuple_SET_ITEM( tmp_compare_right_33, 1, tmp_tuple_element_18 );
    tmp_exc_match_exception_match_13 = EXCEPTION_MATCH_BOOL( tmp_compare_left_33, tmp_compare_right_33 );
    if ( tmp_exc_match_exception_match_13 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_33 );

        frame_function->f_lineno = 1639;
        goto try_finally_handler_75;
    }
    Py_DECREF( tmp_compare_right_33 );
    if (tmp_exc_match_exception_match_13 == 1)
    {
        goto branch_yes_65;
    }
    else
    {
        goto branch_no_65;
    }
    branch_yes_65:;
    tmp_assign_source_235 = var_errmsg.object;

    if ( tmp_assign_source_235 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173204 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1640;
        goto try_finally_handler_75;
    }

    if (tmp_inplace_assign_1__inplace_start.object == NULL)
    {
        tmp_inplace_assign_1__inplace_start.object = INCREASE_REFCOUNT( tmp_assign_source_235 );
    }
    else
    {
        PyObject *old = tmp_inplace_assign_1__inplace_start.object;
        tmp_inplace_assign_1__inplace_start.object = INCREASE_REFCOUNT( tmp_assign_source_235 );
        Py_DECREF( old );
    }
    // Tried code
    tmp_binop_left_12 = tmp_inplace_assign_1__inplace_start.object;

    tmp_binop_right_12 = const_str_digest_004a2c15dc330afee30f69dde4431968;
    tmp_assign_source_236 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_binop_left_12, tmp_binop_right_12 );
    if ( tmp_assign_source_236 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1640;
        goto try_finally_handler_77;
    }
    if (tmp_inplace_assign_1__inplace_end.object == NULL)
    {
        tmp_inplace_assign_1__inplace_end.object = tmp_assign_source_236;
    }
    else
    {
        PyObject *old = tmp_inplace_assign_1__inplace_end.object;
        tmp_inplace_assign_1__inplace_end.object = tmp_assign_source_236;
        Py_DECREF( old );
    }
    tmp_compare_left_34 = tmp_inplace_assign_1__inplace_start.object;

    tmp_compare_right_34 = tmp_inplace_assign_1__inplace_end.object;

    tmp_isnot_5 = ( tmp_compare_left_34 != tmp_compare_right_34 );
    if (tmp_isnot_5)
    {
        goto branch_yes_66;
    }
    else
    {
        goto branch_no_66;
    }
    branch_yes_66:;
    tmp_assign_source_237 = tmp_inplace_assign_1__inplace_end.object;

    if (var_errmsg.object == NULL)
    {
        var_errmsg.object = INCREASE_REFCOUNT( tmp_assign_source_237 );
    }
    else
    {
        PyObject *old = var_errmsg.object;
        var_errmsg.object = INCREASE_REFCOUNT( tmp_assign_source_237 );
        Py_DECREF( old );
    }
    branch_no_66:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_77:;
    exception_keeper_type_72 = exception_type;
    exception_keeper_value_72 = exception_value;
    exception_keeper_tb_72 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_61 = frame_function->f_lineno;
    tmp_result = tmp_inplace_assign_1__inplace_start.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_inplace_assign_1__inplace_start.object );
        tmp_inplace_assign_1__inplace_start.object = NULL;
    }

    assert( tmp_result != false );
    Py_XDECREF( tmp_inplace_assign_1__inplace_end.object );
    tmp_inplace_assign_1__inplace_end.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_61;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_72 != NULL )
    {
        exception_type = exception_keeper_type_72;
        exception_value = exception_keeper_value_72;
        exception_tb = exception_keeper_tb_72;

        goto try_finally_handler_75;
    }

    goto finally_end_75;
    finally_end_75:;
    tmp_assign_source_238 = var_errmsg.object;

    if ( tmp_assign_source_238 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173204 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1641;
        goto try_finally_handler_75;
    }

    if (tmp_inplace_assign_2__inplace_start.object == NULL)
    {
        tmp_inplace_assign_2__inplace_start.object = INCREASE_REFCOUNT( tmp_assign_source_238 );
    }
    else
    {
        PyObject *old = tmp_inplace_assign_2__inplace_start.object;
        tmp_inplace_assign_2__inplace_start.object = INCREASE_REFCOUNT( tmp_assign_source_238 );
        Py_DECREF( old );
    }
    // Tried code
    tmp_binop_left_13 = tmp_inplace_assign_2__inplace_start.object;

    tmp_binop_right_13 = PyTuple_New( 2 );
    tmp_binop_left_15 = var_j.object;

    if ( tmp_binop_left_15 == NULL )
    {
        Py_DECREF( tmp_binop_right_13 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 54692 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1641;
        goto try_finally_handler_78;
    }

    tmp_binop_right_15 = const_int_pos_1;
    tmp_binop_left_14 = BINARY_OPERATION_ADD( tmp_binop_left_15, tmp_binop_right_15 );
    if ( tmp_binop_left_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_13 );

        frame_function->f_lineno = 1641;
        goto try_finally_handler_78;
    }
    tmp_binop_right_14 = par_skip_header.object;

    if ( tmp_binop_right_14 == NULL )
    {
        Py_DECREF( tmp_binop_right_13 );
        Py_DECREF( tmp_binop_left_14 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171951 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1641;
        goto try_finally_handler_78;
    }

    tmp_tuple_element_19 = BINARY_OPERATION_ADD( tmp_binop_left_14, tmp_binop_right_14 );
    Py_DECREF( tmp_binop_left_14 );
    if ( tmp_tuple_element_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_13 );

        frame_function->f_lineno = 1641;
        goto try_finally_handler_78;
    }
    PyTuple_SET_ITEM( tmp_binop_right_13, 0, tmp_tuple_element_19 );
    tmp_tuple_element_19 = var_value.object;

    if ( tmp_tuple_element_19 == NULL )
    {
        Py_DECREF( tmp_binop_right_13 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5634 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1641;
        goto try_finally_handler_78;
    }

    Py_INCREF( tmp_tuple_element_19 );
    PyTuple_SET_ITEM( tmp_binop_right_13, 1, tmp_tuple_element_19 );
    tmp_assign_source_239 = BINARY_OPERATION( PyNumber_InPlaceRemainder, tmp_binop_left_13, tmp_binop_right_13 );
    Py_DECREF( tmp_binop_right_13 );
    if ( tmp_assign_source_239 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1641;
        goto try_finally_handler_78;
    }
    if (tmp_inplace_assign_2__inplace_end.object == NULL)
    {
        tmp_inplace_assign_2__inplace_end.object = tmp_assign_source_239;
    }
    else
    {
        PyObject *old = tmp_inplace_assign_2__inplace_end.object;
        tmp_inplace_assign_2__inplace_end.object = tmp_assign_source_239;
        Py_DECREF( old );
    }
    tmp_compare_left_35 = tmp_inplace_assign_2__inplace_start.object;

    tmp_compare_right_35 = tmp_inplace_assign_2__inplace_end.object;

    tmp_isnot_6 = ( tmp_compare_left_35 != tmp_compare_right_35 );
    if (tmp_isnot_6)
    {
        goto branch_yes_67;
    }
    else
    {
        goto branch_no_67;
    }
    branch_yes_67:;
    tmp_assign_source_240 = tmp_inplace_assign_2__inplace_end.object;

    if (var_errmsg.object == NULL)
    {
        var_errmsg.object = INCREASE_REFCOUNT( tmp_assign_source_240 );
    }
    else
    {
        PyObject *old = var_errmsg.object;
        var_errmsg.object = INCREASE_REFCOUNT( tmp_assign_source_240 );
        Py_DECREF( old );
    }
    branch_no_67:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_78:;
    exception_keeper_type_73 = exception_type;
    exception_keeper_value_73 = exception_value;
    exception_keeper_tb_73 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_62 = frame_function->f_lineno;
    tmp_result = tmp_inplace_assign_2__inplace_start.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_inplace_assign_2__inplace_start.object );
        tmp_inplace_assign_2__inplace_start.object = NULL;
    }

    assert( tmp_result != false );
    Py_XDECREF( tmp_inplace_assign_2__inplace_end.object );
    tmp_inplace_assign_2__inplace_end.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_62;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_73 != NULL )
    {
        exception_type = exception_keeper_type_73;
        exception_value = exception_keeper_value_73;
        exception_tb = exception_keeper_tb_73;

        goto try_finally_handler_75;
    }

    goto finally_end_76;
    finally_end_76:;
    tmp_called_89 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_ConverterError );

    if (unlikely( tmp_called_89 == NULL ))
    {
        tmp_called_89 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ConverterError );
    }

    if ( tmp_called_89 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 157201 ], 43, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1642;
        goto try_finally_handler_75;
    }

    tmp_call_arg_element_79 = var_errmsg.object;

    if ( tmp_call_arg_element_79 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173204 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1642;
        goto try_finally_handler_75;
    }

    frame_function->f_lineno = 1642;
    tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_89, tmp_call_arg_element_79 );
    if ( tmp_raise_type_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1642;
        goto try_finally_handler_75;
    }
    exception_type = tmp_raise_type_3;
    frame_function->f_lineno = 1642;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_75;
    goto branch_end_65;
    branch_no_65:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_75;
    branch_end_65:;
    try_except_end_13:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1636;
        goto try_finally_handler_75;
    }
    goto loop_start_29;
    loop_end_29:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_75:;
    exception_keeper_type_74 = exception_type;
    exception_keeper_value_74 = exception_value;
    exception_keeper_tb_74 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_63 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_13__iter_value.object );
    tmp_for_loop_13__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_13__for_iterator.object );
    tmp_for_loop_13__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_63;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_74 != NULL )
    {
        exception_type = exception_keeper_type_74;
        exception_value = exception_keeper_value_74;
        exception_tb = exception_keeper_tb_74;

        goto try_finally_handler_71;
    }

    goto finally_end_77;
    finally_end_77:;
    goto branch_end_64;
    branch_no_64:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_71;
    branch_end_64:;
    try_except_end_12:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1629;
        goto try_finally_handler_71;
    }
    goto loop_start_27;
    loop_end_27:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_71:;
    exception_keeper_type_75 = exception_type;
    exception_keeper_value_75 = exception_value;
    exception_keeper_tb_75 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_64 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_12__iter_value.object );
    tmp_for_loop_12__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_12__for_iterator.object );
    tmp_for_loop_12__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_64;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_75 != NULL )
    {
        exception_type = exception_keeper_type_75;
        exception_value = exception_keeper_value_75;
        exception_tb = exception_keeper_tb_75;

        goto frame_exception_exit_1;
    }

    goto finally_end_78;
    finally_end_78:;
    branch_no_63:;
    tmp_len_arg_8 = var_invalid.object;

    if ( tmp_len_arg_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 72742 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1645;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_241 = BUILTIN_LEN( tmp_len_arg_8 );
    if ( tmp_assign_source_241 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1645;
        goto frame_exception_exit_1;
    }
    assert( var_nbinvalid.object == NULL );
    var_nbinvalid.object = tmp_assign_source_241;

    tmp_compare_left_36 = var_nbinvalid.object;

    tmp_compare_right_36 = const_int_0;
    tmp_cmp_Gt_2 = RICH_COMPARE_BOOL_GT( tmp_compare_left_36, tmp_compare_right_36 );
    if ( tmp_cmp_Gt_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1646;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Gt_2 == 1)
    {
        goto branch_yes_68;
    }
    else
    {
        goto branch_no_68;
    }
    branch_yes_68:;
    tmp_len_arg_9 = var_rows.object;

    if ( tmp_len_arg_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 76958 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1647;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_17 = BUILTIN_LEN( tmp_len_arg_9 );
    if ( tmp_binop_left_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1647;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_17 = var_nbinvalid.object;

    tmp_binop_left_16 = BINARY_OPERATION_ADD( tmp_binop_left_17, tmp_binop_right_17 );
    Py_DECREF( tmp_binop_left_17 );
    if ( tmp_binop_left_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1647;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_16 = par_skip_footer.object;

    if ( tmp_binop_right_16 == NULL )
    {
        Py_DECREF( tmp_binop_left_16 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173256 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1647;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_242 = BINARY_OPERATION_SUB( tmp_binop_left_16, tmp_binop_right_16 );
    Py_DECREF( tmp_binop_left_16 );
    if ( tmp_assign_source_242 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1647;
        goto frame_exception_exit_1;
    }
    assert( var_nbrows.object == NULL );
    var_nbrows.object = tmp_assign_source_242;

    tmp_binop_left_18 = const_str_digest_cdb1742273c3c470271806ac9382e8c9;
    tmp_binop_right_18 = var_nbcols.object;

    if ( tmp_binop_right_18 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 172261 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1649;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_243 = BINARY_OPERATION_REMAINDER( tmp_binop_left_18, tmp_binop_right_18 );
    if ( tmp_assign_source_243 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1649;
        goto frame_exception_exit_1;
    }
    assert( var_template.object == NULL );
    var_template.object = tmp_assign_source_243;

    tmp_compare_left_37 = par_skip_footer.object;

    if ( tmp_compare_left_37 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173256 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1650;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_37 = const_int_0;
    tmp_cmp_Gt_3 = RICH_COMPARE_BOOL_GT( tmp_compare_left_37, tmp_compare_right_37 );
    if ( tmp_cmp_Gt_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1650;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Gt_3 == 1)
    {
        goto branch_yes_69;
    }
    else
    {
        goto branch_no_69;
    }
    branch_yes_69:;
    tmp_called_90 = LOOKUP_BUILTIN( const_str_plain_len );
    if ( tmp_called_90 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1651;
        goto frame_exception_exit_1;
    }
    tmp_call_pos_12 = NULL;
    // Tried code
    tmp_call_pos_12 = PyTuple_New( 1 );
    tmp_tuple_element_20 = NULL;
    // Tried code
    tmp_iter_arg_44 = var_invalid.object;

    if ( tmp_iter_arg_44 == NULL )
    {
        Py_DECREF( tmp_call_pos_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 72742 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1651;
        goto try_finally_handler_80;
    }

    tmp_assign_source_245 = MAKE_ITERATOR( tmp_iter_arg_44 );
    if ( tmp_assign_source_245 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_12 );

        frame_function->f_lineno = 1651;
        goto try_finally_handler_80;
    }
    assert( tmp_listcontr_16__listcontr_iter.object == NULL );
    tmp_listcontr_16__listcontr_iter.object = tmp_assign_source_245;

    tmp_assign_source_246 = PyList_New( 0 );
    assert( tmp_listcontr_16__listcontr_result.object == NULL );
    tmp_listcontr_16__listcontr_result.object = tmp_assign_source_246;

    loop_start_30:;
    tmp_next_source_29 = tmp_listcontr_16__listcontr_iter.object;

    tmp_assign_source_247 = ITERATOR_NEXT( tmp_next_source_29 );
    if (tmp_assign_source_247 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_30;

        }
        else
        {
            Py_DECREF( tmp_call_pos_12 );
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1651;
            goto try_finally_handler_80;
        }
    }

    if (tmp_listcontr_16__iter_value_0.object == NULL)
    {
        tmp_listcontr_16__iter_value_0.object = tmp_assign_source_247;
    }
    else
    {
        PyObject *old = tmp_listcontr_16__iter_value_0.object;
        tmp_listcontr_16__iter_value_0.object = tmp_assign_source_247;
        Py_DECREF( old );
    }
    tmp_assign_source_248 = tmp_listcontr_16__iter_value_0.object;

    if (var__.object == NULL)
    {
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_248 );
    }
    else
    {
        PyObject *old = var__.object;
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_248 );
        Py_DECREF( old );
    }
    tmp_subscr_target_11 = var__.object;

    tmp_subscr_subscript_11 = const_int_0;
    tmp_compare_left_38 = LOOKUP_SUBSCRIPT( tmp_subscr_target_11, tmp_subscr_subscript_11 );
    if ( tmp_compare_left_38 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_12 );

        frame_function->f_lineno = 1652;
        goto try_finally_handler_80;
    }
    tmp_binop_left_19 = var_nbrows.object;

    if ( tmp_binop_left_19 == NULL )
    {
        Py_DECREF( tmp_call_pos_12 );
        Py_DECREF( tmp_compare_left_38 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173313 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1652;
        goto try_finally_handler_80;
    }

    tmp_binop_right_19 = par_skip_header.object;

    if ( tmp_binop_right_19 == NULL )
    {
        Py_DECREF( tmp_call_pos_12 );
        Py_DECREF( tmp_compare_left_38 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171951 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1652;
        goto try_finally_handler_80;
    }

    tmp_compare_right_38 = BINARY_OPERATION_ADD( tmp_binop_left_19, tmp_binop_right_19 );
    if ( tmp_compare_right_38 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_12 );
        Py_DECREF( tmp_compare_left_38 );

        frame_function->f_lineno = 1652;
        goto try_finally_handler_80;
    }
    tmp_cmp_Gt_4 = RICH_COMPARE_BOOL_GT( tmp_compare_left_38, tmp_compare_right_38 );
    if ( tmp_cmp_Gt_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_12 );
        Py_DECREF( tmp_compare_left_38 );
        Py_DECREF( tmp_compare_right_38 );

        frame_function->f_lineno = 1652;
        goto try_finally_handler_80;
    }
    Py_DECREF( tmp_compare_left_38 );
    Py_DECREF( tmp_compare_right_38 );
    if (tmp_cmp_Gt_4 == 1)
    {
        goto branch_yes_70;
    }
    else
    {
        goto branch_no_70;
    }
    branch_yes_70:;
    tmp_append_to_16 = tmp_listcontr_16__listcontr_result.object;

    tmp_append_value_16 = var__.object;

    tmp_res = PyList_Append( tmp_append_to_16, tmp_append_value_16 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_12 );

        frame_function->f_lineno = 1651;
        goto try_finally_handler_80;
    }
    tmp_unused = Py_None;
    branch_no_70:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_12 );

        frame_function->f_lineno = 1651;
        goto try_finally_handler_80;
    }
    goto loop_start_30;
    loop_end_30:;
    tmp_tuple_element_20 = tmp_listcontr_16__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_80:;
    exception_keeper_type_76 = exception_type;
    exception_keeper_value_76 = exception_value;
    exception_keeper_tb_76 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_65 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_16__iter_value_0.object );
    tmp_listcontr_16__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_65;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_76 != NULL )
    {
        exception_type = exception_keeper_type_76;
        exception_value = exception_keeper_value_76;
        exception_tb = exception_keeper_tb_76;

        goto try_finally_handler_79;
    }

    goto finally_end_79;
    finally_end_79:;
    Py_INCREF( tmp_tuple_element_20 );
    PyTuple_SET_ITEM( tmp_call_pos_12, 0, tmp_tuple_element_20 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_79:;
    exception_keeper_type_77 = exception_type;
    exception_keeper_value_77 = exception_value;
    exception_keeper_tb_77 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_66 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_16__listcontr_result.object );
    tmp_listcontr_16__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_16__listcontr_iter.object );
    tmp_listcontr_16__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_66;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_77 != NULL )
    {
        exception_type = exception_keeper_type_77;
        exception_value = exception_keeper_value_77;
        exception_tb = exception_keeper_tb_77;

        goto frame_exception_exit_1;
    }

    goto finally_end_80;
    finally_end_80:;
    frame_function->f_lineno = 1651;
    tmp_assign_source_244 = CALL_FUNCTION_WITH_POSARGS( tmp_called_90, tmp_call_pos_12 );
    Py_DECREF( tmp_call_pos_12 );
    if ( tmp_assign_source_244 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1651;
        goto frame_exception_exit_1;
    }
    assert( var_nbinvalid_skipped.object == NULL );
    var_nbinvalid_skipped.object = tmp_assign_source_244;

    tmp_slice_source_3 = var_invalid.object;

    if ( tmp_slice_source_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 72742 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1653;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_20 = var_nbinvalid.object;

    if ( tmp_binop_left_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173365 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1653;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_20 = var_nbinvalid_skipped.object;

    tmp_slice_upper_2 = BINARY_OPERATION_SUB( tmp_binop_left_20, tmp_binop_right_20 );
    if ( tmp_slice_upper_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1653;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_249 = LOOKUP_SLICE( tmp_slice_source_3, Py_None, tmp_slice_upper_2 );
    Py_DECREF( tmp_slice_upper_2 );
    if ( tmp_assign_source_249 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1653;
        goto frame_exception_exit_1;
    }
    if (var_invalid.object == NULL)
    {
        var_invalid.object = tmp_assign_source_249;
    }
    else
    {
        PyObject *old = var_invalid.object;
        var_invalid.object = tmp_assign_source_249;
        Py_DECREF( old );
    }
    tmp_assign_source_250 = par_skip_footer.object;

    if ( tmp_assign_source_250 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173256 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1654;
        goto frame_exception_exit_1;
    }

    assert( tmp_inplace_assign_3__inplace_start.object == NULL );
    tmp_inplace_assign_3__inplace_start.object = INCREASE_REFCOUNT( tmp_assign_source_250 );

    // Tried code
    tmp_binop_left_21 = tmp_inplace_assign_3__inplace_start.object;

    tmp_binop_right_21 = var_nbinvalid_skipped.object;

    tmp_assign_source_251 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_binop_left_21, tmp_binop_right_21 );
    if ( tmp_assign_source_251 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1654;
        goto try_finally_handler_81;
    }
    assert( tmp_inplace_assign_3__inplace_end.object == NULL );
    tmp_inplace_assign_3__inplace_end.object = tmp_assign_source_251;

    tmp_compare_left_39 = tmp_inplace_assign_3__inplace_start.object;

    tmp_compare_right_39 = tmp_inplace_assign_3__inplace_end.object;

    tmp_isnot_7 = ( tmp_compare_left_39 != tmp_compare_right_39 );
    if (tmp_isnot_7)
    {
        goto branch_yes_71;
    }
    else
    {
        goto branch_no_71;
    }
    branch_yes_71:;
    tmp_assign_source_252 = tmp_inplace_assign_3__inplace_end.object;

    if (par_skip_footer.object == NULL)
    {
        par_skip_footer.object = INCREASE_REFCOUNT( tmp_assign_source_252 );
    }
    else
    {
        PyObject *old = par_skip_footer.object;
        par_skip_footer.object = INCREASE_REFCOUNT( tmp_assign_source_252 );
        Py_DECREF( old );
    }
    branch_no_71:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_81:;
    exception_keeper_type_78 = exception_type;
    exception_keeper_value_78 = exception_value;
    exception_keeper_tb_78 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_67 = frame_function->f_lineno;
    tmp_result = tmp_inplace_assign_3__inplace_start.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_inplace_assign_3__inplace_start.object );
        tmp_inplace_assign_3__inplace_start.object = NULL;
    }

    assert( tmp_result != false );
    Py_XDECREF( tmp_inplace_assign_3__inplace_end.object );
    tmp_inplace_assign_3__inplace_end.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_67;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_78 != NULL )
    {
        exception_type = exception_keeper_type_78;
        exception_value = exception_keeper_value_78;
        exception_tb = exception_keeper_tb_78;

        goto frame_exception_exit_1;
    }

    goto finally_end_81;
    finally_end_81:;
    branch_no_69:;
    // Tried code
    tmp_assign_source_253 = NULL;
    // Tried code
    tmp_iter_arg_45 = var_invalid.object;

    if ( tmp_iter_arg_45 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 72742 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1661;
        goto try_finally_handler_83;
    }

    tmp_assign_source_254 = MAKE_ITERATOR( tmp_iter_arg_45 );
    if ( tmp_assign_source_254 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1660;
        goto try_finally_handler_83;
    }
    assert( tmp_listcontr_17__listcontr_iter.object == NULL );
    tmp_listcontr_17__listcontr_iter.object = tmp_assign_source_254;

    tmp_assign_source_255 = PyList_New( 0 );
    assert( tmp_listcontr_17__listcontr_result.object == NULL );
    tmp_listcontr_17__listcontr_result.object = tmp_assign_source_255;

    loop_start_31:;
    tmp_next_source_30 = tmp_listcontr_17__listcontr_iter.object;

    tmp_assign_source_256 = ITERATOR_NEXT( tmp_next_source_30 );
    if (tmp_assign_source_256 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_31;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1660;
            goto try_finally_handler_83;
        }
    }

    if (tmp_listcontr_17__iter_value_0.object == NULL)
    {
        tmp_listcontr_17__iter_value_0.object = tmp_assign_source_256;
    }
    else
    {
        PyObject *old = tmp_listcontr_17__iter_value_0.object;
        tmp_listcontr_17__iter_value_0.object = tmp_assign_source_256;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_46 = tmp_listcontr_17__iter_value_0.object;

    tmp_assign_source_257 = MAKE_ITERATOR( tmp_iter_arg_46 );
    if ( tmp_assign_source_257 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1660;
        goto try_finally_handler_84;
    }
    if (tmp_tuple_unpack_13__source_iter.object == NULL)
    {
        tmp_tuple_unpack_13__source_iter.object = tmp_assign_source_257;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_13__source_iter.object;
        tmp_tuple_unpack_13__source_iter.object = tmp_assign_source_257;
        Py_DECREF( old );
    }
    tmp_unpack_26 = tmp_tuple_unpack_13__source_iter.object;

    tmp_assign_source_258 = UNPACK_PARAMETER_NEXT( tmp_unpack_26, 0 );
    if ( tmp_assign_source_258 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1660;
        goto try_finally_handler_84;
    }
    if (tmp_tuple_unpack_13__element_1.object == NULL)
    {
        tmp_tuple_unpack_13__element_1.object = tmp_assign_source_258;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_13__element_1.object;
        tmp_tuple_unpack_13__element_1.object = tmp_assign_source_258;
        Py_DECREF( old );
    }
    tmp_unpack_27 = tmp_tuple_unpack_13__source_iter.object;

    tmp_assign_source_259 = UNPACK_PARAMETER_NEXT( tmp_unpack_27, 1 );
    if ( tmp_assign_source_259 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1660;
        goto try_finally_handler_84;
    }
    if (tmp_tuple_unpack_13__element_2.object == NULL)
    {
        tmp_tuple_unpack_13__element_2.object = tmp_assign_source_259;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_13__element_2.object;
        tmp_tuple_unpack_13__element_2.object = tmp_assign_source_259;
        Py_DECREF( old );
    }
    tmp_iterator_name_13 = tmp_tuple_unpack_13__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_13 ); assert( PyIter_Check( tmp_iterator_name_13 ) );

    tmp_iterator_attempt_13 = (*Py_TYPE( tmp_iterator_name_13 )->tp_iternext)( tmp_iterator_name_13 );

    if (likely( tmp_iterator_attempt_13 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_84;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_13 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_84;
    }
    tmp_assign_source_260 = tmp_tuple_unpack_13__element_1.object;

    if (var_i.storage->object == NULL)
    {
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_260 );
    }
    else
    {
        PyObject *old = var_i.storage->object;
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_260 );
        Py_DECREF( old );
    }
    tmp_assign_source_261 = tmp_tuple_unpack_13__element_2.object;

    if (var_nb.object == NULL)
    {
        var_nb.object = INCREASE_REFCOUNT( tmp_assign_source_261 );
    }
    else
    {
        PyObject *old = var_nb.object;
        var_nb.object = INCREASE_REFCOUNT( tmp_assign_source_261 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_84:;
    exception_keeper_type_79 = exception_type;
    exception_keeper_value_79 = exception_value;
    exception_keeper_tb_79 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_68 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_13__source_iter.object );
    tmp_tuple_unpack_13__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_13__element_1.object );
    tmp_tuple_unpack_13__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_13__element_2.object );
    tmp_tuple_unpack_13__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_68;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_79 != NULL )
    {
        exception_type = exception_keeper_type_79;
        exception_value = exception_keeper_value_79;
        exception_tb = exception_keeper_tb_79;

        goto try_finally_handler_83;
    }

    goto finally_end_82;
    finally_end_82:;
    tmp_append_to_17 = tmp_listcontr_17__listcontr_result.object;

    tmp_binop_left_22 = var_template.object;

    if ( tmp_binop_left_22 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 88842 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1660;
        goto try_finally_handler_83;
    }

    tmp_binop_right_22 = PyTuple_New( 2 );
    tmp_tuple_element_21 = var_i.storage->object;

    if ( tmp_tuple_element_21 == NULL )
    {
        Py_DECREF( tmp_binop_right_22 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1660;
        goto try_finally_handler_83;
    }

    Py_INCREF( tmp_tuple_element_21 );
    PyTuple_SET_ITEM( tmp_binop_right_22, 0, tmp_tuple_element_21 );
    tmp_tuple_element_21 = var_nb.object;

    if ( tmp_tuple_element_21 == NULL )
    {
        Py_DECREF( tmp_binop_right_22 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 69874 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1660;
        goto try_finally_handler_83;
    }

    Py_INCREF( tmp_tuple_element_21 );
    PyTuple_SET_ITEM( tmp_binop_right_22, 1, tmp_tuple_element_21 );
    tmp_append_value_17 = BINARY_OPERATION_REMAINDER( tmp_binop_left_22, tmp_binop_right_22 );
    Py_DECREF( tmp_binop_right_22 );
    if ( tmp_append_value_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1660;
        goto try_finally_handler_83;
    }
    tmp_res = PyList_Append( tmp_append_to_17, tmp_append_value_17 );
    Py_DECREF( tmp_append_value_17 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1660;
        goto try_finally_handler_83;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1660;
        goto try_finally_handler_83;
    }
    goto loop_start_31;
    loop_end_31:;
    tmp_assign_source_253 = tmp_listcontr_17__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_83:;
    exception_keeper_type_80 = exception_type;
    exception_keeper_value_80 = exception_value;
    exception_keeper_tb_80 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_69 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_17__iter_value_0.object );
    tmp_listcontr_17__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_69;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_80 != NULL )
    {
        exception_type = exception_keeper_type_80;
        exception_value = exception_keeper_value_80;
        exception_tb = exception_keeper_tb_80;

        goto try_finally_handler_82;
    }

    goto finally_end_83;
    finally_end_83:;
    if (var_errmsg.object == NULL)
    {
        var_errmsg.object = INCREASE_REFCOUNT( tmp_assign_source_253 );
    }
    else
    {
        PyObject *old = var_errmsg.object;
        var_errmsg.object = INCREASE_REFCOUNT( tmp_assign_source_253 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_82:;
    exception_keeper_type_81 = exception_type;
    exception_keeper_value_81 = exception_value;
    exception_keeper_tb_81 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_70 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_17__listcontr_result.object );
    tmp_listcontr_17__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_17__listcontr_iter.object );
    tmp_listcontr_17__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_70;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_81 != NULL )
    {
        exception_type = exception_keeper_type_81;
        exception_value = exception_keeper_value_81;
        exception_tb = exception_keeper_tb_81;

        goto frame_exception_exit_1;
    }

    goto finally_end_84;
    finally_end_84:;
    tmp_len_arg_10 = var_errmsg.object;

    if ( tmp_len_arg_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173204 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1662;
        goto frame_exception_exit_1;
    }

    tmp_cond_value_29 = BUILTIN_LEN( tmp_len_arg_10 );
    if ( tmp_cond_value_29 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1662;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_29 = CHECK_IF_TRUE( tmp_cond_value_29 );
    if ( tmp_cond_truth_29 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_29 );

        frame_function->f_lineno = 1662;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_29 );
    if (tmp_cond_truth_29 == 1)
    {
        goto branch_yes_72;
    }
    else
    {
        goto branch_no_72;
    }
    branch_yes_72:;
    tmp_source_name_54 = var_errmsg.object;

    if ( tmp_source_name_54 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173204 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1663;
        goto frame_exception_exit_1;
    }

    tmp_called_91 = LOOKUP_ATTRIBUTE( tmp_source_name_54, const_str_plain_insert );
    if ( tmp_called_91 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1663;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_80 = const_int_0;
    tmp_call_arg_element_81 = const_str_digest_8fa48a7d33fb436be001be0ed86ed34e;
    frame_function->f_lineno = 1663;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_91, tmp_call_arg_element_80, tmp_call_arg_element_81 );
    Py_DECREF( tmp_called_91 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1663;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_55 = const_str_newline;
    tmp_called_92 = LOOKUP_ATTRIBUTE( tmp_source_name_55, const_str_plain_join );
    if ( tmp_called_92 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1664;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_82 = var_errmsg.object;

    if ( tmp_call_arg_element_82 == NULL )
    {
        Py_DECREF( tmp_called_92 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173204 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1664;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1664;
    tmp_assign_source_262 = CALL_FUNCTION_WITH_ARGS1( tmp_called_92, tmp_call_arg_element_82 );
    Py_DECREF( tmp_called_92 );
    if ( tmp_assign_source_262 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1664;
        goto frame_exception_exit_1;
    }
    if (var_errmsg.object == NULL)
    {
        var_errmsg.object = tmp_assign_source_262;
    }
    else
    {
        PyObject *old = var_errmsg.object;
        var_errmsg.object = tmp_assign_source_262;
        Py_DECREF( old );
    }
    tmp_cond_value_30 = par_invalid_raise.object;

    if ( tmp_cond_value_30 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173420 ], 59, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1666;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_30 = CHECK_IF_TRUE( tmp_cond_value_30 );
    if ( tmp_cond_truth_30 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1666;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_30 == 1)
    {
        goto branch_yes_73;
    }
    else
    {
        goto branch_no_73;
    }
    branch_yes_73:;
    tmp_make_exception_arg_3 = var_errmsg.object;

    frame_function->f_lineno = 1667;
    tmp_raise_type_4 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, tmp_make_exception_arg_3 );
    if ( tmp_raise_type_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1667;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_4;
    frame_function->f_lineno = 1667;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    goto branch_end_73;
    branch_no_73:;
    tmp_source_name_56 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_warnings );

    if (unlikely( tmp_source_name_56 == NULL ))
    {
        tmp_source_name_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
    }

    if ( tmp_source_name_56 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6827 ], 37, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1670;
        goto frame_exception_exit_1;
    }

    tmp_called_93 = LOOKUP_ATTRIBUTE( tmp_source_name_56, const_str_plain_warn );
    if ( tmp_called_93 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1670;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_83 = var_errmsg.object;

    tmp_call_arg_element_84 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_ConversionWarning );

    if (unlikely( tmp_call_arg_element_84 == NULL ))
    {
        tmp_call_arg_element_84 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ConversionWarning );
    }

    if ( tmp_call_arg_element_84 == NULL )
    {
        Py_DECREF( tmp_called_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173479 ], 46, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1670;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1670;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_93, tmp_call_arg_element_83, tmp_call_arg_element_84 );
    Py_DECREF( tmp_called_93 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1670;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_end_73:;
    branch_no_72:;
    branch_no_68:;
    tmp_compare_left_40 = par_skip_footer.object;

    if ( tmp_compare_left_40 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173256 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1673;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_40 = const_int_0;
    tmp_cmp_Gt_5 = RICH_COMPARE_BOOL_GT( tmp_compare_left_40, tmp_compare_right_40 );
    if ( tmp_cmp_Gt_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1673;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Gt_5 == 1)
    {
        goto branch_yes_74;
    }
    else
    {
        goto branch_no_74;
    }
    branch_yes_74:;
    tmp_slice_source_4 = var_rows.object;

    if ( tmp_slice_source_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 76958 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1674;
        goto frame_exception_exit_1;
    }

    tmp_unary_arg_1 = par_skip_footer.object;

    if ( tmp_unary_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173256 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1674;
        goto frame_exception_exit_1;
    }

    tmp_slice_upper_3 = UNARY_OPERATION( PyNumber_Negative, tmp_unary_arg_1 );
    if ( tmp_slice_upper_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1674;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_263 = LOOKUP_SLICE( tmp_slice_source_4, Py_None, tmp_slice_upper_3 );
    Py_DECREF( tmp_slice_upper_3 );
    if ( tmp_assign_source_263 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1674;
        goto frame_exception_exit_1;
    }
    if (var_rows.object == NULL)
    {
        var_rows.object = tmp_assign_source_263;
    }
    else
    {
        PyObject *old = var_rows.object;
        var_rows.object = tmp_assign_source_263;
        Py_DECREF( old );
    }
    tmp_cond_value_31 = par_usemask.object;

    if ( tmp_cond_value_31 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171857 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1675;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_31 = CHECK_IF_TRUE( tmp_cond_value_31 );
    if ( tmp_cond_truth_31 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1675;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_31 == 1)
    {
        goto branch_yes_75;
    }
    else
    {
        goto branch_no_75;
    }
    branch_yes_75:;
    tmp_slice_source_5 = var_masks.object;

    if ( tmp_slice_source_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173525 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1676;
        goto frame_exception_exit_1;
    }

    tmp_unary_arg_2 = par_skip_footer.object;

    if ( tmp_unary_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173256 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1676;
        goto frame_exception_exit_1;
    }

    tmp_slice_upper_4 = UNARY_OPERATION( PyNumber_Negative, tmp_unary_arg_2 );
    if ( tmp_slice_upper_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1676;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_264 = LOOKUP_SLICE( tmp_slice_source_5, Py_None, tmp_slice_upper_4 );
    Py_DECREF( tmp_slice_upper_4 );
    if ( tmp_assign_source_264 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1676;
        goto frame_exception_exit_1;
    }
    if (var_masks.object == NULL)
    {
        var_masks.object = tmp_assign_source_264;
    }
    else
    {
        PyObject *old = var_masks.object;
        var_masks.object = tmp_assign_source_264;
        Py_DECREF( old );
    }
    branch_no_75:;
    branch_no_74:;
    tmp_cond_value_32 = par_loose.object;

    if ( tmp_cond_value_32 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173576 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1689;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_32 = CHECK_IF_TRUE( tmp_cond_value_32 );
    if ( tmp_cond_truth_32 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1689;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_32 == 1)
    {
        goto branch_yes_76;
    }
    else
    {
        goto branch_no_76;
    }
    branch_yes_76:;
    tmp_list_arg_6 = NULL;
    // Tried code
    tmp_dircall_arg1_1 = LOOKUP_BUILTIN( const_str_plain_zip );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1690;
        goto try_finally_handler_85;
    }
    tmp_dircall_arg2_1 = NULL;
    // Tried code
    tmp_called_94 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    if ( tmp_called_94 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1691;
        goto try_finally_handler_86;
    }
    tmp_call_arg_element_85 = par_converters.object;

    if ( tmp_call_arg_element_85 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170342 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1691;
        goto try_finally_handler_86;
    }

    frame_function->f_lineno = 1691;
    tmp_iter_arg_47 = CALL_FUNCTION_WITH_ARGS1( tmp_called_94, tmp_call_arg_element_85 );
    if ( tmp_iter_arg_47 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1691;
        goto try_finally_handler_86;
    }
    tmp_assign_source_266 = MAKE_ITERATOR( tmp_iter_arg_47 );
    Py_DECREF( tmp_iter_arg_47 );
    if ( tmp_assign_source_266 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1690;
        goto try_finally_handler_86;
    }
    assert( tmp_listcontr_18__listcontr_iter.object == NULL );
    tmp_listcontr_18__listcontr_iter.object = tmp_assign_source_266;

    tmp_assign_source_267 = PyList_New( 0 );
    assert( tmp_listcontr_18__listcontr_result.object == NULL );
    tmp_listcontr_18__listcontr_result.object = tmp_assign_source_267;

    loop_start_32:;
    tmp_next_source_31 = tmp_listcontr_18__listcontr_iter.object;

    tmp_assign_source_268 = ITERATOR_NEXT( tmp_next_source_31 );
    if (tmp_assign_source_268 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_32;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1690;
            goto try_finally_handler_86;
        }
    }

    if (tmp_listcontr_18__iter_value_0.object == NULL)
    {
        tmp_listcontr_18__iter_value_0.object = tmp_assign_source_268;
    }
    else
    {
        PyObject *old = tmp_listcontr_18__iter_value_0.object;
        tmp_listcontr_18__iter_value_0.object = tmp_assign_source_268;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_48 = tmp_listcontr_18__iter_value_0.object;

    tmp_assign_source_269 = MAKE_ITERATOR( tmp_iter_arg_48 );
    if ( tmp_assign_source_269 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1690;
        goto try_finally_handler_87;
    }
    if (tmp_tuple_unpack_14__source_iter.object == NULL)
    {
        tmp_tuple_unpack_14__source_iter.object = tmp_assign_source_269;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_14__source_iter.object;
        tmp_tuple_unpack_14__source_iter.object = tmp_assign_source_269;
        Py_DECREF( old );
    }
    tmp_unpack_28 = tmp_tuple_unpack_14__source_iter.object;

    tmp_assign_source_270 = UNPACK_PARAMETER_NEXT( tmp_unpack_28, 0 );
    if ( tmp_assign_source_270 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1690;
        goto try_finally_handler_87;
    }
    if (tmp_tuple_unpack_14__element_1.object == NULL)
    {
        tmp_tuple_unpack_14__element_1.object = tmp_assign_source_270;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_14__element_1.object;
        tmp_tuple_unpack_14__element_1.object = tmp_assign_source_270;
        Py_DECREF( old );
    }
    tmp_unpack_29 = tmp_tuple_unpack_14__source_iter.object;

    tmp_assign_source_271 = UNPACK_PARAMETER_NEXT( tmp_unpack_29, 1 );
    if ( tmp_assign_source_271 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1690;
        goto try_finally_handler_87;
    }
    if (tmp_tuple_unpack_14__element_2.object == NULL)
    {
        tmp_tuple_unpack_14__element_2.object = tmp_assign_source_271;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_14__element_2.object;
        tmp_tuple_unpack_14__element_2.object = tmp_assign_source_271;
        Py_DECREF( old );
    }
    tmp_iterator_name_14 = tmp_tuple_unpack_14__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_14 ); assert( PyIter_Check( tmp_iterator_name_14 ) );

    tmp_iterator_attempt_14 = (*Py_TYPE( tmp_iterator_name_14 )->tp_iternext)( tmp_iterator_name_14 );

    if (likely( tmp_iterator_attempt_14 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_87;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_14 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_87;
    }
    tmp_assign_source_272 = tmp_tuple_unpack_14__element_1.object;

    if (var_i.storage->object == NULL)
    {
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_272 );
    }
    else
    {
        PyObject *old = var_i.storage->object;
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_272 );
        Py_DECREF( old );
    }
    tmp_assign_source_273 = tmp_tuple_unpack_14__element_2.object;

    if (var_converter.object == NULL)
    {
        var_converter.object = INCREASE_REFCOUNT( tmp_assign_source_273 );
    }
    else
    {
        PyObject *old = var_converter.object;
        var_converter.object = INCREASE_REFCOUNT( tmp_assign_source_273 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_87:;
    exception_keeper_type_82 = exception_type;
    exception_keeper_value_82 = exception_value;
    exception_keeper_tb_82 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_71 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_14__source_iter.object );
    tmp_tuple_unpack_14__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_14__element_1.object );
    tmp_tuple_unpack_14__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_14__element_2.object );
    tmp_tuple_unpack_14__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_71;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_82 != NULL )
    {
        exception_type = exception_keeper_type_82;
        exception_value = exception_keeper_value_82;
        exception_tb = exception_keeper_tb_82;

        goto try_finally_handler_86;
    }

    goto finally_end_85;
    finally_end_85:;
    // Tried code
    tmp_append_to_18 = tmp_listcontr_18__listcontr_result.object;

    tmp_append_value_18 = NULL;
    // Tried code
    tmp_called_95 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_map );

    if (unlikely( tmp_called_95 == NULL ))
    {
        tmp_called_95 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_map );
    }

    if ( tmp_called_95 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171452 ], 32, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1690;
        goto try_finally_handler_89;
    }

    tmp_called_96 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_itemgetter );

    if (unlikely( tmp_called_96 == NULL ))
    {
        tmp_called_96 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_itemgetter );
    }

    if ( tmp_called_96 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173050 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1690;
        goto try_finally_handler_89;
    }

    tmp_call_arg_element_87 = var_i.storage->object;

    if ( tmp_call_arg_element_87 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1690;
        goto try_finally_handler_89;
    }

    frame_function->f_lineno = 1690;
    tmp_call_arg_element_86 = CALL_FUNCTION_WITH_ARGS1( tmp_called_96, tmp_call_arg_element_87 );
    if ( tmp_call_arg_element_86 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1690;
        goto try_finally_handler_89;
    }
    tmp_call_arg_element_88 = var_rows.object;

    if ( tmp_call_arg_element_88 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_86 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 76958 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1690;
        goto try_finally_handler_89;
    }

    frame_function->f_lineno = 1690;
    tmp_iter_arg_49 = CALL_FUNCTION_WITH_ARGS2( tmp_called_95, tmp_call_arg_element_86, tmp_call_arg_element_88 );
    Py_DECREF( tmp_call_arg_element_86 );
    if ( tmp_iter_arg_49 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1690;
        goto try_finally_handler_89;
    }
    tmp_assign_source_274 = MAKE_ITERATOR( tmp_iter_arg_49 );
    Py_DECREF( tmp_iter_arg_49 );
    if ( tmp_assign_source_274 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1690;
        goto try_finally_handler_89;
    }
    if (tmp_listcontr_19__listcontr_iter.object == NULL)
    {
        tmp_listcontr_19__listcontr_iter.object = tmp_assign_source_274;
    }
    else
    {
        PyObject *old = tmp_listcontr_19__listcontr_iter.object;
        tmp_listcontr_19__listcontr_iter.object = tmp_assign_source_274;
        Py_DECREF( old );
    }
    tmp_assign_source_275 = PyList_New( 0 );
    if (tmp_listcontr_19__listcontr_result.object == NULL)
    {
        tmp_listcontr_19__listcontr_result.object = tmp_assign_source_275;
    }
    else
    {
        PyObject *old = tmp_listcontr_19__listcontr_result.object;
        tmp_listcontr_19__listcontr_result.object = tmp_assign_source_275;
        Py_DECREF( old );
    }
    loop_start_33:;
    tmp_next_source_32 = tmp_listcontr_19__listcontr_iter.object;

    tmp_assign_source_276 = ITERATOR_NEXT( tmp_next_source_32 );
    if (tmp_assign_source_276 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_33;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1690;
            goto try_finally_handler_89;
        }
    }

    if (tmp_listcontr_19__iter_value_0.object == NULL)
    {
        tmp_listcontr_19__iter_value_0.object = tmp_assign_source_276;
    }
    else
    {
        PyObject *old = tmp_listcontr_19__iter_value_0.object;
        tmp_listcontr_19__iter_value_0.object = tmp_assign_source_276;
        Py_DECREF( old );
    }
    tmp_assign_source_277 = tmp_listcontr_19__iter_value_0.object;

    if (var__r.object == NULL)
    {
        var__r.object = INCREASE_REFCOUNT( tmp_assign_source_277 );
    }
    else
    {
        PyObject *old = var__r.object;
        var__r.object = INCREASE_REFCOUNT( tmp_assign_source_277 );
        Py_DECREF( old );
    }
    tmp_append_to_19 = tmp_listcontr_19__listcontr_result.object;

    tmp_source_name_57 = var_converter.object;

    if ( tmp_source_name_57 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173089 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1690;
        goto try_finally_handler_89;
    }

    tmp_called_97 = LOOKUP_ATTRIBUTE( tmp_source_name_57, const_str_plain__loose_call );
    if ( tmp_called_97 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1690;
        goto try_finally_handler_89;
    }
    tmp_call_arg_element_89 = var__r.object;

    frame_function->f_lineno = 1690;
    tmp_append_value_19 = CALL_FUNCTION_WITH_ARGS1( tmp_called_97, tmp_call_arg_element_89 );
    Py_DECREF( tmp_called_97 );
    if ( tmp_append_value_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1690;
        goto try_finally_handler_89;
    }
    tmp_res = PyList_Append( tmp_append_to_19, tmp_append_value_19 );
    Py_DECREF( tmp_append_value_19 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1690;
        goto try_finally_handler_89;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1690;
        goto try_finally_handler_89;
    }
    goto loop_start_33;
    loop_end_33:;
    tmp_append_value_18 = tmp_listcontr_19__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_89:;
    exception_keeper_type_83 = exception_type;
    exception_keeper_value_83 = exception_value;
    exception_keeper_tb_83 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_72 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_19__iter_value_0.object );
    tmp_listcontr_19__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_72;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_83 != NULL )
    {
        exception_type = exception_keeper_type_83;
        exception_value = exception_keeper_value_83;
        exception_tb = exception_keeper_tb_83;

        goto try_finally_handler_88;
    }

    goto finally_end_86;
    finally_end_86:;
    tmp_res = PyList_Append( tmp_append_to_18, tmp_append_value_18 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1690;
        goto try_finally_handler_88;
    }
    tmp_unused = Py_None;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_88:;
    exception_keeper_type_84 = exception_type;
    exception_keeper_value_84 = exception_value;
    exception_keeper_tb_84 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_73 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_19__listcontr_result.object );
    tmp_listcontr_19__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_19__listcontr_iter.object );
    tmp_listcontr_19__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_73;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_84 != NULL )
    {
        exception_type = exception_keeper_type_84;
        exception_value = exception_keeper_value_84;
        exception_tb = exception_keeper_tb_84;

        goto try_finally_handler_86;
    }

    goto finally_end_87;
    finally_end_87:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1690;
        goto try_finally_handler_86;
    }
    goto loop_start_32;
    loop_end_32:;
    tmp_dircall_arg2_1 = tmp_listcontr_18__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_86:;
    exception_keeper_type_85 = exception_type;
    exception_keeper_value_85 = exception_value;
    exception_keeper_tb_85 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_74 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_18__iter_value_0.object );
    tmp_listcontr_18__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_74;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_85 != NULL )
    {
        exception_type = exception_keeper_type_85;
        exception_value = exception_keeper_value_85;
        exception_tb = exception_keeper_tb_85;

        goto try_finally_handler_85;
    }

    goto finally_end_88;
    finally_end_88:;
    tmp_list_arg_6 = impl_function_3_complex_call_helper_star_list_of_module___internal__( INCREASE_REFCOUNT( tmp_dircall_arg1_1 ), INCREASE_REFCOUNT( tmp_dircall_arg2_1 ) );
    if ( tmp_list_arg_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1690;
        goto try_finally_handler_85;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_85:;
    exception_keeper_type_86 = exception_type;
    exception_keeper_value_86 = exception_value;
    exception_keeper_tb_86 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_75 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_18__listcontr_result.object );
    tmp_listcontr_18__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_18__listcontr_iter.object );
    tmp_listcontr_18__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_75;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_86 != NULL )
    {
        exception_type = exception_keeper_type_86;
        exception_value = exception_keeper_value_86;
        exception_tb = exception_keeper_tb_86;

        goto frame_exception_exit_1;
    }

    goto finally_end_89;
    finally_end_89:;
    tmp_assign_source_265 = PySequence_List( tmp_list_arg_6 );
    Py_DECREF( tmp_list_arg_6 );
    if ( tmp_assign_source_265 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1690;
        goto frame_exception_exit_1;
    }
    if (var_rows.object == NULL)
    {
        var_rows.object = tmp_assign_source_265;
    }
    else
    {
        PyObject *old = var_rows.object;
        var_rows.object = tmp_assign_source_265;
        Py_DECREF( old );
    }
    goto branch_end_76;
    branch_no_76:;
    tmp_list_arg_7 = NULL;
    // Tried code
    tmp_dircall_arg1_2 = LOOKUP_BUILTIN( const_str_plain_zip );
    if ( tmp_dircall_arg1_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1693;
        goto try_finally_handler_90;
    }
    tmp_dircall_arg2_2 = NULL;
    // Tried code
    tmp_called_98 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    if ( tmp_called_98 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1694;
        goto try_finally_handler_91;
    }
    tmp_call_arg_element_90 = par_converters.object;

    if ( tmp_call_arg_element_90 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170342 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1694;
        goto try_finally_handler_91;
    }

    frame_function->f_lineno = 1694;
    tmp_iter_arg_50 = CALL_FUNCTION_WITH_ARGS1( tmp_called_98, tmp_call_arg_element_90 );
    if ( tmp_iter_arg_50 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1694;
        goto try_finally_handler_91;
    }
    tmp_assign_source_279 = MAKE_ITERATOR( tmp_iter_arg_50 );
    Py_DECREF( tmp_iter_arg_50 );
    if ( tmp_assign_source_279 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1693;
        goto try_finally_handler_91;
    }
    assert( tmp_listcontr_20__listcontr_iter.object == NULL );
    tmp_listcontr_20__listcontr_iter.object = tmp_assign_source_279;

    tmp_assign_source_280 = PyList_New( 0 );
    assert( tmp_listcontr_20__listcontr_result.object == NULL );
    tmp_listcontr_20__listcontr_result.object = tmp_assign_source_280;

    loop_start_34:;
    tmp_next_source_33 = tmp_listcontr_20__listcontr_iter.object;

    tmp_assign_source_281 = ITERATOR_NEXT( tmp_next_source_33 );
    if (tmp_assign_source_281 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_34;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1693;
            goto try_finally_handler_91;
        }
    }

    if (tmp_listcontr_20__iter_value_0.object == NULL)
    {
        tmp_listcontr_20__iter_value_0.object = tmp_assign_source_281;
    }
    else
    {
        PyObject *old = tmp_listcontr_20__iter_value_0.object;
        tmp_listcontr_20__iter_value_0.object = tmp_assign_source_281;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_51 = tmp_listcontr_20__iter_value_0.object;

    tmp_assign_source_282 = MAKE_ITERATOR( tmp_iter_arg_51 );
    if ( tmp_assign_source_282 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1693;
        goto try_finally_handler_92;
    }
    if (tmp_tuple_unpack_15__source_iter.object == NULL)
    {
        tmp_tuple_unpack_15__source_iter.object = tmp_assign_source_282;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_15__source_iter.object;
        tmp_tuple_unpack_15__source_iter.object = tmp_assign_source_282;
        Py_DECREF( old );
    }
    tmp_unpack_30 = tmp_tuple_unpack_15__source_iter.object;

    tmp_assign_source_283 = UNPACK_PARAMETER_NEXT( tmp_unpack_30, 0 );
    if ( tmp_assign_source_283 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1693;
        goto try_finally_handler_92;
    }
    if (tmp_tuple_unpack_15__element_1.object == NULL)
    {
        tmp_tuple_unpack_15__element_1.object = tmp_assign_source_283;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_15__element_1.object;
        tmp_tuple_unpack_15__element_1.object = tmp_assign_source_283;
        Py_DECREF( old );
    }
    tmp_unpack_31 = tmp_tuple_unpack_15__source_iter.object;

    tmp_assign_source_284 = UNPACK_PARAMETER_NEXT( tmp_unpack_31, 1 );
    if ( tmp_assign_source_284 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1693;
        goto try_finally_handler_92;
    }
    if (tmp_tuple_unpack_15__element_2.object == NULL)
    {
        tmp_tuple_unpack_15__element_2.object = tmp_assign_source_284;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_15__element_2.object;
        tmp_tuple_unpack_15__element_2.object = tmp_assign_source_284;
        Py_DECREF( old );
    }
    tmp_iterator_name_15 = tmp_tuple_unpack_15__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_15 ); assert( PyIter_Check( tmp_iterator_name_15 ) );

    tmp_iterator_attempt_15 = (*Py_TYPE( tmp_iterator_name_15 )->tp_iternext)( tmp_iterator_name_15 );

    if (likely( tmp_iterator_attempt_15 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_92;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_15 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_92;
    }
    tmp_assign_source_285 = tmp_tuple_unpack_15__element_1.object;

    if (var_i.storage->object == NULL)
    {
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_285 );
    }
    else
    {
        PyObject *old = var_i.storage->object;
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_285 );
        Py_DECREF( old );
    }
    tmp_assign_source_286 = tmp_tuple_unpack_15__element_2.object;

    if (var_converter.object == NULL)
    {
        var_converter.object = INCREASE_REFCOUNT( tmp_assign_source_286 );
    }
    else
    {
        PyObject *old = var_converter.object;
        var_converter.object = INCREASE_REFCOUNT( tmp_assign_source_286 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_92:;
    exception_keeper_type_87 = exception_type;
    exception_keeper_value_87 = exception_value;
    exception_keeper_tb_87 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_76 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_15__source_iter.object );
    tmp_tuple_unpack_15__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_15__element_1.object );
    tmp_tuple_unpack_15__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_15__element_2.object );
    tmp_tuple_unpack_15__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_76;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_87 != NULL )
    {
        exception_type = exception_keeper_type_87;
        exception_value = exception_keeper_value_87;
        exception_tb = exception_keeper_tb_87;

        goto try_finally_handler_91;
    }

    goto finally_end_90;
    finally_end_90:;
    // Tried code
    tmp_append_to_20 = tmp_listcontr_20__listcontr_result.object;

    tmp_append_value_20 = NULL;
    // Tried code
    tmp_called_99 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_map );

    if (unlikely( tmp_called_99 == NULL ))
    {
        tmp_called_99 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_map );
    }

    if ( tmp_called_99 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171452 ], 32, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1693;
        goto try_finally_handler_94;
    }

    tmp_called_100 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_itemgetter );

    if (unlikely( tmp_called_100 == NULL ))
    {
        tmp_called_100 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_itemgetter );
    }

    if ( tmp_called_100 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173050 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1693;
        goto try_finally_handler_94;
    }

    tmp_call_arg_element_92 = var_i.storage->object;

    if ( tmp_call_arg_element_92 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1693;
        goto try_finally_handler_94;
    }

    frame_function->f_lineno = 1693;
    tmp_call_arg_element_91 = CALL_FUNCTION_WITH_ARGS1( tmp_called_100, tmp_call_arg_element_92 );
    if ( tmp_call_arg_element_91 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1693;
        goto try_finally_handler_94;
    }
    tmp_call_arg_element_93 = var_rows.object;

    if ( tmp_call_arg_element_93 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_91 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 76958 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1693;
        goto try_finally_handler_94;
    }

    frame_function->f_lineno = 1693;
    tmp_iter_arg_52 = CALL_FUNCTION_WITH_ARGS2( tmp_called_99, tmp_call_arg_element_91, tmp_call_arg_element_93 );
    Py_DECREF( tmp_call_arg_element_91 );
    if ( tmp_iter_arg_52 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1693;
        goto try_finally_handler_94;
    }
    tmp_assign_source_287 = MAKE_ITERATOR( tmp_iter_arg_52 );
    Py_DECREF( tmp_iter_arg_52 );
    if ( tmp_assign_source_287 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1693;
        goto try_finally_handler_94;
    }
    if (tmp_listcontr_21__listcontr_iter.object == NULL)
    {
        tmp_listcontr_21__listcontr_iter.object = tmp_assign_source_287;
    }
    else
    {
        PyObject *old = tmp_listcontr_21__listcontr_iter.object;
        tmp_listcontr_21__listcontr_iter.object = tmp_assign_source_287;
        Py_DECREF( old );
    }
    tmp_assign_source_288 = PyList_New( 0 );
    if (tmp_listcontr_21__listcontr_result.object == NULL)
    {
        tmp_listcontr_21__listcontr_result.object = tmp_assign_source_288;
    }
    else
    {
        PyObject *old = tmp_listcontr_21__listcontr_result.object;
        tmp_listcontr_21__listcontr_result.object = tmp_assign_source_288;
        Py_DECREF( old );
    }
    loop_start_35:;
    tmp_next_source_34 = tmp_listcontr_21__listcontr_iter.object;

    tmp_assign_source_289 = ITERATOR_NEXT( tmp_next_source_34 );
    if (tmp_assign_source_289 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_35;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1693;
            goto try_finally_handler_94;
        }
    }

    if (tmp_listcontr_21__iter_value_0.object == NULL)
    {
        tmp_listcontr_21__iter_value_0.object = tmp_assign_source_289;
    }
    else
    {
        PyObject *old = tmp_listcontr_21__iter_value_0.object;
        tmp_listcontr_21__iter_value_0.object = tmp_assign_source_289;
        Py_DECREF( old );
    }
    tmp_assign_source_290 = tmp_listcontr_21__iter_value_0.object;

    if (var__r.object == NULL)
    {
        var__r.object = INCREASE_REFCOUNT( tmp_assign_source_290 );
    }
    else
    {
        PyObject *old = var__r.object;
        var__r.object = INCREASE_REFCOUNT( tmp_assign_source_290 );
        Py_DECREF( old );
    }
    tmp_append_to_21 = tmp_listcontr_21__listcontr_result.object;

    tmp_source_name_58 = var_converter.object;

    if ( tmp_source_name_58 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173089 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1693;
        goto try_finally_handler_94;
    }

    tmp_called_101 = LOOKUP_ATTRIBUTE( tmp_source_name_58, const_str_plain__strict_call );
    if ( tmp_called_101 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1693;
        goto try_finally_handler_94;
    }
    tmp_call_arg_element_94 = var__r.object;

    frame_function->f_lineno = 1693;
    tmp_append_value_21 = CALL_FUNCTION_WITH_ARGS1( tmp_called_101, tmp_call_arg_element_94 );
    Py_DECREF( tmp_called_101 );
    if ( tmp_append_value_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1693;
        goto try_finally_handler_94;
    }
    tmp_res = PyList_Append( tmp_append_to_21, tmp_append_value_21 );
    Py_DECREF( tmp_append_value_21 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1693;
        goto try_finally_handler_94;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1693;
        goto try_finally_handler_94;
    }
    goto loop_start_35;
    loop_end_35:;
    tmp_append_value_20 = tmp_listcontr_21__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_94:;
    exception_keeper_type_88 = exception_type;
    exception_keeper_value_88 = exception_value;
    exception_keeper_tb_88 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_77 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_21__iter_value_0.object );
    tmp_listcontr_21__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_77;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_88 != NULL )
    {
        exception_type = exception_keeper_type_88;
        exception_value = exception_keeper_value_88;
        exception_tb = exception_keeper_tb_88;

        goto try_finally_handler_93;
    }

    goto finally_end_91;
    finally_end_91:;
    tmp_res = PyList_Append( tmp_append_to_20, tmp_append_value_20 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1693;
        goto try_finally_handler_93;
    }
    tmp_unused = Py_None;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_93:;
    exception_keeper_type_89 = exception_type;
    exception_keeper_value_89 = exception_value;
    exception_keeper_tb_89 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_78 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_21__listcontr_result.object );
    tmp_listcontr_21__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_21__listcontr_iter.object );
    tmp_listcontr_21__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_78;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_89 != NULL )
    {
        exception_type = exception_keeper_type_89;
        exception_value = exception_keeper_value_89;
        exception_tb = exception_keeper_tb_89;

        goto try_finally_handler_91;
    }

    goto finally_end_92;
    finally_end_92:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1693;
        goto try_finally_handler_91;
    }
    goto loop_start_34;
    loop_end_34:;
    tmp_dircall_arg2_2 = tmp_listcontr_20__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_91:;
    exception_keeper_type_90 = exception_type;
    exception_keeper_value_90 = exception_value;
    exception_keeper_tb_90 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_79 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_20__iter_value_0.object );
    tmp_listcontr_20__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_79;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_90 != NULL )
    {
        exception_type = exception_keeper_type_90;
        exception_value = exception_keeper_value_90;
        exception_tb = exception_keeper_tb_90;

        goto try_finally_handler_90;
    }

    goto finally_end_93;
    finally_end_93:;
    tmp_list_arg_7 = impl_function_3_complex_call_helper_star_list_of_module___internal__( INCREASE_REFCOUNT( tmp_dircall_arg1_2 ), INCREASE_REFCOUNT( tmp_dircall_arg2_2 ) );
    if ( tmp_list_arg_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1693;
        goto try_finally_handler_90;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_90:;
    exception_keeper_type_91 = exception_type;
    exception_keeper_value_91 = exception_value;
    exception_keeper_tb_91 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_80 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_20__listcontr_result.object );
    tmp_listcontr_20__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_20__listcontr_iter.object );
    tmp_listcontr_20__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_80;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_91 != NULL )
    {
        exception_type = exception_keeper_type_91;
        exception_value = exception_keeper_value_91;
        exception_tb = exception_keeper_tb_91;

        goto frame_exception_exit_1;
    }

    goto finally_end_94;
    finally_end_94:;
    tmp_assign_source_278 = PySequence_List( tmp_list_arg_7 );
    Py_DECREF( tmp_list_arg_7 );
    if ( tmp_assign_source_278 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1693;
        goto frame_exception_exit_1;
    }
    if (var_rows.object == NULL)
    {
        var_rows.object = tmp_assign_source_278;
    }
    else
    {
        PyObject *old = var_rows.object;
        var_rows.object = tmp_assign_source_278;
        Py_DECREF( old );
    }
    branch_end_76:;
    tmp_assign_source_291 = var_rows.object;

    assert( var_data.object == NULL );
    var_data.object = INCREASE_REFCOUNT( tmp_assign_source_291 );

    tmp_compare_left_41 = par_dtype.object;

    if ( tmp_compare_left_41 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1697;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_41 = Py_None;
    tmp_is_7 = ( tmp_compare_left_41 == tmp_compare_right_41 );
    if (tmp_is_7)
    {
        goto branch_yes_77;
    }
    else
    {
        goto branch_no_77;
    }
    branch_yes_77:;
    // Tried code
    tmp_assign_source_292 = NULL;
    // Tried code
    tmp_iter_arg_53 = par_converters.object;

    if ( tmp_iter_arg_53 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170342 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1699;
        goto try_finally_handler_96;
    }

    tmp_assign_source_293 = MAKE_ITERATOR( tmp_iter_arg_53 );
    if ( tmp_assign_source_293 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1699;
        goto try_finally_handler_96;
    }
    assert( tmp_listcontr_22__listcontr_iter.object == NULL );
    tmp_listcontr_22__listcontr_iter.object = tmp_assign_source_293;

    tmp_assign_source_294 = PyList_New( 0 );
    assert( tmp_listcontr_22__listcontr_result.object == NULL );
    tmp_listcontr_22__listcontr_result.object = tmp_assign_source_294;

    loop_start_36:;
    tmp_next_source_35 = tmp_listcontr_22__listcontr_iter.object;

    tmp_assign_source_295 = ITERATOR_NEXT( tmp_next_source_35 );
    if (tmp_assign_source_295 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_36;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1699;
            goto try_finally_handler_96;
        }
    }

    if (tmp_listcontr_22__iter_value_0.object == NULL)
    {
        tmp_listcontr_22__iter_value_0.object = tmp_assign_source_295;
    }
    else
    {
        PyObject *old = tmp_listcontr_22__iter_value_0.object;
        tmp_listcontr_22__iter_value_0.object = tmp_assign_source_295;
        Py_DECREF( old );
    }
    tmp_assign_source_296 = tmp_listcontr_22__iter_value_0.object;

    if (var_conv.object == NULL)
    {
        var_conv.object = INCREASE_REFCOUNT( tmp_assign_source_296 );
    }
    else
    {
        PyObject *old = var_conv.object;
        var_conv.object = INCREASE_REFCOUNT( tmp_assign_source_296 );
        Py_DECREF( old );
    }
    tmp_append_to_22 = tmp_listcontr_22__listcontr_result.object;

    tmp_source_name_59 = var_conv.object;

    tmp_append_value_22 = LOOKUP_ATTRIBUTE( tmp_source_name_59, const_str_plain_type );
    if ( tmp_append_value_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1699;
        goto try_finally_handler_96;
    }
    tmp_res = PyList_Append( tmp_append_to_22, tmp_append_value_22 );
    Py_DECREF( tmp_append_value_22 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1699;
        goto try_finally_handler_96;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1699;
        goto try_finally_handler_96;
    }
    goto loop_start_36;
    loop_end_36:;
    tmp_assign_source_292 = tmp_listcontr_22__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_96:;
    exception_keeper_type_92 = exception_type;
    exception_keeper_value_92 = exception_value;
    exception_keeper_tb_92 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_81 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_22__iter_value_0.object );
    tmp_listcontr_22__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_81;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_92 != NULL )
    {
        exception_type = exception_keeper_type_92;
        exception_value = exception_keeper_value_92;
        exception_tb = exception_keeper_tb_92;

        goto try_finally_handler_95;
    }

    goto finally_end_95;
    finally_end_95:;
    assert( var_column_types.object == NULL );
    var_column_types.object = INCREASE_REFCOUNT( tmp_assign_source_292 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_95:;
    exception_keeper_type_93 = exception_type;
    exception_keeper_value_93 = exception_value;
    exception_keeper_tb_93 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_82 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_22__listcontr_result.object );
    tmp_listcontr_22__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_22__listcontr_iter.object );
    tmp_listcontr_22__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_82;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_93 != NULL )
    {
        exception_type = exception_keeper_type_93;
        exception_value = exception_keeper_value_93;
        exception_tb = exception_keeper_tb_93;

        goto frame_exception_exit_1;
    }

    goto finally_end_96;
    finally_end_96:;
    // Tried code
    tmp_assign_source_297 = NULL;
    // Tried code
    tmp_called_102 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    if ( tmp_called_102 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1701;
        goto try_finally_handler_98;
    }
    tmp_call_arg_element_95 = var_column_types.object;

    if ( tmp_call_arg_element_95 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173627 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1701;
        goto try_finally_handler_98;
    }

    frame_function->f_lineno = 1701;
    tmp_iter_arg_54 = CALL_FUNCTION_WITH_ARGS1( tmp_called_102, tmp_call_arg_element_95 );
    if ( tmp_iter_arg_54 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1701;
        goto try_finally_handler_98;
    }
    tmp_assign_source_298 = MAKE_ITERATOR( tmp_iter_arg_54 );
    Py_DECREF( tmp_iter_arg_54 );
    if ( tmp_assign_source_298 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1701;
        goto try_finally_handler_98;
    }
    assert( tmp_listcontr_23__listcontr_iter.object == NULL );
    tmp_listcontr_23__listcontr_iter.object = tmp_assign_source_298;

    tmp_assign_source_299 = PyList_New( 0 );
    assert( tmp_listcontr_23__listcontr_result.object == NULL );
    tmp_listcontr_23__listcontr_result.object = tmp_assign_source_299;

    loop_start_37:;
    tmp_next_source_36 = tmp_listcontr_23__listcontr_iter.object;

    tmp_assign_source_300 = ITERATOR_NEXT( tmp_next_source_36 );
    if (tmp_assign_source_300 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_37;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1701;
            goto try_finally_handler_98;
        }
    }

    if (tmp_listcontr_23__iter_value_0.object == NULL)
    {
        tmp_listcontr_23__iter_value_0.object = tmp_assign_source_300;
    }
    else
    {
        PyObject *old = tmp_listcontr_23__iter_value_0.object;
        tmp_listcontr_23__iter_value_0.object = tmp_assign_source_300;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_55 = tmp_listcontr_23__iter_value_0.object;

    tmp_assign_source_301 = MAKE_ITERATOR( tmp_iter_arg_55 );
    if ( tmp_assign_source_301 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1701;
        goto try_finally_handler_99;
    }
    if (tmp_tuple_unpack_16__source_iter.object == NULL)
    {
        tmp_tuple_unpack_16__source_iter.object = tmp_assign_source_301;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_16__source_iter.object;
        tmp_tuple_unpack_16__source_iter.object = tmp_assign_source_301;
        Py_DECREF( old );
    }
    tmp_unpack_32 = tmp_tuple_unpack_16__source_iter.object;

    tmp_assign_source_302 = UNPACK_PARAMETER_NEXT( tmp_unpack_32, 0 );
    if ( tmp_assign_source_302 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1701;
        goto try_finally_handler_99;
    }
    if (tmp_tuple_unpack_16__element_1.object == NULL)
    {
        tmp_tuple_unpack_16__element_1.object = tmp_assign_source_302;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_16__element_1.object;
        tmp_tuple_unpack_16__element_1.object = tmp_assign_source_302;
        Py_DECREF( old );
    }
    tmp_unpack_33 = tmp_tuple_unpack_16__source_iter.object;

    tmp_assign_source_303 = UNPACK_PARAMETER_NEXT( tmp_unpack_33, 1 );
    if ( tmp_assign_source_303 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1701;
        goto try_finally_handler_99;
    }
    if (tmp_tuple_unpack_16__element_2.object == NULL)
    {
        tmp_tuple_unpack_16__element_2.object = tmp_assign_source_303;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_16__element_2.object;
        tmp_tuple_unpack_16__element_2.object = tmp_assign_source_303;
        Py_DECREF( old );
    }
    tmp_iterator_name_16 = tmp_tuple_unpack_16__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_16 ); assert( PyIter_Check( tmp_iterator_name_16 ) );

    tmp_iterator_attempt_16 = (*Py_TYPE( tmp_iterator_name_16 )->tp_iternext)( tmp_iterator_name_16 );

    if (likely( tmp_iterator_attempt_16 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_99;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_16 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_99;
    }
    tmp_assign_source_304 = tmp_tuple_unpack_16__element_1.object;

    if (var_i.storage->object == NULL)
    {
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_304 );
    }
    else
    {
        PyObject *old = var_i.storage->object;
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_304 );
        Py_DECREF( old );
    }
    tmp_assign_source_305 = tmp_tuple_unpack_16__element_2.object;

    if (var_v.object == NULL)
    {
        var_v.object = INCREASE_REFCOUNT( tmp_assign_source_305 );
    }
    else
    {
        PyObject *old = var_v.object;
        var_v.object = INCREASE_REFCOUNT( tmp_assign_source_305 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_99:;
    exception_keeper_type_94 = exception_type;
    exception_keeper_value_94 = exception_value;
    exception_keeper_tb_94 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_83 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_16__source_iter.object );
    tmp_tuple_unpack_16__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_16__element_1.object );
    tmp_tuple_unpack_16__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_16__element_2.object );
    tmp_tuple_unpack_16__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_83;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_94 != NULL )
    {
        exception_type = exception_keeper_type_94;
        exception_value = exception_keeper_value_94;
        exception_tb = exception_keeper_tb_94;

        goto try_finally_handler_98;
    }

    goto finally_end_97;
    finally_end_97:;
    tmp_compare_left_42 = var_v.object;

    if ( tmp_compare_left_42 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4481 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1702;
        goto try_finally_handler_98;
    }

    tmp_compare_right_42 = PyTuple_New( 2 );
    tmp_tuple_element_22 = LOOKUP_BUILTIN( const_str_plain_str );
    if ( tmp_tuple_element_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_42 );

        frame_function->f_lineno = 1702;
        goto try_finally_handler_98;
    }
    Py_INCREF( tmp_tuple_element_22 );
    PyTuple_SET_ITEM( tmp_compare_right_42, 0, tmp_tuple_element_22 );
    tmp_source_name_60 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_60 == NULL ))
    {
        tmp_source_name_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_60 == NULL )
    {
        Py_DECREF( tmp_compare_right_42 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1702;
        goto try_finally_handler_98;
    }

    tmp_tuple_element_22 = LOOKUP_ATTRIBUTE( tmp_source_name_60, const_str_plain_string_ );
    if ( tmp_tuple_element_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_42 );

        frame_function->f_lineno = 1702;
        goto try_finally_handler_98;
    }
    PyTuple_SET_ITEM( tmp_compare_right_42, 1, tmp_tuple_element_22 );
    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_42, tmp_compare_left_42 );
    if ( tmp_cmp_In_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_42 );

        frame_function->f_lineno = 1702;
        goto try_finally_handler_98;
    }
    Py_DECREF( tmp_compare_right_42 );
    if (tmp_cmp_In_3 == 1)
    {
        goto branch_yes_78;
    }
    else
    {
        goto branch_no_78;
    }
    branch_yes_78:;
    tmp_append_to_23 = tmp_listcontr_23__listcontr_result.object;

    tmp_append_value_23 = var_i.storage->object;

    if ( tmp_append_value_23 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1701;
        goto try_finally_handler_98;
    }

    tmp_res = PyList_Append( tmp_append_to_23, tmp_append_value_23 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1701;
        goto try_finally_handler_98;
    }
    tmp_unused = Py_None;
    branch_no_78:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1701;
        goto try_finally_handler_98;
    }
    goto loop_start_37;
    loop_end_37:;
    tmp_assign_source_297 = tmp_listcontr_23__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_98:;
    exception_keeper_type_95 = exception_type;
    exception_keeper_value_95 = exception_value;
    exception_keeper_tb_95 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_84 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_23__iter_value_0.object );
    tmp_listcontr_23__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_84;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_95 != NULL )
    {
        exception_type = exception_keeper_type_95;
        exception_value = exception_keeper_value_95;
        exception_tb = exception_keeper_tb_95;

        goto try_finally_handler_97;
    }

    goto finally_end_98;
    finally_end_98:;
    assert( var_strcolidx.object == NULL );
    var_strcolidx.object = INCREASE_REFCOUNT( tmp_assign_source_297 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_97:;
    exception_keeper_type_96 = exception_type;
    exception_keeper_value_96 = exception_value;
    exception_keeper_tb_96 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_85 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_23__listcontr_result.object );
    tmp_listcontr_23__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_23__listcontr_iter.object );
    tmp_listcontr_23__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_85;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_96 != NULL )
    {
        exception_type = exception_keeper_type_96;
        exception_value = exception_keeper_value_96;
        exception_tb = exception_keeper_tb_96;

        goto frame_exception_exit_1;
    }

    goto finally_end_99;
    finally_end_99:;
    tmp_iter_arg_56 = var_strcolidx.object;

    if ( tmp_iter_arg_56 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173685 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1704;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_306 = MAKE_ITERATOR( tmp_iter_arg_56 );
    if ( tmp_assign_source_306 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1704;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_14__for_iterator.object == NULL );
    tmp_for_loop_14__for_iterator.object = tmp_assign_source_306;

    // Tried code
    loop_start_38:;
    tmp_next_source_37 = tmp_for_loop_14__for_iterator.object;

    tmp_assign_source_307 = ITERATOR_NEXT( tmp_next_source_37 );
    if (tmp_assign_source_307 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_38;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1704;
            goto try_finally_handler_100;
        }
    }

    if (tmp_for_loop_14__iter_value.object == NULL)
    {
        tmp_for_loop_14__iter_value.object = tmp_assign_source_307;
    }
    else
    {
        PyObject *old = tmp_for_loop_14__iter_value.object;
        tmp_for_loop_14__iter_value.object = tmp_assign_source_307;
        Py_DECREF( old );
    }
    tmp_assign_source_308 = tmp_for_loop_14__iter_value.object;

    if (var_i.storage->object == NULL)
    {
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_308 );
    }
    else
    {
        PyObject *old = var_i.storage->object;
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_308 );
        Py_DECREF( old );
    }
    tmp_binop_left_23 = const_str_digest_1ab39f5b61c8b69f3731c1e05667ecb1;
    tmp_called_103 = LOOKUP_BUILTIN( const_str_plain_max );
    if ( tmp_called_103 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1705;
        goto try_finally_handler_100;
    }
    tmp_iter_arg_57 = var_data.object;

    if ( tmp_iter_arg_57 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 0 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1705;
        goto try_finally_handler_100;
    }

    tmp_dircall_arg1_3 = MAKE_ITERATOR( tmp_iter_arg_57 );
    if ( tmp_dircall_arg1_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1705;
        goto try_finally_handler_100;
    }
    tmp_call_arg_element_96 = impl_genexpr_1_of_function_14_genfromtxt_of_module_numpy$lib$npyio( tmp_dircall_arg1_3, var_i );
    if ( tmp_call_arg_element_96 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1705;
        goto try_finally_handler_100;
    }
    frame_function->f_lineno = 1705;
    tmp_binop_right_23 = CALL_FUNCTION_WITH_ARGS1( tmp_called_103, tmp_call_arg_element_96 );
    Py_DECREF( tmp_call_arg_element_96 );
    if ( tmp_binop_right_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1705;
        goto try_finally_handler_100;
    }
    tmp_ass_subvalue_4 = BINARY_OPERATION_REMAINDER( tmp_binop_left_23, tmp_binop_right_23 );
    Py_DECREF( tmp_binop_right_23 );
    if ( tmp_ass_subvalue_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1705;
        goto try_finally_handler_100;
    }
    tmp_ass_subscribed_4 = var_column_types.object;

    if ( tmp_ass_subscribed_4 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173627 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1705;
        goto try_finally_handler_100;
    }

    tmp_ass_subscript_4 = var_i.storage->object;

    if ( tmp_ass_subscript_4 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1705;
        goto try_finally_handler_100;
    }

    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_4, tmp_ass_subscript_4, tmp_ass_subvalue_4 );
    Py_DECREF( tmp_ass_subvalue_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1705;
        goto try_finally_handler_100;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1704;
        goto try_finally_handler_100;
    }
    goto loop_start_38;
    loop_end_38:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_100:;
    exception_keeper_type_97 = exception_type;
    exception_keeper_value_97 = exception_value;
    exception_keeper_tb_97 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_86 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_14__iter_value.object );
    tmp_for_loop_14__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_14__for_iterator.object );
    tmp_for_loop_14__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_86;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_97 != NULL )
    {
        exception_type = exception_keeper_type_97;
        exception_value = exception_keeper_value_97;
        exception_tb = exception_keeper_tb_97;

        goto frame_exception_exit_1;
    }

    goto finally_end_100;
    finally_end_100:;
    tmp_compare_left_43 = par_names.object;

    if ( tmp_compare_left_43 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1707;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_43 = Py_None;
    tmp_is_8 = ( tmp_compare_left_43 == tmp_compare_right_43 );
    if (tmp_is_8)
    {
        goto branch_yes_79;
    }
    else
    {
        goto branch_no_79;
    }
    branch_yes_79:;
    tmp_called_104 = LOOKUP_BUILTIN( const_str_plain_set );
    if ( tmp_called_104 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1709;
        goto frame_exception_exit_1;
    }
    tmp_call_pos_13 = NULL;
    // Tried code
    tmp_call_pos_13 = PyTuple_New( 1 );
    tmp_tuple_element_23 = NULL;
    // Tried code
    tmp_iter_arg_58 = par_converters.object;

    if ( tmp_iter_arg_58 == NULL )
    {
        Py_DECREF( tmp_call_pos_13 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170342 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1709;
        goto try_finally_handler_102;
    }

    tmp_assign_source_310 = MAKE_ITERATOR( tmp_iter_arg_58 );
    if ( tmp_assign_source_310 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_13 );

        frame_function->f_lineno = 1709;
        goto try_finally_handler_102;
    }
    assert( tmp_listcontr_24__listcontr_iter.object == NULL );
    tmp_listcontr_24__listcontr_iter.object = tmp_assign_source_310;

    tmp_assign_source_311 = PyList_New( 0 );
    assert( tmp_listcontr_24__listcontr_result.object == NULL );
    tmp_listcontr_24__listcontr_result.object = tmp_assign_source_311;

    loop_start_39:;
    tmp_next_source_38 = tmp_listcontr_24__listcontr_iter.object;

    tmp_assign_source_312 = ITERATOR_NEXT( tmp_next_source_38 );
    if (tmp_assign_source_312 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_39;

        }
        else
        {
            Py_DECREF( tmp_call_pos_13 );
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1709;
            goto try_finally_handler_102;
        }
    }

    if (tmp_listcontr_24__iter_value_0.object == NULL)
    {
        tmp_listcontr_24__iter_value_0.object = tmp_assign_source_312;
    }
    else
    {
        PyObject *old = tmp_listcontr_24__iter_value_0.object;
        tmp_listcontr_24__iter_value_0.object = tmp_assign_source_312;
        Py_DECREF( old );
    }
    tmp_assign_source_313 = tmp_listcontr_24__iter_value_0.object;

    if (var_c.object == NULL)
    {
        var_c.object = INCREASE_REFCOUNT( tmp_assign_source_313 );
    }
    else
    {
        PyObject *old = var_c.object;
        var_c.object = INCREASE_REFCOUNT( tmp_assign_source_313 );
        Py_DECREF( old );
    }
    tmp_source_name_61 = var_c.object;

    tmp_cond_value_33 = LOOKUP_ATTRIBUTE( tmp_source_name_61, const_str_plain__checked );
    if ( tmp_cond_value_33 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_13 );

        frame_function->f_lineno = 1709;
        goto try_finally_handler_102;
    }
    tmp_cond_truth_33 = CHECK_IF_TRUE( tmp_cond_value_33 );
    if ( tmp_cond_truth_33 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_13 );
        Py_DECREF( tmp_cond_value_33 );

        frame_function->f_lineno = 1709;
        goto try_finally_handler_102;
    }
    Py_DECREF( tmp_cond_value_33 );
    if (tmp_cond_truth_33 == 1)
    {
        goto branch_yes_80;
    }
    else
    {
        goto branch_no_80;
    }
    branch_yes_80:;
    tmp_append_to_24 = tmp_listcontr_24__listcontr_result.object;

    tmp_source_name_62 = var_c.object;

    tmp_append_value_24 = LOOKUP_ATTRIBUTE( tmp_source_name_62, const_str_plain_type );
    if ( tmp_append_value_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_13 );

        frame_function->f_lineno = 1709;
        goto try_finally_handler_102;
    }
    tmp_res = PyList_Append( tmp_append_to_24, tmp_append_value_24 );
    Py_DECREF( tmp_append_value_24 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_13 );

        frame_function->f_lineno = 1709;
        goto try_finally_handler_102;
    }
    tmp_unused = Py_None;
    branch_no_80:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_13 );

        frame_function->f_lineno = 1709;
        goto try_finally_handler_102;
    }
    goto loop_start_39;
    loop_end_39:;
    tmp_tuple_element_23 = tmp_listcontr_24__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_102:;
    exception_keeper_type_98 = exception_type;
    exception_keeper_value_98 = exception_value;
    exception_keeper_tb_98 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_87 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_24__iter_value_0.object );
    tmp_listcontr_24__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_87;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_98 != NULL )
    {
        exception_type = exception_keeper_type_98;
        exception_value = exception_keeper_value_98;
        exception_tb = exception_keeper_tb_98;

        goto try_finally_handler_101;
    }

    goto finally_end_101;
    finally_end_101:;
    Py_INCREF( tmp_tuple_element_23 );
    PyTuple_SET_ITEM( tmp_call_pos_13, 0, tmp_tuple_element_23 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_101:;
    exception_keeper_type_99 = exception_type;
    exception_keeper_value_99 = exception_value;
    exception_keeper_tb_99 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_88 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_24__listcontr_result.object );
    tmp_listcontr_24__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_24__listcontr_iter.object );
    tmp_listcontr_24__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_88;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_99 != NULL )
    {
        exception_type = exception_keeper_type_99;
        exception_value = exception_keeper_value_99;
        exception_tb = exception_keeper_tb_99;

        goto frame_exception_exit_1;
    }

    goto finally_end_102;
    finally_end_102:;
    frame_function->f_lineno = 1709;
    tmp_assign_source_309 = CALL_FUNCTION_WITH_POSARGS( tmp_called_104, tmp_call_pos_13 );
    Py_DECREF( tmp_call_pos_13 );
    if ( tmp_assign_source_309 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1709;
        goto frame_exception_exit_1;
    }
    assert( var_base.object == NULL );
    var_base.object = tmp_assign_source_309;

    tmp_len_arg_11 = var_base.object;

    tmp_compare_left_44 = BUILTIN_LEN( tmp_len_arg_11 );
    if ( tmp_compare_left_44 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1710;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_44 = const_int_pos_1;
    tmp_cmp_Eq_3 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_44, tmp_compare_right_44 );
    if ( tmp_cmp_Eq_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_44 );

        frame_function->f_lineno = 1710;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_44 );
    if (tmp_cmp_Eq_3 == 1)
    {
        goto branch_yes_81;
    }
    else
    {
        goto branch_no_81;
    }
    branch_yes_81:;
    // Tried code
    tmp_iter_arg_59 = PyTuple_New( 2 );
    tmp_list_arg_8 = var_base.object;

    tmp_subscr_target_12 = PySequence_List( tmp_list_arg_8 );
    if ( tmp_subscr_target_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_iter_arg_59 );

        frame_function->f_lineno = 1711;
        goto try_finally_handler_103;
    }
    tmp_subscr_subscript_12 = const_int_0;
    tmp_tuple_element_24 = LOOKUP_SUBSCRIPT( tmp_subscr_target_12, tmp_subscr_subscript_12 );
    Py_DECREF( tmp_subscr_target_12 );
    if ( tmp_tuple_element_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_iter_arg_59 );

        frame_function->f_lineno = 1711;
        goto try_finally_handler_103;
    }
    PyTuple_SET_ITEM( tmp_iter_arg_59, 0, tmp_tuple_element_24 );
    tmp_source_name_63 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_63 == NULL ))
    {
        tmp_source_name_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_63 == NULL )
    {
        Py_DECREF( tmp_iter_arg_59 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1711;
        goto try_finally_handler_103;
    }

    tmp_tuple_element_24 = LOOKUP_ATTRIBUTE( tmp_source_name_63, const_str_plain_bool );
    if ( tmp_tuple_element_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_iter_arg_59 );

        frame_function->f_lineno = 1711;
        goto try_finally_handler_103;
    }
    PyTuple_SET_ITEM( tmp_iter_arg_59, 1, tmp_tuple_element_24 );
    tmp_assign_source_314 = MAKE_ITERATOR( tmp_iter_arg_59 );
    Py_DECREF( tmp_iter_arg_59 );
    if ( tmp_assign_source_314 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1711;
        goto try_finally_handler_103;
    }
    assert( tmp_tuple_unpack_17__source_iter.object == NULL );
    tmp_tuple_unpack_17__source_iter.object = tmp_assign_source_314;

    tmp_unpack_34 = tmp_tuple_unpack_17__source_iter.object;

    tmp_assign_source_315 = UNPACK_PARAMETER_NEXT( tmp_unpack_34, 0 );
    if ( tmp_assign_source_315 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1711;
        goto try_finally_handler_103;
    }
    assert( tmp_tuple_unpack_17__element_1.object == NULL );
    tmp_tuple_unpack_17__element_1.object = tmp_assign_source_315;

    tmp_unpack_35 = tmp_tuple_unpack_17__source_iter.object;

    tmp_assign_source_316 = UNPACK_PARAMETER_NEXT( tmp_unpack_35, 1 );
    if ( tmp_assign_source_316 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1711;
        goto try_finally_handler_103;
    }
    assert( tmp_tuple_unpack_17__element_2.object == NULL );
    tmp_tuple_unpack_17__element_2.object = tmp_assign_source_316;

    tmp_iterator_name_17 = tmp_tuple_unpack_17__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_17 ); assert( PyIter_Check( tmp_iterator_name_17 ) );

    tmp_iterator_attempt_17 = (*Py_TYPE( tmp_iterator_name_17 )->tp_iternext)( tmp_iterator_name_17 );

    if (likely( tmp_iterator_attempt_17 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_103;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_17 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_103;
    }
    tmp_assign_source_317 = tmp_tuple_unpack_17__element_1.object;

    assert( var_ddtype.object == NULL );
    var_ddtype.object = INCREASE_REFCOUNT( tmp_assign_source_317 );

    tmp_assign_source_318 = tmp_tuple_unpack_17__element_2.object;

    assert( var_mdtype.object == NULL );
    var_mdtype.object = INCREASE_REFCOUNT( tmp_assign_source_318 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_103:;
    exception_keeper_type_100 = exception_type;
    exception_keeper_value_100 = exception_value;
    exception_keeper_tb_100 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_89 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_17__source_iter.object );
    tmp_tuple_unpack_17__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_17__element_1.object );
    tmp_tuple_unpack_17__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_17__element_2.object );
    tmp_tuple_unpack_17__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_89;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_100 != NULL )
    {
        exception_type = exception_keeper_type_100;
        exception_value = exception_keeper_value_100;
        exception_tb = exception_keeper_tb_100;

        goto frame_exception_exit_1;
    }

    goto finally_end_103;
    finally_end_103:;
    goto branch_end_81;
    branch_no_81:;
    // Tried code
    tmp_assign_source_319 = NULL;
    // Tried code
    tmp_called_105 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    if ( tmp_called_105 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1714;
        goto try_finally_handler_105;
    }
    tmp_call_arg_element_97 = var_column_types.object;

    if ( tmp_call_arg_element_97 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173627 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1714;
        goto try_finally_handler_105;
    }

    frame_function->f_lineno = 1714;
    tmp_iter_arg_60 = CALL_FUNCTION_WITH_ARGS1( tmp_called_105, tmp_call_arg_element_97 );
    if ( tmp_iter_arg_60 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1714;
        goto try_finally_handler_105;
    }
    tmp_assign_source_320 = MAKE_ITERATOR( tmp_iter_arg_60 );
    Py_DECREF( tmp_iter_arg_60 );
    if ( tmp_assign_source_320 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1713;
        goto try_finally_handler_105;
    }
    assert( tmp_listcontr_25__listcontr_iter.object == NULL );
    tmp_listcontr_25__listcontr_iter.object = tmp_assign_source_320;

    tmp_assign_source_321 = PyList_New( 0 );
    assert( tmp_listcontr_25__listcontr_result.object == NULL );
    tmp_listcontr_25__listcontr_result.object = tmp_assign_source_321;

    loop_start_40:;
    tmp_next_source_39 = tmp_listcontr_25__listcontr_iter.object;

    tmp_assign_source_322 = ITERATOR_NEXT( tmp_next_source_39 );
    if (tmp_assign_source_322 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_40;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1713;
            goto try_finally_handler_105;
        }
    }

    if (tmp_listcontr_25__iter_value_0.object == NULL)
    {
        tmp_listcontr_25__iter_value_0.object = tmp_assign_source_322;
    }
    else
    {
        PyObject *old = tmp_listcontr_25__iter_value_0.object;
        tmp_listcontr_25__iter_value_0.object = tmp_assign_source_322;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_61 = tmp_listcontr_25__iter_value_0.object;

    tmp_assign_source_323 = MAKE_ITERATOR( tmp_iter_arg_61 );
    if ( tmp_assign_source_323 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1713;
        goto try_finally_handler_106;
    }
    if (tmp_tuple_unpack_18__source_iter.object == NULL)
    {
        tmp_tuple_unpack_18__source_iter.object = tmp_assign_source_323;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_18__source_iter.object;
        tmp_tuple_unpack_18__source_iter.object = tmp_assign_source_323;
        Py_DECREF( old );
    }
    tmp_unpack_36 = tmp_tuple_unpack_18__source_iter.object;

    tmp_assign_source_324 = UNPACK_PARAMETER_NEXT( tmp_unpack_36, 0 );
    if ( tmp_assign_source_324 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1713;
        goto try_finally_handler_106;
    }
    if (tmp_tuple_unpack_18__element_1.object == NULL)
    {
        tmp_tuple_unpack_18__element_1.object = tmp_assign_source_324;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_18__element_1.object;
        tmp_tuple_unpack_18__element_1.object = tmp_assign_source_324;
        Py_DECREF( old );
    }
    tmp_unpack_37 = tmp_tuple_unpack_18__source_iter.object;

    tmp_assign_source_325 = UNPACK_PARAMETER_NEXT( tmp_unpack_37, 1 );
    if ( tmp_assign_source_325 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1713;
        goto try_finally_handler_106;
    }
    if (tmp_tuple_unpack_18__element_2.object == NULL)
    {
        tmp_tuple_unpack_18__element_2.object = tmp_assign_source_325;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_18__element_2.object;
        tmp_tuple_unpack_18__element_2.object = tmp_assign_source_325;
        Py_DECREF( old );
    }
    tmp_iterator_name_18 = tmp_tuple_unpack_18__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_18 ); assert( PyIter_Check( tmp_iterator_name_18 ) );

    tmp_iterator_attempt_18 = (*Py_TYPE( tmp_iterator_name_18 )->tp_iternext)( tmp_iterator_name_18 );

    if (likely( tmp_iterator_attempt_18 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_106;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_18 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_106;
    }
    tmp_assign_source_326 = tmp_tuple_unpack_18__element_1.object;

    if (var_i.storage->object == NULL)
    {
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_326 );
    }
    else
    {
        PyObject *old = var_i.storage->object;
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_326 );
        Py_DECREF( old );
    }
    tmp_assign_source_327 = tmp_tuple_unpack_18__element_2.object;

    if (var_dt.object == NULL)
    {
        var_dt.object = INCREASE_REFCOUNT( tmp_assign_source_327 );
    }
    else
    {
        PyObject *old = var_dt.object;
        var_dt.object = INCREASE_REFCOUNT( tmp_assign_source_327 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_106:;
    exception_keeper_type_101 = exception_type;
    exception_keeper_value_101 = exception_value;
    exception_keeper_tb_101 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_90 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_18__source_iter.object );
    tmp_tuple_unpack_18__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_18__element_1.object );
    tmp_tuple_unpack_18__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_18__element_2.object );
    tmp_tuple_unpack_18__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_90;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_101 != NULL )
    {
        exception_type = exception_keeper_type_101;
        exception_value = exception_keeper_value_101;
        exception_tb = exception_keeper_tb_101;

        goto try_finally_handler_105;
    }

    goto finally_end_104;
    finally_end_104:;
    tmp_append_to_25 = tmp_listcontr_25__listcontr_result.object;

    tmp_append_value_25 = PyTuple_New( 2 );
    tmp_binop_left_24 = par_defaultfmt.object;

    if ( tmp_binop_left_24 == NULL )
    {
        Py_DECREF( tmp_append_value_25 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156409 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1713;
        goto try_finally_handler_105;
    }

    tmp_binop_right_24 = var_i.storage->object;

    if ( tmp_binop_right_24 == NULL )
    {
        Py_DECREF( tmp_append_value_25 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1713;
        goto try_finally_handler_105;
    }

    tmp_tuple_element_25 = BINARY_OPERATION_REMAINDER( tmp_binop_left_24, tmp_binop_right_24 );
    if ( tmp_tuple_element_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_append_value_25 );

        frame_function->f_lineno = 1713;
        goto try_finally_handler_105;
    }
    PyTuple_SET_ITEM( tmp_append_value_25, 0, tmp_tuple_element_25 );
    tmp_tuple_element_25 = var_dt.object;

    if ( tmp_tuple_element_25 == NULL )
    {
        Py_DECREF( tmp_append_value_25 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 54381 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1713;
        goto try_finally_handler_105;
    }

    Py_INCREF( tmp_tuple_element_25 );
    PyTuple_SET_ITEM( tmp_append_value_25, 1, tmp_tuple_element_25 );
    tmp_res = PyList_Append( tmp_append_to_25, tmp_append_value_25 );
    Py_DECREF( tmp_append_value_25 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1713;
        goto try_finally_handler_105;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1713;
        goto try_finally_handler_105;
    }
    goto loop_start_40;
    loop_end_40:;
    tmp_assign_source_319 = tmp_listcontr_25__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_105:;
    exception_keeper_type_102 = exception_type;
    exception_keeper_value_102 = exception_value;
    exception_keeper_tb_102 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_91 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_25__iter_value_0.object );
    tmp_listcontr_25__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_91;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_102 != NULL )
    {
        exception_type = exception_keeper_type_102;
        exception_value = exception_keeper_value_102;
        exception_tb = exception_keeper_tb_102;

        goto try_finally_handler_104;
    }

    goto finally_end_105;
    finally_end_105:;
    if (var_ddtype.object == NULL)
    {
        var_ddtype.object = INCREASE_REFCOUNT( tmp_assign_source_319 );
    }
    else
    {
        PyObject *old = var_ddtype.object;
        var_ddtype.object = INCREASE_REFCOUNT( tmp_assign_source_319 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_104:;
    exception_keeper_type_103 = exception_type;
    exception_keeper_value_103 = exception_value;
    exception_keeper_tb_103 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_92 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_25__listcontr_result.object );
    tmp_listcontr_25__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_25__listcontr_iter.object );
    tmp_listcontr_25__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_92;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_103 != NULL )
    {
        exception_type = exception_keeper_type_103;
        exception_value = exception_keeper_value_103;
        exception_tb = exception_keeper_tb_103;

        goto frame_exception_exit_1;
    }

    goto finally_end_106;
    finally_end_106:;
    tmp_cond_value_34 = par_usemask.object;

    if ( tmp_cond_value_34 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171857 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1715;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_34 = CHECK_IF_TRUE( tmp_cond_value_34 );
    if ( tmp_cond_truth_34 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1715;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_34 == 1)
    {
        goto branch_yes_82;
    }
    else
    {
        goto branch_no_82;
    }
    branch_yes_82:;
    // Tried code
    tmp_assign_source_328 = NULL;
    // Tried code
    tmp_called_106 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    if ( tmp_called_106 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1717;
        goto try_finally_handler_108;
    }
    tmp_call_arg_element_98 = var_column_types.object;

    if ( tmp_call_arg_element_98 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173627 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1717;
        goto try_finally_handler_108;
    }

    frame_function->f_lineno = 1717;
    tmp_iter_arg_62 = CALL_FUNCTION_WITH_ARGS1( tmp_called_106, tmp_call_arg_element_98 );
    if ( tmp_iter_arg_62 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1717;
        goto try_finally_handler_108;
    }
    tmp_assign_source_329 = MAKE_ITERATOR( tmp_iter_arg_62 );
    Py_DECREF( tmp_iter_arg_62 );
    if ( tmp_assign_source_329 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1716;
        goto try_finally_handler_108;
    }
    assert( tmp_listcontr_26__listcontr_iter.object == NULL );
    tmp_listcontr_26__listcontr_iter.object = tmp_assign_source_329;

    tmp_assign_source_330 = PyList_New( 0 );
    assert( tmp_listcontr_26__listcontr_result.object == NULL );
    tmp_listcontr_26__listcontr_result.object = tmp_assign_source_330;

    loop_start_41:;
    tmp_next_source_40 = tmp_listcontr_26__listcontr_iter.object;

    tmp_assign_source_331 = ITERATOR_NEXT( tmp_next_source_40 );
    if (tmp_assign_source_331 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_41;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1716;
            goto try_finally_handler_108;
        }
    }

    if (tmp_listcontr_26__iter_value_0.object == NULL)
    {
        tmp_listcontr_26__iter_value_0.object = tmp_assign_source_331;
    }
    else
    {
        PyObject *old = tmp_listcontr_26__iter_value_0.object;
        tmp_listcontr_26__iter_value_0.object = tmp_assign_source_331;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_63 = tmp_listcontr_26__iter_value_0.object;

    tmp_assign_source_332 = MAKE_ITERATOR( tmp_iter_arg_63 );
    if ( tmp_assign_source_332 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1716;
        goto try_finally_handler_109;
    }
    if (tmp_tuple_unpack_19__source_iter.object == NULL)
    {
        tmp_tuple_unpack_19__source_iter.object = tmp_assign_source_332;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_19__source_iter.object;
        tmp_tuple_unpack_19__source_iter.object = tmp_assign_source_332;
        Py_DECREF( old );
    }
    tmp_unpack_38 = tmp_tuple_unpack_19__source_iter.object;

    tmp_assign_source_333 = UNPACK_PARAMETER_NEXT( tmp_unpack_38, 0 );
    if ( tmp_assign_source_333 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1716;
        goto try_finally_handler_109;
    }
    if (tmp_tuple_unpack_19__element_1.object == NULL)
    {
        tmp_tuple_unpack_19__element_1.object = tmp_assign_source_333;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_19__element_1.object;
        tmp_tuple_unpack_19__element_1.object = tmp_assign_source_333;
        Py_DECREF( old );
    }
    tmp_unpack_39 = tmp_tuple_unpack_19__source_iter.object;

    tmp_assign_source_334 = UNPACK_PARAMETER_NEXT( tmp_unpack_39, 1 );
    if ( tmp_assign_source_334 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1716;
        goto try_finally_handler_109;
    }
    if (tmp_tuple_unpack_19__element_2.object == NULL)
    {
        tmp_tuple_unpack_19__element_2.object = tmp_assign_source_334;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_19__element_2.object;
        tmp_tuple_unpack_19__element_2.object = tmp_assign_source_334;
        Py_DECREF( old );
    }
    tmp_iterator_name_19 = tmp_tuple_unpack_19__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_19 ); assert( PyIter_Check( tmp_iterator_name_19 ) );

    tmp_iterator_attempt_19 = (*Py_TYPE( tmp_iterator_name_19 )->tp_iternext)( tmp_iterator_name_19 );

    if (likely( tmp_iterator_attempt_19 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_109;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_19 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_109;
    }
    tmp_assign_source_335 = tmp_tuple_unpack_19__element_1.object;

    if (var_i.storage->object == NULL)
    {
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_335 );
    }
    else
    {
        PyObject *old = var_i.storage->object;
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_335 );
        Py_DECREF( old );
    }
    tmp_assign_source_336 = tmp_tuple_unpack_19__element_2.object;

    if (var_dt.object == NULL)
    {
        var_dt.object = INCREASE_REFCOUNT( tmp_assign_source_336 );
    }
    else
    {
        PyObject *old = var_dt.object;
        var_dt.object = INCREASE_REFCOUNT( tmp_assign_source_336 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_109:;
    exception_keeper_type_104 = exception_type;
    exception_keeper_value_104 = exception_value;
    exception_keeper_tb_104 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_93 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_19__source_iter.object );
    tmp_tuple_unpack_19__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_19__element_1.object );
    tmp_tuple_unpack_19__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_19__element_2.object );
    tmp_tuple_unpack_19__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_93;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_104 != NULL )
    {
        exception_type = exception_keeper_type_104;
        exception_value = exception_keeper_value_104;
        exception_tb = exception_keeper_tb_104;

        goto try_finally_handler_108;
    }

    goto finally_end_107;
    finally_end_107:;
    tmp_append_to_26 = tmp_listcontr_26__listcontr_result.object;

    tmp_append_value_26 = PyTuple_New( 2 );
    tmp_binop_left_25 = par_defaultfmt.object;

    if ( tmp_binop_left_25 == NULL )
    {
        Py_DECREF( tmp_append_value_26 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156409 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1716;
        goto try_finally_handler_108;
    }

    tmp_binop_right_25 = var_i.storage->object;

    if ( tmp_binop_right_25 == NULL )
    {
        Py_DECREF( tmp_append_value_26 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1716;
        goto try_finally_handler_108;
    }

    tmp_tuple_element_26 = BINARY_OPERATION_REMAINDER( tmp_binop_left_25, tmp_binop_right_25 );
    if ( tmp_tuple_element_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_append_value_26 );

        frame_function->f_lineno = 1716;
        goto try_finally_handler_108;
    }
    PyTuple_SET_ITEM( tmp_append_value_26, 0, tmp_tuple_element_26 );
    tmp_source_name_64 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_64 == NULL ))
    {
        tmp_source_name_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_64 == NULL )
    {
        Py_DECREF( tmp_append_value_26 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1716;
        goto try_finally_handler_108;
    }

    tmp_tuple_element_26 = LOOKUP_ATTRIBUTE( tmp_source_name_64, const_str_plain_bool );
    if ( tmp_tuple_element_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_append_value_26 );

        frame_function->f_lineno = 1716;
        goto try_finally_handler_108;
    }
    PyTuple_SET_ITEM( tmp_append_value_26, 1, tmp_tuple_element_26 );
    tmp_res = PyList_Append( tmp_append_to_26, tmp_append_value_26 );
    Py_DECREF( tmp_append_value_26 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1716;
        goto try_finally_handler_108;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1716;
        goto try_finally_handler_108;
    }
    goto loop_start_41;
    loop_end_41:;
    tmp_assign_source_328 = tmp_listcontr_26__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_108:;
    exception_keeper_type_105 = exception_type;
    exception_keeper_value_105 = exception_value;
    exception_keeper_tb_105 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_94 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_26__iter_value_0.object );
    tmp_listcontr_26__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_94;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_105 != NULL )
    {
        exception_type = exception_keeper_type_105;
        exception_value = exception_keeper_value_105;
        exception_tb = exception_keeper_tb_105;

        goto try_finally_handler_107;
    }

    goto finally_end_108;
    finally_end_108:;
    if (var_mdtype.object == NULL)
    {
        var_mdtype.object = INCREASE_REFCOUNT( tmp_assign_source_328 );
    }
    else
    {
        PyObject *old = var_mdtype.object;
        var_mdtype.object = INCREASE_REFCOUNT( tmp_assign_source_328 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_107:;
    exception_keeper_type_106 = exception_type;
    exception_keeper_value_106 = exception_value;
    exception_keeper_tb_106 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_95 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_26__listcontr_result.object );
    tmp_listcontr_26__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_26__listcontr_iter.object );
    tmp_listcontr_26__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_95;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_106 != NULL )
    {
        exception_type = exception_keeper_type_106;
        exception_value = exception_keeper_value_106;
        exception_tb = exception_keeper_tb_106;

        goto frame_exception_exit_1;
    }

    goto finally_end_109;
    finally_end_109:;
    branch_no_82:;
    branch_end_81:;
    goto branch_end_79;
    branch_no_79:;
    tmp_called_107 = LOOKUP_BUILTIN( const_str_plain_zip );
    if ( tmp_called_107 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1719;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_99 = par_names.object;

    if ( tmp_call_arg_element_99 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1719;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_100 = var_column_types.object;

    if ( tmp_call_arg_element_100 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173627 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1719;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1719;
    tmp_list_arg_9 = CALL_FUNCTION_WITH_ARGS2( tmp_called_107, tmp_call_arg_element_99, tmp_call_arg_element_100 );
    if ( tmp_list_arg_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1719;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_337 = PySequence_List( tmp_list_arg_9 );
    Py_DECREF( tmp_list_arg_9 );
    if ( tmp_assign_source_337 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1719;
        goto frame_exception_exit_1;
    }
    assert( var_ddtype.object == NULL );
    var_ddtype.object = tmp_assign_source_337;

    tmp_called_108 = LOOKUP_BUILTIN( const_str_plain_zip );
    if ( tmp_called_108 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1720;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_101 = par_names.object;

    if ( tmp_call_arg_element_101 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1720;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_26 = PyList_New( 1 );
    tmp_source_name_65 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_65 == NULL ))
    {
        tmp_source_name_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_65 == NULL )
    {
        Py_DECREF( tmp_binop_left_26 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1720;
        goto frame_exception_exit_1;
    }

    tmp_list_element_7 = LOOKUP_ATTRIBUTE( tmp_source_name_65, const_str_plain_bool );
    if ( tmp_list_element_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_26 );

        frame_function->f_lineno = 1720;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_binop_left_26, 0, tmp_list_element_7 );
    tmp_len_arg_12 = var_column_types.object;

    if ( tmp_len_arg_12 == NULL )
    {
        Py_DECREF( tmp_binop_left_26 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173627 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1720;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_26 = BUILTIN_LEN( tmp_len_arg_12 );
    if ( tmp_binop_right_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_26 );

        frame_function->f_lineno = 1720;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_102 = BINARY_OPERATION_MUL( tmp_binop_left_26, tmp_binop_right_26 );
    Py_DECREF( tmp_binop_left_26 );
    Py_DECREF( tmp_binop_right_26 );
    if ( tmp_call_arg_element_102 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1720;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1720;
    tmp_list_arg_10 = CALL_FUNCTION_WITH_ARGS2( tmp_called_108, tmp_call_arg_element_101, tmp_call_arg_element_102 );
    Py_DECREF( tmp_call_arg_element_102 );
    if ( tmp_list_arg_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1720;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_338 = PySequence_List( tmp_list_arg_10 );
    Py_DECREF( tmp_list_arg_10 );
    if ( tmp_assign_source_338 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1720;
        goto frame_exception_exit_1;
    }
    assert( var_mdtype.object == NULL );
    var_mdtype.object = tmp_assign_source_338;

    branch_end_79:;
    tmp_source_name_66 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_66 == NULL ))
    {
        tmp_source_name_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_66 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1721;
        goto frame_exception_exit_1;
    }

    tmp_called_109 = LOOKUP_ATTRIBUTE( tmp_source_name_66, const_str_plain_array );
    if ( tmp_called_109 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1721;
        goto frame_exception_exit_1;
    }
    tmp_call_pos_14 = PyTuple_New( 1 );
    tmp_tuple_element_27 = var_data.object;

    if ( tmp_tuple_element_27 == NULL )
    {
        Py_DECREF( tmp_called_109 );
        Py_DECREF( tmp_call_pos_14 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 0 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1721;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_27 );
    PyTuple_SET_ITEM( tmp_call_pos_14, 0, tmp_tuple_element_27 );
    tmp_call_kw_9 = _PyDict_NewPresized( 1 );
    tmp_dict_value_22 = var_ddtype.object;

    if ( tmp_dict_value_22 == NULL )
    {
        Py_DECREF( tmp_called_109 );
        Py_DECREF( tmp_call_pos_14 );
        Py_DECREF( tmp_call_kw_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173740 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1721;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_22 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_9, tmp_dict_key_22, tmp_dict_value_22 );
    frame_function->f_lineno = 1721;
    tmp_assign_source_339 = CALL_FUNCTION( tmp_called_109, tmp_call_pos_14, tmp_call_kw_9 );
    Py_DECREF( tmp_called_109 );
    Py_DECREF( tmp_call_pos_14 );
    Py_DECREF( tmp_call_kw_9 );
    if ( tmp_assign_source_339 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1721;
        goto frame_exception_exit_1;
    }
    assert( var_output.object == NULL );
    var_output.object = tmp_assign_source_339;

    tmp_cond_value_35 = par_usemask.object;

    if ( tmp_cond_value_35 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171857 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1722;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_35 = CHECK_IF_TRUE( tmp_cond_value_35 );
    if ( tmp_cond_truth_35 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1722;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_35 == 1)
    {
        goto branch_yes_83;
    }
    else
    {
        goto branch_no_83;
    }
    branch_yes_83:;
    tmp_source_name_67 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_67 == NULL ))
    {
        tmp_source_name_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_67 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1723;
        goto frame_exception_exit_1;
    }

    tmp_called_110 = LOOKUP_ATTRIBUTE( tmp_source_name_67, const_str_plain_array );
    if ( tmp_called_110 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1723;
        goto frame_exception_exit_1;
    }
    tmp_call_pos_15 = PyTuple_New( 1 );
    tmp_tuple_element_28 = var_masks.object;

    if ( tmp_tuple_element_28 == NULL )
    {
        Py_DECREF( tmp_called_110 );
        Py_DECREF( tmp_call_pos_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173525 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1723;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_28 );
    PyTuple_SET_ITEM( tmp_call_pos_15, 0, tmp_tuple_element_28 );
    tmp_call_kw_10 = _PyDict_NewPresized( 1 );
    tmp_dict_value_23 = var_mdtype.object;

    if ( tmp_dict_value_23 == NULL )
    {
        Py_DECREF( tmp_called_110 );
        Py_DECREF( tmp_call_pos_15 );
        Py_DECREF( tmp_call_kw_10 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173792 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1723;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_23 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_10, tmp_dict_key_23, tmp_dict_value_23 );
    frame_function->f_lineno = 1723;
    tmp_assign_source_340 = CALL_FUNCTION( tmp_called_110, tmp_call_pos_15, tmp_call_kw_10 );
    Py_DECREF( tmp_called_110 );
    Py_DECREF( tmp_call_pos_15 );
    Py_DECREF( tmp_call_kw_10 );
    if ( tmp_assign_source_340 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1723;
        goto frame_exception_exit_1;
    }
    assert( var_outputmask.object == NULL );
    var_outputmask.object = tmp_assign_source_340;

    branch_no_83:;
    goto branch_end_77;
    branch_no_77:;
    // Tried code
    tmp_cond_value_36 = NULL;
    // Tried code
    tmp_assign_source_341 = par_names.object;

    if ( tmp_assign_source_341 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1726;
        goto try_finally_handler_111;
    }

    assert( tmp_and_4__value_1.object == NULL );
    tmp_and_4__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_341 );

    tmp_cond_value_37 = tmp_and_4__value_1.object;

    tmp_cond_truth_37 = CHECK_IF_TRUE( tmp_cond_value_37 );
    if ( tmp_cond_truth_37 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1726;
        goto try_finally_handler_111;
    }
    if (tmp_cond_truth_37 == 1)
    {
        goto condexpr_true_8;
    }
    else
    {
        goto condexpr_false_8;
    }
    condexpr_true_8:;
    tmp_cond_value_36 = NULL;
    // Tried code
    tmp_result = tmp_and_4__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_4__value_1.object );
        tmp_and_4__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_source_name_68 = par_dtype.object;

    if ( tmp_source_name_68 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1726;
        goto try_finally_handler_112;
    }

    tmp_cond_value_36 = LOOKUP_ATTRIBUTE( tmp_source_name_68, const_str_plain_names );
    if ( tmp_cond_value_36 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1726;
        goto try_finally_handler_112;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_112:;
    exception_keeper_type_107 = exception_type;
    exception_keeper_value_107 = exception_value;
    exception_keeper_tb_107 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_107 != NULL )
    {
        exception_type = exception_keeper_type_107;
        exception_value = exception_keeper_value_107;
        exception_tb = exception_keeper_tb_107;

        goto try_finally_handler_111;
    }

    goto finally_end_110;
    finally_end_110:;
    goto condexpr_end_8;
    condexpr_false_8:;
    tmp_cond_value_36 = tmp_and_4__value_1.object;

    Py_INCREF( tmp_cond_value_36 );
    condexpr_end_8:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_111:;
    exception_keeper_type_108 = exception_type;
    exception_keeper_value_108 = exception_value;
    exception_keeper_tb_108 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_108 != NULL )
    {
        exception_type = exception_keeper_type_108;
        exception_value = exception_keeper_value_108;
        exception_tb = exception_keeper_tb_108;

        goto try_finally_handler_110;
    }

    goto finally_end_111;
    finally_end_111:;
    tmp_cond_truth_36 = CHECK_IF_TRUE( tmp_cond_value_36 );
    if ( tmp_cond_truth_36 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_36 );

        frame_function->f_lineno = 1726;
        goto try_finally_handler_110;
    }
    Py_DECREF( tmp_cond_value_36 );
    if (tmp_cond_truth_36 == 1)
    {
        goto branch_yes_84;
    }
    else
    {
        goto branch_no_84;
    }
    branch_yes_84:;
    tmp_assattr_name_1 = par_names.object;

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1727;
        goto try_finally_handler_110;
    }

    tmp_assattr_target_1 = par_dtype.object;

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1727;
        goto try_finally_handler_110;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_names, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1727;
        goto try_finally_handler_110;
    }
    branch_no_84:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_110:;
    exception_keeper_type_109 = exception_type;
    exception_keeper_value_109 = exception_value;
    exception_keeper_tb_109 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_96 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_4__value_1.object );
    tmp_and_4__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_96;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_109 != NULL )
    {
        exception_type = exception_keeper_type_109;
        exception_value = exception_keeper_value_109;
        exception_tb = exception_keeper_tb_109;

        goto frame_exception_exit_1;
    }

    goto finally_end_112;
    finally_end_112:;
    tmp_len_arg_13 = var_dtype_flat.object;

    if ( tmp_len_arg_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173844 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1729;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_45 = BUILTIN_LEN( tmp_len_arg_13 );
    if ( tmp_compare_left_45 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1729;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_45 = const_int_pos_1;
    tmp_cmp_Gt_6 = RICH_COMPARE_BOOL_GT( tmp_compare_left_45, tmp_compare_right_45 );
    if ( tmp_cmp_Gt_6 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_45 );

        frame_function->f_lineno = 1729;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_45 );
    if (tmp_cmp_Gt_6 == 1)
    {
        goto branch_yes_85;
    }
    else
    {
        goto branch_no_85;
    }
    branch_yes_85:;
    tmp_compare_left_46 = const_str_plain_O;
    tmp_iter_arg_64 = var_dtype_flat.object;

    if ( tmp_iter_arg_64 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173844 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1734;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg1_4 = MAKE_ITERATOR( tmp_iter_arg_64 );
    if ( tmp_dircall_arg1_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1734;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_46 = impl_genexpr_2_of_function_14_genfromtxt_of_module_numpy$lib$npyio( tmp_dircall_arg1_4 );
    if ( tmp_compare_right_46 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1734;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_46, tmp_compare_left_46 );
    if ( tmp_cmp_In_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_46 );

        frame_function->f_lineno = 1734;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_46 );
    if (tmp_cmp_In_4 == 1)
    {
        goto branch_yes_86;
    }
    else
    {
        goto branch_no_86;
    }
    branch_yes_86:;
    tmp_called_111 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_has_nested_fields );

    if (unlikely( tmp_called_111 == NULL ))
    {
        tmp_called_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_has_nested_fields );
    }

    if ( tmp_called_111 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173900 ], 46, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1735;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_103 = par_dtype.object;

    if ( tmp_call_arg_element_103 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1735;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1735;
    tmp_cond_value_38 = CALL_FUNCTION_WITH_ARGS1( tmp_called_111, tmp_call_arg_element_103 );
    if ( tmp_cond_value_38 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1735;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_38 = CHECK_IF_TRUE( tmp_cond_value_38 );
    if ( tmp_cond_truth_38 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_38 );

        frame_function->f_lineno = 1735;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_38 );
    if (tmp_cond_truth_38 == 1)
    {
        goto branch_yes_87;
    }
    else
    {
        goto branch_no_87;
    }
    branch_yes_87:;
    tmp_assign_source_342 = const_str_digest_e3210c23b0d79812a53f0ec7a97844df;
    if (var_errmsg.object == NULL)
    {
        var_errmsg.object = INCREASE_REFCOUNT( tmp_assign_source_342 );
    }
    else
    {
        PyObject *old = var_errmsg.object;
        var_errmsg.object = INCREASE_REFCOUNT( tmp_assign_source_342 );
        Py_DECREF( old );
    }
    tmp_make_exception_arg_4 = var_errmsg.object;

    frame_function->f_lineno = 1738;
    tmp_raise_type_5 = CALL_FUNCTION_WITH_ARGS1( PyExc_NotImplementedError, tmp_make_exception_arg_4 );
    if ( tmp_raise_type_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1738;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_5;
    frame_function->f_lineno = 1738;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    goto branch_end_87;
    branch_no_87:;
    tmp_source_name_69 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_69 == NULL ))
    {
        tmp_source_name_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_69 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1740;
        goto frame_exception_exit_1;
    }

    tmp_called_112 = LOOKUP_ATTRIBUTE( tmp_source_name_69, const_str_plain_array );
    if ( tmp_called_112 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1740;
        goto frame_exception_exit_1;
    }
    tmp_call_pos_16 = PyTuple_New( 1 );
    tmp_tuple_element_29 = var_data.object;

    if ( tmp_tuple_element_29 == NULL )
    {
        Py_DECREF( tmp_called_112 );
        Py_DECREF( tmp_call_pos_16 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 0 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1740;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_29 );
    PyTuple_SET_ITEM( tmp_call_pos_16, 0, tmp_tuple_element_29 );
    tmp_call_kw_11 = _PyDict_NewPresized( 1 );
    tmp_dict_value_24 = par_dtype.object;

    if ( tmp_dict_value_24 == NULL )
    {
        Py_DECREF( tmp_called_112 );
        Py_DECREF( tmp_call_pos_16 );
        Py_DECREF( tmp_call_kw_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1740;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_24 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_11, tmp_dict_key_24, tmp_dict_value_24 );
    frame_function->f_lineno = 1740;
    tmp_assign_source_343 = CALL_FUNCTION( tmp_called_112, tmp_call_pos_16, tmp_call_kw_11 );
    Py_DECREF( tmp_called_112 );
    Py_DECREF( tmp_call_pos_16 );
    Py_DECREF( tmp_call_kw_11 );
    if ( tmp_assign_source_343 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1740;
        goto frame_exception_exit_1;
    }
    if (var_output.object == NULL)
    {
        var_output.object = tmp_assign_source_343;
    }
    else
    {
        PyObject *old = var_output.object;
        var_output.object = tmp_assign_source_343;
        Py_DECREF( old );
    }
    branch_end_87:;
    goto branch_end_86;
    branch_no_86:;
    tmp_source_name_70 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_70 == NULL ))
    {
        tmp_source_name_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_70 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1742;
        goto frame_exception_exit_1;
    }

    tmp_called_113 = LOOKUP_ATTRIBUTE( tmp_source_name_70, const_str_plain_array );
    if ( tmp_called_113 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1742;
        goto frame_exception_exit_1;
    }
    tmp_call_pos_17 = PyTuple_New( 1 );
    tmp_tuple_element_30 = var_data.object;

    if ( tmp_tuple_element_30 == NULL )
    {
        Py_DECREF( tmp_called_113 );
        Py_DECREF( tmp_call_pos_17 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 0 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1742;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_30 );
    PyTuple_SET_ITEM( tmp_call_pos_17, 0, tmp_tuple_element_30 );
    tmp_call_kw_12 = NULL;
    // Tried code
    tmp_call_kw_12 = _PyDict_NewPresized( 1 );
    tmp_dict_value_25 = NULL;
    // Tried code
    tmp_iter_arg_65 = var_dtype_flat.object;

    if ( tmp_iter_arg_65 == NULL )
    {
        Py_DECREF( tmp_called_113 );
        Py_DECREF( tmp_call_pos_17 );
        Py_DECREF( tmp_call_kw_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173844 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1742;
        goto try_finally_handler_114;
    }

    tmp_assign_source_345 = MAKE_ITERATOR( tmp_iter_arg_65 );
    if ( tmp_assign_source_345 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_113 );
        Py_DECREF( tmp_call_pos_17 );
        Py_DECREF( tmp_call_kw_12 );

        frame_function->f_lineno = 1742;
        goto try_finally_handler_114;
    }
    assert( tmp_listcontr_27__listcontr_iter.object == NULL );
    tmp_listcontr_27__listcontr_iter.object = tmp_assign_source_345;

    tmp_assign_source_346 = PyList_New( 0 );
    assert( tmp_listcontr_27__listcontr_result.object == NULL );
    tmp_listcontr_27__listcontr_result.object = tmp_assign_source_346;

    loop_start_42:;
    tmp_next_source_41 = tmp_listcontr_27__listcontr_iter.object;

    tmp_assign_source_347 = ITERATOR_NEXT( tmp_next_source_41 );
    if (tmp_assign_source_347 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_42;

        }
        else
        {
            Py_DECREF( tmp_called_113 );
            Py_DECREF( tmp_call_pos_17 );
            Py_DECREF( tmp_call_kw_12 );
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1742;
            goto try_finally_handler_114;
        }
    }

    if (tmp_listcontr_27__iter_value_0.object == NULL)
    {
        tmp_listcontr_27__iter_value_0.object = tmp_assign_source_347;
    }
    else
    {
        PyObject *old = tmp_listcontr_27__iter_value_0.object;
        tmp_listcontr_27__iter_value_0.object = tmp_assign_source_347;
        Py_DECREF( old );
    }
    tmp_assign_source_348 = tmp_listcontr_27__iter_value_0.object;

    if (var__.object == NULL)
    {
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_348 );
    }
    else
    {
        PyObject *old = var__.object;
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_348 );
        Py_DECREF( old );
    }
    tmp_append_to_27 = tmp_listcontr_27__listcontr_result.object;

    tmp_append_value_27 = PyTuple_New( 2 );
    tmp_tuple_element_31 = const_str_empty;
    Py_INCREF( tmp_tuple_element_31 );
    PyTuple_SET_ITEM( tmp_append_value_27, 0, tmp_tuple_element_31 );
    tmp_tuple_element_31 = var__.object;

    Py_INCREF( tmp_tuple_element_31 );
    PyTuple_SET_ITEM( tmp_append_value_27, 1, tmp_tuple_element_31 );
    tmp_res = PyList_Append( tmp_append_to_27, tmp_append_value_27 );
    Py_DECREF( tmp_append_value_27 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_113 );
        Py_DECREF( tmp_call_pos_17 );
        Py_DECREF( tmp_call_kw_12 );

        frame_function->f_lineno = 1742;
        goto try_finally_handler_114;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_113 );
        Py_DECREF( tmp_call_pos_17 );
        Py_DECREF( tmp_call_kw_12 );

        frame_function->f_lineno = 1742;
        goto try_finally_handler_114;
    }
    goto loop_start_42;
    loop_end_42:;
    tmp_dict_value_25 = tmp_listcontr_27__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_114:;
    exception_keeper_type_110 = exception_type;
    exception_keeper_value_110 = exception_value;
    exception_keeper_tb_110 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_97 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_27__iter_value_0.object );
    tmp_listcontr_27__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_97;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_110 != NULL )
    {
        exception_type = exception_keeper_type_110;
        exception_value = exception_keeper_value_110;
        exception_tb = exception_keeper_tb_110;

        goto try_finally_handler_113;
    }

    goto finally_end_113;
    finally_end_113:;
    tmp_dict_key_25 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_12, tmp_dict_key_25, tmp_dict_value_25 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_113:;
    exception_keeper_type_111 = exception_type;
    exception_keeper_value_111 = exception_value;
    exception_keeper_tb_111 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_98 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_27__listcontr_result.object );
    tmp_listcontr_27__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_27__listcontr_iter.object );
    tmp_listcontr_27__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_98;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_111 != NULL )
    {
        exception_type = exception_keeper_type_111;
        exception_value = exception_keeper_value_111;
        exception_tb = exception_keeper_tb_111;

        goto frame_exception_exit_1;
    }

    goto finally_end_114;
    finally_end_114:;
    frame_function->f_lineno = 1742;
    tmp_assign_source_344 = CALL_FUNCTION( tmp_called_113, tmp_call_pos_17, tmp_call_kw_12 );
    Py_DECREF( tmp_called_113 );
    Py_DECREF( tmp_call_pos_17 );
    Py_DECREF( tmp_call_kw_12 );
    if ( tmp_assign_source_344 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1742;
        goto frame_exception_exit_1;
    }
    if (var_rows.object == NULL)
    {
        var_rows.object = tmp_assign_source_344;
    }
    else
    {
        PyObject *old = var_rows.object;
        var_rows.object = tmp_assign_source_344;
        Py_DECREF( old );
    }
    tmp_source_name_71 = var_rows.object;

    tmp_called_114 = LOOKUP_ATTRIBUTE( tmp_source_name_71, const_str_plain_view );
    if ( tmp_called_114 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1743;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_104 = par_dtype.object;

    if ( tmp_call_arg_element_104 == NULL )
    {
        Py_DECREF( tmp_called_114 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1743;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1743;
    tmp_assign_source_349 = CALL_FUNCTION_WITH_ARGS1( tmp_called_114, tmp_call_arg_element_104 );
    Py_DECREF( tmp_called_114 );
    if ( tmp_assign_source_349 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1743;
        goto frame_exception_exit_1;
    }
    if (var_output.object == NULL)
    {
        var_output.object = tmp_assign_source_349;
    }
    else
    {
        PyObject *old = var_output.object;
        var_output.object = tmp_assign_source_349;
        Py_DECREF( old );
    }
    branch_end_86:;
    tmp_cond_value_39 = par_usemask.object;

    if ( tmp_cond_value_39 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171857 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1745;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_39 = CHECK_IF_TRUE( tmp_cond_value_39 );
    if ( tmp_cond_truth_39 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1745;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_39 == 1)
    {
        goto branch_yes_88;
    }
    else
    {
        goto branch_no_88;
    }
    branch_yes_88:;
    tmp_source_name_72 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_72 == NULL ))
    {
        tmp_source_name_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_72 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1746;
        goto frame_exception_exit_1;
    }

    tmp_called_115 = LOOKUP_ATTRIBUTE( tmp_source_name_72, const_str_plain_array );
    if ( tmp_called_115 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1746;
        goto frame_exception_exit_1;
    }
    tmp_call_pos_18 = PyTuple_New( 1 );
    tmp_tuple_element_32 = var_masks.object;

    if ( tmp_tuple_element_32 == NULL )
    {
        Py_DECREF( tmp_called_115 );
        Py_DECREF( tmp_call_pos_18 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173525 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1746;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_32 );
    PyTuple_SET_ITEM( tmp_call_pos_18, 0, tmp_tuple_element_32 );
    tmp_call_kw_13 = _PyDict_NewPresized( 1 );
    tmp_source_name_73 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_73 == NULL ))
    {
        tmp_source_name_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_73 == NULL )
    {
        Py_DECREF( tmp_called_115 );
        Py_DECREF( tmp_call_pos_18 );
        Py_DECREF( tmp_call_kw_13 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1747;
        goto frame_exception_exit_1;
    }

    tmp_called_116 = LOOKUP_ATTRIBUTE( tmp_source_name_73, const_str_plain_dtype );
    if ( tmp_called_116 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_115 );
        Py_DECREF( tmp_call_pos_18 );
        Py_DECREF( tmp_call_kw_13 );

        frame_function->f_lineno = 1747;
        goto frame_exception_exit_1;
    }
    tmp_call_pos_19 = NULL;
    // Tried code
    tmp_call_pos_19 = PyTuple_New( 1 );
    tmp_tuple_element_33 = NULL;
    // Tried code
    tmp_iter_arg_66 = var_dtype_flat.object;

    if ( tmp_iter_arg_66 == NULL )
    {
        Py_DECREF( tmp_called_115 );
        Py_DECREF( tmp_call_pos_18 );
        Py_DECREF( tmp_call_kw_13 );
        Py_DECREF( tmp_called_116 );
        Py_DECREF( tmp_call_pos_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173844 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1748;
        goto try_finally_handler_116;
    }

    tmp_assign_source_351 = MAKE_ITERATOR( tmp_iter_arg_66 );
    if ( tmp_assign_source_351 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_115 );
        Py_DECREF( tmp_call_pos_18 );
        Py_DECREF( tmp_call_kw_13 );
        Py_DECREF( tmp_called_116 );
        Py_DECREF( tmp_call_pos_19 );

        frame_function->f_lineno = 1747;
        goto try_finally_handler_116;
    }
    assert( tmp_listcontr_28__listcontr_iter.object == NULL );
    tmp_listcontr_28__listcontr_iter.object = tmp_assign_source_351;

    tmp_assign_source_352 = PyList_New( 0 );
    assert( tmp_listcontr_28__listcontr_result.object == NULL );
    tmp_listcontr_28__listcontr_result.object = tmp_assign_source_352;

    loop_start_43:;
    tmp_next_source_42 = tmp_listcontr_28__listcontr_iter.object;

    tmp_assign_source_353 = ITERATOR_NEXT( tmp_next_source_42 );
    if (tmp_assign_source_353 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_43;

        }
        else
        {
            Py_DECREF( tmp_called_115 );
            Py_DECREF( tmp_call_pos_18 );
            Py_DECREF( tmp_call_kw_13 );
            Py_DECREF( tmp_called_116 );
            Py_DECREF( tmp_call_pos_19 );
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1747;
            goto try_finally_handler_116;
        }
    }

    if (tmp_listcontr_28__iter_value_0.object == NULL)
    {
        tmp_listcontr_28__iter_value_0.object = tmp_assign_source_353;
    }
    else
    {
        PyObject *old = tmp_listcontr_28__iter_value_0.object;
        tmp_listcontr_28__iter_value_0.object = tmp_assign_source_353;
        Py_DECREF( old );
    }
    tmp_assign_source_354 = tmp_listcontr_28__iter_value_0.object;

    if (var_t.object == NULL)
    {
        var_t.object = INCREASE_REFCOUNT( tmp_assign_source_354 );
    }
    else
    {
        PyObject *old = var_t.object;
        var_t.object = INCREASE_REFCOUNT( tmp_assign_source_354 );
        Py_DECREF( old );
    }
    tmp_append_to_28 = tmp_listcontr_28__listcontr_result.object;

    tmp_append_value_28 = PyTuple_New( 2 );
    tmp_tuple_element_34 = const_str_empty;
    Py_INCREF( tmp_tuple_element_34 );
    PyTuple_SET_ITEM( tmp_append_value_28, 0, tmp_tuple_element_34 );
    tmp_source_name_74 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_74 == NULL ))
    {
        tmp_source_name_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_74 == NULL )
    {
        Py_DECREF( tmp_called_115 );
        Py_DECREF( tmp_call_pos_18 );
        Py_DECREF( tmp_call_kw_13 );
        Py_DECREF( tmp_called_116 );
        Py_DECREF( tmp_call_pos_19 );
        Py_DECREF( tmp_append_value_28 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1747;
        goto try_finally_handler_116;
    }

    tmp_tuple_element_34 = LOOKUP_ATTRIBUTE( tmp_source_name_74, const_str_plain_bool );
    if ( tmp_tuple_element_34 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_115 );
        Py_DECREF( tmp_call_pos_18 );
        Py_DECREF( tmp_call_kw_13 );
        Py_DECREF( tmp_called_116 );
        Py_DECREF( tmp_call_pos_19 );
        Py_DECREF( tmp_append_value_28 );

        frame_function->f_lineno = 1747;
        goto try_finally_handler_116;
    }
    PyTuple_SET_ITEM( tmp_append_value_28, 1, tmp_tuple_element_34 );
    tmp_res = PyList_Append( tmp_append_to_28, tmp_append_value_28 );
    Py_DECREF( tmp_append_value_28 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_115 );
        Py_DECREF( tmp_call_pos_18 );
        Py_DECREF( tmp_call_kw_13 );
        Py_DECREF( tmp_called_116 );
        Py_DECREF( tmp_call_pos_19 );

        frame_function->f_lineno = 1747;
        goto try_finally_handler_116;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_115 );
        Py_DECREF( tmp_call_pos_18 );
        Py_DECREF( tmp_call_kw_13 );
        Py_DECREF( tmp_called_116 );
        Py_DECREF( tmp_call_pos_19 );

        frame_function->f_lineno = 1747;
        goto try_finally_handler_116;
    }
    goto loop_start_43;
    loop_end_43:;
    tmp_tuple_element_33 = tmp_listcontr_28__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_116:;
    exception_keeper_type_112 = exception_type;
    exception_keeper_value_112 = exception_value;
    exception_keeper_tb_112 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_99 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_28__iter_value_0.object );
    tmp_listcontr_28__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_99;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_112 != NULL )
    {
        exception_type = exception_keeper_type_112;
        exception_value = exception_keeper_value_112;
        exception_tb = exception_keeper_tb_112;

        goto try_finally_handler_115;
    }

    goto finally_end_115;
    finally_end_115:;
    Py_INCREF( tmp_tuple_element_33 );
    PyTuple_SET_ITEM( tmp_call_pos_19, 0, tmp_tuple_element_33 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_115:;
    exception_keeper_type_113 = exception_type;
    exception_keeper_value_113 = exception_value;
    exception_keeper_tb_113 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_100 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_28__listcontr_result.object );
    tmp_listcontr_28__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_28__listcontr_iter.object );
    tmp_listcontr_28__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_100;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_113 != NULL )
    {
        exception_type = exception_keeper_type_113;
        exception_value = exception_keeper_value_113;
        exception_tb = exception_keeper_tb_113;

        goto frame_exception_exit_1;
    }

    goto finally_end_116;
    finally_end_116:;
    frame_function->f_lineno = 1747;
    tmp_dict_value_26 = CALL_FUNCTION_WITH_POSARGS( tmp_called_116, tmp_call_pos_19 );
    Py_DECREF( tmp_called_116 );
    Py_DECREF( tmp_call_pos_19 );
    if ( tmp_dict_value_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_115 );
        Py_DECREF( tmp_call_pos_18 );
        Py_DECREF( tmp_call_kw_13 );

        frame_function->f_lineno = 1747;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_26 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_13, tmp_dict_key_26, tmp_dict_value_26 );
    Py_DECREF( tmp_dict_value_26 );
    frame_function->f_lineno = 1747;
    tmp_assign_source_350 = CALL_FUNCTION( tmp_called_115, tmp_call_pos_18, tmp_call_kw_13 );
    Py_DECREF( tmp_called_115 );
    Py_DECREF( tmp_call_pos_18 );
    Py_DECREF( tmp_call_kw_13 );
    if ( tmp_assign_source_350 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1747;
        goto frame_exception_exit_1;
    }
    assert( var_rowmasks.object == NULL );
    var_rowmasks.object = tmp_assign_source_350;

    tmp_called_117 = var_make_mask_descr.object;

    if ( tmp_called_117 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173946 ], 61, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1750;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_105 = par_dtype.object;

    if ( tmp_call_arg_element_105 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1750;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1750;
    tmp_assign_source_355 = CALL_FUNCTION_WITH_ARGS1( tmp_called_117, tmp_call_arg_element_105 );
    if ( tmp_assign_source_355 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1750;
        goto frame_exception_exit_1;
    }
    if (var_mdtype.object == NULL)
    {
        var_mdtype.object = tmp_assign_source_355;
    }
    else
    {
        PyObject *old = var_mdtype.object;
        var_mdtype.object = tmp_assign_source_355;
        Py_DECREF( old );
    }
    tmp_source_name_75 = var_rowmasks.object;

    tmp_called_118 = LOOKUP_ATTRIBUTE( tmp_source_name_75, const_str_plain_view );
    if ( tmp_called_118 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1751;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_106 = var_mdtype.object;

    frame_function->f_lineno = 1751;
    tmp_assign_source_356 = CALL_FUNCTION_WITH_ARGS1( tmp_called_118, tmp_call_arg_element_106 );
    Py_DECREF( tmp_called_118 );
    if ( tmp_assign_source_356 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1751;
        goto frame_exception_exit_1;
    }
    if (var_outputmask.object == NULL)
    {
        var_outputmask.object = tmp_assign_source_356;
    }
    else
    {
        PyObject *old = var_outputmask.object;
        var_outputmask.object = tmp_assign_source_356;
        Py_DECREF( old );
    }
    branch_no_88:;
    goto branch_end_85;
    branch_no_85:;
    tmp_cond_value_40 = var_user_converters.object;

    if ( tmp_cond_value_40 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170823 ], 61, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1755;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_40 = CHECK_IF_TRUE( tmp_cond_value_40 );
    if ( tmp_cond_truth_40 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1755;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_40 == 1)
    {
        goto branch_yes_89;
    }
    else
    {
        goto branch_no_89;
    }
    branch_yes_89:;
    tmp_assign_source_357 = Py_True;
    assert( var_ishomogeneous.object == NULL );
    var_ishomogeneous.object = INCREASE_REFCOUNT( tmp_assign_source_357 );

    tmp_assign_source_358 = PyList_New( 0 );
    if (var_descr.object == NULL)
    {
        var_descr.object = tmp_assign_source_358;
    }
    else
    {
        PyObject *old = var_descr.object;
        var_descr.object = tmp_assign_source_358;
        Py_DECREF( old );
    }
    tmp_called_119 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    if ( tmp_called_119 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1758;
        goto frame_exception_exit_1;
    }
    tmp_call_pos_20 = NULL;
    // Tried code
    tmp_call_pos_20 = PyTuple_New( 1 );
    tmp_tuple_element_35 = NULL;
    // Tried code
    tmp_iter_arg_68 = par_converters.object;

    if ( tmp_iter_arg_68 == NULL )
    {
        Py_DECREF( tmp_call_pos_20 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170342 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1758;
        goto try_finally_handler_118;
    }

    tmp_assign_source_360 = MAKE_ITERATOR( tmp_iter_arg_68 );
    if ( tmp_assign_source_360 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_20 );

        frame_function->f_lineno = 1758;
        goto try_finally_handler_118;
    }
    assert( tmp_listcontr_29__listcontr_iter.object == NULL );
    tmp_listcontr_29__listcontr_iter.object = tmp_assign_source_360;

    tmp_assign_source_361 = PyList_New( 0 );
    assert( tmp_listcontr_29__listcontr_result.object == NULL );
    tmp_listcontr_29__listcontr_result.object = tmp_assign_source_361;

    loop_start_44:;
    tmp_next_source_43 = tmp_listcontr_29__listcontr_iter.object;

    tmp_assign_source_362 = ITERATOR_NEXT( tmp_next_source_43 );
    if (tmp_assign_source_362 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_44;

        }
        else
        {
            Py_DECREF( tmp_call_pos_20 );
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1758;
            goto try_finally_handler_118;
        }
    }

    if (tmp_listcontr_29__iter_value_0.object == NULL)
    {
        tmp_listcontr_29__iter_value_0.object = tmp_assign_source_362;
    }
    else
    {
        PyObject *old = tmp_listcontr_29__iter_value_0.object;
        tmp_listcontr_29__iter_value_0.object = tmp_assign_source_362;
        Py_DECREF( old );
    }
    tmp_assign_source_363 = tmp_listcontr_29__iter_value_0.object;

    if (var_conv.object == NULL)
    {
        var_conv.object = INCREASE_REFCOUNT( tmp_assign_source_363 );
    }
    else
    {
        PyObject *old = var_conv.object;
        var_conv.object = INCREASE_REFCOUNT( tmp_assign_source_363 );
        Py_DECREF( old );
    }
    tmp_append_to_29 = tmp_listcontr_29__listcontr_result.object;

    tmp_source_name_76 = var_conv.object;

    tmp_append_value_29 = LOOKUP_ATTRIBUTE( tmp_source_name_76, const_str_plain_type );
    if ( tmp_append_value_29 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_20 );

        frame_function->f_lineno = 1758;
        goto try_finally_handler_118;
    }
    tmp_res = PyList_Append( tmp_append_to_29, tmp_append_value_29 );
    Py_DECREF( tmp_append_value_29 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_20 );

        frame_function->f_lineno = 1758;
        goto try_finally_handler_118;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_20 );

        frame_function->f_lineno = 1758;
        goto try_finally_handler_118;
    }
    goto loop_start_44;
    loop_end_44:;
    tmp_tuple_element_35 = tmp_listcontr_29__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_118:;
    exception_keeper_type_114 = exception_type;
    exception_keeper_value_114 = exception_value;
    exception_keeper_tb_114 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_101 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_29__iter_value_0.object );
    tmp_listcontr_29__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_101;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_114 != NULL )
    {
        exception_type = exception_keeper_type_114;
        exception_value = exception_keeper_value_114;
        exception_tb = exception_keeper_tb_114;

        goto try_finally_handler_117;
    }

    goto finally_end_117;
    finally_end_117:;
    Py_INCREF( tmp_tuple_element_35 );
    PyTuple_SET_ITEM( tmp_call_pos_20, 0, tmp_tuple_element_35 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_117:;
    exception_keeper_type_115 = exception_type;
    exception_keeper_value_115 = exception_value;
    exception_keeper_tb_115 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_102 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_29__listcontr_result.object );
    tmp_listcontr_29__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_29__listcontr_iter.object );
    tmp_listcontr_29__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_102;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_115 != NULL )
    {
        exception_type = exception_keeper_type_115;
        exception_value = exception_keeper_value_115;
        exception_tb = exception_keeper_tb_115;

        goto frame_exception_exit_1;
    }

    goto finally_end_118;
    finally_end_118:;
    frame_function->f_lineno = 1758;
    tmp_iter_arg_67 = CALL_FUNCTION_WITH_POSARGS( tmp_called_119, tmp_call_pos_20 );
    Py_DECREF( tmp_call_pos_20 );
    if ( tmp_iter_arg_67 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1758;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_359 = MAKE_ITERATOR( tmp_iter_arg_67 );
    Py_DECREF( tmp_iter_arg_67 );
    if ( tmp_assign_source_359 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1758;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_15__for_iterator.object == NULL );
    tmp_for_loop_15__for_iterator.object = tmp_assign_source_359;

    // Tried code
    loop_start_45:;
    tmp_next_source_44 = tmp_for_loop_15__for_iterator.object;

    tmp_assign_source_364 = ITERATOR_NEXT( tmp_next_source_44 );
    if (tmp_assign_source_364 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_45;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1758;
            goto try_finally_handler_119;
        }
    }

    if (tmp_for_loop_15__iter_value.object == NULL)
    {
        tmp_for_loop_15__iter_value.object = tmp_assign_source_364;
    }
    else
    {
        PyObject *old = tmp_for_loop_15__iter_value.object;
        tmp_for_loop_15__iter_value.object = tmp_assign_source_364;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_69 = tmp_for_loop_15__iter_value.object;

    tmp_assign_source_365 = MAKE_ITERATOR( tmp_iter_arg_69 );
    if ( tmp_assign_source_365 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1758;
        goto try_finally_handler_120;
    }
    if (tmp_tuple_unpack_20__source_iter.object == NULL)
    {
        tmp_tuple_unpack_20__source_iter.object = tmp_assign_source_365;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_20__source_iter.object;
        tmp_tuple_unpack_20__source_iter.object = tmp_assign_source_365;
        Py_DECREF( old );
    }
    tmp_unpack_40 = tmp_tuple_unpack_20__source_iter.object;

    tmp_assign_source_366 = UNPACK_PARAMETER_NEXT( tmp_unpack_40, 0 );
    if ( tmp_assign_source_366 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1758;
        goto try_finally_handler_120;
    }
    if (tmp_tuple_unpack_20__element_1.object == NULL)
    {
        tmp_tuple_unpack_20__element_1.object = tmp_assign_source_366;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_20__element_1.object;
        tmp_tuple_unpack_20__element_1.object = tmp_assign_source_366;
        Py_DECREF( old );
    }
    tmp_unpack_41 = tmp_tuple_unpack_20__source_iter.object;

    tmp_assign_source_367 = UNPACK_PARAMETER_NEXT( tmp_unpack_41, 1 );
    if ( tmp_assign_source_367 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1758;
        goto try_finally_handler_120;
    }
    if (tmp_tuple_unpack_20__element_2.object == NULL)
    {
        tmp_tuple_unpack_20__element_2.object = tmp_assign_source_367;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_20__element_2.object;
        tmp_tuple_unpack_20__element_2.object = tmp_assign_source_367;
        Py_DECREF( old );
    }
    tmp_iterator_name_20 = tmp_tuple_unpack_20__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_20 ); assert( PyIter_Check( tmp_iterator_name_20 ) );

    tmp_iterator_attempt_20 = (*Py_TYPE( tmp_iterator_name_20 )->tp_iternext)( tmp_iterator_name_20 );

    if (likely( tmp_iterator_attempt_20 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_120;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_20 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_120;
    }
    tmp_assign_source_368 = tmp_tuple_unpack_20__element_1.object;

    if (var_i.storage->object == NULL)
    {
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_368 );
    }
    else
    {
        PyObject *old = var_i.storage->object;
        var_i.storage->object = INCREASE_REFCOUNT( tmp_assign_source_368 );
        Py_DECREF( old );
    }
    tmp_assign_source_369 = tmp_tuple_unpack_20__element_2.object;

    if (var_ttype.object == NULL)
    {
        var_ttype.object = INCREASE_REFCOUNT( tmp_assign_source_369 );
    }
    else
    {
        PyObject *old = var_ttype.object;
        var_ttype.object = INCREASE_REFCOUNT( tmp_assign_source_369 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_120:;
    exception_keeper_type_116 = exception_type;
    exception_keeper_value_116 = exception_value;
    exception_keeper_tb_116 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_103 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_20__source_iter.object );
    tmp_tuple_unpack_20__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_20__element_1.object );
    tmp_tuple_unpack_20__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_20__element_2.object );
    tmp_tuple_unpack_20__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_103;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_116 != NULL )
    {
        exception_type = exception_keeper_type_116;
        exception_value = exception_keeper_value_116;
        exception_tb = exception_keeper_tb_116;

        goto try_finally_handler_119;
    }

    goto finally_end_119;
    finally_end_119:;
    tmp_compare_left_47 = var_i.storage->object;

    if ( tmp_compare_left_47 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1760;
        goto try_finally_handler_119;
    }

    tmp_compare_right_47 = var_user_converters.object;

    if ( tmp_compare_right_47 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170823 ], 61, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1760;
        goto try_finally_handler_119;
    }

    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_47, tmp_compare_left_47 );
    if ( tmp_cmp_In_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1760;
        goto try_finally_handler_119;
    }
    if (tmp_cmp_In_5 == 1)
    {
        goto branch_yes_90;
    }
    else
    {
        goto branch_no_90;
    }
    branch_yes_90:;
    tmp_assign_source_370 = var_ishomogeneous.object;

    if ( tmp_assign_source_370 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 174007 ], 59, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1761;
        goto try_finally_handler_119;
    }

    if (tmp_inplace_assign_4__inplace_start.object == NULL)
    {
        tmp_inplace_assign_4__inplace_start.object = INCREASE_REFCOUNT( tmp_assign_source_370 );
    }
    else
    {
        PyObject *old = tmp_inplace_assign_4__inplace_start.object;
        tmp_inplace_assign_4__inplace_start.object = INCREASE_REFCOUNT( tmp_assign_source_370 );
        Py_DECREF( old );
    }
    // Tried code
    tmp_binop_left_27 = tmp_inplace_assign_4__inplace_start.object;

    tmp_compexpr_left_8 = var_ttype.object;

    if ( tmp_compexpr_left_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 174066 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1761;
        goto try_finally_handler_121;
    }

    tmp_source_name_77 = par_dtype.object;

    if ( tmp_source_name_77 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1761;
        goto try_finally_handler_121;
    }

    tmp_compexpr_right_8 = LOOKUP_ATTRIBUTE( tmp_source_name_77, const_str_plain_type );
    if ( tmp_compexpr_right_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1761;
        goto try_finally_handler_121;
    }
    tmp_binop_right_27 = RICH_COMPARE_EQ( tmp_compexpr_left_8, tmp_compexpr_right_8 );
    Py_DECREF( tmp_compexpr_right_8 );
    if ( tmp_binop_right_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1761;
        goto try_finally_handler_121;
    }
    tmp_assign_source_371 = BINARY_OPERATION( PyNumber_InPlaceAnd, tmp_binop_left_27, tmp_binop_right_27 );
    Py_DECREF( tmp_binop_right_27 );
    if ( tmp_assign_source_371 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1761;
        goto try_finally_handler_121;
    }
    if (tmp_inplace_assign_4__inplace_end.object == NULL)
    {
        tmp_inplace_assign_4__inplace_end.object = tmp_assign_source_371;
    }
    else
    {
        PyObject *old = tmp_inplace_assign_4__inplace_end.object;
        tmp_inplace_assign_4__inplace_end.object = tmp_assign_source_371;
        Py_DECREF( old );
    }
    tmp_compare_left_48 = tmp_inplace_assign_4__inplace_start.object;

    tmp_compare_right_48 = tmp_inplace_assign_4__inplace_end.object;

    tmp_isnot_8 = ( tmp_compare_left_48 != tmp_compare_right_48 );
    if (tmp_isnot_8)
    {
        goto branch_yes_91;
    }
    else
    {
        goto branch_no_91;
    }
    branch_yes_91:;
    tmp_assign_source_372 = tmp_inplace_assign_4__inplace_end.object;

    if (var_ishomogeneous.object == NULL)
    {
        var_ishomogeneous.object = INCREASE_REFCOUNT( tmp_assign_source_372 );
    }
    else
    {
        PyObject *old = var_ishomogeneous.object;
        var_ishomogeneous.object = INCREASE_REFCOUNT( tmp_assign_source_372 );
        Py_DECREF( old );
    }
    branch_no_91:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_121:;
    exception_keeper_type_117 = exception_type;
    exception_keeper_value_117 = exception_value;
    exception_keeper_tb_117 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_104 = frame_function->f_lineno;
    tmp_result = tmp_inplace_assign_4__inplace_start.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_inplace_assign_4__inplace_start.object );
        tmp_inplace_assign_4__inplace_start.object = NULL;
    }

    assert( tmp_result != false );
    Py_XDECREF( tmp_inplace_assign_4__inplace_end.object );
    tmp_inplace_assign_4__inplace_end.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_104;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_117 != NULL )
    {
        exception_type = exception_keeper_type_117;
        exception_value = exception_keeper_value_117;
        exception_tb = exception_keeper_tb_117;

        goto try_finally_handler_119;
    }

    goto finally_end_120;
    finally_end_120:;
    tmp_compare_left_49 = var_ttype.object;

    if ( tmp_compare_left_49 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 174066 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1762;
        goto try_finally_handler_119;
    }

    tmp_source_name_78 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_78 == NULL ))
    {
        tmp_source_name_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_78 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1762;
        goto try_finally_handler_119;
    }

    tmp_compare_right_49 = LOOKUP_ATTRIBUTE( tmp_source_name_78, const_str_plain_string_ );
    if ( tmp_compare_right_49 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1762;
        goto try_finally_handler_119;
    }
    tmp_cmp_Eq_4 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_49, tmp_compare_right_49 );
    if ( tmp_cmp_Eq_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_49 );

        frame_function->f_lineno = 1762;
        goto try_finally_handler_119;
    }
    Py_DECREF( tmp_compare_right_49 );
    if (tmp_cmp_Eq_4 == 1)
    {
        goto branch_yes_92;
    }
    else
    {
        goto branch_no_92;
    }
    branch_yes_92:;
    tmp_binop_left_28 = const_str_digest_1ab39f5b61c8b69f3731c1e05667ecb1;
    tmp_called_120 = LOOKUP_BUILTIN( const_str_plain_max );
    if ( tmp_called_120 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1763;
        goto try_finally_handler_119;
    }
    tmp_iter_arg_70 = var_data.object;

    if ( tmp_iter_arg_70 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 0 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1763;
        goto try_finally_handler_119;
    }

    tmp_dircall_arg1_5 = MAKE_ITERATOR( tmp_iter_arg_70 );
    if ( tmp_dircall_arg1_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1763;
        goto try_finally_handler_119;
    }
    tmp_call_arg_element_107 = impl_genexpr_3_of_function_14_genfromtxt_of_module_numpy$lib$npyio( tmp_dircall_arg1_5, var_i );
    if ( tmp_call_arg_element_107 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1763;
        goto try_finally_handler_119;
    }
    frame_function->f_lineno = 1763;
    tmp_binop_right_28 = CALL_FUNCTION_WITH_ARGS1( tmp_called_120, tmp_call_arg_element_107 );
    Py_DECREF( tmp_call_arg_element_107 );
    if ( tmp_binop_right_28 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1763;
        goto try_finally_handler_119;
    }
    tmp_assign_source_373 = BINARY_OPERATION_REMAINDER( tmp_binop_left_28, tmp_binop_right_28 );
    Py_DECREF( tmp_binop_right_28 );
    if ( tmp_assign_source_373 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1763;
        goto try_finally_handler_119;
    }
    if (var_ttype.object == NULL)
    {
        var_ttype.object = tmp_assign_source_373;
    }
    else
    {
        PyObject *old = var_ttype.object;
        var_ttype.object = tmp_assign_source_373;
        Py_DECREF( old );
    }
    branch_no_92:;
    tmp_source_name_79 = var_descr.object;

    if ( tmp_source_name_79 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 68090 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1764;
        goto try_finally_handler_119;
    }

    tmp_called_121 = LOOKUP_ATTRIBUTE( tmp_source_name_79, const_str_plain_append );
    if ( tmp_called_121 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1764;
        goto try_finally_handler_119;
    }
    tmp_call_arg_element_108 = PyTuple_New( 2 );
    tmp_tuple_element_36 = const_str_empty;
    Py_INCREF( tmp_tuple_element_36 );
    PyTuple_SET_ITEM( tmp_call_arg_element_108, 0, tmp_tuple_element_36 );
    tmp_tuple_element_36 = var_ttype.object;

    if ( tmp_tuple_element_36 == NULL )
    {
        Py_DECREF( tmp_called_121 );
        Py_DECREF( tmp_call_arg_element_108 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 174066 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1764;
        goto try_finally_handler_119;
    }

    Py_INCREF( tmp_tuple_element_36 );
    PyTuple_SET_ITEM( tmp_call_arg_element_108, 1, tmp_tuple_element_36 );
    frame_function->f_lineno = 1764;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_121, tmp_call_arg_element_108 );
    Py_DECREF( tmp_called_121 );
    Py_DECREF( tmp_call_arg_element_108 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1764;
        goto try_finally_handler_119;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_90;
    branch_no_90:;
    tmp_source_name_80 = var_descr.object;

    if ( tmp_source_name_80 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 68090 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1766;
        goto try_finally_handler_119;
    }

    tmp_called_122 = LOOKUP_ATTRIBUTE( tmp_source_name_80, const_str_plain_append );
    if ( tmp_called_122 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1766;
        goto try_finally_handler_119;
    }
    tmp_call_arg_element_109 = PyTuple_New( 2 );
    tmp_tuple_element_37 = const_str_empty;
    Py_INCREF( tmp_tuple_element_37 );
    PyTuple_SET_ITEM( tmp_call_arg_element_109, 0, tmp_tuple_element_37 );
    tmp_tuple_element_37 = par_dtype.object;

    if ( tmp_tuple_element_37 == NULL )
    {
        Py_DECREF( tmp_called_122 );
        Py_DECREF( tmp_call_arg_element_109 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1766;
        goto try_finally_handler_119;
    }

    Py_INCREF( tmp_tuple_element_37 );
    PyTuple_SET_ITEM( tmp_call_arg_element_109, 1, tmp_tuple_element_37 );
    frame_function->f_lineno = 1766;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_122, tmp_call_arg_element_109 );
    Py_DECREF( tmp_called_122 );
    Py_DECREF( tmp_call_arg_element_109 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1766;
        goto try_finally_handler_119;
    }
    Py_DECREF( tmp_unused );
    branch_end_90:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1758;
        goto try_finally_handler_119;
    }
    goto loop_start_45;
    loop_end_45:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_119:;
    exception_keeper_type_118 = exception_type;
    exception_keeper_value_118 = exception_value;
    exception_keeper_tb_118 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_105 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_15__iter_value.object );
    tmp_for_loop_15__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_15__for_iterator.object );
    tmp_for_loop_15__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_105;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_118 != NULL )
    {
        exception_type = exception_keeper_type_118;
        exception_value = exception_keeper_value_118;
        exception_tb = exception_keeper_tb_118;

        goto frame_exception_exit_1;
    }

    goto finally_end_121;
    finally_end_121:;
    tmp_cond_value_41 = var_ishomogeneous.object;

    if ( tmp_cond_value_41 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 174007 ], 59, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1768;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_41 = CHECK_IF_TRUE( tmp_cond_value_41 );
    if ( tmp_cond_truth_41 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1768;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_41 == 1)
    {
        goto branch_no_93;
    }
    else
    {
        goto branch_yes_93;
    }
    branch_yes_93:;
    tmp_len_arg_14 = var_descr.object;

    if ( tmp_len_arg_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 68090 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1770;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_50 = BUILTIN_LEN( tmp_len_arg_14 );
    if ( tmp_compare_left_50 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1770;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_50 = const_int_pos_1;
    tmp_cmp_Gt_7 = RICH_COMPARE_BOOL_GT( tmp_compare_left_50, tmp_compare_right_50 );
    if ( tmp_cmp_Gt_7 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_50 );

        frame_function->f_lineno = 1770;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_50 );
    if (tmp_cmp_Gt_7 == 1)
    {
        goto branch_yes_94;
    }
    else
    {
        goto branch_no_94;
    }
    branch_yes_94:;
    tmp_source_name_81 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_81 == NULL ))
    {
        tmp_source_name_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_81 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1771;
        goto frame_exception_exit_1;
    }

    tmp_called_123 = LOOKUP_ATTRIBUTE( tmp_source_name_81, const_str_plain_dtype );
    if ( tmp_called_123 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1771;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_110 = var_descr.object;

    if ( tmp_call_arg_element_110 == NULL )
    {
        Py_DECREF( tmp_called_123 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 68090 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1771;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1771;
    tmp_assign_source_374 = CALL_FUNCTION_WITH_ARGS1( tmp_called_123, tmp_call_arg_element_110 );
    Py_DECREF( tmp_called_123 );
    if ( tmp_assign_source_374 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1771;
        goto frame_exception_exit_1;
    }
    if (par_dtype.object == NULL)
    {
        par_dtype.object = tmp_assign_source_374;
    }
    else
    {
        PyObject *old = par_dtype.object;
        par_dtype.object = tmp_assign_source_374;
        Py_DECREF( old );
    }
    goto branch_end_94;
    branch_no_94:;
    tmp_source_name_82 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_82 == NULL ))
    {
        tmp_source_name_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_82 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1774;
        goto frame_exception_exit_1;
    }

    tmp_called_124 = LOOKUP_ATTRIBUTE( tmp_source_name_82, const_str_plain_dtype );
    if ( tmp_called_124 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1774;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_111 = var_ttype.object;

    if ( tmp_call_arg_element_111 == NULL )
    {
        Py_DECREF( tmp_called_124 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 174066 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1774;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1774;
    tmp_assign_source_375 = CALL_FUNCTION_WITH_ARGS1( tmp_called_124, tmp_call_arg_element_111 );
    Py_DECREF( tmp_called_124 );
    if ( tmp_assign_source_375 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1774;
        goto frame_exception_exit_1;
    }
    if (par_dtype.object == NULL)
    {
        par_dtype.object = tmp_assign_source_375;
    }
    else
    {
        PyObject *old = par_dtype.object;
        par_dtype.object = tmp_assign_source_375;
        Py_DECREF( old );
    }
    branch_end_94:;
    branch_no_93:;
    branch_no_89:;
    tmp_source_name_83 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_83 == NULL ))
    {
        tmp_source_name_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_83 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1776;
        goto frame_exception_exit_1;
    }

    tmp_called_125 = LOOKUP_ATTRIBUTE( tmp_source_name_83, const_str_plain_array );
    if ( tmp_called_125 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1776;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_112 = var_data.object;

    if ( tmp_call_arg_element_112 == NULL )
    {
        Py_DECREF( tmp_called_125 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 0 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1776;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_113 = par_dtype.object;

    if ( tmp_call_arg_element_113 == NULL )
    {
        Py_DECREF( tmp_called_125 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1776;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1776;
    tmp_assign_source_376 = CALL_FUNCTION_WITH_ARGS2( tmp_called_125, tmp_call_arg_element_112, tmp_call_arg_element_113 );
    Py_DECREF( tmp_called_125 );
    if ( tmp_assign_source_376 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1776;
        goto frame_exception_exit_1;
    }
    if (var_output.object == NULL)
    {
        var_output.object = tmp_assign_source_376;
    }
    else
    {
        PyObject *old = var_output.object;
        var_output.object = tmp_assign_source_376;
        Py_DECREF( old );
    }
    tmp_cond_value_42 = par_usemask.object;

    if ( tmp_cond_value_42 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171857 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1777;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_42 = CHECK_IF_TRUE( tmp_cond_value_42 );
    if ( tmp_cond_truth_42 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1777;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_42 == 1)
    {
        goto branch_yes_95;
    }
    else
    {
        goto branch_no_95;
    }
    branch_yes_95:;
    tmp_source_name_84 = par_dtype.object;

    if ( tmp_source_name_84 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1778;
        goto frame_exception_exit_1;
    }

    tmp_cond_value_43 = LOOKUP_ATTRIBUTE( tmp_source_name_84, const_str_plain_names );
    if ( tmp_cond_value_43 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1778;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_43 = CHECK_IF_TRUE( tmp_cond_value_43 );
    if ( tmp_cond_truth_43 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_43 );

        frame_function->f_lineno = 1778;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_43 );
    if (tmp_cond_truth_43 == 1)
    {
        goto branch_yes_96;
    }
    else
    {
        goto branch_no_96;
    }
    branch_yes_96:;
    // Tried code
    tmp_assign_source_377 = NULL;
    // Tried code
    tmp_source_name_85 = par_dtype.object;

    if ( tmp_source_name_85 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1779;
        goto try_finally_handler_123;
    }

    tmp_iter_arg_71 = LOOKUP_ATTRIBUTE( tmp_source_name_85, const_str_plain_names );
    if ( tmp_iter_arg_71 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1779;
        goto try_finally_handler_123;
    }
    tmp_assign_source_378 = MAKE_ITERATOR( tmp_iter_arg_71 );
    Py_DECREF( tmp_iter_arg_71 );
    if ( tmp_assign_source_378 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1779;
        goto try_finally_handler_123;
    }
    assert( tmp_listcontr_30__listcontr_iter.object == NULL );
    tmp_listcontr_30__listcontr_iter.object = tmp_assign_source_378;

    tmp_assign_source_379 = PyList_New( 0 );
    assert( tmp_listcontr_30__listcontr_result.object == NULL );
    tmp_listcontr_30__listcontr_result.object = tmp_assign_source_379;

    loop_start_46:;
    tmp_next_source_45 = tmp_listcontr_30__listcontr_iter.object;

    tmp_assign_source_380 = ITERATOR_NEXT( tmp_next_source_45 );
    if (tmp_assign_source_380 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_46;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1779;
            goto try_finally_handler_123;
        }
    }

    if (tmp_listcontr_30__iter_value_0.object == NULL)
    {
        tmp_listcontr_30__iter_value_0.object = tmp_assign_source_380;
    }
    else
    {
        PyObject *old = tmp_listcontr_30__iter_value_0.object;
        tmp_listcontr_30__iter_value_0.object = tmp_assign_source_380;
        Py_DECREF( old );
    }
    tmp_assign_source_381 = tmp_listcontr_30__iter_value_0.object;

    if (var__.object == NULL)
    {
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_381 );
    }
    else
    {
        PyObject *old = var__.object;
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_381 );
        Py_DECREF( old );
    }
    tmp_append_to_30 = tmp_listcontr_30__listcontr_result.object;

    tmp_append_value_30 = PyTuple_New( 2 );
    tmp_tuple_element_38 = var__.object;

    Py_INCREF( tmp_tuple_element_38 );
    PyTuple_SET_ITEM( tmp_append_value_30, 0, tmp_tuple_element_38 );
    tmp_source_name_86 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_86 == NULL ))
    {
        tmp_source_name_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_86 == NULL )
    {
        Py_DECREF( tmp_append_value_30 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1779;
        goto try_finally_handler_123;
    }

    tmp_tuple_element_38 = LOOKUP_ATTRIBUTE( tmp_source_name_86, const_str_plain_bool );
    if ( tmp_tuple_element_38 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_append_value_30 );

        frame_function->f_lineno = 1779;
        goto try_finally_handler_123;
    }
    PyTuple_SET_ITEM( tmp_append_value_30, 1, tmp_tuple_element_38 );
    tmp_res = PyList_Append( tmp_append_to_30, tmp_append_value_30 );
    Py_DECREF( tmp_append_value_30 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1779;
        goto try_finally_handler_123;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1779;
        goto try_finally_handler_123;
    }
    goto loop_start_46;
    loop_end_46:;
    tmp_assign_source_377 = tmp_listcontr_30__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_123:;
    exception_keeper_type_119 = exception_type;
    exception_keeper_value_119 = exception_value;
    exception_keeper_tb_119 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_106 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_30__iter_value_0.object );
    tmp_listcontr_30__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_106;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_119 != NULL )
    {
        exception_type = exception_keeper_type_119;
        exception_value = exception_keeper_value_119;
        exception_tb = exception_keeper_tb_119;

        goto try_finally_handler_122;
    }

    goto finally_end_122;
    finally_end_122:;
    if (var_mdtype.object == NULL)
    {
        var_mdtype.object = INCREASE_REFCOUNT( tmp_assign_source_377 );
    }
    else
    {
        PyObject *old = var_mdtype.object;
        var_mdtype.object = INCREASE_REFCOUNT( tmp_assign_source_377 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_122:;
    exception_keeper_type_120 = exception_type;
    exception_keeper_value_120 = exception_value;
    exception_keeper_tb_120 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_107 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_30__listcontr_result.object );
    tmp_listcontr_30__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_30__listcontr_iter.object );
    tmp_listcontr_30__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_107;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_120 != NULL )
    {
        exception_type = exception_keeper_type_120;
        exception_value = exception_keeper_value_120;
        exception_tb = exception_keeper_tb_120;

        goto frame_exception_exit_1;
    }

    goto finally_end_123;
    finally_end_123:;
    goto branch_end_96;
    branch_no_96:;
    tmp_source_name_87 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_87 == NULL ))
    {
        tmp_source_name_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_87 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1781;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_382 = LOOKUP_ATTRIBUTE( tmp_source_name_87, const_str_plain_bool );
    if ( tmp_assign_source_382 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1781;
        goto frame_exception_exit_1;
    }
    if (var_mdtype.object == NULL)
    {
        var_mdtype.object = tmp_assign_source_382;
    }
    else
    {
        PyObject *old = var_mdtype.object;
        var_mdtype.object = tmp_assign_source_382;
        Py_DECREF( old );
    }
    branch_end_96:;
    tmp_source_name_88 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_88 == NULL ))
    {
        tmp_source_name_88 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_88 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1782;
        goto frame_exception_exit_1;
    }

    tmp_called_126 = LOOKUP_ATTRIBUTE( tmp_source_name_88, const_str_plain_array );
    if ( tmp_called_126 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1782;
        goto frame_exception_exit_1;
    }
    tmp_call_pos_21 = PyTuple_New( 1 );
    tmp_tuple_element_39 = var_masks.object;

    if ( tmp_tuple_element_39 == NULL )
    {
        Py_DECREF( tmp_called_126 );
        Py_DECREF( tmp_call_pos_21 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173525 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1782;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_39 );
    PyTuple_SET_ITEM( tmp_call_pos_21, 0, tmp_tuple_element_39 );
    tmp_call_kw_14 = _PyDict_NewPresized( 1 );
    tmp_dict_value_27 = var_mdtype.object;

    if ( tmp_dict_value_27 == NULL )
    {
        Py_DECREF( tmp_called_126 );
        Py_DECREF( tmp_call_pos_21 );
        Py_DECREF( tmp_call_kw_14 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 173792 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1782;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_27 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_14, tmp_dict_key_27, tmp_dict_value_27 );
    frame_function->f_lineno = 1782;
    tmp_assign_source_383 = CALL_FUNCTION( tmp_called_126, tmp_call_pos_21, tmp_call_kw_14 );
    Py_DECREF( tmp_called_126 );
    Py_DECREF( tmp_call_pos_21 );
    Py_DECREF( tmp_call_kw_14 );
    if ( tmp_assign_source_383 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1782;
        goto frame_exception_exit_1;
    }
    if (var_outputmask.object == NULL)
    {
        var_outputmask.object = tmp_assign_source_383;
    }
    else
    {
        PyObject *old = var_outputmask.object;
        var_outputmask.object = tmp_assign_source_383;
        Py_DECREF( old );
    }
    branch_no_95:;
    branch_end_85:;
    branch_end_77:;
    tmp_source_name_90 = var_output.object;

    if ( tmp_source_name_90 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 82676 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1784;
        goto frame_exception_exit_1;
    }

    tmp_source_name_89 = LOOKUP_ATTRIBUTE( tmp_source_name_90, const_str_plain_dtype );
    if ( tmp_source_name_89 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1784;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_384 = LOOKUP_ATTRIBUTE( tmp_source_name_89, const_str_plain_names );
    Py_DECREF( tmp_source_name_89 );
    if ( tmp_assign_source_384 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1784;
        goto frame_exception_exit_1;
    }
    if (par_names.object == NULL)
    {
        par_names.object = tmp_assign_source_384;
    }
    else
    {
        PyObject *old = par_names.object;
        par_names.object = tmp_assign_source_384;
        Py_DECREF( old );
    }
    // Tried code
    tmp_cond_value_44 = NULL;
    // Tried code
    tmp_assign_source_385 = par_usemask.object;

    if ( tmp_assign_source_385 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171857 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1785;
        goto try_finally_handler_125;
    }

    assert( tmp_and_5__value_1.object == NULL );
    tmp_and_5__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_385 );

    tmp_cond_value_45 = tmp_and_5__value_1.object;

    tmp_cond_truth_45 = CHECK_IF_TRUE( tmp_cond_value_45 );
    if ( tmp_cond_truth_45 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1785;
        goto try_finally_handler_125;
    }
    if (tmp_cond_truth_45 == 1)
    {
        goto condexpr_true_9;
    }
    else
    {
        goto condexpr_false_9;
    }
    condexpr_true_9:;
    tmp_cond_value_44 = NULL;
    // Tried code
    tmp_result = tmp_and_5__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_5__value_1.object );
        tmp_and_5__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_44 = par_names.object;

    // Re-reraise as necessary after finally was executed.
    goto finally_end_124;
    finally_end_124:;
    goto condexpr_end_9;
    condexpr_false_9:;
    tmp_cond_value_44 = tmp_and_5__value_1.object;

    condexpr_end_9:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_125:;
    exception_keeper_type_121 = exception_type;
    exception_keeper_value_121 = exception_value;
    exception_keeper_tb_121 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_121 != NULL )
    {
        exception_type = exception_keeper_type_121;
        exception_value = exception_keeper_value_121;
        exception_tb = exception_keeper_tb_121;

        goto try_finally_handler_124;
    }

    goto finally_end_125;
    finally_end_125:;
    tmp_cond_truth_44 = CHECK_IF_TRUE( tmp_cond_value_44 );
    if ( tmp_cond_truth_44 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1785;
        goto try_finally_handler_124;
    }
    if (tmp_cond_truth_44 == 1)
    {
        goto branch_yes_97;
    }
    else
    {
        goto branch_no_97;
    }
    branch_yes_97:;
    tmp_called_127 = LOOKUP_BUILTIN( const_str_plain_zip );
    if ( tmp_called_127 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1786;
        goto try_finally_handler_124;
    }
    tmp_call_pos_22 = NULL;
    // Tried code
    tmp_call_pos_22 = PyTuple_New( 2 );
    tmp_tuple_element_40 = NULL;
    // Tried code
    tmp_assign_source_387 = par_names.object;

    if ( tmp_assign_source_387 == NULL )
    {
        Py_DECREF( tmp_call_pos_22 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1786;
        goto try_finally_handler_128;
    }

    assert( tmp_or_5__value_1.object == NULL );
    tmp_or_5__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_387 );

    tmp_cond_value_46 = tmp_or_5__value_1.object;

    tmp_cond_truth_46 = CHECK_IF_TRUE( tmp_cond_value_46 );
    if ( tmp_cond_truth_46 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_22 );

        frame_function->f_lineno = 1786;
        goto try_finally_handler_128;
    }
    if (tmp_cond_truth_46 == 1)
    {
        goto condexpr_true_10;
    }
    else
    {
        goto condexpr_false_10;
    }
    condexpr_true_10:;
    tmp_tuple_element_40 = tmp_or_5__value_1.object;

    goto condexpr_end_10;
    condexpr_false_10:;
    tmp_tuple_element_40 = NULL;
    // Tried code
    tmp_result = tmp_or_5__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_5__value_1.object );
        tmp_or_5__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_tuple_element_40 = const_tuple_empty;
    // Re-reraise as necessary after finally was executed.
    goto finally_end_126;
    finally_end_126:;
    condexpr_end_10:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_128:;
    exception_keeper_type_122 = exception_type;
    exception_keeper_value_122 = exception_value;
    exception_keeper_tb_122 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_122 != NULL )
    {
        exception_type = exception_keeper_type_122;
        exception_value = exception_keeper_value_122;
        exception_tb = exception_keeper_tb_122;

        goto try_finally_handler_127;
    }

    goto finally_end_127;
    finally_end_127:;
    Py_INCREF( tmp_tuple_element_40 );
    PyTuple_SET_ITEM( tmp_call_pos_22, 0, tmp_tuple_element_40 );
    tmp_tuple_element_40 = par_converters.object;

    if ( tmp_tuple_element_40 == NULL )
    {
        Py_DECREF( tmp_call_pos_22 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170342 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1786;
        goto try_finally_handler_127;
    }

    Py_INCREF( tmp_tuple_element_40 );
    PyTuple_SET_ITEM( tmp_call_pos_22, 1, tmp_tuple_element_40 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_127:;
    exception_keeper_type_123 = exception_type;
    exception_keeper_value_123 = exception_value;
    exception_keeper_tb_123 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_108 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_5__value_1.object );
    tmp_or_5__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_108;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_123 != NULL )
    {
        exception_type = exception_keeper_type_123;
        exception_value = exception_keeper_value_123;
        exception_tb = exception_keeper_tb_123;

        goto try_finally_handler_124;
    }

    goto finally_end_128;
    finally_end_128:;
    frame_function->f_lineno = 1786;
    tmp_iter_arg_72 = CALL_FUNCTION_WITH_POSARGS( tmp_called_127, tmp_call_pos_22 );
    Py_DECREF( tmp_call_pos_22 );
    if ( tmp_iter_arg_72 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1786;
        goto try_finally_handler_124;
    }
    tmp_assign_source_386 = MAKE_ITERATOR( tmp_iter_arg_72 );
    Py_DECREF( tmp_iter_arg_72 );
    if ( tmp_assign_source_386 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1786;
        goto try_finally_handler_124;
    }
    assert( tmp_for_loop_16__for_iterator.object == NULL );
    tmp_for_loop_16__for_iterator.object = tmp_assign_source_386;

    // Tried code
    loop_start_47:;
    tmp_next_source_46 = tmp_for_loop_16__for_iterator.object;

    tmp_assign_source_388 = ITERATOR_NEXT( tmp_next_source_46 );
    if (tmp_assign_source_388 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_47;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1786;
            goto try_finally_handler_130;
        }
    }

    if (tmp_for_loop_16__iter_value.object == NULL)
    {
        tmp_for_loop_16__iter_value.object = tmp_assign_source_388;
    }
    else
    {
        PyObject *old = tmp_for_loop_16__iter_value.object;
        tmp_for_loop_16__iter_value.object = tmp_assign_source_388;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_73 = tmp_for_loop_16__iter_value.object;

    tmp_assign_source_389 = MAKE_ITERATOR( tmp_iter_arg_73 );
    if ( tmp_assign_source_389 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1786;
        goto try_finally_handler_131;
    }
    if (tmp_tuple_unpack_21__source_iter.object == NULL)
    {
        tmp_tuple_unpack_21__source_iter.object = tmp_assign_source_389;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_21__source_iter.object;
        tmp_tuple_unpack_21__source_iter.object = tmp_assign_source_389;
        Py_DECREF( old );
    }
    tmp_unpack_42 = tmp_tuple_unpack_21__source_iter.object;

    tmp_assign_source_390 = UNPACK_PARAMETER_NEXT( tmp_unpack_42, 0 );
    if ( tmp_assign_source_390 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1786;
        goto try_finally_handler_131;
    }
    if (tmp_tuple_unpack_21__element_1.object == NULL)
    {
        tmp_tuple_unpack_21__element_1.object = tmp_assign_source_390;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_21__element_1.object;
        tmp_tuple_unpack_21__element_1.object = tmp_assign_source_390;
        Py_DECREF( old );
    }
    tmp_unpack_43 = tmp_tuple_unpack_21__source_iter.object;

    tmp_assign_source_391 = UNPACK_PARAMETER_NEXT( tmp_unpack_43, 1 );
    if ( tmp_assign_source_391 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1786;
        goto try_finally_handler_131;
    }
    if (tmp_tuple_unpack_21__element_2.object == NULL)
    {
        tmp_tuple_unpack_21__element_2.object = tmp_assign_source_391;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_21__element_2.object;
        tmp_tuple_unpack_21__element_2.object = tmp_assign_source_391;
        Py_DECREF( old );
    }
    tmp_iterator_name_21 = tmp_tuple_unpack_21__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_21 ); assert( PyIter_Check( tmp_iterator_name_21 ) );

    tmp_iterator_attempt_21 = (*Py_TYPE( tmp_iterator_name_21 )->tp_iternext)( tmp_iterator_name_21 );

    if (likely( tmp_iterator_attempt_21 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_131;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_21 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_131;
    }
    tmp_assign_source_392 = tmp_tuple_unpack_21__element_1.object;

    if (var_name.object == NULL)
    {
        var_name.object = INCREASE_REFCOUNT( tmp_assign_source_392 );
    }
    else
    {
        PyObject *old = var_name.object;
        var_name.object = INCREASE_REFCOUNT( tmp_assign_source_392 );
        Py_DECREF( old );
    }
    tmp_assign_source_393 = tmp_tuple_unpack_21__element_2.object;

    if (var_conv.object == NULL)
    {
        var_conv.object = INCREASE_REFCOUNT( tmp_assign_source_393 );
    }
    else
    {
        PyObject *old = var_conv.object;
        var_conv.object = INCREASE_REFCOUNT( tmp_assign_source_393 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_131:;
    exception_keeper_type_124 = exception_type;
    exception_keeper_value_124 = exception_value;
    exception_keeper_tb_124 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_109 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_21__source_iter.object );
    tmp_tuple_unpack_21__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_21__element_1.object );
    tmp_tuple_unpack_21__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_21__element_2.object );
    tmp_tuple_unpack_21__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_109;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_124 != NULL )
    {
        exception_type = exception_keeper_type_124;
        exception_value = exception_keeper_value_124;
        exception_tb = exception_keeper_tb_124;

        goto try_finally_handler_130;
    }

    goto finally_end_129;
    finally_end_129:;
    // Tried code
    tmp_assign_source_394 = NULL;
    // Tried code
    tmp_source_name_91 = var_conv.object;

    if ( tmp_source_name_91 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170884 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1787;
        goto try_finally_handler_133;
    }

    tmp_iter_arg_74 = LOOKUP_ATTRIBUTE( tmp_source_name_91, const_str_plain_missing_values );
    if ( tmp_iter_arg_74 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1787;
        goto try_finally_handler_133;
    }
    tmp_assign_source_395 = MAKE_ITERATOR( tmp_iter_arg_74 );
    Py_DECREF( tmp_iter_arg_74 );
    if ( tmp_assign_source_395 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1787;
        goto try_finally_handler_133;
    }
    if (tmp_listcontr_31__listcontr_iter.object == NULL)
    {
        tmp_listcontr_31__listcontr_iter.object = tmp_assign_source_395;
    }
    else
    {
        PyObject *old = tmp_listcontr_31__listcontr_iter.object;
        tmp_listcontr_31__listcontr_iter.object = tmp_assign_source_395;
        Py_DECREF( old );
    }
    tmp_assign_source_396 = PyList_New( 0 );
    if (tmp_listcontr_31__listcontr_result.object == NULL)
    {
        tmp_listcontr_31__listcontr_result.object = tmp_assign_source_396;
    }
    else
    {
        PyObject *old = tmp_listcontr_31__listcontr_result.object;
        tmp_listcontr_31__listcontr_result.object = tmp_assign_source_396;
        Py_DECREF( old );
    }
    loop_start_48:;
    tmp_next_source_47 = tmp_listcontr_31__listcontr_iter.object;

    tmp_assign_source_397 = ITERATOR_NEXT( tmp_next_source_47 );
    if (tmp_assign_source_397 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_48;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1787;
            goto try_finally_handler_133;
        }
    }

    if (tmp_listcontr_31__iter_value_0.object == NULL)
    {
        tmp_listcontr_31__iter_value_0.object = tmp_assign_source_397;
    }
    else
    {
        PyObject *old = tmp_listcontr_31__iter_value_0.object;
        tmp_listcontr_31__iter_value_0.object = tmp_assign_source_397;
        Py_DECREF( old );
    }
    tmp_assign_source_398 = tmp_listcontr_31__iter_value_0.object;

    if (var__.object == NULL)
    {
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_398 );
    }
    else
    {
        PyObject *old = var__.object;
        var__.object = INCREASE_REFCOUNT( tmp_assign_source_398 );
        Py_DECREF( old );
    }
    tmp_compare_left_51 = var__.object;

    tmp_called_128 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_128 == NULL ))
    {
        tmp_called_128 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_128 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52220 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1788;
        goto try_finally_handler_133;
    }

    tmp_call_arg_element_114 = const_str_empty;
    frame_function->f_lineno = 1788;
    tmp_compare_right_51 = CALL_FUNCTION_WITH_ARGS1( tmp_called_128, tmp_call_arg_element_114 );
    if ( tmp_compare_right_51 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1788;
        goto try_finally_handler_133;
    }
    tmp_cmp_NotEq_3 = RICH_COMPARE_BOOL_NE( tmp_compare_left_51, tmp_compare_right_51 );
    if ( tmp_cmp_NotEq_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_51 );

        frame_function->f_lineno = 1788;
        goto try_finally_handler_133;
    }
    Py_DECREF( tmp_compare_right_51 );
    if (tmp_cmp_NotEq_3 == 1)
    {
        goto branch_yes_98;
    }
    else
    {
        goto branch_no_98;
    }
    branch_yes_98:;
    tmp_append_to_31 = tmp_listcontr_31__listcontr_result.object;

    tmp_called_129 = var_conv.object;

    if ( tmp_called_129 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 170884 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1787;
        goto try_finally_handler_133;
    }

    tmp_call_arg_element_115 = var__.object;

    frame_function->f_lineno = 1787;
    tmp_append_value_31 = CALL_FUNCTION_WITH_ARGS1( tmp_called_129, tmp_call_arg_element_115 );
    if ( tmp_append_value_31 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1787;
        goto try_finally_handler_133;
    }
    tmp_res = PyList_Append( tmp_append_to_31, tmp_append_value_31 );
    Py_DECREF( tmp_append_value_31 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1787;
        goto try_finally_handler_133;
    }
    tmp_unused = Py_None;
    branch_no_98:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1787;
        goto try_finally_handler_133;
    }
    goto loop_start_48;
    loop_end_48:;
    tmp_assign_source_394 = tmp_listcontr_31__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_133:;
    exception_keeper_type_125 = exception_type;
    exception_keeper_value_125 = exception_value;
    exception_keeper_tb_125 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_110 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_31__iter_value_0.object );
    tmp_listcontr_31__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_110;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_125 != NULL )
    {
        exception_type = exception_keeper_type_125;
        exception_value = exception_keeper_value_125;
        exception_tb = exception_keeper_tb_125;

        goto try_finally_handler_132;
    }

    goto finally_end_130;
    finally_end_130:;
    if (par_missing_values.object == NULL)
    {
        par_missing_values.object = INCREASE_REFCOUNT( tmp_assign_source_394 );
    }
    else
    {
        PyObject *old = par_missing_values.object;
        par_missing_values.object = INCREASE_REFCOUNT( tmp_assign_source_394 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_132:;
    exception_keeper_type_126 = exception_type;
    exception_keeper_value_126 = exception_value;
    exception_keeper_tb_126 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_111 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_31__listcontr_result.object );
    tmp_listcontr_31__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_31__listcontr_iter.object );
    tmp_listcontr_31__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_111;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_126 != NULL )
    {
        exception_type = exception_keeper_type_126;
        exception_value = exception_keeper_value_126;
        exception_tb = exception_keeper_tb_126;

        goto try_finally_handler_130;
    }

    goto finally_end_131;
    finally_end_131:;
    tmp_iter_arg_75 = par_missing_values.object;

    if ( tmp_iter_arg_75 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156787 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1789;
        goto try_finally_handler_130;
    }

    tmp_assign_source_399 = MAKE_ITERATOR( tmp_iter_arg_75 );
    if ( tmp_assign_source_399 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1789;
        goto try_finally_handler_130;
    }
    if (tmp_for_loop_17__for_iterator.object == NULL)
    {
        tmp_for_loop_17__for_iterator.object = tmp_assign_source_399;
    }
    else
    {
        PyObject *old = tmp_for_loop_17__for_iterator.object;
        tmp_for_loop_17__for_iterator.object = tmp_assign_source_399;
        Py_DECREF( old );
    }
    // Tried code
    loop_start_49:;
    tmp_next_source_48 = tmp_for_loop_17__for_iterator.object;

    tmp_assign_source_400 = ITERATOR_NEXT( tmp_next_source_48 );
    if (tmp_assign_source_400 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_49;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1789;
            goto try_finally_handler_134;
        }
    }

    if (tmp_for_loop_17__iter_value.object == NULL)
    {
        tmp_for_loop_17__iter_value.object = tmp_assign_source_400;
    }
    else
    {
        PyObject *old = tmp_for_loop_17__iter_value.object;
        tmp_for_loop_17__iter_value.object = tmp_assign_source_400;
        Py_DECREF( old );
    }
    tmp_assign_source_401 = tmp_for_loop_17__iter_value.object;

    if (var_mval.object == NULL)
    {
        var_mval.object = INCREASE_REFCOUNT( tmp_assign_source_401 );
    }
    else
    {
        PyObject *old = var_mval.object;
        var_mval.object = INCREASE_REFCOUNT( tmp_assign_source_401 );
        Py_DECREF( old );
    }
    tmp_assign_source_402 = var_outputmask.object;

    if ( tmp_assign_source_402 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 174117 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1790;
        goto try_finally_handler_134;
    }

    if (tmp_inplace_assign_5__inplace_target.object == NULL)
    {
        tmp_inplace_assign_5__inplace_target.object = INCREASE_REFCOUNT( tmp_assign_source_402 );
    }
    else
    {
        PyObject *old = tmp_inplace_assign_5__inplace_target.object;
        tmp_inplace_assign_5__inplace_target.object = INCREASE_REFCOUNT( tmp_assign_source_402 );
        Py_DECREF( old );
    }
    // Tried code
    tmp_assign_source_403 = var_name.object;

    if ( tmp_assign_source_403 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1790;
        goto try_finally_handler_135;
    }

    if (tmp_inplace_assign_5__inplace_subscript.object == NULL)
    {
        tmp_inplace_assign_5__inplace_subscript.object = INCREASE_REFCOUNT( tmp_assign_source_403 );
    }
    else
    {
        PyObject *old = tmp_inplace_assign_5__inplace_subscript.object;
        tmp_inplace_assign_5__inplace_subscript.object = INCREASE_REFCOUNT( tmp_assign_source_403 );
        Py_DECREF( old );
    }
    tmp_subscr_target_13 = tmp_inplace_assign_5__inplace_target.object;

    tmp_subscr_subscript_13 = tmp_inplace_assign_5__inplace_subscript.object;

    tmp_binop_left_29 = LOOKUP_SUBSCRIPT( tmp_subscr_target_13, tmp_subscr_subscript_13 );
    if ( tmp_binop_left_29 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1790;
        goto try_finally_handler_135;
    }
    tmp_subscr_target_14 = var_output.object;

    if ( tmp_subscr_target_14 == NULL )
    {
        Py_DECREF( tmp_binop_left_29 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 82676 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1790;
        goto try_finally_handler_135;
    }

    tmp_subscr_subscript_14 = var_name.object;

    if ( tmp_subscr_subscript_14 == NULL )
    {
        Py_DECREF( tmp_binop_left_29 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1790;
        goto try_finally_handler_135;
    }

    tmp_compexpr_left_9 = LOOKUP_SUBSCRIPT( tmp_subscr_target_14, tmp_subscr_subscript_14 );
    if ( tmp_compexpr_left_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_29 );

        frame_function->f_lineno = 1790;
        goto try_finally_handler_135;
    }
    tmp_compexpr_right_9 = var_mval.object;

    tmp_binop_right_29 = RICH_COMPARE_EQ( tmp_compexpr_left_9, tmp_compexpr_right_9 );
    Py_DECREF( tmp_compexpr_left_9 );
    if ( tmp_binop_right_29 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_29 );

        frame_function->f_lineno = 1790;
        goto try_finally_handler_135;
    }
    tmp_ass_subvalue_5 = BINARY_OPERATION( PyNumber_InPlaceOr, tmp_binop_left_29, tmp_binop_right_29 );
    Py_DECREF( tmp_binop_left_29 );
    Py_DECREF( tmp_binop_right_29 );
    if ( tmp_ass_subvalue_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1790;
        goto try_finally_handler_135;
    }
    tmp_ass_subscribed_5 = tmp_inplace_assign_5__inplace_target.object;

    tmp_ass_subscript_5 = tmp_inplace_assign_5__inplace_subscript.object;

    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_5, tmp_ass_subscript_5, tmp_ass_subvalue_5 );
    Py_DECREF( tmp_ass_subvalue_5 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1790;
        goto try_finally_handler_135;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_135:;
    exception_keeper_type_127 = exception_type;
    exception_keeper_value_127 = exception_value;
    exception_keeper_tb_127 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_112 = frame_function->f_lineno;
    tmp_result = tmp_inplace_assign_5__inplace_target.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_inplace_assign_5__inplace_target.object );
        tmp_inplace_assign_5__inplace_target.object = NULL;
    }

    assert( tmp_result != false );
    Py_XDECREF( tmp_inplace_assign_5__inplace_subscript.object );
    tmp_inplace_assign_5__inplace_subscript.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_112;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_127 != NULL )
    {
        exception_type = exception_keeper_type_127;
        exception_value = exception_keeper_value_127;
        exception_tb = exception_keeper_tb_127;

        goto try_finally_handler_134;
    }

    goto finally_end_132;
    finally_end_132:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1789;
        goto try_finally_handler_134;
    }
    goto loop_start_49;
    loop_end_49:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_134:;
    exception_keeper_type_128 = exception_type;
    exception_keeper_value_128 = exception_value;
    exception_keeper_tb_128 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_113 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_17__iter_value.object );
    tmp_for_loop_17__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_17__for_iterator.object );
    tmp_for_loop_17__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_113;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_128 != NULL )
    {
        exception_type = exception_keeper_type_128;
        exception_value = exception_keeper_value_128;
        exception_tb = exception_keeper_tb_128;

        goto try_finally_handler_130;
    }

    goto finally_end_133;
    finally_end_133:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1786;
        goto try_finally_handler_130;
    }
    goto loop_start_47;
    loop_end_47:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_130:;
    exception_keeper_type_129 = exception_type;
    exception_keeper_value_129 = exception_value;
    exception_keeper_tb_129 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_114 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_16__iter_value.object );
    tmp_for_loop_16__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_16__for_iterator.object );
    tmp_for_loop_16__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_114;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_129 != NULL )
    {
        exception_type = exception_keeper_type_129;
        exception_value = exception_keeper_value_129;
        exception_tb = exception_keeper_tb_129;

        goto try_finally_handler_124;
    }

    goto finally_end_134;
    finally_end_134:;
    branch_no_97:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_124:;
    exception_keeper_type_130 = exception_type;
    exception_keeper_value_130 = exception_value;
    exception_keeper_tb_130 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_115 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_5__value_1.object );
    tmp_and_5__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_115;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_130 != NULL )
    {
        exception_type = exception_keeper_type_130;
        exception_value = exception_keeper_value_130;
        exception_tb = exception_keeper_tb_130;

        goto frame_exception_exit_1;
    }

    goto finally_end_135;
    finally_end_135:;
    tmp_cond_value_47 = par_usemask.object;

    if ( tmp_cond_value_47 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171857 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1792;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_47 = CHECK_IF_TRUE( tmp_cond_value_47 );
    if ( tmp_cond_truth_47 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1792;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_47 == 1)
    {
        goto branch_yes_99;
    }
    else
    {
        goto branch_no_99;
    }
    branch_yes_99:;
    tmp_source_name_92 = var_output.object;

    if ( tmp_source_name_92 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 82676 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1793;
        goto frame_exception_exit_1;
    }

    tmp_called_130 = LOOKUP_ATTRIBUTE( tmp_source_name_92, const_str_plain_view );
    if ( tmp_called_130 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1793;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_116 = var_MaskedArray.object;

    if ( tmp_call_arg_element_116 == NULL )
    {
        Py_DECREF( tmp_called_130 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 174173 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1793;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1793;
    tmp_assign_source_404 = CALL_FUNCTION_WITH_ARGS1( tmp_called_130, tmp_call_arg_element_116 );
    Py_DECREF( tmp_called_130 );
    if ( tmp_assign_source_404 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1793;
        goto frame_exception_exit_1;
    }
    if (var_output.object == NULL)
    {
        var_output.object = tmp_assign_source_404;
    }
    else
    {
        PyObject *old = var_output.object;
        var_output.object = tmp_assign_source_404;
        Py_DECREF( old );
    }
    tmp_assattr_name_2 = var_outputmask.object;

    if ( tmp_assattr_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 174117 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1794;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_2 = var_output.object;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__mask, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1794;
        goto frame_exception_exit_1;
    }
    branch_no_99:;
    tmp_cond_value_48 = par_unpack.object;

    if ( tmp_cond_value_48 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 171149 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1795;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_48 = CHECK_IF_TRUE( tmp_cond_value_48 );
    if ( tmp_cond_truth_48 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1795;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_48 == 1)
    {
        goto branch_yes_100;
    }
    else
    {
        goto branch_no_100;
    }
    branch_yes_100:;
    tmp_source_name_94 = var_output.object;

    if ( tmp_source_name_94 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 82676 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1796;
        goto frame_exception_exit_1;
    }

    tmp_called_131 = LOOKUP_ATTRIBUTE( tmp_source_name_94, const_str_plain_squeeze );
    if ( tmp_called_131 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1796;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1796;
    tmp_source_name_93 = CALL_FUNCTION_NO_ARGS( tmp_called_131 );
    Py_DECREF( tmp_called_131 );
    if ( tmp_source_name_93 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1796;
        goto frame_exception_exit_1;
    }
    tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_93, const_str_plain_T );
    Py_DECREF( tmp_source_name_93 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1796;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_no_100:;
    tmp_source_name_95 = var_output.object;

    if ( tmp_source_name_95 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 82676 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1797;
        goto frame_exception_exit_1;
    }

    tmp_called_132 = LOOKUP_ATTRIBUTE( tmp_source_name_95, const_str_plain_squeeze );
    if ( tmp_called_132 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1797;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1797;
    tmp_return_value = CALL_FUNCTION_NO_ARGS( tmp_called_132 );
    Py_DECREF( tmp_called_132 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1797;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_MaskedArray.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_MaskedArray,
            var_MaskedArray.object
        );

    }
    if ((var_make_mask_descr.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_make_mask_descr,
            var_make_mask_descr.object
        );

    }
    if ((var_user_converters.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_user_converters,
            var_user_converters.object
        );

    }
    if ((var_errmsg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_errmsg,
            var_errmsg.object
        );

    }
    if ((var_own_fhd.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_own_fhd,
            var_own_fhd.object
        );

    }
    if ((var_fhd.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fhd,
            var_fhd.object
        );

    }
    if ((var_split_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_split_line,
            var_split_line.object
        );

    }
    if ((var_validate_names.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_validate_names,
            var_validate_names.object
        );

    }
    if ((var_i.storage != NULL && var_i.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_i,
            var_i.storage->object
        );

    }
    if ((var_first_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_first_values,
            var_first_values.object
        );

    }
    if ((var_first_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_first_line,
            var_first_line.object
        );

    }
    if ((var_fval.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fval,
            var_fval.object
        );

    }
    if ((var__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__,
            var__.object
        );

    }
    if ((var_nbcols.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_nbcols,
            var_nbcols.object
        );

    }
    if ((var_current.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_current,
            var_current.object
        );

    }
    if ((var_descr.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_descr,
            var_descr.object
        );

    }
    if ((var_user_missing_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_user_missing_values,
            var_user_missing_values.object
        );

    }
    if ((var_key.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_key,
            var_key.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((var_miss.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_miss,
            var_miss.object
        );

    }
    if ((var_value.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_value,
            var_value.object
        );

    }
    if ((var_entry.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_entry,
            var_entry.object
        );

    }
    if ((var_user_value.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_user_value,
            var_user_value.object
        );

    }
    if ((var_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_values,
            var_values.object
        );

    }
    if ((var_user_filling_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_user_filling_values,
            var_user_filling_values.object
        );

    }
    if ((var_n.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_n,
            var_n.object
        );

    }
    if ((var_fill.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fill,
            var_fill.object
        );

    }
    if ((var_dtype_flat.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_dtype_flat,
            var_dtype_flat.object
        );

    }
    if ((var_zipit.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_zipit,
            var_zipit.object
        );

    }
    if ((var_dt.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_dt,
            var_dt.object
        );

    }
    if ((var_uc_update.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_uc_update,
            var_uc_update.object
        );

    }
    if ((var_conv.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_conv,
            var_conv.object
        );

    }
    if ((var_testing_value.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_testing_value,
            var_testing_value.object
        );

    }
    if ((var_miss_chars.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_miss_chars,
            var_miss_chars.object
        );

    }
    if ((var_rows.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_rows,
            var_rows.object
        );

    }
    if ((var_append_to_rows.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_append_to_rows,
            var_append_to_rows.object
        );

    }
    if ((var_masks.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_masks,
            var_masks.object
        );

    }
    if ((var_append_to_masks.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_append_to_masks,
            var_append_to_masks.object
        );

    }
    if ((var_invalid.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_invalid,
            var_invalid.object
        );

    }
    if ((var_append_to_invalid.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_append_to_invalid,
            var_append_to_invalid.object
        );

    }
    if ((var_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_line,
            var_line.object
        );

    }
    if ((var_nbvalues.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_nbvalues,
            var_nbvalues.object
        );

    }
    if ((var_v.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_v,
            var_v.object
        );

    }
    if ((var_m.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_m,
            var_m.object
        );

    }
    if ((var_converter.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_converter,
            var_converter.object
        );

    }
    if ((var__m.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__m,
            var__m.object
        );

    }
    if ((var_current_column.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_current_column,
            var_current_column.object
        );

    }
    if ((var_j.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_j,
            var_j.object
        );

    }
    if ((var_nbinvalid.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_nbinvalid,
            var_nbinvalid.object
        );

    }
    if ((var_nbrows.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_nbrows,
            var_nbrows.object
        );

    }
    if ((var_template.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_template,
            var_template.object
        );

    }
    if ((var_nbinvalid_skipped.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_nbinvalid_skipped,
            var_nbinvalid_skipped.object
        );

    }
    if ((var_nb.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_nb,
            var_nb.object
        );

    }
    if ((var__r.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__r,
            var__r.object
        );

    }
    if ((var_data.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_data,
            var_data.object
        );

    }
    if ((var_column_types.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_column_types,
            var_column_types.object
        );

    }
    if ((var_strcolidx.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_strcolidx,
            var_strcolidx.object
        );

    }
    if ((var_c.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_c,
            var_c.object
        );

    }
    if ((var_base.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_base,
            var_base.object
        );

    }
    if ((var_ddtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ddtype,
            var_ddtype.object
        );

    }
    if ((var_mdtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_mdtype,
            var_mdtype.object
        );

    }
    if ((var_output.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_output,
            var_output.object
        );

    }
    if ((var_outputmask.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_outputmask,
            var_outputmask.object
        );

    }
    if ((var_t.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_t,
            var_t.object
        );

    }
    if ((var_rowmasks.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_rowmasks,
            var_rowmasks.object
        );

    }
    if ((var_ishomogeneous.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ishomogeneous,
            var_ishomogeneous.object
        );

    }
    if ((var_ttype.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ttype,
            var_ttype.object
        );

    }
    if ((var_name.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_name,
            var_name.object
        );

    }
    if ((var_mval.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_mval,
            var_mval.object
        );

    }
    if ((par_fname.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fname,
            par_fname.object
        );

    }
    if ((par_dtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_dtype,
            par_dtype.object
        );

    }
    if ((par_comments.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_comments,
            par_comments.object
        );

    }
    if ((par_delimiter.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_delimiter,
            par_delimiter.object
        );

    }
    if ((par_skiprows.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_skiprows,
            par_skiprows.object
        );

    }
    if ((par_skip_header.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_skip_header,
            par_skip_header.object
        );

    }
    if ((par_skip_footer.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_skip_footer,
            par_skip_footer.object
        );

    }
    if ((par_converters.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_converters,
            par_converters.object
        );

    }
    if ((par_missing.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_missing,
            par_missing.object
        );

    }
    if ((par_missing_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_missing_values,
            par_missing_values.object
        );

    }
    if ((par_filling_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_filling_values,
            par_filling_values.object
        );

    }
    if ((par_usecols.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_usecols,
            par_usecols.object
        );

    }
    if ((par_names.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_names,
            par_names.object
        );

    }
    if ((par_excludelist.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_excludelist,
            par_excludelist.object
        );

    }
    if ((par_deletechars.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_deletechars,
            par_deletechars.object
        );

    }
    if ((par_replace_space.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_replace_space,
            par_replace_space.object
        );

    }
    if ((par_autostrip.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_autostrip,
            par_autostrip.object
        );

    }
    if ((par_case_sensitive.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_case_sensitive,
            par_case_sensitive.object
        );

    }
    if ((par_defaultfmt.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_defaultfmt,
            par_defaultfmt.object
        );

    }
    if ((par_unpack.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_unpack,
            par_unpack.object
        );

    }
    if ((par_usemask.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_usemask,
            par_usemask.object
        );

    }
    if ((par_loose.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_loose,
            par_loose.object
        );

    }
    if ((par_invalid_raise.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_invalid_raise,
            par_invalid_raise.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_14_genfromtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_fname = NULL;
    PyObject *_python_par_dtype = NULL;
    PyObject *_python_par_comments = NULL;
    PyObject *_python_par_delimiter = NULL;
    PyObject *_python_par_skiprows = NULL;
    PyObject *_python_par_skip_header = NULL;
    PyObject *_python_par_skip_footer = NULL;
    PyObject *_python_par_converters = NULL;
    PyObject *_python_par_missing = NULL;
    PyObject *_python_par_missing_values = NULL;
    PyObject *_python_par_filling_values = NULL;
    PyObject *_python_par_usecols = NULL;
    PyObject *_python_par_names = NULL;
    PyObject *_python_par_excludelist = NULL;
    PyObject *_python_par_deletechars = NULL;
    PyObject *_python_par_replace_space = NULL;
    PyObject *_python_par_autostrip = NULL;
    PyObject *_python_par_case_sensitive = NULL;
    PyObject *_python_par_defaultfmt = NULL;
    PyObject *_python_par_unpack = NULL;
    PyObject *_python_par_usemask = NULL;
    PyObject *_python_par_loose = NULL;
    PyObject *_python_par_invalid_raise = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "genfromtxt() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_fname == key )
            {
                assert( _python_par_fname == NULL );
                _python_par_fname = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_dtype == key )
            {
                assert( _python_par_dtype == NULL );
                _python_par_dtype = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_comments == key )
            {
                assert( _python_par_comments == NULL );
                _python_par_comments = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_delimiter == key )
            {
                assert( _python_par_delimiter == NULL );
                _python_par_delimiter = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_skiprows == key )
            {
                assert( _python_par_skiprows == NULL );
                _python_par_skiprows = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_skip_header == key )
            {
                assert( _python_par_skip_header == NULL );
                _python_par_skip_header = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_skip_footer == key )
            {
                assert( _python_par_skip_footer == NULL );
                _python_par_skip_footer = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_converters == key )
            {
                assert( _python_par_converters == NULL );
                _python_par_converters = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_missing == key )
            {
                assert( _python_par_missing == NULL );
                _python_par_missing = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_missing_values == key )
            {
                assert( _python_par_missing_values == NULL );
                _python_par_missing_values = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_filling_values == key )
            {
                assert( _python_par_filling_values == NULL );
                _python_par_filling_values = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_usecols == key )
            {
                assert( _python_par_usecols == NULL );
                _python_par_usecols = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_names == key )
            {
                assert( _python_par_names == NULL );
                _python_par_names = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_excludelist == key )
            {
                assert( _python_par_excludelist == NULL );
                _python_par_excludelist = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_deletechars == key )
            {
                assert( _python_par_deletechars == NULL );
                _python_par_deletechars = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_replace_space == key )
            {
                assert( _python_par_replace_space == NULL );
                _python_par_replace_space = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_autostrip == key )
            {
                assert( _python_par_autostrip == NULL );
                _python_par_autostrip = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_case_sensitive == key )
            {
                assert( _python_par_case_sensitive == NULL );
                _python_par_case_sensitive = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_defaultfmt == key )
            {
                assert( _python_par_defaultfmt == NULL );
                _python_par_defaultfmt = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_unpack == key )
            {
                assert( _python_par_unpack == NULL );
                _python_par_unpack = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_usemask == key )
            {
                assert( _python_par_usemask == NULL );
                _python_par_usemask = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_loose == key )
            {
                assert( _python_par_loose == NULL );
                _python_par_loose = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_invalid_raise == key )
            {
                assert( _python_par_invalid_raise == NULL );
                _python_par_invalid_raise = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_fname, key ) == 1 )
            {
                assert( _python_par_fname == NULL );
                _python_par_fname = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_dtype, key ) == 1 )
            {
                assert( _python_par_dtype == NULL );
                _python_par_dtype = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_comments, key ) == 1 )
            {
                assert( _python_par_comments == NULL );
                _python_par_comments = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_delimiter, key ) == 1 )
            {
                assert( _python_par_delimiter == NULL );
                _python_par_delimiter = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_skiprows, key ) == 1 )
            {
                assert( _python_par_skiprows == NULL );
                _python_par_skiprows = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_skip_header, key ) == 1 )
            {
                assert( _python_par_skip_header == NULL );
                _python_par_skip_header = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_skip_footer, key ) == 1 )
            {
                assert( _python_par_skip_footer == NULL );
                _python_par_skip_footer = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_converters, key ) == 1 )
            {
                assert( _python_par_converters == NULL );
                _python_par_converters = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_missing, key ) == 1 )
            {
                assert( _python_par_missing == NULL );
                _python_par_missing = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_missing_values, key ) == 1 )
            {
                assert( _python_par_missing_values == NULL );
                _python_par_missing_values = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_filling_values, key ) == 1 )
            {
                assert( _python_par_filling_values == NULL );
                _python_par_filling_values = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_usecols, key ) == 1 )
            {
                assert( _python_par_usecols == NULL );
                _python_par_usecols = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_names, key ) == 1 )
            {
                assert( _python_par_names == NULL );
                _python_par_names = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_excludelist, key ) == 1 )
            {
                assert( _python_par_excludelist == NULL );
                _python_par_excludelist = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_deletechars, key ) == 1 )
            {
                assert( _python_par_deletechars == NULL );
                _python_par_deletechars = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_replace_space, key ) == 1 )
            {
                assert( _python_par_replace_space == NULL );
                _python_par_replace_space = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_autostrip, key ) == 1 )
            {
                assert( _python_par_autostrip == NULL );
                _python_par_autostrip = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_case_sensitive, key ) == 1 )
            {
                assert( _python_par_case_sensitive == NULL );
                _python_par_case_sensitive = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_defaultfmt, key ) == 1 )
            {
                assert( _python_par_defaultfmt == NULL );
                _python_par_defaultfmt = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_unpack, key ) == 1 )
            {
                assert( _python_par_unpack == NULL );
                _python_par_unpack = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_usemask, key ) == 1 )
            {
                assert( _python_par_usemask == NULL );
                _python_par_usemask = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_loose, key ) == 1 )
            {
                assert( _python_par_loose == NULL );
                _python_par_loose = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_invalid_raise, key ) == 1 )
            {
                assert( _python_par_invalid_raise == NULL );
                _python_par_invalid_raise = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "genfromtxt() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 23 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_fname != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_fname = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_fname == NULL )
    {
        if ( 0 + self->m_defaults_given >= 23  )
        {
            _python_par_fname = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_dtype != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_dtype = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_dtype == NULL )
    {
        if ( 1 + self->m_defaults_given >= 23  )
        {
            _python_par_dtype = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_comments != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_comments = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_comments == NULL )
    {
        if ( 2 + self->m_defaults_given >= 23  )
        {
            _python_par_comments = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_delimiter != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_delimiter = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_delimiter == NULL )
    {
        if ( 3 + self->m_defaults_given >= 23  )
        {
            _python_par_delimiter = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 4 < args_given ))
    {
         if (unlikely( _python_par_skiprows != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 4 );
             goto error_exit;
         }

        _python_par_skiprows = INCREASE_REFCOUNT( args[ 4 ] );
    }
    else if ( _python_par_skiprows == NULL )
    {
        if ( 4 + self->m_defaults_given >= 23  )
        {
            _python_par_skiprows = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 4 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 5 < args_given ))
    {
         if (unlikely( _python_par_skip_header != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 5 );
             goto error_exit;
         }

        _python_par_skip_header = INCREASE_REFCOUNT( args[ 5 ] );
    }
    else if ( _python_par_skip_header == NULL )
    {
        if ( 5 + self->m_defaults_given >= 23  )
        {
            _python_par_skip_header = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 5 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 6 < args_given ))
    {
         if (unlikely( _python_par_skip_footer != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 6 );
             goto error_exit;
         }

        _python_par_skip_footer = INCREASE_REFCOUNT( args[ 6 ] );
    }
    else if ( _python_par_skip_footer == NULL )
    {
        if ( 6 + self->m_defaults_given >= 23  )
        {
            _python_par_skip_footer = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 6 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 7 < args_given ))
    {
         if (unlikely( _python_par_converters != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 7 );
             goto error_exit;
         }

        _python_par_converters = INCREASE_REFCOUNT( args[ 7 ] );
    }
    else if ( _python_par_converters == NULL )
    {
        if ( 7 + self->m_defaults_given >= 23  )
        {
            _python_par_converters = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 7 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 8 < args_given ))
    {
         if (unlikely( _python_par_missing != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 8 );
             goto error_exit;
         }

        _python_par_missing = INCREASE_REFCOUNT( args[ 8 ] );
    }
    else if ( _python_par_missing == NULL )
    {
        if ( 8 + self->m_defaults_given >= 23  )
        {
            _python_par_missing = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 8 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 9 < args_given ))
    {
         if (unlikely( _python_par_missing_values != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 9 );
             goto error_exit;
         }

        _python_par_missing_values = INCREASE_REFCOUNT( args[ 9 ] );
    }
    else if ( _python_par_missing_values == NULL )
    {
        if ( 9 + self->m_defaults_given >= 23  )
        {
            _python_par_missing_values = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 9 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 10 < args_given ))
    {
         if (unlikely( _python_par_filling_values != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 10 );
             goto error_exit;
         }

        _python_par_filling_values = INCREASE_REFCOUNT( args[ 10 ] );
    }
    else if ( _python_par_filling_values == NULL )
    {
        if ( 10 + self->m_defaults_given >= 23  )
        {
            _python_par_filling_values = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 10 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 11 < args_given ))
    {
         if (unlikely( _python_par_usecols != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 11 );
             goto error_exit;
         }

        _python_par_usecols = INCREASE_REFCOUNT( args[ 11 ] );
    }
    else if ( _python_par_usecols == NULL )
    {
        if ( 11 + self->m_defaults_given >= 23  )
        {
            _python_par_usecols = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 11 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 12 < args_given ))
    {
         if (unlikely( _python_par_names != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 12 );
             goto error_exit;
         }

        _python_par_names = INCREASE_REFCOUNT( args[ 12 ] );
    }
    else if ( _python_par_names == NULL )
    {
        if ( 12 + self->m_defaults_given >= 23  )
        {
            _python_par_names = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 12 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 13 < args_given ))
    {
         if (unlikely( _python_par_excludelist != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 13 );
             goto error_exit;
         }

        _python_par_excludelist = INCREASE_REFCOUNT( args[ 13 ] );
    }
    else if ( _python_par_excludelist == NULL )
    {
        if ( 13 + self->m_defaults_given >= 23  )
        {
            _python_par_excludelist = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 13 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 14 < args_given ))
    {
         if (unlikely( _python_par_deletechars != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 14 );
             goto error_exit;
         }

        _python_par_deletechars = INCREASE_REFCOUNT( args[ 14 ] );
    }
    else if ( _python_par_deletechars == NULL )
    {
        if ( 14 + self->m_defaults_given >= 23  )
        {
            _python_par_deletechars = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 14 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 15 < args_given ))
    {
         if (unlikely( _python_par_replace_space != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 15 );
             goto error_exit;
         }

        _python_par_replace_space = INCREASE_REFCOUNT( args[ 15 ] );
    }
    else if ( _python_par_replace_space == NULL )
    {
        if ( 15 + self->m_defaults_given >= 23  )
        {
            _python_par_replace_space = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 15 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 16 < args_given ))
    {
         if (unlikely( _python_par_autostrip != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 16 );
             goto error_exit;
         }

        _python_par_autostrip = INCREASE_REFCOUNT( args[ 16 ] );
    }
    else if ( _python_par_autostrip == NULL )
    {
        if ( 16 + self->m_defaults_given >= 23  )
        {
            _python_par_autostrip = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 16 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 17 < args_given ))
    {
         if (unlikely( _python_par_case_sensitive != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 17 );
             goto error_exit;
         }

        _python_par_case_sensitive = INCREASE_REFCOUNT( args[ 17 ] );
    }
    else if ( _python_par_case_sensitive == NULL )
    {
        if ( 17 + self->m_defaults_given >= 23  )
        {
            _python_par_case_sensitive = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 17 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 18 < args_given ))
    {
         if (unlikely( _python_par_defaultfmt != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 18 );
             goto error_exit;
         }

        _python_par_defaultfmt = INCREASE_REFCOUNT( args[ 18 ] );
    }
    else if ( _python_par_defaultfmt == NULL )
    {
        if ( 18 + self->m_defaults_given >= 23  )
        {
            _python_par_defaultfmt = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 18 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 19 < args_given ))
    {
         if (unlikely( _python_par_unpack != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 19 );
             goto error_exit;
         }

        _python_par_unpack = INCREASE_REFCOUNT( args[ 19 ] );
    }
    else if ( _python_par_unpack == NULL )
    {
        if ( 19 + self->m_defaults_given >= 23  )
        {
            _python_par_unpack = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 19 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 20 < args_given ))
    {
         if (unlikely( _python_par_usemask != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 20 );
             goto error_exit;
         }

        _python_par_usemask = INCREASE_REFCOUNT( args[ 20 ] );
    }
    else if ( _python_par_usemask == NULL )
    {
        if ( 20 + self->m_defaults_given >= 23  )
        {
            _python_par_usemask = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 20 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 21 < args_given ))
    {
         if (unlikely( _python_par_loose != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 21 );
             goto error_exit;
         }

        _python_par_loose = INCREASE_REFCOUNT( args[ 21 ] );
    }
    else if ( _python_par_loose == NULL )
    {
        if ( 21 + self->m_defaults_given >= 23  )
        {
            _python_par_loose = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 21 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 22 < args_given ))
    {
         if (unlikely( _python_par_invalid_raise != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 22 );
             goto error_exit;
         }

        _python_par_invalid_raise = INCREASE_REFCOUNT( args[ 22 ] );
    }
    else if ( _python_par_invalid_raise == NULL )
    {
        if ( 22 + self->m_defaults_given >= 23  )
        {
            _python_par_invalid_raise = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 22 - 23 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_fname == NULL || _python_par_dtype == NULL || _python_par_comments == NULL || _python_par_delimiter == NULL || _python_par_skiprows == NULL || _python_par_skip_header == NULL || _python_par_skip_footer == NULL || _python_par_converters == NULL || _python_par_missing == NULL || _python_par_missing_values == NULL || _python_par_filling_values == NULL || _python_par_usecols == NULL || _python_par_names == NULL || _python_par_excludelist == NULL || _python_par_deletechars == NULL || _python_par_replace_space == NULL || _python_par_autostrip == NULL || _python_par_case_sensitive == NULL || _python_par_defaultfmt == NULL || _python_par_unpack == NULL || _python_par_usemask == NULL || _python_par_loose == NULL || _python_par_invalid_raise == NULL ))
    {
        PyObject *values[] = { _python_par_fname, _python_par_dtype, _python_par_comments, _python_par_delimiter, _python_par_skiprows, _python_par_skip_header, _python_par_skip_footer, _python_par_converters, _python_par_missing, _python_par_missing_values, _python_par_filling_values, _python_par_usecols, _python_par_names, _python_par_excludelist, _python_par_deletechars, _python_par_replace_space, _python_par_autostrip, _python_par_case_sensitive, _python_par_defaultfmt, _python_par_unpack, _python_par_usemask, _python_par_loose, _python_par_invalid_raise };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_14_genfromtxt_of_module_numpy$lib$npyio( self, _python_par_fname, _python_par_dtype, _python_par_comments, _python_par_delimiter, _python_par_skiprows, _python_par_skip_header, _python_par_skip_footer, _python_par_converters, _python_par_missing, _python_par_missing_values, _python_par_filling_values, _python_par_usecols, _python_par_names, _python_par_excludelist, _python_par_deletechars, _python_par_replace_space, _python_par_autostrip, _python_par_case_sensitive, _python_par_defaultfmt, _python_par_unpack, _python_par_usemask, _python_par_loose, _python_par_invalid_raise );

error_exit:;

    Py_XDECREF( _python_par_fname );
    Py_XDECREF( _python_par_dtype );
    Py_XDECREF( _python_par_comments );
    Py_XDECREF( _python_par_delimiter );
    Py_XDECREF( _python_par_skiprows );
    Py_XDECREF( _python_par_skip_header );
    Py_XDECREF( _python_par_skip_footer );
    Py_XDECREF( _python_par_converters );
    Py_XDECREF( _python_par_missing );
    Py_XDECREF( _python_par_missing_values );
    Py_XDECREF( _python_par_filling_values );
    Py_XDECREF( _python_par_usecols );
    Py_XDECREF( _python_par_names );
    Py_XDECREF( _python_par_excludelist );
    Py_XDECREF( _python_par_deletechars );
    Py_XDECREF( _python_par_replace_space );
    Py_XDECREF( _python_par_autostrip );
    Py_XDECREF( _python_par_case_sensitive );
    Py_XDECREF( _python_par_defaultfmt );
    Py_XDECREF( _python_par_unpack );
    Py_XDECREF( _python_par_usemask );
    Py_XDECREF( _python_par_loose );
    Py_XDECREF( _python_par_invalid_raise );

    return NULL;
}

static PyObject *dparse_function_14_genfromtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 23 )
    {
        return impl_function_14_genfromtxt_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), INCREASE_REFCOUNT( args[ 7 ] ), INCREASE_REFCOUNT( args[ 8 ] ), INCREASE_REFCOUNT( args[ 9 ] ), INCREASE_REFCOUNT( args[ 10 ] ), INCREASE_REFCOUNT( args[ 11 ] ), INCREASE_REFCOUNT( args[ 12 ] ), INCREASE_REFCOUNT( args[ 13 ] ), INCREASE_REFCOUNT( args[ 14 ] ), INCREASE_REFCOUNT( args[ 15 ] ), INCREASE_REFCOUNT( args[ 16 ] ), INCREASE_REFCOUNT( args[ 17 ] ), INCREASE_REFCOUNT( args[ 18 ] ), INCREASE_REFCOUNT( args[ 19 ] ), INCREASE_REFCOUNT( args[ 20 ] ), INCREASE_REFCOUNT( args[ 21 ] ), INCREASE_REFCOUNT( args[ 22 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_14_genfromtxt_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_genexpr_1_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectSharedLocalVariable closure_i;
    PyObjectLocalVariable closure___iterator;
    PyObjectLocalVariable closure_row;
    PyObjectTempVariable closure_iter_value_0;
};

static void _context_generator_genexpr_1_of_function_14_genfromtxt_of_module_numpy$lib$npyio_destructor( void *context_voidptr )
{
    _context_generator_genexpr_1_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t *_python_context = (struct _context_generator_genexpr_1_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t *)context_voidptr;

    delete _python_context;
}

#ifdef _NUITKA_MAKECONTEXT_INTS
static void genexpr_1_of_function_14_genfromtxt_of_module_numpy$lib$npyio_context( int generator_address_1, int generator_address_2 )
{
    // Restore the pointer from ints should it be necessary, often it can be
    // directly received.
    int generator_addresses[2] = {
        generator_address_1,
        generator_address_2
    };

    Nuitka_GeneratorObject *generator = (Nuitka_GeneratorObject *)*(uintptr_t *)&generator_addresses[0];
#else
static void genexpr_1_of_function_14_genfromtxt_of_module_numpy$lib$npyio_context( Nuitka_GeneratorObject *generator )
{
#endif

    assertObject( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Make context accessible if one is used.

    NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_1_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t *_python_context = (_context_generator_genexpr_1_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t *)generator->m_context;


    // Local variable inits
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    int tmp_tried_lineno_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    PyObject *tmp_yield_1;

    // Actual function code.
    PyFrameObject *frame_function = MAKE_FRAME( codeobj_7cd575dd0cf23799db8ace618049f78c, module_numpy$lib$npyio );

    Py_INCREF( frame_function );
    generator->m_frame = frame_function;
#if PYTHON_VERSION >= 340
    frame_function->f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->f_back );

    generator->m_frame->f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->f_back );

    PyThreadState_GET()->frame = generator->m_frame;

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code
    // Throwing into unstarted generators is possible. As they don't stand any
    // chance to deal with them, we might as well create traceback on the
    // outside,
    if ( generator->m_exception_type )
    {
        generator->m_yielded = NULL;

        exception_type = generator->m_exception_type;
        generator->m_exception_type = NULL;

        exception_value = generator->m_exception_value;
        generator->m_exception_value = NULL;

        exception_tb = generator->m_exception_tb;;
        generator->m_exception_tb = NULL;

        if (exception_tb == NULL)
        {
            goto try_finally_handler_1;
        }
        else
        {
            goto function_exception_exit;
        }
    }

    loop_start_1:;
    tmp_next_source_1 = _python_context->closure___iterator.object;

    if ( tmp_next_source_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8745 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1705;
        goto try_finally_handler_1;
    }

    tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_1 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1705;
            goto try_finally_handler_1;
        }
    }

    if (_python_context->closure_iter_value_0.object == NULL)
    {
        _python_context->closure_iter_value_0.object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = _python_context->closure_iter_value_0.object;
        _python_context->closure_iter_value_0.object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    tmp_assign_source_2 = _python_context->closure_iter_value_0.object;

    if (_python_context->closure_row.object == NULL)
    {
        _python_context->closure_row.object = INCREASE_REFCOUNT( tmp_assign_source_2 );
    }
    else
    {
        PyObject *old = _python_context->closure_row.object;
        _python_context->closure_row.object = INCREASE_REFCOUNT( tmp_assign_source_2 );
        Py_DECREF( old );
    }
    tmp_subscr_target_1 = _python_context->closure_row.object;

    tmp_subscr_subscript_1 = _python_context->closure_i.storage->object;

    if ( tmp_subscr_subscript_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1705;
        goto try_finally_handler_1;
    }

    tmp_len_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_len_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1705;
        goto try_finally_handler_1;
    }
    tmp_yield_1 = BUILTIN_LEN( tmp_len_arg_1 );
    Py_DECREF( tmp_len_arg_1 );
    if ( tmp_yield_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1705;
        goto try_finally_handler_1;
    }
    tmp_unused = YIELD( generator, tmp_yield_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1705;
        goto try_finally_handler_1;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1705;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( _python_context->closure_iter_value_0.object );
    _python_context->closure_iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif

    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((_python_context->closure_row.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_row,
            _python_context->closure_row.object
        );

    }
    if ((_python_context->closure_i.storage != NULL && _python_context->closure_i.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_i,
            _python_context->closure_i.storage->object
        );

    }
    if ((_python_context->closure___iterator.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___iterator,
            _python_context->closure___iterator.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


#if PYTHON_VERSION > 300
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    Py_DECREF( frame_function );
    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    PyErr_Restore( INCREASE_REFCOUNT( PyExc_StopIteration ), NULL, NULL );

    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );

    // The above won't return, but we need to make it clear to the compiler
    // as well, or else it will complain and/or generate inferior code.
    assert(false);
    return;
function_exception_exit:
    assert( exception_type );
    assert( exception_tb );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );

}
static PyObject *impl_genexpr_1_of_function_14_genfromtxt_of_module_numpy$lib$npyio( PyObject *_python_par___iterator, PyObjectSharedLocalVariable& closure_i )
{
    // Create context if any
    struct _context_generator_genexpr_1_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t *_python_context = new _context_generator_genexpr_1_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t;
    _python_context->closure_i.shareWith( closure_i );

        PyObject *result = Nuitka_Generator_New(
            genexpr_1_of_function_14_genfromtxt_of_module_numpy$lib$npyio_context,
            const_str_angle_genexpr,
            codeobj_ef0601944f8b0f4de98e3347ab8a2488,
            _python_context,
            _context_generator_genexpr_1_of_function_14_genfromtxt_of_module_numpy$lib$npyio_destructor
        );

    if (unlikely( result == NULL ))
    {
        PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
        return NULL;
    }

    // Copy to context parameter values and closured variables if any.
    _python_context->closure___iterator.object = _python_par___iterator;

    return result;
}



struct _context_generator_genexpr_2_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalVariable closure___iterator;
    PyObjectLocalVariable closure__;
    PyObjectTempVariable closure_iter_value_0;
};

static void _context_generator_genexpr_2_of_function_14_genfromtxt_of_module_numpy$lib$npyio_destructor( void *context_voidptr )
{
    _context_generator_genexpr_2_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t *_python_context = (struct _context_generator_genexpr_2_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t *)context_voidptr;

    delete _python_context;
}

#ifdef _NUITKA_MAKECONTEXT_INTS
static void genexpr_2_of_function_14_genfromtxt_of_module_numpy$lib$npyio_context( int generator_address_1, int generator_address_2 )
{
    // Restore the pointer from ints should it be necessary, often it can be
    // directly received.
    int generator_addresses[2] = {
        generator_address_1,
        generator_address_2
    };

    Nuitka_GeneratorObject *generator = (Nuitka_GeneratorObject *)*(uintptr_t *)&generator_addresses[0];
#else
static void genexpr_2_of_function_14_genfromtxt_of_module_numpy$lib$npyio_context( Nuitka_GeneratorObject *generator )
{
#endif

    assertObject( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Make context accessible if one is used.

    NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_2_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t *_python_context = (_context_generator_genexpr_2_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t *)generator->m_context;


    // Local variable inits
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_next_source_1;
    PyObject *tmp_source_name_1;
    int tmp_tried_lineno_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    PyObject *tmp_yield_1;

    // Actual function code.
    PyFrameObject *frame_function = MAKE_FRAME( codeobj_02213ff35517b25d5dddf34dcb69999c, module_numpy$lib$npyio );

    Py_INCREF( frame_function );
    generator->m_frame = frame_function;
#if PYTHON_VERSION >= 340
    frame_function->f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->f_back );

    generator->m_frame->f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->f_back );

    PyThreadState_GET()->frame = generator->m_frame;

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code
    // Throwing into unstarted generators is possible. As they don't stand any
    // chance to deal with them, we might as well create traceback on the
    // outside,
    if ( generator->m_exception_type )
    {
        generator->m_yielded = NULL;

        exception_type = generator->m_exception_type;
        generator->m_exception_type = NULL;

        exception_value = generator->m_exception_value;
        generator->m_exception_value = NULL;

        exception_tb = generator->m_exception_tb;;
        generator->m_exception_tb = NULL;

        if (exception_tb == NULL)
        {
            goto try_finally_handler_1;
        }
        else
        {
            goto function_exception_exit;
        }
    }

    loop_start_1:;
    tmp_next_source_1 = _python_context->closure___iterator.object;

    if ( tmp_next_source_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8745 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1734;
        goto try_finally_handler_1;
    }

    tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_1 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1734;
            goto try_finally_handler_1;
        }
    }

    if (_python_context->closure_iter_value_0.object == NULL)
    {
        _python_context->closure_iter_value_0.object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = _python_context->closure_iter_value_0.object;
        _python_context->closure_iter_value_0.object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    tmp_assign_source_2 = _python_context->closure_iter_value_0.object;

    if (_python_context->closure__.object == NULL)
    {
        _python_context->closure__.object = INCREASE_REFCOUNT( tmp_assign_source_2 );
    }
    else
    {
        PyObject *old = _python_context->closure__.object;
        _python_context->closure__.object = INCREASE_REFCOUNT( tmp_assign_source_2 );
        Py_DECREF( old );
    }
    tmp_source_name_1 = _python_context->closure__.object;

    tmp_yield_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_char );
    if ( tmp_yield_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1734;
        goto try_finally_handler_1;
    }
    tmp_unused = YIELD( generator, tmp_yield_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1734;
        goto try_finally_handler_1;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1734;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( _python_context->closure_iter_value_0.object );
    _python_context->closure_iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif

    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((_python_context->closure__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__,
            _python_context->closure__.object
        );

    }
    if ((_python_context->closure___iterator.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___iterator,
            _python_context->closure___iterator.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


#if PYTHON_VERSION > 300
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    Py_DECREF( frame_function );
    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    PyErr_Restore( INCREASE_REFCOUNT( PyExc_StopIteration ), NULL, NULL );

    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );

    // The above won't return, but we need to make it clear to the compiler
    // as well, or else it will complain and/or generate inferior code.
    assert(false);
    return;
function_exception_exit:
    assert( exception_type );
    assert( exception_tb );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );

}
static PyObject *impl_genexpr_2_of_function_14_genfromtxt_of_module_numpy$lib$npyio( PyObject *_python_par___iterator )
{
    // Create context if any
    struct _context_generator_genexpr_2_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t *_python_context = new _context_generator_genexpr_2_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t;

        PyObject *result = Nuitka_Generator_New(
            genexpr_2_of_function_14_genfromtxt_of_module_numpy$lib$npyio_context,
            const_str_angle_genexpr,
            codeobj_dbd2066b7134629e6db54b8f4bd294e6,
            _python_context,
            _context_generator_genexpr_2_of_function_14_genfromtxt_of_module_numpy$lib$npyio_destructor
        );

    if (unlikely( result == NULL ))
    {
        PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
        return NULL;
    }

    // Copy to context parameter values and closured variables if any.
    _python_context->closure___iterator.object = _python_par___iterator;

    return result;
}



struct _context_generator_genexpr_3_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectSharedLocalVariable closure_i;
    PyObjectLocalVariable closure___iterator;
    PyObjectLocalVariable closure_row;
    PyObjectTempVariable closure_iter_value_0;
};

static void _context_generator_genexpr_3_of_function_14_genfromtxt_of_module_numpy$lib$npyio_destructor( void *context_voidptr )
{
    _context_generator_genexpr_3_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t *_python_context = (struct _context_generator_genexpr_3_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t *)context_voidptr;

    delete _python_context;
}

#ifdef _NUITKA_MAKECONTEXT_INTS
static void genexpr_3_of_function_14_genfromtxt_of_module_numpy$lib$npyio_context( int generator_address_1, int generator_address_2 )
{
    // Restore the pointer from ints should it be necessary, often it can be
    // directly received.
    int generator_addresses[2] = {
        generator_address_1,
        generator_address_2
    };

    Nuitka_GeneratorObject *generator = (Nuitka_GeneratorObject *)*(uintptr_t *)&generator_addresses[0];
#else
static void genexpr_3_of_function_14_genfromtxt_of_module_numpy$lib$npyio_context( Nuitka_GeneratorObject *generator )
{
#endif

    assertObject( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Make context accessible if one is used.

    NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_3_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t *_python_context = (_context_generator_genexpr_3_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t *)generator->m_context;


    // Local variable inits
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    int tmp_tried_lineno_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    PyObject *tmp_yield_1;

    // Actual function code.
    PyFrameObject *frame_function = MAKE_FRAME( codeobj_098a49e93e8df74bd2d7adc9eb59f5b5, module_numpy$lib$npyio );

    Py_INCREF( frame_function );
    generator->m_frame = frame_function;
#if PYTHON_VERSION >= 340
    frame_function->f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->f_back );

    generator->m_frame->f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->f_back );

    PyThreadState_GET()->frame = generator->m_frame;

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code
    // Throwing into unstarted generators is possible. As they don't stand any
    // chance to deal with them, we might as well create traceback on the
    // outside,
    if ( generator->m_exception_type )
    {
        generator->m_yielded = NULL;

        exception_type = generator->m_exception_type;
        generator->m_exception_type = NULL;

        exception_value = generator->m_exception_value;
        generator->m_exception_value = NULL;

        exception_tb = generator->m_exception_tb;;
        generator->m_exception_tb = NULL;

        if (exception_tb == NULL)
        {
            goto try_finally_handler_1;
        }
        else
        {
            goto function_exception_exit;
        }
    }

    loop_start_1:;
    tmp_next_source_1 = _python_context->closure___iterator.object;

    if ( tmp_next_source_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8745 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1763;
        goto try_finally_handler_1;
    }

    tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_1 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1763;
            goto try_finally_handler_1;
        }
    }

    if (_python_context->closure_iter_value_0.object == NULL)
    {
        _python_context->closure_iter_value_0.object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = _python_context->closure_iter_value_0.object;
        _python_context->closure_iter_value_0.object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    tmp_assign_source_2 = _python_context->closure_iter_value_0.object;

    if (_python_context->closure_row.object == NULL)
    {
        _python_context->closure_row.object = INCREASE_REFCOUNT( tmp_assign_source_2 );
    }
    else
    {
        PyObject *old = _python_context->closure_row.object;
        _python_context->closure_row.object = INCREASE_REFCOUNT( tmp_assign_source_2 );
        Py_DECREF( old );
    }
    tmp_subscr_target_1 = _python_context->closure_row.object;

    tmp_subscr_subscript_1 = _python_context->closure_i.storage->object;

    if ( tmp_subscr_subscript_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1763;
        goto try_finally_handler_1;
    }

    tmp_len_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_len_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1763;
        goto try_finally_handler_1;
    }
    tmp_yield_1 = BUILTIN_LEN( tmp_len_arg_1 );
    Py_DECREF( tmp_len_arg_1 );
    if ( tmp_yield_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1763;
        goto try_finally_handler_1;
    }
    tmp_unused = YIELD( generator, tmp_yield_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1763;
        goto try_finally_handler_1;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1763;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( _python_context->closure_iter_value_0.object );
    _python_context->closure_iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif

    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((_python_context->closure_row.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_row,
            _python_context->closure_row.object
        );

    }
    if ((_python_context->closure_i.storage != NULL && _python_context->closure_i.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_i,
            _python_context->closure_i.storage->object
        );

    }
    if ((_python_context->closure___iterator.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___iterator,
            _python_context->closure___iterator.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


#if PYTHON_VERSION > 300
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    Py_DECREF( frame_function );
    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    PyErr_Restore( INCREASE_REFCOUNT( PyExc_StopIteration ), NULL, NULL );

    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );

    // The above won't return, but we need to make it clear to the compiler
    // as well, or else it will complain and/or generate inferior code.
    assert(false);
    return;
function_exception_exit:
    assert( exception_type );
    assert( exception_tb );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );

}
static PyObject *impl_genexpr_3_of_function_14_genfromtxt_of_module_numpy$lib$npyio( PyObject *_python_par___iterator, PyObjectSharedLocalVariable& closure_i )
{
    // Create context if any
    struct _context_generator_genexpr_3_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t *_python_context = new _context_generator_genexpr_3_of_function_14_genfromtxt_of_module_numpy$lib$npyio_t;
    _python_context->closure_i.shareWith( closure_i );

        PyObject *result = Nuitka_Generator_New(
            genexpr_3_of_function_14_genfromtxt_of_module_numpy$lib$npyio_context,
            const_str_angle_genexpr,
            codeobj_994cbb7e39dde48b4f4f67b96c496c35,
            _python_context,
            _context_generator_genexpr_3_of_function_14_genfromtxt_of_module_numpy$lib$npyio_destructor
        );

    if (unlikely( result == NULL ))
    {
        PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
        return NULL;
    }

    // Copy to context parameter values and closured variables if any.
    _python_context->closure___iterator.object = _python_par___iterator;

    return result;
}


static PyObject *impl_function_15_ndfromtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_fname, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_fname; par_fname.object = _python_par_fname;
    PyObjectLocalVariable par_kwargs; par_kwargs.object = _python_par_kwargs;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_frame_locals;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_5d169bcdba225fa472d75e5cd3927a51, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_ass_subvalue_1 = Py_False;
    tmp_ass_subscribed_1 = par_kwargs.object;

    if ( tmp_ass_subscribed_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1814;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_1 = const_str_plain_usemask;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1814;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_genfromtxt );

    if (unlikely( tmp_dircall_arg1_1 == NULL ))
    {
        tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_genfromtxt );
    }

    if ( tmp_dircall_arg1_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 174230 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1815;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg2_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_fname.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg2_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1815;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 0, tmp_tuple_element_1 );
    tmp_dircall_arg3_1 = par_kwargs.object;

    if ( tmp_dircall_arg3_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg2_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1815;
        goto frame_exception_exit_1;
    }

    tmp_return_value = impl_function_4_complex_call_helper_pos_star_dict_of_module___internal__( INCREASE_REFCOUNT( tmp_dircall_arg1_1 ), tmp_dircall_arg2_1, INCREASE_REFCOUNT( tmp_dircall_arg3_1 ) );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1815;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_fname.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fname,
            par_fname.object
        );

    }
    if ((par_kwargs.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kwargs,
            par_kwargs.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_15_ndfromtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_fname = NULL;
    PyObject *_python_par_kwargs = NULL;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "ndfromtxt() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "ndfromtxt() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "ndfromtxt() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument fname was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, const_str_plain_fname );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_fname == NULL );

            _python_par_fname = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, const_str_plain_fname );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_fname != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_fname = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_fname == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_fname = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_fname == NULL ))
    {
        PyObject *values[] = { _python_par_fname };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_15_ndfromtxt_of_module_numpy$lib$npyio( self, _python_par_fname, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_fname );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_15_ndfromtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_15_ndfromtxt_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_15_ndfromtxt_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_16_mafromtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_fname, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_fname; par_fname.object = _python_par_fname;
    PyObjectLocalVariable par_kwargs; par_kwargs.object = _python_par_kwargs;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_frame_locals;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_7d110c47319ed48ac6b57e13b717db91, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_ass_subvalue_1 = Py_True;
    tmp_ass_subscribed_1 = par_kwargs.object;

    if ( tmp_ass_subscribed_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1831;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_1 = const_str_plain_usemask;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1831;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_genfromtxt );

    if (unlikely( tmp_dircall_arg1_1 == NULL ))
    {
        tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_genfromtxt );
    }

    if ( tmp_dircall_arg1_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 174230 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1832;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg2_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_fname.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg2_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1832;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 0, tmp_tuple_element_1 );
    tmp_dircall_arg3_1 = par_kwargs.object;

    if ( tmp_dircall_arg3_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg2_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1832;
        goto frame_exception_exit_1;
    }

    tmp_return_value = impl_function_4_complex_call_helper_pos_star_dict_of_module___internal__( INCREASE_REFCOUNT( tmp_dircall_arg1_1 ), tmp_dircall_arg2_1, INCREASE_REFCOUNT( tmp_dircall_arg3_1 ) );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1832;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_fname.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fname,
            par_fname.object
        );

    }
    if ((par_kwargs.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kwargs,
            par_kwargs.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_16_mafromtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_fname = NULL;
    PyObject *_python_par_kwargs = NULL;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "mafromtxt() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "mafromtxt() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "mafromtxt() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument fname was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, const_str_plain_fname );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_fname == NULL );

            _python_par_fname = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, const_str_plain_fname );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_fname != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_fname = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_fname == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_fname = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_fname == NULL ))
    {
        PyObject *values[] = { _python_par_fname };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_16_mafromtxt_of_module_numpy$lib$npyio( self, _python_par_fname, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_fname );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_16_mafromtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_16_mafromtxt_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_16_mafromtxt_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_17_recfromtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_fname, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_fname; par_fname.object = _python_par_fname;
    PyObjectLocalVariable par_kwargs; par_kwargs.object = _python_par_kwargs;
    PyObjectLocalVariable var_usemask;
    PyObjectLocalVariable var_output;
    PyObjectLocalVariable var_MaskedRecords;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_2b550bb6692c0a96e4cf4c0fc6048fa0, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_kwargs.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1856;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_update );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1856;
        goto frame_exception_exit_1;
    }
    tmp_call_kw_1 = _PyDict_NewPresized( 1 );
    tmp_source_name_2 = par_kwargs.object;

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1856;
        goto frame_exception_exit_1;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_get );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_kw_1 );

        frame_function->f_lineno = 1856;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_str_plain_dtype;
    tmp_call_arg_element_2 = Py_None;
    frame_function->f_lineno = 1856;
    tmp_dict_value_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_2, tmp_call_arg_element_1, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_kw_1 );

        frame_function->f_lineno = 1856;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    frame_function->f_lineno = 1856;
    tmp_unused = CALL_FUNCTION_WITH_KEYARGS( tmp_called_1, tmp_call_kw_1 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1856;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_3 = par_kwargs.object;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1857;
        goto frame_exception_exit_1;
    }

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_get );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1857;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_3 = const_str_plain_usemask;
    tmp_call_arg_element_4 = Py_False;
    frame_function->f_lineno = 1857;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_3, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1857;
        goto frame_exception_exit_1;
    }
    assert( var_usemask.object == NULL );
    var_usemask.object = tmp_assign_source_1;

    tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_genfromtxt );

    if (unlikely( tmp_dircall_arg1_1 == NULL ))
    {
        tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_genfromtxt );
    }

    if ( tmp_dircall_arg1_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 174230 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1858;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg2_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_fname.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg2_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1858;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 0, tmp_tuple_element_1 );
    tmp_dircall_arg3_1 = par_kwargs.object;

    if ( tmp_dircall_arg3_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg2_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1858;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_2 = impl_function_4_complex_call_helper_pos_star_dict_of_module___internal__( INCREASE_REFCOUNT( tmp_dircall_arg1_1 ), tmp_dircall_arg2_1, INCREASE_REFCOUNT( tmp_dircall_arg3_1 ) );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1858;
        goto frame_exception_exit_1;
    }
    assert( var_output.object == NULL );
    var_output.object = tmp_assign_source_2;

    tmp_cond_value_1 = var_usemask.object;

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1859;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_usemask.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_usemask,
            var_usemask.object
        );

    }
    if ((var_output.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_output,
            var_output.object
        );

    }
    if ((var_MaskedRecords.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_MaskedRecords,
            var_MaskedRecords.object
        );

    }
    if ((par_fname.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_fname,
            par_fname.object
        );

    }
    if ((par_kwargs.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_kwargs,
            par_kwargs.object
        );

    }
    frame_function->f_lineno = 1860;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_digest_9f00662a075e9a5786c0d1eee68d8c87, tmp_import_globals_1, tmp_import_locals_1, const_tuple_str_plain_MaskedRecords_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1860;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_MaskedRecords );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1860;
        goto frame_exception_exit_1;
    }
    assert( var_MaskedRecords.object == NULL );
    var_MaskedRecords.object = tmp_assign_source_3;

    tmp_source_name_4 = var_output.object;

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_view );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1861;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_5 = var_MaskedRecords.object;

    frame_function->f_lineno = 1861;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_5 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1861;
        goto frame_exception_exit_1;
    }
    assert( var_output.object != NULL );
    {
        PyObject *old = var_output.object;
        var_output.object = tmp_assign_source_4;
        Py_DECREF( old );
    }

    goto branch_end_1;
    branch_no_1:;
    tmp_source_name_5 = var_output.object;

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_view );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1863;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_6 == NULL )
    {
        Py_DECREF( tmp_called_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1863;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_6 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_recarray );
    if ( tmp_call_arg_element_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_5 );

        frame_function->f_lineno = 1863;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1863;
    tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_6 );
    Py_DECREF( tmp_called_5 );
    Py_DECREF( tmp_call_arg_element_6 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1863;
        goto frame_exception_exit_1;
    }
    assert( var_output.object != NULL );
    {
        PyObject *old = var_output.object;
        var_output.object = tmp_assign_source_5;
        Py_DECREF( old );
    }

    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_usemask.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_usemask,
            var_usemask.object
        );

    }
    if ((var_output.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_output,
            var_output.object
        );

    }
    if ((var_MaskedRecords.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_MaskedRecords,
            var_MaskedRecords.object
        );

    }
    if ((par_fname.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fname,
            par_fname.object
        );

    }
    if ((par_kwargs.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kwargs,
            par_kwargs.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = var_output.object;

    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_17_recfromtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_fname = NULL;
    PyObject *_python_par_kwargs = NULL;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "recfromtxt() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "recfromtxt() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "recfromtxt() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument fname was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, const_str_plain_fname );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_fname == NULL );

            _python_par_fname = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, const_str_plain_fname );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_fname != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_fname = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_fname == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_fname = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_fname == NULL ))
    {
        PyObject *values[] = { _python_par_fname };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_17_recfromtxt_of_module_numpy$lib$npyio( self, _python_par_fname, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_fname );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_17_recfromtxt_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_17_recfromtxt_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_17_recfromtxt_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_18_recfromcsv_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject *_python_par_fname, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_fname; par_fname.object = _python_par_fname;
    PyObjectLocalVariable par_kwargs; par_kwargs.object = _python_par_kwargs;
    PyObjectLocalVariable var_case_sensitive;
    PyObjectLocalVariable var_names;
    PyObjectLocalVariable var_usemask;
    PyObjectLocalVariable var_output;
    PyObjectLocalVariable var_MaskedRecords;
    PyObjectTempVariable tmp_or_1__value_1;
    PyObjectTempVariable tmp_or_2__value_1;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_name_from_1;
    bool tmp_is_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_6736d95c3091be0974974c9f6d8a5f9b, module_numpy$lib$npyio );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code
    tmp_assign_source_1 = NULL;
    // Tried code
    tmp_source_name_1 = par_kwargs.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1884;
        goto try_finally_handler_2;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_get );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1884;
        goto try_finally_handler_2;
    }
    tmp_call_arg_element_1 = const_str_plain_case_sensitive;
    tmp_call_arg_element_2 = const_str_plain_lower;
    frame_function->f_lineno = 1884;
    tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1884;
        goto try_finally_handler_2;
    }
    assert( tmp_or_1__value_1.object == NULL );
    tmp_or_1__value_1.object = tmp_assign_source_2;

    tmp_cond_value_1 = tmp_or_1__value_1.object;

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1884;
        goto try_finally_handler_2;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_assign_source_1 = tmp_or_1__value_1.object;

    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_assign_source_1 = NULL;
    // Tried code
    tmp_result = tmp_or_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_1__value_1.object );
        tmp_or_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_assign_source_1 = const_str_plain_lower;
    // Re-reraise as necessary after finally was executed.
    goto finally_end_1;
    finally_end_1:;
    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_1;
    }

    goto finally_end_2;
    finally_end_2:;
    assert( var_case_sensitive.object == NULL );
    var_case_sensitive.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_1__value_1.object );
    tmp_or_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto frame_exception_exit_1;
    }

    goto finally_end_3;
    finally_end_3:;
    tmp_source_name_2 = par_kwargs.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1885;
        goto frame_exception_exit_1;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_get );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1885;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_3 = const_str_plain_names;
    tmp_call_arg_element_4 = Py_True;
    frame_function->f_lineno = 1885;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_2, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1885;
        goto frame_exception_exit_1;
    }
    assert( var_names.object == NULL );
    var_names.object = tmp_assign_source_3;

    tmp_compare_left_1 = var_names.object;

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if (tmp_is_1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_assign_source_4 = Py_True;
    assert( var_names.object != NULL );
    {
        PyObject *old = var_names.object;
        var_names.object = INCREASE_REFCOUNT( tmp_assign_source_4 );
        Py_DECREF( old );
    }

    branch_no_1:;
    tmp_source_name_3 = par_kwargs.object;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1888;
        goto frame_exception_exit_1;
    }

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_update );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1888;
        goto frame_exception_exit_1;
    }
    tmp_call_kw_1 = NULL;
    // Tried code
    tmp_call_kw_1 = _PyDict_NewPresized( 4 );
    tmp_source_name_4 = par_kwargs.object;

    if ( tmp_source_name_4 == NULL )
    {
        Py_DECREF( tmp_called_3 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1888;
        goto try_finally_handler_4;
    }

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_get );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_3 );
        Py_DECREF( tmp_call_kw_1 );

        frame_function->f_lineno = 1888;
        goto try_finally_handler_4;
    }
    tmp_call_arg_element_5 = const_str_plain_update;
    tmp_call_arg_element_6 = Py_None;
    frame_function->f_lineno = 1888;
    tmp_dict_value_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_4, tmp_call_arg_element_5, tmp_call_arg_element_6 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_3 );
        Py_DECREF( tmp_call_kw_1 );

        frame_function->f_lineno = 1888;
        goto try_finally_handler_4;
    }
    tmp_dict_key_1 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    tmp_dict_value_2 = NULL;
    // Tried code
    tmp_source_name_5 = par_kwargs.object;

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_called_3 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1889;
        goto try_finally_handler_5;
    }

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_get );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_3 );
        Py_DECREF( tmp_call_kw_1 );

        frame_function->f_lineno = 1889;
        goto try_finally_handler_5;
    }
    tmp_call_arg_element_7 = const_str_plain_delimiter;
    tmp_call_arg_element_8 = const_str_chr_44;
    frame_function->f_lineno = 1889;
    tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_5, tmp_call_arg_element_7, tmp_call_arg_element_8 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_3 );
        Py_DECREF( tmp_call_kw_1 );

        frame_function->f_lineno = 1889;
        goto try_finally_handler_5;
    }
    assert( tmp_or_2__value_1.object == NULL );
    tmp_or_2__value_1.object = tmp_assign_source_5;

    tmp_cond_value_2 = tmp_or_2__value_1.object;

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_3 );
        Py_DECREF( tmp_call_kw_1 );

        frame_function->f_lineno = 1889;
        goto try_finally_handler_5;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_dict_value_2 = tmp_or_2__value_1.object;

    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_dict_value_2 = NULL;
    // Tried code
    tmp_result = tmp_or_2__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_2__value_1.object );
        tmp_or_2__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_dict_value_2 = const_str_chr_44;
    // Re-reraise as necessary after finally was executed.
    goto finally_end_4;
    finally_end_4:;
    condexpr_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto try_finally_handler_4;
    }

    goto finally_end_5;
    finally_end_5:;
    tmp_dict_key_2 = const_str_plain_delimiter;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_2, tmp_dict_value_2 );
    tmp_dict_value_3 = var_names.object;

    if ( tmp_dict_value_3 == NULL )
    {
        Py_DECREF( tmp_called_3 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1890;
        goto try_finally_handler_4;
    }

    tmp_dict_key_3 = const_str_plain_names;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_3, tmp_dict_value_3 );
    tmp_dict_value_4 = var_case_sensitive.object;

    if ( tmp_dict_value_4 == NULL )
    {
        Py_DECREF( tmp_called_3 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 156176 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1891;
        goto try_finally_handler_4;
    }

    tmp_dict_key_4 = const_str_plain_case_sensitive;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_4, tmp_dict_value_4 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_2__value_1.object );
    tmp_or_2__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto frame_exception_exit_1;
    }

    goto finally_end_6;
    finally_end_6:;
    frame_function->f_lineno = 1889;
    tmp_unused = CALL_FUNCTION_WITH_KEYARGS( tmp_called_3, tmp_call_kw_1 );
    Py_DECREF( tmp_called_3 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1889;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_6 = par_kwargs.object;

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1892;
        goto frame_exception_exit_1;
    }

    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_get );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1892;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_9 = const_str_plain_usemask;
    tmp_call_arg_element_10 = Py_False;
    frame_function->f_lineno = 1892;
    tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS2( tmp_called_6, tmp_call_arg_element_9, tmp_call_arg_element_10 );
    Py_DECREF( tmp_called_6 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1892;
        goto frame_exception_exit_1;
    }
    assert( var_usemask.object == NULL );
    var_usemask.object = tmp_assign_source_6;

    tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_genfromtxt );

    if (unlikely( tmp_dircall_arg1_1 == NULL ))
    {
        tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_genfromtxt );
    }

    if ( tmp_dircall_arg1_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 174230 ], 39, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1893;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg2_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_fname.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg2_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 52983 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1893;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 0, tmp_tuple_element_1 );
    tmp_dircall_arg3_1 = par_kwargs.object;

    if ( tmp_dircall_arg3_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg2_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1893;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_7 = impl_function_4_complex_call_helper_pos_star_dict_of_module___internal__( INCREASE_REFCOUNT( tmp_dircall_arg1_1 ), tmp_dircall_arg2_1, INCREASE_REFCOUNT( tmp_dircall_arg3_1 ) );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1893;
        goto frame_exception_exit_1;
    }
    assert( var_output.object == NULL );
    var_output.object = tmp_assign_source_7;

    tmp_cond_value_3 = var_usemask.object;

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1894;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_case_sensitive.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_case_sensitive,
            var_case_sensitive.object
        );

    }
    if ((var_names.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_names,
            var_names.object
        );

    }
    if ((var_usemask.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_usemask,
            var_usemask.object
        );

    }
    if ((var_output.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_output,
            var_output.object
        );

    }
    if ((var_MaskedRecords.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_MaskedRecords,
            var_MaskedRecords.object
        );

    }
    if ((par_fname.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_fname,
            par_fname.object
        );

    }
    if ((par_kwargs.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_kwargs,
            par_kwargs.object
        );

    }
    frame_function->f_lineno = 1895;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_digest_9f00662a075e9a5786c0d1eee68d8c87, tmp_import_globals_1, tmp_import_locals_1, const_tuple_str_plain_MaskedRecords_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1895;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_8 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_MaskedRecords );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1895;
        goto frame_exception_exit_1;
    }
    assert( var_MaskedRecords.object == NULL );
    var_MaskedRecords.object = tmp_assign_source_8;

    tmp_source_name_7 = var_output.object;

    tmp_called_7 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_view );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1896;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_11 = var_MaskedRecords.object;

    frame_function->f_lineno = 1896;
    tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_11 );
    Py_DECREF( tmp_called_7 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1896;
        goto frame_exception_exit_1;
    }
    assert( var_output.object != NULL );
    {
        PyObject *old = var_output.object;
        var_output.object = tmp_assign_source_9;
        Py_DECREF( old );
    }

    goto branch_end_2;
    branch_no_2:;
    tmp_source_name_8 = var_output.object;

    tmp_called_8 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_view );
    if ( tmp_called_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1898;
        goto frame_exception_exit_1;
    }
    tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np );

    if (unlikely( tmp_source_name_9 == NULL ))
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_np );
    }

    if ( tmp_source_name_9 == NULL )
    {
        Py_DECREF( tmp_called_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 67960 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1898;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_12 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_recarray );
    if ( tmp_call_arg_element_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_8 );

        frame_function->f_lineno = 1898;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1898;
    tmp_assign_source_10 = CALL_FUNCTION_WITH_ARGS1( tmp_called_8, tmp_call_arg_element_12 );
    Py_DECREF( tmp_called_8 );
    Py_DECREF( tmp_call_arg_element_12 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1898;
        goto frame_exception_exit_1;
    }
    assert( var_output.object != NULL );
    {
        PyObject *old = var_output.object;
        var_output.object = tmp_assign_source_10;
        Py_DECREF( old );
    }

    branch_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_case_sensitive.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_case_sensitive,
            var_case_sensitive.object
        );

    }
    if ((var_names.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_names,
            var_names.object
        );

    }
    if ((var_usemask.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_usemask,
            var_usemask.object
        );

    }
    if ((var_output.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_output,
            var_output.object
        );

    }
    if ((var_MaskedRecords.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_MaskedRecords,
            var_MaskedRecords.object
        );

    }
    if ((par_fname.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fname,
            par_fname.object
        );

    }
    if ((par_kwargs.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kwargs,
            par_kwargs.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = var_output.object;

    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_18_recfromcsv_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_fname = NULL;
    PyObject *_python_par_kwargs = NULL;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "recfromcsv() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "recfromcsv() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "recfromcsv() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument fname was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, const_str_plain_fname );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_fname == NULL );

            _python_par_fname = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, const_str_plain_fname );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_fname != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_fname = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_fname == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_fname = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_fname == NULL ))
    {
        PyObject *values[] = { _python_par_fname };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_18_recfromcsv_of_module_numpy$lib$npyio( self, _python_par_fname, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_fname );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_18_recfromcsv_of_module_numpy$lib$npyio( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_18_recfromcsv_of_module_numpy$lib$npyio( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_18_recfromcsv_of_module_numpy$lib$npyio( self, args, size, NULL );
        return result;
    }

}




static PyObject *MAKE_FUNCTION_function_10__getconv_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10__getconv_of_module_numpy$lib$npyio,
        dparse_function_10__getconv_of_module_numpy$lib$npyio,
        const_str_plain__getconv,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0f6e2c08eb8c6f5af6d843834a026f4b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_10_keys_of_class_4_NpzFile_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10_keys_of_class_4_NpzFile_of_module_numpy$lib$npyio,
        dparse_function_10_keys_of_class_4_NpzFile_of_module_numpy$lib$npyio,
        const_str_plain_keys,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ffa72049d15f6d4e30d05cf7a74d3e1d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_552fee314d0fde6a1757bedc08c1838f
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11_iterkeys_of_class_4_NpzFile_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_11_iterkeys_of_class_4_NpzFile_of_module_numpy$lib$npyio,
        dparse_function_11_iterkeys_of_class_4_NpzFile_of_module_numpy$lib$npyio,
        const_str_plain_iterkeys,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_b9724683be823662c2182c02732795c7,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_067c12c909de11fd08597d6477b35edd
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11_loadtxt_of_module_numpy$lib$npyio( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_11_loadtxt_of_module_numpy$lib$npyio,
        dparse_function_11_loadtxt_of_module_numpy$lib$npyio,
        const_str_plain_loadtxt,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_9c899373730de2c0b406cab7b1cfde05,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_2a8a322c1b29f4eba18e44ea881f3f1e
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_12___contains___of_class_4_NpzFile_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_12___contains___of_class_4_NpzFile_of_module_numpy$lib$npyio,
        dparse_function_12___contains___of_class_4_NpzFile_of_module_numpy$lib$npyio,
        const_str_plain___contains__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_df0efc96e0513309fecde9eb92042cce,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_12_savetxt_of_module_numpy$lib$npyio( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_12_savetxt_of_module_numpy$lib$npyio,
        dparse_function_12_savetxt_of_module_numpy$lib$npyio,
        const_str_plain_savetxt,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2bf9a8f4d032371a0ba86d43e50ff276,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_4a2a4bd63dda336259583a63ba58fde5
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_13_fromregex_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_13_fromregex_of_module_numpy$lib$npyio,
        dparse_function_13_fromregex_of_module_numpy$lib$npyio,
        const_str_plain_fromregex,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5f8bff2b9d40e4b26360ac1a9e693e61,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_924d560f9b66d0c12aabd3730362e71a
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_14_genfromtxt_of_module_numpy$lib$npyio( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_14_genfromtxt_of_module_numpy$lib$npyio,
        dparse_function_14_genfromtxt_of_module_numpy$lib$npyio,
        const_str_plain_genfromtxt,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_1e1c5dcc475198480e4f8e343f4f2ba0,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_6a584cbfb04569ab7e6a6d57629c598a
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_15_ndfromtxt_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_15_ndfromtxt_of_module_numpy$lib$npyio,
        dparse_function_15_ndfromtxt_of_module_numpy$lib$npyio,
        const_str_plain_ndfromtxt,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c1313d9f5e67051afb98727561321593,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_2fe0a0603121c5510b13a0cb10976cbd
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_16_mafromtxt_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_16_mafromtxt_of_module_numpy$lib$npyio,
        dparse_function_16_mafromtxt_of_module_numpy$lib$npyio,
        const_str_plain_mafromtxt,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8c66ac1d3c5bd204636c486868c3256e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_4683f9933452d9f92a5f1f104f1eb18d
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_17_recfromtxt_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_17_recfromtxt_of_module_numpy$lib$npyio,
        dparse_function_17_recfromtxt_of_module_numpy$lib$npyio,
        const_str_plain_recfromtxt,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ac877539981b3be186d5ccb7ff9e1a17,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_905b0a9b681b1370d4e715da92cf8846
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_18_recfromcsv_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_18_recfromcsv_of_module_numpy$lib$npyio,
        dparse_function_18_recfromcsv_of_module_numpy$lib$npyio,
        const_str_plain_recfromcsv,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_629a16181f4ed496f2f106f9d7c69e66,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_c26f540e737088d590c8b7be5e011192
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_2_BagObj_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_2_BagObj_of_module_numpy$lib$npyio,
        dparse_function_1___init___of_class_2_BagObj_of_module_numpy$lib$npyio,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_65fb1146cea653e0c58330fc65dfd358,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_4_NpzFile_of_module_numpy$lib$npyio( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_4_NpzFile_of_module_numpy$lib$npyio,
        dparse_function_1___init___of_class_4_NpzFile_of_module_numpy$lib$npyio,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f13c817d27ca2c0633ae3f5f8679038d,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio( PyObjectSharedLocalVariable &closure_flatten_dtype )
{
    struct _context_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio_t *_python_context = new _context_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_flatten_dtype.shareWith( closure_flatten_dtype );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio,
        dparse_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio,
        const_str_plain_flatten_dtype,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2642607c0cd80833a97b98077efe70cf,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_ec9162268e4318fe0587ff7650565e6b,
        _python_context,
        _context_function_1_flatten_dtype_of_function_11_loadtxt_of_module_numpy$lib$npyio_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_seek_gzip_factory_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_seek_gzip_factory_of_module_numpy$lib$npyio,
        dparse_function_1_seek_gzip_factory_of_module_numpy$lib$npyio,
        const_str_plain_seek_gzip_factory,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c31362d5889b132a3105d8547b10872f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_10dee0a20eec050839c7e69431ad8f23
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_seek_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_seek_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio,
        dparse_function_1_seek_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio,
        const_str_plain_seek,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_65aa3e32986b03bb97432449351a5aa2,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___enter___of_class_4_NpzFile_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___enter___of_class_4_NpzFile_of_module_numpy$lib$npyio,
        dparse_function_2___enter___of_class_4_NpzFile_of_module_numpy$lib$npyio,
        const_str_plain___enter__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5a4a7ed34e0de27e321d0b6fb1f9193a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___getattribute___of_class_2_BagObj_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___getattribute___of_class_2_BagObj_of_module_numpy$lib$npyio,
        dparse_function_2___getattribute___of_class_2_BagObj_of_module_numpy$lib$npyio,
        const_str_plain___getattribute__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c2a784cd2e29cecd87803fd08535398f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio( PyObjectSharedLocalVariable &closure_pack_items )
{
    struct _context_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio_t *_python_context = new _context_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_pack_items.shareWith( closure_pack_items );

    PyObject *result = Nuitka_Function_New(
        fparse_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio,
        dparse_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio,
        const_str_plain_pack_items,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_83e67002998937b20e0e4b88f5604af8,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_a09f36138515a08c5120a78101de347a,
        _python_context,
        _context_function_2_pack_items_of_function_11_loadtxt_of_module_numpy$lib$npyio_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_tell_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_tell_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio,
        dparse_function_2_tell_of_class_1_GzipFile_of_function_1_seek_gzip_factory_of_module_numpy$lib$npyio,
        const_str_plain_tell,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_81dca8f8938adcfc1e166e916dd5fb00,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3___exit___of_class_4_NpzFile_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3___exit___of_class_4_NpzFile_of_module_numpy$lib$npyio,
        dparse_function_3___exit___of_class_4_NpzFile_of_module_numpy$lib$npyio,
        const_str_plain___exit__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_54f03a30f1e60e625386b44845b5e638,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio( PyObjectSharedLocalVariable &closure_comments, PyObjectSharedLocalVariable &closure_delimiter )
{
    struct _context_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio_t *_python_context = new _context_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_comments.shareWith( closure_comments );
    _python_context->closure_delimiter.shareWith( closure_delimiter );

    PyObject *result = Nuitka_Function_New(
        fparse_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio,
        dparse_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio,
        const_str_plain_split_line,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_16b4bbd2dfd91f472d5dbe71078ffe0c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_28dd61d77f33b248a1292c3b07e50ec4,
        _python_context,
        _context_function_3_split_line_of_function_11_loadtxt_of_module_numpy$lib$npyio_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_zipfile_factory_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_zipfile_factory_of_module_numpy$lib$npyio,
        dparse_function_3_zipfile_factory_of_module_numpy$lib$npyio,
        const_str_plain_zipfile_factory,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_835a0f8750089ec5016ffcd8c73168d9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_close_of_class_4_NpzFile_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_close_of_class_4_NpzFile_of_module_numpy$lib$npyio,
        dparse_function_4_close_of_class_4_NpzFile_of_module_numpy$lib$npyio,
        const_str_plain_close,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_7a23b547a4c6e2610ebe7d7a495ff53e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_885597d12c4d1fac9b16316df0ffc64d
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5___del___of_class_4_NpzFile_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5___del___of_class_4_NpzFile_of_module_numpy$lib$npyio,
        dparse_function_5___del___of_class_4_NpzFile_of_module_numpy$lib$npyio,
        const_str_plain___del__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_b474ea2cb3111757893cd9b7c4e504f2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_load_of_module_numpy$lib$npyio( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_load_of_module_numpy$lib$npyio,
        dparse_function_5_load_of_module_numpy$lib$npyio,
        const_str_plain_load,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5d3fc0e2e89a801dc4c79dece7f241aa,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_9f77fc8c52674e8121a3039171ef0943
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6___getitem___of_class_4_NpzFile_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6___getitem___of_class_4_NpzFile_of_module_numpy$lib$npyio,
        dparse_function_6___getitem___of_class_4_NpzFile_of_module_numpy$lib$npyio,
        const_str_plain___getitem__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e5644c78ae13f597f4fae5af42fbe5e2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_save_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_save_of_module_numpy$lib$npyio,
        dparse_function_6_save_of_module_numpy$lib$npyio,
        const_str_plain_save,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4281465ab8c87a2b851be814f282e50c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_e764cc639eb9ce7f1ac1317be5eb0fe4
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7___iter___of_class_4_NpzFile_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7___iter___of_class_4_NpzFile_of_module_numpy$lib$npyio,
        dparse_function_7___iter___of_class_4_NpzFile_of_module_numpy$lib$npyio,
        const_str_plain___iter__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_bacaf3e31d79ecdba9196f09c0c5fd75,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_savez_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_savez_of_module_numpy$lib$npyio,
        dparse_function_7_savez_of_module_numpy$lib$npyio,
        const_str_plain_savez,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d47ed9e2e74f6c68df9f0392b26ed0a5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_f9ced9d872e0c06a2aa979bbaaa60082
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_items_of_class_4_NpzFile_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_items_of_class_4_NpzFile_of_module_numpy$lib$npyio,
        dparse_function_8_items_of_class_4_NpzFile_of_module_numpy$lib$npyio,
        const_str_plain_items,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_bd818823fb58f0f82b1f104163262fdc,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_aabf7a43f42776f2bbcdfa1f8ebec5c3
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_savez_compressed_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_savez_compressed_of_module_numpy$lib$npyio,
        dparse_function_8_savez_compressed_of_module_numpy$lib$npyio,
        const_str_plain_savez_compressed,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_51d0a9031039eaf5e022fc0a522b42b4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_7ab0c0bd737b4cfc8d26bbfde2c5a4dd
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9__savez_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9__savez_of_module_numpy$lib$npyio,
        dparse_function_9__savez_of_module_numpy$lib$npyio,
        const_str_plain__savez,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_858c53c73032b83f56c1cd6602258659,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio(  )
{
    return Nuitka_Function_New(
        fparse_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio,
        dparse_function_9_iteritems_of_class_4_NpzFile_of_module_numpy$lib$npyio,
        const_str_plain_iteritems,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_50fc48b8ecdf741c6edc70e8dd13f680,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        const_str_digest_f094c29ac4fd1e994d00cd55715e80e2
    );
}



static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_10__getconv_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_lambda_1_lambda_of_function_10__getconv_of_module_numpy$lib$npyio,
        dparse_lambda_1_lambda_of_function_10__getconv_of_module_numpy$lib$npyio,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_487e7abc1e68201409fff2f651059a3a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_2_lambda_of_function_10__getconv_of_module_numpy$lib$npyio(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_lambda_2_lambda_of_function_10__getconv_of_module_numpy$lib$npyio,
        dparse_lambda_2_lambda_of_function_10__getconv_of_module_numpy$lib$npyio,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_cf5fa671adf1d2cf2985b93dad159212,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$lib$npyio,
        Py_None
    );

    return result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_numpy$lib$npyio =
{
    PyModuleDef_HEAD_INIT,
    "numpy.lib.npyio",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#define _MODULE_UNFREEZER 0

#if _MODULE_UNFREEZER

#include "nuitka/unfreezing.hpp"

// Table for lookup to find "frozen" modules or DLLs, i.e. the ones included in
// or along this binary.

static struct Nuitka_MetaPathBasedLoaderEntry meta_path_loader_entries[] =
{

    { NULL, NULL, 0 }
};

#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( numpy$lib$npyio )
{

#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Packages can be imported recursively in deep executables.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_numpy$lib$npyio );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    _initConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );
#if PYTHON_VERSION < 300
    initSlotCompare();
#endif

    patchBuiltinModule();
    patchTypeComparison();

#endif

#if _MODULE_UNFREEZER
    registerMetaPathBasedUnfreezer( meta_path_loader_entries );
#endif

    _initModuleConstants();
    _initModuleCodeObjects();

    // puts( "in initnumpy$lib$npyio" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_numpy$lib$npyio = Py_InitModule4(
        "numpy.lib.npyio",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    module_numpy$lib$npyio = PyModule_Create( &mdef_numpy$lib$npyio );
#endif

    moduledict_numpy$lib$npyio = (PyDictObject *)((PyModuleObject *)module_numpy$lib$npyio)->md_dict;

    assertObject( module_numpy$lib$npyio );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), const_str_digest_a8bee1fc2e5b3f40b8d64ca5454c9c61, module_numpy$lib$npyio );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( module_numpy$lib$npyio );

    if ( PyDict_GetItem( module_dict, const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, const_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
#if _MODULE_UNFREEZER
    PyDict_SetItem( module_dict, const_str_plain___loader__, metapath_based_loader );
#else
    PyDict_SetItem( module_dict, const_str_plain___loader__, Py_None );
#endif
#endif

    // Temp variables if any
    PyObjectTempVariable tmp_class_creation_1__bases;
    PyObjectTempVariable tmp_class_creation_1__class_dict;
    PyObjectTempVariable tmp_class_creation_1__metaclass;
    PyObjectTempVariable tmp_class_creation_1__class;
    PyObjectTempVariable tmp_class_creation_2__bases;
    PyObjectTempVariable tmp_class_creation_2__class_dict;
    PyObjectTempVariable tmp_class_creation_2__metaclass;
    PyObjectTempVariable tmp_class_creation_2__class;
    PyObject *exception_type, *exception_value;
    PyTracebackObject *exception_tb;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_class_bases_1;
    PyObject *tmp_class_bases_2;
    int tmp_cmp_GtE_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_defaults_1;
    PyObject *tmp_defaults_2;
    PyObject *tmp_defaults_3;
    PyObject *tmp_defaults_4;
    PyObject *tmp_dget_dict_1;
    PyObject *tmp_dget_dict_2;
    PyObject *tmp_dget_key_1;
    PyObject *tmp_dget_key_2;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_globals_4;
    PyObject *tmp_import_globals_5;
    PyObject *tmp_import_globals_6;
    PyObject *tmp_import_globals_7;
    PyObject *tmp_import_globals_8;
    PyObject *tmp_import_globals_9;
    PyObject *tmp_import_globals_10;
    PyObject *tmp_import_globals_11;
    PyObject *tmp_import_globals_12;
    PyObject *tmp_import_globals_13;
    PyObject *tmp_import_globals_14;
    PyObject *tmp_import_globals_15;
    PyObject *tmp_import_globals_16;
    PyObject *tmp_import_globals_17;
    PyObject *tmp_import_globals_18;
    PyObject *tmp_import_globals_19;
    PyObject *tmp_import_globals_20;
    PyObject *tmp_import_globals_21;
    PyObject *tmp_import_globals_22;
    PyObject *tmp_import_globals_23;
    PyObject *tmp_import_globals_24;
    PyObject *tmp_import_globals_25;
    PyObject *tmp_import_globals_26;
    PyObject *tmp_import_globals_27;
    PyObject *tmp_import_globals_28;
    PyObject *tmp_import_globals_29;
    PyObject *tmp_import_globals_30;
    PyObject *tmp_import_globals_31;
    PyObject *tmp_import_globals_32;
    PyObject *tmp_import_globals_33;
    PyObject *tmp_import_globals_34;
    PyObject *tmp_import_globals_35;
    PyObject *tmp_import_globals_36;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_import_name_from_3;
    PyObject *tmp_import_name_from_4;
    PyObject *tmp_import_name_from_5;
    PyObject *tmp_import_name_from_6;
    PyObject *tmp_import_name_from_7;
    PyObject *tmp_import_name_from_8;
    PyObject *tmp_import_name_from_9;
    PyObject *tmp_import_name_from_10;
    PyObject *tmp_import_name_from_11;
    PyObject *tmp_import_name_from_12;
    PyObject *tmp_import_name_from_13;
    PyObject *tmp_import_name_from_14;
    PyObject *tmp_import_name_from_15;
    PyObject *tmp_import_name_from_16;
    PyObject *tmp_import_name_from_17;
    PyObject *tmp_import_name_from_18;
    PyObject *tmp_import_name_from_19;
    PyObject *tmp_import_name_from_20;
    PyObject *tmp_import_name_from_21;
    PyObject *tmp_import_name_from_22;
    PyObject *tmp_import_name_from_23;
    PyObject *tmp_import_name_from_24;
    PyObject *tmp_import_name_from_25;
    PyObject *tmp_import_name_from_26;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;

    // Module code.
    tmp_assign_source_1 = Py_None;
    UPDATE_STRING_DICT0( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    tmp_assign_source_2 = const_str_digest_e0fa3050efd9be5205e9a0343e8219b3;
    UPDATE_STRING_DICT0( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    // Frame without reuse.
    PyFrameObject *frame_module = MAKE_FRAME( codeobj_ed9f43d13593d66728116b895b165455, module_numpy$lib$npyio );

    // Push the new frame as the currently active one, and we should be exlusively
    // owning it.
    pushFrameStack( frame_module );
    assert( Py_REFCNT( frame_module ) == 1 );

#if PYTHON_VERSION >= 340
    frame_module->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 1;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_plain___future__, tmp_import_globals_1, tmp_import_globals_1, const_tuple_b3c114ff65e5229953139969fd8f9f4c_tuple, const_int_0 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_division );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_division, tmp_assign_source_3 );
    tmp_import_globals_2 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 1;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_plain___future__, tmp_import_globals_2, tmp_import_globals_2, const_tuple_b3c114ff65e5229953139969fd8f9f4c_tuple, const_int_0 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_4 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_absolute_import );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_absolute_import, tmp_assign_source_4 );
    tmp_import_globals_3 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 1;
    tmp_import_name_from_3 = IMPORT_MODULE( const_str_plain___future__, tmp_import_globals_3, tmp_import_globals_3, const_tuple_b3c114ff65e5229953139969fd8f9f4c_tuple, const_int_0 );
    if ( tmp_import_name_from_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_5 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_print_function );
    Py_DECREF( tmp_import_name_from_3 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_print_function, tmp_assign_source_5 );
    tmp_import_globals_4 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 3;
    tmp_assign_source_6 = IMPORT_MODULE( const_str_plain_numpy, tmp_import_globals_4, tmp_import_globals_4, Py_None, const_int_0 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 3;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_np, tmp_assign_source_6 );
    tmp_import_globals_5 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 4;
    tmp_import_name_from_4 = IMPORT_MODULE( const_str_empty, tmp_import_globals_5, tmp_import_globals_5, const_tuple_str_plain_format_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 4;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_7 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_format );
    Py_DECREF( tmp_import_name_from_4 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 4;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_format, tmp_assign_source_7 );
    tmp_import_globals_6 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 5;
    tmp_assign_source_8 = IMPORT_MODULE( const_str_plain_sys, tmp_import_globals_6, tmp_import_globals_6, Py_None, const_int_0 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 5;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_sys, tmp_assign_source_8 );
    tmp_import_globals_7 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 6;
    tmp_assign_source_9 = IMPORT_MODULE( const_str_plain_os, tmp_import_globals_7, tmp_import_globals_7, Py_None, const_int_0 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 6;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_os, tmp_assign_source_9 );
    tmp_import_globals_8 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 7;
    tmp_assign_source_10 = IMPORT_MODULE( const_str_plain_re, tmp_import_globals_8, tmp_import_globals_8, Py_None, const_int_0 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 7;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_re, tmp_assign_source_10 );
    tmp_import_globals_9 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 8;
    tmp_assign_source_11 = IMPORT_MODULE( const_str_plain_sys, tmp_import_globals_9, tmp_import_globals_9, Py_None, const_int_0 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 8;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_sys, tmp_assign_source_11 );
    tmp_import_globals_10 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 9;
    tmp_assign_source_12 = IMPORT_MODULE( const_str_plain_itertools, tmp_import_globals_10, tmp_import_globals_10, Py_None, const_int_0 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 9;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_itertools, tmp_assign_source_12 );
    tmp_import_globals_11 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 10;
    tmp_assign_source_13 = IMPORT_MODULE( const_str_plain_warnings, tmp_import_globals_11, tmp_import_globals_11, Py_None, const_int_0 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 10;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_warnings, tmp_assign_source_13 );
    tmp_import_globals_12 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 11;
    tmp_assign_source_14 = IMPORT_MODULE( const_str_plain_weakref, tmp_import_globals_12, tmp_import_globals_12, Py_None, const_int_0 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 11;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_weakref, tmp_assign_source_14 );
    tmp_import_globals_13 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 12;
    tmp_import_name_from_5 = IMPORT_MODULE( const_str_plain_operator, tmp_import_globals_13, tmp_import_globals_13, const_tuple_str_plain_itemgetter_tuple, const_int_0 );
    if ( tmp_import_name_from_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 12;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_15 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_itemgetter );
    Py_DECREF( tmp_import_name_from_5 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 12;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_itemgetter, tmp_assign_source_15 );
    tmp_import_globals_14 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 14;
    tmp_import_name_from_6 = IMPORT_MODULE( const_str_plain__datasource, tmp_import_globals_14, tmp_import_globals_14, const_tuple_str_plain_DataSource_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 14;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_16 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_DataSource );
    Py_DECREF( tmp_import_name_from_6 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 14;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_DataSource, tmp_assign_source_16 );
    tmp_import_globals_15 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 15;
    tmp_import_name_from_7 = IMPORT_MODULE( const_str_plain__compiled_base, tmp_import_globals_15, tmp_import_globals_15, const_tuple_str_plain_packbits_str_plain_unpackbits_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 15;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_17 = IMPORT_NAME( tmp_import_name_from_7, const_str_plain_packbits );
    Py_DECREF( tmp_import_name_from_7 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 15;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_packbits, tmp_assign_source_17 );
    tmp_import_globals_16 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 15;
    tmp_import_name_from_8 = IMPORT_MODULE( const_str_plain__compiled_base, tmp_import_globals_16, tmp_import_globals_16, const_tuple_str_plain_packbits_str_plain_unpackbits_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 15;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_18 = IMPORT_NAME( tmp_import_name_from_8, const_str_plain_unpackbits );
    Py_DECREF( tmp_import_name_from_8 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 15;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_unpackbits, tmp_assign_source_18 );
    tmp_import_globals_17 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 17;
    tmp_import_name_from_9 = IMPORT_MODULE( const_str_plain__iotools, tmp_import_globals_17, tmp_import_globals_17, const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_19 = IMPORT_NAME( tmp_import_name_from_9, const_str_plain_LineSplitter );
    Py_DECREF( tmp_import_name_from_9 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_LineSplitter, tmp_assign_source_19 );
    tmp_import_globals_18 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 17;
    tmp_import_name_from_10 = IMPORT_MODULE( const_str_plain__iotools, tmp_import_globals_18, tmp_import_globals_18, const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_20 = IMPORT_NAME( tmp_import_name_from_10, const_str_plain_NameValidator );
    Py_DECREF( tmp_import_name_from_10 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_NameValidator, tmp_assign_source_20 );
    tmp_import_globals_19 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 17;
    tmp_import_name_from_11 = IMPORT_MODULE( const_str_plain__iotools, tmp_import_globals_19, tmp_import_globals_19, const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_21 = IMPORT_NAME( tmp_import_name_from_11, const_str_plain_StringConverter );
    Py_DECREF( tmp_import_name_from_11 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_StringConverter, tmp_assign_source_21 );
    tmp_import_globals_20 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 17;
    tmp_import_name_from_12 = IMPORT_MODULE( const_str_plain__iotools, tmp_import_globals_20, tmp_import_globals_20, const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_22 = IMPORT_NAME( tmp_import_name_from_12, const_str_plain_ConverterError );
    Py_DECREF( tmp_import_name_from_12 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_ConverterError, tmp_assign_source_22 );
    tmp_import_globals_21 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 17;
    tmp_import_name_from_13 = IMPORT_MODULE( const_str_plain__iotools, tmp_import_globals_21, tmp_import_globals_21, const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_23 = IMPORT_NAME( tmp_import_name_from_13, const_str_plain_ConverterLockError );
    Py_DECREF( tmp_import_name_from_13 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_ConverterLockError, tmp_assign_source_23 );
    tmp_import_globals_22 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 17;
    tmp_import_name_from_14 = IMPORT_MODULE( const_str_plain__iotools, tmp_import_globals_22, tmp_import_globals_22, const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_24 = IMPORT_NAME( tmp_import_name_from_14, const_str_plain_ConversionWarning );
    Py_DECREF( tmp_import_name_from_14 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_ConversionWarning, tmp_assign_source_24 );
    tmp_import_globals_23 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 17;
    tmp_import_name_from_15 = IMPORT_MODULE( const_str_plain__iotools, tmp_import_globals_23, tmp_import_globals_23, const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_25 = IMPORT_NAME( tmp_import_name_from_15, const_str_plain__is_string_like );
    Py_DECREF( tmp_import_name_from_15 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__is_string_like, tmp_assign_source_25 );
    tmp_import_globals_24 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 17;
    tmp_import_name_from_16 = IMPORT_MODULE( const_str_plain__iotools, tmp_import_globals_24, tmp_import_globals_24, const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_26 = IMPORT_NAME( tmp_import_name_from_16, const_str_plain_has_nested_fields );
    Py_DECREF( tmp_import_name_from_16 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_has_nested_fields, tmp_assign_source_26 );
    tmp_import_globals_25 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 17;
    tmp_import_name_from_17 = IMPORT_MODULE( const_str_plain__iotools, tmp_import_globals_25, tmp_import_globals_25, const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_27 = IMPORT_NAME( tmp_import_name_from_17, const_str_plain_flatten_dtype );
    Py_DECREF( tmp_import_name_from_17 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_flatten_dtype, tmp_assign_source_27 );
    tmp_import_globals_26 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 17;
    tmp_import_name_from_18 = IMPORT_MODULE( const_str_plain__iotools, tmp_import_globals_26, tmp_import_globals_26, const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_28 = IMPORT_NAME( tmp_import_name_from_18, const_str_plain_easy_dtype );
    Py_DECREF( tmp_import_name_from_18 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_easy_dtype, tmp_assign_source_28 );
    tmp_import_globals_27 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 17;
    tmp_import_name_from_19 = IMPORT_MODULE( const_str_plain__iotools, tmp_import_globals_27, tmp_import_globals_27, const_tuple_05a861a3e194ea4149ae1eeafab9091a_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_29 = IMPORT_NAME( tmp_import_name_from_19, const_str_plain__bytes_to_name );
    Py_DECREF( tmp_import_name_from_19 );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 17;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__bytes_to_name, tmp_assign_source_29 );
    tmp_import_globals_28 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 24;
    tmp_import_name_from_20 = IMPORT_MODULE( const_str_digest_9718270fe5d2c916ce2b6f64e75a37af, tmp_import_globals_28, tmp_import_globals_28, const_tuple_d941a7e3454ef3ab70168d2a1419891a_tuple, const_int_0 );
    if ( tmp_import_name_from_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 24;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_30 = IMPORT_NAME( tmp_import_name_from_20, const_str_plain_asbytes );
    Py_DECREF( tmp_import_name_from_20 );
    if ( tmp_assign_source_30 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 24;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes, tmp_assign_source_30 );
    tmp_import_globals_29 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 24;
    tmp_import_name_from_21 = IMPORT_MODULE( const_str_digest_9718270fe5d2c916ce2b6f64e75a37af, tmp_import_globals_29, tmp_import_globals_29, const_tuple_d941a7e3454ef3ab70168d2a1419891a_tuple, const_int_0 );
    if ( tmp_import_name_from_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 24;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_31 = IMPORT_NAME( tmp_import_name_from_21, const_str_plain_asstr );
    Py_DECREF( tmp_import_name_from_21 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 24;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asstr, tmp_assign_source_31 );
    tmp_import_globals_30 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 24;
    tmp_import_name_from_22 = IMPORT_MODULE( const_str_digest_9718270fe5d2c916ce2b6f64e75a37af, tmp_import_globals_30, tmp_import_globals_30, const_tuple_d941a7e3454ef3ab70168d2a1419891a_tuple, const_int_0 );
    if ( tmp_import_name_from_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 24;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_32 = IMPORT_NAME( tmp_import_name_from_22, const_str_plain_asbytes_nested );
    Py_DECREF( tmp_import_name_from_22 );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 24;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_asbytes_nested, tmp_assign_source_32 );
    tmp_import_globals_31 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 24;
    tmp_import_name_from_23 = IMPORT_MODULE( const_str_digest_9718270fe5d2c916ce2b6f64e75a37af, tmp_import_globals_31, tmp_import_globals_31, const_tuple_d941a7e3454ef3ab70168d2a1419891a_tuple, const_int_0 );
    if ( tmp_import_name_from_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 24;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_33 = IMPORT_NAME( tmp_import_name_from_23, const_str_plain_bytes );
    Py_DECREF( tmp_import_name_from_23 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 24;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_bytes, tmp_assign_source_33 );
    tmp_import_globals_32 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 24;
    tmp_import_name_from_24 = IMPORT_MODULE( const_str_digest_9718270fe5d2c916ce2b6f64e75a37af, tmp_import_globals_32, tmp_import_globals_32, const_tuple_d941a7e3454ef3ab70168d2a1419891a_tuple, const_int_0 );
    if ( tmp_import_name_from_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 24;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_34 = IMPORT_NAME( tmp_import_name_from_24, const_str_plain_basestring );
    Py_DECREF( tmp_import_name_from_24 );
    if ( tmp_assign_source_34 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 24;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_basestring, tmp_assign_source_34 );
    tmp_import_globals_33 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 24;
    tmp_import_name_from_25 = IMPORT_MODULE( const_str_digest_9718270fe5d2c916ce2b6f64e75a37af, tmp_import_globals_33, tmp_import_globals_33, const_tuple_d941a7e3454ef3ab70168d2a1419891a_tuple, const_int_0 );
    if ( tmp_import_name_from_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 24;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_35 = IMPORT_NAME( tmp_import_name_from_25, const_str_plain_unicode );
    Py_DECREF( tmp_import_name_from_25 );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 24;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_unicode, tmp_assign_source_35 );
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 28;
        goto frame_exception_exit_1;
    }

    tmp_subscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_version_info );
    if ( tmp_subscr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 28;
        goto frame_exception_exit_1;
    }
    tmp_subscr_subscript_1 = const_int_0;
    tmp_compare_left_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    Py_DECREF( tmp_subscr_target_1 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 28;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = const_int_pos_3;
    tmp_cmp_GtE_1 = RICH_COMPARE_BOOL_GE( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_GtE_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        frame_module->f_lineno = 28;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    if (tmp_cmp_GtE_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_import_globals_34 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 29;
    tmp_assign_source_36 = IMPORT_MODULE( const_str_plain_pickle, tmp_import_globals_34, tmp_import_globals_34, Py_None, const_int_0 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 29;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_pickle, tmp_assign_source_36 );
    goto branch_end_1;
    branch_no_1:;
    tmp_import_globals_35 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 31;
    tmp_assign_source_37 = IMPORT_MODULE( const_str_plain_cPickle, tmp_import_globals_35, tmp_import_globals_35, Py_None, const_int_0 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 31;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_pickle, tmp_assign_source_37 );
    tmp_import_globals_36 = ((PyModuleObject *)module_numpy$lib$npyio)->md_dict;
    frame_module->f_lineno = 32;
    tmp_import_name_from_26 = IMPORT_MODULE( const_str_plain_future_builtins, tmp_import_globals_36, tmp_import_globals_36, const_tuple_str_plain_map_tuple, const_int_0 );
    if ( tmp_import_name_from_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 32;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_38 = IMPORT_NAME( tmp_import_name_from_26, const_str_plain_map );
    Py_DECREF( tmp_import_name_from_26 );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 32;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_map, tmp_assign_source_38 );
    branch_end_1:;
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_pickle );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_pickle );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 68234 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 34;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_39 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_loads );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 34;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_loads, tmp_assign_source_39 );
    tmp_assign_source_40 = LIST_COPY( const_list_10d01238bac918eb73a26dfa23444527_list );
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain___all__, tmp_assign_source_40 );
    tmp_assign_source_41 = GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__is_string_like );

    if (unlikely( tmp_assign_source_41 == NULL ))
    {
        tmp_assign_source_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__is_string_like );
    }

    if ( tmp_assign_source_41 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 155303 ], 37, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 40;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__string_like, tmp_assign_source_41 );
    tmp_assign_source_42 = MAKE_FUNCTION_function_1_seek_gzip_factory_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_42 );

        frame_module->f_lineno = 42;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_seek_gzip_factory, tmp_assign_source_42 );
    // Tried code
    tmp_assign_source_43 = PyTuple_New( 1 );
    tmp_tuple_element_1 = LOOKUP_BUILTIN( const_str_plain_object );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_43 );

        frame_module->f_lineno = 90;
        goto try_finally_handler_1;
    }
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assign_source_43, 0, tmp_tuple_element_1 );
    assert( tmp_class_creation_1__bases.object == NULL );
    tmp_class_creation_1__bases.object = tmp_assign_source_43;

    tmp_assign_source_44 = impl_class_2_BagObj_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 90;
        goto try_finally_handler_1;
    }
    assert( tmp_class_creation_1__class_dict.object == NULL );
    tmp_class_creation_1__class_dict.object = tmp_assign_source_44;

    tmp_compare_left_2 = const_str_plain___metaclass__;
    tmp_compare_right_2 = tmp_class_creation_1__class_dict.object;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    if ( tmp_cmp_In_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 90;
        goto try_finally_handler_1;
    }
    if (tmp_cmp_In_1 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_dget_dict_1 = tmp_class_creation_1__class_dict.object;

    tmp_dget_key_1 = const_str_plain___metaclass__;
    tmp_assign_source_45 = DICT_GET_ITEM( tmp_dget_dict_1, tmp_dget_key_1 );
    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 90;
        goto try_finally_handler_1;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_class_bases_1 = tmp_class_creation_1__bases.object;

    tmp_assign_source_45 = SELECT_METACLASS( tmp_class_bases_1, GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_1:;
    assert( tmp_class_creation_1__metaclass.object == NULL );
    tmp_class_creation_1__metaclass.object = tmp_assign_source_45;

    tmp_called_1 = tmp_class_creation_1__metaclass.object;

    tmp_call_arg_element_1 = const_str_plain_BagObj;
    tmp_call_arg_element_2 = tmp_class_creation_1__bases.object;

    tmp_call_arg_element_3 = tmp_class_creation_1__class_dict.object;

    frame_module->f_lineno = 90;
    tmp_assign_source_46 = CALL_FUNCTION_WITH_ARGS3( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3 );
    if ( tmp_assign_source_46 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 90;
        goto try_finally_handler_1;
    }
    assert( tmp_class_creation_1__class.object == NULL );
    tmp_class_creation_1__class.object = tmp_assign_source_46;

    tmp_assign_source_47 = tmp_class_creation_1__class.object;

    UPDATE_STRING_DICT0( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_BagObj, tmp_assign_source_47 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_1__class.object );
    tmp_class_creation_1__class.object = NULL;

    Py_XDECREF( tmp_class_creation_1__bases.object );
    tmp_class_creation_1__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_1__class_dict.object );
    tmp_class_creation_1__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass.object );
    tmp_class_creation_1__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_assign_source_48 = MAKE_FUNCTION_function_3_zipfile_factory_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_48 );

        frame_module->f_lineno = 128;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_zipfile_factory, tmp_assign_source_48 );
    // Tried code
    tmp_assign_source_49 = PyTuple_New( 1 );
    tmp_tuple_element_2 = LOOKUP_BUILTIN( const_str_plain_object );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_49 );

        frame_module->f_lineno = 133;
        goto try_finally_handler_2;
    }
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_assign_source_49, 0, tmp_tuple_element_2 );
    assert( tmp_class_creation_2__bases.object == NULL );
    tmp_class_creation_2__bases.object = tmp_assign_source_49;

    tmp_assign_source_50 = impl_class_4_NpzFile_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 133;
        goto try_finally_handler_2;
    }
    assert( tmp_class_creation_2__class_dict.object == NULL );
    tmp_class_creation_2__class_dict.object = tmp_assign_source_50;

    tmp_compare_left_3 = const_str_plain___metaclass__;
    tmp_compare_right_3 = tmp_class_creation_2__class_dict.object;

    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    if ( tmp_cmp_In_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 133;
        goto try_finally_handler_2;
    }
    if (tmp_cmp_In_2 == 1)
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_dget_dict_2 = tmp_class_creation_2__class_dict.object;

    tmp_dget_key_2 = const_str_plain___metaclass__;
    tmp_assign_source_51 = DICT_GET_ITEM( tmp_dget_dict_2, tmp_dget_key_2 );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 133;
        goto try_finally_handler_2;
    }
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_class_bases_2 = tmp_class_creation_2__bases.object;

    tmp_assign_source_51 = SELECT_METACLASS( tmp_class_bases_2, GET_STRING_DICT_VALUE( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_2:;
    assert( tmp_class_creation_2__metaclass.object == NULL );
    tmp_class_creation_2__metaclass.object = tmp_assign_source_51;

    tmp_called_2 = tmp_class_creation_2__metaclass.object;

    tmp_call_arg_element_4 = const_str_plain_NpzFile;
    tmp_call_arg_element_5 = tmp_class_creation_2__bases.object;

    tmp_call_arg_element_6 = tmp_class_creation_2__class_dict.object;

    frame_module->f_lineno = 133;
    tmp_assign_source_52 = CALL_FUNCTION_WITH_ARGS3( tmp_called_2, tmp_call_arg_element_4, tmp_call_arg_element_5, tmp_call_arg_element_6 );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 133;
        goto try_finally_handler_2;
    }
    assert( tmp_class_creation_2__class.object == NULL );
    tmp_class_creation_2__class.object = tmp_assign_source_52;

    tmp_assign_source_53 = tmp_class_creation_2__class.object;

    UPDATE_STRING_DICT0( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_NpzFile, tmp_assign_source_53 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_2__class.object );
    tmp_class_creation_2__class.object = NULL;

    Py_XDECREF( tmp_class_creation_2__bases.object );
    tmp_class_creation_2__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_2__class_dict.object );
    tmp_class_creation_2__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_2__metaclass.object );
    tmp_class_creation_2__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto frame_exception_exit_1;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_defaults_1 = const_tuple_none_tuple;
    tmp_assign_source_54 = MAKE_FUNCTION_function_5_load_of_module_numpy$lib$npyio( INCREASE_REFCOUNT( tmp_defaults_1 ) );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_54 );

        frame_module->f_lineno = 284;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_load, tmp_assign_source_54 );
    tmp_assign_source_55 = MAKE_FUNCTION_function_6_save_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_55 );

        frame_module->f_lineno = 406;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_save, tmp_assign_source_55 );
    tmp_assign_source_56 = MAKE_FUNCTION_function_7_savez_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_56 );

        frame_module->f_lineno = 458;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_savez, tmp_assign_source_56 );
    tmp_assign_source_57 = MAKE_FUNCTION_function_8_savez_compressed_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_57 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_57 );

        frame_module->f_lineno = 535;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_savez_compressed, tmp_assign_source_57 );
    tmp_assign_source_58 = MAKE_FUNCTION_function_9__savez_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_58 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_58 );

        frame_module->f_lineno = 560;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__savez, tmp_assign_source_58 );
    tmp_assign_source_59 = MAKE_FUNCTION_function_10__getconv_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_59 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_59 );

        frame_module->f_lineno = 607;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain__getconv, tmp_assign_source_59 );
    tmp_defaults_2 = PyTuple_New( 8 );
    tmp_tuple_element_3 = LOOKUP_BUILTIN( const_str_plain_float );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_defaults_2 );

        frame_module->f_lineno = 628;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_defaults_2, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = const_str_chr_35;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_defaults_2, 1, tmp_tuple_element_3 );
    tmp_tuple_element_3 = Py_None;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_defaults_2, 2, tmp_tuple_element_3 );
    tmp_tuple_element_3 = Py_None;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_defaults_2, 3, tmp_tuple_element_3 );
    tmp_tuple_element_3 = const_int_0;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_defaults_2, 4, tmp_tuple_element_3 );
    tmp_tuple_element_3 = Py_None;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_defaults_2, 5, tmp_tuple_element_3 );
    tmp_tuple_element_3 = Py_False;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_defaults_2, 6, tmp_tuple_element_3 );
    tmp_tuple_element_3 = const_int_0;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_defaults_2, 7, tmp_tuple_element_3 );
    tmp_assign_source_60 = MAKE_FUNCTION_function_11_loadtxt_of_module_numpy$lib$npyio( tmp_defaults_2 );
    if ( tmp_assign_source_60 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_60 );

        frame_module->f_lineno = 628;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_loadtxt, tmp_assign_source_60 );
    tmp_defaults_3 = const_tuple_a920ae360b29c4cad631eea918060118_tuple;
    tmp_assign_source_61 = MAKE_FUNCTION_function_12_savetxt_of_module_numpy$lib$npyio( INCREASE_REFCOUNT( tmp_defaults_3 ) );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_61 );

        frame_module->f_lineno = 887;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_savetxt, tmp_assign_source_61 );
    tmp_assign_source_62 = MAKE_FUNCTION_function_13_fromregex_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_62 );

        frame_module->f_lineno = 1081;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_fromregex, tmp_assign_source_62 );
    tmp_defaults_4 = PyTuple_New( 22 );
    tmp_tuple_element_4 = LOOKUP_BUILTIN( const_str_plain_float );
    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_defaults_4 );

        frame_module->f_lineno = 1172;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = const_str_chr_35;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 1, tmp_tuple_element_4 );
    tmp_tuple_element_4 = Py_None;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 2, tmp_tuple_element_4 );
    tmp_tuple_element_4 = const_int_0;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 3, tmp_tuple_element_4 );
    tmp_tuple_element_4 = const_int_0;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 4, tmp_tuple_element_4 );
    tmp_tuple_element_4 = const_int_0;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 5, tmp_tuple_element_4 );
    tmp_tuple_element_4 = Py_None;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 6, tmp_tuple_element_4 );
    tmp_tuple_element_4 = const_str_empty;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 7, tmp_tuple_element_4 );
    tmp_tuple_element_4 = Py_None;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 8, tmp_tuple_element_4 );
    tmp_tuple_element_4 = Py_None;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 9, tmp_tuple_element_4 );
    tmp_tuple_element_4 = Py_None;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 10, tmp_tuple_element_4 );
    tmp_tuple_element_4 = Py_None;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 11, tmp_tuple_element_4 );
    tmp_tuple_element_4 = Py_None;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 12, tmp_tuple_element_4 );
    tmp_tuple_element_4 = Py_None;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 13, tmp_tuple_element_4 );
    tmp_tuple_element_4 = const_str_plain__;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 14, tmp_tuple_element_4 );
    tmp_tuple_element_4 = Py_False;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 15, tmp_tuple_element_4 );
    tmp_tuple_element_4 = Py_True;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 16, tmp_tuple_element_4 );
    tmp_tuple_element_4 = const_str_digest_afbdc315ea87bcfed00384cda44945f8;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 17, tmp_tuple_element_4 );
    tmp_tuple_element_4 = Py_None;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 18, tmp_tuple_element_4 );
    tmp_tuple_element_4 = Py_False;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 19, tmp_tuple_element_4 );
    tmp_tuple_element_4 = Py_True;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 20, tmp_tuple_element_4 );
    tmp_tuple_element_4 = Py_True;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_defaults_4, 21, tmp_tuple_element_4 );
    tmp_assign_source_63 = MAKE_FUNCTION_function_14_genfromtxt_of_module_numpy$lib$npyio( tmp_defaults_4 );
    if ( tmp_assign_source_63 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_63 );

        frame_module->f_lineno = 1172;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_genfromtxt, tmp_assign_source_63 );
    tmp_assign_source_64 = MAKE_FUNCTION_function_15_ndfromtxt_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_64 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_64 );

        frame_module->f_lineno = 1801;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_ndfromtxt, tmp_assign_source_64 );
    tmp_assign_source_65 = MAKE_FUNCTION_function_16_mafromtxt_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 1818;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_mafromtxt, tmp_assign_source_65 );
    tmp_assign_source_66 = MAKE_FUNCTION_function_17_recfromtxt_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_66 );

        frame_module->f_lineno = 1835;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_recfromtxt, tmp_assign_source_66 );
    tmp_assign_source_67 = MAKE_FUNCTION_function_18_recfromcsv_of_module_numpy$lib$npyio(  );
    if ( tmp_assign_source_67 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_67 );

        frame_module->f_lineno = 1867;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$lib$npyio, (Nuitka_StringObject *)const_str_plain_recfromcsv, tmp_assign_source_67 );

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif
    popFrameStack();

    assertFrameObject( frame_module );
    Py_DECREF( frame_module );

    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_module ) );
    }
    else if ( exception_tb->tb_frame != frame_module )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_module ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }

    // Put the previous frame back on top.
    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_module->f_executing -= 1;
#endif
    Py_DECREF( frame_module );

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_1:;

    return MOD_RETURN_VALUE( module_numpy$lib$npyio );
module_exception_exit:
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
