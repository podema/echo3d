// Generated code for Python source for module 'six'
// created by Nuitka version 0.5.5.3

// This code is in part copyright 2014 Kay Hayen.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "nuitka/prelude.hpp"

#include "__helpers.hpp"

// The _module_six is a Python object pointer of module type.

// Note: For full compatability with CPython, every module variable access
// needs to go through it except for cases where the module cannot possibly
// have changed in the mean time.

PyObject *module_six;
PyDictObject *moduledict_six;

// The module constants used
extern PyObject *const_int_0;
extern PyObject *const_str_dot;
extern PyObject *const_int_neg_1;
extern PyObject *const_int_pos_1;
extern PyObject *const_int_pos_2;
extern PyObject *const_int_pos_3;
extern PyObject *const_int_pos_4;
extern PyObject *const_str_space;
extern PyObject *const_dict_empty;
extern PyObject *const_str_newline;
extern PyObject *const_str_plain_X;
extern PyObject *const_str_plain_b;
extern PyObject *const_str_plain_d;
extern PyObject *const_str_plain_f;
extern PyObject *const_str_plain_i;
extern PyObject *const_str_plain_s;
extern PyObject *const_str_plain_u;
extern PyObject *const_tuple_empty;
extern PyObject *const_str_plain_bs;
extern PyObject *const_str_plain_fp;
extern PyObject *const_str_plain_io;
extern PyObject *const_str_plain_it;
extern PyObject *const_str_plain_kw;
extern PyObject *const_str_plain_tb;
extern PyObject *const_str_plain_tp;
extern PyObject *const_str_plain_PY2;
extern PyObject *const_str_plain_PY3;
static PyObject *const_str_plain_Tix;
extern PyObject *const_str_plain_any;
extern PyObject *const_str_plain_arg;
extern PyObject *const_str_plain_big;
extern PyObject *const_str_plain_buf;
extern PyObject *const_str_plain_chr;
extern PyObject *const_str_plain_cls;
extern PyObject *const_str_plain_doc;
extern PyObject *const_str_plain_end;
extern PyObject *const_str_plain_get;
extern PyObject *const_str_plain_imp;
extern PyObject *const_str_plain_int;
extern PyObject *const_str_plain_map;
extern PyObject *const_str_plain_mod;
extern PyObject *const_str_plain_new;
extern PyObject *const_str_plain_obj;
extern PyObject *const_str_plain_old;
extern PyObject *const_str_plain_pop;
extern PyObject *const_str_plain_sep;
static PyObject *const_str_plain_six;
extern PyObject *const_str_plain_str;
extern PyObject *const_str_plain_sys;
static PyObject *const_str_plain_ttk;
extern PyObject *const_str_plain_zip;
static PyObject *const_unicode_space;
extern PyObject *const_str_plain_args;
extern PyObject *const_str_plain_attr;
extern PyObject *const_str_plain_byte;
extern PyObject *const_str_plain_copy;
extern PyObject *const_str_plain_data;
extern PyObject *const_str_plain_exec;
extern PyObject *const_str_plain_file;
extern PyObject *const_str_plain_func;
static PyObject *const_str_plain_gdbm;
static PyObject *const_str_plain_imap;
extern PyObject *const_str_plain_iter;
extern PyObject *const_str_plain_izip;
extern PyObject *const_str_plain_java;
extern PyObject *const_str_plain_keys;
extern PyObject *const_str_plain_long;
extern PyObject *const_str_plain_meta;
extern PyObject *const_str_plain_move;
extern PyObject *const_str_plain_name;
extern PyObject *const_str_plain_next;
extern PyObject *const_str_plain_path;
extern PyObject *const_str_plain_read;
extern PyObject *const_str_plain_repr;
extern PyObject *const_str_plain_self;
extern PyObject *const_str_plain_type;
static PyObject *const_str_plain_Queue;
static PyObject *const_str_plain_Tkdnd;
extern PyObject *const_str_plain_attrs;
static PyObject *const_str_plain_bases;
extern PyObject *const_str_plain_bytes;
extern PyObject *const_str_plain_error;
static PyObject *const_str_plain_exec_;
extern PyObject *const_str_plain_frame;
extern PyObject *const_str_plain_input;
extern PyObject *const_str_plain_items;
extern PyObject *const_str_plain_klass;
static PyObject *const_str_plain_lists;
static PyObject *const_str_plain_moves;
extern PyObject *const_str_plain_parse;
extern PyObject *const_str_plain_print;
extern PyObject *const_str_plain_queue;
extern PyObject *const_str_plain_quote;
extern PyObject *const_str_plain_range;
static PyObject *const_str_plain_slots;
static PyObject *const_str_plain_space;
extern PyObject *const_str_plain_types;
extern PyObject *const_str_plain_value;
extern PyObject *const_str_plain_wraps;
extern PyObject *const_str_plain_write;
static PyObject *const_unicode_newline;
extern PyObject *const_str_angle_string;
static PyObject *const_str_plain_Cookie;
static PyObject *const_str_plain_Dialog;
static PyObject *const_str_plain__code_;
static PyObject *const_str_plain__locs_;
extern PyObject *const_str_plain_append;
extern PyObject *const_str_plain_encode;
extern PyObject *const_str_plain_errors;
extern PyObject *const_str_plain_filter;
extern PyObject *const_str_plain_kwargs;
extern PyObject *const_str_plain_module;
extern PyObject *const_str_plain_object;
extern PyObject *const_str_plain_pickle;
static PyObject *const_str_plain_print_;
extern PyObject *const_str_plain_reduce;
extern PyObject *const_str_plain_reload;
extern PyObject *const_str_plain_result;
extern PyObject *const_str_plain_stdout;
extern PyObject *const_str_plain_strict;
static PyObject *const_str_plain_thread;
static PyObject *const_str_plain_tkFont;
extern PyObject *const_str_plain_unichr;
extern PyObject *const_str_plain_urllib;
extern PyObject *const_str_plain_values;
extern PyObject *const_str_plain_winreg;
extern PyObject *const_str_plain_xrange;
extern PyObject *const_tuple_none_tuple;
extern PyObject *const_str_angle_genexpr;
extern PyObject *const_str_plain_BytesIO;
static PyObject *const_str_plain_MAXSIZE;
extern PyObject *const_str_plain_Request;
static PyObject *const_str_plain_Tkinter;
extern PyObject *const_str_plain___dir__;
extern PyObject *const_str_plain___doc__;
extern PyObject *const_str_plain___get__;
extern PyObject *const_str_plain___len__;
extern PyObject *const_str_plain___mro__;
extern PyObject *const_str_plain___new__;
static PyObject *const_str_plain__globs_;
extern PyObject *const_str_plain__module;
static PyObject *const_str_plain__thread;
extern PyObject *const_str_plain__winreg;
static PyObject *const_str_plain_addbase;
static PyObject *const_str_plain_addinfo;
extern PyObject *const_str_plain_cPickle;
extern PyObject *const_str_plain_copyreg;
static PyObject *const_str_plain_dbm_gnu;
extern PyObject *const_str_plain_delattr;
static PyObject *const_str_plain_getitem;
extern PyObject *const_str_plain_httplib;
static PyObject *const_str_plain_ifilter;
extern PyObject *const_str_plain_im_func;
static PyObject *const_str_plain_im_self;
extern PyObject *const_str_plain_maxsize;
extern PyObject *const_str_plain_modules;
static PyObject *const_str_plain_new_mod;
extern PyObject *const_str_plain_newline;
static PyObject *const_str_plain_old_mod;
extern PyObject *const_str_plain_replace;
static PyObject *const_str_plain_reprlib;
extern PyObject *const_str_plain_request;
extern PyObject *const_str_plain_reraise;
static PyObject *const_str_plain_tkinter;
static PyObject *const_str_plain_unbound;
extern PyObject *const_str_plain_unicode;
extern PyObject *const_str_plain_unquote;
extern PyObject *const_str_plain_urljoin;
extern PyObject *const_str_plain_urllib2;
extern PyObject *const_str_plain_urlopen;
static PyObject *const_str_plain_wrapped;
extern PyObject *const_str_plain_wrapper;
static PyObject *const_int_pos_2147483647;
extern PyObject *const_int_pos_2147483648;
static PyObject *const_str_plain_Iterator;
extern PyObject *const_str_plain_StringIO;
extern PyObject *const_str_plain_URLError;
static PyObject *const_str_plain_UserDict;
static PyObject *const_str_plain_UserList;
extern PyObject *const_str_plain___call__;
extern PyObject *const_str_plain___code__;
extern PyObject *const_str_plain___dict__;
extern PyObject *const_str_plain___file__;
extern PyObject *const_str_plain___func__;
extern PyObject *const_str_plain___init__;
extern PyObject *const_str_plain___name__;
extern PyObject *const_str_plain___next__;
extern PyObject *const_str_plain___path__;
extern PyObject *const_str_plain___self__;
static PyObject *const_str_plain___spec__;
static PyObject *const_str_plain__add_doc;
static PyObject *const_str_plain__resolve;
static PyObject *const_str_plain_add_move;
extern PyObject *const_str_plain_builtins;
static PyObject *const_str_plain_byte2int;
extern PyObject *const_str_plain_callable;
extern PyObject *const_str_plain_copy_reg;
extern PyObject *const_str_plain_encoding;
extern PyObject *const_str_plain_f_locals;
extern PyObject *const_str_plain_fullname;
static PyObject *const_str_plain_get_code;
extern PyObject *const_str_plain_importer;
static PyObject *const_str_plain_int2byte;
extern PyObject *const_str_plain_iterkeys;
extern PyObject *const_str_plain_new_attr;
static PyObject *const_str_plain_old_attr;
extern PyObject *const_str_plain_operator;
static PyObject *const_str_plain_parse_qs;
extern PyObject *const_str_plain_platform;
static PyObject *const_str_plain_response;
extern PyObject *const_str_plain_to_bytes;
extern PyObject *const_str_plain_urlparse;
extern PyObject *const_str_plain_urlsplit;
static PyObject *const_str_plain_ClassType;
extern PyObject *const_str_plain_HTTPError;
static PyObject *const_str_plain_URLopener;
extern PyObject *const_str_plain___bases__;
static PyObject *const_str_plain___slots__;
extern PyObject *const_str_plain__getframe;
static PyObject *const_str_plain__importer;
extern PyObject *const_str_plain_cStringIO;
static PyObject *const_str_plain_cookielib;
extern PyObject *const_str_plain_enumerate;
extern PyObject *const_str_plain_f_globals;
static PyObject *const_str_plain_fullnames;
extern PyObject *const_str_plain_func_code;
extern PyObject *const_str_plain_functools;
static PyObject *const_str_plain_iterbytes;
extern PyObject *const_str_plain_iteritems;
static PyObject *const_str_plain_iterlists;
extern PyObject *const_str_plain_itertools;
static PyObject *const_str_plain_meta_path;
static PyObject *const_str_plain_metaclass;
static PyObject *const_str_plain_orig_vars;
static PyObject *const_str_plain_parse_qsl;
static PyObject *const_str_plain_raw_input;
static PyObject *const_str_plain_slots_var;
static PyObject *const_str_plain_text_type;
static PyObject *const_str_plain_urldefrag;
static PyObject *const_str_plain_urlencode;
static PyObject *const_str_plain_xmlrpclib;
static PyObject *const_str_plain_FTPHandler;
static PyObject *const_str_plain_FileDialog;
static PyObject *const_str_plain_HTMLParser;
extern PyObject *const_str_plain_MethodType;
extern PyObject *const_str_plain_ModuleType;
static PyObject *const_str_plain_UserString;
static PyObject *const_str_plain__LazyDescr;
extern PyObject *const_str_plain___author__;
extern PyObject *const_str_plain___iterator;
extern PyObject *const_str_plain___loader__;
extern PyObject *const_str_plain___module__;
static PyObject *const_str_plain__func_code;
static PyObject *const_str_plain__meth_func;
static PyObject *const_str_plain__meth_self;
static PyObject *const_str_plain_addinfourl;
extern PyObject *const_str_plain_attrgetter;
extern PyObject *const_str_plain_basestring;
static PyObject *const_str_plain_get_source;
static PyObject *const_str_plain_getproxies;
static PyObject *const_str_plain_indexbytes;
static PyObject *const_str_plain_is_package;
extern PyObject *const_str_plain_itemgetter;
static PyObject *const_str_plain_itervalues;
static PyObject *const_str_plain_quote_plus;
static PyObject *const_str_plain_splitquery;
extern PyObject *const_str_plain_startswith;
static PyObject *const_str_plain_this_bases;
static PyObject *const_str_plain_urlcleanup;
extern PyObject *const_str_plain_urlunparse;
extern PyObject *const_str_plain_urlunsplit;
static PyObject *const_str_plain_BaseHandler;
static PyObject *const_str_plain_FileHandler;
static PyObject *const_str_plain_HTTPHandler;
static PyObject *const_str_plain_MovedModule;
static PyObject *const_str_plain_ParseResult;
static PyObject *const_str_plain_SplitResult;
static PyObject *const_str_plain_Tkconstants;
static PyObject *const_str_plain__LazyModule;
static PyObject *const_str_plain__MovedItems;
extern PyObject *const_str_plain___builtin__;
static PyObject *const_str_plain___closure__;
extern PyObject *const_str_plain___getattr__;
extern PyObject *const_str_plain___globals__;
static PyObject *const_str_plain___package__;
extern PyObject *const_str_plain___version__;
static PyObject *const_str_plain___weakref__;
extern PyObject *const_str_plain___wrapped__;
static PyObject *const_str_plain__add_module;
static PyObject *const_str_plain__get_module;
static PyObject *const_str_plain_binary_type;
static PyObject *const_str_plain_class_types;
extern PyObject *const_str_plain_collections;
extern PyObject *const_str_plain_contraction;
extern PyObject *const_str_plain_filterfalse;
extern PyObject *const_str_plain_find_module;
static PyObject *const_str_plain_html_parser;
static PyObject *const_str_plain_http_client;
extern PyObject *const_str_plain_load_module;
static PyObject *const_str_plain_remove_move;
static PyObject *const_str_plain_robotparser;
static PyObject *const_str_plain_tkinter_dnd;
static PyObject *const_str_plain_tkinter_tix;
static PyObject *const_str_plain_tkinter_ttk;
static PyObject *const_str_plain_urlretrieve;
static PyObject *const_str_plain_zip_longest;
extern PyObject *const_tuple_none_none_tuple;
extern PyObject *const_str_plain_ConfigParser;
extern PyObject *const_str_plain_HTTPSHandler;
static PyObject *const_str_plain_ProxyHandler;
static PyObject *const_str_plain_ScrolledText;
static PyObject *const_str_plain_SimpleDialog;
static PyObject *const_str_plain_SocketServer;
extern PyObject *const_str_plain___defaults__;
static PyObject *const_str_plain___get_module;
static PyObject *const_str_plain_addclosehook;
extern PyObject *const_str_plain_build_opener;
extern PyObject *const_str_plain_configparser;
static PyObject *const_str_plain_dummy_thread;
static PyObject *const_str_plain_func_closure;
extern PyObject *const_str_plain_func_globals;
static PyObject *const_str_plain_http_cookies;
extern PyObject *const_str_plain_ifilterfalse;
static PyObject *const_str_plain_izip_longest;
static PyObject *const_str_plain_methodcaller;
extern PyObject *const_str_plain_pathname2url;
static PyObject *const_str_plain_proxy_bypass;
static PyObject *const_str_plain_socketserver;
extern PyObject *const_str_plain_staticmethod;
extern PyObject *const_str_plain_string_types;
static PyObject *const_str_plain_tkFileDialog;
static PyObject *const_str_plain_tkMessageBox;
static PyObject *const_str_plain_tkinter_font;
static PyObject *const_str_plain_unquote_plus;
extern PyObject *const_str_plain_url2pathname;
static PyObject *const_str_plain_urllib_error;
static PyObject *const_str_plain_urllib_parse;
extern PyObject *const_str_plain_version_info;
static PyObject *const_str_plain_want_unicode;
static PyObject *const_str_plain_CGIHTTPServer;
extern PyObject *const_str_plain___metaclass__;
extern PyObject *const_str_plain___traceback__;
static PyObject *const_str_plain__dummy_thread;
static PyObject *const_str_plain__func_closure;
static PyObject *const_str_plain__func_globals;
static PyObject *const_str_plain_add_metaclass;
extern PyObject *const_str_plain_func_defaults;
static PyObject *const_str_plain_html_entities;
extern PyObject *const_str_plain_integer_types;
static PyObject *const_str_plain_known_modules;
static PyObject *const_str_plain_reload_module;
static PyObject *const_str_plain_xmlrpc_client;
static PyObject *const_str_plain_xmlrpc_server;
extern PyObject *const_tuple_str_plain_f_tuple;
extern PyObject *const_tuple_str_plain_i_tuple;
extern PyObject *const_tuple_str_plain_s_tuple;
extern PyObject *const_str_plain_BaseHTTPServer;
static PyObject *const_str_plain_FancyURLopener;
static PyObject *const_str_plain_MovedAttribute;
static PyObject *const_str_plain_OpenerDirector;
static PyObject *const_str_plain_UnknownHandler;
static PyObject *const_str_plain__func_defaults;
static PyObject *const_str_plain__import_module;
extern PyObject *const_str_plain_htmlentitydefs;
static PyObject *const_str_plain_http_cookiejar;
static PyObject *const_str_plain_install_opener;
static PyObject *const_str_plain_tkColorChooser;
static PyObject *const_str_plain_tkCommonDialog;
static PyObject *const_str_plain_tkSimpleDialog;
static PyObject *const_str_plain_tkinter_dialog;
extern PyObject *const_str_plain_unicode_escape;
static PyObject *const_str_plain_with_metaclass;
extern PyObject *const_str_plain_with_traceback;
static PyObject *const_tuple_str_plain_bs_tuple;
static PyObject *const_tuple_str_plain_it_tuple;
static PyObject *const_str_plain_CacheFTPHandler;
static PyObject *const_str_plain_HTTPPasswordMgr;
static PyObject *const_str_plain_RobotFileParser;
static PyObject *const_str_plain_email_mime_base;
static PyObject *const_str_plain_email_mime_text;
static PyObject *const_str_plain_get_method_self;
static PyObject *const_str_plain_six_module_name;
static PyObject *const_str_plain_temporary_class;
static PyObject *const_tuple_str_plain_buf_tuple;
extern PyObject *const_tuple_str_plain_cls_tuple;
extern PyObject *const_tuple_str_plain_obj_tuple;
extern PyObject *const_str_plain_SimpleHTTPServer;
static PyObject *const_str_plain_advance_iterator;
extern PyObject *const_tuple_str_plain_data_tuple;
static PyObject *const_tuple_str_plain_move_tuple;
extern PyObject *const_tuple_str_plain_name_tuple;
extern PyObject *const_tuple_str_plain_self_tuple;
static PyObject *const_int_pos_9223372036854775807;
static PyObject *const_str_plain__moved_attributes;
static PyObject *const_str_plain_get_function_code;
static PyObject *const_str_plain_tkinter_constants;
static PyObject *const_str_plain_HTTPErrorProcessor;
static PyObject *const_str_plain_SimpleXMLRPCServer;
static PyObject *const_str_plain_tkinter_filedialog;
static PyObject *const_str_plain_tkinter_messagebox;
static PyObject *const_str_plain_urllib_robotparser;
static PyObject *const_str_plain_HTTPCookieProcessor;
static PyObject *const_str_plain_HTTPRedirectHandler;
static PyObject *const_str_plain_create_bound_method;
static PyObject *const_str_plain_get_method_function;
static PyObject *const_tuple_str_plain_unbound_tuple;
static PyObject *const_tuple_str_plain_wrapped_tuple;
static PyObject *const_str_plain_ContentTooShortError;
static PyObject *const_str_plain_HTTPBasicAuthHandler;
static PyObject *const_str_plain__SixMetaPathImporter;
static PyObject *const_str_plain_email_mime_multipart;
static PyObject *const_str_plain_get_function_closure;
static PyObject *const_str_plain_get_function_globals;
static PyObject *const_str_plain_get_unbound_function;
static PyObject *const_str_plain_tkinter_colorchooser;
static PyObject *const_str_plain_tkinter_commondialog;
static PyObject *const_str_plain_tkinter_scrolledtext;
static PyObject *const_str_plain_tkinter_simpledialog;
static PyObject *const_str_plain_tkinter_tkfiledialog;
static PyObject *const_str_plain_HTTPDigestAuthHandler;
static PyObject *const_str_plain_ProxyBasicAuthHandler;
static PyObject *const_str_plain_get_function_defaults;
extern PyObject *const_tuple_int_pos_3_int_pos_4_tuple;
static PyObject *const_tuple_str_plain_metaclass_tuple;
static PyObject *const_str_plain_ProxyDigestAuthHandler;
static PyObject *const_str_plain_tkinter_tksimpledialog;
extern PyObject *const_tuple_str_plain___iterator_tuple;
static PyObject *const_str_plain_HTTPDefaultErrorHandler;
static PyObject *const_str_plain_Module_six_moves_urllib;
static PyObject *const_str_plain_AbstractBasicAuthHandler;
static PyObject *const_str_plain_AbstractDigestAuthHandler;
static PyObject *const_str_plain_submodule_search_locations;
static PyObject *const_tuple_str_plain_d_str_plain_kw_tuple;
static PyObject *const_tuple_str_plain_buf_str_plain_i_tuple;
static PyObject *const_str_plain_Module_six_moves_urllib_error;
static PyObject *const_str_plain_Module_six_moves_urllib_parse;
static PyObject *const_str_plain__urllib_error_moved_attributes;
static PyObject *const_str_plain__urllib_parse_moved_attributes;
static PyObject *const_tuple_str_plain_func_str_plain_doc_tuple;
static PyObject *const_tuple_str_plain_func_str_plain_obj_tuple;
static PyObject *const_str_plain_HTTPPasswordMgrWithDefaultRealm;
static PyObject *const_str_plain_Module_six_moves_urllib_request;
extern PyObject *const_tuple_str_plain_self_str_plain_attr_tuple;
extern PyObject *const_tuple_str_plain_self_str_plain_name_tuple;
static PyObject *const_list_1c82cc17d8f54cff757731adfdff677e_list;
static PyObject *const_str_plain_Module_six_moves_urllib_response;
static PyObject *const_str_plain__SixMetaPathImporter__get_module;
static PyObject *const_str_plain__urllib_request_moved_attributes;
static PyObject *const_tuple_str_plain_meta_str_plain_bases_tuple;
static PyObject *const_str_digest_0169683c5c983a17c51f860a928c4a97;
static PyObject *const_str_digest_0356c23693397b6ac72c52b53054d366;
static PyObject *const_str_digest_038da4de37b9fae5e5dc8e2222fa4464;
static PyObject *const_str_digest_04a2a81118bfe6a8bf82def427eb725e;
static PyObject *const_str_digest_059f0166b6de8c28ae0fd2e8a09cca3c;
static PyObject *const_str_digest_05b5cdd3c7e83b3fa9d39e4ee85a9ba1;
static PyObject *const_str_digest_06d8679011755bb12845261477126bbf;
static PyObject *const_str_digest_07ed22282f379a33c63322cb6fa7148c;
static PyObject *const_str_digest_0821e86cdc90e3da738c005321baa64b;
static PyObject *const_str_digest_08ac29e0848402ea6bc3e0c8cb3dfcdc;
static PyObject *const_str_digest_0b734ebd6887a8dc46e2f14d257a16b8;
extern PyObject *const_str_digest_0c0ade3270e84b23c2c92691eb86e41d;
static PyObject *const_str_digest_0e09ef170691cc3624a648893725e3c4;
static PyObject *const_str_digest_13245232aae43a43eae78ca7d93b91db;
static PyObject *const_str_digest_158128f324cd0b7e9a0c7369f05b3743;
extern PyObject *const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
static PyObject *const_str_digest_188f2c9a4861b76d1163e3a4f484ce9b;
static PyObject *const_str_digest_19c2afc84782be6b115356661b3dc1a0;
static PyObject *const_str_digest_1a742acb89687d10674efec310cd2bef;
static PyObject *const_str_digest_1b01bc9594fd6cb91f121e7eccdcf3b1;
static PyObject *const_str_digest_1e0e46504f4633daa57dd1a72640bd35;
static PyObject *const_str_digest_29132ab63318318953e9cfb883997203;
static PyObject *const_str_digest_2dabcdf82a9b3cf4ce1e16ab71cddca0;
static PyObject *const_str_digest_2f96a4211b4d639e460695c987d251ab;
static PyObject *const_str_digest_388526ed03a5066ea274085dc1936198;
static PyObject *const_str_digest_38bf16ac35f62a78959d9fd19e8c4165;
static PyObject *const_str_digest_38fead528e3756cdda5e24e082470cf8;
extern PyObject *const_str_digest_406441f6b7a138207569e78fe1f28d0f;
static PyObject *const_str_digest_43295792b57e43cfed1d0c6ee2500214;
extern PyObject *const_str_digest_49a4d41a6658a4332f5544766e631eed;
static PyObject *const_str_digest_4a6390c371ce14a2c4072627ff0defed;
static PyObject *const_str_digest_56b31a568cf176837a5c869e591c5b4c;
static PyObject *const_str_digest_58da1cb4116270886669e39677f27303;
static PyObject *const_str_digest_59bddfd0566fa79fd668740b6caaa5f1;
static PyObject *const_str_digest_6581edc0a8775bd3d76c51f0a9457543;
static PyObject *const_str_digest_691ff99aa130207f5f244721fce04c13;
static PyObject *const_str_digest_6932f06280679bface4e22a9e746d155;
static PyObject *const_str_digest_6a06b1b58e4eec22be4b2ce0ccc8adac;
static PyObject *const_str_digest_6b8760e9f9f00fbb357f678f1929504f;
static PyObject *const_str_digest_6eac8acc479fac8342428ff45bb85fd0;
static PyObject *const_str_digest_7188946be9751e3fc26a2d24642bfa16;
static PyObject *const_str_digest_7493ab77aa1289d14c9fc8089c1e4ac1;
static PyObject *const_str_digest_7e83b594ae6099bc88a4443d90f44b24;
extern PyObject *const_str_digest_7f8137798425a7fed2b8c5703b70d078;
static PyObject *const_str_digest_7fe9c7733eadb925be9feae252d25608;
static PyObject *const_str_digest_866224401e024c4a9cb3172c658ae16e;
static PyObject *const_str_digest_8708d49d5772ac1590ece7b167feb91d;
static PyObject *const_str_digest_89562957d609422690365d4cb79641a2;
static PyObject *const_str_digest_8a4df8c91c6ab620f014b18e0aea06b8;
static PyObject *const_str_digest_8aa52d3b6143cd660244d9ea53f613b9;
static PyObject *const_str_digest_90149c8c23f28b47e24e21946ab23241;
static PyObject *const_str_digest_9159c069c805578c25810202764533e4;
static PyObject *const_str_digest_9450654aa6509a3096d1b85acdc842e1;
static PyObject *const_str_digest_978d40b51d49c44d5c269d972160b3a7;
static PyObject *const_str_digest_97b62ec9140102505875d3024d9d1138;
static PyObject *const_str_digest_97dd821e48fd1133a99228223a7a624f;
static PyObject *const_str_digest_9bd8782ae1b14069f74b2d461711434b;
static PyObject *const_str_digest_9bf6a431c2e906a1aa9444b995baca8a;
static PyObject *const_str_digest_9d16f9bc58d94c455589250070f09113;
static PyObject *const_str_digest_9d19af47c5776306ee2273813f3235e4;
static PyObject *const_str_digest_9d50ac5ae24ef4440e8564c511f58900;
static PyObject *const_str_digest_a4667b520b212a16317829bcb290bcb4;
static PyObject *const_str_digest_ab1bdb7c01b4336ff9cbcf1b76b05a09;
static PyObject *const_str_digest_adedf1e45df37d82c8dbf3619925df24;
extern PyObject *const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
static PyObject *const_str_digest_badec679d45bb7fa1a1c2725600ec0d4;
static PyObject *const_str_digest_bd1a35a2038bbe33c91f618ec098e210;
static PyObject *const_str_digest_bdc3e7b00657930f886f177b307c781c;
static PyObject *const_str_digest_c3ff2b11420d90920c8b3e4b73e88e7b;
static PyObject *const_str_digest_c55afac70b5c0b7c79a14ffbb790bc92;
static PyObject *const_str_digest_c59534a68517fc7a752bdc1e23491aec;
static PyObject *const_str_digest_cc0643423e5f80c068642401624a6285;
static PyObject *const_str_digest_d468adb40f20c74c8d11c4aeb490b79e;
static PyObject *const_str_digest_d4f8b778671d16d0a1e087f63714304b;
static PyObject *const_str_digest_d5353604f715269e7545044635e49ff2;
static PyObject *const_str_digest_dc54181a3936c5f55b64d53a8e6a933e;
extern PyObject *const_str_digest_e08e7740844024234d1fdfbba1279b3c;
static PyObject *const_str_digest_e43dc6c6f1fdd10528f6bfec991eeb0f;
static PyObject *const_str_digest_e4ee13473f833011296770093fbcd4ad;
static PyObject *const_str_digest_e6fd7101a265124cf45cc72b8bcf397f;
static PyObject *const_str_digest_e7b673eef7c36db3f997aef57206960c;
static PyObject *const_str_digest_e8957dc4008aac6c392cfc0c2f5141cb;
static PyObject *const_str_digest_ea251ffbbc28e76ef31cec7d1a3e8e52;
static PyObject *const_str_digest_eb79640ec86e1bff202229c8638bd31b;
static PyObject *const_str_digest_edd2a5056add571faece3956c804cd41;
static PyObject *const_str_digest_ee421aaef1e8e27d2ada1b5e28854b9d;
extern PyObject *const_str_digest_eed4497c64beafc15e430bdc1f450b89;
static PyObject *const_str_digest_f5b89d17853d1ad9fecbda5a3ec09b77;
static PyObject *const_str_digest_f67fab5bcd00878ed60153fbbaf56263;
static PyObject *const_str_digest_f8506addb3f2fabe0b7f3b137fbfcdd7;
static PyObject *const_str_digest_fa6bd76d50648a99a4eba25a358f0f5c;
static PyObject *const_str_digest_fd54171dd0d710d8acbf194e39f3cb84;
static PyObject *const_str_plain__urllib_response_moved_attributes;
extern PyObject *const_tuple_str_plain_args_str_plain_kwargs_tuple;
extern PyObject *const_tuple_str_plain_self_str_plain_module_tuple;
static PyObject *const_tuple_020d0e1781882f13d9436a33b4e49b7b_tuple;
static PyObject *const_tuple_23e241754072378d4aca55ebd413fe81_tuple;
static PyObject *const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple;
static PyObject *const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple;
static PyObject *const_tuple_90e06424913ba9ad885f60767479fe37_tuple;
static PyObject *const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple;
static PyObject *const_tuple_b8b6e3942a2592a324589bd326168972_tuple;
static PyObject *const_str_plain_Module_six_moves_urllib_robotparser;
static PyObject *const_tuple_str_plain_self_str_plain_fullname_tuple;
static PyObject *const_list_str_plain___doc___str_plain___name___list;
static PyObject *const_str_plain__urllib_robotparser_moved_attributes;
static PyObject *const_tuple_str_plain_wrapped_str_plain_wrapper_tuple;
static PyObject *const_tuple_str_plain_metaclass_str_plain_wrapper_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_six_module_name_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_obj_str_plain_tp_tuple;
extern PyObject *const_tuple_str_plain_tp_str_plain_value_str_plain_tb_tuple;
static PyObject *const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_mod_str_plain_fullnames_tuple;
static PyObject *const_tuple_str_plain_meta_str_plain_bases_str_plain_metaclass_tuple;
static PyObject *const_tuple_str_plain__code__str_plain__globs__str_plain__locs__tuple;
static PyObject *const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple;

static void _initModuleConstants(void)
{
    const_str_plain_Tix = UNSTREAM_STRING( &constant_bin[ 2605171 ], 3, 1 );
    const_str_plain_six = UNSTREAM_STRING( &constant_bin[ 98494 ], 3, 1 );
    const_str_plain_ttk = UNSTREAM_STRING( &constant_bin[ 2605174 ], 3, 1 );
    const_unicode_space = UNSTREAM_UNICODE( &constant_bin[ 5 ], 1 );
    const_str_plain_gdbm = UNSTREAM_STRING( &constant_bin[ 2605177 ], 4, 1 );
    const_str_plain_imap = UNSTREAM_STRING( &constant_bin[ 2605181 ], 4, 1 );
    const_str_plain_Queue = UNSTREAM_STRING( &constant_bin[ 2605185 ], 5, 1 );
    const_str_plain_Tkdnd = UNSTREAM_STRING( &constant_bin[ 2605190 ], 5, 1 );
    const_str_plain_bases = UNSTREAM_STRING( &constant_bin[ 52052 ], 5, 1 );
    const_str_plain_exec_ = UNSTREAM_STRING( &constant_bin[ 80789 ], 5, 1 );
    const_str_plain_lists = UNSTREAM_STRING( &constant_bin[ 328082 ], 5, 1 );
    const_str_plain_moves = UNSTREAM_STRING( &constant_bin[ 138558 ], 5, 1 );
    const_str_plain_slots = UNSTREAM_STRING( &constant_bin[ 2123422 ], 5, 1 );
    const_str_plain_space = UNSTREAM_STRING( &constant_bin[ 18386 ], 5, 1 );
    const_unicode_newline = UNSTREAM_UNICODE( &constant_bin[ 331286 ], 1 );
    const_str_plain_Cookie = UNSTREAM_STRING( &constant_bin[ 2605195 ], 6, 1 );
    const_str_plain_Dialog = UNSTREAM_STRING( &constant_bin[ 2605201 ], 6, 1 );
    const_str_plain__code_ = UNSTREAM_STRING( &constant_bin[ 73705 ], 6, 1 );
    const_str_plain__locs_ = UNSTREAM_STRING( &constant_bin[ 328990 ], 6, 1 );
    const_str_plain_print_ = UNSTREAM_STRING( &constant_bin[ 192954 ], 6, 1 );
    const_str_plain_thread = UNSTREAM_STRING( &constant_bin[ 295 ], 6, 1 );
    const_str_plain_tkFont = UNSTREAM_STRING( &constant_bin[ 2605207 ], 6, 1 );
    const_str_plain_MAXSIZE = UNSTREAM_STRING( &constant_bin[ 2605213 ], 7, 1 );
    const_str_plain_Tkinter = UNSTREAM_STRING( &constant_bin[ 2605220 ], 7, 1 );
    const_str_plain__globs_ = UNSTREAM_STRING( &constant_bin[ 328937 ], 7, 1 );
    const_str_plain__thread = UNSTREAM_STRING( &constant_bin[ 116785 ], 7, 1 );
    const_str_plain_addbase = UNSTREAM_STRING( &constant_bin[ 2605227 ], 7, 1 );
    const_str_plain_addinfo = UNSTREAM_STRING( &constant_bin[ 2605234 ], 7, 1 );
    const_str_plain_dbm_gnu = UNSTREAM_STRING( &constant_bin[ 2605241 ], 7, 1 );
    const_str_plain_getitem = UNSTREAM_STRING( &constant_bin[ 1347654 ], 7, 1 );
    const_str_plain_ifilter = UNSTREAM_STRING( &constant_bin[ 2605248 ], 7, 1 );
    const_str_plain_im_self = UNSTREAM_STRING( &constant_bin[ 633606 ], 7, 1 );
    const_str_plain_new_mod = UNSTREAM_STRING( &constant_bin[ 243071 ], 7, 1 );
    const_str_plain_old_mod = UNSTREAM_STRING( &constant_bin[ 243010 ], 7, 1 );
    const_str_plain_reprlib = UNSTREAM_STRING( &constant_bin[ 2605255 ], 7, 1 );
    const_str_plain_tkinter = UNSTREAM_STRING( &constant_bin[ 2605262 ], 7, 1 );
    const_str_plain_unbound = UNSTREAM_STRING( &constant_bin[ 327776 ], 7, 1 );
    const_str_plain_wrapped = UNSTREAM_STRING( &constant_bin[ 329151 ], 7, 1 );
    const_int_pos_2147483647 = PyInt_FromLong( 2147483647l );
    const_str_plain_Iterator = UNSTREAM_STRING( &constant_bin[ 192865 ], 8, 1 );
    const_str_plain_UserDict = UNSTREAM_STRING( &constant_bin[ 2605269 ], 8, 1 );
    const_str_plain_UserList = UNSTREAM_STRING( &constant_bin[ 2605277 ], 8, 1 );
    const_str_plain___spec__ = UNSTREAM_STRING( &constant_bin[ 328210 ], 8, 1 );
    const_str_plain__add_doc = UNSTREAM_STRING( &constant_bin[ 327742 ], 8, 1 );
    const_str_plain__resolve = UNSTREAM_STRING( &constant_bin[ 136352 ], 8, 1 );
    const_str_plain_add_move = UNSTREAM_STRING( &constant_bin[ 2605285 ], 8, 1 );
    const_str_plain_byte2int = UNSTREAM_STRING( &constant_bin[ 2605293 ], 8, 1 );
    const_str_plain_get_code = UNSTREAM_STRING( &constant_bin[ 2605301 ], 8, 1 );
    const_str_plain_int2byte = UNSTREAM_STRING( &constant_bin[ 2605309 ], 8, 1 );
    const_str_plain_old_attr = UNSTREAM_STRING( &constant_bin[ 328499 ], 8, 1 );
    const_str_plain_parse_qs = UNSTREAM_STRING( &constant_bin[ 2605317 ], 8, 1 );
    const_str_plain_response = UNSTREAM_STRING( &constant_bin[ 31053 ], 8, 1 );
    const_str_plain_ClassType = UNSTREAM_STRING( &constant_bin[ 2605325 ], 9, 1 );
    const_str_plain_URLopener = UNSTREAM_STRING( &constant_bin[ 2605334 ], 9, 1 );
    const_str_plain___slots__ = UNSTREAM_STRING( &constant_bin[ 2605343 ], 9, 1 );
    const_str_plain__importer = UNSTREAM_STRING( &constant_bin[ 225550 ], 9, 1 );
    const_str_plain_cookielib = UNSTREAM_STRING( &constant_bin[ 2605352 ], 9, 1 );
    const_str_plain_fullnames = UNSTREAM_STRING( &constant_bin[ 328667 ], 9, 1 );
    const_str_plain_iterbytes = UNSTREAM_STRING( &constant_bin[ 2605361 ], 9, 1 );
    const_str_plain_iterlists = UNSTREAM_STRING( &constant_bin[ 328078 ], 9, 1 );
    const_str_plain_meta_path = UNSTREAM_STRING( &constant_bin[ 2605370 ], 9, 1 );
    const_str_plain_metaclass = UNSTREAM_STRING( &constant_bin[ 329204 ], 9, 1 );
    const_str_plain_orig_vars = UNSTREAM_STRING( &constant_bin[ 329310 ], 9, 1 );
    const_str_plain_parse_qsl = UNSTREAM_STRING( &constant_bin[ 2605379 ], 9, 1 );
    const_str_plain_raw_input = UNSTREAM_STRING( &constant_bin[ 2605388 ], 9, 1 );
    const_str_plain_slots_var = UNSTREAM_STRING( &constant_bin[ 2605397 ], 9, 1 );
    const_str_plain_text_type = UNSTREAM_STRING( &constant_bin[ 2605406 ], 9, 1 );
    const_str_plain_urldefrag = UNSTREAM_STRING( &constant_bin[ 2605415 ], 9, 1 );
    const_str_plain_urlencode = UNSTREAM_STRING( &constant_bin[ 2591935 ], 9, 1 );
    const_str_plain_xmlrpclib = UNSTREAM_STRING( &constant_bin[ 2605424 ], 9, 1 );
    const_str_plain_FTPHandler = UNSTREAM_STRING( &constant_bin[ 2605433 ], 10, 1 );
    const_str_plain_FileDialog = UNSTREAM_STRING( &constant_bin[ 2605443 ], 10, 1 );
    const_str_plain_HTMLParser = UNSTREAM_STRING( &constant_bin[ 2605453 ], 10, 1 );
    const_str_plain_UserString = UNSTREAM_STRING( &constant_bin[ 2605463 ], 10, 1 );
    const_str_plain__LazyDescr = UNSTREAM_STRING( &constant_bin[ 326790 ], 10, 1 );
    const_str_plain__func_code = UNSTREAM_STRING( &constant_bin[ 327913 ], 10, 1 );
    const_str_plain__meth_func = UNSTREAM_STRING( &constant_bin[ 327814 ], 10, 1 );
    const_str_plain__meth_self = UNSTREAM_STRING( &constant_bin[ 327846 ], 10, 1 );
    const_str_plain_addinfourl = UNSTREAM_STRING( &constant_bin[ 2605473 ], 10, 1 );
    const_str_plain_get_source = UNSTREAM_STRING( &constant_bin[ 2605483 ], 10, 1 );
    const_str_plain_getproxies = UNSTREAM_STRING( &constant_bin[ 2605493 ], 10, 1 );
    const_str_plain_indexbytes = UNSTREAM_STRING( &constant_bin[ 2605503 ], 10, 1 );
    const_str_plain_is_package = UNSTREAM_STRING( &constant_bin[ 2605513 ], 10, 1 );
    const_str_plain_itervalues = UNSTREAM_STRING( &constant_bin[ 328046 ], 10, 1 );
    const_str_plain_quote_plus = UNSTREAM_STRING( &constant_bin[ 2605523 ], 10, 1 );
    const_str_plain_splitquery = UNSTREAM_STRING( &constant_bin[ 2605533 ], 10, 1 );
    const_str_plain_this_bases = UNSTREAM_STRING( &constant_bin[ 2605543 ], 10, 1 );
    const_str_plain_urlcleanup = UNSTREAM_STRING( &constant_bin[ 2605553 ], 10, 1 );
    const_str_plain_BaseHandler = UNSTREAM_STRING( &constant_bin[ 2605563 ], 11, 1 );
    const_str_plain_FileHandler = UNSTREAM_STRING( &constant_bin[ 2605574 ], 11, 1 );
    const_str_plain_HTTPHandler = UNSTREAM_STRING( &constant_bin[ 2605585 ], 11, 1 );
    const_str_plain_MovedModule = UNSTREAM_STRING( &constant_bin[ 326933 ], 11, 1 );
    const_str_plain_ParseResult = UNSTREAM_STRING( &constant_bin[ 2605596 ], 11, 1 );
    const_str_plain_SplitResult = UNSTREAM_STRING( &constant_bin[ 2605607 ], 11, 1 );
    const_str_plain_Tkconstants = UNSTREAM_STRING( &constant_bin[ 2605618 ], 11, 1 );
    const_str_plain__LazyModule = UNSTREAM_STRING( &constant_bin[ 326864 ], 11, 1 );
    const_str_plain__MovedItems = UNSTREAM_STRING( &constant_bin[ 327005 ], 11, 1 );
    const_str_plain___closure__ = UNSTREAM_STRING( &constant_bin[ 2605629 ], 11, 1 );
    const_str_plain___package__ = UNSTREAM_STRING( &constant_bin[ 2605640 ], 11, 1 );
    const_str_plain___weakref__ = UNSTREAM_STRING( &constant_bin[ 2605651 ], 11, 1 );
    const_str_plain__add_module = UNSTREAM_STRING( &constant_bin[ 2605662 ], 11, 1 );
    const_str_plain__get_module = UNSTREAM_STRING( &constant_bin[ 2605673 ], 11, 1 );
    const_str_plain_binary_type = UNSTREAM_STRING( &constant_bin[ 2605684 ], 11, 1 );
    const_str_plain_class_types = UNSTREAM_STRING( &constant_bin[ 2605695 ], 11, 1 );
    const_str_plain_html_parser = UNSTREAM_STRING( &constant_bin[ 2605706 ], 11, 1 );
    const_str_plain_http_client = UNSTREAM_STRING( &constant_bin[ 2605717 ], 11, 1 );
    const_str_plain_remove_move = UNSTREAM_STRING( &constant_bin[ 2605728 ], 11, 1 );
    const_str_plain_robotparser = UNSTREAM_STRING( &constant_bin[ 327552 ], 11, 1 );
    const_str_plain_tkinter_dnd = UNSTREAM_STRING( &constant_bin[ 2605739 ], 11, 1 );
    const_str_plain_tkinter_tix = UNSTREAM_STRING( &constant_bin[ 2605750 ], 11, 1 );
    const_str_plain_tkinter_ttk = UNSTREAM_STRING( &constant_bin[ 2605761 ], 11, 1 );
    const_str_plain_urlretrieve = UNSTREAM_STRING( &constant_bin[ 2605772 ], 11, 1 );
    const_str_plain_zip_longest = UNSTREAM_STRING( &constant_bin[ 2605783 ], 11, 1 );
    const_str_plain_ProxyHandler = UNSTREAM_STRING( &constant_bin[ 2605794 ], 12, 1 );
    const_str_plain_ScrolledText = UNSTREAM_STRING( &constant_bin[ 2605806 ], 12, 1 );
    const_str_plain_SimpleDialog = UNSTREAM_STRING( &constant_bin[ 2605818 ], 12, 1 );
    const_str_plain_SocketServer = UNSTREAM_STRING( &constant_bin[ 2605830 ], 12, 1 );
    const_str_plain___get_module = UNSTREAM_STRING( &constant_bin[ 2605842 ], 12, 1 );
    const_str_plain_addclosehook = UNSTREAM_STRING( &constant_bin[ 2605854 ], 12, 1 );
    const_str_plain_dummy_thread = UNSTREAM_STRING( &constant_bin[ 2605866 ], 12, 1 );
    const_str_plain_func_closure = UNSTREAM_STRING( &constant_bin[ 327879 ], 12, 1 );
    const_str_plain_http_cookies = UNSTREAM_STRING( &constant_bin[ 2605878 ], 12, 1 );
    const_str_plain_izip_longest = UNSTREAM_STRING( &constant_bin[ 2605890 ], 12, 1 );
    const_str_plain_methodcaller = UNSTREAM_STRING( &constant_bin[ 2605902 ], 12, 1 );
    const_str_plain_proxy_bypass = UNSTREAM_STRING( &constant_bin[ 2605914 ], 12, 1 );
    const_str_plain_socketserver = UNSTREAM_STRING( &constant_bin[ 2605926 ], 12, 1 );
    const_str_plain_tkFileDialog = UNSTREAM_STRING( &constant_bin[ 2605938 ], 12, 1 );
    const_str_plain_tkMessageBox = UNSTREAM_STRING( &constant_bin[ 2605950 ], 12, 1 );
    const_str_plain_tkinter_font = UNSTREAM_STRING( &constant_bin[ 2605962 ], 12, 1 );
    const_str_plain_unquote_plus = UNSTREAM_STRING( &constant_bin[ 2605974 ], 12, 1 );
    const_str_plain_urllib_error = UNSTREAM_STRING( &constant_bin[ 327226 ], 12, 1 );
    const_str_plain_urllib_parse = UNSTREAM_STRING( &constant_bin[ 327123 ], 12, 1 );
    const_str_plain_want_unicode = UNSTREAM_STRING( &constant_bin[ 329042 ], 12, 1 );
    const_str_plain_CGIHTTPServer = UNSTREAM_STRING( &constant_bin[ 2605986 ], 13, 1 );
    const_str_plain__dummy_thread = UNSTREAM_STRING( &constant_bin[ 2605999 ], 13, 1 );
    const_str_plain__func_closure = UNSTREAM_STRING( &constant_bin[ 327878 ], 13, 1 );
    const_str_plain__func_globals = UNSTREAM_STRING( &constant_bin[ 327981 ], 13, 1 );
    const_str_plain_add_metaclass = UNSTREAM_STRING( &constant_bin[ 2606012 ], 13, 1 );
    const_str_plain_html_entities = UNSTREAM_STRING( &constant_bin[ 2606025 ], 13, 1 );
    const_str_plain_known_modules = UNSTREAM_STRING( &constant_bin[ 2606038 ], 13, 1 );
    const_str_plain_reload_module = UNSTREAM_STRING( &constant_bin[ 2606051 ], 13, 1 );
    const_str_plain_xmlrpc_client = UNSTREAM_STRING( &constant_bin[ 2606064 ], 13, 1 );
    const_str_plain_xmlrpc_server = UNSTREAM_STRING( &constant_bin[ 2606077 ], 13, 1 );
    const_str_plain_FancyURLopener = UNSTREAM_STRING( &constant_bin[ 2606090 ], 14, 1 );
    const_str_plain_MovedAttribute = UNSTREAM_STRING( &constant_bin[ 326897 ], 14, 1 );
    const_str_plain_OpenerDirector = UNSTREAM_STRING( &constant_bin[ 2606104 ], 14, 1 );
    const_str_plain_UnknownHandler = UNSTREAM_STRING( &constant_bin[ 2606118 ], 14, 1 );
    const_str_plain__func_defaults = UNSTREAM_STRING( &constant_bin[ 327945 ], 14, 1 );
    const_str_plain__import_module = UNSTREAM_STRING( &constant_bin[ 328317 ], 14, 1 );
    const_str_plain_http_cookiejar = UNSTREAM_STRING( &constant_bin[ 2606132 ], 14, 1 );
    const_str_plain_install_opener = UNSTREAM_STRING( &constant_bin[ 2606146 ], 14, 1 );
    const_str_plain_tkColorChooser = UNSTREAM_STRING( &constant_bin[ 2606160 ], 14, 1 );
    const_str_plain_tkCommonDialog = UNSTREAM_STRING( &constant_bin[ 2606174 ], 14, 1 );
    const_str_plain_tkSimpleDialog = UNSTREAM_STRING( &constant_bin[ 2606188 ], 14, 1 );
    const_str_plain_tkinter_dialog = UNSTREAM_STRING( &constant_bin[ 2606202 ], 14, 1 );
    const_str_plain_with_metaclass = UNSTREAM_STRING( &constant_bin[ 2606216 ], 14, 1 );
    const_tuple_str_plain_bs_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_bs_tuple, 0, const_str_plain_bs ); Py_INCREF( const_str_plain_bs );
    const_tuple_str_plain_it_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_it_tuple, 0, const_str_plain_it ); Py_INCREF( const_str_plain_it );
    const_str_plain_CacheFTPHandler = UNSTREAM_STRING( &constant_bin[ 2606230 ], 15, 1 );
    const_str_plain_HTTPPasswordMgr = UNSTREAM_STRING( &constant_bin[ 2606245 ], 15, 1 );
    const_str_plain_RobotFileParser = UNSTREAM_STRING( &constant_bin[ 2606260 ], 15, 1 );
    const_str_plain_email_mime_base = UNSTREAM_STRING( &constant_bin[ 2606275 ], 15, 1 );
    const_str_plain_email_mime_text = UNSTREAM_STRING( &constant_bin[ 2606290 ], 15, 1 );
    const_str_plain_get_method_self = UNSTREAM_STRING( &constant_bin[ 2606305 ], 15, 1 );
    const_str_plain_six_module_name = UNSTREAM_STRING( &constant_bin[ 328606 ], 15, 1 );
    const_str_plain_temporary_class = UNSTREAM_STRING( &constant_bin[ 2606320 ], 15, 1 );
    const_tuple_str_plain_buf_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_buf_tuple, 0, const_str_plain_buf ); Py_INCREF( const_str_plain_buf );
    const_str_plain_advance_iterator = UNSTREAM_STRING( &constant_bin[ 327704 ], 16, 1 );
    const_tuple_str_plain_move_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_move_tuple, 0, const_str_plain_move ); Py_INCREF( const_str_plain_move );
    const_int_pos_9223372036854775807 = PyInt_FromLong( 9223372036854775807l );
    const_str_plain__moved_attributes = UNSTREAM_STRING( &constant_bin[ 326966 ], 17, 1 );
    const_str_plain_get_function_code = UNSTREAM_STRING( &constant_bin[ 2606335 ], 17, 1 );
    const_str_plain_tkinter_constants = UNSTREAM_STRING( &constant_bin[ 2606352 ], 17, 1 );
    const_str_plain_HTTPErrorProcessor = UNSTREAM_STRING( &constant_bin[ 2606369 ], 18, 1 );
    const_str_plain_SimpleXMLRPCServer = UNSTREAM_STRING( &constant_bin[ 2606387 ], 18, 1 );
    const_str_plain_tkinter_filedialog = UNSTREAM_STRING( &constant_bin[ 2606405 ], 18, 1 );
    const_str_plain_tkinter_messagebox = UNSTREAM_STRING( &constant_bin[ 2606423 ], 18, 1 );
    const_str_plain_urllib_robotparser = UNSTREAM_STRING( &constant_bin[ 327545 ], 18, 1 );
    const_str_plain_HTTPCookieProcessor = UNSTREAM_STRING( &constant_bin[ 2606441 ], 19, 1 );
    const_str_plain_HTTPRedirectHandler = UNSTREAM_STRING( &constant_bin[ 2606460 ], 19, 1 );
    const_str_plain_create_bound_method = UNSTREAM_STRING( &constant_bin[ 2606479 ], 19, 1 );
    const_str_plain_get_method_function = UNSTREAM_STRING( &constant_bin[ 2606498 ], 19, 1 );
    const_tuple_str_plain_unbound_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_unbound_tuple, 0, const_str_plain_unbound ); Py_INCREF( const_str_plain_unbound );
    const_tuple_str_plain_wrapped_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_wrapped_tuple, 0, const_str_plain_wrapped ); Py_INCREF( const_str_plain_wrapped );
    const_str_plain_ContentTooShortError = UNSTREAM_STRING( &constant_bin[ 2606517 ], 20, 1 );
    const_str_plain_HTTPBasicAuthHandler = UNSTREAM_STRING( &constant_bin[ 2606537 ], 20, 1 );
    const_str_plain__SixMetaPathImporter = UNSTREAM_STRING( &constant_bin[ 326822 ], 20, 1 );
    const_str_plain_email_mime_multipart = UNSTREAM_STRING( &constant_bin[ 2606557 ], 20, 1 );
    const_str_plain_get_function_closure = UNSTREAM_STRING( &constant_bin[ 2606577 ], 20, 1 );
    const_str_plain_get_function_globals = UNSTREAM_STRING( &constant_bin[ 2606597 ], 20, 1 );
    const_str_plain_get_unbound_function = UNSTREAM_STRING( &constant_bin[ 327772 ], 20, 1 );
    const_str_plain_tkinter_colorchooser = UNSTREAM_STRING( &constant_bin[ 2606617 ], 20, 1 );
    const_str_plain_tkinter_commondialog = UNSTREAM_STRING( &constant_bin[ 2606637 ], 20, 1 );
    const_str_plain_tkinter_scrolledtext = UNSTREAM_STRING( &constant_bin[ 2606657 ], 20, 1 );
    const_str_plain_tkinter_simpledialog = UNSTREAM_STRING( &constant_bin[ 2606677 ], 20, 1 );
    const_str_plain_tkinter_tkfiledialog = UNSTREAM_STRING( &constant_bin[ 2606697 ], 20, 1 );
    const_str_plain_HTTPDigestAuthHandler = UNSTREAM_STRING( &constant_bin[ 2606717 ], 21, 1 );
    const_str_plain_ProxyBasicAuthHandler = UNSTREAM_STRING( &constant_bin[ 2606738 ], 21, 1 );
    const_str_plain_get_function_defaults = UNSTREAM_STRING( &constant_bin[ 2606759 ], 21, 1 );
    const_tuple_str_plain_metaclass_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_metaclass_tuple, 0, const_str_plain_metaclass ); Py_INCREF( const_str_plain_metaclass );
    const_str_plain_ProxyDigestAuthHandler = UNSTREAM_STRING( &constant_bin[ 2606780 ], 22, 1 );
    const_str_plain_tkinter_tksimpledialog = UNSTREAM_STRING( &constant_bin[ 2606802 ], 22, 1 );
    const_str_plain_HTTPDefaultErrorHandler = UNSTREAM_STRING( &constant_bin[ 2606824 ], 23, 1 );
    const_str_plain_Module_six_moves_urllib = UNSTREAM_STRING( &constant_bin[ 327174 ], 23, 1 );
    const_str_plain_AbstractBasicAuthHandler = UNSTREAM_STRING( &constant_bin[ 2606847 ], 24, 1 );
    const_str_plain_AbstractDigestAuthHandler = UNSTREAM_STRING( &constant_bin[ 2606871 ], 25, 1 );
    const_str_plain_submodule_search_locations = UNSTREAM_STRING( &constant_bin[ 2606896 ], 26, 1 );
    const_tuple_str_plain_d_str_plain_kw_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_d_str_plain_kw_tuple, 0, const_str_plain_d ); Py_INCREF( const_str_plain_d );
    PyTuple_SET_ITEM( const_tuple_str_plain_d_str_plain_kw_tuple, 1, const_str_plain_kw ); Py_INCREF( const_str_plain_kw );
    const_tuple_str_plain_buf_str_plain_i_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_buf_str_plain_i_tuple, 0, const_str_plain_buf ); Py_INCREF( const_str_plain_buf );
    PyTuple_SET_ITEM( const_tuple_str_plain_buf_str_plain_i_tuple, 1, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    const_str_plain_Module_six_moves_urllib_error = UNSTREAM_STRING( &constant_bin[ 327277 ], 29, 1 );
    const_str_plain_Module_six_moves_urllib_parse = UNSTREAM_STRING( &constant_bin[ 327174 ], 29, 1 );
    const_str_plain__urllib_error_moved_attributes = UNSTREAM_STRING( &constant_bin[ 327225 ], 30, 1 );
    const_str_plain__urllib_parse_moved_attributes = UNSTREAM_STRING( &constant_bin[ 327122 ], 30, 1 );
    const_tuple_str_plain_func_str_plain_doc_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_doc_tuple, 0, const_str_plain_func ); Py_INCREF( const_str_plain_func );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_doc_tuple, 1, const_str_plain_doc ); Py_INCREF( const_str_plain_doc );
    const_tuple_str_plain_func_str_plain_obj_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_obj_tuple, 0, const_str_plain_func ); Py_INCREF( const_str_plain_func );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_obj_tuple, 1, const_str_plain_obj ); Py_INCREF( const_str_plain_obj );
    const_str_plain_HTTPPasswordMgrWithDefaultRealm = UNSTREAM_STRING( &constant_bin[ 2606922 ], 31, 1 );
    const_str_plain_Module_six_moves_urllib_request = UNSTREAM_STRING( &constant_bin[ 327382 ], 31, 1 );
    const_list_1c82cc17d8f54cff757731adfdff677e_list = PyList_New( 5 );
    PyList_SET_ITEM( const_list_1c82cc17d8f54cff757731adfdff677e_list, 0, const_str_plain_parse ); Py_INCREF( const_str_plain_parse );
    PyList_SET_ITEM( const_list_1c82cc17d8f54cff757731adfdff677e_list, 1, const_str_plain_error ); Py_INCREF( const_str_plain_error );
    PyList_SET_ITEM( const_list_1c82cc17d8f54cff757731adfdff677e_list, 2, const_str_plain_request ); Py_INCREF( const_str_plain_request );
    PyList_SET_ITEM( const_list_1c82cc17d8f54cff757731adfdff677e_list, 3, const_str_plain_response ); Py_INCREF( const_str_plain_response );
    PyList_SET_ITEM( const_list_1c82cc17d8f54cff757731adfdff677e_list, 4, const_str_plain_robotparser ); Py_INCREF( const_str_plain_robotparser );
    const_str_plain_Module_six_moves_urllib_response = UNSTREAM_STRING( &constant_bin[ 327490 ], 32, 1 );
    const_str_plain__SixMetaPathImporter__get_module = UNSTREAM_STRING( &constant_bin[ 2606953 ], 32, 1 );
    const_str_plain__urllib_request_moved_attributes = UNSTREAM_STRING( &constant_bin[ 327328 ], 32, 1 );
    const_tuple_str_plain_meta_str_plain_bases_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_meta_str_plain_bases_tuple, 0, const_str_plain_meta ); Py_INCREF( const_str_plain_meta );
    PyTuple_SET_ITEM( const_tuple_str_plain_meta_str_plain_bases_tuple, 1, const_str_plain_bases ); Py_INCREF( const_str_plain_bases );
    const_str_digest_0169683c5c983a17c51f860a928c4a97 = UNSTREAM_STRING( &constant_bin[ 2606985 ], 20, 0 );
    const_str_digest_0356c23693397b6ac72c52b53054d366 = UNSTREAM_STRING( &constant_bin[ 2607005 ], 16, 0 );
    const_str_digest_038da4de37b9fae5e5dc8e2222fa4464 = UNSTREAM_STRING( &constant_bin[ 2607021 ], 12, 0 );
    const_str_digest_04a2a81118bfe6a8bf82def427eb725e = UNSTREAM_STRING( &constant_bin[ 2607033 ], 54, 0 );
    const_str_digest_059f0166b6de8c28ae0fd2e8a09cca3c = UNSTREAM_STRING( &constant_bin[ 2607087 ], 18, 0 );
    const_str_digest_05b5cdd3c7e83b3fa9d39e4ee85a9ba1 = UNSTREAM_STRING( &constant_bin[ 2607105 ], 30, 0 );
    const_str_digest_06d8679011755bb12845261477126bbf = UNSTREAM_STRING( &constant_bin[ 2607135 ], 18, 0 );
    const_str_digest_07ed22282f379a33c63322cb6fa7148c = UNSTREAM_STRING( &constant_bin[ 2607153 ], 18, 0 );
    const_str_digest_0821e86cdc90e3da738c005321baa64b = UNSTREAM_STRING( &constant_bin[ 2607171 ], 18, 0 );
    const_str_digest_08ac29e0848402ea6bc3e0c8cb3dfcdc = UNSTREAM_STRING( &constant_bin[ 2607189 ], 17, 0 );
    const_str_digest_0b734ebd6887a8dc46e2f14d257a16b8 = UNSTREAM_STRING( &constant_bin[ 2607206 ], 21, 0 );
    const_str_digest_0e09ef170691cc3624a648893725e3c4 = UNSTREAM_STRING( &constant_bin[ 2607227 ], 58, 0 );
    const_str_digest_13245232aae43a43eae78ca7d93b91db = UNSTREAM_STRING( &constant_bin[ 2607285 ], 18, 0 );
    const_str_digest_158128f324cd0b7e9a0c7369f05b3743 = UNSTREAM_STRING( &constant_bin[ 2607303 ], 55, 0 );
    const_str_digest_188f2c9a4861b76d1163e3a4f484ce9b = UNSTREAM_STRING( &constant_bin[ 2607358 ], 27, 0 );
    const_str_digest_19c2afc84782be6b115356661b3dc1a0 = UNSTREAM_STRING( &constant_bin[ 2607385 ], 11, 0 );
    const_str_digest_1a742acb89687d10674efec310cd2bef = UNSTREAM_STRING( &constant_bin[ 2607396 ], 20, 0 );
    const_str_digest_1b01bc9594fd6cb91f121e7eccdcf3b1 = UNSTREAM_STRING( &constant_bin[ 2607416 ], 11, 0 );
    const_str_digest_1e0e46504f4633daa57dd1a72640bd35 = UNSTREAM_STRING( &constant_bin[ 2607427 ], 16, 0 );
    const_str_digest_29132ab63318318953e9cfb883997203 = UNSTREAM_STRING( &constant_bin[ 2607443 ], 22, 0 );
    const_str_digest_2dabcdf82a9b3cf4ce1e16ab71cddca0 = UNSTREAM_STRING( &constant_bin[ 2607336 ], 22, 0 );
    const_str_digest_2f96a4211b4d639e460695c987d251ab = UNSTREAM_STRING( &constant_bin[ 2607465 ], 55, 0 );
    const_str_digest_388526ed03a5066ea274085dc1936198 = UNSTREAM_STRING( &constant_bin[ 2607520 ], 32, 0 );
    const_str_digest_38bf16ac35f62a78959d9fd19e8c4165 = UNSTREAM_STRING( &constant_bin[ 2607552 ], 63, 0 );
    const_str_digest_38fead528e3756cdda5e24e082470cf8 = UNSTREAM_STRING( &constant_bin[ 2607615 ], 57, 0 );
    const_str_digest_43295792b57e43cfed1d0c6ee2500214 = UNSTREAM_STRING( &constant_bin[ 2607672 ], 57, 0 );
    const_str_digest_4a6390c371ce14a2c4072627ff0defed = UNSTREAM_STRING( &constant_bin[ 2607729 ], 36, 0 );
    const_str_digest_56b31a568cf176837a5c869e591c5b4c = UNSTREAM_STRING( &constant_bin[ 2607765 ], 24, 0 );
    const_str_digest_58da1cb4116270886669e39677f27303 = UNSTREAM_STRING( &constant_bin[ 2607789 ], 14, 0 );
    const_str_digest_59bddfd0566fa79fd668740b6caaa5f1 = UNSTREAM_STRING( &constant_bin[ 2607803 ], 21, 0 );
    const_str_digest_6581edc0a8775bd3d76c51f0a9457543 = UNSTREAM_STRING( &constant_bin[ 2607824 ], 18, 0 );
    const_str_digest_691ff99aa130207f5f244721fce04c13 = UNSTREAM_STRING( &constant_bin[ 2607842 ], 24, 0 );
    const_str_digest_6932f06280679bface4e22a9e746d155 = UNSTREAM_STRING( &constant_bin[ 2607866 ], 24, 0 );
    const_str_digest_6a06b1b58e4eec22be4b2ce0ccc8adac = UNSTREAM_STRING( &constant_bin[ 2607890 ], 73, 0 );
    const_str_digest_6b8760e9f9f00fbb357f678f1929504f = UNSTREAM_STRING( &constant_bin[ 2607264 ], 21, 0 );
    const_str_digest_6eac8acc479fac8342428ff45bb85fd0 = UNSTREAM_STRING( &constant_bin[ 2607963 ], 61, 0 );
    const_str_digest_7188946be9751e3fc26a2d24642bfa16 = UNSTREAM_STRING( &constant_bin[ 2608024 ], 15, 0 );
    const_str_digest_7493ab77aa1289d14c9fc8089c1e4ac1 = UNSTREAM_STRING( &constant_bin[ 2607709 ], 20, 0 );
    const_str_digest_7e83b594ae6099bc88a4443d90f44b24 = UNSTREAM_STRING( &constant_bin[ 2608039 ], 14, 0 );
    const_str_digest_7fe9c7733eadb925be9feae252d25608 = UNSTREAM_STRING( &constant_bin[ 2608053 ], 20, 0 );
    const_str_digest_866224401e024c4a9cb3172c658ae16e = UNSTREAM_STRING( &constant_bin[ 2608073 ], 11, 0 );
    const_str_digest_8708d49d5772ac1590ece7b167feb91d = UNSTREAM_STRING( &constant_bin[ 2607005 ], 9, 0 );
    const_str_digest_89562957d609422690365d4cb79641a2 = UNSTREAM_STRING( &constant_bin[ 2608084 ], 20, 0 );
    const_str_digest_8a4df8c91c6ab620f014b18e0aea06b8 = UNSTREAM_STRING( &constant_bin[ 2607009 ], 12, 0 );
    const_str_digest_8aa52d3b6143cd660244d9ea53f613b9 = UNSTREAM_STRING( &constant_bin[ 2608104 ], 12, 0 );
    const_str_digest_90149c8c23f28b47e24e21946ab23241 = UNSTREAM_STRING( &constant_bin[ 2608116 ], 12, 0 );
    const_str_digest_9159c069c805578c25810202764533e4 = UNSTREAM_STRING( &constant_bin[ 2608128 ], 11, 0 );
    const_str_digest_9450654aa6509a3096d1b85acdc842e1 = UNSTREAM_STRING( &constant_bin[ 2608139 ], 66, 0 );
    const_str_digest_978d40b51d49c44d5c269d972160b3a7 = UNSTREAM_STRING( &constant_bin[ 2608205 ], 25, 0 );
    const_str_digest_97b62ec9140102505875d3024d9d1138 = UNSTREAM_STRING( &constant_bin[ 2608230 ], 39, 0 );
    const_str_digest_97dd821e48fd1133a99228223a7a624f = UNSTREAM_STRING( &constant_bin[ 2608269 ], 12, 0 );
    const_str_digest_9bd8782ae1b14069f74b2d461711434b = UNSTREAM_STRING( &constant_bin[ 2608281 ], 206, 0 );
    const_str_digest_9bf6a431c2e906a1aa9444b995baca8a = UNSTREAM_STRING( &constant_bin[ 2608487 ], 28, 0 );
    const_str_digest_9d16f9bc58d94c455589250070f09113 = UNSTREAM_STRING( &constant_bin[ 2608515 ], 28, 0 );
    const_str_digest_9d19af47c5776306ee2273813f3235e4 = UNSTREAM_STRING( &constant_bin[ 2607848 ], 18, 0 );
    const_str_digest_9d50ac5ae24ef4440e8564c511f58900 = UNSTREAM_STRING( &constant_bin[ 2607212 ], 15, 0 );
    const_str_digest_a4667b520b212a16317829bcb290bcb4 = UNSTREAM_STRING( &constant_bin[ 2608543 ], 20, 0 );
    const_str_digest_ab1bdb7c01b4336ff9cbcf1b76b05a09 = UNSTREAM_STRING( &constant_bin[ 2608563 ], 14, 0 );
    const_str_digest_adedf1e45df37d82c8dbf3619925df24 = UNSTREAM_STRING( &constant_bin[ 2608577 ], 59, 0 );
    const_str_digest_badec679d45bb7fa1a1c2725600ec0d4 = UNSTREAM_STRING( &constant_bin[ 2608636 ], 5, 0 );
    const_str_digest_bd1a35a2038bbe33c91f618ec098e210 = UNSTREAM_STRING( &constant_bin[ 2608641 ], 54, 0 );
    const_str_digest_bdc3e7b00657930f886f177b307c781c = UNSTREAM_STRING( &constant_bin[ 2608695 ], 28, 0 );
    const_str_digest_c3ff2b11420d90920c8b3e4b73e88e7b = UNSTREAM_STRING( &constant_bin[ 2608723 ], 25, 0 );
    const_str_digest_c55afac70b5c0b7c79a14ffbb790bc92 = UNSTREAM_STRING( &constant_bin[ 2608748 ], 4, 0 );
    const_str_digest_c59534a68517fc7a752bdc1e23491aec = UNSTREAM_STRING( &constant_bin[ 2608752 ], 7, 0 );
    const_str_digest_cc0643423e5f80c068642401624a6285 = UNSTREAM_STRING( &constant_bin[ 2608759 ], 28, 0 );
    const_str_digest_d468adb40f20c74c8d11c4aeb490b79e = UNSTREAM_STRING( &constant_bin[ 2608787 ], 13, 0 );
    const_str_digest_d4f8b778671d16d0a1e087f63714304b = UNSTREAM_STRING( &constant_bin[ 2608800 ], 39, 0 );
    const_str_digest_d5353604f715269e7545044635e49ff2 = UNSTREAM_STRING( &constant_bin[ 2608839 ], 33, 0 );
    const_str_digest_dc54181a3936c5f55b64d53a8e6a933e = UNSTREAM_STRING( &constant_bin[ 2608872 ], 15, 0 );
    const_str_digest_e43dc6c6f1fdd10528f6bfec991eeb0f = UNSTREAM_STRING( &constant_bin[ 2608887 ], 49, 0 );
    const_str_digest_e4ee13473f833011296770093fbcd4ad = UNSTREAM_STRING( &constant_bin[ 2608936 ], 37, 0 );
    const_str_digest_e6fd7101a265124cf45cc72b8bcf397f = UNSTREAM_STRING( &constant_bin[ 2608973 ], 158, 0 );
    const_str_digest_e7b673eef7c36db3f997aef57206960c = UNSTREAM_STRING( &constant_bin[ 2609131 ], 13, 0 );
    const_str_digest_e8957dc4008aac6c392cfc0c2f5141cb = UNSTREAM_STRING( &constant_bin[ 2609144 ], 55, 0 );
    const_str_digest_ea251ffbbc28e76ef31cec7d1a3e8e52 = UNSTREAM_STRING( &constant_bin[ 2607498 ], 22, 0 );
    const_str_digest_eb79640ec86e1bff202229c8638bd31b = UNSTREAM_STRING( &constant_bin[ 2609199 ], 20, 0 );
    const_str_digest_edd2a5056add571faece3956c804cd41 = UNSTREAM_STRING( &constant_bin[ 2607009 ], 6, 0 );
    const_str_digest_ee421aaef1e8e27d2ada1b5e28854b9d = UNSTREAM_STRING( &constant_bin[ 2607227 ], 29, 0 );
    const_str_digest_f5b89d17853d1ad9fecbda5a3ec09b77 = UNSTREAM_STRING( &constant_bin[ 2609219 ], 51, 0 );
    const_str_digest_f67fab5bcd00878ed60153fbbaf56263 = UNSTREAM_STRING( &constant_bin[ 2609270 ], 52, 0 );
    const_str_digest_f8506addb3f2fabe0b7f3b137fbfcdd7 = UNSTREAM_STRING( &constant_bin[ 2609322 ], 51, 0 );
    const_str_digest_fa6bd76d50648a99a4eba25a358f0f5c = UNSTREAM_STRING( &constant_bin[ 2609373 ], 19, 0 );
    const_str_digest_fd54171dd0d710d8acbf194e39f3cb84 = UNSTREAM_STRING( &constant_bin[ 2609392 ], 14, 0 );
    const_str_plain__urllib_response_moved_attributes = UNSTREAM_STRING( &constant_bin[ 327435 ], 33, 1 );
    const_tuple_020d0e1781882f13d9436a33b4e49b7b_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_020d0e1781882f13d9436a33b4e49b7b_tuple, 0, const_str_plain_cls ); Py_INCREF( const_str_plain_cls );
    PyTuple_SET_ITEM( const_tuple_020d0e1781882f13d9436a33b4e49b7b_tuple, 1, const_str_plain_orig_vars ); Py_INCREF( const_str_plain_orig_vars );
    PyTuple_SET_ITEM( const_tuple_020d0e1781882f13d9436a33b4e49b7b_tuple, 2, const_str_plain_slots ); Py_INCREF( const_str_plain_slots );
    PyTuple_SET_ITEM( const_tuple_020d0e1781882f13d9436a33b4e49b7b_tuple, 3, const_str_plain_slots_var ); Py_INCREF( const_str_plain_slots_var );
    const_tuple_23e241754072378d4aca55ebd413fe81_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_23e241754072378d4aca55ebd413fe81_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_23e241754072378d4aca55ebd413fe81_tuple, 1, const_str_plain_mod ); Py_INCREF( const_str_plain_mod );
    PyTuple_SET_ITEM( const_tuple_23e241754072378d4aca55ebd413fe81_tuple, 2, const_str_plain_fullnames ); Py_INCREF( const_str_plain_fullnames );
    PyTuple_SET_ITEM( const_tuple_23e241754072378d4aca55ebd413fe81_tuple, 3, const_str_plain_fullname ); Py_INCREF( const_str_plain_fullname );
    const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple, 1, const_str_plain_attr ); Py_INCREF( const_str_plain_attr );
    PyTuple_SET_ITEM( const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple, 2, const_str_plain__module ); Py_INCREF( const_str_plain__module );
    PyTuple_SET_ITEM( const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple, 3, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 1, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 2, const_str_plain_old_mod ); Py_INCREF( const_str_plain_old_mod );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 3, const_str_plain_new_mod ); Py_INCREF( const_str_plain_new_mod );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 4, const_str_plain_old_attr ); Py_INCREF( const_str_plain_old_attr );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 5, const_str_plain_new_attr ); Py_INCREF( const_str_plain_new_attr );
    const_tuple_90e06424913ba9ad885f60767479fe37_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_90e06424913ba9ad885f60767479fe37_tuple, 0, const_str_plain__code_ ); Py_INCREF( const_str_plain__code_ );
    PyTuple_SET_ITEM( const_tuple_90e06424913ba9ad885f60767479fe37_tuple, 1, const_str_plain__globs_ ); Py_INCREF( const_str_plain__globs_ );
    PyTuple_SET_ITEM( const_tuple_90e06424913ba9ad885f60767479fe37_tuple, 2, const_str_plain__locs_ ); Py_INCREF( const_str_plain__locs_ );
    PyTuple_SET_ITEM( const_tuple_90e06424913ba9ad885f60767479fe37_tuple, 3, const_str_plain_frame ); Py_INCREF( const_str_plain_frame );
    const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple = PyTuple_New( 11 );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 0, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 1, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 2, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 3, const_str_plain_write ); Py_INCREF( const_str_plain_write );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 4, const_str_plain_want_unicode ); Py_INCREF( const_str_plain_want_unicode );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 5, const_str_plain_sep ); Py_INCREF( const_str_plain_sep );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 6, const_str_plain_end ); Py_INCREF( const_str_plain_end );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 7, const_str_plain_arg ); Py_INCREF( const_str_plain_arg );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 8, const_str_plain_newline ); Py_INCREF( const_str_plain_newline );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 9, const_str_plain_space ); Py_INCREF( const_str_plain_space );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 10, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    const_tuple_b8b6e3942a2592a324589bd326168972_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_b8b6e3942a2592a324589bd326168972_tuple, 0, const_str_plain_cls ); Py_INCREF( const_str_plain_cls );
    PyTuple_SET_ITEM( const_tuple_b8b6e3942a2592a324589bd326168972_tuple, 1, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_b8b6e3942a2592a324589bd326168972_tuple, 2, const_str_plain_this_bases ); Py_INCREF( const_str_plain_this_bases );
    PyTuple_SET_ITEM( const_tuple_b8b6e3942a2592a324589bd326168972_tuple, 3, const_str_plain_d ); Py_INCREF( const_str_plain_d );
    const_str_plain_Module_six_moves_urllib_robotparser = UNSTREAM_STRING( &constant_bin[ 327602 ], 35, 1 );
    const_tuple_str_plain_self_str_plain_fullname_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_tuple, 1, const_str_plain_fullname ); Py_INCREF( const_str_plain_fullname );
    const_list_str_plain___doc___str_plain___name___list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_str_plain___doc___str_plain___name___list, 0, const_str_plain___doc__ ); Py_INCREF( const_str_plain___doc__ );
    PyList_SET_ITEM( const_list_str_plain___doc___str_plain___name___list, 1, const_str_plain___name__ ); Py_INCREF( const_str_plain___name__ );
    const_str_plain__urllib_robotparser_moved_attributes = UNSTREAM_STRING( &constant_bin[ 327544 ], 36, 1 );
    const_tuple_str_plain_wrapped_str_plain_wrapper_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_wrapped_str_plain_wrapper_tuple, 0, const_str_plain_wrapped ); Py_INCREF( const_str_plain_wrapped );
    PyTuple_SET_ITEM( const_tuple_str_plain_wrapped_str_plain_wrapper_tuple, 1, const_str_plain_wrapper ); Py_INCREF( const_str_plain_wrapper );
    const_tuple_str_plain_metaclass_str_plain_wrapper_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_metaclass_str_plain_wrapper_tuple, 0, const_str_plain_metaclass ); Py_INCREF( const_str_plain_metaclass );
    PyTuple_SET_ITEM( const_tuple_str_plain_metaclass_str_plain_wrapper_tuple, 1, const_str_plain_wrapper ); Py_INCREF( const_str_plain_wrapper );
    const_tuple_str_plain_self_str_plain_six_module_name_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_six_module_name_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_six_module_name_tuple, 1, const_str_plain_six_module_name ); Py_INCREF( const_str_plain_six_module_name );
    const_tuple_str_plain_self_str_plain_obj_str_plain_tp_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_tp_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_tp_tuple, 1, const_str_plain_obj ); Py_INCREF( const_str_plain_obj );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_tp_tuple, 2, const_str_plain_tp ); Py_INCREF( const_str_plain_tp );
    const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple, 0, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    PyTuple_SET_ITEM( const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple, 1, const_str_plain_errors ); Py_INCREF( const_str_plain_errors );
    PyTuple_SET_ITEM( const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple, 2, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple, 1, const_str_plain_attrs ); Py_INCREF( const_str_plain_attrs );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple, 2, const_str_plain_attr ); Py_INCREF( const_str_plain_attr );
    const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple, 1, const_str_plain_fullname ); Py_INCREF( const_str_plain_fullname );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple, 2, const_str_plain_mod ); Py_INCREF( const_str_plain_mod );
    const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple, 1, const_str_plain_fullname ); Py_INCREF( const_str_plain_fullname );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple, 2, const_str_plain_path ); Py_INCREF( const_str_plain_path );
    const_tuple_str_plain_self_str_plain_mod_str_plain_fullnames_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_mod_str_plain_fullnames_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_mod_str_plain_fullnames_tuple, 1, const_str_plain_mod ); Py_INCREF( const_str_plain_mod );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_mod_str_plain_fullnames_tuple, 2, const_str_plain_fullnames ); Py_INCREF( const_str_plain_fullnames );
    const_tuple_str_plain_meta_str_plain_bases_str_plain_metaclass_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_meta_str_plain_bases_str_plain_metaclass_tuple, 0, const_str_plain_meta ); Py_INCREF( const_str_plain_meta );
    PyTuple_SET_ITEM( const_tuple_str_plain_meta_str_plain_bases_str_plain_metaclass_tuple, 1, const_str_plain_bases ); Py_INCREF( const_str_plain_bases );
    PyTuple_SET_ITEM( const_tuple_str_plain_meta_str_plain_bases_str_plain_metaclass_tuple, 2, const_str_plain_metaclass ); Py_INCREF( const_str_plain_metaclass );
    const_tuple_str_plain__code__str_plain__globs__str_plain__locs__tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain__code__str_plain__globs__str_plain__locs__tuple, 0, const_str_plain__code_ ); Py_INCREF( const_str_plain__code_ );
    PyTuple_SET_ITEM( const_tuple_str_plain__code__str_plain__globs__str_plain__locs__tuple, 1, const_str_plain__globs_ ); Py_INCREF( const_str_plain__globs_ );
    PyTuple_SET_ITEM( const_tuple_str_plain__code__str_plain__globs__str_plain__locs__tuple, 2, const_str_plain__locs_ ); Py_INCREF( const_str_plain__locs_ );
    const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple, 1, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple, 2, const_str_plain_old ); Py_INCREF( const_str_plain_old );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple, 3, const_str_plain_new ); Py_INCREF( const_str_plain_new );
    const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple, 1, const_str_plain_obj ); Py_INCREF( const_str_plain_obj );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple, 2, const_str_plain_tp ); Py_INCREF( const_str_plain_tp );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple, 3, const_str_plain_result ); Py_INCREF( const_str_plain_result );
}

// The module code objects.
static PyCodeObject *codeobj_ab15678161675cddc29cf40363d8c019;
static PyCodeObject *codeobj_8e675aba8ca5150deebfb77645b3430f;
static PyCodeObject *codeobj_ea330983569f255a2eda909848675c74;
static PyCodeObject *codeobj_1fe4344c193f74fd7c0d3f6cf736c771;
static PyCodeObject *codeobj_e8c5daa80a281b0c8d8b1fddc3823a41;
static PyCodeObject *codeobj_701e0ee805c48a155e3d9c300af35b86;
static PyCodeObject *codeobj_89d5f088c933775cc039939338c713db;
static PyCodeObject *codeobj_45b6d1b1ab9ce6b75802143fe169406c;
static PyCodeObject *codeobj_912c3f53762767d97b67428555da337f;
static PyCodeObject *codeobj_7041a499ab64c2d382428e00b38beace;
static PyCodeObject *codeobj_f2e8a6f676b2c05fe9646976f06e2a85;
static PyCodeObject *codeobj_eb48a6d187c6aa49472b80fef6037728;
static PyCodeObject *codeobj_bf7a478de33aac3586a0d09fe512205f;
static PyCodeObject *codeobj_b750573c74a5f2929a2933b52bf82776;
static PyCodeObject *codeobj_97e7e9cd09178d68f5bf8aba59b5d01f;
static PyCodeObject *codeobj_578993c22e3d44e827f0e63f9bdd9abb;
static PyCodeObject *codeobj_9bda0a4fa803866aaf66a3cc405ef002;
static PyCodeObject *codeobj_22ecf89932c1a1194a845983f09bba07;
static PyCodeObject *codeobj_e62ca72e025d08cf33aa6fe064fe3a7f;
static PyCodeObject *codeobj_f56ff6cee8e2a9569b658c3912935586;
static PyCodeObject *codeobj_5b22459deafbe83b6aa6806c0dcc095c;
static PyCodeObject *codeobj_7d4516fecc92416065498e83c699f78b;
static PyCodeObject *codeobj_2ca5305117764c289bf4688897080d7c;
static PyCodeObject *codeobj_0cd9bf830e4ff3cdf9bfdcdc5296f79d;
static PyCodeObject *codeobj_63188ded245e65556f13664d6b58ef2c;
static PyCodeObject *codeobj_4f9c70c3d5ebe1cdf1adf9975993f3c8;
static PyCodeObject *codeobj_7e13f37428dcc9f192b599fd585bbd2b;
static PyCodeObject *codeobj_d3a5b027709f8ebe3107d2bc6c797689;
static PyCodeObject *codeobj_967df4f7bc00c42dd7fc949284be2885;
static PyCodeObject *codeobj_cd3f0b6b3a424e968bd6e590976e4ccf;
static PyCodeObject *codeobj_35090bdacdef58177b762b7963f89533;
static PyCodeObject *codeobj_76f31734a4b07b51197fe9c5feaf55d3;
static PyCodeObject *codeobj_3b3d29c43e4868428a5616acf9eea1de;
static PyCodeObject *codeobj_de2e37aa2bbe5cc6293834fd9b8dbb8a;
static PyCodeObject *codeobj_ad7d5dde994839e5ac2a6203f5b79a25;
static PyCodeObject *codeobj_2d1b05a953dc1346654ef86c67dbd200;
static PyCodeObject *codeobj_68c9fadd9114f7f721e2c5e8a70a8e49;
static PyCodeObject *codeobj_8f72678f141dbff45509fe738bf2b749;
static PyCodeObject *codeobj_de2f6191f85532c0dbd27a265770ae67;
static PyCodeObject *codeobj_ef8c02f1d44b4c3f22c6c12c08b956f6;
static PyCodeObject *codeobj_319d1893c539a33a1b662908a0e92c1d;
static PyCodeObject *codeobj_1642bd9337c01b09a9de1accdd5e7658;
static PyCodeObject *codeobj_aa836c9f9c0aefd4f6639c3969e0561a;
static PyCodeObject *codeobj_e3d6f6390e4d665f0a6a74af1f6f2957;
static PyCodeObject *codeobj_9209c688a3ced6499b412b148b7541f2;
static PyCodeObject *codeobj_8398c9c8abd7744ed18b4d57111e6f39;
static PyCodeObject *codeobj_5b029a1d201cc8a9a3e84892457a65e7;
static PyCodeObject *codeobj_815973a5b3f9d8606534d1b42959dd46;
static PyCodeObject *codeobj_66f73dcdccdb2296e46ba4a532c09f4a;
static PyCodeObject *codeobj_365bd4af060510b22bb53b7002f0925a;
static PyCodeObject *codeobj_a9398835c6d314847e88a1bad9f938bf;
static PyCodeObject *codeobj_8d7915ab36c0a403d765cbcb5f8579a6;
static PyCodeObject *codeobj_4488ea1fcc4224dea897cf84dac85bc9;
static PyCodeObject *codeobj_672f440ed9036145688dd45067f8b896;
static PyCodeObject *codeobj_20df9030ad0b76d1e0aa6774c687e3f1;
static PyCodeObject *codeobj_ff00957926f4e68fd6764e57dcbbd7c7;
static PyCodeObject *codeobj_12eac6454bffb914e5f31334e354e63a;
static PyCodeObject *codeobj_3aca7018a1bc9235df56bb146ff2b572;
static PyCodeObject *codeobj_5aec169baf140e5e67fc6e4a1deed190;
static PyCodeObject *codeobj_aa2a7ca468945bbc0db54be4ce495e5c;
static PyCodeObject *codeobj_05dbe5617e08f37dea9f508cc8b40fa2;
static PyCodeObject *codeobj_960827a35c3d2a40c9de577576e21c25;
static PyCodeObject *codeobj_a80fd244ff47dd3f7f023127a3432b73;
static PyCodeObject *codeobj_982553c47530e1533b43057b4ad1169c;
static PyCodeObject *codeobj_57c253de464c27f3728c34794fef8ee1;
static PyCodeObject *codeobj_e3e83e71e82f59c04b8e1042e4ea0188;
static PyCodeObject *codeobj_42850964ddf545b1a58c7506e5cebdac;
static PyCodeObject *codeobj_7bde21f44b4645f631ec2426ec4fa3d9;
static PyCodeObject *codeobj_bdb0cd9c963b46f2381ca99090ed327f;
static PyCodeObject *codeobj_5521acfcc96c8e0b7cc1aaf8976215a6;
static PyCodeObject *codeobj_fed463154ee956f08711ebbbc3b0f76d;
static PyCodeObject *codeobj_b77b2a93c330dc21560453b14fdbad02;
static PyCodeObject *codeobj_18162167c646190c34d34bb3158e5cd5;
static PyCodeObject *codeobj_724ea8528d59afb71e1951d53af4bc77;
static PyCodeObject *codeobj_aa14f0d2a2effb3843f318ab5b9bcc7f;
static PyCodeObject *codeobj_3f2b9bdbe68b29a02806e7a6edf9095d;
static PyCodeObject *codeobj_f91f4fcf5fc3b121c1d8d0d7f9842556;
static PyCodeObject *codeobj_146f529ac3144a1927e808192533705c;
static PyCodeObject *codeobj_9992056e9e1813476547acb6722fe2f1;
static PyCodeObject *codeobj_8987da6d9c95e92dd04fd14a2edf84e4;
static PyCodeObject *codeobj_d93bbc957f238f313a8213cc943d86e4;
static PyCodeObject *codeobj_8b31a42c0c7786fc48ecb710b5989d86;
static PyCodeObject *codeobj_16d64d79d6bb552b07f286b407477ace;
static PyCodeObject *codeobj_bec5259678929798b4b9af51ef00a532;
static PyCodeObject *codeobj_9ba1cb89c90694664aeaf484e107a04e;
static PyCodeObject *codeobj_9fc76ef148a066e729ceae100296dec3;
static PyCodeObject *codeobj_97d493dc8ff11a7de36f74c39b77f53c;
static PyCodeObject *codeobj_9a62f31827e6f592c132ce7d51be055e;
static PyCodeObject *codeobj_9dadaf0cd28c7c9a16723233a5abd4c8;
static PyCodeObject *codeobj_ccbc583da05330ca5ba4871fe43b1871;

static void _initModuleCodeObjects(void)
{
    codeobj_ab15678161675cddc29cf40363d8c019 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_angle_genexpr, 498, const_tuple_str_plain___iterator_tuple, 1, CO_NEWLOCALS | CO_GENERATOR | CO_OPTIMIZED | CO_NOFREE );
    codeobj_8e675aba8ca5150deebfb77645b3430f = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_angle_genexpr, 597, const_tuple_str_plain___iterator_tuple, 1, CO_NEWLOCALS | CO_GENERATOR | CO_OPTIMIZED | CO_NOFREE );
    codeobj_ea330983569f255a2eda909848675c74 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_Iterator, 515, const_tuple_empty, 0, CO_NEWLOCALS | CO_NOFREE );
    codeobj_1fe4344c193f74fd7c0d3f6cf736c771 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_Module_six_moves_urllib, 436, const_tuple_empty, 0, CO_NEWLOCALS | CO_NOFREE );
    codeobj_e8c5daa80a281b0c8d8b1fddc3823a41 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_MovedAttribute, 130, const_tuple_empty, 0, CO_NEWLOCALS | CO_NOFREE );
    codeobj_701e0ee805c48a155e3d9c300af35b86 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_MovedModule, 94, const_tuple_empty, 0, CO_NEWLOCALS | CO_NOFREE );
    codeobj_89d5f088c933775cc039939338c713db = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_X, 56, const_tuple_empty, 0, CO_NEWLOCALS | CO_NOFREE );
    codeobj_45b6d1b1ab9ce6b75802143fe169406c = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain__LazyDescr, 81, const_tuple_empty, 0, CO_NEWLOCALS | CO_NOFREE );
    codeobj_912c3f53762767d97b67428555da337f = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain__LazyModule, 115, const_tuple_empty, 0, CO_NEWLOCALS | CO_NOFREE );
    codeobj_7041a499ab64c2d382428e00b38beace = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain__SixMetaPathImporter, 155, const_tuple_empty, 0, CO_NEWLOCALS | CO_NOFREE );
    codeobj_f2e8a6f676b2c05fe9646976f06e2a85 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain___dir__, 121, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_eb48a6d187c6aa49472b80fef6037728 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain___dir__, 121, const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_bf7a478de33aac3586a0d09fe512205f = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain___dir__, 445, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_b750573c74a5f2929a2933b52bf82776 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain___get__, 86, const_tuple_str_plain_self_str_plain_obj_str_plain_tp_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_97e7e9cd09178d68f5bf8aba59b5d01f = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain___get__, 86, const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_578993c22e3d44e827f0e63f9bdd9abb = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain___get_module, 178, const_tuple_str_plain_self_str_plain_fullname_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_9bda0a4fa803866aaf66a3cc405ef002 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain___getattr__, 108, const_tuple_str_plain_self_str_plain_attr_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_22ecf89932c1a1194a845983f09bba07 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain___getattr__, 108, const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_e62ca72e025d08cf33aa6fe064fe3a7f = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain___init__, 83, const_tuple_str_plain_self_str_plain_name_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_f56ff6cee8e2a9569b658c3912935586 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain___init__, 96, const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple, 4, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_5b22459deafbe83b6aa6806c0dcc095c = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain___init__, 117, const_tuple_str_plain_self_str_plain_name_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_7d4516fecc92416065498e83c699f78b = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain___init__, 132, const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 6, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_2ca5305117764c289bf4688897080d7c = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain___init__, 162, const_tuple_str_plain_self_str_plain_six_module_name_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_0cd9bf830e4ff3cdf9bfdcdc5296f79d = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain___len__, 57, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_63188ded245e65556f13664d6b58ef2c = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain___new__, 705, const_tuple_b8b6e3942a2592a324589bd326168972_tuple, 4, CO_NEWLOCALS | CO_OPTIMIZED );
    codeobj_4f9c70c3d5ebe1cdf1adf9975993f3c8 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain__add_doc, 70, const_tuple_str_plain_func_str_plain_doc_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_7e13f37428dcc9f192b599fd585bbd2b = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain__add_module, 166, const_tuple_str_plain_self_str_plain_mod_str_plain_fullnames_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_NOFREE );
    codeobj_d3a5b027709f8ebe3107d2bc6c797689 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain__add_module, 166, const_tuple_23e241754072378d4aca55ebd413fe81_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_NOFREE );
    codeobj_967df4f7bc00c42dd7fc949284be2885 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain__get_module, 170, const_tuple_str_plain_self_str_plain_fullname_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_cd3f0b6b3a424e968bd6e590976e4ccf = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain__import_module, 75, const_tuple_str_plain_name_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_35090bdacdef58177b762b7963f89533 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain__resolve, 105, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_76f31734a4b07b51197fe9c5feaf55d3 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain__resolve, 150, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_3b3d29c43e4868428a5616acf9eea1de = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain__resolve, 150, const_tuple_str_plain_self_str_plain_module_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_de2e37aa2bbe5cc6293834fd9b8dbb8a = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_add_metaclass, 710, const_tuple_str_plain_metaclass_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_ad7d5dde994839e5ac2a6203f5b79a25 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_add_metaclass, 710, const_tuple_str_plain_metaclass_str_plain_wrapper_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_2d1b05a953dc1346654ef86c67dbd200 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_add_move, 452, const_tuple_str_plain_move_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_68c9fadd9114f7f721e2c5e8a70a8e49 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_advance_iterator, 489, const_tuple_str_plain_it_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_8f72678f141dbff45509fe738bf2b749 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_b, 567, const_tuple_str_plain_s_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_de2f6191f85532c0dbd27a265770ae67 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_b, 585, const_tuple_str_plain_s_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_ef8c02f1d44b4c3f22c6c12c08b956f6 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_byte2int, 592, const_tuple_str_plain_bs_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_319d1893c539a33a1b662908a0e92c1d = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_callable, 497, const_tuple_str_plain_obj_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_1642bd9337c01b09a9de1accdd5e7658 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_contraction, 498, const_tuple_empty, 0, CO_NEWLOCALS | CO_GENERATOR | CO_OPTIMIZED | CO_NOFREE );
    codeobj_aa836c9f9c0aefd4f6639c3969e0561a = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_contraction, 597, const_tuple_empty, 0, CO_NEWLOCALS | CO_GENERATOR | CO_OPTIMIZED | CO_NOFREE );
    codeobj_e3d6f6390e4d665f0a6a74af1f6f2957 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_create_bound_method, 512, const_tuple_str_plain_func_str_plain_obj_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_9209c688a3ced6499b412b148b7541f2 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_exec_, 614, const_tuple_str_plain__code__str_plain__globs__str_plain__locs__tuple, 3, CO_NEWLOCALS | CO_NOFREE );
    codeobj_8398c9c8abd7744ed18b4d57111e6f39 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_exec_, 614, const_tuple_90e06424913ba9ad885f60767479fe37_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_5b029a1d201cc8a9a3e84892457a65e7 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_find_module, 173, const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_815973a5b3f9d8606534d1b42959dd46 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_get_code, 207, const_tuple_str_plain_self_str_plain_fullname_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_66f73dcdccdb2296e46ba4a532c09f4a = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_get_unbound_function, 502, const_tuple_str_plain_unbound_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_365bd4af060510b22bb53b7002f0925a = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_get_unbound_function, 509, const_tuple_str_plain_unbound_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_a9398835c6d314847e88a1bad9f938bf = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_indexbytes, 594, const_tuple_str_plain_buf_str_plain_i_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_8d7915ab36c0a403d765cbcb5f8579a6 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_int2byte, 573, const_tuple_str_plain_i_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_4488ea1fcc4224dea897cf84dac85bc9 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_is_package, 198, const_tuple_str_plain_self_str_plain_fullname_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_672f440ed9036145688dd45067f8b896 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_iterbytes, 596, const_tuple_str_plain_buf_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_20df9030ad0b76d1e0aa6774c687e3f1 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_iteritems, 540, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_ff00957926f4e68fd6764e57dcbbd7c7 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_iteritems, 540, const_tuple_str_plain_d_str_plain_kw_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_12eac6454bffb914e5f31334e354e63a = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_iteritems, 552, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_3aca7018a1bc9235df56bb146ff2b572 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_iteritems, 552, const_tuple_str_plain_d_str_plain_kw_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_5aec169baf140e5e67fc6e4a1deed190 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_iterkeys, 534, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_aa2a7ca468945bbc0db54be4ce495e5c = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_iterkeys, 534, const_tuple_str_plain_d_str_plain_kw_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_05dbe5617e08f37dea9f508cc8b40fa2 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_iterkeys, 546, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_960827a35c3d2a40c9de577576e21c25 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_iterkeys, 546, const_tuple_str_plain_d_str_plain_kw_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_a80fd244ff47dd3f7f023127a3432b73 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_iterlists, 543, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_982553c47530e1533b43057b4ad1169c = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_iterlists, 543, const_tuple_str_plain_d_str_plain_kw_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_57c253de464c27f3728c34794fef8ee1 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_iterlists, 555, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_e3e83e71e82f59c04b8e1042e4ea0188 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_iterlists, 555, const_tuple_str_plain_d_str_plain_kw_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_42850964ddf545b1a58c7506e5cebdac = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_itervalues, 537, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_7bde21f44b4645f631ec2426ec4fa3d9 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_itervalues, 537, const_tuple_str_plain_d_str_plain_kw_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_bdb0cd9c963b46f2381ca99090ed327f = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_itervalues, 549, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_5521acfcc96c8e0b7cc1aaf8976215a6 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_itervalues, 549, const_tuple_str_plain_d_str_plain_kw_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_fed463154ee956f08711ebbbc3b0f76d = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_load_module, 184, const_tuple_str_plain_self_str_plain_fullname_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_b77b2a93c330dc21560453b14fdbad02 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_load_module, 184, const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_18162167c646190c34d34bb3158e5cd5 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_metaclass, 704, const_tuple_empty, 0, CO_NEWLOCALS | CO_NOFREE );
    codeobj_724ea8528d59afb71e1951d53af4bc77 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_next, 517, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_aa14f0d2a2effb3843f318ab5b9bcc7f = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_print_, 634, const_tuple_str_plain_args_str_plain_kwargs_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_3f2b9bdbe68b29a02806e7a6edf9095d = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_print_, 634, const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 0, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_f91f4fcf5fc3b121c1d8d0d7f9842556 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_remove_move, 457, const_tuple_str_plain_name_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_146f529ac3144a1927e808192533705c = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_reraise, 608, const_tuple_str_plain_tp_str_plain_value_str_plain_tb_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_9992056e9e1813476547acb6722fe2f1 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_six, 0, const_tuple_empty, 0, CO_NOFREE );
    codeobj_8987da6d9c95e92dd04fd14a2edf84e4 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_u, 569, const_tuple_str_plain_s_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_d93bbc957f238f313a8213cc943d86e4 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_u, 588, const_tuple_str_plain_s_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_8b31a42c0c7786fc48ecb710b5989d86 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_with_metaclass, 699, const_tuple_str_plain_meta_str_plain_bases_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_NOFREE );
    codeobj_16d64d79d6bb552b07f286b407477ace = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_with_metaclass, 699, const_tuple_str_plain_meta_str_plain_bases_str_plain_metaclass_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_NOFREE );
    codeobj_bec5259678929798b4b9af51ef00a532 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_wrapper, 691, const_tuple_str_plain_f_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED );
    codeobj_9ba1cb89c90694664aeaf484e107a04e = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_wrapper, 712, const_tuple_str_plain_cls_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED );
    codeobj_9fc76ef148a066e729ceae100296dec3 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_wrapper, 712, const_tuple_020d0e1781882f13d9436a33b4e49b7b_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED );
    codeobj_97d493dc8ff11a7de36f74c39b77f53c = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_wraps, 690, const_tuple_str_plain_wrapped_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_9a62f31827e6f592c132ce7d51be055e = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_wraps, 690, const_tuple_str_plain_wrapped_str_plain_wrapper_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE );
    codeobj_9dadaf0cd28c7c9a16723233a5abd4c8 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_write, 639, const_tuple_str_plain_data_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED );
    codeobj_ccbc583da05330ca5ba4871fe43b1871 = MAKE_CODEOBJ( const_str_digest_d4f8b778671d16d0a1e087f63714304b, const_str_plain_write, 639, const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED );
}

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_X_of_module_six(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_4__LazyDescr_of_module_six(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_5_MovedModule_of_module_six(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_6__LazyModule_of_module_six(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_7_MovedAttribute_of_module_six(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_8__SixMetaPathImporter_of_module_six(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_9__MovedItems_of_module_six(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_10_Module_six_moves_urllib_parse_of_module_six(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_11_Module_six_moves_urllib_error_of_module_six(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_12_Module_six_moves_urllib_request_of_module_six(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_13_Module_six_moves_urllib_response_of_module_six(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_14_Module_six_moves_urllib_robotparser_of_module_six(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_15_Module_six_moves_urllib_of_module_six(  );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_1_of_function_19_callable_of_module_six( PyObject *_python_par___iterator );


NUITKA_LOCAL_MODULE PyObject *impl_class_23_Iterator_of_module_six(  );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_1_of_function_39_iterbytes_of_module_six( PyObject *_python_par___iterator );


NUITKA_LOCAL_MODULE PyObject *impl_class_1_metaclass_of_function_44_with_metaclass_of_module_six( PyObjectSharedLocalVariable& closure_bases, PyObjectSharedLocalVariable& closure_meta );


NUITKA_CROSS_MODULE PyObject *impl_function_8_complex_call_helper_star_dict_of_module___internal__( PyObject *_python_par_called, PyObject *_python_par_star_arg_dict );


static PyObject *MAKE_FUNCTION_function_16_add_move_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_17_remove_move_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_18_advance_iterator_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_19_callable_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_1___dir___of_class_15_Module_six_moves_urllib_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_4__LazyDescr_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_5_MovedModule_of_module_six( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_6__LazyModule_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_7_MovedAttribute_of_module_six( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_8__SixMetaPathImporter_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_1___len___of_class_1_X_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six( PyObjectSharedLocalVariable &closure_bases, PyObjectSharedLocalVariable &closure_meta );


// This structure is for attachment as self of function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six.
// It is allocated at the time the function object is created.
struct _context_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six_t
{
    // The function can access a read-only closure of the creator.
    PyObjectSharedLocalVariable closure_bases;
    PyObjectSharedLocalVariable closure_meta;
};

static void _context_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six_destructor( void *context_voidptr )
{
    _context_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six_t *_python_context = (_context_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_next_of_class_23_Iterator_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_1_wrapper_of_function_43_wraps_of_module_six( PyObjectSharedLocalVariable &closure_wrapped );


// This structure is for attachment as self of function_1_wrapper_of_function_43_wraps_of_module_six.
// It is allocated at the time the function object is created.
struct _context_function_1_wrapper_of_function_43_wraps_of_module_six_t
{
    // The function can access a read-only closure of the creator.
    PyObjectSharedLocalVariable closure_wrapped;
};

static void _context_function_1_wrapper_of_function_43_wraps_of_module_six_destructor( void *context_voidptr )
{
    _context_function_1_wrapper_of_function_43_wraps_of_module_six_t *_python_context = (_context_function_1_wrapper_of_function_43_wraps_of_module_six_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_wrapper_of_function_45_add_metaclass_of_module_six( PyObjectSharedLocalVariable &closure_metaclass );


// This structure is for attachment as self of function_1_wrapper_of_function_45_add_metaclass_of_module_six.
// It is allocated at the time the function object is created.
struct _context_function_1_wrapper_of_function_45_add_metaclass_of_module_six_t
{
    // The function can access a read-only closure of the creator.
    PyObjectSharedLocalVariable closure_metaclass;
};

static void _context_function_1_wrapper_of_function_45_add_metaclass_of_module_six_destructor( void *context_voidptr )
{
    _context_function_1_wrapper_of_function_45_add_metaclass_of_module_six_t *_python_context = (_context_function_1_wrapper_of_function_45_add_metaclass_of_module_six_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_write_of_function_42_print__of_module_six( PyObjectSharedLocalVariable &closure_fp );


// This structure is for attachment as self of function_1_write_of_function_42_print__of_module_six.
// It is allocated at the time the function object is created.
struct _context_function_1_write_of_function_42_print__of_module_six_t
{
    // The function can access a read-only closure of the creator.
    PyObjectSharedLocalVariable closure_fp;
};

static void _context_function_1_write_of_function_42_print__of_module_six_destructor( void *context_voidptr )
{
    _context_function_1_write_of_function_42_print__of_module_six_t *_python_context = (_context_function_1_write_of_function_42_print__of_module_six_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_20_get_unbound_function_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_21_get_unbound_function_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_22_create_bound_method_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_24_iterkeys_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_25_itervalues_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_26_iteritems_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_27_iterlists_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_28_iterkeys_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_29_itervalues_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_2___dir___of_class_6__LazyModule_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_2___get___of_class_4__LazyDescr_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_2__add_doc_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_2__add_module_of_class_8__SixMetaPathImporter_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_2__resolve_of_class_5_MovedModule_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_2__resolve_of_class_7_MovedAttribute_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_30_iteritems_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_31_iterlists_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_32_b_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_33_u_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_34_int2byte_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_35_b_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_36_u_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_37_byte2int_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_38_indexbytes_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_39_iterbytes_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_3___getattr___of_class_5_MovedModule_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_3__get_module_of_class_8__SixMetaPathImporter_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_3__import_module_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_40_reraise_of_module_six( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_41_exec__of_module_six( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_42_print__of_module_six(  );


static PyObject *MAKE_FUNCTION_function_43_wraps_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_44_with_metaclass_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_45_add_metaclass_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_4_find_module_of_class_8__SixMetaPathImporter_of_module_six( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_5___get_module_of_class_8__SixMetaPathImporter_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_6_load_module_of_class_8__SixMetaPathImporter_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_7_is_package_of_class_8__SixMetaPathImporter_of_module_six(  );


static PyObject *MAKE_FUNCTION_function_8_get_code_of_class_8__SixMetaPathImporter_of_module_six(  );


// The module function definitions.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_X_of_module_six(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___len__;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_89d5f088c933775cc039939338c713db, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_assign_source_2 = MAKE_FUNCTION_function_1___len___of_class_1_X_of_module_six(  );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_2 );

        frame_function->f_lineno = 57;
        goto frame_exception_exit_1;
    }
    assert( var___len__.object == NULL );
    var___len__.object = tmp_assign_source_2;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___len__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___len__,
            var___len__.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___len__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___len__,
            var___len__.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}


static PyObject *impl_function_1___len___of_class_1_X_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_return_value = const_int_pos_2147483648;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1___len___of_class_1_X_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__len__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__len__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1___len___of_class_1_X_of_module_six( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_1___len___of_class_1_X_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_1___len___of_class_1_X_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___len___of_class_1_X_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2__add_doc_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_func, PyObject *_python_par_doc )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_func; par_func.object = _python_par_func;
    PyObjectLocalVariable par_doc; par_doc.object = _python_par_doc;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_frame_locals;
    bool tmp_result;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_4f9c70c3d5ebe1cdf1adf9975993f3c8, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_assattr_name_1 = par_doc.object;

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 47454 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 72;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = par_func.object;

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 47143 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 72;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain___doc__, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 72;
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_func.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_func,
            par_func.object
        );

    }
    if ((par_doc.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_doc,
            par_doc.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_2__add_doc_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_func = NULL;
    PyObject *_python_par_doc = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_add_doc() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_func == key )
            {
                assert( _python_par_func == NULL );
                _python_par_func = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_doc == key )
            {
                assert( _python_par_doc == NULL );
                _python_par_doc = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_func, key ) == 1 )
            {
                assert( _python_par_func == NULL );
                _python_par_func = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_doc, key ) == 1 )
            {
                assert( _python_par_doc == NULL );
                _python_par_doc = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_add_doc() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_func != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_func = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_func == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_func = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_doc != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_doc = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_doc == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_doc = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_func == NULL || _python_par_doc == NULL ))
    {
        PyObject *values[] = { _python_par_func, _python_par_doc };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2__add_doc_of_module_six( self, _python_par_func, _python_par_doc );

error_exit:;

    Py_XDECREF( _python_par_func );
    Py_XDECREF( _python_par_doc );

    return NULL;
}

static PyObject *dparse_function_2__add_doc_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_2__add_doc_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2__add_doc_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3__import_module_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_name; par_name.object = _python_par_name;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_fromlist_1;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_level_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_modulename_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_cd3f0b6b3a424e968bd6e590976e4ccf, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_modulename_1 = par_name.object;

    if ( tmp_import_modulename_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 77;
        goto frame_exception_exit_1;
    }

    tmp_import_fromlist_1 = const_tuple_empty;
    tmp_import_level_1 = const_int_neg_1;
    tmp_import_globals_1 = ((PyModuleObject *)module_six)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((par_name.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_name,
            par_name.object
        );

    }
    frame_function->f_lineno = 77;
    tmp_unused = IMPORT_MODULE( tmp_import_modulename_1, tmp_import_globals_1, tmp_import_locals_1, tmp_import_fromlist_1, tmp_import_level_1 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 77;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5370 ], 32, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 78;
        goto frame_exception_exit_1;
    }

    tmp_subscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_modules );
    if ( tmp_subscr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 78;
        goto frame_exception_exit_1;
    }
    tmp_subscr_subscript_1 = par_name.object;

    if ( tmp_subscr_subscript_1 == NULL )
    {
        Py_DECREF( tmp_subscr_target_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 78;
        goto frame_exception_exit_1;
    }

    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    Py_DECREF( tmp_subscr_target_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 78;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_name.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_name,
            par_name.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_3__import_module_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_name = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_import_module() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_name == key )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_name, key ) == 1 )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_import_module() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_name == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_name == NULL ))
    {
        PyObject *values[] = { _python_par_name };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_3__import_module_of_module_six( self, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_3__import_module_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_3__import_module_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3__import_module_of_module_six( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_4__LazyDescr_of_module_six(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___init__;
    PyObjectLocalVariable var___get__;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_45b6d1b1ab9ce6b75802143fe169406c, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_assign_source_2 = MAKE_FUNCTION_function_1___init___of_class_4__LazyDescr_of_module_six(  );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_2 );

        frame_function->f_lineno = 83;
        goto frame_exception_exit_1;
    }
    assert( var___init__.object == NULL );
    var___init__.object = tmp_assign_source_2;

    tmp_assign_source_3 = MAKE_FUNCTION_function_2___get___of_class_4__LazyDescr_of_module_six(  );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_3 );

        frame_function->f_lineno = 86;
        goto frame_exception_exit_1;
    }
    assert( var___get__.object == NULL );
    var___get__.object = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var___get__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___get__,
            var___get__.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var___get__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___get__,
            var___get__.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}


static PyObject *impl_function_1___init___of_class_4__LazyDescr_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_name; par_name.object = _python_par_name;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_frame_locals;
    bool tmp_result;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_e62ca72e025d08cf33aa6fe064fe3a7f, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_assattr_name_1 = par_name.object;

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 84;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = par_self.object;

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 84;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_name, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 84;
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_name.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_name,
            par_name.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1___init___of_class_4__LazyDescr_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_name == key )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_name, key ) == 1 )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_name == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_name == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_name };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1___init___of_class_4__LazyDescr_of_module_six( self, _python_par_self, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_4__LazyDescr_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_1___init___of_class_4__LazyDescr_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_4__LazyDescr_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___get___of_class_4__LazyDescr_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_obj, PyObject *_python_par_tp )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_obj; par_obj.object = _python_par_obj;
    PyObjectLocalVariable par_tp; par_tp.object = _python_par_tp;
    PyObjectLocalVariable var_result;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_setattr_attr_1;
    PyObject *tmp_setattr_target_1;
    PyObject *tmp_setattr_value_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_b750573c74a5f2929a2933b52bf82776, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 87;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__resolve );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 87;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 87;
    tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS( tmp_called_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 87;
        goto frame_exception_exit_1;
    }
    assert( var_result.object == NULL );
    var_result.object = tmp_assign_source_1;

    tmp_setattr_target_1 = par_obj.object;

    if ( tmp_setattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 10401 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 88;
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = par_self.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 88;
        goto frame_exception_exit_1;
    }

    tmp_setattr_attr_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_name );
    if ( tmp_setattr_attr_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 88;
        goto frame_exception_exit_1;
    }
    tmp_setattr_value_1 = var_result.object;

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
    Py_DECREF( tmp_setattr_attr_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 88;
        goto frame_exception_exit_1;
    }
    tmp_called_2 = LOOKUP_BUILTIN( const_str_plain_delattr );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 90;
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = par_obj.object;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 10401 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 90;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_3 );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 90;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = par_self.object;

    if ( tmp_source_name_4 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 90;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_name );
    if ( tmp_call_arg_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_1 );

        frame_function->f_lineno = 90;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 90;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_2, tmp_call_arg_element_1, tmp_call_arg_element_2 );
    Py_DECREF( tmp_call_arg_element_1 );
    Py_DECREF( tmp_call_arg_element_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 90;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_result.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_result,
            var_result.object
        );

    }
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_obj.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_obj,
            par_obj.object
        );

    }
    if ((par_tp.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_tp,
            par_tp.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = var_result.object;

    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_2___get___of_class_4__LazyDescr_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_obj = NULL;
    PyObject *_python_par_tp = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__get__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_obj == key )
            {
                assert( _python_par_obj == NULL );
                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_tp == key )
            {
                assert( _python_par_tp == NULL );
                _python_par_tp = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_obj, key ) == 1 )
            {
                assert( _python_par_obj == NULL );
                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_tp, key ) == 1 )
            {
                assert( _python_par_tp == NULL );
                _python_par_tp = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__get__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_obj == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_obj = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_tp != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_tp = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_tp == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_tp = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_obj == NULL || _python_par_tp == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_obj, _python_par_tp };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2___get___of_class_4__LazyDescr_of_module_six( self, _python_par_self, _python_par_obj, _python_par_tp );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_obj );
    Py_XDECREF( _python_par_tp );

    return NULL;
}

static PyObject *dparse_function_2___get___of_class_4__LazyDescr_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_2___get___of_class_4__LazyDescr_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___get___of_class_4__LazyDescr_of_module_six( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_5_MovedModule_of_module_six(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___init__;
    PyObjectLocalVariable var__resolve;
    PyObjectLocalVariable var___getattr__;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_defaults_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_701e0ee805c48a155e3d9c300af35b86, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_defaults_1 = const_tuple_none_tuple;
    tmp_assign_source_2 = MAKE_FUNCTION_function_1___init___of_class_5_MovedModule_of_module_six( INCREASE_REFCOUNT( tmp_defaults_1 ) );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_2 );

        frame_function->f_lineno = 96;
        goto frame_exception_exit_1;
    }
    assert( var___init__.object == NULL );
    var___init__.object = tmp_assign_source_2;

    tmp_assign_source_3 = MAKE_FUNCTION_function_2__resolve_of_class_5_MovedModule_of_module_six(  );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_3 );

        frame_function->f_lineno = 105;
        goto frame_exception_exit_1;
    }
    assert( var__resolve.object == NULL );
    var__resolve.object = tmp_assign_source_3;

    tmp_assign_source_4 = MAKE_FUNCTION_function_3___getattr___of_class_5_MovedModule_of_module_six(  );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_4 );

        frame_function->f_lineno = 108;
        goto frame_exception_exit_1;
    }
    assert( var___getattr__.object == NULL );
    var___getattr__.object = tmp_assign_source_4;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var__resolve.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__resolve,
            var__resolve.object
        );

    }
    if ((var___getattr__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___getattr__,
            var___getattr__.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var__resolve.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain__resolve,
            var__resolve.object
        );

    }
    if ((var___getattr__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___getattr__,
            var___getattr__.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}


static PyObject *impl_function_1___init___of_class_5_MovedModule_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_old, PyObject *_python_par_new )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_name; par_name.object = _python_par_name;
    PyObjectLocalVariable par_old; par_old.object = _python_par_old;
    PyObjectLocalVariable par_new; par_new.object = _python_par_new;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_frame_locals;
    bool tmp_is_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_super_object_1;
    PyObject *tmp_super_type_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_f56ff6cee8e2a9569b658c3912935586, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_super_type_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_super_type_1 == NULL ))
    {
        tmp_super_type_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_super_type_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328264 ], 40, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 97;
        goto frame_exception_exit_1;
    }

    tmp_super_object_1 = par_self.object;

    if ( tmp_super_object_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 97;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = BUILTIN_SUPER( tmp_super_type_1, tmp_super_object_1 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 97;
        goto frame_exception_exit_1;
    }
    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___init__ );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 97;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = par_name.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 97;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 97;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 97;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_cond_value_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_1 == NULL ))
    {
        tmp_cond_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 306438 ], 32, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 98;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 98;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_compare_left_1 = par_new.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6269 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 99;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if (tmp_is_1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_1 = par_name.object;

    if ( tmp_assign_source_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 100;
        goto frame_exception_exit_1;
    }

    if (par_new.object == NULL)
    {
        par_new.object = INCREASE_REFCOUNT( tmp_assign_source_1 );
    }
    else
    {
        PyObject *old = par_new.object;
        par_new.object = INCREASE_REFCOUNT( tmp_assign_source_1 );
        Py_DECREF( old );
    }
    branch_no_2:;
    tmp_assattr_name_1 = par_new.object;

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6269 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 101;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = par_self.object;

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 101;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_mod, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 101;
        goto frame_exception_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_assattr_name_2 = par_old.object;

    if ( tmp_assattr_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 60578 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 103;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_2 = par_self.object;

    if ( tmp_assattr_target_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 103;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_mod, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 103;
        goto frame_exception_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_name.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_name,
            par_name.object
        );

    }
    if ((par_old.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_old,
            par_old.object
        );

    }
    if ((par_new.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_new,
            par_new.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1___init___of_class_5_MovedModule_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_old = NULL;
    PyObject *_python_par_new = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_name == key )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_old == key )
            {
                assert( _python_par_old == NULL );
                _python_par_old = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_new == key )
            {
                assert( _python_par_new == NULL );
                _python_par_new = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_name, key ) == 1 )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_old, key ) == 1 )
            {
                assert( _python_par_old == NULL );
                _python_par_old = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_new, key ) == 1 )
            {
                assert( _python_par_new == NULL );
                _python_par_new = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 4  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_name == NULL )
    {
        if ( 1 + self->m_defaults_given >= 4  )
        {
            _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_old != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_old = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_old == NULL )
    {
        if ( 2 + self->m_defaults_given >= 4  )
        {
            _python_par_old = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_new != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_new = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_new == NULL )
    {
        if ( 3 + self->m_defaults_given >= 4  )
        {
            _python_par_new = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_name == NULL || _python_par_old == NULL || _python_par_new == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_name, _python_par_old, _python_par_new };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1___init___of_class_5_MovedModule_of_module_six( self, _python_par_self, _python_par_name, _python_par_old, _python_par_new );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_old );
    Py_XDECREF( _python_par_new );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_5_MovedModule_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4 )
    {
        return impl_function_1___init___of_class_5_MovedModule_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_5_MovedModule_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2__resolve_of_class_5_MovedModule_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_35090bdacdef58177b762b7963f89533, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__import_module );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__import_module );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328304 ], 43, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 106;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 106;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_mod );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 106;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 106;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 106;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_2__resolve_of_class_5_MovedModule_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_resolve() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_resolve() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2__resolve_of_class_5_MovedModule_of_module_six( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2__resolve_of_class_5_MovedModule_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_2__resolve_of_class_5_MovedModule_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2__resolve_of_class_5_MovedModule_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3___getattr___of_class_5_MovedModule_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_attr )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_attr; par_attr.object = _python_par_attr;
    PyObjectLocalVariable var__module;
    PyObjectLocalVariable var_value;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_return_value;
    PyObject *tmp_setattr_attr_1;
    PyObject *tmp_setattr_target_1;
    PyObject *tmp_setattr_value_1;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_9bda0a4fa803866aaf66a3cc405ef002, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 109;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__resolve );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 109;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 109;
    tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS( tmp_called_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 109;
        goto frame_exception_exit_1;
    }
    assert( var__module.object == NULL );
    var__module.object = tmp_assign_source_1;

    tmp_getattr_target_1 = var__module.object;

    tmp_getattr_attr_1 = par_attr.object;

    if ( tmp_getattr_attr_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25199 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 110;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_2 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 110;
        goto frame_exception_exit_1;
    }
    assert( var_value.object == NULL );
    var_value.object = tmp_assign_source_2;

    tmp_setattr_target_1 = par_self.object;

    if ( tmp_setattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 111;
        goto frame_exception_exit_1;
    }

    tmp_setattr_attr_1 = par_attr.object;

    if ( tmp_setattr_attr_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25199 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 111;
        goto frame_exception_exit_1;
    }

    tmp_setattr_value_1 = var_value.object;

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 111;
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var__module.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__module,
            var__module.object
        );

    }
    if ((var_value.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_value,
            var_value.object
        );

    }
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_attr.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_attr,
            par_attr.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = var_value.object;

    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_3___getattr___of_class_5_MovedModule_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_attr = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__getattr__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_attr == key )
            {
                assert( _python_par_attr == NULL );
                _python_par_attr = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_attr, key ) == 1 )
            {
                assert( _python_par_attr == NULL );
                _python_par_attr = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__getattr__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_attr != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_attr = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_attr == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_attr = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_attr == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_attr };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_3___getattr___of_class_5_MovedModule_of_module_six( self, _python_par_self, _python_par_attr );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_attr );

    return NULL;
}

static PyObject *dparse_function_3___getattr___of_class_5_MovedModule_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_3___getattr___of_class_5_MovedModule_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3___getattr___of_class_5_MovedModule_of_module_six( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_6__LazyModule_of_module_six(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___init__;
    PyObjectLocalVariable var___dir__;
    PyObjectLocalVariable var__moved_attributes;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_912c3f53762767d97b67428555da337f, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_assign_source_2 = MAKE_FUNCTION_function_1___init___of_class_6__LazyModule_of_module_six(  );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_2 );

        frame_function->f_lineno = 117;
        goto frame_exception_exit_1;
    }
    assert( var___init__.object == NULL );
    var___init__.object = tmp_assign_source_2;

    tmp_assign_source_3 = MAKE_FUNCTION_function_2___dir___of_class_6__LazyModule_of_module_six(  );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_3 );

        frame_function->f_lineno = 121;
        goto frame_exception_exit_1;
    }
    assert( var___dir__.object == NULL );
    var___dir__.object = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var___dir__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___dir__,
            var___dir__.object
        );

    }
    if ((var__moved_attributes.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__moved_attributes,
            var__moved_attributes.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_assign_source_4 = PyList_New( 0 );
    assert( var__moved_attributes.object == NULL );
    var__moved_attributes.object = tmp_assign_source_4;

    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var___dir__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___dir__,
            var___dir__.object
        );

    }
    if ((var__moved_attributes.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain__moved_attributes,
            var__moved_attributes.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}


static PyObject *impl_function_1___init___of_class_6__LazyModule_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_name; par_name.object = _python_par_name;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_super_object_1;
    PyObject *tmp_super_type_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_5b22459deafbe83b6aa6806c0dcc095c, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_super_type_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_super_type_1 == NULL ))
    {
        tmp_super_type_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_super_type_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328347 ], 40, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 118;
        goto frame_exception_exit_1;
    }

    tmp_super_object_1 = par_self.object;

    if ( tmp_super_object_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 118;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = BUILTIN_SUPER( tmp_super_type_1, tmp_super_object_1 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 118;
        goto frame_exception_exit_1;
    }
    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___init__ );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 118;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = par_name.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 118;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 118;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 118;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_3 = par_self.object;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 119;
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_3 );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 119;
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___doc__ );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_assattr_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 119;
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_1 = par_self.object;

    if ( tmp_assattr_target_1 == NULL )
    {
        Py_DECREF( tmp_assattr_name_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 119;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain___doc__, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_name_1 );

        frame_function->f_lineno = 119;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_1 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_name.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_name,
            par_name.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1___init___of_class_6__LazyModule_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_name == key )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_name, key ) == 1 )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_name == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_name == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_name };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1___init___of_class_6__LazyModule_of_module_six( self, _python_par_self, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_6__LazyModule_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_1___init___of_class_6__LazyModule_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_6__LazyModule_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___dir___of_class_6__LazyModule_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable var_attrs;
    PyObjectLocalVariable var_attr;
    PyObjectTempVariable tmp_listcontr_1__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_1__listcontr_result;
    PyObjectTempVariable tmp_listcontr_1__iter_value_0;
    PyObjectTempVariable tmp_inplace_assign_1__inplace_start;
    PyObjectTempVariable tmp_inplace_assign_1__inplace_end;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *tmp_append_to_1;
    PyObject *tmp_append_value_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_frame_locals;
    bool tmp_isnot_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = LIST_COPY( const_list_str_plain___doc___str_plain___name___list );
    assert( var_attrs.object == NULL );
    var_attrs.object = tmp_assign_source_1;

    tmp_assign_source_2 = var_attrs.object;

    assert( tmp_inplace_assign_1__inplace_start.object == NULL );
    tmp_inplace_assign_1__inplace_start.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_f2e8a6f676b2c05fe9646976f06e2a85, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code
    tmp_assign_source_3 = NULL;
    // Tried code
    tmp_binop_left_1 = tmp_inplace_assign_1__inplace_start.object;

    tmp_binop_right_1 = NULL;
    // Tried code
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 123;
        goto try_finally_handler_3;
    }

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__moved_attributes );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 123;
        goto try_finally_handler_3;
    }
    tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 123;
        goto try_finally_handler_3;
    }
    assert( tmp_listcontr_1__listcontr_iter.object == NULL );
    tmp_listcontr_1__listcontr_iter.object = tmp_assign_source_4;

    tmp_assign_source_5 = PyList_New( 0 );
    assert( tmp_listcontr_1__listcontr_result.object == NULL );
    tmp_listcontr_1__listcontr_result.object = tmp_assign_source_5;

    loop_start_1:;
    tmp_next_source_1 = tmp_listcontr_1__listcontr_iter.object;

    tmp_assign_source_6 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_6 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 123;
            goto try_finally_handler_3;
        }
    }

    if (tmp_listcontr_1__iter_value_0.object == NULL)
    {
        tmp_listcontr_1__iter_value_0.object = tmp_assign_source_6;
    }
    else
    {
        PyObject *old = tmp_listcontr_1__iter_value_0.object;
        tmp_listcontr_1__iter_value_0.object = tmp_assign_source_6;
        Py_DECREF( old );
    }
    tmp_assign_source_7 = tmp_listcontr_1__iter_value_0.object;

    if (var_attr.object == NULL)
    {
        var_attr.object = INCREASE_REFCOUNT( tmp_assign_source_7 );
    }
    else
    {
        PyObject *old = var_attr.object;
        var_attr.object = INCREASE_REFCOUNT( tmp_assign_source_7 );
        Py_DECREF( old );
    }
    tmp_append_to_1 = tmp_listcontr_1__listcontr_result.object;

    tmp_source_name_2 = var_attr.object;

    tmp_append_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_name );
    if ( tmp_append_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 123;
        goto try_finally_handler_3;
    }
    tmp_res = PyList_Append( tmp_append_to_1, tmp_append_value_1 );
    Py_DECREF( tmp_append_value_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 123;
        goto try_finally_handler_3;
    }
    tmp_unused = Py_None;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 123;
        goto try_finally_handler_3;
    }
    goto loop_start_1;
    loop_end_1:;
    tmp_binop_right_1 = tmp_listcontr_1__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_1__iter_value_0.object );
    tmp_listcontr_1__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_2;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_assign_source_3 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_binop_left_1, tmp_binop_right_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 123;
        goto try_finally_handler_2;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_1__listcontr_result.object );
    tmp_listcontr_1__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_1__listcontr_iter.object );
    tmp_listcontr_1__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_1;
    }

    goto finally_end_2;
    finally_end_2:;
    assert( tmp_inplace_assign_1__inplace_end.object == NULL );
    tmp_inplace_assign_1__inplace_end.object = tmp_assign_source_3;

    tmp_compare_left_1 = tmp_inplace_assign_1__inplace_start.object;

    tmp_compare_right_1 = tmp_inplace_assign_1__inplace_end.object;

    tmp_isnot_1 = ( tmp_compare_left_1 != tmp_compare_right_1 );
    if (tmp_isnot_1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_assign_source_8 = tmp_inplace_assign_1__inplace_end.object;

    if (var_attrs.object == NULL)
    {
        var_attrs.object = INCREASE_REFCOUNT( tmp_assign_source_8 );
    }
    else
    {
        PyObject *old = var_attrs.object;
        var_attrs.object = INCREASE_REFCOUNT( tmp_assign_source_8 );
        Py_DECREF( old );
    }
    branch_no_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    tmp_result = tmp_inplace_assign_1__inplace_start.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_inplace_assign_1__inplace_start.object );
        tmp_inplace_assign_1__inplace_start.object = NULL;
    }

    assert( tmp_result != false );
    Py_XDECREF( tmp_inplace_assign_1__inplace_end.object );
    tmp_inplace_assign_1__inplace_end.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto frame_exception_exit_1;
    }

    goto finally_end_3;
    finally_end_3:;
    tmp_return_value = var_attrs.object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 47847 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 124;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_attrs.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_attrs,
            var_attrs.object
        );

    }
    if ((var_attr.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_attr,
            var_attr.object
        );

    }
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_2___dir___of_class_6__LazyModule_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__dir__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__dir__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2___dir___of_class_6__LazyModule_of_module_six( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2___dir___of_class_6__LazyModule_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_2___dir___of_class_6__LazyModule_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___dir___of_class_6__LazyModule_of_module_six( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_7_MovedAttribute_of_module_six(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___init__;
    PyObjectLocalVariable var__resolve;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_defaults_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_e8c5daa80a281b0c8d8b1fddc3823a41, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_defaults_1 = const_tuple_none_none_tuple;
    tmp_assign_source_2 = MAKE_FUNCTION_function_1___init___of_class_7_MovedAttribute_of_module_six( INCREASE_REFCOUNT( tmp_defaults_1 ) );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_2 );

        frame_function->f_lineno = 132;
        goto frame_exception_exit_1;
    }
    assert( var___init__.object == NULL );
    var___init__.object = tmp_assign_source_2;

    tmp_assign_source_3 = MAKE_FUNCTION_function_2__resolve_of_class_7_MovedAttribute_of_module_six(  );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_3 );

        frame_function->f_lineno = 150;
        goto frame_exception_exit_1;
    }
    assert( var__resolve.object == NULL );
    var__resolve.object = tmp_assign_source_3;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var__resolve.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__resolve,
            var__resolve.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var__resolve.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain__resolve,
            var__resolve.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}


static PyObject *impl_function_1___init___of_class_7_MovedAttribute_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_old_mod, PyObject *_python_par_new_mod, PyObject *_python_par_old_attr, PyObject *_python_par_new_attr )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_name; par_name.object = _python_par_name;
    PyObjectLocalVariable par_old_mod; par_old_mod.object = _python_par_old_mod;
    PyObjectLocalVariable par_new_mod; par_new_mod.object = _python_par_new_mod;
    PyObjectLocalVariable par_old_attr; par_old_attr.object = _python_par_old_attr;
    PyObjectLocalVariable par_new_attr; par_new_attr.object = _python_par_new_attr;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_name_4;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assattr_target_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_frame_locals;
    bool tmp_is_1;
    bool tmp_is_2;
    bool tmp_is_3;
    bool tmp_is_4;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_super_object_1;
    PyObject *tmp_super_type_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_7d4516fecc92416065498e83c699f78b, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_super_type_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_super_type_1 == NULL ))
    {
        tmp_super_type_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_super_type_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328387 ], 43, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 133;
        goto frame_exception_exit_1;
    }

    tmp_super_object_1 = par_self.object;

    if ( tmp_super_object_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 133;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = BUILTIN_SUPER( tmp_super_type_1, tmp_super_object_1 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 133;
        goto frame_exception_exit_1;
    }
    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___init__ );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 133;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = par_name.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 133;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 133;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 133;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_cond_value_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_1 == NULL ))
    {
        tmp_cond_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 306438 ], 32, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 134;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 134;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_compare_left_1 = par_new_mod.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328430 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 135;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if (tmp_is_1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_1 = par_name.object;

    if ( tmp_assign_source_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 136;
        goto frame_exception_exit_1;
    }

    if (par_new_mod.object == NULL)
    {
        par_new_mod.object = INCREASE_REFCOUNT( tmp_assign_source_1 );
    }
    else
    {
        PyObject *old = par_new_mod.object;
        par_new_mod.object = INCREASE_REFCOUNT( tmp_assign_source_1 );
        Py_DECREF( old );
    }
    branch_no_2:;
    tmp_assattr_name_1 = par_new_mod.object;

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328430 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 137;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = par_self.object;

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 137;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_mod, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 137;
        goto frame_exception_exit_1;
    }
    tmp_compare_left_2 = par_new_attr.object;

    if ( tmp_compare_left_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 96880 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 138;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_2 = Py_None;
    tmp_is_2 = ( tmp_compare_left_2 == tmp_compare_right_2 );
    if (tmp_is_2)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_compare_left_3 = par_old_attr.object;

    if ( tmp_compare_left_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328483 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 139;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_3 = Py_None;
    tmp_is_3 = ( tmp_compare_left_3 == tmp_compare_right_3 );
    if (tmp_is_3)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_assign_source_2 = par_name.object;

    if ( tmp_assign_source_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 140;
        goto frame_exception_exit_1;
    }

    if (par_new_attr.object == NULL)
    {
        par_new_attr.object = INCREASE_REFCOUNT( tmp_assign_source_2 );
    }
    else
    {
        PyObject *old = par_new_attr.object;
        par_new_attr.object = INCREASE_REFCOUNT( tmp_assign_source_2 );
        Py_DECREF( old );
    }
    goto branch_end_4;
    branch_no_4:;
    tmp_assign_source_3 = par_old_attr.object;

    if ( tmp_assign_source_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328483 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 142;
        goto frame_exception_exit_1;
    }

    if (par_new_attr.object == NULL)
    {
        par_new_attr.object = INCREASE_REFCOUNT( tmp_assign_source_3 );
    }
    else
    {
        PyObject *old = par_new_attr.object;
        par_new_attr.object = INCREASE_REFCOUNT( tmp_assign_source_3 );
        Py_DECREF( old );
    }
    branch_end_4:;
    branch_no_3:;
    tmp_assattr_name_2 = par_new_attr.object;

    if ( tmp_assattr_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 96880 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 143;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_2 = par_self.object;

    if ( tmp_assattr_target_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 143;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_attr, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 143;
        goto frame_exception_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_assattr_name_3 = par_old_mod.object;

    if ( tmp_assattr_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328537 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 145;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_3 = par_self.object;

    if ( tmp_assattr_target_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 145;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_mod, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 145;
        goto frame_exception_exit_1;
    }
    tmp_compare_left_4 = par_old_attr.object;

    if ( tmp_compare_left_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328483 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 146;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_4 = Py_None;
    tmp_is_4 = ( tmp_compare_left_4 == tmp_compare_right_4 );
    if (tmp_is_4)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_assign_source_4 = par_name.object;

    if ( tmp_assign_source_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 147;
        goto frame_exception_exit_1;
    }

    if (par_old_attr.object == NULL)
    {
        par_old_attr.object = INCREASE_REFCOUNT( tmp_assign_source_4 );
    }
    else
    {
        PyObject *old = par_old_attr.object;
        par_old_attr.object = INCREASE_REFCOUNT( tmp_assign_source_4 );
        Py_DECREF( old );
    }
    branch_no_5:;
    tmp_assattr_name_4 = par_old_attr.object;

    if ( tmp_assattr_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328483 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 148;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_4 = par_self.object;

    if ( tmp_assattr_target_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 148;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_attr, tmp_assattr_name_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 148;
        goto frame_exception_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_name.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_name,
            par_name.object
        );

    }
    if ((par_old_mod.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_old_mod,
            par_old_mod.object
        );

    }
    if ((par_new_mod.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_new_mod,
            par_new_mod.object
        );

    }
    if ((par_old_attr.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_old_attr,
            par_old_attr.object
        );

    }
    if ((par_new_attr.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_new_attr,
            par_new_attr.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1___init___of_class_7_MovedAttribute_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_old_mod = NULL;
    PyObject *_python_par_new_mod = NULL;
    PyObject *_python_par_old_attr = NULL;
    PyObject *_python_par_new_attr = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_name == key )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_old_mod == key )
            {
                assert( _python_par_old_mod == NULL );
                _python_par_old_mod = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_new_mod == key )
            {
                assert( _python_par_new_mod == NULL );
                _python_par_new_mod = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_old_attr == key )
            {
                assert( _python_par_old_attr == NULL );
                _python_par_old_attr = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_new_attr == key )
            {
                assert( _python_par_new_attr == NULL );
                _python_par_new_attr = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_name, key ) == 1 )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_old_mod, key ) == 1 )
            {
                assert( _python_par_old_mod == NULL );
                _python_par_old_mod = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_new_mod, key ) == 1 )
            {
                assert( _python_par_new_mod == NULL );
                _python_par_new_mod = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_old_attr, key ) == 1 )
            {
                assert( _python_par_old_attr == NULL );
                _python_par_old_attr = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_new_attr, key ) == 1 )
            {
                assert( _python_par_new_attr == NULL );
                _python_par_new_attr = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 6 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 6  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_name == NULL )
    {
        if ( 1 + self->m_defaults_given >= 6  )
        {
            _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_old_mod != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_old_mod = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_old_mod == NULL )
    {
        if ( 2 + self->m_defaults_given >= 6  )
        {
            _python_par_old_mod = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_new_mod != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_new_mod = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_new_mod == NULL )
    {
        if ( 3 + self->m_defaults_given >= 6  )
        {
            _python_par_new_mod = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 4 < args_given ))
    {
         if (unlikely( _python_par_old_attr != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 4 );
             goto error_exit;
         }

        _python_par_old_attr = INCREASE_REFCOUNT( args[ 4 ] );
    }
    else if ( _python_par_old_attr == NULL )
    {
        if ( 4 + self->m_defaults_given >= 6  )
        {
            _python_par_old_attr = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 4 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 5 < args_given ))
    {
         if (unlikely( _python_par_new_attr != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 5 );
             goto error_exit;
         }

        _python_par_new_attr = INCREASE_REFCOUNT( args[ 5 ] );
    }
    else if ( _python_par_new_attr == NULL )
    {
        if ( 5 + self->m_defaults_given >= 6  )
        {
            _python_par_new_attr = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 5 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_name == NULL || _python_par_old_mod == NULL || _python_par_new_mod == NULL || _python_par_old_attr == NULL || _python_par_new_attr == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_name, _python_par_old_mod, _python_par_new_mod, _python_par_old_attr, _python_par_new_attr };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1___init___of_class_7_MovedAttribute_of_module_six( self, _python_par_self, _python_par_name, _python_par_old_mod, _python_par_new_mod, _python_par_old_attr, _python_par_new_attr );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_old_mod );
    Py_XDECREF( _python_par_new_mod );
    Py_XDECREF( _python_par_old_attr );
    Py_XDECREF( _python_par_new_attr );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_7_MovedAttribute_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6 )
    {
        return impl_function_1___init___of_class_7_MovedAttribute_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_7_MovedAttribute_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2__resolve_of_class_7_MovedAttribute_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable var_module;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_76f31734a4b07b51197fe9c5feaf55d3, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__import_module );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__import_module );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328304 ], 43, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 151;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 151;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_mod );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 151;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 151;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 151;
        goto frame_exception_exit_1;
    }
    assert( var_module.object == NULL );
    var_module.object = tmp_assign_source_1;

    tmp_getattr_target_1 = var_module.object;

    tmp_source_name_2 = par_self.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 152;
        goto frame_exception_exit_1;
    }

    tmp_getattr_attr_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_attr );
    if ( tmp_getattr_attr_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 152;
        goto frame_exception_exit_1;
    }
    tmp_return_value = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    Py_DECREF( tmp_getattr_attr_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 152;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_module.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_module,
            var_module.object
        );

    }
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_2__resolve_of_class_7_MovedAttribute_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_resolve() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_resolve() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2__resolve_of_class_7_MovedAttribute_of_module_six( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2__resolve_of_class_7_MovedAttribute_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_2__resolve_of_class_7_MovedAttribute_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2__resolve_of_class_7_MovedAttribute_of_module_six( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_8__SixMetaPathImporter_of_module_six(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___doc__;
    PyObjectLocalVariable var___init__;
    PyObjectLocalVariable var__add_module;
    PyObjectLocalVariable var__get_module;
    PyObjectLocalVariable var_find_module;
    PyObjectLocalVariable var___get_module;
    PyObjectLocalVariable var_load_module;
    PyObjectLocalVariable var_is_package;
    PyObjectLocalVariable var_get_code;
    PyObjectLocalVariable var_get_source;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_defaults_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    tmp_assign_source_2 = const_str_digest_9bd8782ae1b14069f74b2d461711434b;
    assert( var___doc__.object == NULL );
    var___doc__.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_7041a499ab64c2d382428e00b38beace, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_assign_source_3 = MAKE_FUNCTION_function_1___init___of_class_8__SixMetaPathImporter_of_module_six(  );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_3 );

        frame_function->f_lineno = 162;
        goto frame_exception_exit_1;
    }
    assert( var___init__.object == NULL );
    var___init__.object = tmp_assign_source_3;

    tmp_assign_source_4 = MAKE_FUNCTION_function_2__add_module_of_class_8__SixMetaPathImporter_of_module_six(  );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_4 );

        frame_function->f_lineno = 166;
        goto frame_exception_exit_1;
    }
    assert( var__add_module.object == NULL );
    var__add_module.object = tmp_assign_source_4;

    tmp_assign_source_5 = MAKE_FUNCTION_function_3__get_module_of_class_8__SixMetaPathImporter_of_module_six(  );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_5 );

        frame_function->f_lineno = 170;
        goto frame_exception_exit_1;
    }
    assert( var__get_module.object == NULL );
    var__get_module.object = tmp_assign_source_5;

    tmp_defaults_1 = const_tuple_none_tuple;
    tmp_assign_source_6 = MAKE_FUNCTION_function_4_find_module_of_class_8__SixMetaPathImporter_of_module_six( INCREASE_REFCOUNT( tmp_defaults_1 ) );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_6 );

        frame_function->f_lineno = 173;
        goto frame_exception_exit_1;
    }
    assert( var_find_module.object == NULL );
    var_find_module.object = tmp_assign_source_6;

    tmp_assign_source_7 = MAKE_FUNCTION_function_5___get_module_of_class_8__SixMetaPathImporter_of_module_six(  );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_7 );

        frame_function->f_lineno = 178;
        goto frame_exception_exit_1;
    }
    assert( var___get_module.object == NULL );
    var___get_module.object = tmp_assign_source_7;

    tmp_assign_source_8 = MAKE_FUNCTION_function_6_load_module_of_class_8__SixMetaPathImporter_of_module_six(  );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_8 );

        frame_function->f_lineno = 184;
        goto frame_exception_exit_1;
    }
    assert( var_load_module.object == NULL );
    var_load_module.object = tmp_assign_source_8;

    tmp_assign_source_9 = MAKE_FUNCTION_function_7_is_package_of_class_8__SixMetaPathImporter_of_module_six(  );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_9 );

        frame_function->f_lineno = 198;
        goto frame_exception_exit_1;
    }
    assert( var_is_package.object == NULL );
    var_is_package.object = tmp_assign_source_9;

    tmp_assign_source_10 = MAKE_FUNCTION_function_8_get_code_of_class_8__SixMetaPathImporter_of_module_six(  );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_10 );

        frame_function->f_lineno = 207;
        goto frame_exception_exit_1;
    }
    assert( var_get_code.object == NULL );
    var_get_code.object = tmp_assign_source_10;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var__add_module.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__add_module,
            var__add_module.object
        );

    }
    if ((var__get_module.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__get_module,
            var__get_module.object
        );

    }
    if ((var_find_module.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_find_module,
            var_find_module.object
        );

    }
    if ((var___get_module.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__SixMetaPathImporter__get_module,
            var___get_module.object
        );

    }
    if ((var_load_module.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_load_module,
            var_load_module.object
        );

    }
    if ((var_is_package.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_is_package,
            var_is_package.object
        );

    }
    if ((var_get_code.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_get_code,
            var_get_code.object
        );

    }
    if ((var_get_source.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_get_source,
            var_get_source.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_assign_source_11 = var_get_code.object;

    assert( var_get_source.object == NULL );
    var_get_source.object = INCREASE_REFCOUNT( tmp_assign_source_11 );

    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var__add_module.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain__add_module,
            var__add_module.object
        );

    }
    if ((var__get_module.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain__get_module,
            var__get_module.object
        );

    }
    if ((var_find_module.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_find_module,
            var_find_module.object
        );

    }
    if ((var___get_module.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain__SixMetaPathImporter__get_module,
            var___get_module.object
        );

    }
    if ((var_load_module.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_load_module,
            var_load_module.object
        );

    }
    if ((var_is_package.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_is_package,
            var_is_package.object
        );

    }
    if ((var_get_code.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_get_code,
            var_get_code.object
        );

    }
    if ((var_get_source.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_get_source,
            var_get_source.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}


static PyObject *impl_function_1___init___of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_six_module_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_six_module_name; par_six_module_name.object = _python_par_six_module_name;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_frame_locals;
    bool tmp_result;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_2ca5305117764c289bf4688897080d7c, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_assattr_name_1 = par_six_module_name.object;

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328590 ], 61, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 163;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = par_self.object;

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 163;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_name, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 163;
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_2 = PyDict_New();
    tmp_assattr_target_2 = par_self.object;

    if ( tmp_assattr_target_2 == NULL )
    {
        Py_DECREF( tmp_assattr_name_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 164;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_known_modules, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        frame_function->f_lineno = 164;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_six_module_name.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_six_module_name,
            par_six_module_name.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1___init___of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_six_module_name = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_six_module_name == key )
            {
                assert( _python_par_six_module_name == NULL );
                _python_par_six_module_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_six_module_name, key ) == 1 )
            {
                assert( _python_par_six_module_name == NULL );
                _python_par_six_module_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_six_module_name != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_six_module_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_six_module_name == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_six_module_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_six_module_name == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_six_module_name };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1___init___of_class_8__SixMetaPathImporter_of_module_six( self, _python_par_self, _python_par_six_module_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_six_module_name );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_1___init___of_class_8__SixMetaPathImporter_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_8__SixMetaPathImporter_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2__add_module_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_mod, PyObject *_python_par_fullnames )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_mod; par_mod.object = _python_par_mod;
    PyObjectLocalVariable par_fullnames; par_fullnames.object = _python_par_fullnames;
    PyObjectLocalVariable var_fullname;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    int tmp_tried_lineno_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_7e13f37428dcc9f192b599fd585bbd2b, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_iter_arg_1 = par_fullnames.object;

    if ( tmp_iter_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328651 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 167;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 167;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_1;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_2 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 167;
            goto try_finally_handler_1;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_2;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_2;
        Py_DECREF( old );
    }
    tmp_assign_source_3 = tmp_for_loop_1__iter_value.object;

    if (var_fullname.object == NULL)
    {
        var_fullname.object = INCREASE_REFCOUNT( tmp_assign_source_3 );
    }
    else
    {
        PyObject *old = var_fullname.object;
        var_fullname.object = INCREASE_REFCOUNT( tmp_assign_source_3 );
        Py_DECREF( old );
    }
    tmp_ass_subvalue_1 = par_mod.object;

    if ( tmp_ass_subvalue_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 23523 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 168;
        goto try_finally_handler_1;
    }

    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 168;
        goto try_finally_handler_1;
    }

    tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_known_modules );
    if ( tmp_ass_subscribed_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 168;
        goto try_finally_handler_1;
    }
    tmp_source_name_2 = par_self.object;

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_ass_subscribed_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 168;
        goto try_finally_handler_1;
    }

    tmp_binop_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_name );
    if ( tmp_binop_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_ass_subscribed_1 );

        frame_function->f_lineno = 168;
        goto try_finally_handler_1;
    }
    tmp_binop_right_2 = const_str_dot;
    tmp_binop_left_1 = BINARY_OPERATION_ADD( tmp_binop_left_2, tmp_binop_right_2 );
    Py_DECREF( tmp_binop_left_2 );
    if ( tmp_binop_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_ass_subscribed_1 );

        frame_function->f_lineno = 168;
        goto try_finally_handler_1;
    }
    tmp_binop_right_1 = var_fullname.object;

    tmp_ass_subscript_1 = BINARY_OPERATION_ADD( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_left_1 );
    if ( tmp_ass_subscript_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_ass_subscribed_1 );

        frame_function->f_lineno = 168;
        goto try_finally_handler_1;
    }
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subscribed_1 );
    Py_DECREF( tmp_ass_subscript_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 168;
        goto try_finally_handler_1;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 167;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_fullname.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fullname,
            var_fullname.object
        );

    }
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_mod.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_mod,
            par_mod.object
        );

    }
    if ((par_fullnames.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fullnames,
            par_fullnames.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_2__add_module_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_mod = NULL;
    PyObject *_python_par_fullnames = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_add_module() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_mod == key )
            {
                assert( _python_par_mod == NULL );
                _python_par_mod = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_mod, key ) == 1 )
            {
                assert( _python_par_mod == NULL );
                _python_par_mod = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_add_module() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_mod != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_mod = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_mod == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_mod = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_mod == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_mod };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 2 )
    {
        _python_par_fullnames = PyTuple_New( args_size - 2 );

        for( Py_ssize_t i = 0; i < args_size - 2; i++ )
        {
           PyTuple_SET_ITEM( _python_par_fullnames, i, INCREASE_REFCOUNT( args[2+i] ) );
        }
    }
    else
    {
        _python_par_fullnames = INCREASE_REFCOUNT( const_tuple_empty );
    }


    return impl_function_2__add_module_of_class_8__SixMetaPathImporter_of_module_six( self, _python_par_self, _python_par_mod, _python_par_fullnames );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_mod );
    Py_XDECREF( _python_par_fullnames );

    return NULL;
}

static PyObject *dparse_function_2__add_module_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_2__add_module_of_class_8__SixMetaPathImporter_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), MAKE_TUPLE( &args[ 2 ], size > 2 ? size-2 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_function_2__add_module_of_class_8__SixMetaPathImporter_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3__get_module_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_fullname )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_fullname; par_fullname.object = _python_par_fullname;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_967df4f7bc00c42dd7fc949284be2885, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 171;
        goto frame_exception_exit_1;
    }

    tmp_subscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_known_modules );
    if ( tmp_subscr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 171;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = par_self.object;

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_subscr_target_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 171;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_name );
    if ( tmp_binop_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_subscr_target_1 );

        frame_function->f_lineno = 171;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_2 = const_str_dot;
    tmp_binop_left_1 = BINARY_OPERATION_ADD( tmp_binop_left_2, tmp_binop_right_2 );
    Py_DECREF( tmp_binop_left_2 );
    if ( tmp_binop_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_subscr_target_1 );

        frame_function->f_lineno = 171;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_1 = par_fullname.object;

    if ( tmp_binop_right_1 == NULL )
    {
        Py_DECREF( tmp_subscr_target_1 );
        Py_DECREF( tmp_binop_left_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 86921 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 171;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_1 = BINARY_OPERATION_ADD( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_left_1 );
    if ( tmp_subscr_subscript_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_subscr_target_1 );

        frame_function->f_lineno = 171;
        goto frame_exception_exit_1;
    }
    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    Py_DECREF( tmp_subscr_target_1 );
    Py_DECREF( tmp_subscr_subscript_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 171;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_fullname.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fullname,
            par_fullname.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_3__get_module_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_fullname = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_module() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_fullname == key )
            {
                assert( _python_par_fullname == NULL );
                _python_par_fullname = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_fullname, key ) == 1 )
            {
                assert( _python_par_fullname == NULL );
                _python_par_fullname = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_module() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_fullname != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_fullname = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_fullname == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_fullname = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_fullname == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_fullname };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_3__get_module_of_class_8__SixMetaPathImporter_of_module_six( self, _python_par_self, _python_par_fullname );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_fullname );

    return NULL;
}

static PyObject *dparse_function_3__get_module_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_3__get_module_of_class_8__SixMetaPathImporter_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3__get_module_of_class_8__SixMetaPathImporter_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_find_module_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_fullname, PyObject *_python_par_path )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_fullname; par_fullname.object = _python_par_fullname;
    PyObjectLocalVariable par_path; par_path.object = _python_par_path;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_5b029a1d201cc8a9a3e84892457a65e7, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_fullname.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 86921 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 174;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 174;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_known_modules );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 174;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    if ( tmp_cmp_In_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_1 );

        frame_function->f_lineno = 174;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_1 );
    if (tmp_cmp_In_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = par_self.object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 175;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_fullname.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fullname,
            par_fullname.object
        );

    }
    if ((par_path.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_path,
            par_path.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_4_find_module_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_fullname = NULL;
    PyObject *_python_par_path = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "find_module() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_fullname == key )
            {
                assert( _python_par_fullname == NULL );
                _python_par_fullname = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_path == key )
            {
                assert( _python_par_path == NULL );
                _python_par_path = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_fullname, key ) == 1 )
            {
                assert( _python_par_fullname == NULL );
                _python_par_fullname = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_path, key ) == 1 )
            {
                assert( _python_par_path == NULL );
                _python_par_path = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "find_module() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_fullname != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_fullname = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_fullname == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_fullname = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_path != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_path = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_path == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_path = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_fullname == NULL || _python_par_path == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_fullname, _python_par_path };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_4_find_module_of_class_8__SixMetaPathImporter_of_module_six( self, _python_par_self, _python_par_fullname, _python_par_path );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_fullname );
    Py_XDECREF( _python_par_path );

    return NULL;
}

static PyObject *dparse_function_4_find_module_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_4_find_module_of_class_8__SixMetaPathImporter_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_find_module_of_class_8__SixMetaPathImporter_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5___get_module_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_fullname )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_fullname; par_fullname.object = _python_par_fullname;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_578993c22e3d44e827f0e63f9bdd9abb, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried block of try/except
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 180;
        goto try_except_handler_1;
    }

    tmp_subscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_known_modules );
    if ( tmp_subscr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 180;
        goto try_except_handler_1;
    }
    tmp_subscr_subscript_1 = par_fullname.object;

    if ( tmp_subscr_subscript_1 == NULL )
    {
        Py_DECREF( tmp_subscr_target_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 86921 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 180;
        goto try_except_handler_1;
    }

    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    Py_DECREF( tmp_subscr_target_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 180;
        goto try_except_handler_1;
    }
    goto frame_return_exit_1;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_KeyError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 181;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_binop_left_1 = const_str_digest_d5353604f715269e7545044635e49ff2;
    tmp_binop_right_1 = par_fullname.object;

    if ( tmp_binop_right_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 86921 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 182;
        goto frame_exception_exit_1;
    }

    tmp_make_exception_arg_1 = BINARY_OPERATION_ADD( tmp_binop_left_1, tmp_binop_right_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 182;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 182;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ImportError, tmp_make_exception_arg_1 );
    Py_DECREF( tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 182;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 182;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    goto branch_end_1;
    branch_no_1:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_1:;
    try_except_end_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_fullname.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fullname,
            par_fullname.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_5___get_module_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_fullname = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__get_module() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_fullname == key )
            {
                assert( _python_par_fullname == NULL );
                _python_par_fullname = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_fullname, key ) == 1 )
            {
                assert( _python_par_fullname == NULL );
                _python_par_fullname = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__get_module() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_fullname != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_fullname = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_fullname == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_fullname = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_fullname == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_fullname };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_5___get_module_of_class_8__SixMetaPathImporter_of_module_six( self, _python_par_self, _python_par_fullname );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_fullname );

    return NULL;
}

static PyObject *dparse_function_5___get_module_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_5___get_module_of_class_8__SixMetaPathImporter_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5___get_module_of_class_8__SixMetaPathImporter_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_load_module_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_fullname )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_fullname; par_fullname.object = _python_par_fullname;
    PyObjectLocalVariable var_mod;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_fed463154ee956f08711ebbbc3b0f76d, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried block of try/except
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5370 ], 32, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 187;
        goto try_except_handler_1;
    }

    tmp_subscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_modules );
    if ( tmp_subscr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 187;
        goto try_except_handler_1;
    }
    tmp_subscr_subscript_1 = par_fullname.object;

    if ( tmp_subscr_subscript_1 == NULL )
    {
        Py_DECREF( tmp_subscr_target_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 86921 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 187;
        goto try_except_handler_1;
    }

    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    Py_DECREF( tmp_subscr_target_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 187;
        goto try_except_handler_1;
    }
    goto frame_return_exit_1;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_KeyError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 188;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_no_1:;
    try_except_end_1:;
    tmp_source_name_2 = par_self.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 190;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__SixMetaPathImporter__get_module );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 190;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = par_fullname.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 86921 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 190;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 190;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 190;
        goto frame_exception_exit_1;
    }
    assert( var_mod.object == NULL );
    var_mod.object = tmp_assign_source_1;

    tmp_isinstance_inst_1 = var_mod.object;

    tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_isinstance_cls_1 == NULL ))
    {
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328264 ], 40, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 191;
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 191;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_3 = var_mod.object;

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__resolve );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 192;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 192;
    tmp_assign_source_2 = CALL_FUNCTION_NO_ARGS( tmp_called_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 192;
        goto frame_exception_exit_1;
    }
    assert( var_mod.object != NULL );
    {
        PyObject *old = var_mod.object;
        var_mod.object = tmp_assign_source_2;
        Py_DECREF( old );
    }

    goto branch_end_2;
    branch_no_2:;
    tmp_assattr_name_1 = par_self.object;

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 194;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = var_mod.object;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain___loader__, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 194;
        goto frame_exception_exit_1;
    }
    branch_end_2:;
    tmp_ass_subvalue_1 = var_mod.object;

    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5370 ], 32, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 195;
        goto frame_exception_exit_1;
    }

    tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_modules );
    if ( tmp_ass_subscribed_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 195;
        goto frame_exception_exit_1;
    }
    tmp_ass_subscript_1 = par_fullname.object;

    if ( tmp_ass_subscript_1 == NULL )
    {
        Py_DECREF( tmp_ass_subscribed_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 86921 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 195;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subscribed_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 195;
        goto frame_exception_exit_1;
    }

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_mod.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_mod,
            var_mod.object
        );

    }
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_fullname.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fullname,
            par_fullname.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = var_mod.object;

    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_6_load_module_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_fullname = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "load_module() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_fullname == key )
            {
                assert( _python_par_fullname == NULL );
                _python_par_fullname = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_fullname, key ) == 1 )
            {
                assert( _python_par_fullname == NULL );
                _python_par_fullname = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "load_module() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_fullname != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_fullname = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_fullname == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_fullname = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_fullname == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_fullname };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_6_load_module_of_class_8__SixMetaPathImporter_of_module_six( self, _python_par_self, _python_par_fullname );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_fullname );

    return NULL;
}

static PyObject *dparse_function_6_load_module_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_6_load_module_of_class_8__SixMetaPathImporter_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_load_module_of_class_8__SixMetaPathImporter_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_is_package_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_fullname )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_fullname; par_fullname.object = _python_par_fullname;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_hasattr_attr_1;
    PyObject *tmp_hasattr_value_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_4488ea1fcc4224dea897cf84dac85bc9, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 205;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__SixMetaPathImporter__get_module );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 205;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = par_fullname.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 86921 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 205;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 205;
    tmp_hasattr_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_hasattr_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 205;
        goto frame_exception_exit_1;
    }
    tmp_hasattr_attr_1 = const_str_plain___path__;
    tmp_return_value = BUILTIN_HASATTR( tmp_hasattr_value_1, tmp_hasattr_attr_1 );
    Py_DECREF( tmp_hasattr_value_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 205;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_fullname.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fullname,
            par_fullname.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_7_is_package_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_fullname = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "is_package() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_fullname == key )
            {
                assert( _python_par_fullname == NULL );
                _python_par_fullname = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_fullname, key ) == 1 )
            {
                assert( _python_par_fullname == NULL );
                _python_par_fullname = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "is_package() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_fullname != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_fullname = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_fullname == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_fullname = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_fullname == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_fullname };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_7_is_package_of_class_8__SixMetaPathImporter_of_module_six( self, _python_par_self, _python_par_fullname );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_fullname );

    return NULL;
}

static PyObject *dparse_function_7_is_package_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_7_is_package_of_class_8__SixMetaPathImporter_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_is_package_of_class_8__SixMetaPathImporter_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_get_code_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_fullname )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_fullname; par_fullname.object = _python_par_fullname;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_815973a5b3f9d8606534d1b42959dd46, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 211;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__SixMetaPathImporter__get_module );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 211;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = par_fullname.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 86921 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 211;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 211;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 211;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_fullname.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fullname,
            par_fullname.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_8_get_code_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_fullname = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_code() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_fullname == key )
            {
                assert( _python_par_fullname == NULL );
                _python_par_fullname = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_fullname, key ) == 1 )
            {
                assert( _python_par_fullname == NULL );
                _python_par_fullname = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_code() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_fullname != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_fullname = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_fullname == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_fullname = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_fullname == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_fullname };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_8_get_code_of_class_8__SixMetaPathImporter_of_module_six( self, _python_par_self, _python_par_fullname );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_fullname );

    return NULL;
}

static PyObject *dparse_function_8_get_code_of_class_8__SixMetaPathImporter_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_8_get_code_of_class_8__SixMetaPathImporter_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_get_code_of_class_8__SixMetaPathImporter_of_module_six( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_9__MovedItems_of_module_six(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___doc__;
    PyObjectLocalVariable var___path__;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    tmp_assign_source_2 = const_str_digest_ee421aaef1e8e27d2ada1b5e28854b9d;
    assert( var___doc__.object == NULL );
    var___doc__.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    tmp_assign_source_3 = PyList_New( 0 );
    assert( var___path__.object == NULL );
    var___path__.object = tmp_assign_source_3;

    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    if ((var___path__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___path__,
            var___path__.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
    return NULL;
function_return_exit:
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_10_Module_six_moves_urllib_parse_of_module_six(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___doc__;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    tmp_assign_source_2 = const_str_digest_158128f324cd0b7e9a0c7369f05b3743;
    assert( var___doc__.object == NULL );
    var___doc__.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
    return NULL;
function_return_exit:
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_11_Module_six_moves_urllib_error_of_module_six(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___doc__;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    tmp_assign_source_2 = const_str_digest_2f96a4211b4d639e460695c987d251ab;
    assert( var___doc__.object == NULL );
    var___doc__.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
    return NULL;
function_return_exit:
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_12_Module_six_moves_urllib_request_of_module_six(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___doc__;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    tmp_assign_source_2 = const_str_digest_43295792b57e43cfed1d0c6ee2500214;
    assert( var___doc__.object == NULL );
    var___doc__.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
    return NULL;
function_return_exit:
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_13_Module_six_moves_urllib_response_of_module_six(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___doc__;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    tmp_assign_source_2 = const_str_digest_0e09ef170691cc3624a648893725e3c4;
    assert( var___doc__.object == NULL );
    var___doc__.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
    return NULL;
function_return_exit:
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_14_Module_six_moves_urllib_robotparser_of_module_six(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___doc__;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    tmp_assign_source_2 = const_str_digest_6eac8acc479fac8342428ff45bb85fd0;
    assert( var___doc__.object == NULL );
    var___doc__.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
    return NULL;
function_return_exit:
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_class_15_Module_six_moves_urllib_of_module_six(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___doc__;
    PyObjectLocalVariable var___path__;
    PyObjectLocalVariable var_parse;
    PyObjectLocalVariable var_error;
    PyObjectLocalVariable var_request;
    PyObjectLocalVariable var_response;
    PyObjectLocalVariable var_robotparser;
    PyObjectLocalVariable var___dir__;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    tmp_assign_source_2 = const_str_digest_6a06b1b58e4eec22be4b2ce0ccc8adac;
    assert( var___doc__.object == NULL );
    var___doc__.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    tmp_assign_source_3 = PyList_New( 0 );
    assert( var___path__.object == NULL );
    var___path__.object = tmp_assign_source_3;

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_1fe4344c193f74fd7c0d3f6cf736c771, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328706 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 439;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__get_module );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 439;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_str_digest_07ed22282f379a33c63322cb6fa7148c;
    frame_function->f_lineno = 439;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 439;
        goto frame_exception_exit_1;
    }
    assert( var_parse.object == NULL );
    var_parse.object = tmp_assign_source_4;

    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328706 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 440;
        goto frame_exception_exit_1;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__get_module );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 440;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_2 = const_str_digest_0821e86cdc90e3da738c005321baa64b;
    frame_function->f_lineno = 440;
    tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 440;
        goto frame_exception_exit_1;
    }
    assert( var_error.object == NULL );
    var_error.object = tmp_assign_source_5;

    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328706 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 441;
        goto frame_exception_exit_1;
    }

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__get_module );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 441;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_3 = const_str_digest_7493ab77aa1289d14c9fc8089c1e4ac1;
    frame_function->f_lineno = 441;
    tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_3 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 441;
        goto frame_exception_exit_1;
    }
    assert( var_request.object == NULL );
    var_request.object = tmp_assign_source_6;

    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328706 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 442;
        goto frame_exception_exit_1;
    }

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__get_module );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 442;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_4 = const_str_digest_6b8760e9f9f00fbb357f678f1929504f;
    frame_function->f_lineno = 442;
    tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 442;
        goto frame_exception_exit_1;
    }
    assert( var_response.object == NULL );
    var_response.object = tmp_assign_source_7;

    tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_5 == NULL ))
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328706 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 443;
        goto frame_exception_exit_1;
    }

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__get_module );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 443;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_5 = const_str_digest_6932f06280679bface4e22a9e746d155;
    frame_function->f_lineno = 443;
    tmp_assign_source_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_5 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 443;
        goto frame_exception_exit_1;
    }
    assert( var_robotparser.object == NULL );
    var_robotparser.object = tmp_assign_source_8;

    tmp_assign_source_9 = MAKE_FUNCTION_function_1___dir___of_class_15_Module_six_moves_urllib_of_module_six(  );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_9 );

        frame_function->f_lineno = 445;
        goto frame_exception_exit_1;
    }
    assert( var___dir__.object == NULL );
    var___dir__.object = tmp_assign_source_9;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    if ((var___path__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___path__,
            var___path__.object
        );

    }
    if ((var_parse.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_parse,
            var_parse.object
        );

    }
    if ((var_error.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_error,
            var_error.object
        );

    }
    if ((var_request.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_request,
            var_request.object
        );

    }
    if ((var_response.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_response,
            var_response.object
        );

    }
    if ((var_robotparser.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_robotparser,
            var_robotparser.object
        );

    }
    if ((var___dir__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___dir__,
            var___dir__.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    if ((var___path__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___path__,
            var___path__.object
        );

    }
    if ((var_parse.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_parse,
            var_parse.object
        );

    }
    if ((var_error.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_error,
            var_error.object
        );

    }
    if ((var_request.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_request,
            var_request.object
        );

    }
    if ((var_response.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_response,
            var_response.object
        );

    }
    if ((var_robotparser.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_robotparser,
            var_robotparser.object
        );

    }
    if ((var___dir__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___dir__,
            var___dir__.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}


static PyObject *impl_function_1___dir___of_class_15_Module_six_moves_urllib_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_return_value = LIST_COPY( const_list_1c82cc17d8f54cff757731adfdff677e_list );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1___dir___of_class_15_Module_six_moves_urllib_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__dir__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__dir__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1___dir___of_class_15_Module_six_moves_urllib_of_module_six( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_1___dir___of_class_15_Module_six_moves_urllib_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_1___dir___of_class_15_Module_six_moves_urllib_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___dir___of_class_15_Module_six_moves_urllib_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_16_add_move_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_move )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_move; par_move.object = _python_par_move;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_setattr_attr_1;
    PyObject *tmp_setattr_target_1;
    PyObject *tmp_setattr_value_1;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_2d1b05a953dc1346654ef86c67dbd200, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_setattr_target_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems );

    if (unlikely( tmp_setattr_target_1 == NULL ))
    {
        tmp_setattr_target_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__MovedItems );
    }

    if ( tmp_setattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328744 ], 40, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 454;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = par_move.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328784 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 454;
        goto frame_exception_exit_1;
    }

    tmp_setattr_attr_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_name );
    if ( tmp_setattr_attr_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 454;
        goto frame_exception_exit_1;
    }
    tmp_setattr_value_1 = par_move.object;

    if ( tmp_setattr_value_1 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328784 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 454;
        goto frame_exception_exit_1;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
    Py_DECREF( tmp_setattr_attr_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 454;
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_move.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_move,
            par_move.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_16_add_move_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_move = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_move() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_move == key )
            {
                assert( _python_par_move == NULL );
                _python_par_move = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_move, key ) == 1 )
            {
                assert( _python_par_move == NULL );
                _python_par_move = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_move() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_move != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_move = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_move == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_move = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_move == NULL ))
    {
        PyObject *values[] = { _python_par_move };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_16_add_move_of_module_six( self, _python_par_move );

error_exit:;

    Py_XDECREF( _python_par_move );

    return NULL;
}

static PyObject *dparse_function_16_add_move_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_16_add_move_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_16_add_move_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_17_remove_move_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_name; par_name.object = _python_par_name;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_called_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_delsubscr_subscript_1;
    PyObject *tmp_delsubscr_target_1;
    int tmp_exc_match_exception_match_1;
    int tmp_exc_match_exception_match_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_f91f4fcf5fc3b121c1d8d0d7f9842556, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried block of try/except
    tmp_called_1 = LOOKUP_BUILTIN( const_str_plain_delattr );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 460;
        goto try_except_handler_1;
    }
    tmp_call_arg_element_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems );

    if (unlikely( tmp_call_arg_element_1 == NULL ))
    {
        tmp_call_arg_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__MovedItems );
    }

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328744 ], 40, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 460;
        goto try_except_handler_1;
    }

    tmp_call_arg_element_2 = par_name.object;

    if ( tmp_call_arg_element_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 460;
        goto try_except_handler_1;
    }

    frame_function->f_lineno = 460;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 460;
        goto try_except_handler_1;
    }
    Py_DECREF( tmp_unused );
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_AttributeError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 461;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    // Tried block of try/except
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_moves );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_moves );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328834 ], 34, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 463;
        goto try_except_handler_2;
    }

    tmp_delsubscr_target_1 = LOOKUP_ATTRIBUTE_DICT_SLOT( tmp_source_name_1 );
    if ( tmp_delsubscr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 463;
        goto try_except_handler_2;
    }
    tmp_delsubscr_subscript_1 = par_name.object;

    if ( tmp_delsubscr_subscript_1 == NULL )
    {
        Py_DECREF( tmp_delsubscr_target_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 463;
        goto try_except_handler_2;
    }

    tmp_result = DEL_SUBSCRIPT( tmp_delsubscr_target_1, tmp_delsubscr_subscript_1 );
    Py_DECREF( tmp_delsubscr_target_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 463;
        goto try_except_handler_2;
    }
    goto try_except_end_2;
    try_except_handler_2:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_KeyError;
    tmp_exc_match_exception_match_2 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 464;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_2 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_binop_left_1 = const_str_digest_1e0e46504f4633daa57dd1a72640bd35;
    tmp_binop_right_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_name.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_binop_right_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 465;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_binop_right_1, 0, tmp_tuple_element_1 );
    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 465;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 465;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_AttributeError, tmp_make_exception_arg_1 );
    Py_DECREF( tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 465;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 465;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    goto branch_end_2;
    branch_no_2:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_2:;
    try_except_end_2:;
    goto branch_end_1;
    branch_no_1:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_1:;
    try_except_end_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_name.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_name,
            par_name.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_17_remove_move_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_name = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "remove_move() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_name == key )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_name, key ) == 1 )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "remove_move() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_name == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_name == NULL ))
    {
        PyObject *values[] = { _python_par_name };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_17_remove_move_of_module_six( self, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_17_remove_move_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_17_remove_move_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_17_remove_move_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_18_advance_iterator_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_it )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_it; par_it.object = _python_par_it;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_68c9fadd9114f7f721e2c5e8a70a8e49, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_it.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 66465 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 490;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_next );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 490;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 490;
    tmp_return_value = CALL_FUNCTION_NO_ARGS( tmp_called_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 490;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_it.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_it,
            par_it.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_18_advance_iterator_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_it = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "advance_iterator() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_it == key )
            {
                assert( _python_par_it == NULL );
                _python_par_it = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_it, key ) == 1 )
            {
                assert( _python_par_it == NULL );
                _python_par_it = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "advance_iterator() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_it != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_it = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_it == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_it = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_it == NULL ))
    {
        PyObject *values[] = { _python_par_it };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_18_advance_iterator_of_module_six( self, _python_par_it );

error_exit:;

    Py_XDECREF( _python_par_it );

    return NULL;
}

static PyObject *dparse_function_18_advance_iterator_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_18_advance_iterator_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_18_advance_iterator_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_19_callable_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_obj; par_obj.object = _python_par_obj;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_type_arg_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_319d1893c539a33a1b662908a0e92c1d, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = LOOKUP_BUILTIN( const_str_plain_any );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 498;
        goto frame_exception_exit_1;
    }
    tmp_type_arg_1 = par_obj.object;

    if ( tmp_type_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 10401 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 498;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 498;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___mro__ );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 498;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg1_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 498;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = impl_genexpr_1_of_function_19_callable_of_module_six( tmp_dircall_arg1_1 );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 498;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 498;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 498;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_obj.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_obj,
            par_obj.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_19_callable_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_obj = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "callable() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_obj == key )
            {
                assert( _python_par_obj == NULL );
                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_obj, key ) == 1 )
            {
                assert( _python_par_obj == NULL );
                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "callable() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_obj == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_obj = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_obj == NULL ))
    {
        PyObject *values[] = { _python_par_obj };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_19_callable_of_module_six( self, _python_par_obj );

error_exit:;

    Py_XDECREF( _python_par_obj );

    return NULL;
}

static PyObject *dparse_function_19_callable_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_19_callable_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_19_callable_of_module_six( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_genexpr_1_of_function_19_callable_of_module_six_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalVariable closure___iterator;
    PyObjectLocalVariable closure_klass;
    PyObjectTempVariable closure_iter_value_0;
};

static void _context_generator_genexpr_1_of_function_19_callable_of_module_six_destructor( void *context_voidptr )
{
    _context_generator_genexpr_1_of_function_19_callable_of_module_six_t *_python_context = (struct _context_generator_genexpr_1_of_function_19_callable_of_module_six_t *)context_voidptr;

    delete _python_context;
}

#ifdef _NUITKA_MAKECONTEXT_INTS
static void genexpr_1_of_function_19_callable_of_module_six_context( int generator_address_1, int generator_address_2 )
{
    // Restore the pointer from ints should it be necessary, often it can be
    // directly received.
    int generator_addresses[2] = {
        generator_address_1,
        generator_address_2
    };

    Nuitka_GeneratorObject *generator = (Nuitka_GeneratorObject *)*(uintptr_t *)&generator_addresses[0];
#else
static void genexpr_1_of_function_19_callable_of_module_six_context( Nuitka_GeneratorObject *generator )
{
#endif

    assertObject( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Make context accessible if one is used.

    NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_1_of_function_19_callable_of_module_six_t *_python_context = (_context_generator_genexpr_1_of_function_19_callable_of_module_six_t *)generator->m_context;


    // Local variable inits
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_next_source_1;
    PyObject *tmp_source_name_1;
    int tmp_tried_lineno_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    PyObject *tmp_yield_1;

    // Actual function code.
    PyFrameObject *frame_function = MAKE_FRAME( codeobj_1642bd9337c01b09a9de1accdd5e7658, module_six );

    Py_INCREF( frame_function );
    generator->m_frame = frame_function;
#if PYTHON_VERSION >= 340
    frame_function->f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->f_back );

    generator->m_frame->f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->f_back );

    PyThreadState_GET()->frame = generator->m_frame;

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code
    // Throwing into unstarted generators is possible. As they don't stand any
    // chance to deal with them, we might as well create traceback on the
    // outside,
    if ( generator->m_exception_type )
    {
        generator->m_yielded = NULL;

        exception_type = generator->m_exception_type;
        generator->m_exception_type = NULL;

        exception_value = generator->m_exception_value;
        generator->m_exception_value = NULL;

        exception_tb = generator->m_exception_tb;;
        generator->m_exception_tb = NULL;

        if (exception_tb == NULL)
        {
            goto try_finally_handler_1;
        }
        else
        {
            goto function_exception_exit;
        }
    }

    loop_start_1:;
    tmp_next_source_1 = _python_context->closure___iterator.object;

    if ( tmp_next_source_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8745 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 498;
        goto try_finally_handler_1;
    }

    tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_1 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 498;
            goto try_finally_handler_1;
        }
    }

    if (_python_context->closure_iter_value_0.object == NULL)
    {
        _python_context->closure_iter_value_0.object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = _python_context->closure_iter_value_0.object;
        _python_context->closure_iter_value_0.object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    tmp_assign_source_2 = _python_context->closure_iter_value_0.object;

    if (_python_context->closure_klass.object == NULL)
    {
        _python_context->closure_klass.object = INCREASE_REFCOUNT( tmp_assign_source_2 );
    }
    else
    {
        PyObject *old = _python_context->closure_klass.object;
        _python_context->closure_klass.object = INCREASE_REFCOUNT( tmp_assign_source_2 );
        Py_DECREF( old );
    }
    tmp_compexpr_left_1 = const_str_plain___call__;
    tmp_source_name_1 = _python_context->closure_klass.object;

    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE_DICT_SLOT( tmp_source_name_1 );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 498;
        goto try_finally_handler_1;
    }
    tmp_yield_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_yield_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compexpr_right_1 );

        frame_function->f_lineno = 498;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_compexpr_right_1 );
    tmp_unused = YIELD( generator, INCREASE_REFCOUNT( tmp_yield_1 ) );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 498;
        goto try_finally_handler_1;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 498;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( _python_context->closure_iter_value_0.object );
    _python_context->closure_iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif

    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((_python_context->closure_klass.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_klass,
            _python_context->closure_klass.object
        );

    }
    if ((_python_context->closure___iterator.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___iterator,
            _python_context->closure___iterator.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


#if PYTHON_VERSION > 300
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    Py_DECREF( frame_function );
    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    PyErr_Restore( INCREASE_REFCOUNT( PyExc_StopIteration ), NULL, NULL );

    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );

    // The above won't return, but we need to make it clear to the compiler
    // as well, or else it will complain and/or generate inferior code.
    assert(false);
    return;
function_exception_exit:
    assert( exception_type );
    assert( exception_tb );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );

}
static PyObject *impl_genexpr_1_of_function_19_callable_of_module_six( PyObject *_python_par___iterator )
{
    // Create context if any
    struct _context_generator_genexpr_1_of_function_19_callable_of_module_six_t *_python_context = new _context_generator_genexpr_1_of_function_19_callable_of_module_six_t;

        PyObject *result = Nuitka_Generator_New(
            genexpr_1_of_function_19_callable_of_module_six_context,
            const_str_angle_genexpr,
            codeobj_ab15678161675cddc29cf40363d8c019,
            _python_context,
            _context_generator_genexpr_1_of_function_19_callable_of_module_six_destructor
        );

    if (unlikely( result == NULL ))
    {
        PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
        return NULL;
    }

    // Copy to context parameter values and closured variables if any.
    _python_context->closure___iterator.object = _python_par___iterator;

    return result;
}


static PyObject *impl_function_20_get_unbound_function_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_unbound )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_unbound; par_unbound.object = _python_par_unbound;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_66f73dcdccdb2296e46ba4a532c09f4a, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_return_value = par_unbound.object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328868 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 503;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_unbound.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_unbound,
            par_unbound.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_20_get_unbound_function_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_unbound = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_unbound_function() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_unbound == key )
            {
                assert( _python_par_unbound == NULL );
                _python_par_unbound = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_unbound, key ) == 1 )
            {
                assert( _python_par_unbound == NULL );
                _python_par_unbound = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_unbound_function() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_unbound != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_unbound = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_unbound == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_unbound = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_unbound == NULL ))
    {
        PyObject *values[] = { _python_par_unbound };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_20_get_unbound_function_of_module_six( self, _python_par_unbound );

error_exit:;

    Py_XDECREF( _python_par_unbound );

    return NULL;
}

static PyObject *dparse_function_20_get_unbound_function_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_20_get_unbound_function_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_20_get_unbound_function_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_21_get_unbound_function_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_unbound )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_unbound; par_unbound.object = _python_par_unbound;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_365bd4af060510b22bb53b7002f0925a, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_unbound.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328868 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 510;
        goto frame_exception_exit_1;
    }

    tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_im_func );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 510;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_unbound.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_unbound,
            par_unbound.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_21_get_unbound_function_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_unbound = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_unbound_function() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_unbound == key )
            {
                assert( _python_par_unbound == NULL );
                _python_par_unbound = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_unbound, key ) == 1 )
            {
                assert( _python_par_unbound == NULL );
                _python_par_unbound = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_unbound_function() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_unbound != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_unbound = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_unbound == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_unbound = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_unbound == NULL ))
    {
        PyObject *values[] = { _python_par_unbound };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_21_get_unbound_function_of_module_six( self, _python_par_unbound );

error_exit:;

    Py_XDECREF( _python_par_unbound );

    return NULL;
}

static PyObject *dparse_function_21_get_unbound_function_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_21_get_unbound_function_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_21_get_unbound_function_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_22_create_bound_method_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_func, PyObject *_python_par_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_func; par_func.object = _python_par_func;
    PyObjectLocalVariable par_obj; par_obj.object = _python_par_obj;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_e3d6f6390e4d665f0a6a74af1f6f2957, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25249 ], 34, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 513;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_MethodType );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 513;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = par_func.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 47143 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 513;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_2 = par_obj.object;

    if ( tmp_call_arg_element_2 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 10401 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 513;
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = par_obj.object;

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 10401 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 513;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_2 );
    if ( tmp_call_arg_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 513;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 513;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_arg_element_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 513;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_func.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_func,
            par_func.object
        );

    }
    if ((par_obj.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_obj,
            par_obj.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_22_create_bound_method_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_func = NULL;
    PyObject *_python_par_obj = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "create_bound_method() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_func == key )
            {
                assert( _python_par_func == NULL );
                _python_par_func = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_obj == key )
            {
                assert( _python_par_obj == NULL );
                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_func, key ) == 1 )
            {
                assert( _python_par_func == NULL );
                _python_par_func = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_obj, key ) == 1 )
            {
                assert( _python_par_obj == NULL );
                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "create_bound_method() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_func != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_func = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_func == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_func = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_obj == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_obj = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_func == NULL || _python_par_obj == NULL ))
    {
        PyObject *values[] = { _python_par_func, _python_par_obj };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_22_create_bound_method_of_module_six( self, _python_par_func, _python_par_obj );

error_exit:;

    Py_XDECREF( _python_par_func );
    Py_XDECREF( _python_par_obj );

    return NULL;
}

static PyObject *dparse_function_22_create_bound_method_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_22_create_bound_method_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_22_create_bound_method_of_module_six( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_23_Iterator_of_module_six(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var_next;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_ea330983569f255a2eda909848675c74, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_assign_source_2 = MAKE_FUNCTION_function_1_next_of_class_23_Iterator_of_module_six(  );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_2 );

        frame_function->f_lineno = 517;
        goto frame_exception_exit_1;
    }
    assert( var_next.object == NULL );
    var_next.object = tmp_assign_source_2;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var_next.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_next,
            var_next.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var_next.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain_next,
            var_next.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}


static PyObject *impl_function_1_next_of_class_23_Iterator_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_type_arg_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_724ea8528d59afb71e1951d53af4bc77, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_type_arg_1 = par_self.object;

    if ( tmp_type_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 518;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 518;
        goto frame_exception_exit_1;
    }
    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___next__ );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 518;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = par_self.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 518;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 518;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 518;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1_next_of_class_23_Iterator_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "next() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "next() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1_next_of_class_23_Iterator_of_module_six( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_1_next_of_class_23_Iterator_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_1_next_of_class_23_Iterator_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_next_of_class_23_Iterator_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_24_iterkeys_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_d, PyObject *_python_par_kw )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_d; par_d.object = _python_par_d;
    PyObjectLocalVariable par_kw; par_kw.object = _python_par_kw;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_aa2a7ca468945bbc0db54be4ce495e5c, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_d.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6034 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 535;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_keys );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 535;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw.object;

    if ( tmp_dircall_arg2_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6911 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 535;
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_1 = impl_function_8_complex_call_helper_star_dict_of_module___internal__( tmp_dircall_arg1_1, INCREASE_REFCOUNT( tmp_dircall_arg2_1 ) );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 535;
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 535;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_d.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_d,
            par_d.object
        );

    }
    if ((par_kw.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kw,
            par_kw.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_24_iterkeys_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_d = NULL;
    PyObject *_python_par_kw = NULL;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kw = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kw = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "iterkeys() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "iterkeys() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kw = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kw = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "iterkeys() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kw = PyDict_New();
        }
    }

    // Check if argument d was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kw, const_str_plain_d );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_d == NULL );

            _python_par_d = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kw, const_str_plain_d );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_d != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_d = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_d == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_d = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_d == NULL ))
    {
        PyObject *values[] = { _python_par_d };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_24_iterkeys_of_module_six( self, _python_par_d, _python_par_kw );

error_exit:;

    Py_XDECREF( _python_par_d );
    Py_XDECREF( _python_par_kw );

    return NULL;
}

static PyObject *dparse_function_24_iterkeys_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_24_iterkeys_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_24_iterkeys_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_25_itervalues_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_d, PyObject *_python_par_kw )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_d; par_d.object = _python_par_d;
    PyObjectLocalVariable par_kw; par_kw.object = _python_par_kw;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_7bde21f44b4645f631ec2426ec4fa3d9, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_d.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6034 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 538;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_values );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 538;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw.object;

    if ( tmp_dircall_arg2_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6911 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 538;
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_1 = impl_function_8_complex_call_helper_star_dict_of_module___internal__( tmp_dircall_arg1_1, INCREASE_REFCOUNT( tmp_dircall_arg2_1 ) );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 538;
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 538;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_d.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_d,
            par_d.object
        );

    }
    if ((par_kw.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kw,
            par_kw.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_25_itervalues_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_d = NULL;
    PyObject *_python_par_kw = NULL;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kw = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kw = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "itervalues() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "itervalues() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kw = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kw = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "itervalues() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kw = PyDict_New();
        }
    }

    // Check if argument d was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kw, const_str_plain_d );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_d == NULL );

            _python_par_d = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kw, const_str_plain_d );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_d != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_d = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_d == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_d = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_d == NULL ))
    {
        PyObject *values[] = { _python_par_d };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_25_itervalues_of_module_six( self, _python_par_d, _python_par_kw );

error_exit:;

    Py_XDECREF( _python_par_d );
    Py_XDECREF( _python_par_kw );

    return NULL;
}

static PyObject *dparse_function_25_itervalues_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_25_itervalues_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_25_itervalues_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_26_iteritems_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_d, PyObject *_python_par_kw )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_d; par_d.object = _python_par_d;
    PyObjectLocalVariable par_kw; par_kw.object = _python_par_kw;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_ff00957926f4e68fd6764e57dcbbd7c7, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_d.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6034 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 541;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_items );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 541;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw.object;

    if ( tmp_dircall_arg2_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6911 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 541;
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_1 = impl_function_8_complex_call_helper_star_dict_of_module___internal__( tmp_dircall_arg1_1, INCREASE_REFCOUNT( tmp_dircall_arg2_1 ) );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 541;
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 541;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_d.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_d,
            par_d.object
        );

    }
    if ((par_kw.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kw,
            par_kw.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_26_iteritems_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_d = NULL;
    PyObject *_python_par_kw = NULL;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kw = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kw = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "iteritems() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "iteritems() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kw = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kw = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "iteritems() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kw = PyDict_New();
        }
    }

    // Check if argument d was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kw, const_str_plain_d );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_d == NULL );

            _python_par_d = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kw, const_str_plain_d );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_d != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_d = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_d == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_d = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_d == NULL ))
    {
        PyObject *values[] = { _python_par_d };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_26_iteritems_of_module_six( self, _python_par_d, _python_par_kw );

error_exit:;

    Py_XDECREF( _python_par_d );
    Py_XDECREF( _python_par_kw );

    return NULL;
}

static PyObject *dparse_function_26_iteritems_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_26_iteritems_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_26_iteritems_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_27_iterlists_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_d, PyObject *_python_par_kw )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_d; par_d.object = _python_par_d;
    PyObjectLocalVariable par_kw; par_kw.object = _python_par_kw;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_982553c47530e1533b43057b4ad1169c, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_d.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6034 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 544;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_lists );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 544;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw.object;

    if ( tmp_dircall_arg2_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6911 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 544;
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_1 = impl_function_8_complex_call_helper_star_dict_of_module___internal__( tmp_dircall_arg1_1, INCREASE_REFCOUNT( tmp_dircall_arg2_1 ) );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 544;
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 544;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_d.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_d,
            par_d.object
        );

    }
    if ((par_kw.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kw,
            par_kw.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_27_iterlists_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_d = NULL;
    PyObject *_python_par_kw = NULL;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kw = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kw = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "iterlists() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "iterlists() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kw = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kw = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "iterlists() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kw = PyDict_New();
        }
    }

    // Check if argument d was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kw, const_str_plain_d );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_d == NULL );

            _python_par_d = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kw, const_str_plain_d );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_d != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_d = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_d == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_d = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_d == NULL ))
    {
        PyObject *values[] = { _python_par_d };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_27_iterlists_of_module_six( self, _python_par_d, _python_par_kw );

error_exit:;

    Py_XDECREF( _python_par_d );
    Py_XDECREF( _python_par_kw );

    return NULL;
}

static PyObject *dparse_function_27_iterlists_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_27_iterlists_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_27_iterlists_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_28_iterkeys_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_d, PyObject *_python_par_kw )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_d; par_d.object = _python_par_d;
    PyObjectLocalVariable par_kw; par_kw.object = _python_par_kw;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_960827a35c3d2a40c9de577576e21c25, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_d.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6034 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 547;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_iterkeys );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 547;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw.object;

    if ( tmp_dircall_arg2_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6911 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 547;
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_1 = impl_function_8_complex_call_helper_star_dict_of_module___internal__( tmp_dircall_arg1_1, INCREASE_REFCOUNT( tmp_dircall_arg2_1 ) );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 547;
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 547;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_d.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_d,
            par_d.object
        );

    }
    if ((par_kw.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kw,
            par_kw.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_28_iterkeys_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_d = NULL;
    PyObject *_python_par_kw = NULL;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kw = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kw = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "iterkeys() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "iterkeys() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kw = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kw = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "iterkeys() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kw = PyDict_New();
        }
    }

    // Check if argument d was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kw, const_str_plain_d );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_d == NULL );

            _python_par_d = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kw, const_str_plain_d );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_d != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_d = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_d == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_d = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_d == NULL ))
    {
        PyObject *values[] = { _python_par_d };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_28_iterkeys_of_module_six( self, _python_par_d, _python_par_kw );

error_exit:;

    Py_XDECREF( _python_par_d );
    Py_XDECREF( _python_par_kw );

    return NULL;
}

static PyObject *dparse_function_28_iterkeys_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_28_iterkeys_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_28_iterkeys_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_29_itervalues_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_d, PyObject *_python_par_kw )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_d; par_d.object = _python_par_d;
    PyObjectLocalVariable par_kw; par_kw.object = _python_par_kw;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_5521acfcc96c8e0b7cc1aaf8976215a6, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_d.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6034 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 550;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_itervalues );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 550;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw.object;

    if ( tmp_dircall_arg2_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6911 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 550;
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_1 = impl_function_8_complex_call_helper_star_dict_of_module___internal__( tmp_dircall_arg1_1, INCREASE_REFCOUNT( tmp_dircall_arg2_1 ) );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 550;
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 550;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_d.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_d,
            par_d.object
        );

    }
    if ((par_kw.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kw,
            par_kw.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_29_itervalues_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_d = NULL;
    PyObject *_python_par_kw = NULL;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kw = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kw = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "itervalues() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "itervalues() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kw = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kw = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "itervalues() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kw = PyDict_New();
        }
    }

    // Check if argument d was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kw, const_str_plain_d );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_d == NULL );

            _python_par_d = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kw, const_str_plain_d );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_d != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_d = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_d == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_d = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_d == NULL ))
    {
        PyObject *values[] = { _python_par_d };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_29_itervalues_of_module_six( self, _python_par_d, _python_par_kw );

error_exit:;

    Py_XDECREF( _python_par_d );
    Py_XDECREF( _python_par_kw );

    return NULL;
}

static PyObject *dparse_function_29_itervalues_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_29_itervalues_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_29_itervalues_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_30_iteritems_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_d, PyObject *_python_par_kw )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_d; par_d.object = _python_par_d;
    PyObjectLocalVariable par_kw; par_kw.object = _python_par_kw;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_3aca7018a1bc9235df56bb146ff2b572, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_d.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6034 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 553;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_iteritems );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 553;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw.object;

    if ( tmp_dircall_arg2_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6911 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 553;
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_1 = impl_function_8_complex_call_helper_star_dict_of_module___internal__( tmp_dircall_arg1_1, INCREASE_REFCOUNT( tmp_dircall_arg2_1 ) );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 553;
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 553;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_d.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_d,
            par_d.object
        );

    }
    if ((par_kw.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kw,
            par_kw.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_30_iteritems_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_d = NULL;
    PyObject *_python_par_kw = NULL;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kw = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kw = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "iteritems() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "iteritems() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kw = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kw = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "iteritems() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kw = PyDict_New();
        }
    }

    // Check if argument d was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kw, const_str_plain_d );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_d == NULL );

            _python_par_d = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kw, const_str_plain_d );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_d != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_d = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_d == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_d = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_d == NULL ))
    {
        PyObject *values[] = { _python_par_d };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_30_iteritems_of_module_six( self, _python_par_d, _python_par_kw );

error_exit:;

    Py_XDECREF( _python_par_d );
    Py_XDECREF( _python_par_kw );

    return NULL;
}

static PyObject *dparse_function_30_iteritems_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_30_iteritems_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_30_iteritems_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_31_iterlists_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_d, PyObject *_python_par_kw )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_d; par_d.object = _python_par_d;
    PyObjectLocalVariable par_kw; par_kw.object = _python_par_kw;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_e3e83e71e82f59c04b8e1042e4ea0188, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_d.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6034 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 556;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_iterlists );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 556;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw.object;

    if ( tmp_dircall_arg2_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6911 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 556;
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_1 = impl_function_8_complex_call_helper_star_dict_of_module___internal__( tmp_dircall_arg1_1, INCREASE_REFCOUNT( tmp_dircall_arg2_1 ) );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 556;
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 556;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_d.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_d,
            par_d.object
        );

    }
    if ((par_kw.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kw,
            par_kw.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_31_iterlists_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_d = NULL;
    PyObject *_python_par_kw = NULL;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kw = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kw = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "iterlists() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "iterlists() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kw = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kw = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "iterlists() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kw = PyDict_New();
        }
    }

    // Check if argument d was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kw, const_str_plain_d );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_d == NULL );

            _python_par_d = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kw, const_str_plain_d );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_d != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_d = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_d == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_d = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_d == NULL ))
    {
        PyObject *values[] = { _python_par_d };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_31_iterlists_of_module_six( self, _python_par_d, _python_par_kw );

error_exit:;

    Py_XDECREF( _python_par_d );
    Py_XDECREF( _python_par_kw );

    return NULL;
}

static PyObject *dparse_function_31_iterlists_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_31_iterlists_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_31_iterlists_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_32_b_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_s )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_s; par_s.object = _python_par_s;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_8f72678f141dbff45509fe738bf2b749, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_s.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 568;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_encode );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 568;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_str_digest_e08e7740844024234d1fdfbba1279b3c;
    frame_function->f_lineno = 568;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 568;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_s.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_s,
            par_s.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_32_b_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_s = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "b() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_s == key )
            {
                assert( _python_par_s == NULL );
                _python_par_s = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_s, key ) == 1 )
            {
                assert( _python_par_s == NULL );
                _python_par_s = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "b() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_s != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_s = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_s == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_s = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_s == NULL ))
    {
        PyObject *values[] = { _python_par_s };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_32_b_of_module_six( self, _python_par_s );

error_exit:;

    Py_XDECREF( _python_par_s );

    return NULL;
}

static PyObject *dparse_function_32_b_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_32_b_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_32_b_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_33_u_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_s )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_s; par_s.object = _python_par_s;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_8987da6d9c95e92dd04fd14a2edf84e4, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_return_value = par_s.object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 570;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_s.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_s,
            par_s.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_33_u_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_s = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "u() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_s == key )
            {
                assert( _python_par_s == NULL );
                _python_par_s = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_s, key ) == 1 )
            {
                assert( _python_par_s == NULL );
                _python_par_s = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "u() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_s != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_s = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_s == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_s = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_s == NULL ))
    {
        PyObject *values[] = { _python_par_s };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_33_u_of_module_six( self, _python_par_s );

error_exit:;

    Py_XDECREF( _python_par_s );

    return NULL;
}

static PyObject *dparse_function_33_u_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_33_u_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_33_u_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_34_int2byte_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_i )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_i; par_i.object = _python_par_i;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_8d7915ab36c0a403d765cbcb5f8579a6, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = LOOKUP_BUILTIN( const_str_plain_bytes );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 574;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_i.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 574;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_arg_element_1, 0, tmp_tuple_element_1 );
    frame_function->f_lineno = 574;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 574;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_i,
            par_i.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_34_int2byte_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_i = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "int2byte() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_i == key )
            {
                assert( _python_par_i == NULL );
                _python_par_i = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_i, key ) == 1 )
            {
                assert( _python_par_i == NULL );
                _python_par_i = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "int2byte() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_i != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_i = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_i == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_i = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_i == NULL ))
    {
        PyObject *values[] = { _python_par_i };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_34_int2byte_of_module_six( self, _python_par_i );

error_exit:;

    Py_XDECREF( _python_par_i );

    return NULL;
}

static PyObject *dparse_function_34_int2byte_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_34_int2byte_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_34_int2byte_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_35_b_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_s )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_s; par_s.object = _python_par_s;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_de2f6191f85532c0dbd27a265770ae67, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_return_value = par_s.object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 586;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_s.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_s,
            par_s.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_35_b_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_s = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "b() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_s == key )
            {
                assert( _python_par_s == NULL );
                _python_par_s = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_s, key ) == 1 )
            {
                assert( _python_par_s == NULL );
                _python_par_s = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "b() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_s != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_s = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_s == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_s = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_s == NULL ))
    {
        PyObject *values[] = { _python_par_s };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_35_b_of_module_six( self, _python_par_s );

error_exit:;

    Py_XDECREF( _python_par_s );

    return NULL;
}

static PyObject *dparse_function_35_b_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_35_b_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_35_b_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_36_u_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_s )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_s; par_s.object = _python_par_s;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_unicode_arg_1;
    PyObject *tmp_unicode_encoding_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_d93bbc957f238f313a8213cc943d86e4, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_s.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 589;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_replace );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 589;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_str_digest_7f8137798425a7fed2b8c5703b70d078;
    tmp_call_arg_element_2 = const_str_digest_c55afac70b5c0b7c79a14ffbb790bc92;
    frame_function->f_lineno = 589;
    tmp_unicode_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_unicode_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 589;
        goto frame_exception_exit_1;
    }
    tmp_unicode_encoding_1 = const_str_plain_unicode_escape;
    tmp_return_value = TO_UNICODE3( tmp_unicode_arg_1, tmp_unicode_encoding_1, NULL );
    Py_DECREF( tmp_unicode_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 589;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_s.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_s,
            par_s.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_36_u_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_s = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "u() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_s == key )
            {
                assert( _python_par_s == NULL );
                _python_par_s = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_s, key ) == 1 )
            {
                assert( _python_par_s == NULL );
                _python_par_s = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "u() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_s != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_s = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_s == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_s = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_s == NULL ))
    {
        PyObject *values[] = { _python_par_s };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_36_u_of_module_six( self, _python_par_s );

error_exit:;

    Py_XDECREF( _python_par_s );

    return NULL;
}

static PyObject *dparse_function_36_u_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_36_u_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_36_u_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_37_byte2int_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_bs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_bs; par_bs.object = _python_par_bs;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_frame_locals;
    PyObject *tmp_ord_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_ef8c02f1d44b4c3f22c6c12c08b956f6, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_subscr_target_1 = par_bs.object;

    if ( tmp_subscr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 69971 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 593;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_1 = const_int_0;
    tmp_ord_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_ord_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 593;
        goto frame_exception_exit_1;
    }
    tmp_return_value = BUILTIN_ORD( tmp_ord_arg_1 );
    Py_DECREF( tmp_ord_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 593;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_bs.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_bs,
            par_bs.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_37_byte2int_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_bs = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "byte2int() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_bs == key )
            {
                assert( _python_par_bs == NULL );
                _python_par_bs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_bs, key ) == 1 )
            {
                assert( _python_par_bs == NULL );
                _python_par_bs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "byte2int() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_bs != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_bs = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_bs == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_bs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_bs == NULL ))
    {
        PyObject *values[] = { _python_par_bs };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_37_byte2int_of_module_six( self, _python_par_bs );

error_exit:;

    Py_XDECREF( _python_par_bs );

    return NULL;
}

static PyObject *dparse_function_37_byte2int_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_37_byte2int_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_37_byte2int_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_38_indexbytes_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_buf, PyObject *_python_par_i )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_buf; par_buf.object = _python_par_buf;
    PyObjectLocalVariable par_i; par_i.object = _python_par_i;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_frame_locals;
    PyObject *tmp_ord_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_a9398835c6d314847e88a1bad9f938bf, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_subscr_target_1 = par_buf.object;

    if ( tmp_subscr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 77050 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 595;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_1 = par_i.object;

    if ( tmp_subscr_subscript_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 595;
        goto frame_exception_exit_1;
    }

    tmp_ord_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_ord_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 595;
        goto frame_exception_exit_1;
    }
    tmp_return_value = BUILTIN_ORD( tmp_ord_arg_1 );
    Py_DECREF( tmp_ord_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 595;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_buf.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_buf,
            par_buf.object
        );

    }
    if ((par_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_i,
            par_i.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_38_indexbytes_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_buf = NULL;
    PyObject *_python_par_i = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "indexbytes() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_buf == key )
            {
                assert( _python_par_buf == NULL );
                _python_par_buf = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_i == key )
            {
                assert( _python_par_i == NULL );
                _python_par_i = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_buf, key ) == 1 )
            {
                assert( _python_par_buf == NULL );
                _python_par_buf = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_i, key ) == 1 )
            {
                assert( _python_par_i == NULL );
                _python_par_i = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "indexbytes() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_buf != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_buf = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_buf == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_buf = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_i != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_i = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_i == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_i = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_buf == NULL || _python_par_i == NULL ))
    {
        PyObject *values[] = { _python_par_buf, _python_par_i };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_38_indexbytes_of_module_six( self, _python_par_buf, _python_par_i );

error_exit:;

    Py_XDECREF( _python_par_buf );
    Py_XDECREF( _python_par_i );

    return NULL;
}

static PyObject *dparse_function_38_indexbytes_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_38_indexbytes_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_38_indexbytes_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_39_iterbytes_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_buf )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_buf; par_buf.object = _python_par_buf;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_672f440ed9036145688dd45067f8b896, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_iter_arg_1 = par_buf.object;

    if ( tmp_iter_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 77050 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 597;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg1_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 597;
        goto frame_exception_exit_1;
    }
    tmp_return_value = impl_genexpr_1_of_function_39_iterbytes_of_module_six( tmp_dircall_arg1_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 597;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_buf.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_buf,
            par_buf.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_39_iterbytes_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_buf = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "iterbytes() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_buf == key )
            {
                assert( _python_par_buf == NULL );
                _python_par_buf = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_buf, key ) == 1 )
            {
                assert( _python_par_buf == NULL );
                _python_par_buf = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "iterbytes() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_buf != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_buf = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_buf == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_buf = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_buf == NULL ))
    {
        PyObject *values[] = { _python_par_buf };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_39_iterbytes_of_module_six( self, _python_par_buf );

error_exit:;

    Py_XDECREF( _python_par_buf );

    return NULL;
}

static PyObject *dparse_function_39_iterbytes_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_39_iterbytes_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_39_iterbytes_of_module_six( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_genexpr_1_of_function_39_iterbytes_of_module_six_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalVariable closure___iterator;
    PyObjectLocalVariable closure_byte;
    PyObjectTempVariable closure_iter_value_0;
};

static void _context_generator_genexpr_1_of_function_39_iterbytes_of_module_six_destructor( void *context_voidptr )
{
    _context_generator_genexpr_1_of_function_39_iterbytes_of_module_six_t *_python_context = (struct _context_generator_genexpr_1_of_function_39_iterbytes_of_module_six_t *)context_voidptr;

    delete _python_context;
}

#ifdef _NUITKA_MAKECONTEXT_INTS
static void genexpr_1_of_function_39_iterbytes_of_module_six_context( int generator_address_1, int generator_address_2 )
{
    // Restore the pointer from ints should it be necessary, often it can be
    // directly received.
    int generator_addresses[2] = {
        generator_address_1,
        generator_address_2
    };

    Nuitka_GeneratorObject *generator = (Nuitka_GeneratorObject *)*(uintptr_t *)&generator_addresses[0];
#else
static void genexpr_1_of_function_39_iterbytes_of_module_six_context( Nuitka_GeneratorObject *generator )
{
#endif

    assertObject( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Make context accessible if one is used.

    NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_1_of_function_39_iterbytes_of_module_six_t *_python_context = (_context_generator_genexpr_1_of_function_39_iterbytes_of_module_six_t *)generator->m_context;


    // Local variable inits
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_next_source_1;
    PyObject *tmp_ord_arg_1;
    int tmp_tried_lineno_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    PyObject *tmp_yield_1;

    // Actual function code.
    PyFrameObject *frame_function = MAKE_FRAME( codeobj_aa836c9f9c0aefd4f6639c3969e0561a, module_six );

    Py_INCREF( frame_function );
    generator->m_frame = frame_function;
#if PYTHON_VERSION >= 340
    frame_function->f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->f_back );

    generator->m_frame->f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->f_back );

    PyThreadState_GET()->frame = generator->m_frame;

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code
    // Throwing into unstarted generators is possible. As they don't stand any
    // chance to deal with them, we might as well create traceback on the
    // outside,
    if ( generator->m_exception_type )
    {
        generator->m_yielded = NULL;

        exception_type = generator->m_exception_type;
        generator->m_exception_type = NULL;

        exception_value = generator->m_exception_value;
        generator->m_exception_value = NULL;

        exception_tb = generator->m_exception_tb;;
        generator->m_exception_tb = NULL;

        if (exception_tb == NULL)
        {
            goto try_finally_handler_1;
        }
        else
        {
            goto function_exception_exit;
        }
    }

    loop_start_1:;
    tmp_next_source_1 = _python_context->closure___iterator.object;

    if ( tmp_next_source_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8745 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 597;
        goto try_finally_handler_1;
    }

    tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_1 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 597;
            goto try_finally_handler_1;
        }
    }

    if (_python_context->closure_iter_value_0.object == NULL)
    {
        _python_context->closure_iter_value_0.object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = _python_context->closure_iter_value_0.object;
        _python_context->closure_iter_value_0.object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    tmp_assign_source_2 = _python_context->closure_iter_value_0.object;

    if (_python_context->closure_byte.object == NULL)
    {
        _python_context->closure_byte.object = INCREASE_REFCOUNT( tmp_assign_source_2 );
    }
    else
    {
        PyObject *old = _python_context->closure_byte.object;
        _python_context->closure_byte.object = INCREASE_REFCOUNT( tmp_assign_source_2 );
        Py_DECREF( old );
    }
    tmp_ord_arg_1 = _python_context->closure_byte.object;

    tmp_yield_1 = BUILTIN_ORD( tmp_ord_arg_1 );
    if ( tmp_yield_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 597;
        goto try_finally_handler_1;
    }
    tmp_unused = YIELD( generator, tmp_yield_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 597;
        goto try_finally_handler_1;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 597;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( _python_context->closure_iter_value_0.object );
    _python_context->closure_iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif

    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((_python_context->closure_byte.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_byte,
            _python_context->closure_byte.object
        );

    }
    if ((_python_context->closure___iterator.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___iterator,
            _python_context->closure___iterator.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


#if PYTHON_VERSION > 300
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    Py_DECREF( frame_function );
    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    PyErr_Restore( INCREASE_REFCOUNT( PyExc_StopIteration ), NULL, NULL );

    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );

    // The above won't return, but we need to make it clear to the compiler
    // as well, or else it will complain and/or generate inferior code.
    assert(false);
    return;
function_exception_exit:
    assert( exception_type );
    assert( exception_tb );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );

}
static PyObject *impl_genexpr_1_of_function_39_iterbytes_of_module_six( PyObject *_python_par___iterator )
{
    // Create context if any
    struct _context_generator_genexpr_1_of_function_39_iterbytes_of_module_six_t *_python_context = new _context_generator_genexpr_1_of_function_39_iterbytes_of_module_six_t;

        PyObject *result = Nuitka_Generator_New(
            genexpr_1_of_function_39_iterbytes_of_module_six_context,
            const_str_angle_genexpr,
            codeobj_8e675aba8ca5150deebfb77645b3430f,
            _python_context,
            _context_generator_genexpr_1_of_function_39_iterbytes_of_module_six_destructor
        );

    if (unlikely( result == NULL ))
    {
        PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
        return NULL;
    }

    // Copy to context parameter values and closured variables if any.
    _python_context->closure___iterator.object = _python_par___iterator;

    return result;
}


static PyObject *impl_function_40_reraise_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_tp, PyObject *_python_par_value, PyObject *_python_par_tb )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_tp; par_tp.object = _python_par_tp;
    PyObjectLocalVariable par_value; par_value.object = _python_par_value;
    PyObjectLocalVariable par_tb; par_tb.object = _python_par_tb;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_frame_locals;
    bool tmp_isnot_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_146f529ac3144a1927e808192533705c, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_value.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5634 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 609;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___traceback__ );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 609;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = par_tb.object;

    if ( tmp_compare_right_1 == NULL )
    {
        Py_DECREF( tmp_compare_left_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 314783 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 609;
        goto frame_exception_exit_1;
    }

    tmp_isnot_1 = ( tmp_compare_left_1 != tmp_compare_right_1 );
    Py_DECREF( tmp_compare_left_1 );
    if (tmp_isnot_1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_2 = par_value.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5634 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 610;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_with_traceback );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 610;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = par_tb.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 314783 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 610;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 610;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 610;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 610;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_raise_type_2 = par_value.object;

    if ( tmp_raise_type_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5634 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 611;
        goto frame_exception_exit_1;
    }

    exception_type = INCREASE_REFCOUNT( tmp_raise_type_2 );
    frame_function->f_lineno = 611;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_tp.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_tp,
            par_tp.object
        );

    }
    if ((par_value.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_value,
            par_value.object
        );

    }
    if ((par_tb.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_tb,
            par_tb.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;

}
static PyObject *fparse_function_40_reraise_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_tp = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_tb = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "reraise() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_tp == key )
            {
                assert( _python_par_tp == NULL );
                _python_par_tp = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_value == key )
            {
                assert( _python_par_value == NULL );
                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_tb == key )
            {
                assert( _python_par_tb == NULL );
                _python_par_tb = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_tp, key ) == 1 )
            {
                assert( _python_par_tp == NULL );
                _python_par_tp = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_value, key ) == 1 )
            {
                assert( _python_par_value == NULL );
                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_tb, key ) == 1 )
            {
                assert( _python_par_tb == NULL );
                _python_par_tb = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "reraise() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_tp != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_tp = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_tp == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_tp = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_value == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_value = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_tb != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_tb = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_tb == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_tb = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_tp == NULL || _python_par_value == NULL || _python_par_tb == NULL ))
    {
        PyObject *values[] = { _python_par_tp, _python_par_value, _python_par_tb };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_40_reraise_of_module_six( self, _python_par_tp, _python_par_value, _python_par_tb );

error_exit:;

    Py_XDECREF( _python_par_tp );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_tb );

    return NULL;
}

static PyObject *dparse_function_40_reraise_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_40_reraise_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_40_reraise_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_41_exec__of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par__code_, PyObject *_python_par__globs_, PyObject *_python_par__locs_ )
{
    // No context is used.

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObjectLocalVariable par__code_; par__code_.object = _python_par__code_;
    PyObjectLocalVariable par__globs_; par__globs_.object = _python_par__globs_;
    PyObjectLocalVariable par__locs_; par__locs_.object = _python_par__locs_;
    PyObjectLocalVariable var_frame;
    PyObjectTempVariable tmp_exec_1__globals;
    PyObjectTempVariable tmp_exec_1__locals;
    PyObjectTempVariable tmp_exec_1__source;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_eval_globals_1;
    PyObject *tmp_eval_locals_1;
    PyObject *tmp_eval_source_1;
    PyObject *tmp_exec_compiled_1;
    PyObject *tmp_exec_result_1;
    PyObject *tmp_frame_locals;
    bool tmp_is_1;
    bool tmp_is_2;
    bool tmp_is_3;
    bool tmp_is_4;
    bool tmp_is_5;
    bool tmp_is_6;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_locals_source;
    PyObject *tmp_locals_value;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    int tmp_tried_lineno_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_9209c688a3ced6499b412b148b7541f2, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par__globs_.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328921 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 616;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if (tmp_is_1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_sys );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );
        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 617;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__getframe );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 617;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_int_pos_1;
    frame_function->f_lineno = 617;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 617;
        goto frame_exception_exit_1;
    }
    assert( var_frame.object == NULL );
    var_frame.object = tmp_assign_source_1;

    tmp_source_name_2 = var_frame.object;

    tmp_assign_source_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_f_globals );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 618;
        goto frame_exception_exit_1;
    }
    if (par__globs_.object == NULL)
    {
        par__globs_.object = tmp_assign_source_2;
    }
    else
    {
        PyObject *old = par__globs_.object;
        par__globs_.object = tmp_assign_source_2;
        Py_DECREF( old );
    }
    tmp_compare_left_2 = par__locs_.object;

    if ( tmp_compare_left_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328974 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 619;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_2 = Py_None;
    tmp_is_2 = ( tmp_compare_left_2 == tmp_compare_right_2 );
    if (tmp_is_2)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_3 = var_frame.object;

    tmp_assign_source_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_f_locals );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 620;
        goto frame_exception_exit_1;
    }
    if (par__locs_.object == NULL)
    {
        par__locs_.object = tmp_assign_source_3;
    }
    else
    {
        PyObject *old = par__locs_.object;
        par__locs_.object = tmp_assign_source_3;
        Py_DECREF( old );
    }
    branch_no_2:;
    tmp_result = var_frame.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( var_frame.object );
        var_frame.object = NULL;
    }

    if ( tmp_result == false )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2076 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 621;
        goto frame_exception_exit_1;
    }

    goto branch_end_1;
    branch_no_1:;
    tmp_compare_left_3 = par__locs_.object;

    if ( tmp_compare_left_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328974 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 622;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_3 = Py_None;
    tmp_is_3 = ( tmp_compare_left_3 == tmp_compare_right_3 );
    if (tmp_is_3)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_4 = par__globs_.object;

    if ( tmp_assign_source_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328921 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 623;
        goto frame_exception_exit_1;
    }

    if (par__locs_.object == NULL)
    {
        par__locs_.object = INCREASE_REFCOUNT( tmp_assign_source_4 );
    }
    else
    {
        PyObject *old = par__locs_.object;
        par__locs_.object = INCREASE_REFCOUNT( tmp_assign_source_4 );
        Py_DECREF( old );
    }
    branch_no_3:;
    branch_end_1:;
    // Tried code
    tmp_assign_source_5 = Py_None;
    assert( tmp_exec_1__globals.object == NULL );
    tmp_exec_1__globals.object = INCREASE_REFCOUNT( tmp_assign_source_5 );

    tmp_assign_source_6 = Py_None;
    assert( tmp_exec_1__locals.object == NULL );
    tmp_exec_1__locals.object = INCREASE_REFCOUNT( tmp_assign_source_6 );

    tmp_compare_left_4 = tmp_exec_1__locals.object;

    tmp_compare_right_4 = Py_None;
    tmp_is_4 = ( tmp_compare_left_4 == tmp_compare_right_4 );
    if (tmp_is_4)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_compare_left_5 = tmp_exec_1__globals.object;

    tmp_compare_right_5 = Py_None;
    tmp_is_5 = ( tmp_compare_left_5 == tmp_compare_right_5 );
    if (tmp_is_5)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_assign_source_7 = INCREASE_REFCOUNT( locals_dict );
    if ((var_frame.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_7,
            const_str_plain_frame,
            var_frame.object
        );

    }
    if ((par__code_.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_7,
            const_str_plain__code_,
            par__code_.object
        );

    }
    if ((par__globs_.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_7,
            const_str_plain__globs_,
            par__globs_.object
        );

    }
    if ((par__locs_.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_7,
            const_str_plain__locs_,
            par__locs_.object
        );

    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_assign_source_7 = tmp_exec_1__globals.object;

    Py_INCREF( tmp_assign_source_7 );
    condexpr_end_1:;
    assert( tmp_exec_1__locals.object != NULL );
    {
        PyObject *old = tmp_exec_1__locals.object;
        tmp_exec_1__locals.object = tmp_assign_source_7;
        Py_DECREF( old );
    }

    branch_no_4:;
    tmp_compare_left_6 = tmp_exec_1__globals.object;

    tmp_compare_right_6 = Py_None;
    tmp_is_6 = ( tmp_compare_left_6 == tmp_compare_right_6 );
    if (tmp_is_6)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_assign_source_8 = ((PyModuleObject *)module_six)->md_dict;
    assert( tmp_exec_1__globals.object != NULL );
    {
        PyObject *old = tmp_exec_1__globals.object;
        tmp_exec_1__globals.object = INCREASE_REFCOUNT( tmp_assign_source_8 );
        Py_DECREF( old );
    }

    branch_no_5:;
    tmp_assign_source_9 = const_str_digest_05b5cdd3c7e83b3fa9d39e4ee85a9ba1;
    assert( tmp_exec_1__source.object == NULL );
    tmp_exec_1__source.object = INCREASE_REFCOUNT( tmp_assign_source_9 );

    tmp_isinstance_inst_1 = tmp_exec_1__source.object;

    tmp_isinstance_cls_1 = (PyObject *)&PyFile_Type;
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 624;
        goto try_finally_handler_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_source_name_4 = tmp_exec_1__source.object;

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_read );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 624;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 624;
    tmp_assign_source_10 = CALL_FUNCTION_NO_ARGS( tmp_called_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 624;
        goto try_finally_handler_1;
    }
    assert( tmp_exec_1__source.object != NULL );
    {
        PyObject *old = tmp_exec_1__source.object;
        tmp_exec_1__source.object = tmp_assign_source_10;
        Py_DECREF( old );
    }

    branch_no_6:;
    tmp_eval_source_1 = tmp_exec_1__source.object;

    tmp_eval_globals_1 = tmp_exec_1__globals.object;

    tmp_eval_locals_1 = tmp_exec_1__locals.object;

    tmp_exec_compiled_1 = COMPILE_CODE( tmp_eval_source_1, const_str_angle_string, const_str_plain_exec, NULL, NULL );
    if ( tmp_exec_compiled_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 624;
        goto try_finally_handler_1;
    }
    tmp_exec_result_1 = EVAL_CODE( tmp_exec_compiled_1, tmp_eval_globals_1, tmp_eval_locals_1 );
    Py_DECREF( tmp_exec_compiled_1 );
    if ( tmp_exec_result_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 624;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_exec_result_1 );
    if ( tmp_eval_locals_1 == locals_dict )
    {
        tmp_locals_source = tmp_eval_locals_1;
    }
    else if ( tmp_eval_globals_1 == locals_dict )
    {
        tmp_locals_source = tmp_eval_globals_1;
    }
    else
    {
        tmp_locals_source = NULL;
    }

    if ( tmp_locals_source != NULL )
    {
    tmp_locals_value = PyObject_GetItem( tmp_locals_source, const_str_plain__code_ );
    if ( tmp_locals_value == NULL && !PyErr_ExceptionMatches( PyExc_KeyError ) )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 624;
        goto try_finally_handler_1;
    }
    PyErr_Clear();
    if (tmp_locals_value != NULL)
    {
    if (par__code_.object == NULL)
    {
        par__code_.object = tmp_locals_value;
    }
    else
    {
        PyObject *old = par__code_.object;
        par__code_.object = tmp_locals_value;
        Py_DECREF( old );
    }
    }
    tmp_locals_value = PyObject_GetItem( tmp_locals_source, const_str_plain__globs_ );
    if ( tmp_locals_value == NULL && !PyErr_ExceptionMatches( PyExc_KeyError ) )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 624;
        goto try_finally_handler_1;
    }
    PyErr_Clear();
    if (tmp_locals_value != NULL)
    {
    if (par__globs_.object == NULL)
    {
        par__globs_.object = tmp_locals_value;
    }
    else
    {
        PyObject *old = par__globs_.object;
        par__globs_.object = tmp_locals_value;
        Py_DECREF( old );
    }
    }
    tmp_locals_value = PyObject_GetItem( tmp_locals_source, const_str_plain__locs_ );
    if ( tmp_locals_value == NULL && !PyErr_ExceptionMatches( PyExc_KeyError ) )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 624;
        goto try_finally_handler_1;
    }
    PyErr_Clear();
    if (tmp_locals_value != NULL)
    {
    if (par__locs_.object == NULL)
    {
        par__locs_.object = tmp_locals_value;
    }
    else
    {
        PyObject *old = par__locs_.object;
        par__locs_.object = tmp_locals_value;
        Py_DECREF( old );
    }
    }
    tmp_locals_value = PyObject_GetItem( tmp_locals_source, const_str_plain_frame );
    if ( tmp_locals_value == NULL && !PyErr_ExceptionMatches( PyExc_KeyError ) )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 624;
        goto try_finally_handler_1;
    }
    PyErr_Clear();
    if (tmp_locals_value != NULL)
    {
    if (var_frame.object == NULL)
    {
        var_frame.object = tmp_locals_value;
    }
    else
    {
        PyObject *old = var_frame.object;
        var_frame.object = tmp_locals_value;
        Py_DECREF( old );
    }
    }
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    tmp_result = tmp_exec_1__globals.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_exec_1__globals.object );
        tmp_exec_1__globals.object = NULL;
    }

    assert( tmp_result != false );
    tmp_result = tmp_exec_1__locals.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_exec_1__locals.object );
        tmp_exec_1__locals.object = NULL;
    }

    assert( tmp_result != false );
    Py_XDECREF( tmp_exec_1__source.object );
    tmp_exec_1__source.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = INCREASE_REFCOUNT( locals_dict );
    if ((var_frame.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_frame,
            var_frame.object
        );

    }
    if ((par__code_.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__code_,
            par__code_.object
        );

    }
    if ((par__globs_.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__globs_,
            par__globs_.object
        );

    }
    if ((par__locs_.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__locs_,
            par__locs_.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
Py_DECREF( locals_dict );
    return tmp_return_value;

}
static PyObject *fparse_function_41_exec__of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par__code_ = NULL;
    PyObject *_python_par__globs_ = NULL;
    PyObject *_python_par__locs_ = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "exec_() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain__code_ == key )
            {
                assert( _python_par__code_ == NULL );
                _python_par__code_ = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain__globs_ == key )
            {
                assert( _python_par__globs_ == NULL );
                _python_par__globs_ = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain__locs_ == key )
            {
                assert( _python_par__locs_ == NULL );
                _python_par__locs_ = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain__code_, key ) == 1 )
            {
                assert( _python_par__code_ == NULL );
                _python_par__code_ = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain__globs_, key ) == 1 )
            {
                assert( _python_par__globs_ == NULL );
                _python_par__globs_ = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain__locs_, key ) == 1 )
            {
                assert( _python_par__locs_ == NULL );
                _python_par__locs_ = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "exec_() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par__code_ != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par__code_ = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par__code_ == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par__code_ = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par__globs_ != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par__globs_ = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par__globs_ == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par__globs_ = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par__locs_ != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par__locs_ = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par__locs_ == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par__locs_ = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par__code_ == NULL || _python_par__globs_ == NULL || _python_par__locs_ == NULL ))
    {
        PyObject *values[] = { _python_par__code_, _python_par__globs_, _python_par__locs_ };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_41_exec__of_module_six( self, _python_par__code_, _python_par__globs_, _python_par__locs_ );

error_exit:;

    Py_XDECREF( _python_par__code_ );
    Py_XDECREF( _python_par__globs_ );
    Py_XDECREF( _python_par__locs_ );

    return NULL;
}

static PyObject *dparse_function_41_exec__of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_41_exec__of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_41_exec__of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_42_print__of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_args; par_args.object = _python_par_args;
    PyObjectLocalVariable par_kwargs; par_kwargs.object = _python_par_kwargs;
    PyObjectSharedLocalVariable var_fp;
    PyObjectLocalVariable var_write;
    PyObjectLocalVariable var_want_unicode;
    PyObjectLocalVariable var_sep;
    PyObjectLocalVariable var_end;
    PyObjectLocalVariable var_arg;
    PyObjectLocalVariable var_newline;
    PyObjectLocalVariable var_space;
    PyObjectLocalVariable var_i;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_for_loop_2__for_iterator;
    PyObjectTempVariable tmp_for_loop_2__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_frame_locals;
    bool tmp_is_1;
    bool tmp_is_2;
    bool tmp_is_3;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_cls_3;
    PyObject *tmp_isinstance_cls_4;
    PyObject *tmp_isinstance_cls_5;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_isinstance_inst_3;
    PyObject *tmp_isinstance_inst_4;
    PyObject *tmp_isinstance_inst_5;
    bool tmp_isnot_1;
    bool tmp_isnot_2;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iterator_attempt_1;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_make_exception_arg_3;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_type_3;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_aa14f0d2a2effb3843f318ab5b9bcc7f, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_kwargs.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 636;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_pop );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 636;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_str_plain_file;
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5370 ], 32, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 636;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_stdout );
    if ( tmp_call_arg_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 636;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 636;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_arg_element_2 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 636;
        goto frame_exception_exit_1;
    }
    if (var_fp.storage->object == NULL)
    {
        var_fp.storage->object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = var_fp.storage->object;
        var_fp.storage->object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    tmp_compare_left_1 = var_fp.storage->object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1784 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 637;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if (tmp_is_1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_assign_source_2 = MAKE_FUNCTION_function_1_write_of_function_42_print__of_module_six( var_fp );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_2 );

        frame_function->f_lineno = 639;
        goto frame_exception_exit_1;
    }
    assert( var_write.object == NULL );
    var_write.object = tmp_assign_source_2;

    tmp_assign_source_3 = Py_False;
    assert( var_want_unicode.object == NULL );
    var_want_unicode.object = INCREASE_REFCOUNT( tmp_assign_source_3 );

    tmp_source_name_3 = par_kwargs.object;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 652;
        goto frame_exception_exit_1;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_pop );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 652;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_3 = const_str_plain_sep;
    tmp_call_arg_element_4 = Py_None;
    frame_function->f_lineno = 652;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_2, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 652;
        goto frame_exception_exit_1;
    }
    assert( var_sep.object == NULL );
    var_sep.object = tmp_assign_source_4;

    tmp_compare_left_2 = var_sep.object;

    tmp_compare_right_2 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_2 != tmp_compare_right_2 );
    if (tmp_isnot_1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_isinstance_inst_1 = var_sep.object;

    tmp_isinstance_cls_1 = LOOKUP_BUILTIN( const_str_plain_unicode );
    if ( tmp_isinstance_cls_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 654;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 654;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_5 = Py_True;
    assert( var_want_unicode.object != NULL );
    {
        PyObject *old = var_want_unicode.object;
        var_want_unicode.object = INCREASE_REFCOUNT( tmp_assign_source_5 );
        Py_DECREF( old );
    }

    goto branch_end_3;
    branch_no_3:;
    tmp_isinstance_inst_2 = var_sep.object;

    tmp_isinstance_cls_2 = LOOKUP_BUILTIN( const_str_plain_str );
    if ( tmp_isinstance_cls_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 656;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 656;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_no_4;
    }
    else
    {
        goto branch_yes_4;
    }
    branch_yes_4:;
    tmp_make_exception_arg_1 = const_str_digest_9bf6a431c2e906a1aa9444b995baca8a;
    frame_function->f_lineno = 657;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 657;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 657;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_4:;
    branch_end_3:;
    branch_no_2:;
    tmp_source_name_4 = par_kwargs.object;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 658;
        goto frame_exception_exit_1;
    }

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_pop );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 658;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_5 = const_str_plain_end;
    tmp_call_arg_element_6 = Py_None;
    frame_function->f_lineno = 658;
    tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS2( tmp_called_3, tmp_call_arg_element_5, tmp_call_arg_element_6 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 658;
        goto frame_exception_exit_1;
    }
    assert( var_end.object == NULL );
    var_end.object = tmp_assign_source_6;

    tmp_compare_left_3 = var_end.object;

    tmp_compare_right_3 = Py_None;
    tmp_isnot_2 = ( tmp_compare_left_3 != tmp_compare_right_3 );
    if (tmp_isnot_2)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_isinstance_inst_3 = var_end.object;

    tmp_isinstance_cls_3 = LOOKUP_BUILTIN( const_str_plain_unicode );
    if ( tmp_isinstance_cls_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 660;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 660;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_assign_source_7 = Py_True;
    if (var_want_unicode.object == NULL)
    {
        var_want_unicode.object = INCREASE_REFCOUNT( tmp_assign_source_7 );
    }
    else
    {
        PyObject *old = var_want_unicode.object;
        var_want_unicode.object = INCREASE_REFCOUNT( tmp_assign_source_7 );
        Py_DECREF( old );
    }
    goto branch_end_6;
    branch_no_6:;
    tmp_isinstance_inst_4 = var_end.object;

    tmp_isinstance_cls_4 = LOOKUP_BUILTIN( const_str_plain_str );
    if ( tmp_isinstance_cls_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 662;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_4, tmp_isinstance_cls_4 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 662;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_no_7;
    }
    else
    {
        goto branch_yes_7;
    }
    branch_yes_7:;
    tmp_make_exception_arg_2 = const_str_digest_cc0643423e5f80c068642401624a6285;
    frame_function->f_lineno = 663;
    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, tmp_make_exception_arg_2 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 663;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_2;
    frame_function->f_lineno = 663;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_7:;
    branch_end_6:;
    branch_no_5:;
    tmp_cond_value_1 = par_kwargs.object;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 664;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 664;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_make_exception_arg_3 = const_str_digest_4a6390c371ce14a2c4072627ff0defed;
    frame_function->f_lineno = 665;
    tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, tmp_make_exception_arg_3 );
    if ( tmp_raise_type_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 665;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_3;
    frame_function->f_lineno = 665;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_8:;
    tmp_cond_value_2 = var_want_unicode.object;

    if ( tmp_cond_value_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 329026 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 666;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 666;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_no_9;
    }
    else
    {
        goto branch_yes_9;
    }
    branch_yes_9:;
    tmp_iter_arg_1 = par_args.object;

    if ( tmp_iter_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5435 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 667;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_8 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 667;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_8;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_9 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_9 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 667;
            goto try_finally_handler_1;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_9;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_9;
        Py_DECREF( old );
    }
    tmp_assign_source_10 = tmp_for_loop_1__iter_value.object;

    if (var_arg.object == NULL)
    {
        var_arg.object = INCREASE_REFCOUNT( tmp_assign_source_10 );
    }
    else
    {
        PyObject *old = var_arg.object;
        var_arg.object = INCREASE_REFCOUNT( tmp_assign_source_10 );
        Py_DECREF( old );
    }
    tmp_isinstance_inst_5 = var_arg.object;

    tmp_isinstance_cls_5 = LOOKUP_BUILTIN( const_str_plain_unicode );
    if ( tmp_isinstance_cls_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 668;
        goto try_finally_handler_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_5, tmp_isinstance_cls_5 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 668;
        goto try_finally_handler_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_assign_source_11 = Py_True;
    if (var_want_unicode.object == NULL)
    {
        var_want_unicode.object = INCREASE_REFCOUNT( tmp_assign_source_11 );
    }
    else
    {
        PyObject *old = var_want_unicode.object;
        var_want_unicode.object = INCREASE_REFCOUNT( tmp_assign_source_11 );
        Py_DECREF( old );
    }
    goto loop_end_1;
    branch_no_10:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 667;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    branch_no_9:;
    tmp_cond_value_3 = var_want_unicode.object;

    if ( tmp_cond_value_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 329026 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 671;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 671;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_assign_source_12 = const_unicode_newline;
    assert( var_newline.object == NULL );
    var_newline.object = INCREASE_REFCOUNT( tmp_assign_source_12 );

    tmp_assign_source_13 = const_unicode_space;
    assert( var_space.object == NULL );
    var_space.object = INCREASE_REFCOUNT( tmp_assign_source_13 );

    goto branch_end_11;
    branch_no_11:;
    tmp_assign_source_14 = const_str_newline;
    assert( var_newline.object == NULL );
    var_newline.object = INCREASE_REFCOUNT( tmp_assign_source_14 );

    tmp_assign_source_15 = const_str_space;
    assert( var_space.object == NULL );
    var_space.object = INCREASE_REFCOUNT( tmp_assign_source_15 );

    branch_end_11:;
    tmp_compare_left_4 = var_sep.object;

    if ( tmp_compare_left_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 58702 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 677;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_4 = Py_None;
    tmp_is_2 = ( tmp_compare_left_4 == tmp_compare_right_4 );
    if (tmp_is_2)
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_assign_source_16 = var_space.object;

    if (var_sep.object == NULL)
    {
        var_sep.object = INCREASE_REFCOUNT( tmp_assign_source_16 );
    }
    else
    {
        PyObject *old = var_sep.object;
        var_sep.object = INCREASE_REFCOUNT( tmp_assign_source_16 );
        Py_DECREF( old );
    }
    branch_no_12:;
    tmp_compare_left_5 = var_end.object;

    if ( tmp_compare_left_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 60336 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 679;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_5 = Py_None;
    tmp_is_3 = ( tmp_compare_left_5 == tmp_compare_right_5 );
    if (tmp_is_3)
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_assign_source_17 = var_newline.object;

    if (var_end.object == NULL)
    {
        var_end.object = INCREASE_REFCOUNT( tmp_assign_source_17 );
    }
    else
    {
        PyObject *old = var_end.object;
        var_end.object = INCREASE_REFCOUNT( tmp_assign_source_17 );
        Py_DECREF( old );
    }
    branch_no_13:;
    tmp_called_4 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 681;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_7 = par_args.object;

    if ( tmp_call_arg_element_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5435 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 681;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 681;
    tmp_iter_arg_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_7 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 681;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_18 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 681;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator.object == NULL );
    tmp_for_loop_2__for_iterator.object = tmp_assign_source_18;

    // Tried code
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator.object;

    tmp_assign_source_19 = ITERATOR_NEXT( tmp_next_source_2 );
    if (tmp_assign_source_19 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_2;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 681;
            goto try_finally_handler_2;
        }
    }

    if (tmp_for_loop_2__iter_value.object == NULL)
    {
        tmp_for_loop_2__iter_value.object = tmp_assign_source_19;
    }
    else
    {
        PyObject *old = tmp_for_loop_2__iter_value.object;
        tmp_for_loop_2__iter_value.object = tmp_assign_source_19;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_3 = tmp_for_loop_2__iter_value.object;

    tmp_assign_source_20 = MAKE_ITERATOR( tmp_iter_arg_3 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 681;
        goto try_finally_handler_3;
    }
    if (tmp_tuple_unpack_1__source_iter.object == NULL)
    {
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_20;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter.object;
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_20;
        Py_DECREF( old );
    }
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_21 = UNPACK_PARAMETER_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_21 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 681;
        goto try_finally_handler_3;
    }
    if (tmp_tuple_unpack_1__element_1.object == NULL)
    {
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_21;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_1.object;
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_21;
        Py_DECREF( old );
    }
    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_22 = UNPACK_PARAMETER_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_22 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 681;
        goto try_finally_handler_3;
    }
    if (tmp_tuple_unpack_1__element_2.object == NULL)
    {
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_22;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_2.object;
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_22;
        Py_DECREF( old );
    }
    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_1 ); assert( PyIter_Check( tmp_iterator_name_1 ) );

    tmp_iterator_attempt_1 = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt_1 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_3;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_1 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_3;
    }
    tmp_assign_source_23 = tmp_tuple_unpack_1__element_1.object;

    if (var_i.object == NULL)
    {
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_23 );
    }
    else
    {
        PyObject *old = var_i.object;
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_23 );
        Py_DECREF( old );
    }
    tmp_assign_source_24 = tmp_tuple_unpack_1__element_2.object;

    if (var_arg.object == NULL)
    {
        var_arg.object = INCREASE_REFCOUNT( tmp_assign_source_24 );
    }
    else
    {
        PyObject *old = var_arg.object;
        var_arg.object = INCREASE_REFCOUNT( tmp_assign_source_24 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter.object );
    tmp_tuple_unpack_1__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1.object );
    tmp_tuple_unpack_1__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2.object );
    tmp_tuple_unpack_1__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_2;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_cond_value_4 = var_i.object;

    if ( tmp_cond_value_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 682;
        goto try_finally_handler_2;
    }

    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 682;
        goto try_finally_handler_2;
    }
    if (tmp_cond_truth_4 == 1)
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_called_5 = var_write.object;

    if ( tmp_called_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 329084 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 683;
        goto try_finally_handler_2;
    }

    tmp_call_arg_element_8 = var_sep.object;

    if ( tmp_call_arg_element_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 58702 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 683;
        goto try_finally_handler_2;
    }

    frame_function->f_lineno = 683;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_8 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 683;
        goto try_finally_handler_2;
    }
    Py_DECREF( tmp_unused );
    branch_no_14:;
    tmp_called_6 = var_write.object;

    if ( tmp_called_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 329084 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 684;
        goto try_finally_handler_2;
    }

    tmp_call_arg_element_9 = var_arg.object;

    if ( tmp_call_arg_element_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 39334 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 684;
        goto try_finally_handler_2;
    }

    frame_function->f_lineno = 684;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_9 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 684;
        goto try_finally_handler_2;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 681;
        goto try_finally_handler_2;
    }
    goto loop_start_2;
    loop_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_2__iter_value.object );
    tmp_for_loop_2__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator.object );
    tmp_for_loop_2__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto frame_exception_exit_1;
    }

    goto finally_end_3;
    finally_end_3:;
    tmp_called_7 = var_write.object;

    if ( tmp_called_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 329084 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 685;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_10 = var_end.object;

    if ( tmp_call_arg_element_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 60336 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 685;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 685;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_10 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 685;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_fp.storage != NULL && var_fp.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fp,
            var_fp.storage->object
        );

    }
    if ((var_write.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_write,
            var_write.object
        );

    }
    if ((var_want_unicode.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_want_unicode,
            var_want_unicode.object
        );

    }
    if ((var_sep.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_sep,
            var_sep.object
        );

    }
    if ((var_end.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_end,
            var_end.object
        );

    }
    if ((var_arg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_arg,
            var_arg.object
        );

    }
    if ((var_newline.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_newline,
            var_newline.object
        );

    }
    if ((var_space.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_space,
            var_space.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((par_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_args,
            par_args.object
        );

    }
    if ((par_kwargs.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kwargs,
            par_kwargs.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_42_print__of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "print_() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "print_() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "print_() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 0 )
    {
        _python_par_args = PyTuple_New( args_size - 0 );

        for( Py_ssize_t i = 0; i < args_size - 0; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[0+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( const_tuple_empty );
    }


    return impl_function_42_print__of_module_six( self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_42_print__of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_42_print__of_module_six( self, MAKE_TUPLE( &args[ 0 ], size > 0 ? size-0 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_42_print__of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_write_of_function_42_print__of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_data )
{
    // The context of the function.
    struct _context_function_1_write_of_function_42_print__of_module_six_t *_python_context = (struct _context_function_1_write_of_function_42_print__of_module_six_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalVariable par_data; par_data.object = _python_par_data;
    PyObjectLocalVariable var_errors;
    PyObjectTempVariable tmp_and_1__value_1;
    PyObjectTempVariable tmp_and_1__value_2;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_default_1;
    PyObject *tmp_getattr_target_1;
    bool tmp_is_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_cls_3;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_isinstance_inst_3;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_str_arg_1;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_9dadaf0cd28c7c9a16723233a5abd4c8, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_isinstance_inst_1 = par_data.object;

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 0 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 640;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_1 = LOOKUP_BUILTIN( const_str_plain_basestring );
    if ( tmp_isinstance_cls_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 640;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 640;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_str_arg_1 = par_data.object;

    if ( tmp_str_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 0 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 641;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_1 = PyObject_Str( tmp_str_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 641;
        goto frame_exception_exit_1;
    }
    if (par_data.object == NULL)
    {
        par_data.object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = par_data.object;
        par_data.object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    branch_no_1:;
    // Tried code
    tmp_cond_value_1 = NULL;
    // Tried code
    tmp_isinstance_inst_2 = _python_context->closure_fp.storage->object;

    if ( tmp_isinstance_inst_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1784 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 643;
        goto try_finally_handler_2;
    }

    tmp_isinstance_cls_2 = LOOKUP_BUILTIN( const_str_plain_file );
    if ( tmp_isinstance_cls_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 643;
        goto try_finally_handler_2;
    }
    tmp_assign_source_2 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 643;
        goto try_finally_handler_2;
    }
    assert( tmp_and_1__value_2.object == NULL );
    tmp_and_1__value_2.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    tmp_cond_value_2 = tmp_and_1__value_2.object;

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 643;
        goto try_finally_handler_2;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_cond_value_1 = NULL;
    // Tried code
    tmp_cond_value_1 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_2.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_2.object );
        tmp_and_1__value_2.object = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_1 = NULL;
    // Tried code
    tmp_isinstance_inst_3 = par_data.object;

    if ( tmp_isinstance_inst_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 0 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 644;
        goto try_finally_handler_5;
    }

    tmp_isinstance_cls_3 = LOOKUP_BUILTIN( const_str_plain_unicode );
    if ( tmp_isinstance_cls_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 644;
        goto try_finally_handler_5;
    }
    tmp_assign_source_3 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 644;
        goto try_finally_handler_5;
    }
    assert( tmp_and_1__value_1.object == NULL );
    tmp_and_1__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_3 );

    tmp_cond_value_3 = tmp_and_1__value_1.object;

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 643;
        goto try_finally_handler_5;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_cond_value_1 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1.object );
        tmp_and_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_source_name_1 = _python_context->closure_fp.storage->object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1784 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 645;
        goto try_finally_handler_6;
    }

    tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_encoding );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 645;
        goto try_finally_handler_6;
    }
    tmp_compexpr_right_1 = Py_None;
    tmp_cond_value_1 = BOOL_FROM( tmp_compexpr_left_1 != tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_5;
    }

    goto finally_end_1;
    finally_end_1:;
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_cond_value_1 = tmp_and_1__value_1.object;

    condexpr_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_4;
    }

    goto finally_end_2;
    finally_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto try_finally_handler_3;
    }

    goto finally_end_3;
    finally_end_3:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_1__value_1.object );
    tmp_and_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto try_finally_handler_2;
    }

    goto finally_end_4;
    finally_end_4:;
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_cond_value_1 = tmp_and_1__value_2.object;

    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto try_finally_handler_1;
    }

    goto finally_end_5;
    finally_end_5:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 643;
        goto try_finally_handler_1;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_getattr_target_1 = _python_context->closure_fp.storage->object;

    if ( tmp_getattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1784 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 646;
        goto try_finally_handler_1;
    }

    tmp_getattr_attr_1 = const_str_plain_errors;
    tmp_getattr_default_1 = Py_None;
    tmp_assign_source_4 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 646;
        goto try_finally_handler_1;
    }
    assert( var_errors.object == NULL );
    var_errors.object = tmp_assign_source_4;

    tmp_compare_left_1 = var_errors.object;

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if (tmp_is_1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_5 = const_str_plain_strict;
    assert( var_errors.object != NULL );
    {
        PyObject *old = var_errors.object;
        var_errors.object = INCREASE_REFCOUNT( tmp_assign_source_5 );
        Py_DECREF( old );
    }

    branch_no_3:;
    tmp_source_name_2 = par_data.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 0 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 649;
        goto try_finally_handler_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_encode );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 649;
        goto try_finally_handler_1;
    }
    tmp_source_name_3 = _python_context->closure_fp.storage->object;

    if ( tmp_source_name_3 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1784 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 649;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_encoding );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 649;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_2 = var_errors.object;

    frame_function->f_lineno = 649;
    tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS2( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 649;
        goto try_finally_handler_1;
    }
    if (par_data.object == NULL)
    {
        par_data.object = tmp_assign_source_6;
    }
    else
    {
        PyObject *old = par_data.object;
        par_data.object = tmp_assign_source_6;
        Py_DECREF( old );
    }
    branch_no_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_1__value_2.object );
    tmp_and_1__value_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto frame_exception_exit_1;
    }

    goto finally_end_6;
    finally_end_6:;
    tmp_source_name_4 = _python_context->closure_fp.storage->object;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1784 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 650;
        goto frame_exception_exit_1;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_write );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 650;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_3 = par_data.object;

    if ( tmp_call_arg_element_3 == NULL )
    {
        Py_DECREF( tmp_called_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 0 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 650;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 650;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_3 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 650;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_errors.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_errors,
            var_errors.object
        );

    }
    if ((_python_context->closure_fp.storage != NULL && _python_context->closure_fp.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_fp,
            _python_context->closure_fp.storage->object
        );

    }
    if ((par_data.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_data,
            par_data.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1_write_of_function_42_print__of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_data = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "write() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_data == key )
            {
                assert( _python_par_data == NULL );
                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_data, key ) == 1 )
            {
                assert( _python_par_data == NULL );
                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "write() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_data == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_data = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_data == NULL ))
    {
        PyObject *values[] = { _python_par_data };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1_write_of_function_42_print__of_module_six( self, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_1_write_of_function_42_print__of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_1_write_of_function_42_print__of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_write_of_function_42_print__of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_43_wraps_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_wrapped )
{
    // No context is used.

    // Local variable declarations.
    PyObjectSharedLocalVariable par_wrapped; par_wrapped.storage->object = _python_par_wrapped;
    PyObjectLocalVariable var_wrapper;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_97d493dc8ff11a7de36f74c39b77f53c, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_assign_source_1 = MAKE_FUNCTION_function_1_wrapper_of_function_43_wraps_of_module_six( par_wrapped );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_1 );

        frame_function->f_lineno = 691;
        goto frame_exception_exit_1;
    }
    assert( var_wrapper.object == NULL );
    var_wrapper.object = tmp_assign_source_1;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_wrapper.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_wrapper,
            var_wrapper.object
        );

    }
    if ((par_wrapped.storage != NULL && par_wrapped.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_wrapped,
            par_wrapped.storage->object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = var_wrapper.object;

    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_43_wraps_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_wrapped = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "wraps() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_wrapped == key )
            {
                assert( _python_par_wrapped == NULL );
                _python_par_wrapped = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_wrapped, key ) == 1 )
            {
                assert( _python_par_wrapped == NULL );
                _python_par_wrapped = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "wraps() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_wrapped != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_wrapped = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_wrapped == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_wrapped = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_wrapped == NULL ))
    {
        PyObject *values[] = { _python_par_wrapped };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_43_wraps_of_module_six( self, _python_par_wrapped );

error_exit:;

    Py_XDECREF( _python_par_wrapped );

    return NULL;
}

static PyObject *dparse_function_43_wraps_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_43_wraps_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_43_wraps_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_wrapper_of_function_43_wraps_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_f )
{
    // The context of the function.
    struct _context_function_1_wrapper_of_function_43_wraps_of_module_six_t *_python_context = (struct _context_function_1_wrapper_of_function_43_wraps_of_module_six_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalVariable par_f; par_f.object = _python_par_f;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_frame_locals;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_bec5259678929798b4b9af51ef00a532, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_functools );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_functools );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 223592 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 692;
        goto frame_exception_exit_1;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_wraps );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 692;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = _python_context->closure_wrapped.storage->object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 329135 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 692;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 692;
    tmp_called_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 692;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_2 = par_f.object;

    if ( tmp_call_arg_element_2 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6491 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 692;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 692;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 692;
        goto frame_exception_exit_1;
    }
    if (par_f.object == NULL)
    {
        par_f.object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = par_f.object;
        par_f.object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    tmp_assattr_name_1 = _python_context->closure_wrapped.storage->object;

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 329135 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 693;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = par_f.object;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain___wrapped__, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 693;
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_f.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_f,
            par_f.object
        );

    }
    if ((_python_context->closure_wrapped.storage != NULL && _python_context->closure_wrapped.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_wrapped,
            _python_context->closure_wrapped.storage->object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = par_f.object;

    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1_wrapper_of_function_43_wraps_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_f = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "wrapper() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_f == key )
            {
                assert( _python_par_f == NULL );
                _python_par_f = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_f, key ) == 1 )
            {
                assert( _python_par_f == NULL );
                _python_par_f = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "wrapper() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_f != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_f = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_f == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_f = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_f == NULL ))
    {
        PyObject *values[] = { _python_par_f };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1_wrapper_of_function_43_wraps_of_module_six( self, _python_par_f );

error_exit:;

    Py_XDECREF( _python_par_f );

    return NULL;
}

static PyObject *dparse_function_1_wrapper_of_function_43_wraps_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_1_wrapper_of_function_43_wraps_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_wrapper_of_function_43_wraps_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_44_with_metaclass_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_meta, PyObject *_python_par_bases )
{
    // No context is used.

    // Local variable declarations.
    PyObjectSharedLocalVariable par_meta; par_meta.storage->object = _python_par_meta;
    PyObjectSharedLocalVariable par_bases; par_bases.storage->object = _python_par_bases;
    PyObjectLocalVariable var_metaclass;
    PyObjectTempVariable tmp_class_creation_1__bases;
    PyObjectTempVariable tmp_class_creation_1__class_dict;
    PyObjectTempVariable tmp_class_creation_1__metaclass;
    PyObjectTempVariable tmp_class_creation_1__class;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_class_bases_1;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_dget_dict_1;
    PyObject *tmp_dget_key_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    int tmp_tried_lineno_1;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_8b31a42c0c7786fc48ecb710b5989d86, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code
    tmp_assign_source_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_meta.storage->object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 115353 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 704;
        goto try_finally_handler_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assign_source_1, 0, tmp_tuple_element_1 );
    assert( tmp_class_creation_1__bases.object == NULL );
    tmp_class_creation_1__bases.object = tmp_assign_source_1;

    tmp_assign_source_2 = impl_class_1_metaclass_of_function_44_with_metaclass_of_module_six( par_bases, par_meta );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 704;
        goto try_finally_handler_1;
    }
    assert( tmp_class_creation_1__class_dict.object == NULL );
    tmp_class_creation_1__class_dict.object = tmp_assign_source_2;

    tmp_compare_left_1 = const_str_plain___metaclass__;
    tmp_compare_right_1 = tmp_class_creation_1__class_dict.object;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    if ( tmp_cmp_In_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 704;
        goto try_finally_handler_1;
    }
    if (tmp_cmp_In_1 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_dget_dict_1 = tmp_class_creation_1__class_dict.object;

    tmp_dget_key_1 = const_str_plain___metaclass__;
    tmp_assign_source_3 = DICT_GET_ITEM( tmp_dget_dict_1, tmp_dget_key_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 704;
        goto try_finally_handler_1;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_class_bases_1 = tmp_class_creation_1__bases.object;

    tmp_assign_source_3 = SELECT_METACLASS( tmp_class_bases_1, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_1:;
    assert( tmp_class_creation_1__metaclass.object == NULL );
    tmp_class_creation_1__metaclass.object = tmp_assign_source_3;

    tmp_called_1 = tmp_class_creation_1__metaclass.object;

    tmp_call_arg_element_1 = const_str_plain_metaclass;
    tmp_call_arg_element_2 = tmp_class_creation_1__bases.object;

    tmp_call_arg_element_3 = tmp_class_creation_1__class_dict.object;

    frame_function->f_lineno = 704;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 704;
        goto try_finally_handler_1;
    }
    assert( tmp_class_creation_1__class.object == NULL );
    tmp_class_creation_1__class.object = tmp_assign_source_4;

    tmp_assign_source_5 = tmp_class_creation_1__class.object;

    assert( var_metaclass.object == NULL );
    var_metaclass.object = INCREASE_REFCOUNT( tmp_assign_source_5 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_class_creation_1__class.object );
    tmp_class_creation_1__class.object = NULL;

    Py_XDECREF( tmp_class_creation_1__bases.object );
    tmp_class_creation_1__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_1__class_dict.object );
    tmp_class_creation_1__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass.object );
    tmp_class_creation_1__metaclass.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_source_name_1 = LOOKUP_BUILTIN( const_str_plain_type );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 707;
        goto frame_exception_exit_1;
    }
    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___new__ );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 707;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_4 = var_metaclass.object;

    if ( tmp_call_arg_element_4 == NULL )
    {
        Py_DECREF( tmp_called_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 329188 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 707;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_5 = const_str_plain_temporary_class;
    tmp_call_arg_element_6 = const_tuple_empty;
    tmp_call_arg_element_7 = PyDict_New();
    frame_function->f_lineno = 707;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_2, tmp_call_arg_element_4, tmp_call_arg_element_5, tmp_call_arg_element_6, tmp_call_arg_element_7 );
    Py_DECREF( tmp_called_2 );
    Py_DECREF( tmp_call_arg_element_7 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 707;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_metaclass.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_metaclass,
            var_metaclass.object
        );

    }
    if ((par_meta.storage != NULL && par_meta.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_meta,
            par_meta.storage->object
        );

    }
    if ((par_bases.storage != NULL && par_bases.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_bases,
            par_bases.storage->object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_44_with_metaclass_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_meta = NULL;
    PyObject *_python_par_bases = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "with_metaclass() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_meta == key )
            {
                assert( _python_par_meta == NULL );
                _python_par_meta = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_meta, key ) == 1 )
            {
                assert( _python_par_meta == NULL );
                _python_par_meta = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "with_metaclass() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_meta != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_meta = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_meta == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_meta = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_meta == NULL ))
    {
        PyObject *values[] = { _python_par_meta };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_bases = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_bases, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_bases = INCREASE_REFCOUNT( const_tuple_empty );
    }


    return impl_function_44_with_metaclass_of_module_six( self, _python_par_meta, _python_par_bases );

error_exit:;

    Py_XDECREF( _python_par_meta );
    Py_XDECREF( _python_par_bases );

    return NULL;
}

static PyObject *dparse_function_44_with_metaclass_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_44_with_metaclass_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_function_44_with_metaclass_of_module_six( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_1_metaclass_of_function_44_with_metaclass_of_module_six( PyObjectSharedLocalVariable& closure_bases, PyObjectSharedLocalVariable& closure_meta )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___new__;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_plain_six;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_18162167c646190c34d34bb3158e5cd5, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = LOOKUP_BUILTIN( const_str_plain_staticmethod );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 705;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = MAKE_FUNCTION_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six( closure_bases, closure_meta );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_1 );

        frame_function->f_lineno = 705;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 705;
    tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 705;
        goto frame_exception_exit_1;
    }
    assert( var___new__.object == NULL );
    var___new__.object = tmp_assign_source_2;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___new__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___new__,
            var___new__.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___new__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___new__,
            var___new__.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}


static PyObject *impl_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_cls, PyObject *_python_par_name, PyObject *_python_par_this_bases, PyObject *_python_par_d )
{
    // The context of the function.
    struct _context_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six_t *_python_context = (struct _context_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalVariable par_cls; par_cls.object = _python_par_cls;
    PyObjectLocalVariable par_name; par_name.object = _python_par_name;
    PyObjectLocalVariable par_this_bases; par_this_bases.object = _python_par_this_bases;
    PyObjectLocalVariable par_d; par_d.object = _python_par_d;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_63188ded245e65556f13664d6b58ef2c, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = _python_context->closure_meta.storage->object;

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 115353 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 706;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = par_name.object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 706;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_2 = _python_context->closure_bases.storage->object;

    if ( tmp_call_arg_element_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 329243 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 706;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_3 = par_d.object;

    if ( tmp_call_arg_element_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6034 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 706;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 706;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 706;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_cls.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_cls,
            par_cls.object
        );

    }
    if ((par_name.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_name,
            par_name.object
        );

    }
    if ((par_this_bases.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_this_bases,
            par_this_bases.object
        );

    }
    if ((par_d.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_d,
            par_d.object
        );

    }
    if ((_python_context->closure_meta.storage != NULL && _python_context->closure_meta.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_meta,
            _python_context->closure_meta.storage->object
        );

    }
    if ((_python_context->closure_bases.storage != NULL && _python_context->closure_bases.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_bases,
            _python_context->closure_bases.storage->object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_cls = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_this_bases = NULL;
    PyObject *_python_par_d = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__new__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_cls == key )
            {
                assert( _python_par_cls == NULL );
                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_name == key )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_this_bases == key )
            {
                assert( _python_par_this_bases == NULL );
                _python_par_this_bases = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_d == key )
            {
                assert( _python_par_d == NULL );
                _python_par_d = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_cls, key ) == 1 )
            {
                assert( _python_par_cls == NULL );
                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_name, key ) == 1 )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_this_bases, key ) == 1 )
            {
                assert( _python_par_this_bases == NULL );
                _python_par_this_bases = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_d, key ) == 1 )
            {
                assert( _python_par_d == NULL );
                _python_par_d = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__new__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_cls == NULL )
    {
        if ( 0 + self->m_defaults_given >= 4  )
        {
            _python_par_cls = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_name == NULL )
    {
        if ( 1 + self->m_defaults_given >= 4  )
        {
            _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_this_bases != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_this_bases = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_this_bases == NULL )
    {
        if ( 2 + self->m_defaults_given >= 4  )
        {
            _python_par_this_bases = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_d != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_d = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_d == NULL )
    {
        if ( 3 + self->m_defaults_given >= 4  )
        {
            _python_par_d = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_cls == NULL || _python_par_name == NULL || _python_par_this_bases == NULL || _python_par_d == NULL ))
    {
        PyObject *values[] = { _python_par_cls, _python_par_name, _python_par_this_bases, _python_par_d };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six( self, _python_par_cls, _python_par_name, _python_par_this_bases, _python_par_d );

error_exit:;

    Py_XDECREF( _python_par_cls );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_this_bases );
    Py_XDECREF( _python_par_d );

    return NULL;
}

static PyObject *dparse_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4 )
    {
        return impl_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_45_add_metaclass_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_metaclass )
{
    // No context is used.

    // Local variable declarations.
    PyObjectSharedLocalVariable par_metaclass; par_metaclass.storage->object = _python_par_metaclass;
    PyObjectLocalVariable var_wrapper;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_de2e37aa2bbe5cc6293834fd9b8dbb8a, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_assign_source_1 = MAKE_FUNCTION_function_1_wrapper_of_function_45_add_metaclass_of_module_six( par_metaclass );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_1 );

        frame_function->f_lineno = 712;
        goto frame_exception_exit_1;
    }
    assert( var_wrapper.object == NULL );
    var_wrapper.object = tmp_assign_source_1;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_wrapper.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_wrapper,
            var_wrapper.object
        );

    }
    if ((par_metaclass.storage != NULL && par_metaclass.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_metaclass,
            par_metaclass.storage->object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = var_wrapper.object;

    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_45_add_metaclass_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_metaclass = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_metaclass() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_metaclass == key )
            {
                assert( _python_par_metaclass == NULL );
                _python_par_metaclass = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_metaclass, key ) == 1 )
            {
                assert( _python_par_metaclass == NULL );
                _python_par_metaclass = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_metaclass() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_metaclass != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_metaclass = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_metaclass == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_metaclass = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_metaclass == NULL ))
    {
        PyObject *values[] = { _python_par_metaclass };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_45_add_metaclass_of_module_six( self, _python_par_metaclass );

error_exit:;

    Py_XDECREF( _python_par_metaclass );

    return NULL;
}

static PyObject *dparse_function_45_add_metaclass_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_45_add_metaclass_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_45_add_metaclass_of_module_six( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_wrapper_of_function_45_add_metaclass_of_module_six( Nuitka_FunctionObject *self, PyObject *_python_par_cls )
{
    // The context of the function.
    struct _context_function_1_wrapper_of_function_45_add_metaclass_of_module_six_t *_python_context = (struct _context_function_1_wrapper_of_function_45_add_metaclass_of_module_six_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalVariable par_cls; par_cls.object = _python_par_cls;
    PyObjectLocalVariable var_orig_vars;
    PyObjectLocalVariable var_slots;
    PyObjectLocalVariable var_slots_var;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    bool tmp_isnot_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_next_source_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    int tmp_tried_lineno_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_9ba1cb89c90694664aeaf484e107a04e, module_six );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_2 = par_cls.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 16971 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 713;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = LOOKUP_ATTRIBUTE_DICT_SLOT( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 713;
        goto frame_exception_exit_1;
    }
    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_copy );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 713;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 713;
    tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS( tmp_called_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 713;
        goto frame_exception_exit_1;
    }
    assert( var_orig_vars.object == NULL );
    var_orig_vars.object = tmp_assign_source_1;

    tmp_source_name_3 = var_orig_vars.object;

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_pop );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 714;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_str_plain___dict__;
    tmp_call_arg_element_2 = Py_None;
    frame_function->f_lineno = 714;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_2, tmp_call_arg_element_1, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 714;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_4 = var_orig_vars.object;

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_pop );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 715;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_3 = const_str_plain___weakref__;
    tmp_call_arg_element_4 = Py_None;
    frame_function->f_lineno = 715;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_3, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 715;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_5 = var_orig_vars.object;

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_get );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 716;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_5 = const_str_plain___slots__;
    frame_function->f_lineno = 716;
    tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_5 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 716;
        goto frame_exception_exit_1;
    }
    assert( var_slots.object == NULL );
    var_slots.object = tmp_assign_source_2;

    tmp_compare_left_1 = var_slots.object;

    tmp_compare_right_1 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_1 != tmp_compare_right_1 );
    if (tmp_isnot_1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_isinstance_inst_1 = var_slots.object;

    tmp_isinstance_cls_1 = LOOKUP_BUILTIN( const_str_plain_str );
    if ( tmp_isinstance_cls_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 718;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 718;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_3 = PyList_New( 1 );
    tmp_list_element_1 = var_slots.object;

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_assign_source_3, 0, tmp_list_element_1 );
    assert( var_slots.object != NULL );
    {
        PyObject *old = var_slots.object;
        var_slots.object = tmp_assign_source_3;
        Py_DECREF( old );
    }

    branch_no_2:;
    tmp_iter_arg_1 = var_slots.object;

    tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 720;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_4;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_5 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_5 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 720;
            goto try_finally_handler_1;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_5;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_5;
        Py_DECREF( old );
    }
    tmp_assign_source_6 = tmp_for_loop_1__iter_value.object;

    if (var_slots_var.object == NULL)
    {
        var_slots_var.object = INCREASE_REFCOUNT( tmp_assign_source_6 );
    }
    else
    {
        PyObject *old = var_slots_var.object;
        var_slots_var.object = INCREASE_REFCOUNT( tmp_assign_source_6 );
        Py_DECREF( old );
    }
    tmp_source_name_6 = var_orig_vars.object;

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 329294 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 721;
        goto try_finally_handler_1;
    }

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_pop );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 721;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_6 = var_slots_var.object;

    frame_function->f_lineno = 721;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_6 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 721;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 720;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    branch_no_1:;
    tmp_called_6 = _python_context->closure_metaclass.storage->object;

    if ( tmp_called_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 329188 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 722;
        goto frame_exception_exit_1;
    }

    tmp_source_name_7 = par_cls.object;

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 16971 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 722;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_7 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain___name__ );
    if ( tmp_call_arg_element_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 722;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = par_cls.object;

    if ( tmp_source_name_8 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 16971 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 722;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_8 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain___bases__ );
    if ( tmp_call_arg_element_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_7 );

        frame_function->f_lineno = 722;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_9 = var_orig_vars.object;

    if ( tmp_call_arg_element_9 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_7 );
        Py_DECREF( tmp_call_arg_element_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 329294 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 722;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 722;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_6, tmp_call_arg_element_7, tmp_call_arg_element_8, tmp_call_arg_element_9 );
    Py_DECREF( tmp_call_arg_element_7 );
    Py_DECREF( tmp_call_arg_element_8 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 722;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_orig_vars.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_orig_vars,
            var_orig_vars.object
        );

    }
    if ((var_slots.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_slots,
            var_slots.object
        );

    }
    if ((var_slots_var.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_slots_var,
            var_slots_var.object
        );

    }
    if ((par_cls.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_cls,
            par_cls.object
        );

    }
    if ((_python_context->closure_metaclass.storage != NULL && _python_context->closure_metaclass.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_metaclass,
            _python_context->closure_metaclass.storage->object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1_wrapper_of_function_45_add_metaclass_of_module_six( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_cls = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "wrapper() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_cls == key )
            {
                assert( _python_par_cls == NULL );
                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_cls, key ) == 1 )
            {
                assert( _python_par_cls == NULL );
                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "wrapper() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_cls == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_cls = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_cls == NULL ))
    {
        PyObject *values[] = { _python_par_cls };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1_wrapper_of_function_45_add_metaclass_of_module_six( self, _python_par_cls );

error_exit:;

    Py_XDECREF( _python_par_cls );

    return NULL;
}

static PyObject *dparse_function_1_wrapper_of_function_45_add_metaclass_of_module_six( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_1_wrapper_of_function_45_add_metaclass_of_module_six( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_wrapper_of_function_45_add_metaclass_of_module_six( self, args, size, NULL );
        return result;
    }

}




static PyObject *MAKE_FUNCTION_function_16_add_move_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_16_add_move_of_module_six,
        dparse_function_16_add_move_of_module_six,
        const_str_plain_add_move,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2d1b05a953dc1346654ef86c67dbd200,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_c3ff2b11420d90920c8b3e4b73e88e7b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_17_remove_move_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_17_remove_move_of_module_six,
        dparse_function_17_remove_move_of_module_six,
        const_str_plain_remove_move,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f91f4fcf5fc3b121c1d8d0d7f9842556,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_188f2c9a4861b76d1163e3a4f484ce9b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_18_advance_iterator_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_18_advance_iterator_of_module_six,
        dparse_function_18_advance_iterator_of_module_six,
        const_str_plain_advance_iterator,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_68c9fadd9114f7f721e2c5e8a70a8e49,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_19_callable_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_19_callable_of_module_six,
        dparse_function_19_callable_of_module_six,
        const_str_plain_callable,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_319d1893c539a33a1b662908a0e92c1d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___dir___of_class_15_Module_six_moves_urllib_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___dir___of_class_15_Module_six_moves_urllib_of_module_six,
        dparse_function_1___dir___of_class_15_Module_six_moves_urllib_of_module_six,
        const_str_plain___dir__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_bf7a478de33aac3586a0d09fe512205f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_4__LazyDescr_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_4__LazyDescr_of_module_six,
        dparse_function_1___init___of_class_4__LazyDescr_of_module_six,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e62ca72e025d08cf33aa6fe064fe3a7f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_5_MovedModule_of_module_six( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_5_MovedModule_of_module_six,
        dparse_function_1___init___of_class_5_MovedModule_of_module_six,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f56ff6cee8e2a9569b658c3912935586,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_6__LazyModule_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_6__LazyModule_of_module_six,
        dparse_function_1___init___of_class_6__LazyModule_of_module_six,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5b22459deafbe83b6aa6806c0dcc095c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_7_MovedAttribute_of_module_six( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_7_MovedAttribute_of_module_six,
        dparse_function_1___init___of_class_7_MovedAttribute_of_module_six,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_7d4516fecc92416065498e83c699f78b,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_8__SixMetaPathImporter_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_8__SixMetaPathImporter_of_module_six,
        dparse_function_1___init___of_class_8__SixMetaPathImporter_of_module_six,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2ca5305117764c289bf4688897080d7c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___len___of_class_1_X_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___len___of_class_1_X_of_module_six,
        dparse_function_1___len___of_class_1_X_of_module_six,
        const_str_plain___len__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0cd9bf830e4ff3cdf9bfdcdc5296f79d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six( PyObjectSharedLocalVariable &closure_bases, PyObjectSharedLocalVariable &closure_meta )
{
    struct _context_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six_t *_python_context = new _context_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_bases.shareWith( closure_bases );
    _python_context->closure_meta.shareWith( closure_meta );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six,
        dparse_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six,
        const_str_plain___new__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_63188ded245e65556f13664d6b58ef2c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        _python_context,
        _context_function_1___new___of_class_1_metaclass_of_function_44_with_metaclass_of_module_six_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_next_of_class_23_Iterator_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_next_of_class_23_Iterator_of_module_six,
        dparse_function_1_next_of_class_23_Iterator_of_module_six,
        const_str_plain_next,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_724ea8528d59afb71e1951d53af4bc77,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_wrapper_of_function_43_wraps_of_module_six( PyObjectSharedLocalVariable &closure_wrapped )
{
    struct _context_function_1_wrapper_of_function_43_wraps_of_module_six_t *_python_context = new _context_function_1_wrapper_of_function_43_wraps_of_module_six_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_wrapped.shareWith( closure_wrapped );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_wrapper_of_function_43_wraps_of_module_six,
        dparse_function_1_wrapper_of_function_43_wraps_of_module_six,
        const_str_plain_wrapper,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_bec5259678929798b4b9af51ef00a532,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        _python_context,
        _context_function_1_wrapper_of_function_43_wraps_of_module_six_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_wrapper_of_function_45_add_metaclass_of_module_six( PyObjectSharedLocalVariable &closure_metaclass )
{
    struct _context_function_1_wrapper_of_function_45_add_metaclass_of_module_six_t *_python_context = new _context_function_1_wrapper_of_function_45_add_metaclass_of_module_six_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_metaclass.shareWith( closure_metaclass );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_wrapper_of_function_45_add_metaclass_of_module_six,
        dparse_function_1_wrapper_of_function_45_add_metaclass_of_module_six,
        const_str_plain_wrapper,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_9fc76ef148a066e729ceae100296dec3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        _python_context,
        _context_function_1_wrapper_of_function_45_add_metaclass_of_module_six_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_write_of_function_42_print__of_module_six( PyObjectSharedLocalVariable &closure_fp )
{
    struct _context_function_1_write_of_function_42_print__of_module_six_t *_python_context = new _context_function_1_write_of_function_42_print__of_module_six_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_fp.shareWith( closure_fp );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_write_of_function_42_print__of_module_six,
        dparse_function_1_write_of_function_42_print__of_module_six,
        const_str_plain_write,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ccbc583da05330ca5ba4871fe43b1871,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        _python_context,
        _context_function_1_write_of_function_42_print__of_module_six_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_20_get_unbound_function_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_20_get_unbound_function_of_module_six,
        dparse_function_20_get_unbound_function_of_module_six,
        const_str_plain_get_unbound_function,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_66f73dcdccdb2296e46ba4a532c09f4a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_21_get_unbound_function_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_21_get_unbound_function_of_module_six,
        dparse_function_21_get_unbound_function_of_module_six,
        const_str_plain_get_unbound_function,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_365bd4af060510b22bb53b7002f0925a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_22_create_bound_method_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_22_create_bound_method_of_module_six,
        dparse_function_22_create_bound_method_of_module_six,
        const_str_plain_create_bound_method,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e3d6f6390e4d665f0a6a74af1f6f2957,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_24_iterkeys_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_24_iterkeys_of_module_six,
        dparse_function_24_iterkeys_of_module_six,
        const_str_plain_iterkeys,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5aec169baf140e5e67fc6e4a1deed190,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_25_itervalues_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_25_itervalues_of_module_six,
        dparse_function_25_itervalues_of_module_six,
        const_str_plain_itervalues,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_42850964ddf545b1a58c7506e5cebdac,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_26_iteritems_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_26_iteritems_of_module_six,
        dparse_function_26_iteritems_of_module_six,
        const_str_plain_iteritems,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_20df9030ad0b76d1e0aa6774c687e3f1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_27_iterlists_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_27_iterlists_of_module_six,
        dparse_function_27_iterlists_of_module_six,
        const_str_plain_iterlists,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a80fd244ff47dd3f7f023127a3432b73,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_28_iterkeys_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_28_iterkeys_of_module_six,
        dparse_function_28_iterkeys_of_module_six,
        const_str_plain_iterkeys,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_05dbe5617e08f37dea9f508cc8b40fa2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_29_itervalues_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_29_itervalues_of_module_six,
        dparse_function_29_itervalues_of_module_six,
        const_str_plain_itervalues,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_bdb0cd9c963b46f2381ca99090ed327f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___dir___of_class_6__LazyModule_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___dir___of_class_6__LazyModule_of_module_six,
        dparse_function_2___dir___of_class_6__LazyModule_of_module_six,
        const_str_plain___dir__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_eb48a6d187c6aa49472b80fef6037728,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___get___of_class_4__LazyDescr_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___get___of_class_4__LazyDescr_of_module_six,
        dparse_function_2___get___of_class_4__LazyDescr_of_module_six,
        const_str_plain___get__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_97e7e9cd09178d68f5bf8aba59b5d01f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2__add_doc_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2__add_doc_of_module_six,
        dparse_function_2__add_doc_of_module_six,
        const_str_plain__add_doc,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4f9c70c3d5ebe1cdf1adf9975993f3c8,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_388526ed03a5066ea274085dc1936198
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2__add_module_of_class_8__SixMetaPathImporter_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2__add_module_of_class_8__SixMetaPathImporter_of_module_six,
        dparse_function_2__add_module_of_class_8__SixMetaPathImporter_of_module_six,
        const_str_plain__add_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d3a5b027709f8ebe3107d2bc6c797689,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2__resolve_of_class_5_MovedModule_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2__resolve_of_class_5_MovedModule_of_module_six,
        dparse_function_2__resolve_of_class_5_MovedModule_of_module_six,
        const_str_plain__resolve,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_35090bdacdef58177b762b7963f89533,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2__resolve_of_class_7_MovedAttribute_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2__resolve_of_class_7_MovedAttribute_of_module_six,
        dparse_function_2__resolve_of_class_7_MovedAttribute_of_module_six,
        const_str_plain__resolve,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3b3d29c43e4868428a5616acf9eea1de,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_30_iteritems_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_30_iteritems_of_module_six,
        dparse_function_30_iteritems_of_module_six,
        const_str_plain_iteritems,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_12eac6454bffb914e5f31334e354e63a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_31_iterlists_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_31_iterlists_of_module_six,
        dparse_function_31_iterlists_of_module_six,
        const_str_plain_iterlists,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_57c253de464c27f3728c34794fef8ee1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_32_b_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_32_b_of_module_six,
        dparse_function_32_b_of_module_six,
        const_str_plain_b,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8f72678f141dbff45509fe738bf2b749,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_33_u_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_33_u_of_module_six,
        dparse_function_33_u_of_module_six,
        const_str_plain_u,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8987da6d9c95e92dd04fd14a2edf84e4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_34_int2byte_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_34_int2byte_of_module_six,
        dparse_function_34_int2byte_of_module_six,
        const_str_plain_int2byte,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8d7915ab36c0a403d765cbcb5f8579a6,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_35_b_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_35_b_of_module_six,
        dparse_function_35_b_of_module_six,
        const_str_plain_b,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_de2f6191f85532c0dbd27a265770ae67,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_36_u_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_36_u_of_module_six,
        dparse_function_36_u_of_module_six,
        const_str_plain_u,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d93bbc957f238f313a8213cc943d86e4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_37_byte2int_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_37_byte2int_of_module_six,
        dparse_function_37_byte2int_of_module_six,
        const_str_plain_byte2int,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ef8c02f1d44b4c3f22c6c12c08b956f6,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_38_indexbytes_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_38_indexbytes_of_module_six,
        dparse_function_38_indexbytes_of_module_six,
        const_str_plain_indexbytes,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a9398835c6d314847e88a1bad9f938bf,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_39_iterbytes_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_39_iterbytes_of_module_six,
        dparse_function_39_iterbytes_of_module_six,
        const_str_plain_iterbytes,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_672f440ed9036145688dd45067f8b896,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3___getattr___of_class_5_MovedModule_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3___getattr___of_class_5_MovedModule_of_module_six,
        dparse_function_3___getattr___of_class_5_MovedModule_of_module_six,
        const_str_plain___getattr__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_22ecf89932c1a1194a845983f09bba07,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3__get_module_of_class_8__SixMetaPathImporter_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3__get_module_of_class_8__SixMetaPathImporter_of_module_six,
        dparse_function_3__get_module_of_class_8__SixMetaPathImporter_of_module_six,
        const_str_plain__get_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_967df4f7bc00c42dd7fc949284be2885,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3__import_module_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3__import_module_of_module_six,
        dparse_function_3__import_module_of_module_six,
        const_str_plain__import_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_cd3f0b6b3a424e968bd6e590976e4ccf,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_e8957dc4008aac6c392cfc0c2f5141cb
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_40_reraise_of_module_six( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_40_reraise_of_module_six,
        dparse_function_40_reraise_of_module_six,
        const_str_plain_reraise,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_146f529ac3144a1927e808192533705c,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_41_exec__of_module_six( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_41_exec__of_module_six,
        dparse_function_41_exec__of_module_six,
        const_str_plain_exec_,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8398c9c8abd7744ed18b4d57111e6f39,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_bdc3e7b00657930f886f177b307c781c
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_42_print__of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_42_print__of_module_six,
        dparse_function_42_print__of_module_six,
        const_str_plain_print_,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3f2b9bdbe68b29a02806e7a6edf9095d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_f67fab5bcd00878ed60153fbbaf56263
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_43_wraps_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_43_wraps_of_module_six,
        dparse_function_43_wraps_of_module_six,
        const_str_plain_wraps,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_9a62f31827e6f592c132ce7d51be055e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_44_with_metaclass_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_44_with_metaclass_of_module_six,
        dparse_function_44_with_metaclass_of_module_six,
        const_str_plain_with_metaclass,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_16d64d79d6bb552b07f286b407477ace,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_e4ee13473f833011296770093fbcd4ad
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_45_add_metaclass_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_45_add_metaclass_of_module_six,
        dparse_function_45_add_metaclass_of_module_six,
        const_str_plain_add_metaclass,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ad7d5dde994839e5ac2a6203f5b79a25,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_bd1a35a2038bbe33c91f618ec098e210
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_find_module_of_class_8__SixMetaPathImporter_of_module_six( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_find_module_of_class_8__SixMetaPathImporter_of_module_six,
        dparse_function_4_find_module_of_class_8__SixMetaPathImporter_of_module_six,
        const_str_plain_find_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5b029a1d201cc8a9a3e84892457a65e7,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5___get_module_of_class_8__SixMetaPathImporter_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5___get_module_of_class_8__SixMetaPathImporter_of_module_six,
        dparse_function_5___get_module_of_class_8__SixMetaPathImporter_of_module_six,
        const_str_plain___get_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_578993c22e3d44e827f0e63f9bdd9abb,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_load_module_of_class_8__SixMetaPathImporter_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_load_module_of_class_8__SixMetaPathImporter_of_module_six,
        dparse_function_6_load_module_of_class_8__SixMetaPathImporter_of_module_six,
        const_str_plain_load_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_b77b2a93c330dc21560453b14fdbad02,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_is_package_of_class_8__SixMetaPathImporter_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_is_package_of_class_8__SixMetaPathImporter_of_module_six,
        dparse_function_7_is_package_of_class_8__SixMetaPathImporter_of_module_six,
        const_str_plain_is_package,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4488ea1fcc4224dea897cf84dac85bc9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_e6fd7101a265124cf45cc72b8bcf397f
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_get_code_of_class_8__SixMetaPathImporter_of_module_six(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_get_code_of_class_8__SixMetaPathImporter_of_module_six,
        dparse_function_8_get_code_of_class_8__SixMetaPathImporter_of_module_six,
        const_str_plain_get_code,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_815973a5b3f9d8606534d1b42959dd46,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_adedf1e45df37d82c8dbf3619925df24
    );

    return result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_six =
{
    PyModuleDef_HEAD_INIT,
    "six",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#define _MODULE_UNFREEZER 0

#if _MODULE_UNFREEZER

#include "nuitka/unfreezing.hpp"

// Table for lookup to find "frozen" modules or DLLs, i.e. the ones included in
// or along this binary.

static struct Nuitka_MetaPathBasedLoaderEntry meta_path_loader_entries[] =
{

    { NULL, NULL, 0 }
};

#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( six )
{

#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Packages can be imported recursively in deep executables.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_six );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    _initConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );
#if PYTHON_VERSION < 300
    initSlotCompare();
#endif

    patchBuiltinModule();
    patchTypeComparison();

#endif

#if _MODULE_UNFREEZER
    registerMetaPathBasedUnfreezer( meta_path_loader_entries );
#endif

    _initModuleConstants();
    _initModuleCodeObjects();

    // puts( "in initsix" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_six = Py_InitModule4(
        "six",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    module_six = PyModule_Create( &mdef_six );
#endif

    moduledict_six = (PyDictObject *)((PyModuleObject *)module_six)->md_dict;

    assertObject( module_six );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), const_str_plain_six, module_six );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( module_six );

    if ( PyDict_GetItem( module_dict, const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, const_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
#if _MODULE_UNFREEZER
    PyDict_SetItem( module_dict, const_str_plain___loader__, metapath_based_loader );
#else
    PyDict_SetItem( module_dict, const_str_plain___loader__, Py_None );
#endif
#endif

    // Temp variables if any
    PyObjectTempVariable tmp_class_creation_1__bases;
    PyObjectTempVariable tmp_class_creation_1__class_dict;
    PyObjectTempVariable tmp_class_creation_1__metaclass;
    PyObjectTempVariable tmp_class_creation_1__class;
    PyObjectTempVariable tmp_try_except_1__unhandled_indicator;
    PyObjectTempVariable tmp_class_creation_2__bases;
    PyObjectTempVariable tmp_class_creation_2__class_dict;
    PyObjectTempVariable tmp_class_creation_2__metaclass;
    PyObjectTempVariable tmp_class_creation_2__class;
    PyObjectTempVariable tmp_class_creation_3__bases;
    PyObjectTempVariable tmp_class_creation_3__class_dict;
    PyObjectTempVariable tmp_class_creation_3__metaclass;
    PyObjectTempVariable tmp_class_creation_3__class;
    PyObjectTempVariable tmp_class_creation_4__bases;
    PyObjectTempVariable tmp_class_creation_4__class_dict;
    PyObjectTempVariable tmp_class_creation_4__metaclass;
    PyObjectTempVariable tmp_class_creation_4__class;
    PyObjectTempVariable tmp_class_creation_5__bases;
    PyObjectTempVariable tmp_class_creation_5__class_dict;
    PyObjectTempVariable tmp_class_creation_5__metaclass;
    PyObjectTempVariable tmp_class_creation_5__class;
    PyObjectTempVariable tmp_class_creation_6__bases;
    PyObjectTempVariable tmp_class_creation_6__class_dict;
    PyObjectTempVariable tmp_class_creation_6__metaclass;
    PyObjectTempVariable tmp_class_creation_6__class;
    PyObjectTempVariable tmp_class_creation_7__bases;
    PyObjectTempVariable tmp_class_creation_7__class_dict;
    PyObjectTempVariable tmp_class_creation_7__metaclass;
    PyObjectTempVariable tmp_class_creation_7__class;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_class_creation_8__bases;
    PyObjectTempVariable tmp_class_creation_8__class_dict;
    PyObjectTempVariable tmp_class_creation_8__metaclass;
    PyObjectTempVariable tmp_class_creation_8__class;
    PyObjectTempVariable tmp_for_loop_2__for_iterator;
    PyObjectTempVariable tmp_for_loop_2__iter_value;
    PyObjectTempVariable tmp_class_creation_9__bases;
    PyObjectTempVariable tmp_class_creation_9__class_dict;
    PyObjectTempVariable tmp_class_creation_9__metaclass;
    PyObjectTempVariable tmp_class_creation_9__class;
    PyObjectTempVariable tmp_for_loop_3__for_iterator;
    PyObjectTempVariable tmp_for_loop_3__iter_value;
    PyObjectTempVariable tmp_class_creation_10__bases;
    PyObjectTempVariable tmp_class_creation_10__class_dict;
    PyObjectTempVariable tmp_class_creation_10__metaclass;
    PyObjectTempVariable tmp_class_creation_10__class;
    PyObjectTempVariable tmp_for_loop_4__for_iterator;
    PyObjectTempVariable tmp_for_loop_4__iter_value;
    PyObjectTempVariable tmp_class_creation_11__bases;
    PyObjectTempVariable tmp_class_creation_11__class_dict;
    PyObjectTempVariable tmp_class_creation_11__metaclass;
    PyObjectTempVariable tmp_class_creation_11__class;
    PyObjectTempVariable tmp_for_loop_5__for_iterator;
    PyObjectTempVariable tmp_for_loop_5__iter_value;
    PyObjectTempVariable tmp_class_creation_12__bases;
    PyObjectTempVariable tmp_class_creation_12__class_dict;
    PyObjectTempVariable tmp_class_creation_12__metaclass;
    PyObjectTempVariable tmp_class_creation_12__class;
    PyObjectTempVariable tmp_for_loop_6__for_iterator;
    PyObjectTempVariable tmp_for_loop_6__iter_value;
    PyObjectTempVariable tmp_class_creation_13__bases;
    PyObjectTempVariable tmp_class_creation_13__class_dict;
    PyObjectTempVariable tmp_class_creation_13__metaclass;
    PyObjectTempVariable tmp_class_creation_13__class;
    PyObjectTempVariable tmp_class_creation_14__bases;
    PyObjectTempVariable tmp_class_creation_14__class_dict;
    PyObjectTempVariable tmp_class_creation_14__metaclass;
    PyObjectTempVariable tmp_class_creation_14__class;
    PyObjectTempVariable tmp_assign_unpack_1__assign_source;
    PyObjectTempVariable tmp_for_loop_7__for_iterator;
    PyObjectTempVariable tmp_for_loop_7__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_and_1__value_1;
    PyObject *exception_type, *exception_value;
    PyTracebackObject *exception_tb;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_name_4;
    PyObject *tmp_assattr_name_5;
    PyObject *tmp_assattr_name_6;
    PyObject *tmp_assattr_name_7;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assattr_target_4;
    PyObject *tmp_assattr_target_5;
    PyObject *tmp_assattr_target_6;
    PyObject *tmp_assattr_target_7;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_assign_source_88;
    PyObject *tmp_assign_source_89;
    PyObject *tmp_assign_source_90;
    PyObject *tmp_assign_source_91;
    PyObject *tmp_assign_source_92;
    PyObject *tmp_assign_source_93;
    PyObject *tmp_assign_source_94;
    PyObject *tmp_assign_source_95;
    PyObject *tmp_assign_source_96;
    PyObject *tmp_assign_source_97;
    PyObject *tmp_assign_source_98;
    PyObject *tmp_assign_source_99;
    PyObject *tmp_assign_source_100;
    PyObject *tmp_assign_source_101;
    PyObject *tmp_assign_source_102;
    PyObject *tmp_assign_source_103;
    PyObject *tmp_assign_source_104;
    PyObject *tmp_assign_source_105;
    PyObject *tmp_assign_source_106;
    PyObject *tmp_assign_source_107;
    PyObject *tmp_assign_source_108;
    PyObject *tmp_assign_source_109;
    PyObject *tmp_assign_source_110;
    PyObject *tmp_assign_source_111;
    PyObject *tmp_assign_source_112;
    PyObject *tmp_assign_source_113;
    PyObject *tmp_assign_source_114;
    PyObject *tmp_assign_source_115;
    PyObject *tmp_assign_source_116;
    PyObject *tmp_assign_source_117;
    PyObject *tmp_assign_source_118;
    PyObject *tmp_assign_source_119;
    PyObject *tmp_assign_source_120;
    PyObject *tmp_assign_source_121;
    PyObject *tmp_assign_source_122;
    PyObject *tmp_assign_source_123;
    PyObject *tmp_assign_source_124;
    PyObject *tmp_assign_source_125;
    PyObject *tmp_assign_source_126;
    PyObject *tmp_assign_source_127;
    PyObject *tmp_assign_source_128;
    PyObject *tmp_assign_source_129;
    PyObject *tmp_assign_source_130;
    PyObject *tmp_assign_source_131;
    PyObject *tmp_assign_source_132;
    PyObject *tmp_assign_source_133;
    PyObject *tmp_assign_source_134;
    PyObject *tmp_assign_source_135;
    PyObject *tmp_assign_source_136;
    PyObject *tmp_assign_source_137;
    PyObject *tmp_assign_source_138;
    PyObject *tmp_assign_source_139;
    PyObject *tmp_assign_source_140;
    PyObject *tmp_assign_source_141;
    PyObject *tmp_assign_source_142;
    PyObject *tmp_assign_source_143;
    PyObject *tmp_assign_source_144;
    PyObject *tmp_assign_source_145;
    PyObject *tmp_assign_source_146;
    PyObject *tmp_assign_source_147;
    PyObject *tmp_assign_source_148;
    PyObject *tmp_assign_source_149;
    PyObject *tmp_assign_source_150;
    PyObject *tmp_assign_source_151;
    PyObject *tmp_assign_source_152;
    PyObject *tmp_assign_source_153;
    PyObject *tmp_assign_source_154;
    PyObject *tmp_assign_source_155;
    PyObject *tmp_assign_source_156;
    PyObject *tmp_assign_source_157;
    PyObject *tmp_assign_source_158;
    PyObject *tmp_assign_source_159;
    PyObject *tmp_assign_source_160;
    PyObject *tmp_assign_source_161;
    PyObject *tmp_assign_source_162;
    PyObject *tmp_assign_source_163;
    PyObject *tmp_assign_source_164;
    PyObject *tmp_assign_source_165;
    PyObject *tmp_assign_source_166;
    PyObject *tmp_assign_source_167;
    PyObject *tmp_assign_source_168;
    PyObject *tmp_assign_source_169;
    PyObject *tmp_assign_source_170;
    PyObject *tmp_assign_source_171;
    PyObject *tmp_assign_source_172;
    PyObject *tmp_assign_source_173;
    PyObject *tmp_assign_source_174;
    PyObject *tmp_assign_source_175;
    PyObject *tmp_assign_source_176;
    PyObject *tmp_assign_source_177;
    PyObject *tmp_assign_source_178;
    PyObject *tmp_assign_source_179;
    PyObject *tmp_assign_source_180;
    PyObject *tmp_assign_source_181;
    PyObject *tmp_assign_source_182;
    PyObject *tmp_assign_source_183;
    PyObject *tmp_assign_source_184;
    PyObject *tmp_assign_source_185;
    PyObject *tmp_assign_source_186;
    PyObject *tmp_assign_source_187;
    PyObject *tmp_assign_source_188;
    PyObject *tmp_assign_source_189;
    PyObject *tmp_assign_source_190;
    PyObject *tmp_assign_source_191;
    PyObject *tmp_assign_source_192;
    PyObject *tmp_assign_source_193;
    PyObject *tmp_assign_source_194;
    PyObject *tmp_assign_source_195;
    PyObject *tmp_assign_source_196;
    PyObject *tmp_assign_source_197;
    PyObject *tmp_assign_source_198;
    PyObject *tmp_assign_source_199;
    PyObject *tmp_assign_source_200;
    PyObject *tmp_assign_source_201;
    PyObject *tmp_assign_source_202;
    PyObject *tmp_assign_source_203;
    PyObject *tmp_assign_source_204;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    bool tmp_break_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_call_arg_element_14;
    PyObject *tmp_call_arg_element_15;
    PyObject *tmp_call_arg_element_16;
    PyObject *tmp_call_arg_element_17;
    PyObject *tmp_call_arg_element_18;
    PyObject *tmp_call_arg_element_19;
    PyObject *tmp_call_arg_element_20;
    PyObject *tmp_call_arg_element_21;
    PyObject *tmp_call_arg_element_22;
    PyObject *tmp_call_arg_element_23;
    PyObject *tmp_call_arg_element_24;
    PyObject *tmp_call_arg_element_25;
    PyObject *tmp_call_arg_element_26;
    PyObject *tmp_call_arg_element_27;
    PyObject *tmp_call_arg_element_28;
    PyObject *tmp_call_arg_element_29;
    PyObject *tmp_call_arg_element_30;
    PyObject *tmp_call_arg_element_31;
    PyObject *tmp_call_arg_element_32;
    PyObject *tmp_call_arg_element_33;
    PyObject *tmp_call_arg_element_34;
    PyObject *tmp_call_arg_element_35;
    PyObject *tmp_call_arg_element_36;
    PyObject *tmp_call_arg_element_37;
    PyObject *tmp_call_arg_element_38;
    PyObject *tmp_call_arg_element_39;
    PyObject *tmp_call_arg_element_40;
    PyObject *tmp_call_arg_element_41;
    PyObject *tmp_call_arg_element_42;
    PyObject *tmp_call_arg_element_43;
    PyObject *tmp_call_arg_element_44;
    PyObject *tmp_call_arg_element_45;
    PyObject *tmp_call_arg_element_46;
    PyObject *tmp_call_arg_element_47;
    PyObject *tmp_call_arg_element_48;
    PyObject *tmp_call_arg_element_49;
    PyObject *tmp_call_arg_element_50;
    PyObject *tmp_call_arg_element_51;
    PyObject *tmp_call_arg_element_52;
    PyObject *tmp_call_arg_element_53;
    PyObject *tmp_call_arg_element_54;
    PyObject *tmp_call_arg_element_55;
    PyObject *tmp_call_arg_element_56;
    PyObject *tmp_call_arg_element_57;
    PyObject *tmp_call_arg_element_58;
    PyObject *tmp_call_arg_element_59;
    PyObject *tmp_call_arg_element_60;
    PyObject *tmp_call_arg_element_61;
    PyObject *tmp_call_arg_element_62;
    PyObject *tmp_call_arg_element_63;
    PyObject *tmp_call_arg_element_64;
    PyObject *tmp_call_arg_element_65;
    PyObject *tmp_call_arg_element_66;
    PyObject *tmp_call_arg_element_67;
    PyObject *tmp_call_arg_element_68;
    PyObject *tmp_call_arg_element_69;
    PyObject *tmp_call_arg_element_70;
    PyObject *tmp_call_arg_element_71;
    PyObject *tmp_call_arg_element_72;
    PyObject *tmp_call_arg_element_73;
    PyObject *tmp_call_arg_element_74;
    PyObject *tmp_call_arg_element_75;
    PyObject *tmp_call_arg_element_76;
    PyObject *tmp_call_arg_element_77;
    PyObject *tmp_call_arg_element_78;
    PyObject *tmp_call_arg_element_79;
    PyObject *tmp_call_arg_element_80;
    PyObject *tmp_call_arg_element_81;
    PyObject *tmp_call_arg_element_82;
    PyObject *tmp_call_arg_element_83;
    PyObject *tmp_call_arg_element_84;
    PyObject *tmp_call_arg_element_85;
    PyObject *tmp_call_arg_element_86;
    PyObject *tmp_call_arg_element_87;
    PyObject *tmp_call_arg_element_88;
    PyObject *tmp_call_arg_element_89;
    PyObject *tmp_call_arg_element_90;
    PyObject *tmp_call_arg_element_91;
    PyObject *tmp_call_arg_element_92;
    PyObject *tmp_call_arg_element_93;
    PyObject *tmp_call_arg_element_94;
    PyObject *tmp_call_arg_element_95;
    PyObject *tmp_call_arg_element_96;
    PyObject *tmp_call_arg_element_97;
    PyObject *tmp_call_arg_element_98;
    PyObject *tmp_call_arg_element_99;
    PyObject *tmp_call_arg_element_100;
    PyObject *tmp_call_arg_element_101;
    PyObject *tmp_call_arg_element_102;
    PyObject *tmp_call_arg_element_103;
    PyObject *tmp_call_arg_element_104;
    PyObject *tmp_call_arg_element_105;
    PyObject *tmp_call_arg_element_106;
    PyObject *tmp_call_arg_element_107;
    PyObject *tmp_call_arg_element_108;
    PyObject *tmp_call_arg_element_109;
    PyObject *tmp_call_arg_element_110;
    PyObject *tmp_call_arg_element_111;
    PyObject *tmp_call_arg_element_112;
    PyObject *tmp_call_arg_element_113;
    PyObject *tmp_call_arg_element_114;
    PyObject *tmp_call_arg_element_115;
    PyObject *tmp_call_arg_element_116;
    PyObject *tmp_call_arg_element_117;
    PyObject *tmp_call_arg_element_118;
    PyObject *tmp_call_arg_element_119;
    PyObject *tmp_call_arg_element_120;
    PyObject *tmp_call_arg_element_121;
    PyObject *tmp_call_arg_element_122;
    PyObject *tmp_call_arg_element_123;
    PyObject *tmp_call_arg_element_124;
    PyObject *tmp_call_arg_element_125;
    PyObject *tmp_call_arg_element_126;
    PyObject *tmp_call_arg_element_127;
    PyObject *tmp_call_arg_element_128;
    PyObject *tmp_call_arg_element_129;
    PyObject *tmp_call_arg_element_130;
    PyObject *tmp_call_arg_element_131;
    PyObject *tmp_call_arg_element_132;
    PyObject *tmp_call_arg_element_133;
    PyObject *tmp_call_arg_element_134;
    PyObject *tmp_call_arg_element_135;
    PyObject *tmp_call_arg_element_136;
    PyObject *tmp_call_arg_element_137;
    PyObject *tmp_call_arg_element_138;
    PyObject *tmp_call_arg_element_139;
    PyObject *tmp_call_arg_element_140;
    PyObject *tmp_call_arg_element_141;
    PyObject *tmp_call_arg_element_142;
    PyObject *tmp_call_arg_element_143;
    PyObject *tmp_call_arg_element_144;
    PyObject *tmp_call_arg_element_145;
    PyObject *tmp_call_arg_element_146;
    PyObject *tmp_call_arg_element_147;
    PyObject *tmp_call_arg_element_148;
    PyObject *tmp_call_arg_element_149;
    PyObject *tmp_call_arg_element_150;
    PyObject *tmp_call_arg_element_151;
    PyObject *tmp_call_arg_element_152;
    PyObject *tmp_call_arg_element_153;
    PyObject *tmp_call_arg_element_154;
    PyObject *tmp_call_arg_element_155;
    PyObject *tmp_call_arg_element_156;
    PyObject *tmp_call_arg_element_157;
    PyObject *tmp_call_arg_element_158;
    PyObject *tmp_call_arg_element_159;
    PyObject *tmp_call_arg_element_160;
    PyObject *tmp_call_arg_element_161;
    PyObject *tmp_call_arg_element_162;
    PyObject *tmp_call_arg_element_163;
    PyObject *tmp_call_arg_element_164;
    PyObject *tmp_call_arg_element_165;
    PyObject *tmp_call_arg_element_166;
    PyObject *tmp_call_arg_element_167;
    PyObject *tmp_call_arg_element_168;
    PyObject *tmp_call_arg_element_169;
    PyObject *tmp_call_arg_element_170;
    PyObject *tmp_call_arg_element_171;
    PyObject *tmp_call_arg_element_172;
    PyObject *tmp_call_arg_element_173;
    PyObject *tmp_call_arg_element_174;
    PyObject *tmp_call_arg_element_175;
    PyObject *tmp_call_arg_element_176;
    PyObject *tmp_call_arg_element_177;
    PyObject *tmp_call_arg_element_178;
    PyObject *tmp_call_arg_element_179;
    PyObject *tmp_call_arg_element_180;
    PyObject *tmp_call_arg_element_181;
    PyObject *tmp_call_arg_element_182;
    PyObject *tmp_call_arg_element_183;
    PyObject *tmp_call_arg_element_184;
    PyObject *tmp_call_arg_element_185;
    PyObject *tmp_call_arg_element_186;
    PyObject *tmp_call_arg_element_187;
    PyObject *tmp_call_arg_element_188;
    PyObject *tmp_call_arg_element_189;
    PyObject *tmp_call_arg_element_190;
    PyObject *tmp_call_arg_element_191;
    PyObject *tmp_call_arg_element_192;
    PyObject *tmp_call_arg_element_193;
    PyObject *tmp_call_arg_element_194;
    PyObject *tmp_call_arg_element_195;
    PyObject *tmp_call_arg_element_196;
    PyObject *tmp_call_arg_element_197;
    PyObject *tmp_call_arg_element_198;
    PyObject *tmp_call_arg_element_199;
    PyObject *tmp_call_arg_element_200;
    PyObject *tmp_call_arg_element_201;
    PyObject *tmp_call_arg_element_202;
    PyObject *tmp_call_arg_element_203;
    PyObject *tmp_call_arg_element_204;
    PyObject *tmp_call_arg_element_205;
    PyObject *tmp_call_arg_element_206;
    PyObject *tmp_call_arg_element_207;
    PyObject *tmp_call_arg_element_208;
    PyObject *tmp_call_arg_element_209;
    PyObject *tmp_call_arg_element_210;
    PyObject *tmp_call_arg_element_211;
    PyObject *tmp_call_arg_element_212;
    PyObject *tmp_call_arg_element_213;
    PyObject *tmp_call_arg_element_214;
    PyObject *tmp_call_arg_element_215;
    PyObject *tmp_call_arg_element_216;
    PyObject *tmp_call_arg_element_217;
    PyObject *tmp_call_arg_element_218;
    PyObject *tmp_call_arg_element_219;
    PyObject *tmp_call_arg_element_220;
    PyObject *tmp_call_arg_element_221;
    PyObject *tmp_call_arg_element_222;
    PyObject *tmp_call_arg_element_223;
    PyObject *tmp_call_arg_element_224;
    PyObject *tmp_call_arg_element_225;
    PyObject *tmp_call_arg_element_226;
    PyObject *tmp_call_arg_element_227;
    PyObject *tmp_call_arg_element_228;
    PyObject *tmp_call_arg_element_229;
    PyObject *tmp_call_arg_element_230;
    PyObject *tmp_call_arg_element_231;
    PyObject *tmp_call_arg_element_232;
    PyObject *tmp_call_arg_element_233;
    PyObject *tmp_call_arg_element_234;
    PyObject *tmp_call_arg_element_235;
    PyObject *tmp_call_arg_element_236;
    PyObject *tmp_call_arg_element_237;
    PyObject *tmp_call_arg_element_238;
    PyObject *tmp_call_arg_element_239;
    PyObject *tmp_call_arg_element_240;
    PyObject *tmp_call_arg_element_241;
    PyObject *tmp_call_arg_element_242;
    PyObject *tmp_call_arg_element_243;
    PyObject *tmp_call_arg_element_244;
    PyObject *tmp_call_arg_element_245;
    PyObject *tmp_call_arg_element_246;
    PyObject *tmp_call_arg_element_247;
    PyObject *tmp_call_arg_element_248;
    PyObject *tmp_call_arg_element_249;
    PyObject *tmp_call_arg_element_250;
    PyObject *tmp_call_arg_element_251;
    PyObject *tmp_call_arg_element_252;
    PyObject *tmp_call_arg_element_253;
    PyObject *tmp_call_arg_element_254;
    PyObject *tmp_call_arg_element_255;
    PyObject *tmp_call_arg_element_256;
    PyObject *tmp_call_arg_element_257;
    PyObject *tmp_call_arg_element_258;
    PyObject *tmp_call_arg_element_259;
    PyObject *tmp_call_arg_element_260;
    PyObject *tmp_call_arg_element_261;
    PyObject *tmp_call_arg_element_262;
    PyObject *tmp_call_arg_element_263;
    PyObject *tmp_call_arg_element_264;
    PyObject *tmp_call_arg_element_265;
    PyObject *tmp_call_arg_element_266;
    PyObject *tmp_call_arg_element_267;
    PyObject *tmp_call_arg_element_268;
    PyObject *tmp_call_arg_element_269;
    PyObject *tmp_call_arg_element_270;
    PyObject *tmp_call_arg_element_271;
    PyObject *tmp_call_arg_element_272;
    PyObject *tmp_call_arg_element_273;
    PyObject *tmp_call_arg_element_274;
    PyObject *tmp_call_arg_element_275;
    PyObject *tmp_call_arg_element_276;
    PyObject *tmp_call_arg_element_277;
    PyObject *tmp_call_arg_element_278;
    PyObject *tmp_call_arg_element_279;
    PyObject *tmp_call_arg_element_280;
    PyObject *tmp_call_arg_element_281;
    PyObject *tmp_call_arg_element_282;
    PyObject *tmp_call_arg_element_283;
    PyObject *tmp_call_arg_element_284;
    PyObject *tmp_call_arg_element_285;
    PyObject *tmp_call_arg_element_286;
    PyObject *tmp_call_arg_element_287;
    PyObject *tmp_call_arg_element_288;
    PyObject *tmp_call_arg_element_289;
    PyObject *tmp_call_arg_element_290;
    PyObject *tmp_call_arg_element_291;
    PyObject *tmp_call_arg_element_292;
    PyObject *tmp_call_arg_element_293;
    PyObject *tmp_call_arg_element_294;
    PyObject *tmp_call_arg_element_295;
    PyObject *tmp_call_arg_element_296;
    PyObject *tmp_call_arg_element_297;
    PyObject *tmp_call_arg_element_298;
    PyObject *tmp_call_arg_element_299;
    PyObject *tmp_call_arg_element_300;
    PyObject *tmp_call_arg_element_301;
    PyObject *tmp_call_arg_element_302;
    PyObject *tmp_call_arg_element_303;
    PyObject *tmp_call_arg_element_304;
    PyObject *tmp_call_arg_element_305;
    PyObject *tmp_call_arg_element_306;
    PyObject *tmp_call_arg_element_307;
    PyObject *tmp_call_arg_element_308;
    PyObject *tmp_call_arg_element_309;
    PyObject *tmp_call_arg_element_310;
    PyObject *tmp_call_arg_element_311;
    PyObject *tmp_call_arg_element_312;
    PyObject *tmp_call_arg_element_313;
    PyObject *tmp_call_arg_element_314;
    PyObject *tmp_call_arg_element_315;
    PyObject *tmp_call_arg_element_316;
    PyObject *tmp_call_arg_element_317;
    PyObject *tmp_call_arg_element_318;
    PyObject *tmp_call_arg_element_319;
    PyObject *tmp_call_arg_element_320;
    PyObject *tmp_call_arg_element_321;
    PyObject *tmp_call_arg_element_322;
    PyObject *tmp_call_arg_element_323;
    PyObject *tmp_call_arg_element_324;
    PyObject *tmp_call_arg_element_325;
    PyObject *tmp_call_arg_element_326;
    PyObject *tmp_call_arg_element_327;
    PyObject *tmp_call_arg_element_328;
    PyObject *tmp_call_arg_element_329;
    PyObject *tmp_call_arg_element_330;
    PyObject *tmp_call_arg_element_331;
    PyObject *tmp_call_arg_element_332;
    PyObject *tmp_call_arg_element_333;
    PyObject *tmp_call_arg_element_334;
    PyObject *tmp_call_arg_element_335;
    PyObject *tmp_call_arg_element_336;
    PyObject *tmp_call_arg_element_337;
    PyObject *tmp_call_arg_element_338;
    PyObject *tmp_call_arg_element_339;
    PyObject *tmp_call_arg_element_340;
    PyObject *tmp_call_arg_element_341;
    PyObject *tmp_call_arg_element_342;
    PyObject *tmp_call_arg_element_343;
    PyObject *tmp_call_arg_element_344;
    PyObject *tmp_call_arg_element_345;
    PyObject *tmp_call_arg_element_346;
    PyObject *tmp_call_arg_element_347;
    PyObject *tmp_call_arg_element_348;
    PyObject *tmp_call_arg_element_349;
    PyObject *tmp_call_arg_element_350;
    PyObject *tmp_call_arg_element_351;
    PyObject *tmp_call_arg_element_352;
    PyObject *tmp_call_arg_element_353;
    PyObject *tmp_call_arg_element_354;
    PyObject *tmp_call_arg_element_355;
    PyObject *tmp_call_arg_element_356;
    PyObject *tmp_call_arg_element_357;
    PyObject *tmp_call_arg_element_358;
    PyObject *tmp_call_arg_element_359;
    PyObject *tmp_call_arg_element_360;
    PyObject *tmp_call_arg_element_361;
    PyObject *tmp_call_arg_element_362;
    PyObject *tmp_call_arg_element_363;
    PyObject *tmp_call_arg_element_364;
    PyObject *tmp_call_arg_element_365;
    PyObject *tmp_call_arg_element_366;
    PyObject *tmp_call_arg_element_367;
    PyObject *tmp_call_arg_element_368;
    PyObject *tmp_call_arg_element_369;
    PyObject *tmp_call_arg_element_370;
    PyObject *tmp_call_arg_element_371;
    PyObject *tmp_call_arg_element_372;
    PyObject *tmp_call_arg_element_373;
    PyObject *tmp_call_arg_element_374;
    PyObject *tmp_call_arg_element_375;
    PyObject *tmp_call_arg_element_376;
    PyObject *tmp_call_arg_element_377;
    PyObject *tmp_call_arg_element_378;
    PyObject *tmp_call_arg_element_379;
    PyObject *tmp_call_arg_element_380;
    PyObject *tmp_call_arg_element_381;
    PyObject *tmp_call_arg_element_382;
    PyObject *tmp_call_arg_element_383;
    PyObject *tmp_call_arg_element_384;
    PyObject *tmp_call_arg_element_385;
    PyObject *tmp_call_arg_element_386;
    PyObject *tmp_call_arg_element_387;
    PyObject *tmp_call_arg_element_388;
    PyObject *tmp_call_arg_element_389;
    PyObject *tmp_call_arg_element_390;
    PyObject *tmp_call_arg_element_391;
    PyObject *tmp_call_arg_element_392;
    PyObject *tmp_call_arg_element_393;
    PyObject *tmp_call_arg_element_394;
    PyObject *tmp_call_arg_element_395;
    PyObject *tmp_call_arg_element_396;
    PyObject *tmp_call_arg_element_397;
    PyObject *tmp_call_arg_element_398;
    PyObject *tmp_call_arg_element_399;
    PyObject *tmp_call_arg_element_400;
    PyObject *tmp_call_arg_element_401;
    PyObject *tmp_call_arg_element_402;
    PyObject *tmp_call_arg_element_403;
    PyObject *tmp_call_arg_element_404;
    PyObject *tmp_call_arg_element_405;
    PyObject *tmp_call_arg_element_406;
    PyObject *tmp_call_arg_element_407;
    PyObject *tmp_call_arg_element_408;
    PyObject *tmp_call_arg_element_409;
    PyObject *tmp_call_arg_element_410;
    PyObject *tmp_call_arg_element_411;
    PyObject *tmp_call_arg_element_412;
    PyObject *tmp_call_arg_element_413;
    PyObject *tmp_call_arg_element_414;
    PyObject *tmp_call_arg_element_415;
    PyObject *tmp_call_arg_element_416;
    PyObject *tmp_call_arg_element_417;
    PyObject *tmp_call_arg_element_418;
    PyObject *tmp_call_arg_element_419;
    PyObject *tmp_call_arg_element_420;
    PyObject *tmp_call_arg_element_421;
    PyObject *tmp_call_arg_element_422;
    PyObject *tmp_call_arg_element_423;
    PyObject *tmp_call_arg_element_424;
    PyObject *tmp_call_arg_element_425;
    PyObject *tmp_call_arg_element_426;
    PyObject *tmp_call_arg_element_427;
    PyObject *tmp_call_arg_element_428;
    PyObject *tmp_call_arg_element_429;
    PyObject *tmp_call_arg_element_430;
    PyObject *tmp_call_arg_element_431;
    PyObject *tmp_call_arg_element_432;
    PyObject *tmp_call_arg_element_433;
    PyObject *tmp_call_arg_element_434;
    PyObject *tmp_call_arg_element_435;
    PyObject *tmp_call_arg_element_436;
    PyObject *tmp_call_arg_element_437;
    PyObject *tmp_call_arg_element_438;
    PyObject *tmp_call_arg_element_439;
    PyObject *tmp_call_arg_element_440;
    PyObject *tmp_call_arg_element_441;
    PyObject *tmp_call_arg_element_442;
    PyObject *tmp_call_arg_element_443;
    PyObject *tmp_call_arg_element_444;
    PyObject *tmp_call_arg_element_445;
    PyObject *tmp_call_arg_element_446;
    PyObject *tmp_call_arg_element_447;
    PyObject *tmp_call_arg_element_448;
    PyObject *tmp_call_arg_element_449;
    PyObject *tmp_call_arg_element_450;
    PyObject *tmp_call_arg_element_451;
    PyObject *tmp_call_arg_element_452;
    PyObject *tmp_call_arg_element_453;
    PyObject *tmp_call_arg_element_454;
    PyObject *tmp_call_arg_element_455;
    PyObject *tmp_call_arg_element_456;
    PyObject *tmp_call_arg_element_457;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    PyObject *tmp_called_11;
    PyObject *tmp_called_12;
    PyObject *tmp_called_13;
    PyObject *tmp_called_14;
    PyObject *tmp_called_15;
    PyObject *tmp_called_16;
    PyObject *tmp_called_17;
    PyObject *tmp_called_18;
    PyObject *tmp_called_19;
    PyObject *tmp_called_20;
    PyObject *tmp_called_21;
    PyObject *tmp_called_22;
    PyObject *tmp_called_23;
    PyObject *tmp_called_24;
    PyObject *tmp_called_25;
    PyObject *tmp_called_26;
    PyObject *tmp_called_27;
    PyObject *tmp_called_28;
    PyObject *tmp_called_29;
    PyObject *tmp_called_30;
    PyObject *tmp_called_31;
    PyObject *tmp_called_32;
    PyObject *tmp_called_33;
    PyObject *tmp_called_34;
    PyObject *tmp_called_35;
    PyObject *tmp_called_36;
    PyObject *tmp_called_37;
    PyObject *tmp_called_38;
    PyObject *tmp_called_39;
    PyObject *tmp_called_40;
    PyObject *tmp_called_41;
    PyObject *tmp_called_42;
    PyObject *tmp_called_43;
    PyObject *tmp_called_44;
    PyObject *tmp_called_45;
    PyObject *tmp_called_46;
    PyObject *tmp_called_47;
    PyObject *tmp_called_48;
    PyObject *tmp_called_49;
    PyObject *tmp_called_50;
    PyObject *tmp_called_51;
    PyObject *tmp_called_52;
    PyObject *tmp_called_53;
    PyObject *tmp_called_54;
    PyObject *tmp_called_55;
    PyObject *tmp_called_56;
    PyObject *tmp_called_57;
    PyObject *tmp_called_58;
    PyObject *tmp_called_59;
    PyObject *tmp_called_60;
    PyObject *tmp_called_61;
    PyObject *tmp_called_62;
    PyObject *tmp_called_63;
    PyObject *tmp_called_64;
    PyObject *tmp_called_65;
    PyObject *tmp_called_66;
    PyObject *tmp_called_67;
    PyObject *tmp_called_68;
    PyObject *tmp_called_69;
    PyObject *tmp_called_70;
    PyObject *tmp_called_71;
    PyObject *tmp_called_72;
    PyObject *tmp_called_73;
    PyObject *tmp_called_74;
    PyObject *tmp_called_75;
    PyObject *tmp_called_76;
    PyObject *tmp_called_77;
    PyObject *tmp_called_78;
    PyObject *tmp_called_79;
    PyObject *tmp_called_80;
    PyObject *tmp_called_81;
    PyObject *tmp_called_82;
    PyObject *tmp_called_83;
    PyObject *tmp_called_84;
    PyObject *tmp_called_85;
    PyObject *tmp_called_86;
    PyObject *tmp_called_87;
    PyObject *tmp_called_88;
    PyObject *tmp_called_89;
    PyObject *tmp_called_90;
    PyObject *tmp_called_91;
    PyObject *tmp_called_92;
    PyObject *tmp_called_93;
    PyObject *tmp_called_94;
    PyObject *tmp_called_95;
    PyObject *tmp_called_96;
    PyObject *tmp_called_97;
    PyObject *tmp_called_98;
    PyObject *tmp_called_99;
    PyObject *tmp_called_100;
    PyObject *tmp_called_101;
    PyObject *tmp_called_102;
    PyObject *tmp_called_103;
    PyObject *tmp_called_104;
    PyObject *tmp_called_105;
    PyObject *tmp_called_106;
    PyObject *tmp_called_107;
    PyObject *tmp_called_108;
    PyObject *tmp_called_109;
    PyObject *tmp_called_110;
    PyObject *tmp_called_111;
    PyObject *tmp_called_112;
    PyObject *tmp_called_113;
    PyObject *tmp_called_114;
    PyObject *tmp_called_115;
    PyObject *tmp_called_116;
    PyObject *tmp_called_117;
    PyObject *tmp_called_118;
    PyObject *tmp_called_119;
    PyObject *tmp_called_120;
    PyObject *tmp_called_121;
    PyObject *tmp_called_122;
    PyObject *tmp_called_123;
    PyObject *tmp_called_124;
    PyObject *tmp_called_125;
    PyObject *tmp_called_126;
    PyObject *tmp_called_127;
    PyObject *tmp_called_128;
    PyObject *tmp_called_129;
    PyObject *tmp_called_130;
    PyObject *tmp_called_131;
    PyObject *tmp_called_132;
    PyObject *tmp_called_133;
    PyObject *tmp_called_134;
    PyObject *tmp_called_135;
    PyObject *tmp_called_136;
    PyObject *tmp_called_137;
    PyObject *tmp_called_138;
    PyObject *tmp_called_139;
    PyObject *tmp_called_140;
    PyObject *tmp_called_141;
    PyObject *tmp_called_142;
    PyObject *tmp_called_143;
    PyObject *tmp_called_144;
    PyObject *tmp_called_145;
    PyObject *tmp_called_146;
    PyObject *tmp_called_147;
    PyObject *tmp_called_148;
    PyObject *tmp_called_149;
    PyObject *tmp_called_150;
    PyObject *tmp_called_151;
    PyObject *tmp_called_152;
    PyObject *tmp_called_153;
    PyObject *tmp_called_154;
    PyObject *tmp_called_155;
    PyObject *tmp_called_156;
    PyObject *tmp_called_157;
    PyObject *tmp_called_158;
    PyObject *tmp_called_159;
    PyObject *tmp_called_160;
    PyObject *tmp_called_161;
    PyObject *tmp_called_162;
    PyObject *tmp_called_163;
    PyObject *tmp_called_164;
    PyObject *tmp_called_165;
    PyObject *tmp_called_166;
    PyObject *tmp_called_167;
    PyObject *tmp_class_bases_1;
    PyObject *tmp_class_bases_2;
    PyObject *tmp_class_bases_3;
    PyObject *tmp_class_bases_4;
    PyObject *tmp_class_bases_5;
    PyObject *tmp_class_bases_6;
    PyObject *tmp_class_bases_7;
    PyObject *tmp_class_bases_8;
    PyObject *tmp_class_bases_9;
    PyObject *tmp_class_bases_10;
    PyObject *tmp_class_bases_11;
    PyObject *tmp_class_bases_12;
    PyObject *tmp_class_bases_13;
    PyObject *tmp_class_bases_14;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    int tmp_cmp_In_7;
    int tmp_cmp_In_8;
    int tmp_cmp_In_9;
    int tmp_cmp_In_10;
    int tmp_cmp_In_11;
    int tmp_cmp_In_12;
    int tmp_cmp_In_13;
    int tmp_cmp_In_14;
    int tmp_cmp_Lt_1;
    int tmp_cmp_LtE_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_left_14;
    PyObject *tmp_compare_left_15;
    PyObject *tmp_compare_left_16;
    PyObject *tmp_compare_left_17;
    PyObject *tmp_compare_left_18;
    PyObject *tmp_compare_left_19;
    PyObject *tmp_compare_left_20;
    PyObject *tmp_compare_left_21;
    PyObject *tmp_compare_left_22;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_compare_right_14;
    PyObject *tmp_compare_right_15;
    PyObject *tmp_compare_right_16;
    PyObject *tmp_compare_right_17;
    PyObject *tmp_compare_right_18;
    PyObject *tmp_compare_right_19;
    PyObject *tmp_compare_right_20;
    PyObject *tmp_compare_right_21;
    PyObject *tmp_compare_right_22;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_defaults_1;
    PyObject *tmp_defaults_2;
    PyObject *tmp_delsubscr_subscript_1;
    PyObject *tmp_delsubscr_target_1;
    PyObject *tmp_dget_dict_1;
    PyObject *tmp_dget_dict_2;
    PyObject *tmp_dget_dict_3;
    PyObject *tmp_dget_dict_4;
    PyObject *tmp_dget_dict_5;
    PyObject *tmp_dget_dict_6;
    PyObject *tmp_dget_dict_7;
    PyObject *tmp_dget_dict_8;
    PyObject *tmp_dget_dict_9;
    PyObject *tmp_dget_dict_10;
    PyObject *tmp_dget_dict_11;
    PyObject *tmp_dget_dict_12;
    PyObject *tmp_dget_dict_13;
    PyObject *tmp_dget_dict_14;
    PyObject *tmp_dget_key_1;
    PyObject *tmp_dget_key_2;
    PyObject *tmp_dget_key_3;
    PyObject *tmp_dget_key_4;
    PyObject *tmp_dget_key_5;
    PyObject *tmp_dget_key_6;
    PyObject *tmp_dget_key_7;
    PyObject *tmp_dget_key_8;
    PyObject *tmp_dget_key_9;
    PyObject *tmp_dget_key_10;
    PyObject *tmp_dget_key_11;
    PyObject *tmp_dget_key_12;
    PyObject *tmp_dget_key_13;
    PyObject *tmp_dget_key_14;
    int tmp_exc_match_exception_match_1;
    int tmp_exc_match_exception_match_2;
    int tmp_exc_match_exception_match_3;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_attr_2;
    PyObject *tmp_getattr_default_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_getattr_target_2;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_globals_4;
    PyObject *tmp_import_globals_5;
    PyObject *tmp_import_globals_6;
    bool tmp_is_1;
    bool tmp_is_2;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    bool tmp_isnot_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iter_arg_7;
    PyObject *tmp_iter_arg_8;
    PyObject *tmp_iterator_attempt_1;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_list_element_2;
    PyObject *tmp_list_element_3;
    PyObject *tmp_list_element_4;
    PyObject *tmp_list_element_5;
    PyObject *tmp_list_element_6;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_next_source_6;
    PyObject *tmp_next_source_7;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_setattr_attr_1;
    PyObject *tmp_setattr_attr_2;
    PyObject *tmp_setattr_attr_3;
    PyObject *tmp_setattr_attr_4;
    PyObject *tmp_setattr_attr_5;
    PyObject *tmp_setattr_attr_6;
    PyObject *tmp_setattr_target_1;
    PyObject *tmp_setattr_target_2;
    PyObject *tmp_setattr_target_3;
    PyObject *tmp_setattr_target_4;
    PyObject *tmp_setattr_target_5;
    PyObject *tmp_setattr_target_6;
    PyObject *tmp_setattr_value_1;
    PyObject *tmp_setattr_value_2;
    PyObject *tmp_setattr_value_3;
    PyObject *tmp_setattr_value_4;
    PyObject *tmp_setattr_value_5;
    PyObject *tmp_setattr_value_6;
    Py_ssize_t tmp_slice_index_upper_1;
    PyObject *tmp_slice_source_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_source_name_28;
    PyObject *tmp_source_name_29;
    PyObject *tmp_source_name_30;
    PyObject *tmp_source_name_31;
    PyObject *tmp_source_name_32;
    PyObject *tmp_source_name_33;
    PyObject *tmp_source_name_34;
    PyObject *tmp_source_name_35;
    PyObject *tmp_source_name_36;
    PyObject *tmp_source_name_37;
    PyObject *tmp_source_name_38;
    PyObject *tmp_source_name_39;
    PyObject *tmp_source_name_40;
    PyObject *tmp_source_name_41;
    PyObject *tmp_source_name_42;
    PyObject *tmp_source_name_43;
    PyObject *tmp_source_name_44;
    PyObject *tmp_source_name_45;
    PyObject *tmp_source_name_46;
    PyObject *tmp_source_name_47;
    PyObject *tmp_source_name_48;
    PyObject *tmp_source_name_49;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_subscript_2;
    PyObject *tmp_subscr_subscript_3;
    PyObject *tmp_subscr_target_1;
    PyObject *tmp_subscr_target_2;
    PyObject *tmp_subscr_target_3;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    int tmp_tried_lineno_4;
    int tmp_tried_lineno_5;
    int tmp_tried_lineno_6;
    int tmp_tried_lineno_7;
    int tmp_tried_lineno_8;
    int tmp_tried_lineno_9;
    int tmp_tried_lineno_10;
    int tmp_tried_lineno_11;
    int tmp_tried_lineno_12;
    int tmp_tried_lineno_13;
    int tmp_tried_lineno_14;
    int tmp_tried_lineno_15;
    int tmp_tried_lineno_16;
    int tmp_tried_lineno_17;
    int tmp_tried_lineno_18;
    int tmp_tried_lineno_19;
    int tmp_tried_lineno_20;
    int tmp_tried_lineno_21;
    int tmp_tried_lineno_22;
    int tmp_tried_lineno_23;
    int tmp_tried_lineno_24;
    int tmp_tried_lineno_25;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_tuple_element_8;
    PyObject *tmp_tuple_element_9;
    PyObject *tmp_tuple_element_10;
    PyObject *tmp_tuple_element_11;
    PyObject *tmp_tuple_element_12;
    PyObject *tmp_tuple_element_13;
    PyObject *tmp_tuple_element_14;
    PyObject *tmp_tuple_element_15;
    PyObject *tmp_tuple_element_16;
    PyObject *tmp_tuple_element_17;
    PyObject *tmp_tuple_element_18;
    PyObject *tmp_tuple_element_19;
    PyObject *tmp_tuple_element_20;
    PyObject *tmp_type_arg_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;

    // Module code.
    tmp_assign_source_1 = const_str_digest_04a2a81118bfe6a8bf82def427eb725e;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    tmp_assign_source_2 = const_str_digest_d4f8b778671d16d0a1e087f63714304b;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    // Frame without reuse.
    PyFrameObject *frame_module = MAKE_FRAME( codeobj_9992056e9e1813476547acb6722fe2f1, module_six );

    // Push the new frame as the currently active one, and we should be exlusively
    // owning it.
    pushFrameStack( frame_module );
    assert( Py_REFCNT( frame_module ) == 1 );

#if PYTHON_VERSION >= 340
    frame_module->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_six)->md_dict;
    frame_module->f_lineno = 23;
    tmp_assign_source_3 = IMPORT_MODULE( const_str_plain_functools, tmp_import_globals_1, tmp_import_globals_1, Py_None, const_int_neg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 23;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_functools, tmp_assign_source_3 );
    tmp_import_globals_2 = ((PyModuleObject *)module_six)->md_dict;
    frame_module->f_lineno = 24;
    tmp_assign_source_4 = IMPORT_MODULE( const_str_plain_operator, tmp_import_globals_2, tmp_import_globals_2, Py_None, const_int_neg_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 24;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator, tmp_assign_source_4 );
    tmp_import_globals_3 = ((PyModuleObject *)module_six)->md_dict;
    frame_module->f_lineno = 25;
    tmp_assign_source_5 = IMPORT_MODULE( const_str_plain_sys, tmp_import_globals_3, tmp_import_globals_3, Py_None, const_int_neg_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 25;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys, tmp_assign_source_5 );
    tmp_import_globals_4 = ((PyModuleObject *)module_six)->md_dict;
    frame_module->f_lineno = 26;
    tmp_assign_source_6 = IMPORT_MODULE( const_str_plain_types, tmp_import_globals_4, tmp_import_globals_4, Py_None, const_int_neg_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 26;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_types, tmp_assign_source_6 );
    tmp_assign_source_7 = const_str_digest_97b62ec9140102505875d3024d9d1138;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___author__, tmp_assign_source_7 );
    tmp_assign_source_8 = const_str_digest_badec679d45bb7fa1a1c2725600ec0d4;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___version__, tmp_assign_source_8 );
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 33;
        goto frame_exception_exit_1;
    }

    tmp_subscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_version_info );
    if ( tmp_subscr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 33;
        goto frame_exception_exit_1;
    }
    tmp_subscr_subscript_1 = const_int_0;
    tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    Py_DECREF( tmp_subscr_target_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 33;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_1 = const_int_pos_2;
    tmp_assign_source_9 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 33;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY2, tmp_assign_source_9 );
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 34;
        goto frame_exception_exit_1;
    }

    tmp_subscr_target_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_version_info );
    if ( tmp_subscr_target_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 34;
        goto frame_exception_exit_1;
    }
    tmp_subscr_subscript_2 = const_int_0;
    tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT( tmp_subscr_target_2, tmp_subscr_subscript_2 );
    Py_DECREF( tmp_subscr_target_2 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 34;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_2 = const_int_pos_3;
    tmp_assign_source_10 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 34;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3, tmp_assign_source_10 );
    tmp_cond_value_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_1 == NULL ))
    {
        tmp_cond_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 306445 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 36;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 36;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_assign_source_11 = PyTuple_New( 1 );
    tmp_tuple_element_1 = LOOKUP_BUILTIN( const_str_plain_str );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_11 );

        frame_module->f_lineno = 37;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assign_source_11, 0, tmp_tuple_element_1 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_string_types, tmp_assign_source_11 );
    tmp_assign_source_12 = PyTuple_New( 1 );
    tmp_tuple_element_2 = LOOKUP_BUILTIN( const_str_plain_int );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_12 );

        frame_module->f_lineno = 38;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_assign_source_12, 0, tmp_tuple_element_2 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_integer_types, tmp_assign_source_12 );
    tmp_assign_source_13 = PyTuple_New( 1 );
    tmp_tuple_element_3 = LOOKUP_BUILTIN( const_str_plain_type );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_13 );

        frame_module->f_lineno = 39;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_assign_source_13, 0, tmp_tuple_element_3 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_class_types, tmp_assign_source_13 );
    tmp_assign_source_14 = LOOKUP_BUILTIN( const_str_plain_str );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 40;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_text_type, tmp_assign_source_14 );
    tmp_assign_source_15 = LOOKUP_BUILTIN( const_str_plain_bytes );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 41;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_binary_type, tmp_assign_source_15 );
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 43;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_16 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_maxsize );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 43;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_MAXSIZE, tmp_assign_source_16 );
    goto branch_end_1;
    branch_no_1:;
    tmp_assign_source_17 = PyTuple_New( 1 );
    tmp_tuple_element_4 = LOOKUP_BUILTIN( const_str_plain_basestring );
    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_17 );

        frame_module->f_lineno = 45;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_assign_source_17, 0, tmp_tuple_element_4 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_string_types, tmp_assign_source_17 );
    tmp_assign_source_18 = PyTuple_New( 2 );
    tmp_tuple_element_5 = LOOKUP_BUILTIN( const_str_plain_int );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_18 );

        frame_module->f_lineno = 46;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_assign_source_18, 0, tmp_tuple_element_5 );
    tmp_tuple_element_5 = LOOKUP_BUILTIN( const_str_plain_long );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_18 );

        frame_module->f_lineno = 46;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_assign_source_18, 1, tmp_tuple_element_5 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_integer_types, tmp_assign_source_18 );
    tmp_assign_source_19 = PyTuple_New( 2 );
    tmp_tuple_element_6 = LOOKUP_BUILTIN( const_str_plain_type );
    if ( tmp_tuple_element_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_19 );

        frame_module->f_lineno = 47;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_assign_source_19, 0, tmp_tuple_element_6 );
    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_4 == NULL )
    {
        Py_DECREF( tmp_assign_source_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25256 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 47;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_6 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_ClassType );
    if ( tmp_tuple_element_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_19 );

        frame_module->f_lineno = 47;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_assign_source_19, 1, tmp_tuple_element_6 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_class_types, tmp_assign_source_19 );
    tmp_assign_source_20 = LOOKUP_BUILTIN( const_str_plain_unicode );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 48;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_text_type, tmp_assign_source_20 );
    tmp_assign_source_21 = LOOKUP_BUILTIN( const_str_plain_str );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 49;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_binary_type, tmp_assign_source_21 );
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 51;
        goto frame_exception_exit_1;
    }

    tmp_source_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_platform );
    if ( tmp_source_name_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 51;
        goto frame_exception_exit_1;
    }
    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_startswith );
    Py_DECREF( tmp_source_name_5 );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 51;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_str_plain_java;
    frame_module->f_lineno = 51;
    tmp_cond_value_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 51;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        frame_module->f_lineno = 51;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_22 = const_int_pos_2147483647;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_MAXSIZE, tmp_assign_source_22 );
    goto branch_end_2;
    branch_no_2:;
    // Tried code
    tmp_assign_source_23 = PyTuple_New( 1 );
    tmp_tuple_element_7 = LOOKUP_BUILTIN( const_str_plain_object );
    if ( tmp_tuple_element_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_23 );

        frame_module->f_lineno = 56;
        goto try_finally_handler_1;
    }
    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_assign_source_23, 0, tmp_tuple_element_7 );
    assert( tmp_class_creation_1__bases.object == NULL );
    tmp_class_creation_1__bases.object = tmp_assign_source_23;

    tmp_assign_source_24 = impl_class_1_X_of_module_six(  );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 56;
        goto try_finally_handler_1;
    }
    assert( tmp_class_creation_1__class_dict.object == NULL );
    tmp_class_creation_1__class_dict.object = tmp_assign_source_24;

    tmp_compare_left_1 = const_str_plain___metaclass__;
    tmp_compare_right_1 = tmp_class_creation_1__class_dict.object;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    if ( tmp_cmp_In_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 56;
        goto try_finally_handler_1;
    }
    if (tmp_cmp_In_1 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_dget_dict_1 = tmp_class_creation_1__class_dict.object;

    tmp_dget_key_1 = const_str_plain___metaclass__;
    tmp_assign_source_25 = DICT_GET_ITEM( tmp_dget_dict_1, tmp_dget_key_1 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 56;
        goto try_finally_handler_1;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_class_bases_1 = tmp_class_creation_1__bases.object;

    tmp_assign_source_25 = SELECT_METACLASS( tmp_class_bases_1, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_1:;
    assert( tmp_class_creation_1__metaclass.object == NULL );
    tmp_class_creation_1__metaclass.object = tmp_assign_source_25;

    tmp_called_2 = tmp_class_creation_1__metaclass.object;

    tmp_call_arg_element_2 = const_str_plain_X;
    tmp_call_arg_element_3 = tmp_class_creation_1__bases.object;

    tmp_call_arg_element_4 = tmp_class_creation_1__class_dict.object;

    frame_module->f_lineno = 56;
    tmp_assign_source_26 = CALL_FUNCTION_WITH_ARGS3( tmp_called_2, tmp_call_arg_element_2, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 56;
        goto try_finally_handler_1;
    }
    assert( tmp_class_creation_1__class.object == NULL );
    tmp_class_creation_1__class.object = tmp_assign_source_26;

    tmp_assign_source_27 = tmp_class_creation_1__class.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_X, tmp_assign_source_27 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_1__class.object );
    tmp_class_creation_1__class.object = NULL;

    Py_XDECREF( tmp_class_creation_1__bases.object );
    tmp_class_creation_1__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_1__class_dict.object );
    tmp_class_creation_1__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass.object );
    tmp_class_creation_1__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_assign_source_28 = Py_True;
    assert( tmp_try_except_1__unhandled_indicator.object == NULL );
    tmp_try_except_1__unhandled_indicator.object = INCREASE_REFCOUNT( tmp_assign_source_28 );

    // Tried code
    // Tried block of try/except
    tmp_called_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_X );

    if (unlikely( tmp_called_3 == NULL ))
    {
        tmp_called_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_X );
    }

    if ( tmp_called_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 24712 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 60;
        goto try_except_handler_1;
    }

    frame_module->f_lineno = 60;
    tmp_len_arg_1 = CALL_FUNCTION_NO_ARGS( tmp_called_3 );
    if ( tmp_len_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 60;
        goto try_except_handler_1;
    }
    tmp_unused = BUILTIN_LEN( tmp_len_arg_1 );
    Py_DECREF( tmp_len_arg_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 60;
        goto try_except_handler_1;
    }
    Py_DECREF( tmp_unused );
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    tmp_assign_source_29 = Py_False;
    if (tmp_try_except_1__unhandled_indicator.object == NULL)
    {
        tmp_try_except_1__unhandled_indicator.object = INCREASE_REFCOUNT( tmp_assign_source_29 );
    }
    else
    {
        PyObject *old = tmp_try_except_1__unhandled_indicator.object;
        tmp_try_except_1__unhandled_indicator.object = INCREASE_REFCOUNT( tmp_assign_source_29 );
        Py_DECREF( old );
    }
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_module );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_module ) );
    }
    else if ( exception_tb->tb_frame != frame_module || exception_tb->tb_lineno != frame_module->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_module, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_OverflowError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 61;
        goto try_finally_handler_2;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_30 = const_int_pos_2147483647;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_MAXSIZE, tmp_assign_source_30 );
    goto branch_end_3;
    branch_no_3:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_module) frame_module->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_2;
    branch_end_3:;
    try_except_end_1:;
    tmp_compare_left_3 = tmp_try_except_1__unhandled_indicator.object;

    tmp_compare_right_3 = Py_True;
    tmp_is_1 = ( tmp_compare_left_3 == tmp_compare_right_3 );
    if (tmp_is_1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_assign_source_31 = const_int_pos_9223372036854775807;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_MAXSIZE, tmp_assign_source_31 );
    branch_no_4:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_module->f_lineno;
    tmp_result = tmp_try_except_1__unhandled_indicator.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_try_except_1__unhandled_indicator.object );
        tmp_try_except_1__unhandled_indicator.object = NULL;
    }

    assert( tmp_result != false );
    frame_module->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto frame_exception_exit_1;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_X );
    if ( tmp_res == -1 ) PyErr_Clear();

    if ( tmp_res == -1 )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 24712 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 67;
        goto frame_exception_exit_1;
    }

    branch_end_2:;
    branch_end_1:;
    tmp_assign_source_32 = MAKE_FUNCTION_function_2__add_doc_of_module_six(  );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_32 );

        frame_module->f_lineno = 70;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc, tmp_assign_source_32 );
    tmp_assign_source_33 = MAKE_FUNCTION_function_3__import_module_of_module_six(  );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );

        frame_module->f_lineno = 75;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__import_module, tmp_assign_source_33 );
    // Tried code
    tmp_assign_source_34 = PyTuple_New( 1 );
    tmp_tuple_element_8 = LOOKUP_BUILTIN( const_str_plain_object );
    if ( tmp_tuple_element_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_34 );

        frame_module->f_lineno = 81;
        goto try_finally_handler_3;
    }
    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_assign_source_34, 0, tmp_tuple_element_8 );
    assert( tmp_class_creation_2__bases.object == NULL );
    tmp_class_creation_2__bases.object = tmp_assign_source_34;

    tmp_assign_source_35 = impl_class_4__LazyDescr_of_module_six(  );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 81;
        goto try_finally_handler_3;
    }
    assert( tmp_class_creation_2__class_dict.object == NULL );
    tmp_class_creation_2__class_dict.object = tmp_assign_source_35;

    tmp_compare_left_4 = const_str_plain___metaclass__;
    tmp_compare_right_4 = tmp_class_creation_2__class_dict.object;

    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    if ( tmp_cmp_In_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 81;
        goto try_finally_handler_3;
    }
    if (tmp_cmp_In_2 == 1)
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_dget_dict_2 = tmp_class_creation_2__class_dict.object;

    tmp_dget_key_2 = const_str_plain___metaclass__;
    tmp_assign_source_36 = DICT_GET_ITEM( tmp_dget_dict_2, tmp_dget_key_2 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 81;
        goto try_finally_handler_3;
    }
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_class_bases_2 = tmp_class_creation_2__bases.object;

    tmp_assign_source_36 = SELECT_METACLASS( tmp_class_bases_2, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_2:;
    assert( tmp_class_creation_2__metaclass.object == NULL );
    tmp_class_creation_2__metaclass.object = tmp_assign_source_36;

    tmp_called_4 = tmp_class_creation_2__metaclass.object;

    tmp_call_arg_element_5 = const_str_plain__LazyDescr;
    tmp_call_arg_element_6 = tmp_class_creation_2__bases.object;

    tmp_call_arg_element_7 = tmp_class_creation_2__class_dict.object;

    frame_module->f_lineno = 81;
    tmp_assign_source_37 = CALL_FUNCTION_WITH_ARGS3( tmp_called_4, tmp_call_arg_element_5, tmp_call_arg_element_6, tmp_call_arg_element_7 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 81;
        goto try_finally_handler_3;
    }
    assert( tmp_class_creation_2__class.object == NULL );
    tmp_class_creation_2__class.object = tmp_assign_source_37;

    tmp_assign_source_38 = tmp_class_creation_2__class.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyDescr, tmp_assign_source_38 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_2__class.object );
    tmp_class_creation_2__class.object = NULL;

    Py_XDECREF( tmp_class_creation_2__bases.object );
    tmp_class_creation_2__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_2__class_dict.object );
    tmp_class_creation_2__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_2__metaclass.object );
    tmp_class_creation_2__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto frame_exception_exit_1;
    }

    goto finally_end_3;
    finally_end_3:;
    // Tried code
    tmp_assign_source_39 = PyTuple_New( 1 );
    tmp_tuple_element_9 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyDescr );

    if (unlikely( tmp_tuple_element_9 == NULL ))
    {
        tmp_tuple_element_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyDescr );
    }

    if ( tmp_tuple_element_9 == NULL )
    {
        Py_DECREF( tmp_assign_source_39 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326784 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 94;
        goto try_finally_handler_4;
    }

    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_assign_source_39, 0, tmp_tuple_element_9 );
    assert( tmp_class_creation_3__bases.object == NULL );
    tmp_class_creation_3__bases.object = tmp_assign_source_39;

    tmp_assign_source_40 = impl_class_5_MovedModule_of_module_six(  );
    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 94;
        goto try_finally_handler_4;
    }
    assert( tmp_class_creation_3__class_dict.object == NULL );
    tmp_class_creation_3__class_dict.object = tmp_assign_source_40;

    tmp_compare_left_5 = const_str_plain___metaclass__;
    tmp_compare_right_5 = tmp_class_creation_3__class_dict.object;

    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    if ( tmp_cmp_In_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 94;
        goto try_finally_handler_4;
    }
    if (tmp_cmp_In_3 == 1)
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_dget_dict_3 = tmp_class_creation_3__class_dict.object;

    tmp_dget_key_3 = const_str_plain___metaclass__;
    tmp_assign_source_41 = DICT_GET_ITEM( tmp_dget_dict_3, tmp_dget_key_3 );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 94;
        goto try_finally_handler_4;
    }
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_class_bases_3 = tmp_class_creation_3__bases.object;

    tmp_assign_source_41 = SELECT_METACLASS( tmp_class_bases_3, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_3:;
    assert( tmp_class_creation_3__metaclass.object == NULL );
    tmp_class_creation_3__metaclass.object = tmp_assign_source_41;

    tmp_called_5 = tmp_class_creation_3__metaclass.object;

    tmp_call_arg_element_8 = const_str_plain_MovedModule;
    tmp_call_arg_element_9 = tmp_class_creation_3__bases.object;

    tmp_call_arg_element_10 = tmp_class_creation_3__class_dict.object;

    frame_module->f_lineno = 94;
    tmp_assign_source_42 = CALL_FUNCTION_WITH_ARGS3( tmp_called_5, tmp_call_arg_element_8, tmp_call_arg_element_9, tmp_call_arg_element_10 );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 94;
        goto try_finally_handler_4;
    }
    assert( tmp_class_creation_3__class.object == NULL );
    tmp_class_creation_3__class.object = tmp_assign_source_42;

    tmp_assign_source_43 = tmp_class_creation_3__class.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule, tmp_assign_source_43 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_4 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_3__class.object );
    tmp_class_creation_3__class.object = NULL;

    Py_XDECREF( tmp_class_creation_3__bases.object );
    tmp_class_creation_3__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_3__class_dict.object );
    tmp_class_creation_3__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_3__metaclass.object );
    tmp_class_creation_3__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_4;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto frame_exception_exit_1;
    }

    goto finally_end_4;
    finally_end_4:;
    // Tried code
    tmp_assign_source_44 = PyTuple_New( 1 );
    tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_7 == NULL ))
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_7 == NULL )
    {
        Py_DECREF( tmp_assign_source_44 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25256 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 115;
        goto try_finally_handler_5;
    }

    tmp_tuple_element_10 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_ModuleType );
    if ( tmp_tuple_element_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_44 );

        frame_module->f_lineno = 115;
        goto try_finally_handler_5;
    }
    PyTuple_SET_ITEM( tmp_assign_source_44, 0, tmp_tuple_element_10 );
    assert( tmp_class_creation_4__bases.object == NULL );
    tmp_class_creation_4__bases.object = tmp_assign_source_44;

    tmp_assign_source_45 = impl_class_6__LazyModule_of_module_six(  );
    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 115;
        goto try_finally_handler_5;
    }
    assert( tmp_class_creation_4__class_dict.object == NULL );
    tmp_class_creation_4__class_dict.object = tmp_assign_source_45;

    tmp_compare_left_6 = const_str_plain___metaclass__;
    tmp_compare_right_6 = tmp_class_creation_4__class_dict.object;

    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_6, tmp_compare_left_6 );
    if ( tmp_cmp_In_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 115;
        goto try_finally_handler_5;
    }
    if (tmp_cmp_In_4 == 1)
    {
        goto condexpr_true_4;
    }
    else
    {
        goto condexpr_false_4;
    }
    condexpr_true_4:;
    tmp_dget_dict_4 = tmp_class_creation_4__class_dict.object;

    tmp_dget_key_4 = const_str_plain___metaclass__;
    tmp_assign_source_46 = DICT_GET_ITEM( tmp_dget_dict_4, tmp_dget_key_4 );
    if ( tmp_assign_source_46 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 115;
        goto try_finally_handler_5;
    }
    goto condexpr_end_4;
    condexpr_false_4:;
    tmp_class_bases_4 = tmp_class_creation_4__bases.object;

    tmp_assign_source_46 = SELECT_METACLASS( tmp_class_bases_4, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_4:;
    assert( tmp_class_creation_4__metaclass.object == NULL );
    tmp_class_creation_4__metaclass.object = tmp_assign_source_46;

    tmp_called_6 = tmp_class_creation_4__metaclass.object;

    tmp_call_arg_element_11 = const_str_plain__LazyModule;
    tmp_call_arg_element_12 = tmp_class_creation_4__bases.object;

    tmp_call_arg_element_13 = tmp_class_creation_4__class_dict.object;

    frame_module->f_lineno = 115;
    tmp_assign_source_47 = CALL_FUNCTION_WITH_ARGS3( tmp_called_6, tmp_call_arg_element_11, tmp_call_arg_element_12, tmp_call_arg_element_13 );
    if ( tmp_assign_source_47 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 115;
        goto try_finally_handler_5;
    }
    assert( tmp_class_creation_4__class.object == NULL );
    tmp_class_creation_4__class.object = tmp_assign_source_47;

    tmp_assign_source_48 = tmp_class_creation_4__class.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule, tmp_assign_source_48 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_5 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_4__class.object );
    tmp_class_creation_4__class.object = NULL;

    Py_XDECREF( tmp_class_creation_4__bases.object );
    tmp_class_creation_4__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_4__class_dict.object );
    tmp_class_creation_4__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_4__metaclass.object );
    tmp_class_creation_4__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_5;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto frame_exception_exit_1;
    }

    goto finally_end_5;
    finally_end_5:;
    // Tried code
    tmp_assign_source_49 = PyTuple_New( 1 );
    tmp_tuple_element_11 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyDescr );

    if (unlikely( tmp_tuple_element_11 == NULL ))
    {
        tmp_tuple_element_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyDescr );
    }

    if ( tmp_tuple_element_11 == NULL )
    {
        Py_DECREF( tmp_assign_source_49 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326784 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 130;
        goto try_finally_handler_6;
    }

    Py_INCREF( tmp_tuple_element_11 );
    PyTuple_SET_ITEM( tmp_assign_source_49, 0, tmp_tuple_element_11 );
    assert( tmp_class_creation_5__bases.object == NULL );
    tmp_class_creation_5__bases.object = tmp_assign_source_49;

    tmp_assign_source_50 = impl_class_7_MovedAttribute_of_module_six(  );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 130;
        goto try_finally_handler_6;
    }
    assert( tmp_class_creation_5__class_dict.object == NULL );
    tmp_class_creation_5__class_dict.object = tmp_assign_source_50;

    tmp_compare_left_7 = const_str_plain___metaclass__;
    tmp_compare_right_7 = tmp_class_creation_5__class_dict.object;

    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_7, tmp_compare_left_7 );
    if ( tmp_cmp_In_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 130;
        goto try_finally_handler_6;
    }
    if (tmp_cmp_In_5 == 1)
    {
        goto condexpr_true_5;
    }
    else
    {
        goto condexpr_false_5;
    }
    condexpr_true_5:;
    tmp_dget_dict_5 = tmp_class_creation_5__class_dict.object;

    tmp_dget_key_5 = const_str_plain___metaclass__;
    tmp_assign_source_51 = DICT_GET_ITEM( tmp_dget_dict_5, tmp_dget_key_5 );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 130;
        goto try_finally_handler_6;
    }
    goto condexpr_end_5;
    condexpr_false_5:;
    tmp_class_bases_5 = tmp_class_creation_5__bases.object;

    tmp_assign_source_51 = SELECT_METACLASS( tmp_class_bases_5, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_5:;
    assert( tmp_class_creation_5__metaclass.object == NULL );
    tmp_class_creation_5__metaclass.object = tmp_assign_source_51;

    tmp_called_7 = tmp_class_creation_5__metaclass.object;

    tmp_call_arg_element_14 = const_str_plain_MovedAttribute;
    tmp_call_arg_element_15 = tmp_class_creation_5__bases.object;

    tmp_call_arg_element_16 = tmp_class_creation_5__class_dict.object;

    frame_module->f_lineno = 130;
    tmp_assign_source_52 = CALL_FUNCTION_WITH_ARGS3( tmp_called_7, tmp_call_arg_element_14, tmp_call_arg_element_15, tmp_call_arg_element_16 );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 130;
        goto try_finally_handler_6;
    }
    assert( tmp_class_creation_5__class.object == NULL );
    tmp_class_creation_5__class.object = tmp_assign_source_52;

    tmp_assign_source_53 = tmp_class_creation_5__class.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute, tmp_assign_source_53 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_6 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_5__class.object );
    tmp_class_creation_5__class.object = NULL;

    Py_XDECREF( tmp_class_creation_5__bases.object );
    tmp_class_creation_5__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_5__class_dict.object );
    tmp_class_creation_5__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_5__metaclass.object );
    tmp_class_creation_5__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_6;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto frame_exception_exit_1;
    }

    goto finally_end_6;
    finally_end_6:;
    // Tried code
    tmp_assign_source_54 = PyTuple_New( 1 );
    tmp_tuple_element_12 = LOOKUP_BUILTIN( const_str_plain_object );
    if ( tmp_tuple_element_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_54 );

        frame_module->f_lineno = 155;
        goto try_finally_handler_7;
    }
    Py_INCREF( tmp_tuple_element_12 );
    PyTuple_SET_ITEM( tmp_assign_source_54, 0, tmp_tuple_element_12 );
    assert( tmp_class_creation_6__bases.object == NULL );
    tmp_class_creation_6__bases.object = tmp_assign_source_54;

    tmp_assign_source_55 = impl_class_8__SixMetaPathImporter_of_module_six(  );
    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 155;
        goto try_finally_handler_7;
    }
    assert( tmp_class_creation_6__class_dict.object == NULL );
    tmp_class_creation_6__class_dict.object = tmp_assign_source_55;

    tmp_compare_left_8 = const_str_plain___metaclass__;
    tmp_compare_right_8 = tmp_class_creation_6__class_dict.object;

    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    if ( tmp_cmp_In_6 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 155;
        goto try_finally_handler_7;
    }
    if (tmp_cmp_In_6 == 1)
    {
        goto condexpr_true_6;
    }
    else
    {
        goto condexpr_false_6;
    }
    condexpr_true_6:;
    tmp_dget_dict_6 = tmp_class_creation_6__class_dict.object;

    tmp_dget_key_6 = const_str_plain___metaclass__;
    tmp_assign_source_56 = DICT_GET_ITEM( tmp_dget_dict_6, tmp_dget_key_6 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 155;
        goto try_finally_handler_7;
    }
    goto condexpr_end_6;
    condexpr_false_6:;
    tmp_class_bases_6 = tmp_class_creation_6__bases.object;

    tmp_assign_source_56 = SELECT_METACLASS( tmp_class_bases_6, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_6:;
    assert( tmp_class_creation_6__metaclass.object == NULL );
    tmp_class_creation_6__metaclass.object = tmp_assign_source_56;

    tmp_called_8 = tmp_class_creation_6__metaclass.object;

    tmp_call_arg_element_17 = const_str_plain__SixMetaPathImporter;
    tmp_call_arg_element_18 = tmp_class_creation_6__bases.object;

    tmp_call_arg_element_19 = tmp_class_creation_6__class_dict.object;

    frame_module->f_lineno = 155;
    tmp_assign_source_57 = CALL_FUNCTION_WITH_ARGS3( tmp_called_8, tmp_call_arg_element_17, tmp_call_arg_element_18, tmp_call_arg_element_19 );
    if ( tmp_assign_source_57 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 155;
        goto try_finally_handler_7;
    }
    assert( tmp_class_creation_6__class.object == NULL );
    tmp_class_creation_6__class.object = tmp_assign_source_57;

    tmp_assign_source_58 = tmp_class_creation_6__class.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__SixMetaPathImporter, tmp_assign_source_58 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_7:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_7 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_6__class.object );
    tmp_class_creation_6__class.object = NULL;

    Py_XDECREF( tmp_class_creation_6__bases.object );
    tmp_class_creation_6__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_6__class_dict.object );
    tmp_class_creation_6__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_6__metaclass.object );
    tmp_class_creation_6__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_7;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_7 != NULL )
    {
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;

        goto frame_exception_exit_1;
    }

    goto finally_end_7;
    finally_end_7:;
    tmp_called_9 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__SixMetaPathImporter );

    if (unlikely( tmp_called_9 == NULL ))
    {
        tmp_called_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__SixMetaPathImporter );
    }

    if ( tmp_called_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326816 ], 42, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 215;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_20 = const_str_plain_six;
    frame_module->f_lineno = 215;
    tmp_assign_source_59 = CALL_FUNCTION_WITH_ARGS1( tmp_called_9, tmp_call_arg_element_20 );
    if ( tmp_assign_source_59 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 215;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer, tmp_assign_source_59 );
    // Tried code
    tmp_assign_source_60 = PyTuple_New( 1 );
    tmp_tuple_element_13 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_13 == NULL ))
    {
        tmp_tuple_element_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_13 == NULL )
    {
        Py_DECREF( tmp_assign_source_60 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326858 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 218;
        goto try_finally_handler_8;
    }

    Py_INCREF( tmp_tuple_element_13 );
    PyTuple_SET_ITEM( tmp_assign_source_60, 0, tmp_tuple_element_13 );
    assert( tmp_class_creation_7__bases.object == NULL );
    tmp_class_creation_7__bases.object = tmp_assign_source_60;

    tmp_assign_source_61 = impl_class_9__MovedItems_of_module_six(  );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 218;
        goto try_finally_handler_8;
    }
    assert( tmp_class_creation_7__class_dict.object == NULL );
    tmp_class_creation_7__class_dict.object = tmp_assign_source_61;

    tmp_compare_left_9 = const_str_plain___metaclass__;
    tmp_compare_right_9 = tmp_class_creation_7__class_dict.object;

    tmp_cmp_In_7 = PySequence_Contains( tmp_compare_right_9, tmp_compare_left_9 );
    if ( tmp_cmp_In_7 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 218;
        goto try_finally_handler_8;
    }
    if (tmp_cmp_In_7 == 1)
    {
        goto condexpr_true_7;
    }
    else
    {
        goto condexpr_false_7;
    }
    condexpr_true_7:;
    tmp_dget_dict_7 = tmp_class_creation_7__class_dict.object;

    tmp_dget_key_7 = const_str_plain___metaclass__;
    tmp_assign_source_62 = DICT_GET_ITEM( tmp_dget_dict_7, tmp_dget_key_7 );
    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 218;
        goto try_finally_handler_8;
    }
    goto condexpr_end_7;
    condexpr_false_7:;
    tmp_class_bases_7 = tmp_class_creation_7__bases.object;

    tmp_assign_source_62 = SELECT_METACLASS( tmp_class_bases_7, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_7:;
    assert( tmp_class_creation_7__metaclass.object == NULL );
    tmp_class_creation_7__metaclass.object = tmp_assign_source_62;

    tmp_called_10 = tmp_class_creation_7__metaclass.object;

    tmp_call_arg_element_21 = const_str_plain__MovedItems;
    tmp_call_arg_element_22 = tmp_class_creation_7__bases.object;

    tmp_call_arg_element_23 = tmp_class_creation_7__class_dict.object;

    frame_module->f_lineno = 218;
    tmp_assign_source_63 = CALL_FUNCTION_WITH_ARGS3( tmp_called_10, tmp_call_arg_element_21, tmp_call_arg_element_22, tmp_call_arg_element_23 );
    if ( tmp_assign_source_63 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 218;
        goto try_finally_handler_8;
    }
    assert( tmp_class_creation_7__class.object == NULL );
    tmp_class_creation_7__class.object = tmp_assign_source_63;

    tmp_assign_source_64 = tmp_class_creation_7__class.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems, tmp_assign_source_64 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_8:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_8 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_7__class.object );
    tmp_class_creation_7__class.object = NULL;

    Py_XDECREF( tmp_class_creation_7__bases.object );
    tmp_class_creation_7__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_7__class_dict.object );
    tmp_class_creation_7__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_7__metaclass.object );
    tmp_class_creation_7__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_8;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_8 != NULL )
    {
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;

        goto frame_exception_exit_1;
    }

    goto finally_end_8;
    finally_end_8:;
    tmp_assign_source_65 = PyList_New( 58 );
    tmp_called_11 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_11 == NULL ))
    {
        tmp_called_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_11 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 224;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_24 = const_str_plain_cStringIO;
    tmp_call_arg_element_25 = const_str_plain_cStringIO;
    tmp_call_arg_element_26 = const_str_plain_io;
    tmp_call_arg_element_27 = const_str_plain_StringIO;
    frame_module->f_lineno = 224;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_11, tmp_call_arg_element_24, tmp_call_arg_element_25, tmp_call_arg_element_26, tmp_call_arg_element_27 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 224;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 0, tmp_list_element_1 );
    tmp_called_12 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_12 == NULL ))
    {
        tmp_called_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_12 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 225;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_28 = const_str_plain_filter;
    tmp_call_arg_element_29 = const_str_plain_itertools;
    tmp_call_arg_element_30 = const_str_plain_builtins;
    tmp_call_arg_element_31 = const_str_plain_ifilter;
    tmp_call_arg_element_32 = const_str_plain_filter;
    frame_module->f_lineno = 225;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_12, tmp_call_arg_element_28, tmp_call_arg_element_29, tmp_call_arg_element_30, tmp_call_arg_element_31, tmp_call_arg_element_32 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 225;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 1, tmp_list_element_1 );
    tmp_called_13 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_13 == NULL ))
    {
        tmp_called_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_13 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 226;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_33 = const_str_plain_filterfalse;
    tmp_call_arg_element_34 = const_str_plain_itertools;
    tmp_call_arg_element_35 = const_str_plain_itertools;
    tmp_call_arg_element_36 = const_str_plain_ifilterfalse;
    tmp_call_arg_element_37 = const_str_plain_filterfalse;
    frame_module->f_lineno = 226;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_13, tmp_call_arg_element_33, tmp_call_arg_element_34, tmp_call_arg_element_35, tmp_call_arg_element_36, tmp_call_arg_element_37 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 226;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 2, tmp_list_element_1 );
    tmp_called_14 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_14 == NULL ))
    {
        tmp_called_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_14 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 227;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_38 = const_str_plain_input;
    tmp_call_arg_element_39 = const_str_plain___builtin__;
    tmp_call_arg_element_40 = const_str_plain_builtins;
    tmp_call_arg_element_41 = const_str_plain_raw_input;
    tmp_call_arg_element_42 = const_str_plain_input;
    frame_module->f_lineno = 227;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_14, tmp_call_arg_element_38, tmp_call_arg_element_39, tmp_call_arg_element_40, tmp_call_arg_element_41, tmp_call_arg_element_42 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 227;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 3, tmp_list_element_1 );
    tmp_called_15 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_15 == NULL ))
    {
        tmp_called_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_15 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 228;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_43 = const_str_plain_map;
    tmp_call_arg_element_44 = const_str_plain_itertools;
    tmp_call_arg_element_45 = const_str_plain_builtins;
    tmp_call_arg_element_46 = const_str_plain_imap;
    tmp_call_arg_element_47 = const_str_plain_map;
    frame_module->f_lineno = 228;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_15, tmp_call_arg_element_43, tmp_call_arg_element_44, tmp_call_arg_element_45, tmp_call_arg_element_46, tmp_call_arg_element_47 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 228;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 4, tmp_list_element_1 );
    tmp_called_16 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_16 == NULL ))
    {
        tmp_called_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_16 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 229;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_48 = const_str_plain_range;
    tmp_call_arg_element_49 = const_str_plain___builtin__;
    tmp_call_arg_element_50 = const_str_plain_builtins;
    tmp_call_arg_element_51 = const_str_plain_xrange;
    tmp_call_arg_element_52 = const_str_plain_range;
    frame_module->f_lineno = 229;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_16, tmp_call_arg_element_48, tmp_call_arg_element_49, tmp_call_arg_element_50, tmp_call_arg_element_51, tmp_call_arg_element_52 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 229;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 5, tmp_list_element_1 );
    tmp_called_17 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_17 == NULL ))
    {
        tmp_called_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_17 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 230;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_53 = const_str_plain_reload_module;
    tmp_call_arg_element_54 = const_str_plain___builtin__;
    tmp_call_arg_element_55 = const_str_plain_imp;
    tmp_call_arg_element_56 = const_str_plain_reload;
    frame_module->f_lineno = 230;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_17, tmp_call_arg_element_53, tmp_call_arg_element_54, tmp_call_arg_element_55, tmp_call_arg_element_56 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 230;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 6, tmp_list_element_1 );
    tmp_called_18 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_18 == NULL ))
    {
        tmp_called_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_18 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 231;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_57 = const_str_plain_reduce;
    tmp_call_arg_element_58 = const_str_plain___builtin__;
    tmp_call_arg_element_59 = const_str_plain_functools;
    frame_module->f_lineno = 231;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_18, tmp_call_arg_element_57, tmp_call_arg_element_58, tmp_call_arg_element_59 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 231;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 7, tmp_list_element_1 );
    tmp_called_19 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_19 == NULL ))
    {
        tmp_called_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_19 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 232;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_60 = const_str_plain_StringIO;
    tmp_call_arg_element_61 = const_str_plain_StringIO;
    tmp_call_arg_element_62 = const_str_plain_io;
    frame_module->f_lineno = 232;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_19, tmp_call_arg_element_60, tmp_call_arg_element_61, tmp_call_arg_element_62 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 232;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 8, tmp_list_element_1 );
    tmp_called_20 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_20 == NULL ))
    {
        tmp_called_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_20 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 233;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_63 = const_str_plain_UserDict;
    tmp_call_arg_element_64 = const_str_plain_UserDict;
    tmp_call_arg_element_65 = const_str_plain_collections;
    frame_module->f_lineno = 233;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_20, tmp_call_arg_element_63, tmp_call_arg_element_64, tmp_call_arg_element_65 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 233;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 9, tmp_list_element_1 );
    tmp_called_21 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_21 == NULL ))
    {
        tmp_called_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_21 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 234;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_66 = const_str_plain_UserList;
    tmp_call_arg_element_67 = const_str_plain_UserList;
    tmp_call_arg_element_68 = const_str_plain_collections;
    frame_module->f_lineno = 234;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_21, tmp_call_arg_element_66, tmp_call_arg_element_67, tmp_call_arg_element_68 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 234;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 10, tmp_list_element_1 );
    tmp_called_22 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_22 == NULL ))
    {
        tmp_called_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_22 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 235;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_69 = const_str_plain_UserString;
    tmp_call_arg_element_70 = const_str_plain_UserString;
    tmp_call_arg_element_71 = const_str_plain_collections;
    frame_module->f_lineno = 235;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_22, tmp_call_arg_element_69, tmp_call_arg_element_70, tmp_call_arg_element_71 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 235;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 11, tmp_list_element_1 );
    tmp_called_23 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_23 == NULL ))
    {
        tmp_called_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_23 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 236;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_72 = const_str_plain_xrange;
    tmp_call_arg_element_73 = const_str_plain___builtin__;
    tmp_call_arg_element_74 = const_str_plain_builtins;
    tmp_call_arg_element_75 = const_str_plain_xrange;
    tmp_call_arg_element_76 = const_str_plain_range;
    frame_module->f_lineno = 236;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_23, tmp_call_arg_element_72, tmp_call_arg_element_73, tmp_call_arg_element_74, tmp_call_arg_element_75, tmp_call_arg_element_76 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 236;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 12, tmp_list_element_1 );
    tmp_called_24 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_24 == NULL ))
    {
        tmp_called_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_24 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 237;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_77 = const_str_plain_zip;
    tmp_call_arg_element_78 = const_str_plain_itertools;
    tmp_call_arg_element_79 = const_str_plain_builtins;
    tmp_call_arg_element_80 = const_str_plain_izip;
    tmp_call_arg_element_81 = const_str_plain_zip;
    frame_module->f_lineno = 237;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_24, tmp_call_arg_element_77, tmp_call_arg_element_78, tmp_call_arg_element_79, tmp_call_arg_element_80, tmp_call_arg_element_81 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 237;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 13, tmp_list_element_1 );
    tmp_called_25 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_25 == NULL ))
    {
        tmp_called_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_25 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 238;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_82 = const_str_plain_zip_longest;
    tmp_call_arg_element_83 = const_str_plain_itertools;
    tmp_call_arg_element_84 = const_str_plain_itertools;
    tmp_call_arg_element_85 = const_str_plain_izip_longest;
    tmp_call_arg_element_86 = const_str_plain_zip_longest;
    frame_module->f_lineno = 238;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_25, tmp_call_arg_element_82, tmp_call_arg_element_83, tmp_call_arg_element_84, tmp_call_arg_element_85, tmp_call_arg_element_86 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 238;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 14, tmp_list_element_1 );
    tmp_called_26 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_26 == NULL ))
    {
        tmp_called_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_26 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 240;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_87 = const_str_plain_builtins;
    tmp_call_arg_element_88 = const_str_plain___builtin__;
    frame_module->f_lineno = 240;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_26, tmp_call_arg_element_87, tmp_call_arg_element_88 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 240;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 15, tmp_list_element_1 );
    tmp_called_27 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_27 == NULL ))
    {
        tmp_called_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_27 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 241;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_89 = const_str_plain_configparser;
    tmp_call_arg_element_90 = const_str_plain_ConfigParser;
    frame_module->f_lineno = 241;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_27, tmp_call_arg_element_89, tmp_call_arg_element_90 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 241;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 16, tmp_list_element_1 );
    tmp_called_28 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_28 == NULL ))
    {
        tmp_called_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_28 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 242;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_91 = const_str_plain_copyreg;
    tmp_call_arg_element_92 = const_str_plain_copy_reg;
    frame_module->f_lineno = 242;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_28, tmp_call_arg_element_91, tmp_call_arg_element_92 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 242;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 17, tmp_list_element_1 );
    tmp_called_29 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_29 == NULL ))
    {
        tmp_called_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_29 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 243;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_93 = const_str_plain_dbm_gnu;
    tmp_call_arg_element_94 = const_str_plain_gdbm;
    tmp_call_arg_element_95 = const_str_digest_c59534a68517fc7a752bdc1e23491aec;
    frame_module->f_lineno = 243;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_29, tmp_call_arg_element_93, tmp_call_arg_element_94, tmp_call_arg_element_95 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 243;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 18, tmp_list_element_1 );
    tmp_called_30 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_30 == NULL ))
    {
        tmp_called_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_30 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 244;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_96 = const_str_plain__dummy_thread;
    tmp_call_arg_element_97 = const_str_plain_dummy_thread;
    tmp_call_arg_element_98 = const_str_plain__dummy_thread;
    frame_module->f_lineno = 244;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_30, tmp_call_arg_element_96, tmp_call_arg_element_97, tmp_call_arg_element_98 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 244;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 19, tmp_list_element_1 );
    tmp_called_31 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_31 == NULL ))
    {
        tmp_called_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_31 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 245;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_99 = const_str_plain_http_cookiejar;
    tmp_call_arg_element_100 = const_str_plain_cookielib;
    tmp_call_arg_element_101 = const_str_digest_fd54171dd0d710d8acbf194e39f3cb84;
    frame_module->f_lineno = 245;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_31, tmp_call_arg_element_99, tmp_call_arg_element_100, tmp_call_arg_element_101 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 245;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 20, tmp_list_element_1 );
    tmp_called_32 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_32 == NULL ))
    {
        tmp_called_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_32 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 246;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_102 = const_str_plain_http_cookies;
    tmp_call_arg_element_103 = const_str_plain_Cookie;
    tmp_call_arg_element_104 = const_str_digest_038da4de37b9fae5e5dc8e2222fa4464;
    frame_module->f_lineno = 246;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_32, tmp_call_arg_element_102, tmp_call_arg_element_103, tmp_call_arg_element_104 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 246;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 21, tmp_list_element_1 );
    tmp_called_33 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_33 == NULL ))
    {
        tmp_called_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_33 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 247;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_105 = const_str_plain_html_entities;
    tmp_call_arg_element_106 = const_str_plain_htmlentitydefs;
    tmp_call_arg_element_107 = const_str_digest_0c0ade3270e84b23c2c92691eb86e41d;
    frame_module->f_lineno = 247;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_33, tmp_call_arg_element_105, tmp_call_arg_element_106, tmp_call_arg_element_107 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 247;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 22, tmp_list_element_1 );
    tmp_called_34 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_34 == NULL ))
    {
        tmp_called_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_34 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 248;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_108 = const_str_plain_html_parser;
    tmp_call_arg_element_109 = const_str_plain_HTMLParser;
    tmp_call_arg_element_110 = const_str_digest_1b01bc9594fd6cb91f121e7eccdcf3b1;
    frame_module->f_lineno = 248;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_34, tmp_call_arg_element_108, tmp_call_arg_element_109, tmp_call_arg_element_110 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 248;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 23, tmp_list_element_1 );
    tmp_called_35 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_35 == NULL ))
    {
        tmp_called_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_35 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 249;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_111 = const_str_plain_http_client;
    tmp_call_arg_element_112 = const_str_plain_httplib;
    tmp_call_arg_element_113 = const_str_digest_406441f6b7a138207569e78fe1f28d0f;
    frame_module->f_lineno = 249;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_35, tmp_call_arg_element_111, tmp_call_arg_element_112, tmp_call_arg_element_113 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 249;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 24, tmp_list_element_1 );
    tmp_called_36 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_36 == NULL ))
    {
        tmp_called_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_36 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 250;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_114 = const_str_plain_email_mime_multipart;
    tmp_call_arg_element_115 = const_str_digest_fa6bd76d50648a99a4eba25a358f0f5c;
    tmp_call_arg_element_116 = const_str_digest_a4667b520b212a16317829bcb290bcb4;
    frame_module->f_lineno = 250;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_36, tmp_call_arg_element_114, tmp_call_arg_element_115, tmp_call_arg_element_116 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 250;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 25, tmp_list_element_1 );
    tmp_called_37 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_37 == NULL ))
    {
        tmp_called_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_37 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 251;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_117 = const_str_plain_email_mime_text;
    tmp_call_arg_element_118 = const_str_digest_ab1bdb7c01b4336ff9cbcf1b76b05a09;
    tmp_call_arg_element_119 = const_str_digest_7188946be9751e3fc26a2d24642bfa16;
    frame_module->f_lineno = 251;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_37, tmp_call_arg_element_117, tmp_call_arg_element_118, tmp_call_arg_element_119 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 251;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 26, tmp_list_element_1 );
    tmp_called_38 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_38 == NULL ))
    {
        tmp_called_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_38 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 252;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_120 = const_str_plain_email_mime_base;
    tmp_call_arg_element_121 = const_str_digest_58da1cb4116270886669e39677f27303;
    tmp_call_arg_element_122 = const_str_digest_dc54181a3936c5f55b64d53a8e6a933e;
    frame_module->f_lineno = 252;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_38, tmp_call_arg_element_120, tmp_call_arg_element_121, tmp_call_arg_element_122 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 252;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 27, tmp_list_element_1 );
    tmp_called_39 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_39 == NULL ))
    {
        tmp_called_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_39 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 253;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_123 = const_str_plain_BaseHTTPServer;
    tmp_call_arg_element_124 = const_str_plain_BaseHTTPServer;
    tmp_call_arg_element_125 = const_str_digest_49a4d41a6658a4332f5544766e631eed;
    frame_module->f_lineno = 253;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_39, tmp_call_arg_element_123, tmp_call_arg_element_124, tmp_call_arg_element_125 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 253;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 28, tmp_list_element_1 );
    tmp_called_40 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_40 == NULL ))
    {
        tmp_called_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_40 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 254;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_126 = const_str_plain_CGIHTTPServer;
    tmp_call_arg_element_127 = const_str_plain_CGIHTTPServer;
    tmp_call_arg_element_128 = const_str_digest_49a4d41a6658a4332f5544766e631eed;
    frame_module->f_lineno = 254;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_40, tmp_call_arg_element_126, tmp_call_arg_element_127, tmp_call_arg_element_128 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 254;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 29, tmp_list_element_1 );
    tmp_called_41 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_41 == NULL ))
    {
        tmp_called_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_41 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 255;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_129 = const_str_plain_SimpleHTTPServer;
    tmp_call_arg_element_130 = const_str_plain_SimpleHTTPServer;
    tmp_call_arg_element_131 = const_str_digest_49a4d41a6658a4332f5544766e631eed;
    frame_module->f_lineno = 255;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_41, tmp_call_arg_element_129, tmp_call_arg_element_130, tmp_call_arg_element_131 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 255;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 30, tmp_list_element_1 );
    tmp_called_42 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_42 == NULL ))
    {
        tmp_called_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_42 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 256;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_132 = const_str_plain_cPickle;
    tmp_call_arg_element_133 = const_str_plain_cPickle;
    tmp_call_arg_element_134 = const_str_plain_pickle;
    frame_module->f_lineno = 256;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_42, tmp_call_arg_element_132, tmp_call_arg_element_133, tmp_call_arg_element_134 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 256;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 31, tmp_list_element_1 );
    tmp_called_43 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_43 == NULL ))
    {
        tmp_called_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_43 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 257;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_135 = const_str_plain_queue;
    tmp_call_arg_element_136 = const_str_plain_Queue;
    frame_module->f_lineno = 257;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_43, tmp_call_arg_element_135, tmp_call_arg_element_136 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 257;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 32, tmp_list_element_1 );
    tmp_called_44 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_44 == NULL ))
    {
        tmp_called_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_44 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 258;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_137 = const_str_plain_reprlib;
    tmp_call_arg_element_138 = const_str_plain_repr;
    frame_module->f_lineno = 258;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_44, tmp_call_arg_element_137, tmp_call_arg_element_138 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 258;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 33, tmp_list_element_1 );
    tmp_called_45 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_45 == NULL ))
    {
        tmp_called_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_45 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 259;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_139 = const_str_plain_socketserver;
    tmp_call_arg_element_140 = const_str_plain_SocketServer;
    frame_module->f_lineno = 259;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_45, tmp_call_arg_element_139, tmp_call_arg_element_140 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 259;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 34, tmp_list_element_1 );
    tmp_called_46 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_46 == NULL ))
    {
        tmp_called_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_46 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 260;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_141 = const_str_plain__thread;
    tmp_call_arg_element_142 = const_str_plain_thread;
    tmp_call_arg_element_143 = const_str_plain__thread;
    frame_module->f_lineno = 260;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_46, tmp_call_arg_element_141, tmp_call_arg_element_142, tmp_call_arg_element_143 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 260;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 35, tmp_list_element_1 );
    tmp_called_47 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_47 == NULL ))
    {
        tmp_called_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_47 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 261;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_144 = const_str_plain_tkinter;
    tmp_call_arg_element_145 = const_str_plain_Tkinter;
    frame_module->f_lineno = 261;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_47, tmp_call_arg_element_144, tmp_call_arg_element_145 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 261;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 36, tmp_list_element_1 );
    tmp_called_48 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_48 == NULL ))
    {
        tmp_called_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_48 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 262;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_146 = const_str_plain_tkinter_dialog;
    tmp_call_arg_element_147 = const_str_plain_Dialog;
    tmp_call_arg_element_148 = const_str_digest_7e83b594ae6099bc88a4443d90f44b24;
    frame_module->f_lineno = 262;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_48, tmp_call_arg_element_146, tmp_call_arg_element_147, tmp_call_arg_element_148 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 262;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 37, tmp_list_element_1 );
    tmp_called_49 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_49 == NULL ))
    {
        tmp_called_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_49 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 263;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_149 = const_str_plain_tkinter_filedialog;
    tmp_call_arg_element_150 = const_str_plain_FileDialog;
    tmp_call_arg_element_151 = const_str_digest_13245232aae43a43eae78ca7d93b91db;
    frame_module->f_lineno = 263;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_49, tmp_call_arg_element_149, tmp_call_arg_element_150, tmp_call_arg_element_151 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 263;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 38, tmp_list_element_1 );
    tmp_called_50 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_50 == NULL ))
    {
        tmp_called_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_50 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 264;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_152 = const_str_plain_tkinter_scrolledtext;
    tmp_call_arg_element_153 = const_str_plain_ScrolledText;
    tmp_call_arg_element_154 = const_str_digest_0169683c5c983a17c51f860a928c4a97;
    frame_module->f_lineno = 264;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_50, tmp_call_arg_element_152, tmp_call_arg_element_153, tmp_call_arg_element_154 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 264;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 39, tmp_list_element_1 );
    tmp_called_51 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_51 == NULL ))
    {
        tmp_called_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_51 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 265;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_155 = const_str_plain_tkinter_simpledialog;
    tmp_call_arg_element_156 = const_str_plain_SimpleDialog;
    tmp_call_arg_element_157 = const_str_digest_eb79640ec86e1bff202229c8638bd31b;
    frame_module->f_lineno = 265;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_51, tmp_call_arg_element_155, tmp_call_arg_element_156, tmp_call_arg_element_157 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 265;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 40, tmp_list_element_1 );
    tmp_called_52 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_52 == NULL ))
    {
        tmp_called_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_52 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 266;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_158 = const_str_plain_tkinter_tix;
    tmp_call_arg_element_159 = const_str_plain_Tix;
    tmp_call_arg_element_160 = const_str_digest_19c2afc84782be6b115356661b3dc1a0;
    frame_module->f_lineno = 266;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_52, tmp_call_arg_element_158, tmp_call_arg_element_159, tmp_call_arg_element_160 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 266;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 41, tmp_list_element_1 );
    tmp_called_53 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_53 == NULL ))
    {
        tmp_called_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_53 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 267;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_161 = const_str_plain_tkinter_ttk;
    tmp_call_arg_element_162 = const_str_plain_ttk;
    tmp_call_arg_element_163 = const_str_digest_9159c069c805578c25810202764533e4;
    frame_module->f_lineno = 267;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_53, tmp_call_arg_element_161, tmp_call_arg_element_162, tmp_call_arg_element_163 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 267;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 42, tmp_list_element_1 );
    tmp_called_54 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_54 == NULL ))
    {
        tmp_called_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_54 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 268;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_164 = const_str_plain_tkinter_constants;
    tmp_call_arg_element_165 = const_str_plain_Tkconstants;
    tmp_call_arg_element_166 = const_str_digest_08ac29e0848402ea6bc3e0c8cb3dfcdc;
    frame_module->f_lineno = 268;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_54, tmp_call_arg_element_164, tmp_call_arg_element_165, tmp_call_arg_element_166 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 268;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 43, tmp_list_element_1 );
    tmp_called_55 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_55 == NULL ))
    {
        tmp_called_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_55 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 269;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_167 = const_str_plain_tkinter_dnd;
    tmp_call_arg_element_168 = const_str_plain_Tkdnd;
    tmp_call_arg_element_169 = const_str_digest_866224401e024c4a9cb3172c658ae16e;
    frame_module->f_lineno = 269;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_55, tmp_call_arg_element_167, tmp_call_arg_element_168, tmp_call_arg_element_169 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 269;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 44, tmp_list_element_1 );
    tmp_called_56 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_56 == NULL ))
    {
        tmp_called_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_56 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 270;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_170 = const_str_plain_tkinter_colorchooser;
    tmp_call_arg_element_171 = const_str_plain_tkColorChooser;
    tmp_call_arg_element_172 = const_str_digest_7fe9c7733eadb925be9feae252d25608;
    frame_module->f_lineno = 271;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_56, tmp_call_arg_element_170, tmp_call_arg_element_171, tmp_call_arg_element_172 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 271;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 45, tmp_list_element_1 );
    tmp_called_57 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_57 == NULL ))
    {
        tmp_called_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_57 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 272;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_173 = const_str_plain_tkinter_commondialog;
    tmp_call_arg_element_174 = const_str_plain_tkCommonDialog;
    tmp_call_arg_element_175 = const_str_digest_89562957d609422690365d4cb79641a2;
    frame_module->f_lineno = 273;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_57, tmp_call_arg_element_173, tmp_call_arg_element_174, tmp_call_arg_element_175 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 273;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 46, tmp_list_element_1 );
    tmp_called_58 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_58 == NULL ))
    {
        tmp_called_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_58 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 274;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_176 = const_str_plain_tkinter_tkfiledialog;
    tmp_call_arg_element_177 = const_str_plain_tkFileDialog;
    tmp_call_arg_element_178 = const_str_digest_13245232aae43a43eae78ca7d93b91db;
    frame_module->f_lineno = 274;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_58, tmp_call_arg_element_176, tmp_call_arg_element_177, tmp_call_arg_element_178 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 274;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 47, tmp_list_element_1 );
    tmp_called_59 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_59 == NULL ))
    {
        tmp_called_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_59 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 275;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_179 = const_str_plain_tkinter_font;
    tmp_call_arg_element_180 = const_str_plain_tkFont;
    tmp_call_arg_element_181 = const_str_digest_97dd821e48fd1133a99228223a7a624f;
    frame_module->f_lineno = 275;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_59, tmp_call_arg_element_179, tmp_call_arg_element_180, tmp_call_arg_element_181 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 275;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 48, tmp_list_element_1 );
    tmp_called_60 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_60 == NULL ))
    {
        tmp_called_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_60 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 276;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_182 = const_str_plain_tkinter_messagebox;
    tmp_call_arg_element_183 = const_str_plain_tkMessageBox;
    tmp_call_arg_element_184 = const_str_digest_06d8679011755bb12845261477126bbf;
    frame_module->f_lineno = 276;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_60, tmp_call_arg_element_182, tmp_call_arg_element_183, tmp_call_arg_element_184 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 276;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 49, tmp_list_element_1 );
    tmp_called_61 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_61 == NULL ))
    {
        tmp_called_61 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_61 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 277;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_185 = const_str_plain_tkinter_tksimpledialog;
    tmp_call_arg_element_186 = const_str_plain_tkSimpleDialog;
    tmp_call_arg_element_187 = const_str_digest_eb79640ec86e1bff202229c8638bd31b;
    frame_module->f_lineno = 278;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_61, tmp_call_arg_element_185, tmp_call_arg_element_186, tmp_call_arg_element_187 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 278;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 50, tmp_list_element_1 );
    tmp_called_62 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_62 == NULL ))
    {
        tmp_called_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_62 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 279;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_188 = const_str_plain_urllib_parse;
    tmp_call_arg_element_189 = const_str_digest_2dabcdf82a9b3cf4ce1e16ab71cddca0;
    tmp_call_arg_element_190 = const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
    frame_module->f_lineno = 279;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_62, tmp_call_arg_element_188, tmp_call_arg_element_189, tmp_call_arg_element_190 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 279;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 51, tmp_list_element_1 );
    tmp_called_63 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_63 == NULL ))
    {
        tmp_called_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_63 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 280;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_191 = const_str_plain_urllib_error;
    tmp_call_arg_element_192 = const_str_digest_ea251ffbbc28e76ef31cec7d1a3e8e52;
    tmp_call_arg_element_193 = const_str_digest_eed4497c64beafc15e430bdc1f450b89;
    frame_module->f_lineno = 280;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_63, tmp_call_arg_element_191, tmp_call_arg_element_192, tmp_call_arg_element_193 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 280;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 52, tmp_list_element_1 );
    tmp_called_64 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_64 == NULL ))
    {
        tmp_called_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_64 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 281;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_194 = const_str_plain_urllib;
    tmp_call_arg_element_195 = const_str_digest_0356c23693397b6ac72c52b53054d366;
    tmp_call_arg_element_196 = const_str_digest_0356c23693397b6ac72c52b53054d366;
    frame_module->f_lineno = 281;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_64, tmp_call_arg_element_194, tmp_call_arg_element_195, tmp_call_arg_element_196 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 281;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 53, tmp_list_element_1 );
    tmp_called_65 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_65 == NULL ))
    {
        tmp_called_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_65 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 282;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_197 = const_str_plain_urllib_robotparser;
    tmp_call_arg_element_198 = const_str_plain_robotparser;
    tmp_call_arg_element_199 = const_str_digest_9d19af47c5776306ee2273813f3235e4;
    frame_module->f_lineno = 282;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_65, tmp_call_arg_element_197, tmp_call_arg_element_198, tmp_call_arg_element_199 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 282;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 54, tmp_list_element_1 );
    tmp_called_66 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_66 == NULL ))
    {
        tmp_called_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_66 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 283;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_200 = const_str_plain_xmlrpc_client;
    tmp_call_arg_element_201 = const_str_plain_xmlrpclib;
    tmp_call_arg_element_202 = const_str_digest_d468adb40f20c74c8d11c4aeb490b79e;
    frame_module->f_lineno = 283;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_66, tmp_call_arg_element_200, tmp_call_arg_element_201, tmp_call_arg_element_202 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 283;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 55, tmp_list_element_1 );
    tmp_called_67 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_67 == NULL ))
    {
        tmp_called_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_67 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 284;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_203 = const_str_plain_xmlrpc_server;
    tmp_call_arg_element_204 = const_str_plain_SimpleXMLRPCServer;
    tmp_call_arg_element_205 = const_str_digest_e7b673eef7c36db3f997aef57206960c;
    frame_module->f_lineno = 284;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_67, tmp_call_arg_element_203, tmp_call_arg_element_204, tmp_call_arg_element_205 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 284;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 56, tmp_list_element_1 );
    tmp_called_68 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_68 == NULL ))
    {
        tmp_called_68 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_68 == NULL )
    {
        Py_DECREF( tmp_assign_source_65 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 285;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_206 = const_str_plain_winreg;
    tmp_call_arg_element_207 = const_str_plain__winreg;
    frame_module->f_lineno = 285;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_68, tmp_call_arg_element_206, tmp_call_arg_element_207 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 285;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_65, 57, tmp_list_element_1 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__moved_attributes, tmp_assign_source_65 );
    tmp_iter_arg_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__moved_attributes );

    if (unlikely( tmp_iter_arg_1 == NULL ))
    {
        tmp_iter_arg_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__moved_attributes );
    }

    if ( tmp_iter_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326960 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 287;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_66 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 287;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_66;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_67 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_67 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_module->f_lineno = 287;
            goto try_finally_handler_9;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_67;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_67;
        Py_DECREF( old );
    }
    tmp_assign_source_68 = tmp_for_loop_1__iter_value.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_68 );
    tmp_setattr_target_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems );

    if (unlikely( tmp_setattr_target_1 == NULL ))
    {
        tmp_setattr_target_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__MovedItems );
    }

    if ( tmp_setattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326999 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 288;
        goto try_finally_handler_9;
    }

    tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_8 == NULL ))
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 288;
        goto try_finally_handler_9;
    }

    tmp_setattr_attr_1 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_name );
    if ( tmp_setattr_attr_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 288;
        goto try_finally_handler_9;
    }
    tmp_setattr_value_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_1 == NULL ))
    {
        tmp_setattr_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_1 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 288;
        goto try_finally_handler_9;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
    Py_DECREF( tmp_setattr_attr_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 288;
        goto try_finally_handler_9;
    }
    tmp_isinstance_inst_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_isinstance_inst_1 == NULL ))
    {
        tmp_isinstance_inst_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 289;
        goto try_finally_handler_9;
    }

    tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_isinstance_cls_1 == NULL ))
    {
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326927 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 289;
        goto try_finally_handler_9;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 289;
        goto try_finally_handler_9;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_9 == NULL ))
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327058 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 290;
        goto try_finally_handler_9;
    }

    tmp_called_69 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__add_module );
    if ( tmp_called_69 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 290;
        goto try_finally_handler_9;
    }
    tmp_call_arg_element_208 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_call_arg_element_208 == NULL ))
    {
        tmp_call_arg_element_208 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_call_arg_element_208 == NULL )
    {
        Py_DECREF( tmp_called_69 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 290;
        goto try_finally_handler_9;
    }

    tmp_binop_left_1 = const_str_digest_edd2a5056add571faece3956c804cd41;
    tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_10 == NULL ))
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_10 == NULL )
    {
        Py_DECREF( tmp_called_69 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 290;
        goto try_finally_handler_9;
    }

    tmp_binop_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_name );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_69 );

        frame_module->f_lineno = 290;
        goto try_finally_handler_9;
    }
    tmp_call_arg_element_209 = BINARY_OPERATION_ADD( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_call_arg_element_209 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_69 );

        frame_module->f_lineno = 290;
        goto try_finally_handler_9;
    }
    frame_module->f_lineno = 290;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_69, tmp_call_arg_element_208, tmp_call_arg_element_209 );
    Py_DECREF( tmp_called_69 );
    Py_DECREF( tmp_call_arg_element_209 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 290;
        goto try_finally_handler_9;
    }
    Py_DECREF( tmp_unused );
    branch_no_5:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 287;
        goto try_finally_handler_9;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_9:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_9 = frame_module->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_9;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_9 != NULL )
    {
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;

        goto frame_exception_exit_1;
    }

    goto finally_end_9;
    finally_end_9:;
    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) PyErr_Clear();

    if ( tmp_res == -1 )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 291;
        goto frame_exception_exit_1;
    }

    tmp_assattr_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__moved_attributes );

    if (unlikely( tmp_assattr_name_1 == NULL ))
    {
        tmp_assattr_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__moved_attributes );
    }

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326960 ], 39, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 293;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems );

    if (unlikely( tmp_assattr_target_1 == NULL ))
    {
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__MovedItems );
    }

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326999 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 293;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__moved_attributes, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 293;
        goto frame_exception_exit_1;
    }
    tmp_called_70 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems );

    if (unlikely( tmp_called_70 == NULL ))
    {
        tmp_called_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__MovedItems );
    }

    if ( tmp_called_70 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326999 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 295;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_210 = const_str_digest_8708d49d5772ac1590ece7b167feb91d;
    frame_module->f_lineno = 295;
    tmp_assign_source_69 = CALL_FUNCTION_WITH_ARGS1( tmp_called_70, tmp_call_arg_element_210 );
    if ( tmp_assign_source_69 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 295;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_moves, tmp_assign_source_69 );
    tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_11 == NULL ))
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327058 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 296;
        goto frame_exception_exit_1;
    }

    tmp_called_71 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain__add_module );
    if ( tmp_called_71 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 296;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_211 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_moves );

    if (unlikely( tmp_call_arg_element_211 == NULL ))
    {
        tmp_call_arg_element_211 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_moves );
    }

    if ( tmp_call_arg_element_211 == NULL )
    {
        Py_DECREF( tmp_called_71 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327089 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 296;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_212 = const_str_plain_moves;
    frame_module->f_lineno = 296;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_71, tmp_call_arg_element_211, tmp_call_arg_element_212 );
    Py_DECREF( tmp_called_71 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 296;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code
    tmp_assign_source_70 = PyTuple_New( 1 );
    tmp_tuple_element_14 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_14 == NULL ))
    {
        tmp_tuple_element_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_14 == NULL )
    {
        Py_DECREF( tmp_assign_source_70 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326858 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 299;
        goto try_finally_handler_10;
    }

    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_assign_source_70, 0, tmp_tuple_element_14 );
    assert( tmp_class_creation_8__bases.object == NULL );
    tmp_class_creation_8__bases.object = tmp_assign_source_70;

    tmp_assign_source_71 = impl_class_10_Module_six_moves_urllib_parse_of_module_six(  );
    if ( tmp_assign_source_71 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 299;
        goto try_finally_handler_10;
    }
    assert( tmp_class_creation_8__class_dict.object == NULL );
    tmp_class_creation_8__class_dict.object = tmp_assign_source_71;

    tmp_compare_left_10 = const_str_plain___metaclass__;
    tmp_compare_right_10 = tmp_class_creation_8__class_dict.object;

    tmp_cmp_In_8 = PySequence_Contains( tmp_compare_right_10, tmp_compare_left_10 );
    if ( tmp_cmp_In_8 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 299;
        goto try_finally_handler_10;
    }
    if (tmp_cmp_In_8 == 1)
    {
        goto condexpr_true_8;
    }
    else
    {
        goto condexpr_false_8;
    }
    condexpr_true_8:;
    tmp_dget_dict_8 = tmp_class_creation_8__class_dict.object;

    tmp_dget_key_8 = const_str_plain___metaclass__;
    tmp_assign_source_72 = DICT_GET_ITEM( tmp_dget_dict_8, tmp_dget_key_8 );
    if ( tmp_assign_source_72 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 299;
        goto try_finally_handler_10;
    }
    goto condexpr_end_8;
    condexpr_false_8:;
    tmp_class_bases_8 = tmp_class_creation_8__bases.object;

    tmp_assign_source_72 = SELECT_METACLASS( tmp_class_bases_8, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_8:;
    assert( tmp_class_creation_8__metaclass.object == NULL );
    tmp_class_creation_8__metaclass.object = tmp_assign_source_72;

    tmp_called_72 = tmp_class_creation_8__metaclass.object;

    tmp_call_arg_element_213 = const_str_plain_Module_six_moves_urllib_parse;
    tmp_call_arg_element_214 = tmp_class_creation_8__bases.object;

    tmp_call_arg_element_215 = tmp_class_creation_8__class_dict.object;

    frame_module->f_lineno = 299;
    tmp_assign_source_73 = CALL_FUNCTION_WITH_ARGS3( tmp_called_72, tmp_call_arg_element_213, tmp_call_arg_element_214, tmp_call_arg_element_215 );
    if ( tmp_assign_source_73 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 299;
        goto try_finally_handler_10;
    }
    assert( tmp_class_creation_8__class.object == NULL );
    tmp_class_creation_8__class.object = tmp_assign_source_73;

    tmp_assign_source_74 = tmp_class_creation_8__class.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse, tmp_assign_source_74 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_10:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_10 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_8__class.object );
    tmp_class_creation_8__class.object = NULL;

    Py_XDECREF( tmp_class_creation_8__bases.object );
    tmp_class_creation_8__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_8__class_dict.object );
    tmp_class_creation_8__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_8__metaclass.object );
    tmp_class_creation_8__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_10;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_10 != NULL )
    {
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;

        goto frame_exception_exit_1;
    }

    goto finally_end_10;
    finally_end_10:;
    tmp_assign_source_75 = PyList_New( 16 );
    tmp_called_73 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_73 == NULL ))
    {
        tmp_called_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_73 == NULL )
    {
        Py_DECREF( tmp_assign_source_75 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 304;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_216 = const_str_plain_ParseResult;
    tmp_call_arg_element_217 = const_str_plain_urlparse;
    tmp_call_arg_element_218 = const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
    frame_module->f_lineno = 304;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_73, tmp_call_arg_element_216, tmp_call_arg_element_217, tmp_call_arg_element_218 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_75 );

        frame_module->f_lineno = 304;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_75, 0, tmp_list_element_2 );
    tmp_called_74 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_74 == NULL ))
    {
        tmp_called_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_74 == NULL )
    {
        Py_DECREF( tmp_assign_source_75 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 305;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_219 = const_str_plain_SplitResult;
    tmp_call_arg_element_220 = const_str_plain_urlparse;
    tmp_call_arg_element_221 = const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
    frame_module->f_lineno = 305;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_74, tmp_call_arg_element_219, tmp_call_arg_element_220, tmp_call_arg_element_221 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_75 );

        frame_module->f_lineno = 305;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_75, 1, tmp_list_element_2 );
    tmp_called_75 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_75 == NULL ))
    {
        tmp_called_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_75 == NULL )
    {
        Py_DECREF( tmp_assign_source_75 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 306;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_222 = const_str_plain_parse_qs;
    tmp_call_arg_element_223 = const_str_plain_urlparse;
    tmp_call_arg_element_224 = const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
    frame_module->f_lineno = 306;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_75, tmp_call_arg_element_222, tmp_call_arg_element_223, tmp_call_arg_element_224 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_75 );

        frame_module->f_lineno = 306;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_75, 2, tmp_list_element_2 );
    tmp_called_76 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_76 == NULL ))
    {
        tmp_called_76 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_76 == NULL )
    {
        Py_DECREF( tmp_assign_source_75 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 307;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_225 = const_str_plain_parse_qsl;
    tmp_call_arg_element_226 = const_str_plain_urlparse;
    tmp_call_arg_element_227 = const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
    frame_module->f_lineno = 307;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_76, tmp_call_arg_element_225, tmp_call_arg_element_226, tmp_call_arg_element_227 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_75 );

        frame_module->f_lineno = 307;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_75, 3, tmp_list_element_2 );
    tmp_called_77 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_77 == NULL ))
    {
        tmp_called_77 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_77 == NULL )
    {
        Py_DECREF( tmp_assign_source_75 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 308;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_228 = const_str_plain_urldefrag;
    tmp_call_arg_element_229 = const_str_plain_urlparse;
    tmp_call_arg_element_230 = const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
    frame_module->f_lineno = 308;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_77, tmp_call_arg_element_228, tmp_call_arg_element_229, tmp_call_arg_element_230 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_75 );

        frame_module->f_lineno = 308;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_75, 4, tmp_list_element_2 );
    tmp_called_78 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_78 == NULL ))
    {
        tmp_called_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_78 == NULL )
    {
        Py_DECREF( tmp_assign_source_75 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 309;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_231 = const_str_plain_urljoin;
    tmp_call_arg_element_232 = const_str_plain_urlparse;
    tmp_call_arg_element_233 = const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
    frame_module->f_lineno = 309;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_78, tmp_call_arg_element_231, tmp_call_arg_element_232, tmp_call_arg_element_233 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_75 );

        frame_module->f_lineno = 309;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_75, 5, tmp_list_element_2 );
    tmp_called_79 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_79 == NULL ))
    {
        tmp_called_79 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_79 == NULL )
    {
        Py_DECREF( tmp_assign_source_75 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 310;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_234 = const_str_plain_urlparse;
    tmp_call_arg_element_235 = const_str_plain_urlparse;
    tmp_call_arg_element_236 = const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
    frame_module->f_lineno = 310;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_79, tmp_call_arg_element_234, tmp_call_arg_element_235, tmp_call_arg_element_236 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_75 );

        frame_module->f_lineno = 310;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_75, 6, tmp_list_element_2 );
    tmp_called_80 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_80 == NULL ))
    {
        tmp_called_80 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_80 == NULL )
    {
        Py_DECREF( tmp_assign_source_75 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 311;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_237 = const_str_plain_urlsplit;
    tmp_call_arg_element_238 = const_str_plain_urlparse;
    tmp_call_arg_element_239 = const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
    frame_module->f_lineno = 311;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_80, tmp_call_arg_element_237, tmp_call_arg_element_238, tmp_call_arg_element_239 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_75 );

        frame_module->f_lineno = 311;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_75, 7, tmp_list_element_2 );
    tmp_called_81 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_81 == NULL ))
    {
        tmp_called_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_81 == NULL )
    {
        Py_DECREF( tmp_assign_source_75 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 312;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_240 = const_str_plain_urlunparse;
    tmp_call_arg_element_241 = const_str_plain_urlparse;
    tmp_call_arg_element_242 = const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
    frame_module->f_lineno = 312;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_81, tmp_call_arg_element_240, tmp_call_arg_element_241, tmp_call_arg_element_242 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_75 );

        frame_module->f_lineno = 312;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_75, 8, tmp_list_element_2 );
    tmp_called_82 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_82 == NULL ))
    {
        tmp_called_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_82 == NULL )
    {
        Py_DECREF( tmp_assign_source_75 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 313;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_243 = const_str_plain_urlunsplit;
    tmp_call_arg_element_244 = const_str_plain_urlparse;
    tmp_call_arg_element_245 = const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
    frame_module->f_lineno = 313;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_82, tmp_call_arg_element_243, tmp_call_arg_element_244, tmp_call_arg_element_245 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_75 );

        frame_module->f_lineno = 313;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_75, 9, tmp_list_element_2 );
    tmp_called_83 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_83 == NULL ))
    {
        tmp_called_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_83 == NULL )
    {
        Py_DECREF( tmp_assign_source_75 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 314;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_246 = const_str_plain_quote;
    tmp_call_arg_element_247 = const_str_plain_urllib;
    tmp_call_arg_element_248 = const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
    frame_module->f_lineno = 314;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_83, tmp_call_arg_element_246, tmp_call_arg_element_247, tmp_call_arg_element_248 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_75 );

        frame_module->f_lineno = 314;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_75, 10, tmp_list_element_2 );
    tmp_called_84 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_84 == NULL ))
    {
        tmp_called_84 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_84 == NULL )
    {
        Py_DECREF( tmp_assign_source_75 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 315;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_249 = const_str_plain_quote_plus;
    tmp_call_arg_element_250 = const_str_plain_urllib;
    tmp_call_arg_element_251 = const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
    frame_module->f_lineno = 315;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_84, tmp_call_arg_element_249, tmp_call_arg_element_250, tmp_call_arg_element_251 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_75 );

        frame_module->f_lineno = 315;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_75, 11, tmp_list_element_2 );
    tmp_called_85 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_85 == NULL ))
    {
        tmp_called_85 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_85 == NULL )
    {
        Py_DECREF( tmp_assign_source_75 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 316;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_252 = const_str_plain_unquote;
    tmp_call_arg_element_253 = const_str_plain_urllib;
    tmp_call_arg_element_254 = const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
    frame_module->f_lineno = 316;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_85, tmp_call_arg_element_252, tmp_call_arg_element_253, tmp_call_arg_element_254 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_75 );

        frame_module->f_lineno = 316;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_75, 12, tmp_list_element_2 );
    tmp_called_86 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_86 == NULL ))
    {
        tmp_called_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_86 == NULL )
    {
        Py_DECREF( tmp_assign_source_75 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 317;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_255 = const_str_plain_unquote_plus;
    tmp_call_arg_element_256 = const_str_plain_urllib;
    tmp_call_arg_element_257 = const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
    frame_module->f_lineno = 317;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_86, tmp_call_arg_element_255, tmp_call_arg_element_256, tmp_call_arg_element_257 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_75 );

        frame_module->f_lineno = 317;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_75, 13, tmp_list_element_2 );
    tmp_called_87 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_87 == NULL ))
    {
        tmp_called_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_87 == NULL )
    {
        Py_DECREF( tmp_assign_source_75 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 318;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_258 = const_str_plain_urlencode;
    tmp_call_arg_element_259 = const_str_plain_urllib;
    tmp_call_arg_element_260 = const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
    frame_module->f_lineno = 318;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_87, tmp_call_arg_element_258, tmp_call_arg_element_259, tmp_call_arg_element_260 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_75 );

        frame_module->f_lineno = 318;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_75, 14, tmp_list_element_2 );
    tmp_called_88 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_88 == NULL ))
    {
        tmp_called_88 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_88 == NULL )
    {
        Py_DECREF( tmp_assign_source_75 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 319;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_261 = const_str_plain_splitquery;
    tmp_call_arg_element_262 = const_str_plain_urllib;
    tmp_call_arg_element_263 = const_str_digest_16d628fa9b79bd53ede39389589a2bbf;
    frame_module->f_lineno = 319;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_88, tmp_call_arg_element_261, tmp_call_arg_element_262, tmp_call_arg_element_263 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_75 );

        frame_module->f_lineno = 319;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_75, 15, tmp_list_element_2 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_parse_moved_attributes, tmp_assign_source_75 );
    tmp_iter_arg_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_parse_moved_attributes );

    if (unlikely( tmp_iter_arg_2 == NULL ))
    {
        tmp_iter_arg_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_parse_moved_attributes );
    }

    if ( tmp_iter_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327116 ], 52, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 321;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_76 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_76 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 321;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator.object == NULL );
    tmp_for_loop_2__for_iterator.object = tmp_assign_source_76;

    // Tried code
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator.object;

    tmp_assign_source_77 = ITERATOR_NEXT( tmp_next_source_2 );
    if (tmp_assign_source_77 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_2;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_module->f_lineno = 321;
            goto try_finally_handler_11;
        }
    }

    if (tmp_for_loop_2__iter_value.object == NULL)
    {
        tmp_for_loop_2__iter_value.object = tmp_assign_source_77;
    }
    else
    {
        PyObject *old = tmp_for_loop_2__iter_value.object;
        tmp_for_loop_2__iter_value.object = tmp_assign_source_77;
        Py_DECREF( old );
    }
    tmp_assign_source_78 = tmp_for_loop_2__iter_value.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_78 );
    tmp_setattr_target_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );

    if (unlikely( tmp_setattr_target_2 == NULL ))
    {
        tmp_setattr_target_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );
    }

    if ( tmp_setattr_target_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327168 ], 51, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 322;
        goto try_finally_handler_11;
    }

    tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_12 == NULL ))
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 322;
        goto try_finally_handler_11;
    }

    tmp_setattr_attr_2 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_name );
    if ( tmp_setattr_attr_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 322;
        goto try_finally_handler_11;
    }
    tmp_setattr_value_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_2 == NULL ))
    {
        tmp_setattr_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_2 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 322;
        goto try_finally_handler_11;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_2, tmp_setattr_attr_2, tmp_setattr_value_2 );
    Py_DECREF( tmp_setattr_attr_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 322;
        goto try_finally_handler_11;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 321;
        goto try_finally_handler_11;
    }
    goto loop_start_2;
    loop_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_11:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_11 = frame_module->f_lineno;
    Py_XDECREF( tmp_for_loop_2__iter_value.object );
    tmp_for_loop_2__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator.object );
    tmp_for_loop_2__for_iterator.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_11;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_11 != NULL )
    {
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;

        goto frame_exception_exit_1;
    }

    goto finally_end_11;
    finally_end_11:;
    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) PyErr_Clear();

    if ( tmp_res == -1 )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 323;
        goto frame_exception_exit_1;
    }

    tmp_assattr_name_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_parse_moved_attributes );

    if (unlikely( tmp_assattr_name_2 == NULL ))
    {
        tmp_assattr_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_parse_moved_attributes );
    }

    if ( tmp_assattr_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327116 ], 52, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 325;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );

    if (unlikely( tmp_assattr_target_2 == NULL ))
    {
        tmp_assattr_target_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );
    }

    if ( tmp_assattr_target_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327168 ], 51, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 325;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__moved_attributes, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 325;
        goto frame_exception_exit_1;
    }
    tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_13 == NULL ))
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327058 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 327;
        goto frame_exception_exit_1;
    }

    tmp_called_89 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain__add_module );
    if ( tmp_called_89 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 327;
        goto frame_exception_exit_1;
    }
    tmp_called_90 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );

    if (unlikely( tmp_called_90 == NULL ))
    {
        tmp_called_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );
    }

    if ( tmp_called_90 == NULL )
    {
        Py_DECREF( tmp_called_89 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327168 ], 51, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 327;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_265 = const_str_digest_2dabcdf82a9b3cf4ce1e16ab71cddca0;
    frame_module->f_lineno = 327;
    tmp_call_arg_element_264 = CALL_FUNCTION_WITH_ARGS1( tmp_called_90, tmp_call_arg_element_265 );
    if ( tmp_call_arg_element_264 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_89 );

        frame_module->f_lineno = 327;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_266 = const_str_digest_07ed22282f379a33c63322cb6fa7148c;
    tmp_call_arg_element_267 = const_str_digest_6581edc0a8775bd3d76c51f0a9457543;
    frame_module->f_lineno = 328;
    tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_89, tmp_call_arg_element_264, tmp_call_arg_element_266, tmp_call_arg_element_267 );
    Py_DECREF( tmp_called_89 );
    Py_DECREF( tmp_call_arg_element_264 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 328;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code
    tmp_assign_source_79 = PyTuple_New( 1 );
    tmp_tuple_element_15 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_15 == NULL ))
    {
        tmp_tuple_element_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_15 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326858 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 331;
        goto try_finally_handler_12;
    }

    Py_INCREF( tmp_tuple_element_15 );
    PyTuple_SET_ITEM( tmp_assign_source_79, 0, tmp_tuple_element_15 );
    assert( tmp_class_creation_9__bases.object == NULL );
    tmp_class_creation_9__bases.object = tmp_assign_source_79;

    tmp_assign_source_80 = impl_class_11_Module_six_moves_urllib_error_of_module_six(  );
    if ( tmp_assign_source_80 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 331;
        goto try_finally_handler_12;
    }
    assert( tmp_class_creation_9__class_dict.object == NULL );
    tmp_class_creation_9__class_dict.object = tmp_assign_source_80;

    tmp_compare_left_11 = const_str_plain___metaclass__;
    tmp_compare_right_11 = tmp_class_creation_9__class_dict.object;

    tmp_cmp_In_9 = PySequence_Contains( tmp_compare_right_11, tmp_compare_left_11 );
    if ( tmp_cmp_In_9 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 331;
        goto try_finally_handler_12;
    }
    if (tmp_cmp_In_9 == 1)
    {
        goto condexpr_true_9;
    }
    else
    {
        goto condexpr_false_9;
    }
    condexpr_true_9:;
    tmp_dget_dict_9 = tmp_class_creation_9__class_dict.object;

    tmp_dget_key_9 = const_str_plain___metaclass__;
    tmp_assign_source_81 = DICT_GET_ITEM( tmp_dget_dict_9, tmp_dget_key_9 );
    if ( tmp_assign_source_81 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 331;
        goto try_finally_handler_12;
    }
    goto condexpr_end_9;
    condexpr_false_9:;
    tmp_class_bases_9 = tmp_class_creation_9__bases.object;

    tmp_assign_source_81 = SELECT_METACLASS( tmp_class_bases_9, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_9:;
    assert( tmp_class_creation_9__metaclass.object == NULL );
    tmp_class_creation_9__metaclass.object = tmp_assign_source_81;

    tmp_called_91 = tmp_class_creation_9__metaclass.object;

    tmp_call_arg_element_268 = const_str_plain_Module_six_moves_urllib_error;
    tmp_call_arg_element_269 = tmp_class_creation_9__bases.object;

    tmp_call_arg_element_270 = tmp_class_creation_9__class_dict.object;

    frame_module->f_lineno = 331;
    tmp_assign_source_82 = CALL_FUNCTION_WITH_ARGS3( tmp_called_91, tmp_call_arg_element_268, tmp_call_arg_element_269, tmp_call_arg_element_270 );
    if ( tmp_assign_source_82 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 331;
        goto try_finally_handler_12;
    }
    assert( tmp_class_creation_9__class.object == NULL );
    tmp_class_creation_9__class.object = tmp_assign_source_82;

    tmp_assign_source_83 = tmp_class_creation_9__class.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error, tmp_assign_source_83 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_12:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_12 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_9__class.object );
    tmp_class_creation_9__class.object = NULL;

    Py_XDECREF( tmp_class_creation_9__bases.object );
    tmp_class_creation_9__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_9__class_dict.object );
    tmp_class_creation_9__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_9__metaclass.object );
    tmp_class_creation_9__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_12;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_12 != NULL )
    {
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;

        goto frame_exception_exit_1;
    }

    goto finally_end_12;
    finally_end_12:;
    tmp_assign_source_84 = PyList_New( 3 );
    tmp_called_92 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_92 == NULL ))
    {
        tmp_called_92 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_92 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 336;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_271 = const_str_plain_URLError;
    tmp_call_arg_element_272 = const_str_plain_urllib2;
    tmp_call_arg_element_273 = const_str_digest_eed4497c64beafc15e430bdc1f450b89;
    frame_module->f_lineno = 336;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_92, tmp_call_arg_element_271, tmp_call_arg_element_272, tmp_call_arg_element_273 );
    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        frame_module->f_lineno = 336;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_84, 0, tmp_list_element_3 );
    tmp_called_93 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_93 == NULL ))
    {
        tmp_called_93 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_93 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 337;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_274 = const_str_plain_HTTPError;
    tmp_call_arg_element_275 = const_str_plain_urllib2;
    tmp_call_arg_element_276 = const_str_digest_eed4497c64beafc15e430bdc1f450b89;
    frame_module->f_lineno = 337;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_93, tmp_call_arg_element_274, tmp_call_arg_element_275, tmp_call_arg_element_276 );
    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        frame_module->f_lineno = 337;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_84, 1, tmp_list_element_3 );
    tmp_called_94 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_94 == NULL ))
    {
        tmp_called_94 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_94 == NULL )
    {
        Py_DECREF( tmp_assign_source_84 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 338;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_277 = const_str_plain_ContentTooShortError;
    tmp_call_arg_element_278 = const_str_plain_urllib;
    tmp_call_arg_element_279 = const_str_digest_eed4497c64beafc15e430bdc1f450b89;
    frame_module->f_lineno = 338;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_94, tmp_call_arg_element_277, tmp_call_arg_element_278, tmp_call_arg_element_279 );
    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_84 );

        frame_module->f_lineno = 338;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_84, 2, tmp_list_element_3 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_error_moved_attributes, tmp_assign_source_84 );
    tmp_iter_arg_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_error_moved_attributes );

    if (unlikely( tmp_iter_arg_3 == NULL ))
    {
        tmp_iter_arg_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_error_moved_attributes );
    }

    if ( tmp_iter_arg_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327219 ], 52, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 340;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_85 = MAKE_ITERATOR( tmp_iter_arg_3 );
    if ( tmp_assign_source_85 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 340;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_3__for_iterator.object == NULL );
    tmp_for_loop_3__for_iterator.object = tmp_assign_source_85;

    // Tried code
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator.object;

    tmp_assign_source_86 = ITERATOR_NEXT( tmp_next_source_3 );
    if (tmp_assign_source_86 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_3;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_module->f_lineno = 340;
            goto try_finally_handler_13;
        }
    }

    if (tmp_for_loop_3__iter_value.object == NULL)
    {
        tmp_for_loop_3__iter_value.object = tmp_assign_source_86;
    }
    else
    {
        PyObject *old = tmp_for_loop_3__iter_value.object;
        tmp_for_loop_3__iter_value.object = tmp_assign_source_86;
        Py_DECREF( old );
    }
    tmp_assign_source_87 = tmp_for_loop_3__iter_value.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_87 );
    tmp_setattr_target_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );

    if (unlikely( tmp_setattr_target_3 == NULL ))
    {
        tmp_setattr_target_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );
    }

    if ( tmp_setattr_target_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327271 ], 51, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 341;
        goto try_finally_handler_13;
    }

    tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_14 == NULL ))
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 341;
        goto try_finally_handler_13;
    }

    tmp_setattr_attr_3 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_name );
    if ( tmp_setattr_attr_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 341;
        goto try_finally_handler_13;
    }
    tmp_setattr_value_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_3 == NULL ))
    {
        tmp_setattr_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_3 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 341;
        goto try_finally_handler_13;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_3, tmp_setattr_attr_3, tmp_setattr_value_3 );
    Py_DECREF( tmp_setattr_attr_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 341;
        goto try_finally_handler_13;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 340;
        goto try_finally_handler_13;
    }
    goto loop_start_3;
    loop_end_3:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_13:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_13 = frame_module->f_lineno;
    Py_XDECREF( tmp_for_loop_3__iter_value.object );
    tmp_for_loop_3__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_3__for_iterator.object );
    tmp_for_loop_3__for_iterator.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_13;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_13 != NULL )
    {
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;

        goto frame_exception_exit_1;
    }

    goto finally_end_13;
    finally_end_13:;
    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) PyErr_Clear();

    if ( tmp_res == -1 )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 342;
        goto frame_exception_exit_1;
    }

    tmp_assattr_name_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_error_moved_attributes );

    if (unlikely( tmp_assattr_name_3 == NULL ))
    {
        tmp_assattr_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_error_moved_attributes );
    }

    if ( tmp_assattr_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327219 ], 52, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 344;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );

    if (unlikely( tmp_assattr_target_3 == NULL ))
    {
        tmp_assattr_target_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );
    }

    if ( tmp_assattr_target_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327271 ], 51, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 344;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__moved_attributes, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 344;
        goto frame_exception_exit_1;
    }
    tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_15 == NULL ))
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327058 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 346;
        goto frame_exception_exit_1;
    }

    tmp_called_95 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain__add_module );
    if ( tmp_called_95 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 346;
        goto frame_exception_exit_1;
    }
    tmp_called_96 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );

    if (unlikely( tmp_called_96 == NULL ))
    {
        tmp_called_96 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );
    }

    if ( tmp_called_96 == NULL )
    {
        Py_DECREF( tmp_called_95 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327271 ], 51, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 346;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_281 = const_str_digest_29132ab63318318953e9cfb883997203;
    frame_module->f_lineno = 346;
    tmp_call_arg_element_280 = CALL_FUNCTION_WITH_ARGS1( tmp_called_96, tmp_call_arg_element_281 );
    if ( tmp_call_arg_element_280 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_95 );

        frame_module->f_lineno = 346;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_282 = const_str_digest_0821e86cdc90e3da738c005321baa64b;
    tmp_call_arg_element_283 = const_str_digest_059f0166b6de8c28ae0fd2e8a09cca3c;
    frame_module->f_lineno = 347;
    tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_95, tmp_call_arg_element_280, tmp_call_arg_element_282, tmp_call_arg_element_283 );
    Py_DECREF( tmp_called_95 );
    Py_DECREF( tmp_call_arg_element_280 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 347;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code
    tmp_assign_source_88 = PyTuple_New( 1 );
    tmp_tuple_element_16 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_16 == NULL ))
    {
        tmp_tuple_element_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_16 == NULL )
    {
        Py_DECREF( tmp_assign_source_88 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326858 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 350;
        goto try_finally_handler_14;
    }

    Py_INCREF( tmp_tuple_element_16 );
    PyTuple_SET_ITEM( tmp_assign_source_88, 0, tmp_tuple_element_16 );
    assert( tmp_class_creation_10__bases.object == NULL );
    tmp_class_creation_10__bases.object = tmp_assign_source_88;

    tmp_assign_source_89 = impl_class_12_Module_six_moves_urllib_request_of_module_six(  );
    if ( tmp_assign_source_89 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 350;
        goto try_finally_handler_14;
    }
    assert( tmp_class_creation_10__class_dict.object == NULL );
    tmp_class_creation_10__class_dict.object = tmp_assign_source_89;

    tmp_compare_left_12 = const_str_plain___metaclass__;
    tmp_compare_right_12 = tmp_class_creation_10__class_dict.object;

    tmp_cmp_In_10 = PySequence_Contains( tmp_compare_right_12, tmp_compare_left_12 );
    if ( tmp_cmp_In_10 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 350;
        goto try_finally_handler_14;
    }
    if (tmp_cmp_In_10 == 1)
    {
        goto condexpr_true_10;
    }
    else
    {
        goto condexpr_false_10;
    }
    condexpr_true_10:;
    tmp_dget_dict_10 = tmp_class_creation_10__class_dict.object;

    tmp_dget_key_10 = const_str_plain___metaclass__;
    tmp_assign_source_90 = DICT_GET_ITEM( tmp_dget_dict_10, tmp_dget_key_10 );
    if ( tmp_assign_source_90 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 350;
        goto try_finally_handler_14;
    }
    goto condexpr_end_10;
    condexpr_false_10:;
    tmp_class_bases_10 = tmp_class_creation_10__bases.object;

    tmp_assign_source_90 = SELECT_METACLASS( tmp_class_bases_10, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_10:;
    assert( tmp_class_creation_10__metaclass.object == NULL );
    tmp_class_creation_10__metaclass.object = tmp_assign_source_90;

    tmp_called_97 = tmp_class_creation_10__metaclass.object;

    tmp_call_arg_element_284 = const_str_plain_Module_six_moves_urllib_request;
    tmp_call_arg_element_285 = tmp_class_creation_10__bases.object;

    tmp_call_arg_element_286 = tmp_class_creation_10__class_dict.object;

    frame_module->f_lineno = 350;
    tmp_assign_source_91 = CALL_FUNCTION_WITH_ARGS3( tmp_called_97, tmp_call_arg_element_284, tmp_call_arg_element_285, tmp_call_arg_element_286 );
    if ( tmp_assign_source_91 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 350;
        goto try_finally_handler_14;
    }
    assert( tmp_class_creation_10__class.object == NULL );
    tmp_class_creation_10__class.object = tmp_assign_source_91;

    tmp_assign_source_92 = tmp_class_creation_10__class.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request, tmp_assign_source_92 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_14:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_14 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_10__class.object );
    tmp_class_creation_10__class.object = NULL;

    Py_XDECREF( tmp_class_creation_10__bases.object );
    tmp_class_creation_10__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_10__class_dict.object );
    tmp_class_creation_10__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_10__metaclass.object );
    tmp_class_creation_10__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_14;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_14 != NULL )
    {
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;

        goto frame_exception_exit_1;
    }

    goto finally_end_14;
    finally_end_14:;
    tmp_assign_source_93 = PyList_New( 33 );
    tmp_called_98 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_98 == NULL ))
    {
        tmp_called_98 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_98 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 355;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_287 = const_str_plain_urlopen;
    tmp_call_arg_element_288 = const_str_plain_urllib2;
    tmp_call_arg_element_289 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 355;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_98, tmp_call_arg_element_287, tmp_call_arg_element_288, tmp_call_arg_element_289 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 355;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 0, tmp_list_element_4 );
    tmp_called_99 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_99 == NULL ))
    {
        tmp_called_99 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_99 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 356;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_290 = const_str_plain_install_opener;
    tmp_call_arg_element_291 = const_str_plain_urllib2;
    tmp_call_arg_element_292 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 356;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_99, tmp_call_arg_element_290, tmp_call_arg_element_291, tmp_call_arg_element_292 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 356;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 1, tmp_list_element_4 );
    tmp_called_100 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_100 == NULL ))
    {
        tmp_called_100 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_100 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 357;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_293 = const_str_plain_build_opener;
    tmp_call_arg_element_294 = const_str_plain_urllib2;
    tmp_call_arg_element_295 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 357;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_100, tmp_call_arg_element_293, tmp_call_arg_element_294, tmp_call_arg_element_295 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 357;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 2, tmp_list_element_4 );
    tmp_called_101 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_101 == NULL ))
    {
        tmp_called_101 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_101 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 358;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_296 = const_str_plain_pathname2url;
    tmp_call_arg_element_297 = const_str_plain_urllib;
    tmp_call_arg_element_298 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 358;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_101, tmp_call_arg_element_296, tmp_call_arg_element_297, tmp_call_arg_element_298 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 358;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 3, tmp_list_element_4 );
    tmp_called_102 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_102 == NULL ))
    {
        tmp_called_102 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_102 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 359;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_299 = const_str_plain_url2pathname;
    tmp_call_arg_element_300 = const_str_plain_urllib;
    tmp_call_arg_element_301 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 359;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_102, tmp_call_arg_element_299, tmp_call_arg_element_300, tmp_call_arg_element_301 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 359;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 4, tmp_list_element_4 );
    tmp_called_103 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_103 == NULL ))
    {
        tmp_called_103 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_103 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 360;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_302 = const_str_plain_getproxies;
    tmp_call_arg_element_303 = const_str_plain_urllib;
    tmp_call_arg_element_304 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 360;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_103, tmp_call_arg_element_302, tmp_call_arg_element_303, tmp_call_arg_element_304 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 360;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 5, tmp_list_element_4 );
    tmp_called_104 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_104 == NULL ))
    {
        tmp_called_104 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_104 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 361;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_305 = const_str_plain_Request;
    tmp_call_arg_element_306 = const_str_plain_urllib2;
    tmp_call_arg_element_307 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 361;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_104, tmp_call_arg_element_305, tmp_call_arg_element_306, tmp_call_arg_element_307 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 361;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 6, tmp_list_element_4 );
    tmp_called_105 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_105 == NULL ))
    {
        tmp_called_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_105 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 362;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_308 = const_str_plain_OpenerDirector;
    tmp_call_arg_element_309 = const_str_plain_urllib2;
    tmp_call_arg_element_310 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 362;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_105, tmp_call_arg_element_308, tmp_call_arg_element_309, tmp_call_arg_element_310 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 362;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 7, tmp_list_element_4 );
    tmp_called_106 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_106 == NULL ))
    {
        tmp_called_106 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_106 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 363;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_311 = const_str_plain_HTTPDefaultErrorHandler;
    tmp_call_arg_element_312 = const_str_plain_urllib2;
    tmp_call_arg_element_313 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 363;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_106, tmp_call_arg_element_311, tmp_call_arg_element_312, tmp_call_arg_element_313 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 363;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 8, tmp_list_element_4 );
    tmp_called_107 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_107 == NULL ))
    {
        tmp_called_107 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_107 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 364;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_314 = const_str_plain_HTTPRedirectHandler;
    tmp_call_arg_element_315 = const_str_plain_urllib2;
    tmp_call_arg_element_316 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 364;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_107, tmp_call_arg_element_314, tmp_call_arg_element_315, tmp_call_arg_element_316 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 364;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 9, tmp_list_element_4 );
    tmp_called_108 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_108 == NULL ))
    {
        tmp_called_108 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_108 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 365;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_317 = const_str_plain_HTTPCookieProcessor;
    tmp_call_arg_element_318 = const_str_plain_urllib2;
    tmp_call_arg_element_319 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 365;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_108, tmp_call_arg_element_317, tmp_call_arg_element_318, tmp_call_arg_element_319 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 365;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 10, tmp_list_element_4 );
    tmp_called_109 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_109 == NULL ))
    {
        tmp_called_109 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_109 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 366;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_320 = const_str_plain_ProxyHandler;
    tmp_call_arg_element_321 = const_str_plain_urllib2;
    tmp_call_arg_element_322 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 366;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_109, tmp_call_arg_element_320, tmp_call_arg_element_321, tmp_call_arg_element_322 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 366;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 11, tmp_list_element_4 );
    tmp_called_110 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_110 == NULL ))
    {
        tmp_called_110 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_110 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 367;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_323 = const_str_plain_BaseHandler;
    tmp_call_arg_element_324 = const_str_plain_urllib2;
    tmp_call_arg_element_325 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 367;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_110, tmp_call_arg_element_323, tmp_call_arg_element_324, tmp_call_arg_element_325 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 367;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 12, tmp_list_element_4 );
    tmp_called_111 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_111 == NULL ))
    {
        tmp_called_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_111 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 368;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_326 = const_str_plain_HTTPPasswordMgr;
    tmp_call_arg_element_327 = const_str_plain_urllib2;
    tmp_call_arg_element_328 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 368;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_111, tmp_call_arg_element_326, tmp_call_arg_element_327, tmp_call_arg_element_328 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 368;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 13, tmp_list_element_4 );
    tmp_called_112 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_112 == NULL ))
    {
        tmp_called_112 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_112 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 369;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_329 = const_str_plain_HTTPPasswordMgrWithDefaultRealm;
    tmp_call_arg_element_330 = const_str_plain_urllib2;
    tmp_call_arg_element_331 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 369;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_112, tmp_call_arg_element_329, tmp_call_arg_element_330, tmp_call_arg_element_331 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 369;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 14, tmp_list_element_4 );
    tmp_called_113 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_113 == NULL ))
    {
        tmp_called_113 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_113 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 370;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_332 = const_str_plain_AbstractBasicAuthHandler;
    tmp_call_arg_element_333 = const_str_plain_urllib2;
    tmp_call_arg_element_334 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 370;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_113, tmp_call_arg_element_332, tmp_call_arg_element_333, tmp_call_arg_element_334 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 370;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 15, tmp_list_element_4 );
    tmp_called_114 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_114 == NULL ))
    {
        tmp_called_114 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_114 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 371;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_335 = const_str_plain_HTTPBasicAuthHandler;
    tmp_call_arg_element_336 = const_str_plain_urllib2;
    tmp_call_arg_element_337 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 371;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_114, tmp_call_arg_element_335, tmp_call_arg_element_336, tmp_call_arg_element_337 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 371;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 16, tmp_list_element_4 );
    tmp_called_115 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_115 == NULL ))
    {
        tmp_called_115 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_115 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 372;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_338 = const_str_plain_ProxyBasicAuthHandler;
    tmp_call_arg_element_339 = const_str_plain_urllib2;
    tmp_call_arg_element_340 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 372;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_115, tmp_call_arg_element_338, tmp_call_arg_element_339, tmp_call_arg_element_340 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 372;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 17, tmp_list_element_4 );
    tmp_called_116 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_116 == NULL ))
    {
        tmp_called_116 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_116 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 373;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_341 = const_str_plain_AbstractDigestAuthHandler;
    tmp_call_arg_element_342 = const_str_plain_urllib2;
    tmp_call_arg_element_343 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 373;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_116, tmp_call_arg_element_341, tmp_call_arg_element_342, tmp_call_arg_element_343 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 373;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 18, tmp_list_element_4 );
    tmp_called_117 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_117 == NULL ))
    {
        tmp_called_117 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_117 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 374;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_344 = const_str_plain_HTTPDigestAuthHandler;
    tmp_call_arg_element_345 = const_str_plain_urllib2;
    tmp_call_arg_element_346 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 374;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_117, tmp_call_arg_element_344, tmp_call_arg_element_345, tmp_call_arg_element_346 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 374;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 19, tmp_list_element_4 );
    tmp_called_118 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_118 == NULL ))
    {
        tmp_called_118 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_118 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 375;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_347 = const_str_plain_ProxyDigestAuthHandler;
    tmp_call_arg_element_348 = const_str_plain_urllib2;
    tmp_call_arg_element_349 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 375;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_118, tmp_call_arg_element_347, tmp_call_arg_element_348, tmp_call_arg_element_349 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 375;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 20, tmp_list_element_4 );
    tmp_called_119 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_119 == NULL ))
    {
        tmp_called_119 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_119 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 376;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_350 = const_str_plain_HTTPHandler;
    tmp_call_arg_element_351 = const_str_plain_urllib2;
    tmp_call_arg_element_352 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 376;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_119, tmp_call_arg_element_350, tmp_call_arg_element_351, tmp_call_arg_element_352 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 376;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 21, tmp_list_element_4 );
    tmp_called_120 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_120 == NULL ))
    {
        tmp_called_120 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_120 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 377;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_353 = const_str_plain_HTTPSHandler;
    tmp_call_arg_element_354 = const_str_plain_urllib2;
    tmp_call_arg_element_355 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 377;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_120, tmp_call_arg_element_353, tmp_call_arg_element_354, tmp_call_arg_element_355 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 377;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 22, tmp_list_element_4 );
    tmp_called_121 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_121 == NULL ))
    {
        tmp_called_121 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_121 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 378;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_356 = const_str_plain_FileHandler;
    tmp_call_arg_element_357 = const_str_plain_urllib2;
    tmp_call_arg_element_358 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 378;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_121, tmp_call_arg_element_356, tmp_call_arg_element_357, tmp_call_arg_element_358 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 378;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 23, tmp_list_element_4 );
    tmp_called_122 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_122 == NULL ))
    {
        tmp_called_122 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_122 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 379;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_359 = const_str_plain_FTPHandler;
    tmp_call_arg_element_360 = const_str_plain_urllib2;
    tmp_call_arg_element_361 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 379;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_122, tmp_call_arg_element_359, tmp_call_arg_element_360, tmp_call_arg_element_361 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 379;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 24, tmp_list_element_4 );
    tmp_called_123 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_123 == NULL ))
    {
        tmp_called_123 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_123 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 380;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_362 = const_str_plain_CacheFTPHandler;
    tmp_call_arg_element_363 = const_str_plain_urllib2;
    tmp_call_arg_element_364 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 380;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_123, tmp_call_arg_element_362, tmp_call_arg_element_363, tmp_call_arg_element_364 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 380;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 25, tmp_list_element_4 );
    tmp_called_124 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_124 == NULL ))
    {
        tmp_called_124 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_124 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 381;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_365 = const_str_plain_UnknownHandler;
    tmp_call_arg_element_366 = const_str_plain_urllib2;
    tmp_call_arg_element_367 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 381;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_124, tmp_call_arg_element_365, tmp_call_arg_element_366, tmp_call_arg_element_367 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 381;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 26, tmp_list_element_4 );
    tmp_called_125 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_125 == NULL ))
    {
        tmp_called_125 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_125 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 382;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_368 = const_str_plain_HTTPErrorProcessor;
    tmp_call_arg_element_369 = const_str_plain_urllib2;
    tmp_call_arg_element_370 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 382;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_125, tmp_call_arg_element_368, tmp_call_arg_element_369, tmp_call_arg_element_370 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 382;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 27, tmp_list_element_4 );
    tmp_called_126 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_126 == NULL ))
    {
        tmp_called_126 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_126 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 383;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_371 = const_str_plain_urlretrieve;
    tmp_call_arg_element_372 = const_str_plain_urllib;
    tmp_call_arg_element_373 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 383;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_126, tmp_call_arg_element_371, tmp_call_arg_element_372, tmp_call_arg_element_373 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 383;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 28, tmp_list_element_4 );
    tmp_called_127 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_127 == NULL ))
    {
        tmp_called_127 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_127 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 384;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_374 = const_str_plain_urlcleanup;
    tmp_call_arg_element_375 = const_str_plain_urllib;
    tmp_call_arg_element_376 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 384;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_127, tmp_call_arg_element_374, tmp_call_arg_element_375, tmp_call_arg_element_376 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 384;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 29, tmp_list_element_4 );
    tmp_called_128 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_128 == NULL ))
    {
        tmp_called_128 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_128 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 385;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_377 = const_str_plain_URLopener;
    tmp_call_arg_element_378 = const_str_plain_urllib;
    tmp_call_arg_element_379 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 385;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_128, tmp_call_arg_element_377, tmp_call_arg_element_378, tmp_call_arg_element_379 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 385;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 30, tmp_list_element_4 );
    tmp_called_129 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_129 == NULL ))
    {
        tmp_called_129 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_129 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 386;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_380 = const_str_plain_FancyURLopener;
    tmp_call_arg_element_381 = const_str_plain_urllib;
    tmp_call_arg_element_382 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 386;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_129, tmp_call_arg_element_380, tmp_call_arg_element_381, tmp_call_arg_element_382 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 386;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 31, tmp_list_element_4 );
    tmp_called_130 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_130 == NULL ))
    {
        tmp_called_130 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_130 == NULL )
    {
        Py_DECREF( tmp_assign_source_93 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 387;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_383 = const_str_plain_proxy_bypass;
    tmp_call_arg_element_384 = const_str_plain_urllib;
    tmp_call_arg_element_385 = const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe;
    frame_module->f_lineno = 387;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_130, tmp_call_arg_element_383, tmp_call_arg_element_384, tmp_call_arg_element_385 );
    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_93 );

        frame_module->f_lineno = 387;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_93, 32, tmp_list_element_4 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_request_moved_attributes, tmp_assign_source_93 );
    tmp_iter_arg_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_request_moved_attributes );

    if (unlikely( tmp_iter_arg_4 == NULL ))
    {
        tmp_iter_arg_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_request_moved_attributes );
    }

    if ( tmp_iter_arg_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327322 ], 54, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 389;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_94 = MAKE_ITERATOR( tmp_iter_arg_4 );
    if ( tmp_assign_source_94 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 389;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_4__for_iterator.object == NULL );
    tmp_for_loop_4__for_iterator.object = tmp_assign_source_94;

    // Tried code
    loop_start_4:;
    tmp_next_source_4 = tmp_for_loop_4__for_iterator.object;

    tmp_assign_source_95 = ITERATOR_NEXT( tmp_next_source_4 );
    if (tmp_assign_source_95 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_4;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_module->f_lineno = 389;
            goto try_finally_handler_15;
        }
    }

    if (tmp_for_loop_4__iter_value.object == NULL)
    {
        tmp_for_loop_4__iter_value.object = tmp_assign_source_95;
    }
    else
    {
        PyObject *old = tmp_for_loop_4__iter_value.object;
        tmp_for_loop_4__iter_value.object = tmp_assign_source_95;
        Py_DECREF( old );
    }
    tmp_assign_source_96 = tmp_for_loop_4__iter_value.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_96 );
    tmp_setattr_target_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );

    if (unlikely( tmp_setattr_target_4 == NULL ))
    {
        tmp_setattr_target_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );
    }

    if ( tmp_setattr_target_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327376 ], 53, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 390;
        goto try_finally_handler_15;
    }

    tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_16 == NULL ))
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_16 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 390;
        goto try_finally_handler_15;
    }

    tmp_setattr_attr_4 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_name );
    if ( tmp_setattr_attr_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 390;
        goto try_finally_handler_15;
    }
    tmp_setattr_value_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_4 == NULL ))
    {
        tmp_setattr_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_4 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 390;
        goto try_finally_handler_15;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_4, tmp_setattr_attr_4, tmp_setattr_value_4 );
    Py_DECREF( tmp_setattr_attr_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 390;
        goto try_finally_handler_15;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 389;
        goto try_finally_handler_15;
    }
    goto loop_start_4;
    loop_end_4:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_15:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_15 = frame_module->f_lineno;
    Py_XDECREF( tmp_for_loop_4__iter_value.object );
    tmp_for_loop_4__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_4__for_iterator.object );
    tmp_for_loop_4__for_iterator.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_15;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_15 != NULL )
    {
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;

        goto frame_exception_exit_1;
    }

    goto finally_end_15;
    finally_end_15:;
    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) PyErr_Clear();

    if ( tmp_res == -1 )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 391;
        goto frame_exception_exit_1;
    }

    tmp_assattr_name_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_request_moved_attributes );

    if (unlikely( tmp_assattr_name_4 == NULL ))
    {
        tmp_assattr_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_request_moved_attributes );
    }

    if ( tmp_assattr_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327322 ], 54, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 393;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );

    if (unlikely( tmp_assattr_target_4 == NULL ))
    {
        tmp_assattr_target_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );
    }

    if ( tmp_assattr_target_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327376 ], 53, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 393;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain__moved_attributes, tmp_assattr_name_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 393;
        goto frame_exception_exit_1;
    }
    tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_17 == NULL ))
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_17 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327058 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 395;
        goto frame_exception_exit_1;
    }

    tmp_called_131 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain__add_module );
    if ( tmp_called_131 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 395;
        goto frame_exception_exit_1;
    }
    tmp_called_132 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );

    if (unlikely( tmp_called_132 == NULL ))
    {
        tmp_called_132 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );
    }

    if ( tmp_called_132 == NULL )
    {
        Py_DECREF( tmp_called_131 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327376 ], 53, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 395;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_387 = const_str_digest_56b31a568cf176837a5c869e591c5b4c;
    frame_module->f_lineno = 395;
    tmp_call_arg_element_386 = CALL_FUNCTION_WITH_ARGS1( tmp_called_132, tmp_call_arg_element_387 );
    if ( tmp_call_arg_element_386 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_131 );

        frame_module->f_lineno = 395;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_388 = const_str_digest_7493ab77aa1289d14c9fc8089c1e4ac1;
    tmp_call_arg_element_389 = const_str_digest_1a742acb89687d10674efec310cd2bef;
    frame_module->f_lineno = 396;
    tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_131, tmp_call_arg_element_386, tmp_call_arg_element_388, tmp_call_arg_element_389 );
    Py_DECREF( tmp_called_131 );
    Py_DECREF( tmp_call_arg_element_386 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 396;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code
    tmp_assign_source_97 = PyTuple_New( 1 );
    tmp_tuple_element_17 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_17 == NULL ))
    {
        tmp_tuple_element_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_17 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326858 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 399;
        goto try_finally_handler_16;
    }

    Py_INCREF( tmp_tuple_element_17 );
    PyTuple_SET_ITEM( tmp_assign_source_97, 0, tmp_tuple_element_17 );
    assert( tmp_class_creation_11__bases.object == NULL );
    tmp_class_creation_11__bases.object = tmp_assign_source_97;

    tmp_assign_source_98 = impl_class_13_Module_six_moves_urllib_response_of_module_six(  );
    if ( tmp_assign_source_98 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 399;
        goto try_finally_handler_16;
    }
    assert( tmp_class_creation_11__class_dict.object == NULL );
    tmp_class_creation_11__class_dict.object = tmp_assign_source_98;

    tmp_compare_left_13 = const_str_plain___metaclass__;
    tmp_compare_right_13 = tmp_class_creation_11__class_dict.object;

    tmp_cmp_In_11 = PySequence_Contains( tmp_compare_right_13, tmp_compare_left_13 );
    if ( tmp_cmp_In_11 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 399;
        goto try_finally_handler_16;
    }
    if (tmp_cmp_In_11 == 1)
    {
        goto condexpr_true_11;
    }
    else
    {
        goto condexpr_false_11;
    }
    condexpr_true_11:;
    tmp_dget_dict_11 = tmp_class_creation_11__class_dict.object;

    tmp_dget_key_11 = const_str_plain___metaclass__;
    tmp_assign_source_99 = DICT_GET_ITEM( tmp_dget_dict_11, tmp_dget_key_11 );
    if ( tmp_assign_source_99 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 399;
        goto try_finally_handler_16;
    }
    goto condexpr_end_11;
    condexpr_false_11:;
    tmp_class_bases_11 = tmp_class_creation_11__bases.object;

    tmp_assign_source_99 = SELECT_METACLASS( tmp_class_bases_11, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_11:;
    assert( tmp_class_creation_11__metaclass.object == NULL );
    tmp_class_creation_11__metaclass.object = tmp_assign_source_99;

    tmp_called_133 = tmp_class_creation_11__metaclass.object;

    tmp_call_arg_element_390 = const_str_plain_Module_six_moves_urllib_response;
    tmp_call_arg_element_391 = tmp_class_creation_11__bases.object;

    tmp_call_arg_element_392 = tmp_class_creation_11__class_dict.object;

    frame_module->f_lineno = 399;
    tmp_assign_source_100 = CALL_FUNCTION_WITH_ARGS3( tmp_called_133, tmp_call_arg_element_390, tmp_call_arg_element_391, tmp_call_arg_element_392 );
    if ( tmp_assign_source_100 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 399;
        goto try_finally_handler_16;
    }
    assert( tmp_class_creation_11__class.object == NULL );
    tmp_class_creation_11__class.object = tmp_assign_source_100;

    tmp_assign_source_101 = tmp_class_creation_11__class.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response, tmp_assign_source_101 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_16:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_16 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_11__class.object );
    tmp_class_creation_11__class.object = NULL;

    Py_XDECREF( tmp_class_creation_11__bases.object );
    tmp_class_creation_11__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_11__class_dict.object );
    tmp_class_creation_11__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_11__metaclass.object );
    tmp_class_creation_11__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_16;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_16 != NULL )
    {
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;

        goto frame_exception_exit_1;
    }

    goto finally_end_16;
    finally_end_16:;
    tmp_assign_source_102 = PyList_New( 4 );
    tmp_called_134 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_134 == NULL ))
    {
        tmp_called_134 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_134 == NULL )
    {
        Py_DECREF( tmp_assign_source_102 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 404;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_393 = const_str_plain_addbase;
    tmp_call_arg_element_394 = const_str_plain_urllib;
    tmp_call_arg_element_395 = const_str_digest_9d50ac5ae24ef4440e8564c511f58900;
    frame_module->f_lineno = 404;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_134, tmp_call_arg_element_393, tmp_call_arg_element_394, tmp_call_arg_element_395 );
    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_102 );

        frame_module->f_lineno = 404;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_102, 0, tmp_list_element_5 );
    tmp_called_135 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_135 == NULL ))
    {
        tmp_called_135 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_135 == NULL )
    {
        Py_DECREF( tmp_assign_source_102 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 405;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_396 = const_str_plain_addclosehook;
    tmp_call_arg_element_397 = const_str_plain_urllib;
    tmp_call_arg_element_398 = const_str_digest_9d50ac5ae24ef4440e8564c511f58900;
    frame_module->f_lineno = 405;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_135, tmp_call_arg_element_396, tmp_call_arg_element_397, tmp_call_arg_element_398 );
    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_102 );

        frame_module->f_lineno = 405;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_102, 1, tmp_list_element_5 );
    tmp_called_136 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_136 == NULL ))
    {
        tmp_called_136 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_136 == NULL )
    {
        Py_DECREF( tmp_assign_source_102 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 406;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_399 = const_str_plain_addinfo;
    tmp_call_arg_element_400 = const_str_plain_urllib;
    tmp_call_arg_element_401 = const_str_digest_9d50ac5ae24ef4440e8564c511f58900;
    frame_module->f_lineno = 406;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_136, tmp_call_arg_element_399, tmp_call_arg_element_400, tmp_call_arg_element_401 );
    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_102 );

        frame_module->f_lineno = 406;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_102, 2, tmp_list_element_5 );
    tmp_called_137 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_137 == NULL ))
    {
        tmp_called_137 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_137 == NULL )
    {
        Py_DECREF( tmp_assign_source_102 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 407;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_402 = const_str_plain_addinfourl;
    tmp_call_arg_element_403 = const_str_plain_urllib;
    tmp_call_arg_element_404 = const_str_digest_9d50ac5ae24ef4440e8564c511f58900;
    frame_module->f_lineno = 407;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_137, tmp_call_arg_element_402, tmp_call_arg_element_403, tmp_call_arg_element_404 );
    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_102 );

        frame_module->f_lineno = 407;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_102, 3, tmp_list_element_5 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_response_moved_attributes, tmp_assign_source_102 );
    tmp_iter_arg_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_response_moved_attributes );

    if (unlikely( tmp_iter_arg_5 == NULL ))
    {
        tmp_iter_arg_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_response_moved_attributes );
    }

    if ( tmp_iter_arg_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327429 ], 55, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 409;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_103 = MAKE_ITERATOR( tmp_iter_arg_5 );
    if ( tmp_assign_source_103 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 409;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_5__for_iterator.object == NULL );
    tmp_for_loop_5__for_iterator.object = tmp_assign_source_103;

    // Tried code
    loop_start_5:;
    tmp_next_source_5 = tmp_for_loop_5__for_iterator.object;

    tmp_assign_source_104 = ITERATOR_NEXT( tmp_next_source_5 );
    if (tmp_assign_source_104 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_5;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_module->f_lineno = 409;
            goto try_finally_handler_17;
        }
    }

    if (tmp_for_loop_5__iter_value.object == NULL)
    {
        tmp_for_loop_5__iter_value.object = tmp_assign_source_104;
    }
    else
    {
        PyObject *old = tmp_for_loop_5__iter_value.object;
        tmp_for_loop_5__iter_value.object = tmp_assign_source_104;
        Py_DECREF( old );
    }
    tmp_assign_source_105 = tmp_for_loop_5__iter_value.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_105 );
    tmp_setattr_target_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );

    if (unlikely( tmp_setattr_target_5 == NULL ))
    {
        tmp_setattr_target_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );
    }

    if ( tmp_setattr_target_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327484 ], 54, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 410;
        goto try_finally_handler_17;
    }

    tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_18 == NULL ))
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_18 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 410;
        goto try_finally_handler_17;
    }

    tmp_setattr_attr_5 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_name );
    if ( tmp_setattr_attr_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 410;
        goto try_finally_handler_17;
    }
    tmp_setattr_value_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_5 == NULL ))
    {
        tmp_setattr_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_5 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 410;
        goto try_finally_handler_17;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_5, tmp_setattr_attr_5, tmp_setattr_value_5 );
    Py_DECREF( tmp_setattr_attr_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 410;
        goto try_finally_handler_17;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 409;
        goto try_finally_handler_17;
    }
    goto loop_start_5;
    loop_end_5:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_17:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_17 = frame_module->f_lineno;
    Py_XDECREF( tmp_for_loop_5__iter_value.object );
    tmp_for_loop_5__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_5__for_iterator.object );
    tmp_for_loop_5__for_iterator.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_17;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_17 != NULL )
    {
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;

        goto frame_exception_exit_1;
    }

    goto finally_end_17;
    finally_end_17:;
    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) PyErr_Clear();

    if ( tmp_res == -1 )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 411;
        goto frame_exception_exit_1;
    }

    tmp_assattr_name_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_response_moved_attributes );

    if (unlikely( tmp_assattr_name_5 == NULL ))
    {
        tmp_assattr_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_response_moved_attributes );
    }

    if ( tmp_assattr_name_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327429 ], 55, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 413;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );

    if (unlikely( tmp_assattr_target_5 == NULL ))
    {
        tmp_assattr_target_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );
    }

    if ( tmp_assattr_target_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327484 ], 54, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 413;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain__moved_attributes, tmp_assattr_name_5 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 413;
        goto frame_exception_exit_1;
    }
    tmp_source_name_19 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_19 == NULL ))
    {
        tmp_source_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_19 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327058 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 415;
        goto frame_exception_exit_1;
    }

    tmp_called_138 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain__add_module );
    if ( tmp_called_138 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 415;
        goto frame_exception_exit_1;
    }
    tmp_called_139 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );

    if (unlikely( tmp_called_139 == NULL ))
    {
        tmp_called_139 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );
    }

    if ( tmp_called_139 == NULL )
    {
        Py_DECREF( tmp_called_138 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327484 ], 54, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 415;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_406 = const_str_digest_978d40b51d49c44d5c269d972160b3a7;
    frame_module->f_lineno = 415;
    tmp_call_arg_element_405 = CALL_FUNCTION_WITH_ARGS1( tmp_called_139, tmp_call_arg_element_406 );
    if ( tmp_call_arg_element_405 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_138 );

        frame_module->f_lineno = 415;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_407 = const_str_digest_6b8760e9f9f00fbb357f678f1929504f;
    tmp_call_arg_element_408 = const_str_digest_0b734ebd6887a8dc46e2f14d257a16b8;
    frame_module->f_lineno = 416;
    tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_138, tmp_call_arg_element_405, tmp_call_arg_element_407, tmp_call_arg_element_408 );
    Py_DECREF( tmp_called_138 );
    Py_DECREF( tmp_call_arg_element_405 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 416;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code
    tmp_assign_source_106 = PyTuple_New( 1 );
    tmp_tuple_element_18 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_18 == NULL ))
    {
        tmp_tuple_element_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_18 == NULL )
    {
        Py_DECREF( tmp_assign_source_106 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326858 ], 33, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 419;
        goto try_finally_handler_18;
    }

    Py_INCREF( tmp_tuple_element_18 );
    PyTuple_SET_ITEM( tmp_assign_source_106, 0, tmp_tuple_element_18 );
    assert( tmp_class_creation_12__bases.object == NULL );
    tmp_class_creation_12__bases.object = tmp_assign_source_106;

    tmp_assign_source_107 = impl_class_14_Module_six_moves_urllib_robotparser_of_module_six(  );
    if ( tmp_assign_source_107 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 419;
        goto try_finally_handler_18;
    }
    assert( tmp_class_creation_12__class_dict.object == NULL );
    tmp_class_creation_12__class_dict.object = tmp_assign_source_107;

    tmp_compare_left_14 = const_str_plain___metaclass__;
    tmp_compare_right_14 = tmp_class_creation_12__class_dict.object;

    tmp_cmp_In_12 = PySequence_Contains( tmp_compare_right_14, tmp_compare_left_14 );
    if ( tmp_cmp_In_12 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 419;
        goto try_finally_handler_18;
    }
    if (tmp_cmp_In_12 == 1)
    {
        goto condexpr_true_12;
    }
    else
    {
        goto condexpr_false_12;
    }
    condexpr_true_12:;
    tmp_dget_dict_12 = tmp_class_creation_12__class_dict.object;

    tmp_dget_key_12 = const_str_plain___metaclass__;
    tmp_assign_source_108 = DICT_GET_ITEM( tmp_dget_dict_12, tmp_dget_key_12 );
    if ( tmp_assign_source_108 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 419;
        goto try_finally_handler_18;
    }
    goto condexpr_end_12;
    condexpr_false_12:;
    tmp_class_bases_12 = tmp_class_creation_12__bases.object;

    tmp_assign_source_108 = SELECT_METACLASS( tmp_class_bases_12, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_12:;
    assert( tmp_class_creation_12__metaclass.object == NULL );
    tmp_class_creation_12__metaclass.object = tmp_assign_source_108;

    tmp_called_140 = tmp_class_creation_12__metaclass.object;

    tmp_call_arg_element_409 = const_str_plain_Module_six_moves_urllib_robotparser;
    tmp_call_arg_element_410 = tmp_class_creation_12__bases.object;

    tmp_call_arg_element_411 = tmp_class_creation_12__class_dict.object;

    frame_module->f_lineno = 419;
    tmp_assign_source_109 = CALL_FUNCTION_WITH_ARGS3( tmp_called_140, tmp_call_arg_element_409, tmp_call_arg_element_410, tmp_call_arg_element_411 );
    if ( tmp_assign_source_109 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 419;
        goto try_finally_handler_18;
    }
    assert( tmp_class_creation_12__class.object == NULL );
    tmp_class_creation_12__class.object = tmp_assign_source_109;

    tmp_assign_source_110 = tmp_class_creation_12__class.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser, tmp_assign_source_110 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_18:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_18 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_12__class.object );
    tmp_class_creation_12__class.object = NULL;

    Py_XDECREF( tmp_class_creation_12__bases.object );
    tmp_class_creation_12__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_12__class_dict.object );
    tmp_class_creation_12__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_12__metaclass.object );
    tmp_class_creation_12__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_18;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_18 != NULL )
    {
        exception_type = exception_keeper_type_18;
        exception_value = exception_keeper_value_18;
        exception_tb = exception_keeper_tb_18;

        goto frame_exception_exit_1;
    }

    goto finally_end_18;
    finally_end_18:;
    tmp_assign_source_111 = PyList_New( 1 );
    tmp_called_141 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_141 == NULL ))
    {
        tmp_called_141 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_141 == NULL )
    {
        Py_DECREF( tmp_assign_source_111 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 326891 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 424;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_412 = const_str_plain_RobotFileParser;
    tmp_call_arg_element_413 = const_str_plain_robotparser;
    tmp_call_arg_element_414 = const_str_digest_9d19af47c5776306ee2273813f3235e4;
    frame_module->f_lineno = 424;
    tmp_list_element_6 = CALL_FUNCTION_WITH_ARGS3( tmp_called_141, tmp_call_arg_element_412, tmp_call_arg_element_413, tmp_call_arg_element_414 );
    if ( tmp_list_element_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_111 );

        frame_module->f_lineno = 424;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_111, 0, tmp_list_element_6 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_robotparser_moved_attributes, tmp_assign_source_111 );
    tmp_iter_arg_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_robotparser_moved_attributes );

    if (unlikely( tmp_iter_arg_6 == NULL ))
    {
        tmp_iter_arg_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_robotparser_moved_attributes );
    }

    if ( tmp_iter_arg_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327538 ], 58, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 426;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_112 = MAKE_ITERATOR( tmp_iter_arg_6 );
    if ( tmp_assign_source_112 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 426;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_6__for_iterator.object == NULL );
    tmp_for_loop_6__for_iterator.object = tmp_assign_source_112;

    // Tried code
    loop_start_6:;
    tmp_next_source_6 = tmp_for_loop_6__for_iterator.object;

    tmp_assign_source_113 = ITERATOR_NEXT( tmp_next_source_6 );
    if (tmp_assign_source_113 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_6;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_module->f_lineno = 426;
            goto try_finally_handler_19;
        }
    }

    if (tmp_for_loop_6__iter_value.object == NULL)
    {
        tmp_for_loop_6__iter_value.object = tmp_assign_source_113;
    }
    else
    {
        PyObject *old = tmp_for_loop_6__iter_value.object;
        tmp_for_loop_6__iter_value.object = tmp_assign_source_113;
        Py_DECREF( old );
    }
    tmp_assign_source_114 = tmp_for_loop_6__iter_value.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_114 );
    tmp_setattr_target_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );

    if (unlikely( tmp_setattr_target_6 == NULL ))
    {
        tmp_setattr_target_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );
    }

    if ( tmp_setattr_target_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327596 ], 57, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 427;
        goto try_finally_handler_19;
    }

    tmp_source_name_20 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_20 == NULL ))
    {
        tmp_source_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 427;
        goto try_finally_handler_19;
    }

    tmp_setattr_attr_6 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_name );
    if ( tmp_setattr_attr_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 427;
        goto try_finally_handler_19;
    }
    tmp_setattr_value_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_6 == NULL ))
    {
        tmp_setattr_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_6 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 427;
        goto try_finally_handler_19;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_6, tmp_setattr_attr_6, tmp_setattr_value_6 );
    Py_DECREF( tmp_setattr_attr_6 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 427;
        goto try_finally_handler_19;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 426;
        goto try_finally_handler_19;
    }
    goto loop_start_6;
    loop_end_6:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_19:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_19 = frame_module->f_lineno;
    Py_XDECREF( tmp_for_loop_6__iter_value.object );
    tmp_for_loop_6__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_6__for_iterator.object );
    tmp_for_loop_6__for_iterator.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_19;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_19 != NULL )
    {
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;

        goto frame_exception_exit_1;
    }

    goto finally_end_19;
    finally_end_19:;
    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) PyErr_Clear();

    if ( tmp_res == -1 )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327032 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 428;
        goto frame_exception_exit_1;
    }

    tmp_assattr_name_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_robotparser_moved_attributes );

    if (unlikely( tmp_assattr_name_6 == NULL ))
    {
        tmp_assattr_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_robotparser_moved_attributes );
    }

    if ( tmp_assattr_name_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327538 ], 58, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 430;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );

    if (unlikely( tmp_assattr_target_6 == NULL ))
    {
        tmp_assattr_target_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );
    }

    if ( tmp_assattr_target_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327596 ], 57, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 430;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain__moved_attributes, tmp_assattr_name_6 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 430;
        goto frame_exception_exit_1;
    }
    tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_21 == NULL ))
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_21 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327058 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 432;
        goto frame_exception_exit_1;
    }

    tmp_called_142 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain__add_module );
    if ( tmp_called_142 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 432;
        goto frame_exception_exit_1;
    }
    tmp_called_143 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );

    if (unlikely( tmp_called_143 == NULL ))
    {
        tmp_called_143 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );
    }

    if ( tmp_called_143 == NULL )
    {
        Py_DECREF( tmp_called_142 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327596 ], 57, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 432;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_416 = const_str_digest_9d16f9bc58d94c455589250070f09113;
    frame_module->f_lineno = 432;
    tmp_call_arg_element_415 = CALL_FUNCTION_WITH_ARGS1( tmp_called_143, tmp_call_arg_element_416 );
    if ( tmp_call_arg_element_415 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_142 );

        frame_module->f_lineno = 432;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_417 = const_str_digest_6932f06280679bface4e22a9e746d155;
    tmp_call_arg_element_418 = const_str_digest_691ff99aa130207f5f244721fce04c13;
    frame_module->f_lineno = 433;
    tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_142, tmp_call_arg_element_415, tmp_call_arg_element_417, tmp_call_arg_element_418 );
    Py_DECREF( tmp_called_142 );
    Py_DECREF( tmp_call_arg_element_415 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 433;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code
    tmp_assign_source_115 = PyTuple_New( 1 );
    tmp_source_name_22 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_22 == NULL ))
    {
        tmp_source_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_22 == NULL )
    {
        Py_DECREF( tmp_assign_source_115 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25256 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 436;
        goto try_finally_handler_20;
    }

    tmp_tuple_element_19 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_ModuleType );
    if ( tmp_tuple_element_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_115 );

        frame_module->f_lineno = 436;
        goto try_finally_handler_20;
    }
    PyTuple_SET_ITEM( tmp_assign_source_115, 0, tmp_tuple_element_19 );
    assert( tmp_class_creation_13__bases.object == NULL );
    tmp_class_creation_13__bases.object = tmp_assign_source_115;

    tmp_assign_source_116 = impl_class_15_Module_six_moves_urllib_of_module_six(  );
    if ( tmp_assign_source_116 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 436;
        goto try_finally_handler_20;
    }
    assert( tmp_class_creation_13__class_dict.object == NULL );
    tmp_class_creation_13__class_dict.object = tmp_assign_source_116;

    tmp_compare_left_15 = const_str_plain___metaclass__;
    tmp_compare_right_15 = tmp_class_creation_13__class_dict.object;

    tmp_cmp_In_13 = PySequence_Contains( tmp_compare_right_15, tmp_compare_left_15 );
    if ( tmp_cmp_In_13 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 436;
        goto try_finally_handler_20;
    }
    if (tmp_cmp_In_13 == 1)
    {
        goto condexpr_true_13;
    }
    else
    {
        goto condexpr_false_13;
    }
    condexpr_true_13:;
    tmp_dget_dict_13 = tmp_class_creation_13__class_dict.object;

    tmp_dget_key_13 = const_str_plain___metaclass__;
    tmp_assign_source_117 = DICT_GET_ITEM( tmp_dget_dict_13, tmp_dget_key_13 );
    if ( tmp_assign_source_117 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 436;
        goto try_finally_handler_20;
    }
    goto condexpr_end_13;
    condexpr_false_13:;
    tmp_class_bases_13 = tmp_class_creation_13__bases.object;

    tmp_assign_source_117 = SELECT_METACLASS( tmp_class_bases_13, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_13:;
    assert( tmp_class_creation_13__metaclass.object == NULL );
    tmp_class_creation_13__metaclass.object = tmp_assign_source_117;

    tmp_called_144 = tmp_class_creation_13__metaclass.object;

    tmp_call_arg_element_419 = const_str_plain_Module_six_moves_urllib;
    tmp_call_arg_element_420 = tmp_class_creation_13__bases.object;

    tmp_call_arg_element_421 = tmp_class_creation_13__class_dict.object;

    frame_module->f_lineno = 436;
    tmp_assign_source_118 = CALL_FUNCTION_WITH_ARGS3( tmp_called_144, tmp_call_arg_element_419, tmp_call_arg_element_420, tmp_call_arg_element_421 );
    if ( tmp_assign_source_118 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 436;
        goto try_finally_handler_20;
    }
    assert( tmp_class_creation_13__class.object == NULL );
    tmp_class_creation_13__class.object = tmp_assign_source_118;

    tmp_assign_source_119 = tmp_class_creation_13__class.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib, tmp_assign_source_119 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_20:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_20 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_13__class.object );
    tmp_class_creation_13__class.object = NULL;

    Py_XDECREF( tmp_class_creation_13__bases.object );
    tmp_class_creation_13__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_13__class_dict.object );
    tmp_class_creation_13__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_13__metaclass.object );
    tmp_class_creation_13__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_20;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_20 != NULL )
    {
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;

        goto frame_exception_exit_1;
    }

    goto finally_end_20;
    finally_end_20:;
    tmp_source_name_23 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_23 == NULL ))
    {
        tmp_source_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_23 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327058 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 448;
        goto frame_exception_exit_1;
    }

    tmp_called_145 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain__add_module );
    if ( tmp_called_145 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 448;
        goto frame_exception_exit_1;
    }
    tmp_called_146 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib );

    if (unlikely( tmp_called_146 == NULL ))
    {
        tmp_called_146 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib );
    }

    if ( tmp_called_146 == NULL )
    {
        Py_DECREF( tmp_called_145 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327653 ], 45, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 448;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_423 = const_str_digest_0356c23693397b6ac72c52b53054d366;
    frame_module->f_lineno = 448;
    tmp_call_arg_element_422 = CALL_FUNCTION_WITH_ARGS1( tmp_called_146, tmp_call_arg_element_423 );
    if ( tmp_call_arg_element_422 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_145 );

        frame_module->f_lineno = 448;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_424 = const_str_digest_8a4df8c91c6ab620f014b18e0aea06b8;
    frame_module->f_lineno = 449;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_145, tmp_call_arg_element_422, tmp_call_arg_element_424 );
    Py_DECREF( tmp_called_145 );
    Py_DECREF( tmp_call_arg_element_422 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 449;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_120 = MAKE_FUNCTION_function_16_add_move_of_module_six(  );
    if ( tmp_assign_source_120 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_120 );

        frame_module->f_lineno = 452;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_add_move, tmp_assign_source_120 );
    tmp_assign_source_121 = MAKE_FUNCTION_function_17_remove_move_of_module_six(  );
    if ( tmp_assign_source_121 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_121 );

        frame_module->f_lineno = 457;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_remove_move, tmp_assign_source_121 );
    tmp_cond_value_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_3 == NULL ))
    {
        tmp_cond_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 306445 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 468;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 468;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_assign_source_122 = const_str_plain___func__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_func, tmp_assign_source_122 );
    tmp_assign_source_123 = const_str_plain___self__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_self, tmp_assign_source_123 );
    tmp_assign_source_124 = const_str_plain___closure__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_closure, tmp_assign_source_124 );
    tmp_assign_source_125 = const_str_plain___code__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_code, tmp_assign_source_125 );
    tmp_assign_source_126 = const_str_plain___defaults__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_defaults, tmp_assign_source_126 );
    tmp_assign_source_127 = const_str_plain___globals__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_globals, tmp_assign_source_127 );
    goto branch_end_6;
    branch_no_6:;
    tmp_assign_source_128 = const_str_plain_im_func;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_func, tmp_assign_source_128 );
    tmp_assign_source_129 = const_str_plain_im_self;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_self, tmp_assign_source_129 );
    tmp_assign_source_130 = const_str_plain_func_closure;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_closure, tmp_assign_source_130 );
    tmp_assign_source_131 = const_str_plain_func_code;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_code, tmp_assign_source_131 );
    tmp_assign_source_132 = const_str_plain_func_defaults;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_defaults, tmp_assign_source_132 );
    tmp_assign_source_133 = const_str_plain_func_globals;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_globals, tmp_assign_source_133 );
    branch_end_6:;
    // Tried block of try/except
    tmp_assign_source_134 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_next );

    if (unlikely( tmp_assign_source_134 == NULL ))
    {
        tmp_assign_source_134 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_next );
    }

    if ( tmp_assign_source_134 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 228368 ], 26, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 487;
        goto try_except_handler_2;
    }

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_advance_iterator, tmp_assign_source_134 );
    goto try_except_end_2;
    try_except_handler_2:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_module );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_module ) );
    }
    else if ( exception_tb->tb_frame != frame_module || exception_tb->tb_lineno != frame_module->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_module, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_16 = PyThreadState_GET()->exc_type;
    tmp_compare_right_16 = PyExc_NameError;
    tmp_exc_match_exception_match_2 = EXCEPTION_MATCH_BOOL( tmp_compare_left_16, tmp_compare_right_16 );
    if ( tmp_exc_match_exception_match_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 488;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_2 == 1)
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_assign_source_135 = MAKE_FUNCTION_function_18_advance_iterator_of_module_six(  );
    if ( tmp_assign_source_135 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_135 );

        frame_module->f_lineno = 489;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_advance_iterator, tmp_assign_source_135 );
    goto branch_end_7;
    branch_no_7:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_module) frame_module->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_7:;
    try_except_end_2:;
    tmp_assign_source_136 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_advance_iterator );

    if (unlikely( tmp_assign_source_136 == NULL ))
    {
        tmp_assign_source_136 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_advance_iterator );
    }

    if ( tmp_assign_source_136 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327698 ], 38, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 491;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_next, tmp_assign_source_136 );
    // Tried block of try/except
    tmp_assign_source_137 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_callable );

    if (unlikely( tmp_assign_source_137 == NULL ))
    {
        tmp_assign_source_137 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_callable );
    }

    if ( tmp_assign_source_137 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 243527 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 495;
        goto try_except_handler_3;
    }

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_callable, tmp_assign_source_137 );
    goto try_except_end_3;
    try_except_handler_3:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_module );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_module ) );
    }
    else if ( exception_tb->tb_frame != frame_module || exception_tb->tb_lineno != frame_module->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_module, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_17 = PyThreadState_GET()->exc_type;
    tmp_compare_right_17 = PyExc_NameError;
    tmp_exc_match_exception_match_3 = EXCEPTION_MATCH_BOOL( tmp_compare_left_17, tmp_compare_right_17 );
    if ( tmp_exc_match_exception_match_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 496;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_3 == 1)
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_assign_source_138 = MAKE_FUNCTION_function_19_callable_of_module_six(  );
    if ( tmp_assign_source_138 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        frame_module->f_lineno = 497;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_callable, tmp_assign_source_138 );
    goto branch_end_8;
    branch_no_8:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_module) frame_module->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_8:;
    try_except_end_3:;
    tmp_cond_value_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_4 == NULL ))
    {
        tmp_cond_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 306445 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 501;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 501;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_4 == 1)
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_assign_source_139 = MAKE_FUNCTION_function_20_get_unbound_function_of_module_six(  );
    if ( tmp_assign_source_139 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_139 );

        frame_module->f_lineno = 502;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_unbound_function, tmp_assign_source_139 );
    tmp_source_name_24 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_24 == NULL ))
    {
        tmp_source_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_24 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25256 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 505;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_140 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_MethodType );
    if ( tmp_assign_source_140 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 505;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_create_bound_method, tmp_assign_source_140 );
    tmp_assign_source_141 = LOOKUP_BUILTIN( const_str_plain_object );
    if ( tmp_assign_source_141 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 507;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Iterator, tmp_assign_source_141 );
    goto branch_end_9;
    branch_no_9:;
    tmp_assign_source_142 = MAKE_FUNCTION_function_21_get_unbound_function_of_module_six(  );
    if ( tmp_assign_source_142 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_142 );

        frame_module->f_lineno = 509;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_unbound_function, tmp_assign_source_142 );
    tmp_assign_source_143 = MAKE_FUNCTION_function_22_create_bound_method_of_module_six(  );
    if ( tmp_assign_source_143 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_143 );

        frame_module->f_lineno = 512;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_create_bound_method, tmp_assign_source_143 );
    // Tried code
    tmp_assign_source_144 = PyTuple_New( 1 );
    tmp_tuple_element_20 = LOOKUP_BUILTIN( const_str_plain_object );
    if ( tmp_tuple_element_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_144 );

        frame_module->f_lineno = 515;
        goto try_finally_handler_21;
    }
    Py_INCREF( tmp_tuple_element_20 );
    PyTuple_SET_ITEM( tmp_assign_source_144, 0, tmp_tuple_element_20 );
    assert( tmp_class_creation_14__bases.object == NULL );
    tmp_class_creation_14__bases.object = tmp_assign_source_144;

    tmp_assign_source_145 = impl_class_23_Iterator_of_module_six(  );
    if ( tmp_assign_source_145 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 515;
        goto try_finally_handler_21;
    }
    assert( tmp_class_creation_14__class_dict.object == NULL );
    tmp_class_creation_14__class_dict.object = tmp_assign_source_145;

    tmp_compare_left_18 = const_str_plain___metaclass__;
    tmp_compare_right_18 = tmp_class_creation_14__class_dict.object;

    tmp_cmp_In_14 = PySequence_Contains( tmp_compare_right_18, tmp_compare_left_18 );
    if ( tmp_cmp_In_14 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 515;
        goto try_finally_handler_21;
    }
    if (tmp_cmp_In_14 == 1)
    {
        goto condexpr_true_14;
    }
    else
    {
        goto condexpr_false_14;
    }
    condexpr_true_14:;
    tmp_dget_dict_14 = tmp_class_creation_14__class_dict.object;

    tmp_dget_key_14 = const_str_plain___metaclass__;
    tmp_assign_source_146 = DICT_GET_ITEM( tmp_dget_dict_14, tmp_dget_key_14 );
    if ( tmp_assign_source_146 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 515;
        goto try_finally_handler_21;
    }
    goto condexpr_end_14;
    condexpr_false_14:;
    tmp_class_bases_14 = tmp_class_creation_14__bases.object;

    tmp_assign_source_146 = SELECT_METACLASS( tmp_class_bases_14, GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_14:;
    assert( tmp_class_creation_14__metaclass.object == NULL );
    tmp_class_creation_14__metaclass.object = tmp_assign_source_146;

    tmp_called_147 = tmp_class_creation_14__metaclass.object;

    tmp_call_arg_element_425 = const_str_plain_Iterator;
    tmp_call_arg_element_426 = tmp_class_creation_14__bases.object;

    tmp_call_arg_element_427 = tmp_class_creation_14__class_dict.object;

    frame_module->f_lineno = 515;
    tmp_assign_source_147 = CALL_FUNCTION_WITH_ARGS3( tmp_called_147, tmp_call_arg_element_425, tmp_call_arg_element_426, tmp_call_arg_element_427 );
    if ( tmp_assign_source_147 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 515;
        goto try_finally_handler_21;
    }
    assert( tmp_class_creation_14__class.object == NULL );
    tmp_class_creation_14__class.object = tmp_assign_source_147;

    tmp_assign_source_148 = tmp_class_creation_14__class.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Iterator, tmp_assign_source_148 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_21:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_21 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_14__class.object );
    tmp_class_creation_14__class.object = NULL;

    Py_XDECREF( tmp_class_creation_14__bases.object );
    tmp_class_creation_14__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_14__class_dict.object );
    tmp_class_creation_14__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_14__metaclass.object );
    tmp_class_creation_14__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_21;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_21 != NULL )
    {
        exception_type = exception_keeper_type_21;
        exception_value = exception_keeper_value_21;
        exception_tb = exception_keeper_tb_21;

        goto frame_exception_exit_1;
    }

    goto finally_end_21;
    finally_end_21:;
    tmp_assign_source_149 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_callable );

    if (unlikely( tmp_assign_source_149 == NULL ))
    {
        tmp_assign_source_149 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_callable );
    }

    if ( tmp_assign_source_149 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 243527 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 520;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_callable, tmp_assign_source_149 );
    branch_end_9:;
    tmp_called_148 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_148 == NULL ))
    {
        tmp_called_148 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_148 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327736 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 521;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_428 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_unbound_function );

    if (unlikely( tmp_call_arg_element_428 == NULL ))
    {
        tmp_call_arg_element_428 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_unbound_function );
    }

    if ( tmp_call_arg_element_428 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327766 ], 42, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 521;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_429 = const_str_digest_f8506addb3f2fabe0b7f3b137fbfcdd7;
    frame_module->f_lineno = 522;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_148, tmp_call_arg_element_428, tmp_call_arg_element_429 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 522;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_25 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_25 == NULL ))
    {
        tmp_source_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_25 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216222 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 525;
        goto frame_exception_exit_1;
    }

    tmp_called_149 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_attrgetter );
    if ( tmp_called_149 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 525;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_430 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_func );

    if (unlikely( tmp_call_arg_element_430 == NULL ))
    {
        tmp_call_arg_element_430 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__meth_func );
    }

    if ( tmp_call_arg_element_430 == NULL )
    {
        Py_DECREF( tmp_called_149 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327808 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 525;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 525;
    tmp_assign_source_150 = CALL_FUNCTION_WITH_ARGS1( tmp_called_149, tmp_call_arg_element_430 );
    Py_DECREF( tmp_called_149 );
    if ( tmp_assign_source_150 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 525;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_method_function, tmp_assign_source_150 );
    tmp_source_name_26 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_26 == NULL ))
    {
        tmp_source_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_26 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216222 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 526;
        goto frame_exception_exit_1;
    }

    tmp_called_150 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_attrgetter );
    if ( tmp_called_150 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 526;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_431 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_self );

    if (unlikely( tmp_call_arg_element_431 == NULL ))
    {
        tmp_call_arg_element_431 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__meth_self );
    }

    if ( tmp_call_arg_element_431 == NULL )
    {
        Py_DECREF( tmp_called_150 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327840 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 526;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 526;
    tmp_assign_source_151 = CALL_FUNCTION_WITH_ARGS1( tmp_called_150, tmp_call_arg_element_431 );
    Py_DECREF( tmp_called_150 );
    if ( tmp_assign_source_151 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 526;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_method_self, tmp_assign_source_151 );
    tmp_source_name_27 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_27 == NULL ))
    {
        tmp_source_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_27 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216222 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 527;
        goto frame_exception_exit_1;
    }

    tmp_called_151 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_attrgetter );
    if ( tmp_called_151 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 527;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_432 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_closure );

    if (unlikely( tmp_call_arg_element_432 == NULL ))
    {
        tmp_call_arg_element_432 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__func_closure );
    }

    if ( tmp_call_arg_element_432 == NULL )
    {
        Py_DECREF( tmp_called_151 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327872 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 527;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 527;
    tmp_assign_source_152 = CALL_FUNCTION_WITH_ARGS1( tmp_called_151, tmp_call_arg_element_432 );
    Py_DECREF( tmp_called_151 );
    if ( tmp_assign_source_152 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 527;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_function_closure, tmp_assign_source_152 );
    tmp_source_name_28 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_28 == NULL ))
    {
        tmp_source_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_28 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216222 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 528;
        goto frame_exception_exit_1;
    }

    tmp_called_152 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_attrgetter );
    if ( tmp_called_152 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 528;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_433 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_code );

    if (unlikely( tmp_call_arg_element_433 == NULL ))
    {
        tmp_call_arg_element_433 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__func_code );
    }

    if ( tmp_call_arg_element_433 == NULL )
    {
        Py_DECREF( tmp_called_152 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327907 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 528;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 528;
    tmp_assign_source_153 = CALL_FUNCTION_WITH_ARGS1( tmp_called_152, tmp_call_arg_element_433 );
    Py_DECREF( tmp_called_152 );
    if ( tmp_assign_source_153 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 528;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_function_code, tmp_assign_source_153 );
    tmp_source_name_29 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_29 == NULL ))
    {
        tmp_source_name_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_29 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216222 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 529;
        goto frame_exception_exit_1;
    }

    tmp_called_153 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_attrgetter );
    if ( tmp_called_153 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 529;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_434 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_defaults );

    if (unlikely( tmp_call_arg_element_434 == NULL ))
    {
        tmp_call_arg_element_434 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__func_defaults );
    }

    if ( tmp_call_arg_element_434 == NULL )
    {
        Py_DECREF( tmp_called_153 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327939 ], 36, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 529;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 529;
    tmp_assign_source_154 = CALL_FUNCTION_WITH_ARGS1( tmp_called_153, tmp_call_arg_element_434 );
    Py_DECREF( tmp_called_153 );
    if ( tmp_assign_source_154 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 529;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_function_defaults, tmp_assign_source_154 );
    tmp_source_name_30 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_30 == NULL ))
    {
        tmp_source_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_30 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216222 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 530;
        goto frame_exception_exit_1;
    }

    tmp_called_154 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_attrgetter );
    if ( tmp_called_154 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 530;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_435 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_globals );

    if (unlikely( tmp_call_arg_element_435 == NULL ))
    {
        tmp_call_arg_element_435 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__func_globals );
    }

    if ( tmp_call_arg_element_435 == NULL )
    {
        Py_DECREF( tmp_called_154 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327975 ], 35, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 530;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 530;
    tmp_assign_source_155 = CALL_FUNCTION_WITH_ARGS1( tmp_called_154, tmp_call_arg_element_435 );
    Py_DECREF( tmp_called_154 );
    if ( tmp_assign_source_155 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 530;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_function_globals, tmp_assign_source_155 );
    tmp_cond_value_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_5 == NULL ))
    {
        tmp_cond_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 306445 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 533;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 533;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_5 == 1)
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_assign_source_156 = MAKE_FUNCTION_function_24_iterkeys_of_module_six(  );
    if ( tmp_assign_source_156 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_156 );

        frame_module->f_lineno = 534;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterkeys, tmp_assign_source_156 );
    tmp_assign_source_157 = MAKE_FUNCTION_function_25_itervalues_of_module_six(  );
    if ( tmp_assign_source_157 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_157 );

        frame_module->f_lineno = 537;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_itervalues, tmp_assign_source_157 );
    tmp_assign_source_158 = MAKE_FUNCTION_function_26_iteritems_of_module_six(  );
    if ( tmp_assign_source_158 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_158 );

        frame_module->f_lineno = 540;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iteritems, tmp_assign_source_158 );
    tmp_assign_source_159 = MAKE_FUNCTION_function_27_iterlists_of_module_six(  );
    if ( tmp_assign_source_159 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_159 );

        frame_module->f_lineno = 543;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterlists, tmp_assign_source_159 );
    goto branch_end_10;
    branch_no_10:;
    tmp_assign_source_160 = MAKE_FUNCTION_function_28_iterkeys_of_module_six(  );
    if ( tmp_assign_source_160 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_160 );

        frame_module->f_lineno = 546;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterkeys, tmp_assign_source_160 );
    tmp_assign_source_161 = MAKE_FUNCTION_function_29_itervalues_of_module_six(  );
    if ( tmp_assign_source_161 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_161 );

        frame_module->f_lineno = 549;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_itervalues, tmp_assign_source_161 );
    tmp_assign_source_162 = MAKE_FUNCTION_function_30_iteritems_of_module_six(  );
    if ( tmp_assign_source_162 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_162 );

        frame_module->f_lineno = 552;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iteritems, tmp_assign_source_162 );
    tmp_assign_source_163 = MAKE_FUNCTION_function_31_iterlists_of_module_six(  );
    if ( tmp_assign_source_163 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_163 );

        frame_module->f_lineno = 555;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterlists, tmp_assign_source_163 );
    branch_end_10:;
    tmp_called_155 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_155 == NULL ))
    {
        tmp_called_155 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_155 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327736 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 558;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_436 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterkeys );

    if (unlikely( tmp_call_arg_element_436 == NULL ))
    {
        tmp_call_arg_element_436 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iterkeys );
    }

    if ( tmp_call_arg_element_436 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328010 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 558;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_437 = const_str_digest_e43dc6c6f1fdd10528f6bfec991eeb0f;
    frame_module->f_lineno = 558;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_155, tmp_call_arg_element_436, tmp_call_arg_element_437 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 558;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_156 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_156 == NULL ))
    {
        tmp_called_156 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_156 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327736 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 559;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_438 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_itervalues );

    if (unlikely( tmp_call_arg_element_438 == NULL ))
    {
        tmp_call_arg_element_438 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_itervalues );
    }

    if ( tmp_call_arg_element_438 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328040 ], 32, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 559;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_439 = const_str_digest_f5b89d17853d1ad9fecbda5a3ec09b77;
    frame_module->f_lineno = 559;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_156, tmp_call_arg_element_438, tmp_call_arg_element_439 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 559;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_157 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_157 == NULL ))
    {
        tmp_called_157 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_157 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327736 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 560;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_440 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_iteritems );

    if (unlikely( tmp_call_arg_element_440 == NULL ))
    {
        tmp_call_arg_element_440 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iteritems );
    }

    if ( tmp_call_arg_element_440 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 267767 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 560;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_441 = const_str_digest_38bf16ac35f62a78959d9fd19e8c4165;
    frame_module->f_lineno = 561;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_157, tmp_call_arg_element_440, tmp_call_arg_element_441 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 561;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_158 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_158 == NULL ))
    {
        tmp_called_158 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_158 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327736 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 562;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_442 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterlists );

    if (unlikely( tmp_call_arg_element_442 == NULL ))
    {
        tmp_call_arg_element_442 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iterlists );
    }

    if ( tmp_call_arg_element_442 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328072 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 562;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_443 = const_str_digest_9450654aa6509a3096d1b85acdc842e1;
    frame_module->f_lineno = 563;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_158, tmp_call_arg_element_442, tmp_call_arg_element_443 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 563;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_cond_value_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_6 == NULL ))
    {
        tmp_cond_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 306445 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 566;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 566;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_6 == 1)
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_assign_source_164 = MAKE_FUNCTION_function_32_b_of_module_six(  );
    if ( tmp_assign_source_164 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_164 );

        frame_module->f_lineno = 567;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_b, tmp_assign_source_164 );
    tmp_assign_source_165 = MAKE_FUNCTION_function_33_u_of_module_six(  );
    if ( tmp_assign_source_165 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_165 );

        frame_module->f_lineno = 569;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_u, tmp_assign_source_165 );
    tmp_assign_source_166 = LOOKUP_BUILTIN( const_str_plain_chr );
    if ( tmp_assign_source_166 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 571;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_unichr, tmp_assign_source_166 );
    tmp_source_name_31 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_31 == NULL ))
    {
        tmp_source_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_31 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 572;
        goto frame_exception_exit_1;
    }

    tmp_subscr_target_3 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_version_info );
    if ( tmp_subscr_target_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 572;
        goto frame_exception_exit_1;
    }
    tmp_subscr_subscript_3 = const_int_pos_1;
    tmp_compare_left_19 = LOOKUP_SUBSCRIPT( tmp_subscr_target_3, tmp_subscr_subscript_3 );
    Py_DECREF( tmp_subscr_target_3 );
    if ( tmp_compare_left_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 572;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_19 = const_int_pos_1;
    tmp_cmp_LtE_1 = RICH_COMPARE_BOOL_LE( tmp_compare_left_19, tmp_compare_right_19 );
    if ( tmp_cmp_LtE_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_19 );

        frame_module->f_lineno = 572;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_19 );
    if (tmp_cmp_LtE_1 == 1)
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_assign_source_167 = MAKE_FUNCTION_function_34_int2byte_of_module_six(  );
    if ( tmp_assign_source_167 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_167 );

        frame_module->f_lineno = 573;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_int2byte, tmp_assign_source_167 );
    goto branch_end_12;
    branch_no_12:;
    tmp_source_name_32 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_32 == NULL ))
    {
        tmp_source_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_32 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216222 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 577;
        goto frame_exception_exit_1;
    }

    tmp_called_159 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_methodcaller );
    if ( tmp_called_159 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 577;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_444 = const_str_plain_to_bytes;
    tmp_call_arg_element_445 = const_int_pos_1;
    tmp_call_arg_element_446 = const_str_plain_big;
    frame_module->f_lineno = 577;
    tmp_assign_source_168 = CALL_FUNCTION_WITH_ARGS3( tmp_called_159, tmp_call_arg_element_444, tmp_call_arg_element_445, tmp_call_arg_element_446 );
    Py_DECREF( tmp_called_159 );
    if ( tmp_assign_source_168 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 577;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_int2byte, tmp_assign_source_168 );
    branch_end_12:;
    tmp_source_name_33 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_33 == NULL ))
    {
        tmp_source_name_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_33 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216222 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 578;
        goto frame_exception_exit_1;
    }

    tmp_called_160 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_itemgetter );
    if ( tmp_called_160 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 578;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_447 = const_int_0;
    frame_module->f_lineno = 578;
    tmp_assign_source_169 = CALL_FUNCTION_WITH_ARGS1( tmp_called_160, tmp_call_arg_element_447 );
    Py_DECREF( tmp_called_160 );
    if ( tmp_assign_source_169 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 578;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_byte2int, tmp_assign_source_169 );
    tmp_source_name_34 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_34 == NULL ))
    {
        tmp_source_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_34 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216222 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 579;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_170 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_getitem );
    if ( tmp_assign_source_170 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 579;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_indexbytes, tmp_assign_source_170 );
    tmp_assign_source_171 = LOOKUP_BUILTIN( const_str_plain_iter );
    if ( tmp_assign_source_171 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 580;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterbytes, tmp_assign_source_171 );
    tmp_import_globals_5 = ((PyModuleObject *)module_six)->md_dict;
    frame_module->f_lineno = 581;
    tmp_assign_source_172 = IMPORT_MODULE( const_str_plain_io, tmp_import_globals_5, tmp_import_globals_5, Py_None, const_int_neg_1 );
    if ( tmp_assign_source_172 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 581;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_io, tmp_assign_source_172 );
    tmp_source_name_35 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_io );

    if (unlikely( tmp_source_name_35 == NULL ))
    {
        tmp_source_name_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_io );
    }

    if ( tmp_source_name_35 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12666 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 582;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_173 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_StringIO );
    if ( tmp_assign_source_173 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 582;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_StringIO, tmp_assign_source_173 );
    tmp_source_name_36 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_io );

    if (unlikely( tmp_source_name_36 == NULL ))
    {
        tmp_source_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_io );
    }

    if ( tmp_source_name_36 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12666 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 583;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_174 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_BytesIO );
    if ( tmp_assign_source_174 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 583;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_BytesIO, tmp_assign_source_174 );
    goto branch_end_11;
    branch_no_11:;
    tmp_assign_source_175 = MAKE_FUNCTION_function_35_b_of_module_six(  );
    if ( tmp_assign_source_175 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_175 );

        frame_module->f_lineno = 585;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_b, tmp_assign_source_175 );
    tmp_assign_source_176 = MAKE_FUNCTION_function_36_u_of_module_six(  );
    if ( tmp_assign_source_176 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_176 );

        frame_module->f_lineno = 588;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_u, tmp_assign_source_176 );
    tmp_assign_source_177 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_unichr );

    if (unlikely( tmp_assign_source_177 == NULL ))
    {
        tmp_assign_source_177 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unichr );
    }

    if ( tmp_assign_source_177 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 314755 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 590;
        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_unichr, tmp_assign_source_177 );
    tmp_assign_source_178 = LOOKUP_BUILTIN( const_str_plain_chr );
    if ( tmp_assign_source_178 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 591;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_int2byte, tmp_assign_source_178 );
    tmp_assign_source_179 = MAKE_FUNCTION_function_37_byte2int_of_module_six(  );
    if ( tmp_assign_source_179 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_179 );

        frame_module->f_lineno = 592;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_byte2int, tmp_assign_source_179 );
    tmp_assign_source_180 = MAKE_FUNCTION_function_38_indexbytes_of_module_six(  );
    if ( tmp_assign_source_180 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_180 );

        frame_module->f_lineno = 594;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_indexbytes, tmp_assign_source_180 );
    tmp_assign_source_181 = MAKE_FUNCTION_function_39_iterbytes_of_module_six(  );
    if ( tmp_assign_source_181 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_181 );

        frame_module->f_lineno = 596;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterbytes, tmp_assign_source_181 );
    tmp_import_globals_6 = ((PyModuleObject *)module_six)->md_dict;
    frame_module->f_lineno = 598;
    tmp_assign_source_182 = IMPORT_MODULE( const_str_plain_StringIO, tmp_import_globals_6, tmp_import_globals_6, Py_None, const_int_neg_1 );
    if ( tmp_assign_source_182 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 598;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_StringIO, tmp_assign_source_182 );
    // Tried code
    tmp_source_name_37 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_StringIO );

    if (unlikely( tmp_source_name_37 == NULL ))
    {
        tmp_source_name_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StringIO );
    }

    if ( tmp_source_name_37 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214918 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 599;
        goto try_finally_handler_22;
    }

    tmp_assign_source_183 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain_StringIO );
    if ( tmp_assign_source_183 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 599;
        goto try_finally_handler_22;
    }
    assert( tmp_assign_unpack_1__assign_source.object == NULL );
    tmp_assign_unpack_1__assign_source.object = tmp_assign_source_183;

    tmp_assign_source_184 = tmp_assign_unpack_1__assign_source.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_StringIO, tmp_assign_source_184 );
    tmp_assign_source_185 = tmp_assign_unpack_1__assign_source.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_BytesIO, tmp_assign_source_185 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_22:;
    exception_keeper_type_22 = exception_type;
    exception_keeper_value_22 = exception_value;
    exception_keeper_tb_22 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_22 = frame_module->f_lineno;
    Py_XDECREF( tmp_assign_unpack_1__assign_source.object );
    tmp_assign_unpack_1__assign_source.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_22;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_22 != NULL )
    {
        exception_type = exception_keeper_type_22;
        exception_value = exception_keeper_value_22;
        exception_tb = exception_keeper_tb_22;

        goto frame_exception_exit_1;
    }

    goto finally_end_22;
    finally_end_22:;
    branch_end_11:;
    tmp_called_161 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_161 == NULL ))
    {
        tmp_called_161 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_161 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327736 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 600;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_448 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_b );

    if (unlikely( tmp_call_arg_element_448 == NULL ))
    {
        tmp_call_arg_element_448 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_b );
    }

    if ( tmp_call_arg_element_448 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328103 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 600;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_449 = const_str_digest_90149c8c23f28b47e24e21946ab23241;
    frame_module->f_lineno = 600;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_161, tmp_call_arg_element_448, tmp_call_arg_element_449 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 600;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_162 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_162 == NULL ))
    {
        tmp_called_162 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_162 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327736 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 601;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_450 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_u );

    if (unlikely( tmp_call_arg_element_450 == NULL ))
    {
        tmp_call_arg_element_450 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_u );
    }

    if ( tmp_call_arg_element_450 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328126 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 601;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_451 = const_str_digest_8aa52d3b6143cd660244d9ea53f613b9;
    frame_module->f_lineno = 601;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_162, tmp_call_arg_element_450, tmp_call_arg_element_451 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 601;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_cond_value_7 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_7 == NULL ))
    {
        tmp_cond_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 306445 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 604;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 604;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_7 == 1)
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_source_name_38 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_moves );

    if (unlikely( tmp_source_name_38 == NULL ))
    {
        tmp_source_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_moves );
    }

    if ( tmp_source_name_38 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327089 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 605;
        goto frame_exception_exit_1;
    }

    tmp_getattr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain_builtins );
    if ( tmp_getattr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 605;
        goto frame_exception_exit_1;
    }
    tmp_getattr_attr_1 = const_str_plain_exec;
    tmp_assign_source_186 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    Py_DECREF( tmp_getattr_target_1 );
    if ( tmp_assign_source_186 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 605;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_exec_, tmp_assign_source_186 );
    tmp_defaults_1 = const_tuple_none_tuple;
    tmp_assign_source_187 = MAKE_FUNCTION_function_40_reraise_of_module_six( INCREASE_REFCOUNT( tmp_defaults_1 ) );
    if ( tmp_assign_source_187 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_187 );

        frame_module->f_lineno = 608;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_reraise, tmp_assign_source_187 );
    goto branch_end_13;
    branch_no_13:;
    tmp_defaults_2 = const_tuple_none_none_tuple;
    tmp_assign_source_188 = MAKE_FUNCTION_function_41_exec__of_module_six( INCREASE_REFCOUNT( tmp_defaults_2 ) );
    if ( tmp_assign_source_188 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_188 );

        frame_module->f_lineno = 614;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_exec_, tmp_assign_source_188 );
    tmp_called_163 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_exec_ );

    if (unlikely( tmp_called_163 == NULL ))
    {
        tmp_called_163 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_exec_ );
    }

    if ( tmp_called_163 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328149 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 627;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_452 = const_str_digest_38fead528e3756cdda5e24e082470cf8;
    frame_module->f_lineno = 629;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_163, tmp_call_arg_element_452 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 629;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_end_13:;
    tmp_source_name_39 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_moves );

    if (unlikely( tmp_source_name_39 == NULL ))
    {
        tmp_source_name_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_moves );
    }

    if ( tmp_source_name_39 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327089 ], 27, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 632;
        goto frame_exception_exit_1;
    }

    tmp_getattr_target_2 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain_builtins );
    if ( tmp_getattr_target_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 632;
        goto frame_exception_exit_1;
    }
    tmp_getattr_attr_2 = const_str_plain_print;
    tmp_getattr_default_1 = Py_None;
    tmp_assign_source_189 = BUILTIN_GETATTR( tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_1 );
    Py_DECREF( tmp_getattr_target_2 );
    if ( tmp_assign_source_189 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 632;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_print_, tmp_assign_source_189 );
    tmp_compare_left_20 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_print_ );

    if (unlikely( tmp_compare_left_20 == NULL ))
    {
        tmp_compare_left_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_print_ );
    }

    if ( tmp_compare_left_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328176 ], 28, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 633;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_20 = Py_None;
    tmp_is_2 = ( tmp_compare_left_20 == tmp_compare_right_20 );
    if (tmp_is_2)
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_assign_source_190 = MAKE_FUNCTION_function_42_print__of_module_six(  );
    if ( tmp_assign_source_190 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_190 );

        frame_module->f_lineno = 634;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_print_, tmp_assign_source_190 );
    branch_no_14:;
    tmp_called_164 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_164 == NULL ))
    {
        tmp_called_164 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_164 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327736 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 687;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_453 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_reraise );

    if (unlikely( tmp_call_arg_element_453 == NULL ))
    {
        tmp_call_arg_element_453 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_reraise );
    }

    if ( tmp_call_arg_element_453 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 311171 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 687;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_454 = const_str_digest_59bddfd0566fa79fd668740b6caaa5f1;
    frame_module->f_lineno = 687;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_164, tmp_call_arg_element_453, tmp_call_arg_element_454 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 687;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = 2;
    tmp_source_name_40 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_40 == NULL ))
    {
        tmp_source_name_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_40 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 689;
        goto frame_exception_exit_1;
    }

    tmp_slice_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain_version_info );
    if ( tmp_slice_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 689;
        goto frame_exception_exit_1;
    }
    tmp_compare_left_21 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    Py_DECREF( tmp_slice_source_1 );
    if ( tmp_compare_left_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 689;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_21 = const_tuple_int_pos_3_int_pos_4_tuple;
    tmp_cmp_Lt_1 = RICH_COMPARE_BOOL_LT( tmp_compare_left_21, tmp_compare_right_21 );
    if ( tmp_cmp_Lt_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_21 );

        frame_module->f_lineno = 689;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_21 );
    if (tmp_cmp_Lt_1 == 1)
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_assign_source_191 = MAKE_FUNCTION_function_43_wraps_of_module_six(  );
    if ( tmp_assign_source_191 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_191 );

        frame_module->f_lineno = 690;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_wraps, tmp_assign_source_191 );
    goto branch_end_15;
    branch_no_15:;
    tmp_source_name_41 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_functools );

    if (unlikely( tmp_source_name_41 == NULL ))
    {
        tmp_source_name_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_functools );
    }

    if ( tmp_source_name_41 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 223599 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 697;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_192 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain_wraps );
    if ( tmp_assign_source_192 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 697;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_wraps, tmp_assign_source_192 );
    branch_end_15:;
    tmp_assign_source_193 = MAKE_FUNCTION_function_44_with_metaclass_of_module_six(  );
    if ( tmp_assign_source_193 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_193 );

        frame_module->f_lineno = 699;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_with_metaclass, tmp_assign_source_193 );
    tmp_assign_source_194 = MAKE_FUNCTION_function_45_add_metaclass_of_module_six(  );
    if ( tmp_assign_source_194 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_194 );

        frame_module->f_lineno = 710;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_add_metaclass, tmp_assign_source_194 );
    tmp_assign_source_195 = PyList_New( 0 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain___path__, tmp_assign_source_195 );
    tmp_assign_source_196 = const_str_plain_six;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___package__, tmp_assign_source_196 );
    tmp_source_name_42 = ((PyModuleObject *)module_six)->md_dict;
    tmp_called_165 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain_get );
    if ( tmp_called_165 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 730;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_455 = const_str_plain___spec__;
    frame_module->f_lineno = 730;
    tmp_compare_left_22 = CALL_FUNCTION_WITH_ARGS1( tmp_called_165, tmp_call_arg_element_455 );
    Py_DECREF( tmp_called_165 );
    if ( tmp_compare_left_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 730;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_22 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_22 != tmp_compare_right_22 );
    Py_DECREF( tmp_compare_left_22 );
    if (tmp_isnot_1)
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_assattr_name_7 = PyList_New( 0 );
    tmp_assattr_target_7 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___spec__ );

    if (unlikely( tmp_assattr_target_7 == NULL ))
    {
        tmp_assattr_target_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__ );
    }

    if ( tmp_assattr_target_7 == NULL )
    {
        Py_DECREF( tmp_assattr_name_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328204 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 731;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_7, const_str_plain_submodule_search_locations, tmp_assattr_name_7 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_name_7 );

        frame_module->f_lineno = 731;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_7 );
    branch_no_16:;
    tmp_source_name_43 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_43 == NULL ))
    {
        tmp_source_name_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_43 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 735;
        goto frame_exception_exit_1;
    }

    tmp_cond_value_8 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain_meta_path );
    if ( tmp_cond_value_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 735;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_8 );

        frame_module->f_lineno = 735;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_8 );
    if (tmp_cond_truth_8 == 1)
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_called_166 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    if ( tmp_called_166 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 736;
        goto frame_exception_exit_1;
    }
    tmp_source_name_44 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_44 == NULL ))
    {
        tmp_source_name_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_44 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 736;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_456 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain_meta_path );
    if ( tmp_call_arg_element_456 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 736;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 736;
    tmp_iter_arg_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_166, tmp_call_arg_element_456 );
    Py_DECREF( tmp_call_arg_element_456 );
    if ( tmp_iter_arg_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 736;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_197 = MAKE_ITERATOR( tmp_iter_arg_7 );
    Py_DECREF( tmp_iter_arg_7 );
    if ( tmp_assign_source_197 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 736;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_7__for_iterator.object == NULL );
    tmp_for_loop_7__for_iterator.object = tmp_assign_source_197;

    // Tried code
    loop_start_7:;
    tmp_next_source_7 = tmp_for_loop_7__for_iterator.object;

    tmp_assign_source_198 = ITERATOR_NEXT( tmp_next_source_7 );
    if (tmp_assign_source_198 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_7;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_module->f_lineno = 736;
            goto try_finally_handler_23;
        }
    }

    if (tmp_for_loop_7__iter_value.object == NULL)
    {
        tmp_for_loop_7__iter_value.object = tmp_assign_source_198;
    }
    else
    {
        PyObject *old = tmp_for_loop_7__iter_value.object;
        tmp_for_loop_7__iter_value.object = tmp_assign_source_198;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_8 = tmp_for_loop_7__iter_value.object;

    tmp_assign_source_199 = MAKE_ITERATOR( tmp_iter_arg_8 );
    if ( tmp_assign_source_199 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 736;
        goto try_finally_handler_24;
    }
    if (tmp_tuple_unpack_1__source_iter.object == NULL)
    {
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_199;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter.object;
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_199;
        Py_DECREF( old );
    }
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_200 = UNPACK_PARAMETER_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_200 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_module->f_lineno = 736;
        goto try_finally_handler_24;
    }
    if (tmp_tuple_unpack_1__element_1.object == NULL)
    {
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_200;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_1.object;
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_200;
        Py_DECREF( old );
    }
    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_201 = UNPACK_PARAMETER_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_201 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_module->f_lineno = 736;
        goto try_finally_handler_24;
    }
    if (tmp_tuple_unpack_1__element_2.object == NULL)
    {
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_201;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_2.object;
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_201;
        Py_DECREF( old );
    }
    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_1 ); assert( PyIter_Check( tmp_iterator_name_1 ) );

    tmp_iterator_attempt_1 = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt_1 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_24;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_1 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_24;
    }
    tmp_assign_source_202 = tmp_tuple_unpack_1__element_1.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_i, tmp_assign_source_202 );
    tmp_assign_source_203 = tmp_tuple_unpack_1__element_2.object;

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_importer, tmp_assign_source_203 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_24:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_23 = frame_module->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter.object );
    tmp_tuple_unpack_1__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1.object );
    tmp_tuple_unpack_1__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2.object );
    tmp_tuple_unpack_1__element_2.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_23;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_23 != NULL )
    {
        exception_type = exception_keeper_type_23;
        exception_value = exception_keeper_value_23;
        exception_tb = exception_keeper_tb_23;

        goto try_finally_handler_23;
    }

    goto finally_end_23;
    finally_end_23:;
    tmp_break_1 = false;
    // Tried code
    tmp_cond_value_9 = NULL;
    // Tried code
    tmp_type_arg_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_importer );

    if (unlikely( tmp_type_arg_1 == NULL ))
    {
        tmp_type_arg_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_importer );
    }

    if ( tmp_type_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328234 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 741;
        goto try_finally_handler_26;
    }

    tmp_source_name_45 = BUILTIN_TYPE1( tmp_type_arg_1 );
    if ( tmp_source_name_45 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 741;
        goto try_finally_handler_26;
    }
    tmp_compexpr_left_3 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain___name__ );
    Py_DECREF( tmp_source_name_45 );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 741;
        goto try_finally_handler_26;
    }
    tmp_compexpr_right_3 = const_str_plain__SixMetaPathImporter;
    tmp_assign_source_204 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    if ( tmp_assign_source_204 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 741;
        goto try_finally_handler_26;
    }
    if (tmp_and_1__value_1.object == NULL)
    {
        tmp_and_1__value_1.object = tmp_assign_source_204;
    }
    else
    {
        PyObject *old = tmp_and_1__value_1.object;
        tmp_and_1__value_1.object = tmp_assign_source_204;
        Py_DECREF( old );
    }
    tmp_cond_value_10 = tmp_and_1__value_1.object;

    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 741;
        goto try_finally_handler_26;
    }
    if (tmp_cond_truth_10 == 1)
    {
        goto condexpr_true_15;
    }
    else
    {
        goto condexpr_false_15;
    }
    condexpr_true_15:;
    tmp_cond_value_9 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1.object );
        tmp_and_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_source_name_46 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_importer );

    if (unlikely( tmp_source_name_46 == NULL ))
    {
        tmp_source_name_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_importer );
    }

    if ( tmp_source_name_46 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328234 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 742;
        goto try_finally_handler_27;
    }

    tmp_compexpr_left_4 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain_name );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 742;
        goto try_finally_handler_27;
    }
    tmp_compexpr_right_4 = const_str_plain_six;
    tmp_cond_value_9 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    if ( tmp_cond_value_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 742;
        goto try_finally_handler_27;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_27:;
    exception_keeper_type_24 = exception_type;
    exception_keeper_value_24 = exception_value;
    exception_keeper_tb_24 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_24 != NULL )
    {
        exception_type = exception_keeper_type_24;
        exception_value = exception_keeper_value_24;
        exception_tb = exception_keeper_tb_24;

        goto try_finally_handler_26;
    }

    goto finally_end_24;
    finally_end_24:;
    goto condexpr_end_15;
    condexpr_false_15:;
    tmp_cond_value_9 = tmp_and_1__value_1.object;

    Py_INCREF( tmp_cond_value_9 );
    condexpr_end_15:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_26:;
    exception_keeper_type_25 = exception_type;
    exception_keeper_value_25 = exception_value;
    exception_keeper_tb_25 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_25 != NULL )
    {
        exception_type = exception_keeper_type_25;
        exception_value = exception_keeper_value_25;
        exception_tb = exception_keeper_tb_25;

        goto try_finally_handler_25;
    }

    goto finally_end_25;
    finally_end_25:;
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_9 );

        frame_module->f_lineno = 741;
        goto try_finally_handler_25;
    }
    Py_DECREF( tmp_cond_value_9 );
    if (tmp_cond_truth_9 == 1)
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_source_name_47 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_47 == NULL ))
    {
        tmp_source_name_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_47 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 743;
        goto try_finally_handler_25;
    }

    tmp_delsubscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain_meta_path );
    if ( tmp_delsubscr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 743;
        goto try_finally_handler_25;
    }
    tmp_delsubscr_subscript_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_i );

    if (unlikely( tmp_delsubscr_subscript_1 == NULL ))
    {
        tmp_delsubscr_subscript_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_i );
    }

    if ( tmp_delsubscr_subscript_1 == NULL )
    {
        Py_DECREF( tmp_delsubscr_target_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 45862 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 743;
        goto try_finally_handler_25;
    }

    tmp_result = DEL_SUBSCRIPT( tmp_delsubscr_target_1, tmp_delsubscr_subscript_1 );
    Py_DECREF( tmp_delsubscr_target_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 743;
        goto try_finally_handler_25;
    }
    tmp_break_1 = true;
    goto try_finally_handler_start_1;
    branch_no_18:;
    try_finally_handler_start_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_25:;
    exception_keeper_type_26 = exception_type;
    exception_keeper_value_26 = exception_value;
    exception_keeper_tb_26 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_24 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_1__value_1.object );
    tmp_and_1__value_1.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_24;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_26 != NULL )
    {
        exception_type = exception_keeper_type_26;
        exception_value = exception_keeper_value_26;
        exception_tb = exception_keeper_tb_26;

        goto try_finally_handler_23;
    }

    // Break if entered via break.
    if ( tmp_break_1 )
    {

    goto loop_end_7;
    }
    goto finally_end_26;
    finally_end_26:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 736;
        goto try_finally_handler_23;
    }
    goto loop_start_7;
    loop_end_7:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_23:;
    exception_keeper_type_27 = exception_type;
    exception_keeper_value_27 = exception_value;
    exception_keeper_tb_27 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_25 = frame_module->f_lineno;
    Py_XDECREF( tmp_for_loop_7__iter_value.object );
    tmp_for_loop_7__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_7__for_iterator.object );
    tmp_for_loop_7__for_iterator.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_25;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_27 != NULL )
    {
        exception_type = exception_keeper_type_27;
        exception_value = exception_keeper_value_27;
        exception_tb = exception_keeper_tb_27;

        goto frame_exception_exit_1;
    }

    goto finally_end_27;
    finally_end_27:;
    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_i );
    if ( tmp_res == -1 ) PyErr_Clear();

    if ( tmp_res == -1 )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 45862 ], 23, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 745;
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_importer );
    if ( tmp_res == -1 ) PyErr_Clear();

    if ( tmp_res == -1 )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 328234 ], 30, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 745;
        goto frame_exception_exit_1;
    }

    branch_no_17:;
    tmp_source_name_49 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_49 == NULL ))
    {
        tmp_source_name_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_49 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 747;
        goto frame_exception_exit_1;
    }

    tmp_source_name_48 = LOOKUP_ATTRIBUTE( tmp_source_name_49, const_str_plain_meta_path );
    if ( tmp_source_name_48 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 747;
        goto frame_exception_exit_1;
    }
    tmp_called_167 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain_append );
    Py_DECREF( tmp_source_name_48 );
    if ( tmp_called_167 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 747;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_457 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_call_arg_element_457 == NULL ))
    {
        tmp_call_arg_element_457 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_call_arg_element_457 == NULL )
    {
        Py_DECREF( tmp_called_167 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 327058 ], 31, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 747;
        goto frame_exception_exit_1;
    }

    frame_module->f_lineno = 747;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_167, tmp_call_arg_element_457 );
    Py_DECREF( tmp_called_167 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 747;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

    // Restore frame exception if necessary.
#if 1
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif
    popFrameStack();

    assertFrameObject( frame_module );
    Py_DECREF( frame_module );

    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_module ) );
    }
    else if ( exception_tb->tb_frame != frame_module )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_module ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }

    // Put the previous frame back on top.
    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_module->f_executing -= 1;
#endif
    Py_DECREF( frame_module );

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_1:;

    return MOD_RETURN_VALUE( module_six );
module_exception_exit:
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
