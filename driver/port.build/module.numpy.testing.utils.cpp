// Generated code for Python source for module 'numpy.testing.utils'
// created by Nuitka version 0.5.5.3

// This code is in part copyright 2014 Kay Hayen.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "nuitka/prelude.hpp"

#include "__helpers.hpp"

// The _module_numpy$testing$utils is a Python object pointer of module type.

// Note: For full compatability with CPython, every module variable access
// needs to go through it except for cases where the module cannot possibly
// have changed in the mean time.

PyObject *module_numpy$testing$utils;
PyDictObject *moduledict_numpy$testing$utils;

// The module constants used
extern PyObject *const_int_0;
extern PyObject *const_float_0_0;
extern PyObject *const_float_0_5;
extern PyObject *const_int_neg_1;
extern PyObject *const_int_pos_1;
extern PyObject *const_int_pos_2;
extern PyObject *const_int_pos_3;
extern PyObject *const_int_pos_4;
extern PyObject *const_int_pos_5;
extern PyObject *const_int_pos_6;
extern PyObject *const_int_pos_7;
extern PyObject *const_int_pos_8;
extern PyObject *const_int_pos_9;
extern PyObject *const_str_empty;
extern PyObject *const_str_space;
extern PyObject *const_dict_empty;
extern PyObject *const_float_0_01;
extern PyObject *const_float_10_0;
extern PyObject *const_int_pos_10;
extern PyObject *const_int_pos_11;
extern PyObject *const_int_pos_12;
extern PyObject *const_int_pos_13;
extern PyObject *const_int_pos_14;
extern PyObject *const_int_pos_22;
extern PyObject *const_int_pos_24;
extern PyObject *const_int_pos_79;
extern PyObject *const_float_100_0;
extern PyObject *const_int_pos_100;
extern PyObject *const_str_newline;
extern PyObject *const_str_plain_M;
extern PyObject *const_str_plain__;
extern PyObject *const_str_plain_a;
extern PyObject *const_str_plain_b;
extern PyObject *const_str_plain_c;
extern PyObject *const_str_plain_d;
extern PyObject *const_str_plain_e;
extern PyObject *const_str_plain_f;
extern PyObject *const_str_plain_i;
extern PyObject *const_str_plain_j;
extern PyObject *const_str_plain_k;
extern PyObject *const_str_plain_l;
extern PyObject *const_str_plain_m;
extern PyObject *const_str_plain_o;
extern PyObject *const_str_plain_r;
extern PyObject *const_str_plain_s;
extern PyObject *const_str_plain_t;
extern PyObject *const_str_plain_x;
extern PyObject *const_str_plain_y;
extern PyObject *const_str_plain_z;
extern PyObject *const_tuple_empty;
extern PyObject *const_str_plain__m;
extern PyObject *const_str_plain_ax;
static PyObject *const_str_plain_ay;
extern PyObject *const_str_plain_d1;
extern PyObject *const_str_plain_d2;
extern PyObject *const_str_plain_d3;
static PyObject *const_str_plain_hc;
extern PyObject *const_str_plain_hq;
extern PyObject *const_str_plain_io;
extern PyObject *const_str_plain_kw;
extern PyObject *const_str_plain_np;
extern PyObject *const_str_plain_nt;
extern PyObject *const_str_plain_op;
extern PyObject *const_str_plain_os;
extern PyObject *const_str_plain_rc;
extern PyObject *const_str_plain_re;
extern PyObject *const_str_plain_rx;
static PyObject *const_str_plain_ry;
extern PyObject *const_str_plain_st;
extern PyObject *const_int_pos_10000;
extern PyObject *const_str_plain_abs;
extern PyObject *const_str_plain_all;
extern PyObject *const_str_plain_any;
extern PyObject *const_str_plain_cls;
extern PyObject *const_str_plain_imp;
extern PyObject *const_str_plain_inf;
extern PyObject *const_str_plain_inp;
extern PyObject *const_str_plain_log;
extern PyObject *const_str_plain_map;
extern PyObject *const_str_plain_max;
extern PyObject *const_str_plain_msg;
extern PyObject *const_str_plain_nan;
extern PyObject *const_str_plain_out;
extern PyObject *const_str_plain_pop;
static PyObject *const_str_plain_ref;
extern PyObject *const_str_plain_ret;
extern PyObject *const_str_plain_run;
extern PyObject *const_str_plain_sep;
extern PyObject *const_str_plain_str;
extern PyObject *const_str_plain_sys;
extern PyObject *const_str_plain_val;
static PyObject *const_str_plain_vdt;
extern PyObject *const_str_plain_args;
extern PyObject *const_str_plain_astr;
extern PyObject *const_str_plain_atol;
extern PyObject *const_str_plain_attr;
static PyObject *const_str_plain_bfmt;
extern PyObject *const_str_plain_bool;
extern PyObject *const_str_plain_char;
extern PyObject *const_str_plain_code;
extern PyObject *const_str_plain_comp;
extern PyObject *const_str_plain_cond;
extern PyObject *const_str_plain_copy;
extern PyObject *const_str_plain_dict;
extern PyObject *const_str_plain_diff;
static PyObject *const_str_plain_efmt;
extern PyObject *const_str_plain_exec;
extern PyObject *const_str_plain_file;
extern PyObject *const_str_plain_find;
extern PyObject *const_str_plain_flat;
extern PyObject *const_str_plain_func;
extern PyObject *const_str_plain_imag;
static PyObject *const_str_plain_inp1;
static PyObject *const_str_plain_inp2;
static PyObject *const_str_plain_inum;
extern PyObject *const_str_plain_join;
extern PyObject *const_str_plain_line;
extern PyObject *const_str_plain_list;
extern PyObject *const_str_plain_locs;
extern PyObject *const_str_plain_name;
extern PyObject *const_str_plain_nose;
static PyObject *const_str_plain_nulp;
extern PyObject *const_str_plain_path;
extern PyObject *const_str_plain_rand;
extern PyObject *const_str_plain_read;
extern PyObject *const_str_plain_real;
extern PyObject *const_str_plain_rtol;
extern PyObject *const_str_plain_self;
extern PyObject *const_str_plain_size;
extern PyObject *const_str_plain_test;
extern PyObject *const_str_plain_time;
extern PyObject *const_str_plain_type;
static PyObject *const_str_plain_ufmt;
extern PyObject *const_str_plain_view;
static PyObject *const_str_plain_x_id;
static PyObject *const_str_plain_y_id;
extern PyObject *const_list_int_0_list;
static PyObject *const_str_plain__diff;
extern PyObject *const_str_plain_array;
extern PyObject *const_str_plain_close;
extern PyObject *const_str_plain_count;
extern PyObject *const_str_plain_dtype;
extern PyObject *const_str_plain_empty;
extern PyObject *const_str_plain_float;
extern PyObject *const_str_plain_floor;
extern PyObject *const_str_plain_frame;
extern PyObject *const_str_plain_globs;
extern PyObject *const_str_plain_int32;
extern PyObject *const_str_plain_int64;
extern PyObject *const_str_plain_isinf;
extern PyObject *const_str_plain_isnan;
extern PyObject *const_str_plain_items;
extern PyObject *const_str_plain_label;
extern PyObject *const_str_plain_linux;
extern PyObject *const_str_plain_log10;
extern PyObject *const_str_plain_match;
extern PyObject *const_str_plain_names;
static PyObject *const_str_plain_npany;
extern PyObject *const_str_plain_numpy;
extern PyObject *const_str_plain_power;
extern PyObject *const_str_plain_ravel;
extern PyObject *const_str_plain_round;
extern PyObject *const_str_plain_scale;
extern PyObject *const_str_plain_shape;
extern PyObject *const_str_plain_split;
extern PyObject *const_str_plain_subok;
extern PyObject *const_str_plain_tests;
static PyObject *const_str_plain_times;
extern PyObject *const_str_plain_tools;
extern PyObject *const_str_plain_tuple;
static PyObject *const_str_plain_unary;
extern PyObject *const_str_plain_utils;
extern PyObject *const_str_plain_where;
extern PyObject *const_str_plain_write;
extern PyObject *const_str_plain_zeros;
extern PyObject *const_str_angle_lambda;
extern PyObject *const_str_angle_string;
static PyObject *const_str_plain_ACTUAL;
static PyObject *const_str_plain_Differ;
extern PyObject *const_str_plain___eq__;
extern PyObject *const_str_plain___lt__;
static PyObject *const_str_plain_actual;
extern PyObject *const_str_plain_always;
extern PyObject *const_str_plain_append;
extern PyObject *const_str_plain_arange;
extern PyObject *const_str_plain_around;
extern PyObject *const_str_plain_arrays;
extern PyObject *const_str_plain_astype;
static PyObject *const_str_plain_binary;
extern PyObject *const_str_plain_extend;
extern PyObject *const_str_plain_float_;
extern PyObject *const_str_plain_format;
extern PyObject *const_str_plain_getpid;
static PyObject *const_str_plain_gisinf;
static PyObject *const_str_plain_gisnan;
static PyObject *const_str_plain_hasval;
extern PyObject *const_str_plain_header;
extern PyObject *const_str_plain_ignore;
extern PyObject *const_str_plain_insert;
extern PyObject *const_str_plain_kwargs;
extern PyObject *const_str_plain_lineno;
static PyObject *const_str_plain_maxulp;
extern PyObject *const_str_plain_module;
extern PyObject *const_str_plain_number;
extern PyObject *const_str_plain_object;
extern PyObject *const_str_plain_pprint;
extern PyObject *const_str_plain_python;
static PyObject *const_str_plain_raises;
extern PyObject *const_str_plain_random;
extern PyObject *const_str_plain_record;
extern PyObject *const_str_plain_result;
extern PyObject *const_str_plain_rstrip;
extern PyObject *const_str_plain_runner;
extern PyObject *const_str_plain_search;
extern PyObject *const_str_plain_tolist;
extern PyObject *const_str_plain_values;
static PyObject *const_str_plain_xinfid;
static PyObject *const_str_plain_yinfid;
extern PyObject *const_tuple_none_tuple;
static PyObject *const_float_1e_minus_07;
static PyObject *const_str_plain_DESIRED;
static PyObject *const_str_plain_Process;
extern PyObject *const_str_plain___all__;
extern PyObject *const_str_plain___doc__;
extern PyObject *const_str_plain___str__;
extern PyObject *const_str_plain__module;
static PyObject *const_str_plain__record;
static PyObject *const_str_plain_actuali;
static PyObject *const_str_plain_actualr;
static PyObject *const_str_plain_aliased;
static PyObject *const_str_plain_assert_;
extern PyObject *const_str_plain_compare;
extern PyObject *const_str_plain_compile;
extern PyObject *const_str_plain_counter;
extern PyObject *const_str_plain_decimal;
static PyObject *const_str_plain_desired;
static PyObject *const_str_plain_difflib;
extern PyObject *const_str_plain_dirname;
extern PyObject *const_str_plain_doctest;
static PyObject *const_str_plain_elapsed;
extern PyObject *const_str_plain_err_msg;
static PyObject *const_str_plain_filters;
extern PyObject *const_str_plain_float32;
extern PyObject *const_str_plain_float64;
extern PyObject *const_str_plain_inspect;
extern PyObject *const_str_plain_invalid;
extern PyObject *const_str_plain_jiffies;
extern PyObject *const_str_plain_machine;
static PyObject *const_str_plain_measure;
extern PyObject *const_str_plain_message;
extern PyObject *const_str_plain_methods;
extern PyObject *const_str_plain_modules;
extern PyObject *const_str_plain_ndarray;
extern PyObject *const_str_plain_reduced;
extern PyObject *const_str_plain_reshape;
extern PyObject *const_str_plain_results;
static PyObject *const_str_plain_rundocs;
extern PyObject *const_str_plain_signbit;
static PyObject *const_str_plain_spacing;
extern PyObject *const_str_plain_verbose;
extern PyObject *const_str_plain_version;
static PyObject *const_str_plain_x_isinf;
static PyObject *const_str_plain_x_isnan;
static PyObject *const_str_plain_y_isinf;
static PyObject *const_str_plain_y_isnan;
static PyObject *const_int_neg_2147483648;
extern PyObject *const_str_plain_StringIO;
extern PyObject *const_str_plain___exit__;
extern PyObject *const_str_plain___file__;
extern PyObject *const_str_plain___init__;
extern PyObject *const_str_plain___name__;
static PyObject *const_str_plain__entered;
static PyObject *const_str_plain__filters;
extern PyObject *const_str_plain_allclose;
extern PyObject *const_str_plain_basename;
extern PyObject *const_str_plain_category;
static PyObject *const_str_plain_cls_attr;
static PyObject *const_str_plain_code_str;
static PyObject *const_str_plain_desiredi;
static PyObject *const_str_plain_desiredr;
extern PyObject *const_str_plain_division;
extern PyObject *const_str_plain_errstate;
extern PyObject *const_str_plain_f_locals;
static PyObject *const_str_plain_failures;
extern PyObject *const_str_plain_filename;
extern PyObject *const_str_plain_funcname;
extern PyObject *const_str_plain_function;
extern PyObject *const_str_plain_getvalue;
extern PyObject *const_str_plain_instance;
static PyObject *const_str_plain_isactnan;
static PyObject *const_str_plain_isdesnan;
extern PyObject *const_str_plain_isfinite;
static PyObject *const_str_plain_isnumber;
extern PyObject *const_str_plain_isscalar;
static PyObject *const_str_plain_max_nulp;
static PyObject *const_str_plain_max_size;
extern PyObject *const_str_plain_memusage;
extern PyObject *const_str_plain_operator;
static PyObject *const_str_plain_pathname;
extern PyObject *const_str_plain_platform;
extern PyObject *const_str_plain_readline;
extern PyObject *const_str_plain_splitext;
extern PyObject *const_str_plain_warnings;
static PyObject *const_str_plain_win32pdh;
static PyObject *const_str_plain_OpenQuery;
extern PyObject *const_str_plain___enter__;
extern PyObject *const_str_plain__getframe;
extern PyObject *const_str_plain_decorator;
static PyObject *const_str_plain_diff_list;
extern PyObject *const_str_plain_enumerate;
extern PyObject *const_str_plain_f_globals;
static PyObject *const_str_plain_gisfinite;
static PyObject *const_str_plain_nulp_diff;
static PyObject *const_str_plain_runstring;
static PyObject *const_str_plain_sc_actual;
static PyObject *const_str_plain_testmatch;
extern PyObject *const_str_plain_traceback;
static PyObject *const_str_plain_AddCounter;
static PyObject *const_str_plain_CloseQuery;
extern PyObject *const_str_plain___future__;
extern PyObject *const_str_plain___module__;
static PyObject *const_str_plain__load_time;
extern PyObject *const_str_plain_asanyarray;
extern PyObject *const_str_plain_comparison;
static PyObject *const_str_plain_format_exc;
extern PyObject *const_str_plain_isfunction;
extern PyObject *const_str_plain_issubdtype;
extern PyObject *const_str_plain_nosetester;
static PyObject *const_str_plain_sc_desired;
extern PyObject *const_str_plain_splitlines;
extern PyObject *const_str_plain_startswith;
static PyObject *const_str_plain_usecomplex;
extern PyObject *const_str_plain_common_type;
extern PyObject *const_str_plain_description;
extern PyObject *const_str_plain_find_module;
static PyObject *const_str_plain_getrefcount;
extern PyObject *const_str_plain_import_nose;
extern PyObject *const_str_plain_load_module;
static PyObject *const_str_plain_processName;
static PyObject *const_str_plain_showwarning;
static PyObject *const_str_plain_significant;
static PyObject *const_str_plain_test_string;
extern PyObject *const_tuple_int_pos_1_tuple;
extern PyObject *const_tuple_none_none_tuple;
extern PyObject *const_tuple_none_true_tuple;
extern PyObject *const_tuple_str_empty_tuple;
static PyObject *const_str_plain_PDH_FMT_LONG;
static PyObject *const_str_plain__showwarning;
static PyObject *const_str_plain_assert_equal;
static PyObject *const_str_plain_assert_warns;
static PyObject *const_str_plain_integer_repr;
extern PyObject *const_str_plain_iscomplexobj;
static PyObject *const_str_plain_local_values;
extern PyObject *const_str_plain_simplefilter;
extern PyObject *const_str_plain_version_info;
extern PyObject *const_tuple_false_none_tuple;
extern PyObject *const_str_plain_DocTestFinder;
static PyObject *const_str_plain_DocTestRunner;
static PyObject *const_str_plain_RemoveCounter;
extern PyObject *const_str_plain___metaclass__;
static PyObject *const_str_plain__integer_repr;
extern PyObject *const_str_plain_assert_raises;
static PyObject *const_str_plain_build_err_msg;
static PyObject *const_str_plain_warning_class;
extern PyObject *const_tuple_str_plain_s_tuple;
extern PyObject *const_tuple_str_plain_x_tuple;
static PyObject *const_str_plain_WarningManager;
static PyObject *const_str_plain_WarningMessage;
static PyObject *const_str_plain__category_name;
static PyObject *const_str_plain__proc_pid_stat;
extern PyObject *const_str_plain_catch_warnings;
extern PyObject *const_str_plain_print_function;
static PyObject *const_str_plain_raise_on_error;
extern PyObject *const_tuple_str_plain_op_tuple;
static PyObject *const_str_plain_IgnoreException;
static PyObject *const_str_plain_MakeCounterPath;
extern PyObject *const_str_plain_absolute_import;
static PyObject *const_str_plain_assert_allclose;
extern PyObject *const_tuple_str_plain_any_tuple;
static PyObject *const_tuple_str_plain_nan_tuple;
static PyObject *const_str_plain_CollectQueryData;
static PyObject *const_str_plain__WARNING_DETAILS;
static PyObject *const_str_plain_compat_func_name;
static PyObject *const_str_plain_decorate_methods;
extern PyObject *const_tuple_int_pos_1_none_tuple;
extern PyObject *const_tuple_str_empty_true_tuple;
extern PyObject *const_tuple_str_plain_args_tuple;
extern PyObject *const_tuple_str_plain_self_tuple;
static PyObject *const_str_plain_assert_array_less;
static PyObject *const_str_plain_chk_same_position;
static PyObject *const_tuple_str_plain_isnan_tuple;
static PyObject *const_long_neg_9223372036854775808;
static PyObject *const_str_plain_assert_array_equal;
static PyObject *const_str_plain_assert_no_warnings;
static PyObject *const_str_plain_print_assert_equal;
static PyObject *const_str_plain__gen_alignment_data;
static PyObject *const_str_plain_assert_almost_equal;
static PyObject *const_str_plain_assert_approx_equal;
static PyObject *const_str_plain_assert_string_equal;
extern PyObject *const_tuple_str_plain_ndarray_tuple;
static PyObject *const_str_plain_assert_array_compare;
static PyObject *const_str_plain_assert_array_max_ulp;
extern PyObject *const_tuple_str_plain_StringIO_tuple;
static PyObject *const_str_plain__assert_valid_refcount;
static PyObject *const_tuple_str_plain__load_time_tuple;
static PyObject *const_tuple_str_plain_isfunction_tuple;
extern PyObject *const_tuple_str_plain_issubdtype_tuple;
static PyObject *const_tuple_str_plain_import_nose_tuple;
static PyObject *const_str_plain_GetFormattedCounterValue;
static PyObject *const_str_plain_GetPerformanceAttributes;
static PyObject *const_tuple_str_plain_python_int_0_tuple;
static PyObject *const_str_plain_assert_array_almost_equal;
static PyObject *const_tuple_str_plain_s_str_plain_o_tuple;
extern PyObject *const_tuple_str_plain_x_str_plain_y_tuple;
static PyObject *const_tuple_int_pos_6_str_empty_true_tuple;
static PyObject *const_tuple_int_pos_7_str_empty_true_tuple;
static PyObject *const_tuple_none_int_neg_1_none_none_tuple;
static PyObject *const_tuple_str_empty_true_str_empty_tuple;
static PyObject *const_tuple_str_plain__proc_pid_stat_tuple;
static PyObject *const_tuple_str_plain_x_str_plain_np_tuple;
static PyObject *const_dict_117eec822878c8a1e3d3fe65ec8106fd;
static PyObject *const_dict_568ac7eccabc8d891d945f2840f427e7;
extern PyObject *const_dict_a00acf95180a0925f15877b623331589;
extern PyObject *const_dict_aae7649b9175b1ed5738500d56e46831;
static PyObject *const_dict_c05cf8ed9016cad683e758f62a6613d4;
extern PyObject *const_dict_d457aeaf5237c8e9bb82fdcc508844e3;
static PyObject *const_dict_ff8ef3bf3e81fbdb8830624987bd4652;
extern PyObject *const_tuple_int_0_int_pos_1_int_pos_2_tuple;
static PyObject *const_tuple_str_plain_s_str_plain_msg_tuple;
static PyObject *const_tuple_str_plain_val_str_plain_msg_tuple;
static PyObject *const_str_plain_assert_array_almost_equal_nulp;
static PyObject *const_tuple_str_plain_astr_str_plain_dict_tuple;
static PyObject *const_list_7ff88c5eb534ce1ca34d0b88f2804a46_list;
static PyObject *const_str_digest_07059cc5a6281cbd180f0d258a57c2b0;
static PyObject *const_str_digest_077c92f8b9a0ec14761fbe9274e7858b;
static PyObject *const_str_digest_08d5dba3d22036b2b726cea75f46ce7c;
static PyObject *const_str_digest_0b02c8e9b4951ce86569b89788daf148;
extern PyObject *const_str_digest_0b4e4303427381d5eb687ef96e3ca993;
static PyObject *const_str_digest_0b6b36f18d2504ba79e948cc1c5fa89d;
static PyObject *const_str_digest_0e237883597543ba31fbcaf2b4ac913b;
extern PyObject *const_str_digest_1458a437b3c6456f9ebf61d46c9ed13e;
static PyObject *const_str_digest_199a35a9e1f956a713e64690a658d3eb;
extern PyObject *const_str_digest_1a18da63cbbfb49cb9616e6bfd35f662;
static PyObject *const_str_digest_2288b7fcb22c5fc99af680fe674e2045;
extern PyObject *const_str_digest_23b58def11b45727d3351702515f86af;
static PyObject *const_str_digest_25406a365cb70649617f2320e857472f;
static PyObject *const_str_digest_2697ab5d65ed4cb1a4e3e6192186ee0d;
static PyObject *const_str_digest_2a869c320e87479fde855b1b6260aed3;
extern PyObject *const_str_digest_2f43b42fd833d1e77420a8dae7419000;
static PyObject *const_str_digest_3390830ec637bd8506b2693c0e9cef6b;
static PyObject *const_str_digest_3967666f82032e8c08707da056df8542;
static PyObject *const_str_digest_3bb083c0193c503b32d4df24830b6337;
static PyObject *const_str_digest_3d5c6b6833444c6030fa6f5dd7fd9d0b;
extern PyObject *const_str_digest_3e8d4c5fbc78426f466387c576765620;
static PyObject *const_str_digest_409d947cbf46d6b05f44303655f0e58b;
static PyObject *const_str_digest_41e55c57c7d6194d65db50576a717684;
static PyObject *const_str_digest_42d9e20690bfe0906fc96d03cff6b46c;
static PyObject *const_str_digest_43beb5f139ed80a3cbd558fede4ca34a;
static PyObject *const_str_digest_4b97cca84d8dd71cdb3b4fd4c8f1d17e;
static PyObject *const_str_digest_4c7696ea5ac638d1c7928f1060731d88;
static PyObject *const_str_digest_4d1a6cdb540f53c457d4f66d06800fb9;
static PyObject *const_str_digest_545db4280f4804ea7fce15cd4682edc4;
static PyObject *const_str_digest_54a89d3000093388391e8875650c39b5;
static PyObject *const_str_digest_555f3d9bdca506ab50d243f7793be335;
static PyObject *const_str_digest_55bf588743b8243d910cfce315631034;
static PyObject *const_str_digest_56a309cdbf4c18e741b09e2a74997f79;
static PyObject *const_str_digest_5b9ecf91c90bef2f7fd269f1d3389789;
static PyObject *const_str_digest_61fe48964d9b6a43acacd5c641dc9222;
static PyObject *const_str_digest_6215faf19a1de8aa9e1cf1b6dc235503;
static PyObject *const_str_digest_63c4d244f9b605cb25bc97175ab02bac;
static PyObject *const_str_digest_6525023e51fe72f9ff6982f820c668de;
static PyObject *const_str_digest_65445bab21488f0a0a7d901ec269124b;
static PyObject *const_str_digest_6615c0a39a952966fb0597d294f044fa;
static PyObject *const_str_digest_68ac50b36ab744d6652388991ad76ae2;
static PyObject *const_str_digest_6a84b36aa6d3c48fbbafd2ea8b609c34;
static PyObject *const_str_digest_70134d6b4b5effedf386e473944f5e95;
static PyObject *const_str_digest_7503219a820c3e9ee0c0edb6797a5738;
static PyObject *const_str_digest_762d604a9c6488fb528b0ba62876f69f;
static PyObject *const_str_digest_77af59999e5dac5a00c73a6a39c4eb1c;
static PyObject *const_str_digest_7b8ab97309813f2adb309ef116862e76;
static PyObject *const_str_digest_7d19d66ae6d8e95a0b8f189b886d27de;
static PyObject *const_str_digest_7d7c3cb8a9268dee05555a28c7406eeb;
static PyObject *const_str_digest_7e2409b427a8ab16671b716477014265;
static PyObject *const_str_digest_81311c6c7b12df70d1d2f74b37384cc2;
static PyObject *const_str_digest_86dd7c9709aea44f916e58c561b41c4d;
static PyObject *const_str_digest_882f2ed7f1573d008d695fb792817c72;
extern PyObject *const_str_digest_8a3551674d9174096d8a003980610b3f;
extern PyObject *const_str_digest_8a47f7a29a4eee7db625be1a330c505b;
static PyObject *const_str_digest_8b612521d6eef9ee6726b65f8c94efbe;
static PyObject *const_str_digest_8c6ec1f522f2db10b81bdcf429e53d82;
static PyObject *const_str_digest_8d39c6f825d19797590e9e3179e3fa6c;
extern PyObject *const_str_digest_8f6c4ce8673a7969a1a7f3729b7f0ba0;
static PyObject *const_str_digest_9327ab6a3aa9cc4edf750939002d9792;
static PyObject *const_str_digest_9638e2f878cb7246bc12eec89e19ff05;
static PyObject *const_str_digest_969a3200cb32934e2cf29c4b9f3a5ea7;
static PyObject *const_str_digest_96e07cefe56c6dcc97ad00bd79027eeb;
static PyObject *const_str_digest_989ea08f922c34ff2003b946f35a2a71;
static PyObject *const_str_digest_9a015f18a46d205149e8a83cc434c73c;
static PyObject *const_str_digest_9c41dab8e025b5db402b00cface5d381;
static PyObject *const_str_digest_9d5fe33f86d1dde006a83ff6e2484903;
extern PyObject *const_str_digest_a29bf7b3b71fbb8ef25655c7091b08b9;
static PyObject *const_str_digest_a7eecd7dd1f310504bfa1aad4f8c2ff9;
static PyObject *const_str_digest_aeef159a70e347ede62d2cf8a664d83a;
static PyObject *const_str_digest_af944d9dcdae647078b80309bda477ae;
static PyObject *const_str_digest_b97c16860a8f4af366a6279f213681b6;
static PyObject *const_str_digest_b9ba15314bce7173837e948e2f705918;
static PyObject *const_str_digest_b9e9511ece9e362386a977d4b1e26287;
extern PyObject *const_str_digest_c09d4ef95ea8db1b32a420bd409613dc;
static PyObject *const_str_digest_c3436da65ce3789859f5d3e930c77680;
static PyObject *const_str_digest_caf8c8bda71ad7c8d5e030384aab91f0;
static PyObject *const_str_digest_cc58713dce7955eb1c70d80bba7aeaed;
static PyObject *const_str_digest_d770068533d4529e9c3183691e904fd8;
static PyObject *const_str_digest_da1b9f987f03027db4efbd56122fbfd2;
static PyObject *const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad;
static PyObject *const_str_digest_dc69964195218c92c1920611a4b0f89a;
static PyObject *const_str_digest_e2c6ffe2bc771998ad44ce45a4fc70c9;
static PyObject *const_str_digest_e3ecc3b986655ba484341b93f8a67c54;
static PyObject *const_str_digest_e65042100e7060625f0d06a26fd41cf8;
static PyObject *const_str_digest_e6d92617a84f2256b630a8b04423d0bc;
static PyObject *const_str_digest_e7f7f86a2730bf491604726e58219774;
static PyObject *const_str_digest_ea77fb944baf01e2248a00918c7df409;
static PyObject *const_str_digest_ea82fc8d8f320d771fe2d4072039e7bf;
static PyObject *const_str_digest_f0e0fa64d19a4c1bad20bab142899ac3;
static PyObject *const_str_digest_f1e178ff29bd1a44d5155691bff673e8;
static PyObject *const_str_digest_f4c3a0245533a786349a32e5cc4dda24;
static PyObject *const_str_digest_fa1712245d7a8c0d5abfd2fd59c5f16d;
static PyObject *const_str_digest_faa386a8ad794cd50be499b4e9ca7a93;
static PyObject *const_str_digest_fcc53f6e6cd9f93c6c4d11262486eded;
extern PyObject *const_tuple_str_plain_args_str_plain_kwargs_tuple;
static PyObject *const_tuple_007a4a361645d2cd1ae628dc362a1d50_tuple;
static PyObject *const_tuple_04c55a1b731b23263b9c9e015755e187_tuple;
static PyObject *const_tuple_0dfa334fafa0cdd681c6614ff859d9a1_tuple;
static PyObject *const_tuple_194a86e43e0cb7c7c00eac0bfd665f10_tuple;
static PyObject *const_tuple_22025bc25a02798f8cb5fcbffa9efb3b_tuple;
static PyObject *const_tuple_23579b8f33cf06464b97783a718253a4_tuple;
static PyObject *const_tuple_3866cf064071516dd9f2d31820e48b6c_tuple;
static PyObject *const_tuple_428ef0c7dcad024f447304283fd888c5_tuple;
static PyObject *const_tuple_42c5f17d04fd97d74a40e0514ae96463_tuple;
static PyObject *const_tuple_48cfa7fbb491e1ee96b94a08b3d51cb5_tuple;
static PyObject *const_tuple_49c70cfa143642b7953372e431b26b96_tuple;
static PyObject *const_tuple_501a23729e7545fd650e3d9d37994226_tuple;
static PyObject *const_tuple_565527652c835353ad2b809796ba3ff4_tuple;
static PyObject *const_tuple_5eda0b27f24d46759a2212549f83add5_tuple;
static PyObject *const_tuple_684cfe7337791d6bf1e3a2597e55be85_tuple;
static PyObject *const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple;
static PyObject *const_tuple_83095d153c5049ea88477bf4c75fd7a8_tuple;
static PyObject *const_tuple_8346555f6603c45d7a96f8bbcf33c858_tuple;
static PyObject *const_tuple_887e7200f623e311cc241cd4365ff0fb_tuple;
static PyObject *const_tuple_90d9f56f86b3e4690ccdd1a1a531fe57_tuple;
static PyObject *const_tuple_9156f683dd46f839464b6b2e773c882f_tuple;
static PyObject *const_tuple_939737dafb6355bbbcdd58d53fa23ae8_tuple;
static PyObject *const_tuple_944de8a92e09905a5d1b64e02c8558ea_tuple;
static PyObject *const_tuple_a0be4d43003bcdd9738a5dd9e83ef4ca_tuple;
static PyObject *const_tuple_a0f3948b9b9c78cd8eedbd6f01b94ef1_tuple;
static PyObject *const_tuple_a75b09c38b1fc22bca87afab41451769_tuple;
static PyObject *const_tuple_b0000c959599fe90154103540589c71f_tuple;
static PyObject *const_tuple_b115fec10b23d08e490385d180dcaef7_tuple;
extern PyObject *const_tuple_b3c114ff65e5229953139969fd8f9f4c_tuple;
static PyObject *const_tuple_b3d1b3fd4511ac781471142f47e94ca9_tuple;
static PyObject *const_tuple_bc4870a37e43080125cbfc56c5c6d0a1_tuple;
static PyObject *const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple;
static PyObject *const_tuple_cda8268996f4e94966c8388ac728262e_tuple;
static PyObject *const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple;
static PyObject *const_tuple_d15e90628f0c62410bc0a44f0792d58a_tuple;
static PyObject *const_tuple_d9c647ca269ce7d9546b6525c8617d06_tuple;
static PyObject *const_tuple_e5ff69c5c981ae300c528c1b5d2fdef7_tuple;
static PyObject *const_tuple_e6ae32c021e964e54358d6bfdfb0ab8c_tuple;
static PyObject *const_tuple_ea576db0f218915852b22fa1292dfcd7_tuple;
static PyObject *const_tuple_f0d9b68b47a5d49cf65c29e25eae8b9f_tuple;
static PyObject *const_tuple_faacf22dc31885222b083d7ea9c5ba72_tuple;
static PyObject *const_tuple_str_plain_zeros_str_plain_float64_tuple;
static PyObject *const_tuple_str_plain_ACTUAL_str_plain_DESIRED_tuple;
static PyObject *const_tuple_str_plain_actual_str_plain_desired_tuple;
static PyObject *const_tuple_str_plain_isinf_str_plain_errstate_tuple;
static PyObject *const_tuple_str_plain__load_time_str_plain_time_tuple;
static PyObject *const_tuple_str_plain_x_str_plain_y_str_plain_np_tuple;
static PyObject *const_tuple_str_plain_isfinite_str_plain_errstate_tuple;
static PyObject *const_tuple_float_1e_minus_07_int_0_str_empty_true_tuple;
static PyObject *const_tuple_str_plain_x_str_plain_y_str_plain_nulp_tuple;
static PyObject *const_tuple_str_plain_rx_str_plain_ry_str_plain_vdt_tuple;
static PyObject *const_tuple_str_plain_x_str_plain_y_str_plain_dtype_tuple;
static PyObject *const_tuple_str_plain_processName_str_plain_instance_tuple;
static PyObject *const_tuple_str_plain_x_str_plain_isnan_str_plain_st_tuple;
static PyObject *const_tuple_str_plain_x_str_plain_vdt_str_plain_comp_tuple;
static PyObject *const_tuple_str_plain_func_str_plain_args_str_plain_kw_tuple;
static PyObject *const_tuple_str_plain_filename_str_plain_raise_on_error_tuple;
static PyObject *const_tuple_str_plain__proc_pid_stat_str_plain__load_time_tuple;
static PyObject *const_tuple_str_plain_args_str_plain_kwargs_str_plain_log_tuple;
static PyObject *const_tuple_str_plain_args_str_plain_kwargs_str_plain_nose_tuple;
static PyObject *const_tuple_str_plain_x_id_str_plain_y_id_str_plain_hasval_tuple;
static PyObject *const_tuple_str_plain__proc_pid_stat_str_plain_f_str_plain_l_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_record_str_plain_module_tuple;
static PyObject *const_tuple_str_plain_dtype_str_plain_type_str_plain_max_size_tuple;
static PyObject *const_tuple_str_plain_around_str_plain_number_str_plain_float__tuple;
static PyObject *const_tuple_str_plain_code_str_str_plain_times_str_plain_label_tuple;
static PyObject *const_tuple_str_plain_float32_str_plain_empty_str_plain_arange_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_log_str_plain_showwarning_tuple;
static PyObject *const_tuple_str_plain_iscomplexobj_str_plain_real_str_plain_imag_tuple;
static PyObject *const_tuple_str_plain_cls_str_plain_decorator_str_plain_testmatch_tuple;
static PyObject *const_tuple_str_plain_x_str_plain_vdt_str_plain_comp_str_plain_rx_tuple;
static PyObject *const_tuple_str_plain_ndarray_str_plain_isscalar_str_plain_signbit_tuple;
static PyObject *const_tuple_str_plain_a_str_plain_b_str_plain_maxulp_str_plain_dtype_tuple;
static PyObject *const_tuple_str_plain_test_string_str_plain_actual_str_plain_desired_tuple;
static PyObject *const_tuple_str_plain_processName_str_plain_instance_str_plain_win32pdh_tuple;
static PyObject *const_tuple_str_plain_x_str_plain_isinf_str_plain_errstate_str_plain_st_tuple;
static PyObject *const_tuple_str_plain_x_str_plain_y_str_plain_err_msg_str_plain_verbose_tuple;
static PyObject *const_tuple_str_plain_x_id_str_plain_y_id_str_plain_hasval_str_plain_msg_tuple;

static void _initModuleConstants(void)
{
    const_str_plain_ay = UNSTREAM_STRING( &constant_bin[ 4855 ], 2, 1 );
    const_str_plain_hc = UNSTREAM_STRING( &constant_bin[ 213931 ], 2, 1 );
    const_str_plain_ry = UNSTREAM_STRING( &constant_bin[ 427 ], 2, 1 );
    const_str_plain_ref = UNSTREAM_STRING( &constant_bin[ 22 ], 3, 1 );
    const_str_plain_vdt = UNSTREAM_STRING( &constant_bin[ 217622 ], 3, 1 );
    const_str_plain_bfmt = UNSTREAM_STRING( &constant_bin[ 218182 ], 4, 1 );
    const_str_plain_efmt = UNSTREAM_STRING( &constant_bin[ 2020741 ], 4, 1 );
    const_str_plain_inp1 = UNSTREAM_STRING( &constant_bin[ 2020745 ], 4, 1 );
    const_str_plain_inp2 = UNSTREAM_STRING( &constant_bin[ 2020749 ], 4, 1 );
    const_str_plain_inum = UNSTREAM_STRING( &constant_bin[ 213827 ], 4, 1 );
    const_str_plain_nulp = UNSTREAM_STRING( &constant_bin[ 217345 ], 4, 1 );
    const_str_plain_ufmt = UNSTREAM_STRING( &constant_bin[ 218132 ], 4, 1 );
    const_str_plain_x_id = UNSTREAM_STRING( &constant_bin[ 215974 ], 4, 1 );
    const_str_plain_y_id = UNSTREAM_STRING( &constant_bin[ 216024 ], 4, 1 );
    const_str_plain__diff = UNSTREAM_STRING( &constant_bin[ 217396 ], 5, 1 );
    const_str_plain_npany = UNSTREAM_STRING( &constant_bin[ 216268 ], 5, 1 );
    const_str_plain_times = UNSTREAM_STRING( &constant_bin[ 217054 ], 5, 1 );
    const_str_plain_unary = UNSTREAM_STRING( &constant_bin[ 1470353 ], 5, 1 );
    const_str_plain_ACTUAL = UNSTREAM_STRING( &constant_bin[ 2020753 ], 6, 1 );
    const_str_plain_Differ = UNSTREAM_STRING( &constant_bin[ 382421 ], 6, 1 );
    const_str_plain_actual = UNSTREAM_STRING( &constant_bin[ 214243 ], 6, 1 );
    const_str_plain_binary = UNSTREAM_STRING( &constant_bin[ 423 ], 6, 1 );
    const_str_plain_gisinf = UNSTREAM_STRING( &constant_bin[ 216316 ], 6, 1 );
    const_str_plain_gisnan = UNSTREAM_STRING( &constant_bin[ 214728 ], 6, 1 );
    const_str_plain_hasval = UNSTREAM_STRING( &constant_bin[ 216130 ], 6, 1 );
    const_str_plain_maxulp = UNSTREAM_STRING( &constant_bin[ 217433 ], 6, 1 );
    const_str_plain_raises = UNSTREAM_STRING( &constant_bin[ 83951 ], 6, 1 );
    const_str_plain_xinfid = UNSTREAM_STRING( &constant_bin[ 216354 ], 6, 1 );
    const_str_plain_yinfid = UNSTREAM_STRING( &constant_bin[ 216406 ], 6, 1 );
    const_float_1e_minus_07 = UNSTREAM_FLOAT( &constant_bin[ 2020759 ] );
    const_str_plain_DESIRED = UNSTREAM_STRING( &constant_bin[ 2020767 ], 7, 1 );
    const_str_plain_Process = UNSTREAM_STRING( &constant_bin[ 331087 ], 7, 1 );
    const_str_plain__record = UNSTREAM_STRING( &constant_bin[ 1529191 ], 7, 1 );
    const_str_plain_actuali = UNSTREAM_STRING( &constant_bin[ 2020774 ], 7, 1 );
    const_str_plain_actualr = UNSTREAM_STRING( &constant_bin[ 2020781 ], 7, 1 );
    const_str_plain_aliased = UNSTREAM_STRING( &constant_bin[ 2020788 ], 7, 1 );
    const_str_plain_assert_ = UNSTREAM_STRING( &constant_bin[ 83944 ], 7, 1 );
    const_str_plain_desired = UNSTREAM_STRING( &constant_bin[ 214190 ], 7, 1 );
    const_str_plain_difflib = UNSTREAM_STRING( &constant_bin[ 2020795 ], 7, 1 );
    const_str_plain_elapsed = UNSTREAM_STRING( &constant_bin[ 217155 ], 7, 1 );
    const_str_plain_filters = UNSTREAM_STRING( &constant_bin[ 339091 ], 7, 1 );
    const_str_plain_measure = UNSTREAM_STRING( &constant_bin[ 743255 ], 7, 1 );
    const_str_plain_rundocs = UNSTREAM_STRING( &constant_bin[ 2020802 ], 7, 1 );
    const_str_plain_spacing = UNSTREAM_STRING( &constant_bin[ 772473 ], 7, 1 );
    const_str_plain_x_isinf = UNSTREAM_STRING( &constant_bin[ 215819 ], 7, 1 );
    const_str_plain_x_isnan = UNSTREAM_STRING( &constant_bin[ 215650 ], 7, 1 );
    const_str_plain_y_isinf = UNSTREAM_STRING( &constant_bin[ 215872 ], 7, 1 );
    const_str_plain_y_isnan = UNSTREAM_STRING( &constant_bin[ 215703 ], 7, 1 );
    const_int_neg_2147483648 = PyInt_FromLong( -2147483648l );
    const_str_plain__entered = UNSTREAM_STRING( &constant_bin[ 2020809 ], 8, 1 );
    const_str_plain__filters = UNSTREAM_STRING( &constant_bin[ 2020817 ], 8, 1 );
    const_str_plain_cls_attr = UNSTREAM_STRING( &constant_bin[ 2020825 ], 8, 1 );
    const_str_plain_code_str = UNSTREAM_STRING( &constant_bin[ 217000 ], 8, 1 );
    const_str_plain_desiredi = UNSTREAM_STRING( &constant_bin[ 2020833 ], 8, 1 );
    const_str_plain_desiredr = UNSTREAM_STRING( &constant_bin[ 2020841 ], 8, 1 );
    const_str_plain_failures = UNSTREAM_STRING( &constant_bin[ 449430 ], 8, 1 );
    const_str_plain_isactnan = UNSTREAM_STRING( &constant_bin[ 214820 ], 8, 1 );
    const_str_plain_isdesnan = UNSTREAM_STRING( &constant_bin[ 214766 ], 8, 1 );
    const_str_plain_isnumber = UNSTREAM_STRING( &constant_bin[ 215445 ], 8, 1 );
    const_str_plain_max_nulp = UNSTREAM_STRING( &constant_bin[ 2020849 ], 8, 1 );
    const_str_plain_max_size = UNSTREAM_STRING( &constant_bin[ 218078 ], 8, 1 );
    const_str_plain_pathname = UNSTREAM_STRING( &constant_bin[ 216618 ], 8, 1 );
    const_str_plain_win32pdh = UNSTREAM_STRING( &constant_bin[ 213877 ], 8, 1 );
    const_str_plain_OpenQuery = UNSTREAM_STRING( &constant_bin[ 2020857 ], 9, 1 );
    const_str_plain_diff_list = UNSTREAM_STRING( &constant_bin[ 2020866 ], 9, 1 );
    const_str_plain_gisfinite = UNSTREAM_STRING( &constant_bin[ 214690 ], 9, 1 );
    const_str_plain_nulp_diff = UNSTREAM_STRING( &constant_bin[ 217392 ], 9, 1 );
    const_str_plain_runstring = UNSTREAM_STRING( &constant_bin[ 2020875 ], 9, 1 );
    const_str_plain_sc_actual = UNSTREAM_STRING( &constant_bin[ 215390 ], 9, 1 );
    const_str_plain_testmatch = UNSTREAM_STRING( &constant_bin[ 216837 ], 9, 1 );
    const_str_plain_AddCounter = UNSTREAM_STRING( &constant_bin[ 2020884 ], 10, 1 );
    const_str_plain_CloseQuery = UNSTREAM_STRING( &constant_bin[ 2020894 ], 10, 1 );
    const_str_plain__load_time = UNSTREAM_STRING( &constant_bin[ 213604 ], 10, 1 );
    const_str_plain_format_exc = UNSTREAM_STRING( &constant_bin[ 2020904 ], 10, 1 );
    const_str_plain_sc_desired = UNSTREAM_STRING( &constant_bin[ 215334 ], 10, 1 );
    const_str_plain_usecomplex = UNSTREAM_STRING( &constant_bin[ 214483 ], 10, 1 );
    const_str_plain_getrefcount = UNSTREAM_STRING( &constant_bin[ 2020914 ], 11, 1 );
    const_str_plain_processName = UNSTREAM_STRING( &constant_bin[ 214080 ], 11, 1 );
    const_str_plain_showwarning = UNSTREAM_STRING( &constant_bin[ 2020925 ], 11, 1 );
    const_str_plain_significant = UNSTREAM_STRING( &constant_bin[ 215277 ], 11, 1 );
    const_str_plain_test_string = UNSTREAM_STRING( &constant_bin[ 214964 ], 11, 1 );
    const_str_plain_PDH_FMT_LONG = UNSTREAM_STRING( &constant_bin[ 2020936 ], 12, 1 );
    const_str_plain__showwarning = UNSTREAM_STRING( &constant_bin[ 2020948 ], 12, 1 );
    const_str_plain_assert_equal = UNSTREAM_STRING( &constant_bin[ 214292 ], 12, 1 );
    const_str_plain_assert_warns = UNSTREAM_STRING( &constant_bin[ 2020960 ], 12, 1 );
    const_str_plain_integer_repr = UNSTREAM_STRING( &constant_bin[ 217482 ], 12, 1 );
    const_str_plain_local_values = UNSTREAM_STRING( &constant_bin[ 217763 ], 12, 1 );
    const_str_plain_DocTestRunner = UNSTREAM_STRING( &constant_bin[ 2020972 ], 13, 1 );
    const_str_plain_RemoveCounter = UNSTREAM_STRING( &constant_bin[ 2020985 ], 13, 1 );
    const_str_plain__integer_repr = UNSTREAM_STRING( &constant_bin[ 217718 ], 13, 1 );
    const_str_plain_build_err_msg = UNSTREAM_STRING( &constant_bin[ 214380 ], 13, 1 );
    const_str_plain_warning_class = UNSTREAM_STRING( &constant_bin[ 218019 ], 13, 1 );
    const_str_plain_WarningManager = UNSTREAM_STRING( &constant_bin[ 2020998 ], 14, 1 );
    const_str_plain_WarningMessage = UNSTREAM_STRING( &constant_bin[ 217973 ], 14, 1 );
    const_str_plain__category_name = UNSTREAM_STRING( &constant_bin[ 2021012 ], 14, 1 );
    const_str_plain__proc_pid_stat = UNSTREAM_STRING( &constant_bin[ 213660 ], 14, 1 );
    const_str_plain_raise_on_error = UNSTREAM_STRING( &constant_bin[ 216725 ], 14, 1 );
    const_str_plain_IgnoreException = UNSTREAM_STRING( &constant_bin[ 2021026 ], 15, 1 );
    const_str_plain_MakeCounterPath = UNSTREAM_STRING( &constant_bin[ 2021041 ], 15, 1 );
    const_str_plain_assert_allclose = UNSTREAM_STRING( &constant_bin[ 2021056 ], 15, 1 );
    const_tuple_str_plain_nan_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_nan_tuple, 0, const_str_plain_nan ); Py_INCREF( const_str_plain_nan );
    const_str_plain_CollectQueryData = UNSTREAM_STRING( &constant_bin[ 2021071 ], 16, 1 );
    const_str_plain__WARNING_DETAILS = UNSTREAM_STRING( &constant_bin[ 2021087 ], 16, 1 );
    const_str_plain_compat_func_name = UNSTREAM_STRING( &constant_bin[ 2021103 ], 16, 1 );
    const_str_plain_decorate_methods = UNSTREAM_STRING( &constant_bin[ 2021119 ], 16, 1 );
    const_str_plain_assert_array_less = UNSTREAM_STRING( &constant_bin[ 2021135 ], 17, 1 );
    const_str_plain_chk_same_position = UNSTREAM_STRING( &constant_bin[ 215756 ], 17, 1 );
    const_tuple_str_plain_isnan_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_isnan_tuple, 0, const_str_plain_isnan ); Py_INCREF( const_str_plain_isnan );
    const_long_neg_9223372036854775808 = PyLong_FromLong( -9223372036854775807l ); const_long_neg_9223372036854775808 = PyNumber_InPlaceSubtract( const_long_neg_9223372036854775808, const_int_pos_1 );
    const_str_plain_assert_array_equal = UNSTREAM_STRING( &constant_bin[ 214333 ], 18, 1 );
    const_str_plain_assert_no_warnings = UNSTREAM_STRING( &constant_bin[ 2021152 ], 18, 1 );
    const_str_plain_print_assert_equal = UNSTREAM_STRING( &constant_bin[ 2021170 ], 18, 1 );
    const_str_plain__gen_alignment_data = UNSTREAM_STRING( &constant_bin[ 2021188 ], 19, 1 );
    const_str_plain_assert_almost_equal = UNSTREAM_STRING( &constant_bin[ 215071 ], 19, 1 );
    const_str_plain_assert_approx_equal = UNSTREAM_STRING( &constant_bin[ 2021207 ], 19, 1 );
    const_str_plain_assert_string_equal = UNSTREAM_STRING( &constant_bin[ 2021226 ], 19, 1 );
    const_str_plain_assert_array_compare = UNSTREAM_STRING( &constant_bin[ 216179 ], 20, 1 );
    const_str_plain_assert_array_max_ulp = UNSTREAM_STRING( &constant_bin[ 2021245 ], 20, 1 );
    const_str_plain__assert_valid_refcount = UNSTREAM_STRING( &constant_bin[ 2021265 ], 22, 1 );
    const_tuple_str_plain__load_time_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain__load_time_tuple, 0, const_str_plain__load_time ); Py_INCREF( const_str_plain__load_time );
    const_tuple_str_plain_isfunction_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_isfunction_tuple, 0, const_str_plain_isfunction ); Py_INCREF( const_str_plain_isfunction );
    const_tuple_str_plain_import_nose_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_import_nose_tuple, 0, const_str_plain_import_nose ); Py_INCREF( const_str_plain_import_nose );
    const_str_plain_GetFormattedCounterValue = UNSTREAM_STRING( &constant_bin[ 2021287 ], 24, 1 );
    const_str_plain_GetPerformanceAttributes = UNSTREAM_STRING( &constant_bin[ 214024 ], 24, 1 );
    const_tuple_str_plain_python_int_0_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_python_int_0_tuple, 0, const_str_plain_python ); Py_INCREF( const_str_plain_python );
    PyTuple_SET_ITEM( const_tuple_str_plain_python_int_0_tuple, 1, const_int_0 ); Py_INCREF( const_int_0 );
    const_str_plain_assert_array_almost_equal = UNSTREAM_STRING( &constant_bin[ 215172 ], 25, 1 );
    const_tuple_str_plain_s_str_plain_o_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_s_str_plain_o_tuple, 0, const_str_plain_s ); Py_INCREF( const_str_plain_s );
    PyTuple_SET_ITEM( const_tuple_str_plain_s_str_plain_o_tuple, 1, const_str_plain_o ); Py_INCREF( const_str_plain_o );
    const_tuple_int_pos_6_str_empty_true_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_int_pos_6_str_empty_true_tuple, 0, const_int_pos_6 ); Py_INCREF( const_int_pos_6 );
    PyTuple_SET_ITEM( const_tuple_int_pos_6_str_empty_true_tuple, 1, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_int_pos_6_str_empty_true_tuple, 2, Py_True ); Py_INCREF( Py_True );
    const_tuple_int_pos_7_str_empty_true_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_int_pos_7_str_empty_true_tuple, 0, const_int_pos_7 ); Py_INCREF( const_int_pos_7 );
    PyTuple_SET_ITEM( const_tuple_int_pos_7_str_empty_true_tuple, 1, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_int_pos_7_str_empty_true_tuple, 2, Py_True ); Py_INCREF( Py_True );
    const_tuple_none_int_neg_1_none_none_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_none_int_neg_1_none_none_tuple, 0, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_none_int_neg_1_none_none_tuple, 1, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_none_int_neg_1_none_none_tuple, 2, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_none_int_neg_1_none_none_tuple, 3, Py_None ); Py_INCREF( Py_None );
    const_tuple_str_empty_true_str_empty_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_empty_true_str_empty_tuple, 0, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_str_empty_true_str_empty_tuple, 1, Py_True ); Py_INCREF( Py_True );
    PyTuple_SET_ITEM( const_tuple_str_empty_true_str_empty_tuple, 2, const_str_empty ); Py_INCREF( const_str_empty );
    const_tuple_str_plain__proc_pid_stat_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain__proc_pid_stat_tuple, 0, const_str_plain__proc_pid_stat ); Py_INCREF( const_str_plain__proc_pid_stat );
    const_tuple_str_plain_x_str_plain_np_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_np_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_np_tuple, 1, const_str_plain_np ); Py_INCREF( const_str_plain_np );
    const_dict_117eec822878c8a1e3d3fe65ec8106fd = _PyDict_NewPresized( 1 );
    const_str_digest_9c41dab8e025b5db402b00cface5d381 = UNSTREAM_STRING( &constant_bin[ 1332329 ], 4, 0 );
    PyDict_SetItem( const_dict_117eec822878c8a1e3d3fe65ec8106fd, const_str_plain_hasval, const_str_digest_9c41dab8e025b5db402b00cface5d381 );
    const_dict_568ac7eccabc8d891d945f2840f427e7 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_568ac7eccabc8d891d945f2840f427e7, const_str_plain_hasval, const_str_plain_nan );
    const_dict_c05cf8ed9016cad683e758f62a6613d4 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_c05cf8ed9016cad683e758f62a6613d4, const_str_plain_verbose, Py_False );
    const_dict_ff8ef3bf3e81fbdb8830624987bd4652 = _PyDict_NewPresized( 1 );
    const_str_digest_199a35a9e1f956a713e64690a658d3eb = UNSTREAM_STRING( &constant_bin[ 2021311 ], 4, 0 );
    PyDict_SetItem( const_dict_ff8ef3bf3e81fbdb8830624987bd4652, const_str_plain_hasval, const_str_digest_199a35a9e1f956a713e64690a658d3eb );
    const_tuple_str_plain_s_str_plain_msg_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_s_str_plain_msg_tuple, 0, const_str_plain_s ); Py_INCREF( const_str_plain_s );
    PyTuple_SET_ITEM( const_tuple_str_plain_s_str_plain_msg_tuple, 1, const_str_plain_msg ); Py_INCREF( const_str_plain_msg );
    const_tuple_str_plain_val_str_plain_msg_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_val_str_plain_msg_tuple, 0, const_str_plain_val ); Py_INCREF( const_str_plain_val );
    PyTuple_SET_ITEM( const_tuple_str_plain_val_str_plain_msg_tuple, 1, const_str_plain_msg ); Py_INCREF( const_str_plain_msg );
    const_str_plain_assert_array_almost_equal_nulp = UNSTREAM_STRING( &constant_bin[ 2021315 ], 30, 1 );
    const_tuple_str_plain_astr_str_plain_dict_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_astr_str_plain_dict_tuple, 0, const_str_plain_astr ); Py_INCREF( const_str_plain_astr );
    PyTuple_SET_ITEM( const_tuple_str_plain_astr_str_plain_dict_tuple, 1, const_str_plain_dict ); Py_INCREF( const_str_plain_dict );
    const_list_7ff88c5eb534ce1ca34d0b88f2804a46_list = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 2021345 ], 496 );
    const_str_digest_07059cc5a6281cbd180f0d258a57c2b0 = UNSTREAM_STRING( &constant_bin[ 2021841 ], 33, 0 );
    const_str_digest_077c92f8b9a0ec14761fbe9274e7858b = UNSTREAM_STRING( &constant_bin[ 2021874 ], 9, 0 );
    const_str_digest_08d5dba3d22036b2b726cea75f46ce7c = UNSTREAM_STRING( &constant_bin[ 2021883 ], 931, 0 );
    const_str_digest_0b02c8e9b4951ce86569b89788daf148 = UNSTREAM_STRING( &constant_bin[ 2022814 ], 693, 0 );
    const_str_digest_0b6b36f18d2504ba79e948cc1c5fa89d = UNSTREAM_STRING( &constant_bin[ 2023507 ], 13, 0 );
    const_str_digest_0e237883597543ba31fbcaf2b4ac913b = UNSTREAM_STRING( &constant_bin[ 2023520 ], 25, 0 );
    const_str_digest_2288b7fcb22c5fc99af680fe674e2045 = UNSTREAM_STRING( &constant_bin[ 339390 ], 8, 0 );
    const_str_digest_25406a365cb70649617f2320e857472f = UNSTREAM_STRING( &constant_bin[ 2023545 ], 391, 0 );
    const_str_digest_2697ab5d65ed4cb1a4e3e6192186ee0d = UNSTREAM_STRING( &constant_bin[ 2023936 ], 33, 0 );
    const_str_digest_2a869c320e87479fde855b1b6260aed3 = UNSTREAM_STRING( &constant_bin[ 2023969 ], 30, 0 );
    const_str_digest_3390830ec637bd8506b2693c0e9cef6b = UNSTREAM_STRING( &constant_bin[ 2023999 ], 84, 0 );
    const_str_digest_3967666f82032e8c08707da056df8542 = UNSTREAM_STRING( &constant_bin[ 2024083 ], 1092, 0 );
    const_str_digest_3bb083c0193c503b32d4df24830b6337 = UNSTREAM_STRING( &constant_bin[ 2025175 ], 581, 0 );
    const_str_digest_3d5c6b6833444c6030fa6f5dd7fd9d0b = UNSTREAM_STRING( &constant_bin[ 2025756 ], 385, 0 );
    const_str_digest_409d947cbf46d6b05f44303655f0e58b = UNSTREAM_STRING( &constant_bin[ 2026141 ], 385, 0 );
    const_str_digest_41e55c57c7d6194d65db50576a717684 = UNSTREAM_STRING( &constant_bin[ 2026526 ], 21, 0 );
    const_str_digest_42d9e20690bfe0906fc96d03cff6b46c = UNSTREAM_STRING( &constant_bin[ 2026547 ], 40, 0 );
    const_str_digest_43beb5f139ed80a3cbd558fede4ca34a = UNSTREAM_STRING( &constant_bin[ 2026587 ], 49, 0 );
    const_str_digest_4b97cca84d8dd71cdb3b4fd4c8f1d17e = UNSTREAM_STRING( &constant_bin[ 2026636 ], 120, 0 );
    const_str_digest_4c7696ea5ac638d1c7928f1060731d88 = UNSTREAM_STRING( &constant_bin[ 2026756 ], 20, 0 );
    const_str_digest_4d1a6cdb540f53c457d4f66d06800fb9 = UNSTREAM_STRING( &constant_bin[ 2026776 ], 39, 0 );
    const_str_digest_545db4280f4804ea7fce15cd4682edc4 = UNSTREAM_STRING( &constant_bin[ 2026815 ], 24, 0 );
    const_str_digest_54a89d3000093388391e8875650c39b5 = UNSTREAM_STRING( &constant_bin[ 2026839 ], 10, 0 );
    const_str_digest_555f3d9bdca506ab50d243f7793be335 = UNSTREAM_STRING( &constant_bin[ 2026849 ], 1852, 0 );
    const_str_digest_55bf588743b8243d910cfce315631034 = UNSTREAM_STRING( &constant_bin[ 2028701 ], 42, 0 );
    const_str_digest_56a309cdbf4c18e741b09e2a74997f79 = UNSTREAM_STRING( &constant_bin[ 635897 ], 2, 0 );
    const_str_digest_5b9ecf91c90bef2f7fd269f1d3389789 = UNSTREAM_STRING( &constant_bin[ 2028743 ], 39, 0 );
    const_str_digest_61fe48964d9b6a43acacd5c641dc9222 = UNSTREAM_STRING( &constant_bin[ 2028782 ], 1053, 0 );
    const_str_digest_6215faf19a1de8aa9e1cf1b6dc235503 = UNSTREAM_STRING( &constant_bin[ 2029835 ], 20, 0 );
    const_str_digest_63c4d244f9b605cb25bc97175ab02bac = UNSTREAM_STRING( &constant_bin[ 2029855 ], 232, 0 );
    const_str_digest_6525023e51fe72f9ff6982f820c668de = UNSTREAM_STRING( &constant_bin[ 985405 ], 7, 0 );
    const_str_digest_65445bab21488f0a0a7d901ec269124b = UNSTREAM_STRING( &constant_bin[ 335617 ], 2, 0 );
    const_str_digest_6615c0a39a952966fb0597d294f044fa = UNSTREAM_STRING( &constant_bin[ 2030087 ], 68, 0 );
    const_str_digest_68ac50b36ab744d6652388991ad76ae2 = UNSTREAM_STRING( &constant_bin[ 2030155 ], 259, 0 );
    const_str_digest_6a84b36aa6d3c48fbbafd2ea8b609c34 = UNSTREAM_STRING( &constant_bin[ 2030414 ], 927, 0 );
    const_str_digest_70134d6b4b5effedf386e473944f5e95 = UNSTREAM_STRING( &constant_bin[ 2031341 ], 31, 0 );
    const_str_digest_7503219a820c3e9ee0c0edb6797a5738 = UNSTREAM_STRING( &constant_bin[ 2031372 ], 32, 0 );
    const_str_digest_762d604a9c6488fb528b0ba62876f69f = UNSTREAM_STRING( &constant_bin[ 2031404 ], 44, 0 );
    const_str_digest_77af59999e5dac5a00c73a6a39c4eb1c = UNSTREAM_STRING( &constant_bin[ 2031448 ], 141, 0 );
    const_str_digest_7b8ab97309813f2adb309ef116862e76 = UNSTREAM_STRING( &constant_bin[ 2031589 ], 395, 0 );
    const_str_digest_7d19d66ae6d8e95a0b8f189b886d27de = UNSTREAM_STRING( &constant_bin[ 2031984 ], 57, 0 );
    const_str_digest_7d7c3cb8a9268dee05555a28c7406eeb = UNSTREAM_STRING( &constant_bin[ 2032041 ], 14, 0 );
    const_str_digest_7e2409b427a8ab16671b716477014265 = UNSTREAM_STRING( &constant_bin[ 2032055 ], 13, 0 );
    const_str_digest_81311c6c7b12df70d1d2f74b37384cc2 = UNSTREAM_STRING( &constant_bin[ 2032068 ], 40, 0 );
    const_str_digest_86dd7c9709aea44f916e58c561b41c4d = UNSTREAM_STRING( &constant_bin[ 2032108 ], 356, 0 );
    const_str_digest_882f2ed7f1573d008d695fb792817c72 = UNSTREAM_STRING( &constant_bin[ 2032464 ], 12, 0 );
    const_str_digest_8b612521d6eef9ee6726b65f8c94efbe = UNSTREAM_STRING( &constant_bin[ 2032476 ], 81, 0 );
    const_str_digest_8c6ec1f522f2db10b81bdcf429e53d82 = UNSTREAM_STRING( &constant_bin[ 2032557 ], 10, 0 );
    const_str_digest_8d39c6f825d19797590e9e3179e3fa6c = UNSTREAM_STRING( &constant_bin[ 2032567 ], 47, 0 );
    const_str_digest_9327ab6a3aa9cc4edf750939002d9792 = UNSTREAM_STRING( &constant_bin[ 857057 ], 20, 0 );
    const_str_digest_9638e2f878cb7246bc12eec89e19ff05 = UNSTREAM_STRING( &constant_bin[ 2032614 ], 13, 0 );
    const_str_digest_969a3200cb32934e2cf29c4b9f3a5ea7 = UNSTREAM_STRING( &constant_bin[ 2032627 ], 16, 0 );
    const_str_digest_96e07cefe56c6dcc97ad00bd79027eeb = UNSTREAM_STRING( &constant_bin[ 2032643 ], 670, 0 );
    const_str_digest_989ea08f922c34ff2003b946f35a2a71 = UNSTREAM_STRING( &constant_bin[ 2033313 ], 26, 0 );
    const_str_digest_9a015f18a46d205149e8a83cc434c73c = UNSTREAM_STRING( &constant_bin[ 2033339 ], 17, 0 );
    const_str_digest_9d5fe33f86d1dde006a83ff6e2484903 = UNSTREAM_STRING( &constant_bin[ 2033356 ], 2086, 0 );
    const_str_digest_a7eecd7dd1f310504bfa1aad4f8c2ff9 = UNSTREAM_STRING( &constant_bin[ 2035442 ], 25, 0 );
    const_str_digest_aeef159a70e347ede62d2cf8a664d83a = UNSTREAM_STRING( &constant_bin[ 2035467 ], 2433, 0 );
    const_str_digest_af944d9dcdae647078b80309bda477ae = UNSTREAM_STRING( &constant_bin[ 2028167 ], 27, 0 );
    const_str_digest_b97c16860a8f4af366a6279f213681b6 = UNSTREAM_STRING( &constant_bin[ 2037900 ], 859, 0 );
    const_str_digest_b9ba15314bce7173837e948e2f705918 = UNSTREAM_STRING( &constant_bin[ 2038759 ], 103, 0 );
    const_str_digest_b9e9511ece9e362386a977d4b1e26287 = UNSTREAM_STRING( &constant_bin[ 2038862 ], 1867, 0 );
    const_str_digest_c3436da65ce3789859f5d3e930c77680 = UNSTREAM_STRING( &constant_bin[ 2040729 ], 37, 0 );
    const_str_digest_caf8c8bda71ad7c8d5e030384aab91f0 = UNSTREAM_STRING( &constant_bin[ 2040766 ], 9, 0 );
    const_str_digest_cc58713dce7955eb1c70d80bba7aeaed = UNSTREAM_STRING( &constant_bin[ 2040775 ], 1304, 0 );
    const_str_digest_d770068533d4529e9c3183691e904fd8 = UNSTREAM_STRING( &constant_bin[ 2042079 ], 31, 0 );
    const_str_digest_da1b9f987f03027db4efbd56122fbfd2 = UNSTREAM_STRING( &constant_bin[ 2042110 ], 2032, 0 );
    const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad = UNSTREAM_STRING( &constant_bin[ 2044142 ], 55, 0 );
    const_str_digest_dc69964195218c92c1920611a4b0f89a = UNSTREAM_STRING( &constant_bin[ 2044197 ], 723, 0 );
    const_str_digest_e2c6ffe2bc771998ad44ce45a4fc70c9 = UNSTREAM_STRING( &constant_bin[ 2044920 ], 780, 0 );
    const_str_digest_e3ecc3b986655ba484341b93f8a67c54 = UNSTREAM_STRING( &constant_bin[ 2045700 ], 42, 0 );
    const_str_digest_e65042100e7060625f0d06a26fd41cf8 = UNSTREAM_STRING( &constant_bin[ 2045742 ], 36, 0 );
    const_str_digest_e6d92617a84f2256b630a8b04423d0bc = UNSTREAM_STRING( &constant_bin[ 2045778 ], 43, 0 );
    const_str_digest_e7f7f86a2730bf491604726e58219774 = UNSTREAM_STRING( &constant_bin[ 2045821 ], 596, 0 );
    const_str_digest_ea77fb944baf01e2248a00918c7df409 = UNSTREAM_STRING( &constant_bin[ 2046417 ], 43, 0 );
    const_str_digest_ea82fc8d8f320d771fe2d4072039e7bf = UNSTREAM_STRING( &constant_bin[ 354234 ], 2, 0 );
    const_str_digest_f0e0fa64d19a4c1bad20bab142899ac3 = UNSTREAM_STRING( &constant_bin[ 2046460 ], 9, 0 );
    const_str_digest_f1e178ff29bd1a44d5155691bff673e8 = UNSTREAM_STRING( &constant_bin[ 2038691 ], 20, 0 );
    const_str_digest_f4c3a0245533a786349a32e5cc4dda24 = UNSTREAM_STRING( &constant_bin[ 2046469 ], 737, 0 );
    const_str_digest_fa1712245d7a8c0d5abfd2fd59c5f16d = UNSTREAM_STRING( &constant_bin[ 2047206 ], 68, 0 );
    const_str_digest_faa386a8ad794cd50be499b4e9ca7a93 = UNSTREAM_STRING( &constant_bin[ 2047274 ], 45, 0 );
    const_str_digest_fcc53f6e6cd9f93c6c4d11262486eded = UNSTREAM_STRING( &constant_bin[ 2047319 ], 132, 0 );
    const_tuple_007a4a361645d2cd1ae628dc362a1d50_tuple = PyTuple_New( 11 );
    PyTuple_SET_ITEM( const_tuple_007a4a361645d2cd1ae628dc362a1d50_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_007a4a361645d2cd1ae628dc362a1d50_tuple, 1, const_str_plain_y ); Py_INCREF( const_str_plain_y );
    PyTuple_SET_ITEM( const_tuple_007a4a361645d2cd1ae628dc362a1d50_tuple, 2, const_str_plain_decimal ); Py_INCREF( const_str_plain_decimal );
    PyTuple_SET_ITEM( const_tuple_007a4a361645d2cd1ae628dc362a1d50_tuple, 3, const_str_plain_err_msg ); Py_INCREF( const_str_plain_err_msg );
    PyTuple_SET_ITEM( const_tuple_007a4a361645d2cd1ae628dc362a1d50_tuple, 4, const_str_plain_verbose ); Py_INCREF( const_str_plain_verbose );
    PyTuple_SET_ITEM( const_tuple_007a4a361645d2cd1ae628dc362a1d50_tuple, 5, const_str_plain_around ); Py_INCREF( const_str_plain_around );
    PyTuple_SET_ITEM( const_tuple_007a4a361645d2cd1ae628dc362a1d50_tuple, 6, const_str_plain_number ); Py_INCREF( const_str_plain_number );
    PyTuple_SET_ITEM( const_tuple_007a4a361645d2cd1ae628dc362a1d50_tuple, 7, const_str_plain_float_ ); Py_INCREF( const_str_plain_float_ );
    PyTuple_SET_ITEM( const_tuple_007a4a361645d2cd1ae628dc362a1d50_tuple, 8, const_str_plain_issubdtype ); Py_INCREF( const_str_plain_issubdtype );
    PyTuple_SET_ITEM( const_tuple_007a4a361645d2cd1ae628dc362a1d50_tuple, 9, const_str_plain_npany ); Py_INCREF( const_str_plain_npany );
    PyTuple_SET_ITEM( const_tuple_007a4a361645d2cd1ae628dc362a1d50_tuple, 10, const_str_plain_compare ); Py_INCREF( const_str_plain_compare );
    const_tuple_04c55a1b731b23263b9c9e015755e187_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_04c55a1b731b23263b9c9e015755e187_tuple, 0, const_str_plain_actual ); Py_INCREF( const_str_plain_actual );
    PyTuple_SET_ITEM( const_tuple_04c55a1b731b23263b9c9e015755e187_tuple, 1, const_str_plain_desired ); Py_INCREF( const_str_plain_desired );
    PyTuple_SET_ITEM( const_tuple_04c55a1b731b23263b9c9e015755e187_tuple, 2, const_str_plain_err_msg ); Py_INCREF( const_str_plain_err_msg );
    PyTuple_SET_ITEM( const_tuple_04c55a1b731b23263b9c9e015755e187_tuple, 3, const_str_plain_verbose ); Py_INCREF( const_str_plain_verbose );
    const_tuple_0dfa334fafa0cdd681c6614ff859d9a1_tuple = PyTuple_New( 12 );
    PyTuple_SET_ITEM( const_tuple_0dfa334fafa0cdd681c6614ff859d9a1_tuple, 0, const_str_plain_object ); Py_INCREF( const_str_plain_object );
    PyTuple_SET_ITEM( const_tuple_0dfa334fafa0cdd681c6614ff859d9a1_tuple, 1, const_str_plain_counter ); Py_INCREF( const_str_plain_counter );
    PyTuple_SET_ITEM( const_tuple_0dfa334fafa0cdd681c6614ff859d9a1_tuple, 2, const_str_plain_instance ); Py_INCREF( const_str_plain_instance );
    PyTuple_SET_ITEM( const_tuple_0dfa334fafa0cdd681c6614ff859d9a1_tuple, 3, const_str_plain_inum ); Py_INCREF( const_str_plain_inum );
    PyTuple_SET_ITEM( const_tuple_0dfa334fafa0cdd681c6614ff859d9a1_tuple, 4, const_str_plain_format ); Py_INCREF( const_str_plain_format );
    PyTuple_SET_ITEM( const_tuple_0dfa334fafa0cdd681c6614ff859d9a1_tuple, 5, const_str_plain_machine ); Py_INCREF( const_str_plain_machine );
    PyTuple_SET_ITEM( const_tuple_0dfa334fafa0cdd681c6614ff859d9a1_tuple, 6, const_str_plain_win32pdh ); Py_INCREF( const_str_plain_win32pdh );
    PyTuple_SET_ITEM( const_tuple_0dfa334fafa0cdd681c6614ff859d9a1_tuple, 7, const_str_plain_path ); Py_INCREF( const_str_plain_path );
    PyTuple_SET_ITEM( const_tuple_0dfa334fafa0cdd681c6614ff859d9a1_tuple, 8, const_str_plain_hq ); Py_INCREF( const_str_plain_hq );
    PyTuple_SET_ITEM( const_tuple_0dfa334fafa0cdd681c6614ff859d9a1_tuple, 9, const_str_plain_hc ); Py_INCREF( const_str_plain_hc );
    PyTuple_SET_ITEM( const_tuple_0dfa334fafa0cdd681c6614ff859d9a1_tuple, 10, const_str_plain_type ); Py_INCREF( const_str_plain_type );
    PyTuple_SET_ITEM( const_tuple_0dfa334fafa0cdd681c6614ff859d9a1_tuple, 11, const_str_plain_val ); Py_INCREF( const_str_plain_val );
    const_tuple_194a86e43e0cb7c7c00eac0bfd665f10_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_194a86e43e0cb7c7c00eac0bfd665f10_tuple, 0, const_str_plain_array ); Py_INCREF( const_str_plain_array );
    PyTuple_SET_ITEM( const_tuple_194a86e43e0cb7c7c00eac0bfd665f10_tuple, 1, const_str_plain_isnan ); Py_INCREF( const_str_plain_isnan );
    PyTuple_SET_ITEM( const_tuple_194a86e43e0cb7c7c00eac0bfd665f10_tuple, 2, const_str_plain_isinf ); Py_INCREF( const_str_plain_isinf );
    PyTuple_SET_ITEM( const_tuple_194a86e43e0cb7c7c00eac0bfd665f10_tuple, 3, const_str_plain_any ); Py_INCREF( const_str_plain_any );
    PyTuple_SET_ITEM( const_tuple_194a86e43e0cb7c7c00eac0bfd665f10_tuple, 4, const_str_plain_all ); Py_INCREF( const_str_plain_all );
    PyTuple_SET_ITEM( const_tuple_194a86e43e0cb7c7c00eac0bfd665f10_tuple, 5, const_str_plain_inf ); Py_INCREF( const_str_plain_inf );
    const_tuple_22025bc25a02798f8cb5fcbffa9efb3b_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_22025bc25a02798f8cb5fcbffa9efb3b_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_22025bc25a02798f8cb5fcbffa9efb3b_tuple, 1, const_str_plain_message ); Py_INCREF( const_str_plain_message );
    PyTuple_SET_ITEM( const_tuple_22025bc25a02798f8cb5fcbffa9efb3b_tuple, 2, const_str_plain_category ); Py_INCREF( const_str_plain_category );
    PyTuple_SET_ITEM( const_tuple_22025bc25a02798f8cb5fcbffa9efb3b_tuple, 3, const_str_plain_filename ); Py_INCREF( const_str_plain_filename );
    PyTuple_SET_ITEM( const_tuple_22025bc25a02798f8cb5fcbffa9efb3b_tuple, 4, const_str_plain_lineno ); Py_INCREF( const_str_plain_lineno );
    PyTuple_SET_ITEM( const_tuple_22025bc25a02798f8cb5fcbffa9efb3b_tuple, 5, const_str_plain_file ); Py_INCREF( const_str_plain_file );
    PyTuple_SET_ITEM( const_tuple_22025bc25a02798f8cb5fcbffa9efb3b_tuple, 6, const_str_plain_line ); Py_INCREF( const_str_plain_line );
    PyTuple_SET_ITEM( const_tuple_22025bc25a02798f8cb5fcbffa9efb3b_tuple, 7, const_str_plain_local_values ); Py_INCREF( const_str_plain_local_values );
    PyTuple_SET_ITEM( const_tuple_22025bc25a02798f8cb5fcbffa9efb3b_tuple, 8, const_str_plain_attr ); Py_INCREF( const_str_plain_attr );
    const_tuple_23579b8f33cf06464b97783a718253a4_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_23579b8f33cf06464b97783a718253a4_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_23579b8f33cf06464b97783a718253a4_tuple, 1, const_str_plain_y ); Py_INCREF( const_str_plain_y );
    PyTuple_SET_ITEM( const_tuple_23579b8f33cf06464b97783a718253a4_tuple, 2, const_str_plain_nulp ); Py_INCREF( const_str_plain_nulp );
    PyTuple_SET_ITEM( const_tuple_23579b8f33cf06464b97783a718253a4_tuple, 3, const_str_plain_np ); Py_INCREF( const_str_plain_np );
    PyTuple_SET_ITEM( const_tuple_23579b8f33cf06464b97783a718253a4_tuple, 4, const_str_plain_ax ); Py_INCREF( const_str_plain_ax );
    PyTuple_SET_ITEM( const_tuple_23579b8f33cf06464b97783a718253a4_tuple, 5, const_str_plain_ay ); Py_INCREF( const_str_plain_ay );
    PyTuple_SET_ITEM( const_tuple_23579b8f33cf06464b97783a718253a4_tuple, 6, const_str_plain_ref ); Py_INCREF( const_str_plain_ref );
    PyTuple_SET_ITEM( const_tuple_23579b8f33cf06464b97783a718253a4_tuple, 7, const_str_plain_msg ); Py_INCREF( const_str_plain_msg );
    PyTuple_SET_ITEM( const_tuple_23579b8f33cf06464b97783a718253a4_tuple, 8, const_str_plain_max_nulp ); Py_INCREF( const_str_plain_max_nulp );
    const_tuple_3866cf064071516dd9f2d31820e48b6c_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_3866cf064071516dd9f2d31820e48b6c_tuple, 0, const_str_plain_message ); Py_INCREF( const_str_plain_message );
    PyTuple_SET_ITEM( const_tuple_3866cf064071516dd9f2d31820e48b6c_tuple, 1, const_str_plain_category ); Py_INCREF( const_str_plain_category );
    PyTuple_SET_ITEM( const_tuple_3866cf064071516dd9f2d31820e48b6c_tuple, 2, const_str_plain_filename ); Py_INCREF( const_str_plain_filename );
    PyTuple_SET_ITEM( const_tuple_3866cf064071516dd9f2d31820e48b6c_tuple, 3, const_str_plain_lineno ); Py_INCREF( const_str_plain_lineno );
    PyTuple_SET_ITEM( const_tuple_3866cf064071516dd9f2d31820e48b6c_tuple, 4, const_str_plain_file ); Py_INCREF( const_str_plain_file );
    PyTuple_SET_ITEM( const_tuple_3866cf064071516dd9f2d31820e48b6c_tuple, 5, const_str_plain_line ); Py_INCREF( const_str_plain_line );
    const_tuple_428ef0c7dcad024f447304283fd888c5_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_428ef0c7dcad024f447304283fd888c5_tuple, 0, const_str_plain_warning_class ); Py_INCREF( const_str_plain_warning_class );
    PyTuple_SET_ITEM( const_tuple_428ef0c7dcad024f447304283fd888c5_tuple, 1, const_str_plain_func ); Py_INCREF( const_str_plain_func );
    PyTuple_SET_ITEM( const_tuple_428ef0c7dcad024f447304283fd888c5_tuple, 2, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_428ef0c7dcad024f447304283fd888c5_tuple, 3, const_str_plain_kw ); Py_INCREF( const_str_plain_kw );
    PyTuple_SET_ITEM( const_tuple_428ef0c7dcad024f447304283fd888c5_tuple, 4, const_str_plain_l ); Py_INCREF( const_str_plain_l );
    PyTuple_SET_ITEM( const_tuple_428ef0c7dcad024f447304283fd888c5_tuple, 5, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    const_tuple_42c5f17d04fd97d74a40e0514ae96463_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_42c5f17d04fd97d74a40e0514ae96463_tuple, 0, const_str_plain_comparison ); Py_INCREF( const_str_plain_comparison );
    PyTuple_SET_ITEM( const_tuple_42c5f17d04fd97d74a40e0514ae96463_tuple, 1, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_42c5f17d04fd97d74a40e0514ae96463_tuple, 2, const_str_plain_y ); Py_INCREF( const_str_plain_y );
    PyTuple_SET_ITEM( const_tuple_42c5f17d04fd97d74a40e0514ae96463_tuple, 3, const_str_plain_err_msg ); Py_INCREF( const_str_plain_err_msg );
    PyTuple_SET_ITEM( const_tuple_42c5f17d04fd97d74a40e0514ae96463_tuple, 4, const_str_plain_verbose ); Py_INCREF( const_str_plain_verbose );
    PyTuple_SET_ITEM( const_tuple_42c5f17d04fd97d74a40e0514ae96463_tuple, 5, const_str_plain_header ); Py_INCREF( const_str_plain_header );
    const_tuple_48cfa7fbb491e1ee96b94a08b3d51cb5_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 2047451 ], 298 );
    const_tuple_49c70cfa143642b7953372e431b26b96_tuple = PyTuple_New( 10 );
    PyTuple_SET_ITEM( const_tuple_49c70cfa143642b7953372e431b26b96_tuple, 0, const_str_plain_actual ); Py_INCREF( const_str_plain_actual );
    PyTuple_SET_ITEM( const_tuple_49c70cfa143642b7953372e431b26b96_tuple, 1, const_str_plain_desired ); Py_INCREF( const_str_plain_desired );
    PyTuple_SET_ITEM( const_tuple_49c70cfa143642b7953372e431b26b96_tuple, 2, const_str_plain_difflib ); Py_INCREF( const_str_plain_difflib );
    PyTuple_SET_ITEM( const_tuple_49c70cfa143642b7953372e431b26b96_tuple, 3, const_str_plain_diff ); Py_INCREF( const_str_plain_diff );
    PyTuple_SET_ITEM( const_tuple_49c70cfa143642b7953372e431b26b96_tuple, 4, const_str_plain_diff_list ); Py_INCREF( const_str_plain_diff_list );
    PyTuple_SET_ITEM( const_tuple_49c70cfa143642b7953372e431b26b96_tuple, 5, const_str_plain_d1 ); Py_INCREF( const_str_plain_d1 );
    PyTuple_SET_ITEM( const_tuple_49c70cfa143642b7953372e431b26b96_tuple, 6, const_str_plain_l ); Py_INCREF( const_str_plain_l );
    PyTuple_SET_ITEM( const_tuple_49c70cfa143642b7953372e431b26b96_tuple, 7, const_str_plain_d2 ); Py_INCREF( const_str_plain_d2 );
    PyTuple_SET_ITEM( const_tuple_49c70cfa143642b7953372e431b26b96_tuple, 8, const_str_plain_d3 ); Py_INCREF( const_str_plain_d3 );
    PyTuple_SET_ITEM( const_tuple_49c70cfa143642b7953372e431b26b96_tuple, 9, const_str_plain_msg ); Py_INCREF( const_str_plain_msg );
    const_tuple_501a23729e7545fd650e3d9d37994226_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_501a23729e7545fd650e3d9d37994226_tuple, 0, const_str_plain__proc_pid_stat ); Py_INCREF( const_str_plain__proc_pid_stat );
    PyTuple_SET_ITEM( const_tuple_501a23729e7545fd650e3d9d37994226_tuple, 1, const_str_plain__load_time ); Py_INCREF( const_str_plain__load_time );
    PyTuple_SET_ITEM( const_tuple_501a23729e7545fd650e3d9d37994226_tuple, 2, const_str_plain_time ); Py_INCREF( const_str_plain_time );
    PyTuple_SET_ITEM( const_tuple_501a23729e7545fd650e3d9d37994226_tuple, 3, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_501a23729e7545fd650e3d9d37994226_tuple, 4, const_str_plain_l ); Py_INCREF( const_str_plain_l );
    const_tuple_565527652c835353ad2b809796ba3ff4_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_565527652c835353ad2b809796ba3ff4_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_565527652c835353ad2b809796ba3ff4_tuple, 1, const_str_plain_y ); Py_INCREF( const_str_plain_y );
    PyTuple_SET_ITEM( const_tuple_565527652c835353ad2b809796ba3ff4_tuple, 2, const_str_plain_dtype ); Py_INCREF( const_str_plain_dtype );
    PyTuple_SET_ITEM( const_tuple_565527652c835353ad2b809796ba3ff4_tuple, 3, const_str_plain_np ); Py_INCREF( const_str_plain_np );
    PyTuple_SET_ITEM( const_tuple_565527652c835353ad2b809796ba3ff4_tuple, 4, const_str_plain_t ); Py_INCREF( const_str_plain_t );
    PyTuple_SET_ITEM( const_tuple_565527652c835353ad2b809796ba3ff4_tuple, 5, const_str_plain__diff ); Py_INCREF( const_str_plain__diff );
    PyTuple_SET_ITEM( const_tuple_565527652c835353ad2b809796ba3ff4_tuple, 6, const_str_plain_rx ); Py_INCREF( const_str_plain_rx );
    PyTuple_SET_ITEM( const_tuple_565527652c835353ad2b809796ba3ff4_tuple, 7, const_str_plain_ry ); Py_INCREF( const_str_plain_ry );
    const_tuple_5eda0b27f24d46759a2212549f83add5_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_5eda0b27f24d46759a2212549f83add5_tuple, 0, const_str_plain_func ); Py_INCREF( const_str_plain_func );
    PyTuple_SET_ITEM( const_tuple_5eda0b27f24d46759a2212549f83add5_tuple, 1, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_5eda0b27f24d46759a2212549f83add5_tuple, 2, const_str_plain_kw ); Py_INCREF( const_str_plain_kw );
    PyTuple_SET_ITEM( const_tuple_5eda0b27f24d46759a2212549f83add5_tuple, 3, const_str_plain_l ); Py_INCREF( const_str_plain_l );
    PyTuple_SET_ITEM( const_tuple_5eda0b27f24d46759a2212549f83add5_tuple, 4, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    const_tuple_684cfe7337791d6bf1e3a2597e55be85_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_684cfe7337791d6bf1e3a2597e55be85_tuple, 0, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_684cfe7337791d6bf1e3a2597e55be85_tuple, 1, const_str_plain_random ); Py_INCREF( const_str_plain_random );
    PyTuple_SET_ITEM( const_tuple_684cfe7337791d6bf1e3a2597e55be85_tuple, 2, const_str_plain_zeros ); Py_INCREF( const_str_plain_zeros );
    PyTuple_SET_ITEM( const_tuple_684cfe7337791d6bf1e3a2597e55be85_tuple, 3, const_str_plain_float64 ); Py_INCREF( const_str_plain_float64 );
    PyTuple_SET_ITEM( const_tuple_684cfe7337791d6bf1e3a2597e55be85_tuple, 4, const_str_plain_results ); Py_INCREF( const_str_plain_results );
    PyTuple_SET_ITEM( const_tuple_684cfe7337791d6bf1e3a2597e55be85_tuple, 5, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_684cfe7337791d6bf1e3a2597e55be85_tuple, 6, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple = PyTuple_New( 15 );
    PyTuple_SET_ITEM( const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple, 0, const_str_plain_actual ); Py_INCREF( const_str_plain_actual );
    PyTuple_SET_ITEM( const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple, 1, const_str_plain_desired ); Py_INCREF( const_str_plain_desired );
    PyTuple_SET_ITEM( const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple, 2, const_str_plain_decimal ); Py_INCREF( const_str_plain_decimal );
    PyTuple_SET_ITEM( const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple, 3, const_str_plain_err_msg ); Py_INCREF( const_str_plain_err_msg );
    PyTuple_SET_ITEM( const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple, 4, const_str_plain_verbose ); Py_INCREF( const_str_plain_verbose );
    PyTuple_SET_ITEM( const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple, 5, const_str_plain_ndarray ); Py_INCREF( const_str_plain_ndarray );
    PyTuple_SET_ITEM( const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple, 6, const_str_plain_iscomplexobj ); Py_INCREF( const_str_plain_iscomplexobj );
    PyTuple_SET_ITEM( const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple, 7, const_str_plain_real ); Py_INCREF( const_str_plain_real );
    PyTuple_SET_ITEM( const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple, 8, const_str_plain_imag ); Py_INCREF( const_str_plain_imag );
    PyTuple_SET_ITEM( const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple, 9, const_str_plain_usecomplex ); Py_INCREF( const_str_plain_usecomplex );
    PyTuple_SET_ITEM( const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple, 10, const_str_plain_msg ); Py_INCREF( const_str_plain_msg );
    PyTuple_SET_ITEM( const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple, 11, const_str_plain_actualr ); Py_INCREF( const_str_plain_actualr );
    PyTuple_SET_ITEM( const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple, 12, const_str_plain_actuali ); Py_INCREF( const_str_plain_actuali );
    PyTuple_SET_ITEM( const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple, 13, const_str_plain_desiredr ); Py_INCREF( const_str_plain_desiredr );
    PyTuple_SET_ITEM( const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple, 14, const_str_plain_desiredi ); Py_INCREF( const_str_plain_desiredi );
    const_tuple_83095d153c5049ea88477bf4c75fd7a8_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_83095d153c5049ea88477bf4c75fd7a8_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_83095d153c5049ea88477bf4c75fd7a8_tuple, 1, const_str_plain_message ); Py_INCREF( const_str_plain_message );
    PyTuple_SET_ITEM( const_tuple_83095d153c5049ea88477bf4c75fd7a8_tuple, 2, const_str_plain_category ); Py_INCREF( const_str_plain_category );
    PyTuple_SET_ITEM( const_tuple_83095d153c5049ea88477bf4c75fd7a8_tuple, 3, const_str_plain_filename ); Py_INCREF( const_str_plain_filename );
    PyTuple_SET_ITEM( const_tuple_83095d153c5049ea88477bf4c75fd7a8_tuple, 4, const_str_plain_lineno ); Py_INCREF( const_str_plain_lineno );
    PyTuple_SET_ITEM( const_tuple_83095d153c5049ea88477bf4c75fd7a8_tuple, 5, const_str_plain_file ); Py_INCREF( const_str_plain_file );
    PyTuple_SET_ITEM( const_tuple_83095d153c5049ea88477bf4c75fd7a8_tuple, 6, const_str_plain_line ); Py_INCREF( const_str_plain_line );
    const_tuple_8346555f6603c45d7a96f8bbcf33c858_tuple = PyTuple_New( 11 );
    PyTuple_SET_ITEM( const_tuple_8346555f6603c45d7a96f8bbcf33c858_tuple, 0, const_str_plain_dtype ); Py_INCREF( const_str_plain_dtype );
    PyTuple_SET_ITEM( const_tuple_8346555f6603c45d7a96f8bbcf33c858_tuple, 1, const_str_plain_type ); Py_INCREF( const_str_plain_type );
    PyTuple_SET_ITEM( const_tuple_8346555f6603c45d7a96f8bbcf33c858_tuple, 2, const_str_plain_max_size ); Py_INCREF( const_str_plain_max_size );
    PyTuple_SET_ITEM( const_tuple_8346555f6603c45d7a96f8bbcf33c858_tuple, 3, const_str_plain_ufmt ); Py_INCREF( const_str_plain_ufmt );
    PyTuple_SET_ITEM( const_tuple_8346555f6603c45d7a96f8bbcf33c858_tuple, 4, const_str_plain_bfmt ); Py_INCREF( const_str_plain_bfmt );
    PyTuple_SET_ITEM( const_tuple_8346555f6603c45d7a96f8bbcf33c858_tuple, 5, const_str_plain_o ); Py_INCREF( const_str_plain_o );
    PyTuple_SET_ITEM( const_tuple_8346555f6603c45d7a96f8bbcf33c858_tuple, 6, const_str_plain_s ); Py_INCREF( const_str_plain_s );
    PyTuple_SET_ITEM( const_tuple_8346555f6603c45d7a96f8bbcf33c858_tuple, 7, const_str_plain_inp ); Py_INCREF( const_str_plain_inp );
    PyTuple_SET_ITEM( const_tuple_8346555f6603c45d7a96f8bbcf33c858_tuple, 8, const_str_plain_out ); Py_INCREF( const_str_plain_out );
    PyTuple_SET_ITEM( const_tuple_8346555f6603c45d7a96f8bbcf33c858_tuple, 9, const_str_plain_inp1 ); Py_INCREF( const_str_plain_inp1 );
    PyTuple_SET_ITEM( const_tuple_8346555f6603c45d7a96f8bbcf33c858_tuple, 10, const_str_plain_inp2 ); Py_INCREF( const_str_plain_inp2 );
    const_tuple_887e7200f623e311cc241cd4365ff0fb_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_887e7200f623e311cc241cd4365ff0fb_tuple, 0, const_str_plain_arrays ); Py_INCREF( const_str_plain_arrays );
    PyTuple_SET_ITEM( const_tuple_887e7200f623e311cc241cd4365ff0fb_tuple, 1, const_str_plain_err_msg ); Py_INCREF( const_str_plain_err_msg );
    PyTuple_SET_ITEM( const_tuple_887e7200f623e311cc241cd4365ff0fb_tuple, 2, const_str_plain_header ); Py_INCREF( const_str_plain_header );
    PyTuple_SET_ITEM( const_tuple_887e7200f623e311cc241cd4365ff0fb_tuple, 3, const_str_plain_verbose ); Py_INCREF( const_str_plain_verbose );
    PyTuple_SET_ITEM( const_tuple_887e7200f623e311cc241cd4365ff0fb_tuple, 4, const_str_plain_names ); Py_INCREF( const_str_plain_names );
    PyTuple_SET_ITEM( const_tuple_887e7200f623e311cc241cd4365ff0fb_tuple, 5, const_str_plain_msg ); Py_INCREF( const_str_plain_msg );
    PyTuple_SET_ITEM( const_tuple_887e7200f623e311cc241cd4365ff0fb_tuple, 6, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_887e7200f623e311cc241cd4365ff0fb_tuple, 7, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_887e7200f623e311cc241cd4365ff0fb_tuple, 8, const_str_plain_r ); Py_INCREF( const_str_plain_r );
    const_tuple_90d9f56f86b3e4690ccdd1a1a531fe57_tuple = PyTuple_New( 10 );
    PyTuple_SET_ITEM( const_tuple_90d9f56f86b3e4690ccdd1a1a531fe57_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_90d9f56f86b3e4690ccdd1a1a531fe57_tuple, 1, const_str_plain_y ); Py_INCREF( const_str_plain_y );
    PyTuple_SET_ITEM( const_tuple_90d9f56f86b3e4690ccdd1a1a531fe57_tuple, 2, const_str_plain_xinfid ); Py_INCREF( const_str_plain_xinfid );
    PyTuple_SET_ITEM( const_tuple_90d9f56f86b3e4690ccdd1a1a531fe57_tuple, 3, const_str_plain_yinfid ); Py_INCREF( const_str_plain_yinfid );
    PyTuple_SET_ITEM( const_tuple_90d9f56f86b3e4690ccdd1a1a531fe57_tuple, 4, const_str_plain_z ); Py_INCREF( const_str_plain_z );
    PyTuple_SET_ITEM( const_tuple_90d9f56f86b3e4690ccdd1a1a531fe57_tuple, 5, const_str_plain_npany ); Py_INCREF( const_str_plain_npany );
    PyTuple_SET_ITEM( const_tuple_90d9f56f86b3e4690ccdd1a1a531fe57_tuple, 6, const_str_plain_issubdtype ); Py_INCREF( const_str_plain_issubdtype );
    PyTuple_SET_ITEM( const_tuple_90d9f56f86b3e4690ccdd1a1a531fe57_tuple, 7, const_str_plain_number ); Py_INCREF( const_str_plain_number );
    PyTuple_SET_ITEM( const_tuple_90d9f56f86b3e4690ccdd1a1a531fe57_tuple, 8, const_str_plain_float_ ); Py_INCREF( const_str_plain_float_ );
    PyTuple_SET_ITEM( const_tuple_90d9f56f86b3e4690ccdd1a1a531fe57_tuple, 9, const_str_plain_around ); Py_INCREF( const_str_plain_around );
    const_tuple_9156f683dd46f839464b6b2e773c882f_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_9156f683dd46f839464b6b2e773c882f_tuple, 0, const_str_plain_arrays ); Py_INCREF( const_str_plain_arrays );
    PyTuple_SET_ITEM( const_tuple_9156f683dd46f839464b6b2e773c882f_tuple, 1, const_str_plain_err_msg ); Py_INCREF( const_str_plain_err_msg );
    PyTuple_SET_ITEM( const_tuple_9156f683dd46f839464b6b2e773c882f_tuple, 2, const_str_plain_header ); Py_INCREF( const_str_plain_header );
    PyTuple_SET_ITEM( const_tuple_9156f683dd46f839464b6b2e773c882f_tuple, 3, const_str_plain_verbose ); Py_INCREF( const_str_plain_verbose );
    PyTuple_SET_ITEM( const_tuple_9156f683dd46f839464b6b2e773c882f_tuple, 4, const_str_plain_names ); Py_INCREF( const_str_plain_names );
    const_tuple_939737dafb6355bbbcdd58d53fa23ae8_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_939737dafb6355bbbcdd58d53fa23ae8_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_939737dafb6355bbbcdd58d53fa23ae8_tuple, 1, const_str_plain_isfinite ); Py_INCREF( const_str_plain_isfinite );
    PyTuple_SET_ITEM( const_tuple_939737dafb6355bbbcdd58d53fa23ae8_tuple, 2, const_str_plain_errstate ); Py_INCREF( const_str_plain_errstate );
    PyTuple_SET_ITEM( const_tuple_939737dafb6355bbbcdd58d53fa23ae8_tuple, 3, const_str_plain_st ); Py_INCREF( const_str_plain_st );
    const_tuple_944de8a92e09905a5d1b64e02c8558ea_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 2047749 ], 235 );
    const_tuple_a0be4d43003bcdd9738a5dd9e83ef4ca_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_a0be4d43003bcdd9738a5dd9e83ef4ca_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_a0be4d43003bcdd9738a5dd9e83ef4ca_tuple, 1, const_str_plain_y ); Py_INCREF( const_str_plain_y );
    PyTuple_SET_ITEM( const_tuple_a0be4d43003bcdd9738a5dd9e83ef4ca_tuple, 2, const_str_plain_decimal ); Py_INCREF( const_str_plain_decimal );
    PyTuple_SET_ITEM( const_tuple_a0be4d43003bcdd9738a5dd9e83ef4ca_tuple, 3, const_str_plain_err_msg ); Py_INCREF( const_str_plain_err_msg );
    PyTuple_SET_ITEM( const_tuple_a0be4d43003bcdd9738a5dd9e83ef4ca_tuple, 4, const_str_plain_verbose ); Py_INCREF( const_str_plain_verbose );
    const_tuple_a0f3948b9b9c78cd8eedbd6f01b94ef1_tuple = PyTuple_New( 10 );
    PyTuple_SET_ITEM( const_tuple_a0f3948b9b9c78cd8eedbd6f01b94ef1_tuple, 0, const_str_plain_actual ); Py_INCREF( const_str_plain_actual );
    PyTuple_SET_ITEM( const_tuple_a0f3948b9b9c78cd8eedbd6f01b94ef1_tuple, 1, const_str_plain_desired ); Py_INCREF( const_str_plain_desired );
    PyTuple_SET_ITEM( const_tuple_a0f3948b9b9c78cd8eedbd6f01b94ef1_tuple, 2, const_str_plain_significant ); Py_INCREF( const_str_plain_significant );
    PyTuple_SET_ITEM( const_tuple_a0f3948b9b9c78cd8eedbd6f01b94ef1_tuple, 3, const_str_plain_err_msg ); Py_INCREF( const_str_plain_err_msg );
    PyTuple_SET_ITEM( const_tuple_a0f3948b9b9c78cd8eedbd6f01b94ef1_tuple, 4, const_str_plain_verbose ); Py_INCREF( const_str_plain_verbose );
    PyTuple_SET_ITEM( const_tuple_a0f3948b9b9c78cd8eedbd6f01b94ef1_tuple, 5, const_str_plain_np ); Py_INCREF( const_str_plain_np );
    PyTuple_SET_ITEM( const_tuple_a0f3948b9b9c78cd8eedbd6f01b94ef1_tuple, 6, const_str_plain_scale ); Py_INCREF( const_str_plain_scale );
    PyTuple_SET_ITEM( const_tuple_a0f3948b9b9c78cd8eedbd6f01b94ef1_tuple, 7, const_str_plain_sc_desired ); Py_INCREF( const_str_plain_sc_desired );
    PyTuple_SET_ITEM( const_tuple_a0f3948b9b9c78cd8eedbd6f01b94ef1_tuple, 8, const_str_plain_sc_actual ); Py_INCREF( const_str_plain_sc_actual );
    PyTuple_SET_ITEM( const_tuple_a0f3948b9b9c78cd8eedbd6f01b94ef1_tuple, 9, const_str_plain_msg ); Py_INCREF( const_str_plain_msg );
    const_tuple_a75b09c38b1fc22bca87afab41451769_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_a75b09c38b1fc22bca87afab41451769_tuple, 0, const_str_plain_warning_class ); Py_INCREF( const_str_plain_warning_class );
    PyTuple_SET_ITEM( const_tuple_a75b09c38b1fc22bca87afab41451769_tuple, 1, const_str_plain_func ); Py_INCREF( const_str_plain_func );
    PyTuple_SET_ITEM( const_tuple_a75b09c38b1fc22bca87afab41451769_tuple, 2, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_a75b09c38b1fc22bca87afab41451769_tuple, 3, const_str_plain_kw ); Py_INCREF( const_str_plain_kw );
    const_tuple_b0000c959599fe90154103540589c71f_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_b0000c959599fe90154103540589c71f_tuple, 0, const_str_plain_op ); Py_INCREF( const_str_plain_op );
    PyTuple_SET_ITEM( const_tuple_b0000c959599fe90154103540589c71f_tuple, 1, const_str_plain_np ); Py_INCREF( const_str_plain_np );
    PyTuple_SET_ITEM( const_tuple_b0000c959599fe90154103540589c71f_tuple, 2, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_b0000c959599fe90154103540589c71f_tuple, 3, const_str_plain_b ); Py_INCREF( const_str_plain_b );
    PyTuple_SET_ITEM( const_tuple_b0000c959599fe90154103540589c71f_tuple, 4, const_str_plain_c ); Py_INCREF( const_str_plain_c );
    PyTuple_SET_ITEM( const_tuple_b0000c959599fe90154103540589c71f_tuple, 5, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_b0000c959599fe90154103540589c71f_tuple, 6, const_str_plain_rc ); Py_INCREF( const_str_plain_rc );
    PyTuple_SET_ITEM( const_tuple_b0000c959599fe90154103540589c71f_tuple, 7, const_str_plain_j ); Py_INCREF( const_str_plain_j );
    PyTuple_SET_ITEM( const_tuple_b0000c959599fe90154103540589c71f_tuple, 8, const_str_plain_d ); Py_INCREF( const_str_plain_d );
    const_tuple_b115fec10b23d08e490385d180dcaef7_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_b115fec10b23d08e490385d180dcaef7_tuple, 0, const_str_plain_actual ); Py_INCREF( const_str_plain_actual );
    PyTuple_SET_ITEM( const_tuple_b115fec10b23d08e490385d180dcaef7_tuple, 1, const_str_plain_desired ); Py_INCREF( const_str_plain_desired );
    PyTuple_SET_ITEM( const_tuple_b115fec10b23d08e490385d180dcaef7_tuple, 2, const_str_plain_rtol ); Py_INCREF( const_str_plain_rtol );
    PyTuple_SET_ITEM( const_tuple_b115fec10b23d08e490385d180dcaef7_tuple, 3, const_str_plain_atol ); Py_INCREF( const_str_plain_atol );
    PyTuple_SET_ITEM( const_tuple_b115fec10b23d08e490385d180dcaef7_tuple, 4, const_str_plain_err_msg ); Py_INCREF( const_str_plain_err_msg );
    PyTuple_SET_ITEM( const_tuple_b115fec10b23d08e490385d180dcaef7_tuple, 5, const_str_plain_verbose ); Py_INCREF( const_str_plain_verbose );
    const_tuple_b3d1b3fd4511ac781471142f47e94ca9_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_b3d1b3fd4511ac781471142f47e94ca9_tuple, 0, const_str_plain_actual ); Py_INCREF( const_str_plain_actual );
    PyTuple_SET_ITEM( const_tuple_b3d1b3fd4511ac781471142f47e94ca9_tuple, 1, const_str_plain_desired ); Py_INCREF( const_str_plain_desired );
    PyTuple_SET_ITEM( const_tuple_b3d1b3fd4511ac781471142f47e94ca9_tuple, 2, const_str_plain_significant ); Py_INCREF( const_str_plain_significant );
    PyTuple_SET_ITEM( const_tuple_b3d1b3fd4511ac781471142f47e94ca9_tuple, 3, const_str_plain_err_msg ); Py_INCREF( const_str_plain_err_msg );
    PyTuple_SET_ITEM( const_tuple_b3d1b3fd4511ac781471142f47e94ca9_tuple, 4, const_str_plain_verbose ); Py_INCREF( const_str_plain_verbose );
    const_tuple_bc4870a37e43080125cbfc56c5c6d0a1_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_bc4870a37e43080125cbfc56c5c6d0a1_tuple, 0, const_str_plain_cls ); Py_INCREF( const_str_plain_cls );
    PyTuple_SET_ITEM( const_tuple_bc4870a37e43080125cbfc56c5c6d0a1_tuple, 1, const_str_plain_decorator ); Py_INCREF( const_str_plain_decorator );
    PyTuple_SET_ITEM( const_tuple_bc4870a37e43080125cbfc56c5c6d0a1_tuple, 2, const_str_plain_testmatch ); Py_INCREF( const_str_plain_testmatch );
    PyTuple_SET_ITEM( const_tuple_bc4870a37e43080125cbfc56c5c6d0a1_tuple, 3, const_str_plain_cls_attr ); Py_INCREF( const_str_plain_cls_attr );
    PyTuple_SET_ITEM( const_tuple_bc4870a37e43080125cbfc56c5c6d0a1_tuple, 4, const_str_plain_isfunction ); Py_INCREF( const_str_plain_isfunction );
    PyTuple_SET_ITEM( const_tuple_bc4870a37e43080125cbfc56c5c6d0a1_tuple, 5, const_str_plain__m ); Py_INCREF( const_str_plain__m );
    PyTuple_SET_ITEM( const_tuple_bc4870a37e43080125cbfc56c5c6d0a1_tuple, 6, const_str_plain_methods ); Py_INCREF( const_str_plain_methods );
    PyTuple_SET_ITEM( const_tuple_bc4870a37e43080125cbfc56c5c6d0a1_tuple, 7, const_str_plain_function ); Py_INCREF( const_str_plain_function );
    PyTuple_SET_ITEM( const_tuple_bc4870a37e43080125cbfc56c5c6d0a1_tuple, 8, const_str_plain_funcname ); Py_INCREF( const_str_plain_funcname );
    const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple = PyTuple_New( 15 );
    PyTuple_SET_ITEM( const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple, 0, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple, 2, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    PyTuple_SET_ITEM( const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple, 3, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    PyTuple_SET_ITEM( const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple, 4, const_int_pos_4 ); Py_INCREF( const_int_pos_4 );
    PyTuple_SET_ITEM( const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple, 5, const_int_pos_5 ); Py_INCREF( const_int_pos_5 );
    PyTuple_SET_ITEM( const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple, 6, const_int_pos_6 ); Py_INCREF( const_int_pos_6 );
    PyTuple_SET_ITEM( const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple, 7, const_int_pos_7 ); Py_INCREF( const_int_pos_7 );
    PyTuple_SET_ITEM( const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple, 8, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyTuple_SET_ITEM( const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple, 9, const_int_pos_9 ); Py_INCREF( const_int_pos_9 );
    PyTuple_SET_ITEM( const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple, 10, const_int_pos_10 ); Py_INCREF( const_int_pos_10 );
    PyTuple_SET_ITEM( const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple, 11, const_int_pos_11 ); Py_INCREF( const_int_pos_11 );
    PyTuple_SET_ITEM( const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple, 12, const_int_pos_12 ); Py_INCREF( const_int_pos_12 );
    PyTuple_SET_ITEM( const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple, 13, const_int_pos_13 ); Py_INCREF( const_int_pos_13 );
    PyTuple_SET_ITEM( const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple, 14, const_int_pos_14 ); Py_INCREF( const_int_pos_14 );
    const_tuple_cda8268996f4e94966c8388ac728262e_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_cda8268996f4e94966c8388ac728262e_tuple, 0, const_str_plain_object ); Py_INCREF( const_str_plain_object );
    PyTuple_SET_ITEM( const_tuple_cda8268996f4e94966c8388ac728262e_tuple, 1, const_str_plain_counter ); Py_INCREF( const_str_plain_counter );
    PyTuple_SET_ITEM( const_tuple_cda8268996f4e94966c8388ac728262e_tuple, 2, const_str_plain_instance ); Py_INCREF( const_str_plain_instance );
    PyTuple_SET_ITEM( const_tuple_cda8268996f4e94966c8388ac728262e_tuple, 3, const_str_plain_inum ); Py_INCREF( const_str_plain_inum );
    PyTuple_SET_ITEM( const_tuple_cda8268996f4e94966c8388ac728262e_tuple, 4, const_str_plain_format ); Py_INCREF( const_str_plain_format );
    PyTuple_SET_ITEM( const_tuple_cda8268996f4e94966c8388ac728262e_tuple, 5, const_str_plain_machine ); Py_INCREF( const_str_plain_machine );
    const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple = PyTuple_New( 16 );
    PyTuple_SET_ITEM( const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple, 0, const_str_plain_filename ); Py_INCREF( const_str_plain_filename );
    PyTuple_SET_ITEM( const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple, 1, const_str_plain_raise_on_error ); Py_INCREF( const_str_plain_raise_on_error );
    PyTuple_SET_ITEM( const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple, 2, const_str_plain_doctest ); Py_INCREF( const_str_plain_doctest );
    PyTuple_SET_ITEM( const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple, 3, const_str_plain_imp ); Py_INCREF( const_str_plain_imp );
    PyTuple_SET_ITEM( const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple, 4, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple, 5, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple, 6, const_str_plain_path ); Py_INCREF( const_str_plain_path );
    PyTuple_SET_ITEM( const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple, 7, const_str_plain_file ); Py_INCREF( const_str_plain_file );
    PyTuple_SET_ITEM( const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple, 8, const_str_plain_pathname ); Py_INCREF( const_str_plain_pathname );
    PyTuple_SET_ITEM( const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple, 9, const_str_plain_description ); Py_INCREF( const_str_plain_description );
    PyTuple_SET_ITEM( const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple, 10, const_str_plain_m ); Py_INCREF( const_str_plain_m );
    PyTuple_SET_ITEM( const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple, 11, const_str_plain_tests ); Py_INCREF( const_str_plain_tests );
    PyTuple_SET_ITEM( const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple, 12, const_str_plain_runner ); Py_INCREF( const_str_plain_runner );
    PyTuple_SET_ITEM( const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple, 13, const_str_plain_msg ); Py_INCREF( const_str_plain_msg );
    PyTuple_SET_ITEM( const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple, 14, const_str_plain_out ); Py_INCREF( const_str_plain_out );
    PyTuple_SET_ITEM( const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple, 15, const_str_plain_test ); Py_INCREF( const_str_plain_test );
    const_tuple_d15e90628f0c62410bc0a44f0792d58a_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_d15e90628f0c62410bc0a44f0792d58a_tuple, 0, const_str_digest_f1e178ff29bd1a44d5155691bff673e8 ); Py_INCREF( const_str_digest_f1e178ff29bd1a44d5155691bff673e8 );
    PyTuple_SET_ITEM( const_tuple_d15e90628f0c62410bc0a44f0792d58a_tuple, 1, Py_True ); Py_INCREF( Py_True );
    const_tuple_str_plain_ACTUAL_str_plain_DESIRED_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_ACTUAL_str_plain_DESIRED_tuple, 0, const_str_plain_ACTUAL ); Py_INCREF( const_str_plain_ACTUAL );
    PyTuple_SET_ITEM( const_tuple_str_plain_ACTUAL_str_plain_DESIRED_tuple, 1, const_str_plain_DESIRED ); Py_INCREF( const_str_plain_DESIRED );
    PyTuple_SET_ITEM( const_tuple_d15e90628f0c62410bc0a44f0792d58a_tuple, 2, const_tuple_str_plain_ACTUAL_str_plain_DESIRED_tuple ); Py_INCREF( const_tuple_str_plain_ACTUAL_str_plain_DESIRED_tuple );
    const_tuple_d9c647ca269ce7d9546b6525c8617d06_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_d9c647ca269ce7d9546b6525c8617d06_tuple, 0, const_str_plain_test_string ); Py_INCREF( const_str_plain_test_string );
    PyTuple_SET_ITEM( const_tuple_d9c647ca269ce7d9546b6525c8617d06_tuple, 1, const_str_plain_actual ); Py_INCREF( const_str_plain_actual );
    PyTuple_SET_ITEM( const_tuple_d9c647ca269ce7d9546b6525c8617d06_tuple, 2, const_str_plain_desired ); Py_INCREF( const_str_plain_desired );
    PyTuple_SET_ITEM( const_tuple_d9c647ca269ce7d9546b6525c8617d06_tuple, 3, const_str_plain_pprint ); Py_INCREF( const_str_plain_pprint );
    PyTuple_SET_ITEM( const_tuple_d9c647ca269ce7d9546b6525c8617d06_tuple, 4, const_str_plain_msg ); Py_INCREF( const_str_plain_msg );
    const_tuple_e5ff69c5c981ae300c528c1b5d2fdef7_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_e5ff69c5c981ae300c528c1b5d2fdef7_tuple, 0, const_str_plain_code_str ); Py_INCREF( const_str_plain_code_str );
    PyTuple_SET_ITEM( const_tuple_e5ff69c5c981ae300c528c1b5d2fdef7_tuple, 1, const_str_plain_times ); Py_INCREF( const_str_plain_times );
    PyTuple_SET_ITEM( const_tuple_e5ff69c5c981ae300c528c1b5d2fdef7_tuple, 2, const_str_plain_label ); Py_INCREF( const_str_plain_label );
    PyTuple_SET_ITEM( const_tuple_e5ff69c5c981ae300c528c1b5d2fdef7_tuple, 3, const_str_plain_frame ); Py_INCREF( const_str_plain_frame );
    PyTuple_SET_ITEM( const_tuple_e5ff69c5c981ae300c528c1b5d2fdef7_tuple, 4, const_str_plain_locs ); Py_INCREF( const_str_plain_locs );
    PyTuple_SET_ITEM( const_tuple_e5ff69c5c981ae300c528c1b5d2fdef7_tuple, 5, const_str_plain_globs ); Py_INCREF( const_str_plain_globs );
    PyTuple_SET_ITEM( const_tuple_e5ff69c5c981ae300c528c1b5d2fdef7_tuple, 6, const_str_plain_code ); Py_INCREF( const_str_plain_code );
    PyTuple_SET_ITEM( const_tuple_e5ff69c5c981ae300c528c1b5d2fdef7_tuple, 7, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_e5ff69c5c981ae300c528c1b5d2fdef7_tuple, 8, const_str_plain_elapsed ); Py_INCREF( const_str_plain_elapsed );
    const_tuple_e6ae32c021e964e54358d6bfdfb0ab8c_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_e6ae32c021e964e54358d6bfdfb0ab8c_tuple, 0, const_str_plain_actual ); Py_INCREF( const_str_plain_actual );
    PyTuple_SET_ITEM( const_tuple_e6ae32c021e964e54358d6bfdfb0ab8c_tuple, 1, const_str_plain_desired ); Py_INCREF( const_str_plain_desired );
    PyTuple_SET_ITEM( const_tuple_e6ae32c021e964e54358d6bfdfb0ab8c_tuple, 2, const_str_plain_decimal ); Py_INCREF( const_str_plain_decimal );
    PyTuple_SET_ITEM( const_tuple_e6ae32c021e964e54358d6bfdfb0ab8c_tuple, 3, const_str_plain_err_msg ); Py_INCREF( const_str_plain_err_msg );
    PyTuple_SET_ITEM( const_tuple_e6ae32c021e964e54358d6bfdfb0ab8c_tuple, 4, const_str_plain_verbose ); Py_INCREF( const_str_plain_verbose );
    const_tuple_ea576db0f218915852b22fa1292dfcd7_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_ea576db0f218915852b22fa1292dfcd7_tuple, 0, const_str_plain_actual ); Py_INCREF( const_str_plain_actual );
    PyTuple_SET_ITEM( const_tuple_ea576db0f218915852b22fa1292dfcd7_tuple, 1, const_str_plain_desired ); Py_INCREF( const_str_plain_desired );
    PyTuple_SET_ITEM( const_tuple_ea576db0f218915852b22fa1292dfcd7_tuple, 2, const_str_plain_rtol ); Py_INCREF( const_str_plain_rtol );
    PyTuple_SET_ITEM( const_tuple_ea576db0f218915852b22fa1292dfcd7_tuple, 3, const_str_plain_atol ); Py_INCREF( const_str_plain_atol );
    PyTuple_SET_ITEM( const_tuple_ea576db0f218915852b22fa1292dfcd7_tuple, 4, const_str_plain_err_msg ); Py_INCREF( const_str_plain_err_msg );
    PyTuple_SET_ITEM( const_tuple_ea576db0f218915852b22fa1292dfcd7_tuple, 5, const_str_plain_verbose ); Py_INCREF( const_str_plain_verbose );
    PyTuple_SET_ITEM( const_tuple_ea576db0f218915852b22fa1292dfcd7_tuple, 6, const_str_plain_np ); Py_INCREF( const_str_plain_np );
    PyTuple_SET_ITEM( const_tuple_ea576db0f218915852b22fa1292dfcd7_tuple, 7, const_str_plain_compare ); Py_INCREF( const_str_plain_compare );
    PyTuple_SET_ITEM( const_tuple_ea576db0f218915852b22fa1292dfcd7_tuple, 8, const_str_plain_header ); Py_INCREF( const_str_plain_header );
    const_tuple_f0d9b68b47a5d49cf65c29e25eae8b9f_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_f0d9b68b47a5d49cf65c29e25eae8b9f_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_f0d9b68b47a5d49cf65c29e25eae8b9f_tuple, 1, const_str_plain_b ); Py_INCREF( const_str_plain_b );
    PyTuple_SET_ITEM( const_tuple_f0d9b68b47a5d49cf65c29e25eae8b9f_tuple, 2, const_str_plain_maxulp ); Py_INCREF( const_str_plain_maxulp );
    PyTuple_SET_ITEM( const_tuple_f0d9b68b47a5d49cf65c29e25eae8b9f_tuple, 3, const_str_plain_dtype ); Py_INCREF( const_str_plain_dtype );
    PyTuple_SET_ITEM( const_tuple_f0d9b68b47a5d49cf65c29e25eae8b9f_tuple, 4, const_str_plain_np ); Py_INCREF( const_str_plain_np );
    PyTuple_SET_ITEM( const_tuple_f0d9b68b47a5d49cf65c29e25eae8b9f_tuple, 5, const_str_plain_ret ); Py_INCREF( const_str_plain_ret );
    const_tuple_faacf22dc31885222b083d7ea9c5ba72_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_faacf22dc31885222b083d7ea9c5ba72_tuple, 0, const_str_plain_rx ); Py_INCREF( const_str_plain_rx );
    PyTuple_SET_ITEM( const_tuple_faacf22dc31885222b083d7ea9c5ba72_tuple, 1, const_str_plain_ry ); Py_INCREF( const_str_plain_ry );
    PyTuple_SET_ITEM( const_tuple_faacf22dc31885222b083d7ea9c5ba72_tuple, 2, const_str_plain_vdt ); Py_INCREF( const_str_plain_vdt );
    PyTuple_SET_ITEM( const_tuple_faacf22dc31885222b083d7ea9c5ba72_tuple, 3, const_str_plain_diff ); Py_INCREF( const_str_plain_diff );
    PyTuple_SET_ITEM( const_tuple_faacf22dc31885222b083d7ea9c5ba72_tuple, 4, const_str_plain_np ); Py_INCREF( const_str_plain_np );
    const_tuple_str_plain_zeros_str_plain_float64_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_zeros_str_plain_float64_tuple, 0, const_str_plain_zeros ); Py_INCREF( const_str_plain_zeros );
    PyTuple_SET_ITEM( const_tuple_str_plain_zeros_str_plain_float64_tuple, 1, const_str_plain_float64 ); Py_INCREF( const_str_plain_float64 );
    const_tuple_str_plain_actual_str_plain_desired_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_actual_str_plain_desired_tuple, 0, const_str_plain_actual ); Py_INCREF( const_str_plain_actual );
    PyTuple_SET_ITEM( const_tuple_str_plain_actual_str_plain_desired_tuple, 1, const_str_plain_desired ); Py_INCREF( const_str_plain_desired );
    const_tuple_str_plain_isinf_str_plain_errstate_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_isinf_str_plain_errstate_tuple, 0, const_str_plain_isinf ); Py_INCREF( const_str_plain_isinf );
    PyTuple_SET_ITEM( const_tuple_str_plain_isinf_str_plain_errstate_tuple, 1, const_str_plain_errstate ); Py_INCREF( const_str_plain_errstate );
    const_tuple_str_plain__load_time_str_plain_time_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain__load_time_str_plain_time_tuple, 0, const_str_plain__load_time ); Py_INCREF( const_str_plain__load_time );
    PyTuple_SET_ITEM( const_tuple_str_plain__load_time_str_plain_time_tuple, 1, const_str_plain_time ); Py_INCREF( const_str_plain_time );
    const_tuple_str_plain_x_str_plain_y_str_plain_np_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_y_str_plain_np_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_y_str_plain_np_tuple, 1, const_str_plain_y ); Py_INCREF( const_str_plain_y );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_y_str_plain_np_tuple, 2, const_str_plain_np ); Py_INCREF( const_str_plain_np );
    const_tuple_str_plain_isfinite_str_plain_errstate_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_isfinite_str_plain_errstate_tuple, 0, const_str_plain_isfinite ); Py_INCREF( const_str_plain_isfinite );
    PyTuple_SET_ITEM( const_tuple_str_plain_isfinite_str_plain_errstate_tuple, 1, const_str_plain_errstate ); Py_INCREF( const_str_plain_errstate );
    const_tuple_float_1e_minus_07_int_0_str_empty_true_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_float_1e_minus_07_int_0_str_empty_true_tuple, 0, const_float_1e_minus_07 ); Py_INCREF( const_float_1e_minus_07 );
    PyTuple_SET_ITEM( const_tuple_float_1e_minus_07_int_0_str_empty_true_tuple, 1, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_float_1e_minus_07_int_0_str_empty_true_tuple, 2, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_float_1e_minus_07_int_0_str_empty_true_tuple, 3, Py_True ); Py_INCREF( Py_True );
    const_tuple_str_plain_x_str_plain_y_str_plain_nulp_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_y_str_plain_nulp_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_y_str_plain_nulp_tuple, 1, const_str_plain_y ); Py_INCREF( const_str_plain_y );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_y_str_plain_nulp_tuple, 2, const_str_plain_nulp ); Py_INCREF( const_str_plain_nulp );
    const_tuple_str_plain_rx_str_plain_ry_str_plain_vdt_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_rx_str_plain_ry_str_plain_vdt_tuple, 0, const_str_plain_rx ); Py_INCREF( const_str_plain_rx );
    PyTuple_SET_ITEM( const_tuple_str_plain_rx_str_plain_ry_str_plain_vdt_tuple, 1, const_str_plain_ry ); Py_INCREF( const_str_plain_ry );
    PyTuple_SET_ITEM( const_tuple_str_plain_rx_str_plain_ry_str_plain_vdt_tuple, 2, const_str_plain_vdt ); Py_INCREF( const_str_plain_vdt );
    const_tuple_str_plain_x_str_plain_y_str_plain_dtype_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_y_str_plain_dtype_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_y_str_plain_dtype_tuple, 1, const_str_plain_y ); Py_INCREF( const_str_plain_y );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_y_str_plain_dtype_tuple, 2, const_str_plain_dtype ); Py_INCREF( const_str_plain_dtype );
    const_tuple_str_plain_processName_str_plain_instance_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_processName_str_plain_instance_tuple, 0, const_str_plain_processName ); Py_INCREF( const_str_plain_processName );
    PyTuple_SET_ITEM( const_tuple_str_plain_processName_str_plain_instance_tuple, 1, const_str_plain_instance ); Py_INCREF( const_str_plain_instance );
    const_tuple_str_plain_x_str_plain_isnan_str_plain_st_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_isnan_str_plain_st_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_isnan_str_plain_st_tuple, 1, const_str_plain_isnan ); Py_INCREF( const_str_plain_isnan );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_isnan_str_plain_st_tuple, 2, const_str_plain_st ); Py_INCREF( const_str_plain_st );
    const_tuple_str_plain_x_str_plain_vdt_str_plain_comp_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_vdt_str_plain_comp_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_vdt_str_plain_comp_tuple, 1, const_str_plain_vdt ); Py_INCREF( const_str_plain_vdt );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_vdt_str_plain_comp_tuple, 2, const_str_plain_comp ); Py_INCREF( const_str_plain_comp );
    const_tuple_str_plain_func_str_plain_args_str_plain_kw_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_args_str_plain_kw_tuple, 0, const_str_plain_func ); Py_INCREF( const_str_plain_func );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_args_str_plain_kw_tuple, 1, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_args_str_plain_kw_tuple, 2, const_str_plain_kw ); Py_INCREF( const_str_plain_kw );
    const_tuple_str_plain_filename_str_plain_raise_on_error_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_filename_str_plain_raise_on_error_tuple, 0, const_str_plain_filename ); Py_INCREF( const_str_plain_filename );
    PyTuple_SET_ITEM( const_tuple_str_plain_filename_str_plain_raise_on_error_tuple, 1, const_str_plain_raise_on_error ); Py_INCREF( const_str_plain_raise_on_error );
    const_tuple_str_plain__proc_pid_stat_str_plain__load_time_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain__proc_pid_stat_str_plain__load_time_tuple, 0, const_str_plain__proc_pid_stat ); Py_INCREF( const_str_plain__proc_pid_stat );
    PyTuple_SET_ITEM( const_tuple_str_plain__proc_pid_stat_str_plain__load_time_tuple, 1, const_str_plain__load_time ); Py_INCREF( const_str_plain__load_time );
    const_tuple_str_plain_args_str_plain_kwargs_str_plain_log_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_kwargs_str_plain_log_tuple, 0, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_kwargs_str_plain_log_tuple, 1, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_kwargs_str_plain_log_tuple, 2, const_str_plain_log ); Py_INCREF( const_str_plain_log );
    const_tuple_str_plain_args_str_plain_kwargs_str_plain_nose_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_kwargs_str_plain_nose_tuple, 0, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_kwargs_str_plain_nose_tuple, 1, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_kwargs_str_plain_nose_tuple, 2, const_str_plain_nose ); Py_INCREF( const_str_plain_nose );
    const_tuple_str_plain_x_id_str_plain_y_id_str_plain_hasval_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_id_str_plain_y_id_str_plain_hasval_tuple, 0, const_str_plain_x_id ); Py_INCREF( const_str_plain_x_id );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_id_str_plain_y_id_str_plain_hasval_tuple, 1, const_str_plain_y_id ); Py_INCREF( const_str_plain_y_id );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_id_str_plain_y_id_str_plain_hasval_tuple, 2, const_str_plain_hasval ); Py_INCREF( const_str_plain_hasval );
    const_tuple_str_plain__proc_pid_stat_str_plain_f_str_plain_l_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain__proc_pid_stat_str_plain_f_str_plain_l_tuple, 0, const_str_plain__proc_pid_stat ); Py_INCREF( const_str_plain__proc_pid_stat );
    PyTuple_SET_ITEM( const_tuple_str_plain__proc_pid_stat_str_plain_f_str_plain_l_tuple, 1, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_str_plain__proc_pid_stat_str_plain_f_str_plain_l_tuple, 2, const_str_plain_l ); Py_INCREF( const_str_plain_l );
    const_tuple_str_plain_self_str_plain_record_str_plain_module_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_record_str_plain_module_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_record_str_plain_module_tuple, 1, const_str_plain_record ); Py_INCREF( const_str_plain_record );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_record_str_plain_module_tuple, 2, const_str_plain_module ); Py_INCREF( const_str_plain_module );
    const_tuple_str_plain_dtype_str_plain_type_str_plain_max_size_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_dtype_str_plain_type_str_plain_max_size_tuple, 0, const_str_plain_dtype ); Py_INCREF( const_str_plain_dtype );
    PyTuple_SET_ITEM( const_tuple_str_plain_dtype_str_plain_type_str_plain_max_size_tuple, 1, const_str_plain_type ); Py_INCREF( const_str_plain_type );
    PyTuple_SET_ITEM( const_tuple_str_plain_dtype_str_plain_type_str_plain_max_size_tuple, 2, const_str_plain_max_size ); Py_INCREF( const_str_plain_max_size );
    const_tuple_str_plain_around_str_plain_number_str_plain_float__tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_around_str_plain_number_str_plain_float__tuple, 0, const_str_plain_around ); Py_INCREF( const_str_plain_around );
    PyTuple_SET_ITEM( const_tuple_str_plain_around_str_plain_number_str_plain_float__tuple, 1, const_str_plain_number ); Py_INCREF( const_str_plain_number );
    PyTuple_SET_ITEM( const_tuple_str_plain_around_str_plain_number_str_plain_float__tuple, 2, const_str_plain_float_ ); Py_INCREF( const_str_plain_float_ );
    const_tuple_str_plain_code_str_str_plain_times_str_plain_label_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_code_str_str_plain_times_str_plain_label_tuple, 0, const_str_plain_code_str ); Py_INCREF( const_str_plain_code_str );
    PyTuple_SET_ITEM( const_tuple_str_plain_code_str_str_plain_times_str_plain_label_tuple, 1, const_str_plain_times ); Py_INCREF( const_str_plain_times );
    PyTuple_SET_ITEM( const_tuple_str_plain_code_str_str_plain_times_str_plain_label_tuple, 2, const_str_plain_label ); Py_INCREF( const_str_plain_label );
    const_tuple_str_plain_float32_str_plain_empty_str_plain_arange_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_float32_str_plain_empty_str_plain_arange_tuple, 0, const_str_plain_float32 ); Py_INCREF( const_str_plain_float32 );
    PyTuple_SET_ITEM( const_tuple_str_plain_float32_str_plain_empty_str_plain_arange_tuple, 1, const_str_plain_empty ); Py_INCREF( const_str_plain_empty );
    PyTuple_SET_ITEM( const_tuple_str_plain_float32_str_plain_empty_str_plain_arange_tuple, 2, const_str_plain_arange ); Py_INCREF( const_str_plain_arange );
    const_tuple_str_plain_self_str_plain_log_str_plain_showwarning_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_log_str_plain_showwarning_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_log_str_plain_showwarning_tuple, 1, const_str_plain_log ); Py_INCREF( const_str_plain_log );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_log_str_plain_showwarning_tuple, 2, const_str_plain_showwarning ); Py_INCREF( const_str_plain_showwarning );
    const_tuple_str_plain_iscomplexobj_str_plain_real_str_plain_imag_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_iscomplexobj_str_plain_real_str_plain_imag_tuple, 0, const_str_plain_iscomplexobj ); Py_INCREF( const_str_plain_iscomplexobj );
    PyTuple_SET_ITEM( const_tuple_str_plain_iscomplexobj_str_plain_real_str_plain_imag_tuple, 1, const_str_plain_real ); Py_INCREF( const_str_plain_real );
    PyTuple_SET_ITEM( const_tuple_str_plain_iscomplexobj_str_plain_real_str_plain_imag_tuple, 2, const_str_plain_imag ); Py_INCREF( const_str_plain_imag );
    const_tuple_str_plain_cls_str_plain_decorator_str_plain_testmatch_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_cls_str_plain_decorator_str_plain_testmatch_tuple, 0, const_str_plain_cls ); Py_INCREF( const_str_plain_cls );
    PyTuple_SET_ITEM( const_tuple_str_plain_cls_str_plain_decorator_str_plain_testmatch_tuple, 1, const_str_plain_decorator ); Py_INCREF( const_str_plain_decorator );
    PyTuple_SET_ITEM( const_tuple_str_plain_cls_str_plain_decorator_str_plain_testmatch_tuple, 2, const_str_plain_testmatch ); Py_INCREF( const_str_plain_testmatch );
    const_tuple_str_plain_x_str_plain_vdt_str_plain_comp_str_plain_rx_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_vdt_str_plain_comp_str_plain_rx_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_vdt_str_plain_comp_str_plain_rx_tuple, 1, const_str_plain_vdt ); Py_INCREF( const_str_plain_vdt );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_vdt_str_plain_comp_str_plain_rx_tuple, 2, const_str_plain_comp ); Py_INCREF( const_str_plain_comp );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_vdt_str_plain_comp_str_plain_rx_tuple, 3, const_str_plain_rx ); Py_INCREF( const_str_plain_rx );
    const_tuple_str_plain_ndarray_str_plain_isscalar_str_plain_signbit_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_ndarray_str_plain_isscalar_str_plain_signbit_tuple, 0, const_str_plain_ndarray ); Py_INCREF( const_str_plain_ndarray );
    PyTuple_SET_ITEM( const_tuple_str_plain_ndarray_str_plain_isscalar_str_plain_signbit_tuple, 1, const_str_plain_isscalar ); Py_INCREF( const_str_plain_isscalar );
    PyTuple_SET_ITEM( const_tuple_str_plain_ndarray_str_plain_isscalar_str_plain_signbit_tuple, 2, const_str_plain_signbit ); Py_INCREF( const_str_plain_signbit );
    const_tuple_str_plain_a_str_plain_b_str_plain_maxulp_str_plain_dtype_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_b_str_plain_maxulp_str_plain_dtype_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_b_str_plain_maxulp_str_plain_dtype_tuple, 1, const_str_plain_b ); Py_INCREF( const_str_plain_b );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_b_str_plain_maxulp_str_plain_dtype_tuple, 2, const_str_plain_maxulp ); Py_INCREF( const_str_plain_maxulp );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_b_str_plain_maxulp_str_plain_dtype_tuple, 3, const_str_plain_dtype ); Py_INCREF( const_str_plain_dtype );
    const_tuple_str_plain_test_string_str_plain_actual_str_plain_desired_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_test_string_str_plain_actual_str_plain_desired_tuple, 0, const_str_plain_test_string ); Py_INCREF( const_str_plain_test_string );
    PyTuple_SET_ITEM( const_tuple_str_plain_test_string_str_plain_actual_str_plain_desired_tuple, 1, const_str_plain_actual ); Py_INCREF( const_str_plain_actual );
    PyTuple_SET_ITEM( const_tuple_str_plain_test_string_str_plain_actual_str_plain_desired_tuple, 2, const_str_plain_desired ); Py_INCREF( const_str_plain_desired );
    const_tuple_str_plain_processName_str_plain_instance_str_plain_win32pdh_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_processName_str_plain_instance_str_plain_win32pdh_tuple, 0, const_str_plain_processName ); Py_INCREF( const_str_plain_processName );
    PyTuple_SET_ITEM( const_tuple_str_plain_processName_str_plain_instance_str_plain_win32pdh_tuple, 1, const_str_plain_instance ); Py_INCREF( const_str_plain_instance );
    PyTuple_SET_ITEM( const_tuple_str_plain_processName_str_plain_instance_str_plain_win32pdh_tuple, 2, const_str_plain_win32pdh ); Py_INCREF( const_str_plain_win32pdh );
    const_tuple_str_plain_x_str_plain_isinf_str_plain_errstate_str_plain_st_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_isinf_str_plain_errstate_str_plain_st_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_isinf_str_plain_errstate_str_plain_st_tuple, 1, const_str_plain_isinf ); Py_INCREF( const_str_plain_isinf );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_isinf_str_plain_errstate_str_plain_st_tuple, 2, const_str_plain_errstate ); Py_INCREF( const_str_plain_errstate );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_isinf_str_plain_errstate_str_plain_st_tuple, 3, const_str_plain_st ); Py_INCREF( const_str_plain_st );
    const_tuple_str_plain_x_str_plain_y_str_plain_err_msg_str_plain_verbose_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_y_str_plain_err_msg_str_plain_verbose_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_y_str_plain_err_msg_str_plain_verbose_tuple, 1, const_str_plain_y ); Py_INCREF( const_str_plain_y );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_y_str_plain_err_msg_str_plain_verbose_tuple, 2, const_str_plain_err_msg ); Py_INCREF( const_str_plain_err_msg );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_y_str_plain_err_msg_str_plain_verbose_tuple, 3, const_str_plain_verbose ); Py_INCREF( const_str_plain_verbose );
    const_tuple_str_plain_x_id_str_plain_y_id_str_plain_hasval_str_plain_msg_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_id_str_plain_y_id_str_plain_hasval_str_plain_msg_tuple, 0, const_str_plain_x_id ); Py_INCREF( const_str_plain_x_id );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_id_str_plain_y_id_str_plain_hasval_str_plain_msg_tuple, 1, const_str_plain_y_id ); Py_INCREF( const_str_plain_y_id );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_id_str_plain_y_id_str_plain_hasval_str_plain_msg_tuple, 2, const_str_plain_hasval ); Py_INCREF( const_str_plain_hasval );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_id_str_plain_y_id_str_plain_hasval_str_plain_msg_tuple, 3, const_str_plain_msg ); Py_INCREF( const_str_plain_msg );
}

// The module code objects.
static PyCodeObject *codeobj_ff05b69aaa377c8c64afecd25d559dd7;
static PyCodeObject *codeobj_745511c1918e6b8f9a32100ac8aebdb3;
static PyCodeObject *codeobj_0739ee2ff2186086ae97b1d23394db52;
static PyCodeObject *codeobj_2982914fd5f16f66dab3cfd15a3ac622;
static PyCodeObject *codeobj_dd1945a10e98e3d29296e8f555a6783b;
static PyCodeObject *codeobj_9466012db79c67ae777475e65c214be4;
static PyCodeObject *codeobj_17bfcb3b6a2cb73f1b3c3f5d2b257231;
static PyCodeObject *codeobj_7b55e0664424b14bdbbac7ca87bb1efd;
static PyCodeObject *codeobj_9523c3aaf9bb5bc4758db15bcf63285f;
static PyCodeObject *codeobj_3e760ee41369da6be31fce32dcc7b768;
static PyCodeObject *codeobj_66c0aae1b22554663bb5a8740cf914d3;
static PyCodeObject *codeobj_98d894a87dbe365881621f68a4727c11;
static PyCodeObject *codeobj_6e2ca22f9270fb7793b1faad80d3e375;
static PyCodeObject *codeobj_1ae423d552e54de094d1aa3af7dc685e;
static PyCodeObject *codeobj_54ba2290323f4310ca47fe6b2f312ba7;
static PyCodeObject *codeobj_4a1f1f88c13f070a06219af346830685;
static PyCodeObject *codeobj_3d894d2caf6f3ca2f22c161dbb0cf0ab;
static PyCodeObject *codeobj_a0b8a2849f4cfb5582b4cef583bf0ee8;
static PyCodeObject *codeobj_627976217598cea86afee608efc331ef;
static PyCodeObject *codeobj_e648e7d3ecc4ddb8d90e0f889ce3a745;
static PyCodeObject *codeobj_a299f7d0e82ab62e2aceda37883a868a;
static PyCodeObject *codeobj_6013a36a2de187389418283b08fcea34;
static PyCodeObject *codeobj_dc7314e99045f1c4ae1ef542dc42aeaa;
static PyCodeObject *codeobj_0f5319ef418a98d307499590a6a4161b;
static PyCodeObject *codeobj_b79127009e799ae514dd13beac2080dc;
static PyCodeObject *codeobj_1b20fa0f28dbdd55e3b876db6484f453;
static PyCodeObject *codeobj_806bb475013dd6ad7b9edbc31deb906b;
static PyCodeObject *codeobj_72564683b8a7449521e21d2b0ef64eab;
static PyCodeObject *codeobj_05826378c8c06b42249e304e6f2e281b;
static PyCodeObject *codeobj_96f6cd6f4183dbd4cfde565dbd74e385;
static PyCodeObject *codeobj_1bd7d53ae619425e53983e6d65b0153c;
static PyCodeObject *codeobj_1c91c46a9aa26502c2107b87d7e7d08b;
static PyCodeObject *codeobj_12887126429fd0a63d40e61eab48891e;
static PyCodeObject *codeobj_ac0bc451c03e86bef55928b748444421;
static PyCodeObject *codeobj_4561734de61c422902e50f08b9ff68d1;
static PyCodeObject *codeobj_bc00aff040e6cadcddeaa7c8acb7bd1e;
static PyCodeObject *codeobj_5dfc2473ab3b2d8c6bfb136d6d2ebb50;
static PyCodeObject *codeobj_06641a2a007d70c37ca1af8cbc238fe6;
static PyCodeObject *codeobj_29f112d557ae2186c66dc1a124f1ae74;
static PyCodeObject *codeobj_fcdd6ed607324dde3da216584e0576f4;
static PyCodeObject *codeobj_df3ab4141c291d39939be6a4a7fa445d;
static PyCodeObject *codeobj_255590aa610a45a3b7c526600be2b018;
static PyCodeObject *codeobj_729f56674ba495d8eca1dd9d3e0e336f;
static PyCodeObject *codeobj_8701f077855ed47b388368d45bfeeb88;
static PyCodeObject *codeobj_72bf077e3f76eee562a8a8e37e5e3c99;
static PyCodeObject *codeobj_2711bf5c021dca76a1896f2562e53b8b;
static PyCodeObject *codeobj_708193586fe6ba2cb2a5fa9f4861daa2;
static PyCodeObject *codeobj_7fcc172685067f94c46806e5864f3040;
static PyCodeObject *codeobj_ecf94f569795382247dda0e49451dbfb;
static PyCodeObject *codeobj_5df4eda9b20d8ff48998d43432f998b5;
static PyCodeObject *codeobj_0af3a5c20e0c571665f4b501fd2e54cd;
static PyCodeObject *codeobj_ac0845d1e57a7ace00b74ac450e1bd03;
static PyCodeObject *codeobj_dd907b1d8bbb9843f9d130607ce17045;
static PyCodeObject *codeobj_247447e674e368c21dadabcf58fd100b;
static PyCodeObject *codeobj_9da87ace31c4d28b55ae8e7bb301f79f;
static PyCodeObject *codeobj_4d481aab041b6cb3ceb38db6ee606745;
static PyCodeObject *codeobj_e60ee6644014cabb4454dca61b7b89b3;
static PyCodeObject *codeobj_f011aedaeab79fee77ac270e646c35b7;
static PyCodeObject *codeobj_e5b12a030a6011ecae4d5e3cdd233681;
static PyCodeObject *codeobj_6edb39e03f23fc50b9831c96a8c329f3;
static PyCodeObject *codeobj_be47ef7324ce2d893f714e6d2284a1bc;
static PyCodeObject *codeobj_9b9fce1cb8c9bb88af26a6a6ddee7c53;
static PyCodeObject *codeobj_bcfed848efdc45ae43549dcf2d4a0781;
static PyCodeObject *codeobj_15af28176c754e7cb659059b95b3c9df;
static PyCodeObject *codeobj_dadcb44a426fd72dbdebf0ea43886971;
static PyCodeObject *codeobj_a960665e7f1b970b708d2bf20f9890b1;
static PyCodeObject *codeobj_397d46206022034eb0b5cb2d2a3d522f;
static PyCodeObject *codeobj_980df88a5eaa46769d9b40d6ad3c669f;
static PyCodeObject *codeobj_1fe7ee61d28b8e32af545e906a40e6c9;
static PyCodeObject *codeobj_ce89bd25f715c8108319c3ccb2888e5e;
static PyCodeObject *codeobj_690d16a2d935750004a0aead2772537c;
static PyCodeObject *codeobj_631069609e44debf5c026bcd6159e75d;
static PyCodeObject *codeobj_6d94cf55a24d791ad0ddb5a1ee9195b3;
static PyCodeObject *codeobj_e2a960abbef8a452a85561053219fadc;
static PyCodeObject *codeobj_69d159af49b6adde6f62c3a6c524dfd5;
static PyCodeObject *codeobj_8a9904a3e06c3378c37f079a862811d7;
static PyCodeObject *codeobj_239aa3b12d25329fa24e22b08716d463;
static PyCodeObject *codeobj_aa5f47319df891bdf4601a66b2ce70e7;
static PyCodeObject *codeobj_8c807be918f9fc89ddcf2c182f4d8260;
static PyCodeObject *codeobj_daa57b1408736042c837c217a83bc1eb;
static PyCodeObject *codeobj_67fc806fe3669a537fe853a628f97d3f;
static PyCodeObject *codeobj_04bf0024e2de59b1c418c173e8e5a1d1;
static PyCodeObject *codeobj_44c17a35799febd3f790ee0ea7c6f824;
static PyCodeObject *codeobj_d6630fe54ae77a8de478061c0c047d6b;
static PyCodeObject *codeobj_4279bc62ea68d475ba47f418e90f6795;
static PyCodeObject *codeobj_337b17a20c58ea8ea7a96d24ee4c27a5;
static PyCodeObject *codeobj_0575d1336f90d94cc243cdfd51018eec;
static PyCodeObject *codeobj_42cff4fac10b8caf56a7116e0ec57a0f;
static PyCodeObject *codeobj_31e0e165074c7b7f129ad77cbef82e81;
static PyCodeObject *codeobj_5b9a2fed1fecb39a60d749ee9336884c;
static PyCodeObject *codeobj_b5966a45a70511b281debcb7f92ae7a9;
static PyCodeObject *codeobj_1648d1a7ed97ac5991f3975b8d841444;
static PyCodeObject *codeobj_bfa694d057c13d481638135282bea2ec;
static PyCodeObject *codeobj_3c0ce4283d45e52104cb1f9dde267096;
static PyCodeObject *codeobj_855792ac59e5258845f5e852af6680b0;
static PyCodeObject *codeobj_ac0b1f483f349766b78aa66a82e987e5;
static PyCodeObject *codeobj_5a273d1a230dccfab02b6fd1e7218036;
static PyCodeObject *codeobj_0be72c483448a744e0788d9b9c16eb07;
static PyCodeObject *codeobj_0a1ffb0eefff30e2fac8992a559ecc43;

static void _initModuleCodeObjects(void)
{
    codeobj_ff05b69aaa377c8c64afecd25d559dd7 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_angle_lambda, 992, const_tuple_str_plain_s_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_745511c1918e6b8f9a32100ac8aebdb3 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_angle_lambda, 992, const_tuple_str_plain_s_str_plain_msg_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_0739ee2ff2186086ae97b1d23394db52 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_angle_lambda, 1552, const_tuple_empty, 0, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_2982914fd5f16f66dab3cfd15a3ac622 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_angle_lambda, 1552, const_tuple_str_plain_s_str_plain_o_tuple, 0, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_dd1945a10e98e3d29296e8f555a6783b = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_angle_lambda, 1565, const_tuple_empty, 0, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_9466012db79c67ae777475e65c214be4 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_angle_lambda, 1565, const_tuple_str_plain_s_str_plain_o_tuple, 0, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_17bfcb3b6a2cb73f1b3c3f5d2b257231 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_angle_lambda, 1566, const_tuple_empty, 0, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_7b55e0664424b14bdbbac7ca87bb1efd = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_angle_lambda, 1566, const_tuple_str_plain_s_str_plain_o_tuple, 0, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_9523c3aaf9bb5bc4758db15bcf63285f = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_GetPerformanceAttributes, 155, const_tuple_cda8268996f4e94966c8388ac728262e_tuple, 6, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_3e760ee41369da6be31fce32dcc7b768 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_GetPerformanceAttributes, 155, const_tuple_0dfa334fafa0cdd681c6614ff859d9a1_tuple, 6, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_66c0aae1b22554663bb5a8740cf914d3 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_WarningManager, 1400, const_tuple_empty, 0, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_98d894a87dbe365881621f68a4727c11 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_WarningMessage, 1368, const_tuple_empty, 0, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_6e2ca22f9270fb7793b1faad80d3e375 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain___enter__, 1432, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_1ae423d552e54de094d1aa3af7dc685e = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain___enter__, 1432, const_tuple_str_plain_self_str_plain_log_str_plain_showwarning_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_54ba2290323f4310ca47fe6b2f312ba7 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain___exit__, 1448, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_4a1f1f88c13f070a06219af346830685 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain___init__, 1385, const_tuple_83095d153c5049ea88477bf4c75fd7a8_tuple, 7, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_3d894d2caf6f3ca2f22c161dbb0cf0ab = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain___init__, 1385, const_tuple_22025bc25a02798f8cb5fcbffa9efb3b_tuple, 7, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_a0b8a2849f4cfb5582b4cef583bf0ee8 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain___init__, 1424, const_tuple_str_plain_self_str_plain_record_str_plain_module_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_627976217598cea86afee608efc331ef = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain___str__, 1395, const_tuple_str_plain_self_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_e648e7d3ecc4ddb8d90e0f889ce3a745 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain__assert_valid_refcount, 1116, const_tuple_str_plain_op_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_a299f7d0e82ab62e2aceda37883a868a = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain__assert_valid_refcount, 1116, const_tuple_b0000c959599fe90154103540589c71f_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_6013a36a2de187389418283b08fcea34 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain__diff, 1333, const_tuple_str_plain_rx_str_plain_ry_str_plain_vdt_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_dc7314e99045f1c4ae1ef542dc42aeaa = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain__diff, 1333, const_tuple_faacf22dc31885222b083d7ea9c5ba72_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_0f5319ef418a98d307499590a6a4161b = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain__gen_alignment_data, 1522, const_tuple_str_plain_dtype_str_plain_type_str_plain_max_size_tuple, 3, CO_NEWLOCALS | CO_GENERATOR | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_b79127009e799ae514dd13beac2080dc = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain__gen_alignment_data, 1522, const_tuple_8346555f6603c45d7a96f8bbcf33c858_tuple, 3, CO_NEWLOCALS | CO_GENERATOR | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_1b20fa0f28dbdd55e3b876db6484f453 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain__integer_repr, 1341, const_tuple_str_plain_x_str_plain_vdt_str_plain_comp_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_806bb475013dd6ad7b9edbc31deb906b = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain__integer_repr, 1341, const_tuple_str_plain_x_str_plain_vdt_str_plain_comp_str_plain_rx_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_72564683b8a7449521e21d2b0ef64eab = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_, 33, const_tuple_str_plain_val_str_plain_msg_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_05826378c8c06b42249e304e6f2e281b = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_allclose, 1134, const_tuple_b115fec10b23d08e490385d180dcaef7_tuple, 6, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_96f6cd6f4183dbd4cfde565dbd74e385 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_allclose, 1134, const_tuple_ea576db0f218915852b22fa1292dfcd7_tuple, 6, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_1bd7d53ae619425e53983e6d65b0153c = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_almost_equal, 358, const_tuple_e6ae32c021e964e54358d6bfdfb0ab8c_tuple, 5, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_1c91c46a9aa26502c2107b87d7e7d08b = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_almost_equal, 358, const_tuple_7cc7175ea8ac3943a42b282d8ca47d9f_tuple, 5, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_12887126429fd0a63d40e61eab48891e = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_approx_equal, 473, const_tuple_b3d1b3fd4511ac781471142f47e94ca9_tuple, 5, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_ac0bc451c03e86bef55928b748444421 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_approx_equal, 473, const_tuple_a0f3948b9b9c78cd8eedbd6f01b94ef1_tuple, 5, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_4561734de61c422902e50f08b9ff68d1 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_array_almost_equal, 720, const_tuple_a0be4d43003bcdd9738a5dd9e83ef4ca_tuple, 5, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_bc00aff040e6cadcddeaa7c8acb7bd1e = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_array_almost_equal, 720, const_tuple_007a4a361645d2cd1ae628dc362a1d50_tuple, 5, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_5dfc2473ab3b2d8c6bfb136d6d2ebb50 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_array_almost_equal_nulp, 1185, const_tuple_str_plain_x_str_plain_y_str_plain_nulp_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_06641a2a007d70c37ca1af8cbc238fe6 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_array_almost_equal_nulp, 1185, const_tuple_23579b8f33cf06464b97783a718253a4_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_29f112d557ae2186c66dc1a124f1ae74 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_array_compare, 568, const_tuple_42c5f17d04fd97d74a40e0514ae96463_tuple, 6, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_fcdd6ed607324dde3da216584e0576f4 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_array_compare, 568, const_tuple_48cfa7fbb491e1ee96b94a08b3d51cb5_tuple, 6, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_df3ab4141c291d39939be6a4a7fa445d = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_array_equal, 654, const_tuple_str_plain_x_str_plain_y_str_plain_err_msg_str_plain_verbose_tuple, 4, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_255590aa610a45a3b7c526600be2b018 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_array_less, 813, const_tuple_str_plain_x_str_plain_y_str_plain_err_msg_str_plain_verbose_tuple, 4, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_729f56674ba495d8eca1dd9d3e0e336f = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_array_max_ulp, 1247, const_tuple_str_plain_a_str_plain_b_str_plain_maxulp_str_plain_dtype_tuple, 4, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_8701f077855ed47b388368d45bfeeb88 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_array_max_ulp, 1247, const_tuple_f0d9b68b47a5d49cf65c29e25eae8b9f_tuple, 4, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_72bf077e3f76eee562a8a8e37e5e3c99 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_equal, 208, const_tuple_04c55a1b731b23263b9c9e015755e187_tuple, 4, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_2711bf5c021dca76a1896f2562e53b8b = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_equal, 208, const_tuple_944de8a92e09905a5d1b64e02c8558ea_tuple, 4, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_708193586fe6ba2cb2a5fa9f4861daa2 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_no_warnings, 1493, const_tuple_str_plain_func_str_plain_args_str_plain_kw_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_7fcc172685067f94c46806e5864f3040 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_no_warnings, 1493, const_tuple_5eda0b27f24d46759a2212549f83add5_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_ecf94f569795382247dda0e49451dbfb = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_raises, 1007, const_tuple_str_plain_args_str_plain_kwargs_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_5df4eda9b20d8ff48998d43432f998b5 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_raises, 1007, const_tuple_str_plain_args_str_plain_kwargs_str_plain_nose_tuple, 0, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_0af3a5c20e0c571665f4b501fd2e54cd = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_string_equal, 885, const_tuple_str_plain_actual_str_plain_desired_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_ac0845d1e57a7ace00b74ac450e1bd03 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_string_equal, 885, const_tuple_49c70cfa143642b7953372e431b26b96_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_dd907b1d8bbb9843f9d130607ce17045 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_warns, 1455, const_tuple_a75b09c38b1fc22bca87afab41451769_tuple, 4, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_247447e674e368c21dadabcf58fd100b = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_assert_warns, 1455, const_tuple_428ef0c7dcad024f447304283fd888c5_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_9da87ace31c4d28b55ae8e7bb301f79f = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_build_err_msg, 187, const_tuple_9156f683dd46f839464b6b2e773c882f_tuple, 5, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_4d481aab041b6cb3ceb38db6ee606745 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_build_err_msg, 187, const_tuple_887e7200f623e311cc241cd4365ff0fb_tuple, 5, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_e60ee6644014cabb4454dca61b7b89b3 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_chk_same_position, 577, const_tuple_str_plain_x_id_str_plain_y_id_str_plain_hasval_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_f011aedaeab79fee77ac270e646c35b7 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_chk_same_position, 577, const_tuple_str_plain_x_id_str_plain_y_id_str_plain_hasval_str_plain_msg_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_e5b12a030a6011ecae4d5e3cdd233681 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_compare, 792, const_tuple_str_plain_x_str_plain_y_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_6edb39e03f23fc50b9831c96a8c329f3 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_compare, 792, const_tuple_90d9f56f86b3e4690ccdd1a1a531fe57_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_be47ef7324ce2d893f714e6d2284a1bc = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_compare, 1177, const_tuple_str_plain_x_str_plain_y_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_9b9fce1cb8c9bb88af26a6a6ddee7c53 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_compare, 1177, const_tuple_str_plain_x_str_plain_y_str_plain_np_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_bcfed848efdc45ae43549dcf2d4a0781 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_decorate_methods, 1022, const_tuple_str_plain_cls_str_plain_decorator_str_plain_testmatch_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_15af28176c754e7cb659059b95b3c9df = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_decorate_methods, 1022, const_tuple_bc4870a37e43080125cbfc56c5c6d0a1_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_dadcb44a426fd72dbdebf0ea43886971 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_gisfinite, 63, const_tuple_str_plain_x_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_a960665e7f1b970b708d2bf20f9890b1 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_gisfinite, 63, const_tuple_939737dafb6355bbbcdd58d53fa23ae8_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_397d46206022034eb0b5cb2d2a3d522f = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_gisinf, 81, const_tuple_str_plain_x_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_980df88a5eaa46769d9b40d6ad3c669f = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_gisinf, 81, const_tuple_str_plain_x_str_plain_isinf_str_plain_errstate_str_plain_st_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_1fe7ee61d28b8e32af545e906a40e6c9 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_gisnan, 46, const_tuple_str_plain_x_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_ce89bd25f715c8108319c3ccb2888e5e = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_gisnan, 46, const_tuple_str_plain_x_str_plain_isnan_str_plain_st_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_690d16a2d935750004a0aead2772537c = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_integer_repr, 1355, const_tuple_str_plain_x_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_631069609e44debf5c026bcd6159e75d = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_integer_repr, 1355, const_tuple_str_plain_x_str_plain_np_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_6d94cf55a24d791ad0ddb5a1ee9195b3 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_isnumber, 574, const_tuple_str_plain_x_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_e2a960abbef8a452a85561053219fadc = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_jiffies, 113, const_tuple_str_plain__proc_pid_stat_str_plain__load_time_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_69d159af49b6adde6f62c3a6c524dfd5 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_jiffies, 113, const_tuple_501a23729e7545fd650e3d9d37994226_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_8a9904a3e06c3378c37f079a862811d7 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_jiffies, 142, const_tuple_str_plain__load_time_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_239aa3b12d25329fa24e22b08716d463 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_jiffies, 142, const_tuple_str_plain__load_time_str_plain_time_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_aa5f47319df891bdf4601a66b2ce70e7 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_measure, 1069, const_tuple_str_plain_code_str_str_plain_times_str_plain_label_tuple, 3, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_8c807be918f9fc89ddcf2c182f4d8260 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_measure, 1069, const_tuple_e5ff69c5c981ae300c528c1b5d2fdef7_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_daa57b1408736042c837c217a83bc1eb = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_memusage, 128, const_tuple_str_plain__proc_pid_stat_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_67fc806fe3669a537fe853a628f97d3f = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_memusage, 128, const_tuple_str_plain__proc_pid_stat_str_plain_f_str_plain_l_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_04bf0024e2de59b1c418c173e8e5a1d1 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_memusage, 149, const_tuple_empty, 0, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_44c17a35799febd3f790ee0ea7c6f824 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_memusage, 180, const_tuple_str_plain_processName_str_plain_instance_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_d6630fe54ae77a8de478061c0c047d6b = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_memusage, 180, const_tuple_str_plain_processName_str_plain_instance_str_plain_win32pdh_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_4279bc62ea68d475ba47f418e90f6795 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_nulp_diff, 1290, const_tuple_str_plain_x_str_plain_y_str_plain_dtype_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_337b17a20c58ea8ea7a96d24ee4c27a5 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_nulp_diff, 1290, const_tuple_565527652c835353ad2b809796ba3ff4_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_0575d1336f90d94cc243cdfd51018eec = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_print_assert_equal, 319, const_tuple_str_plain_test_string_str_plain_actual_str_plain_desired_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_42cff4fac10b8caf56a7116e0ec57a0f = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_print_assert_equal, 319, const_tuple_d9c647ca269ce7d9546b6525c8617d06_tuple, 3, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_31e0e165074c7b7f129ad77cbef82e81 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_raises, 1003, const_tuple_str_plain_args_str_plain_kwargs_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_5b9a2fed1fecb39a60d749ee9336884c = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_raises, 1003, const_tuple_str_plain_args_str_plain_kwargs_str_plain_nose_tuple, 0, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_b5966a45a70511b281debcb7f92ae7a9 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_rand, 99, const_tuple_str_plain_args_tuple, 1, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_1648d1a7ed97ac5991f3975b8d841444 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_rand, 99, const_tuple_684cfe7337791d6bf1e3a2597e55be85_tuple, 0, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_bfa694d057c13d481638135282bea2ec = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_rundocs, 953, const_tuple_str_plain_filename_str_plain_raise_on_error_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_3c0ce4283d45e52104cb1f9dde267096 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_rundocs, 953, const_tuple_ce0bf5453b1ad206f1366a4802f9fdce_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_855792ac59e5258845f5e852af6680b0 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_runstring, 882, const_tuple_str_plain_astr_str_plain_dict_tuple, 2, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_ac0b1f483f349766b78aa66a82e987e5 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_runstring, 882, const_tuple_str_plain_astr_str_plain_dict_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_5a273d1a230dccfab02b6fd1e7218036 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_showwarning, 1441, const_tuple_str_plain_args_str_plain_kwargs_tuple, 2, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_0be72c483448a744e0788d9b9c16eb07 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_showwarning, 1441, const_tuple_str_plain_args_str_plain_kwargs_str_plain_log_tuple, 0, CO_NEWLOCALS | CO_OPTIMIZED | CO_VARARGS | CO_VARKEYWORDS | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_0a1ffb0eefff30e2fac8992a559ecc43 = MAKE_CODEOBJ( const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad, const_str_plain_utils, 0, const_tuple_empty, 0, CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
}

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_class_35_WarningMessage_of_module_numpy$testing$utils(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_36_WarningManager_of_module_numpy$testing$utils(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_40_IgnoreException_of_module_numpy$testing$utils(  );


NUITKA_CROSS_MODULE PyObject *impl_function_2_complex_call_helper_star_list_star_dict_of_module___internal__( PyObject *_python_par_called, PyObject *_python_par_star_arg_list, PyObject *_python_par_star_arg_dict );


static PyObject *MAKE_FUNCTION_function_10_GetPerformanceAttributes_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_11_memusage_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_12_build_err_msg_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_13_assert_equal_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_14_print_assert_equal_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_15_assert_almost_equal_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_16_assert_approx_equal_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_17_assert_array_compare_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_18_assert_array_equal_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_35_WarningMessage_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_36_WarningManager_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils( PyObjectSharedLocalVariable &closure_np );


// This structure is for attachment as self of function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils.
// It is allocated at the time the function object is created.
struct _context_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils_t
{
    // The function can access a read-only closure of the creator.
    PyObjectSharedLocalVariable closure_np;
};

static void _context_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils_destructor( void *context_voidptr )
{
    _context_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils_t *_python_context = (_context_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_assert__of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( PyObjectSharedLocalVariable &closure_around, PyObjectSharedLocalVariable &closure_decimal, PyObjectSharedLocalVariable &closure_float_, PyObjectSharedLocalVariable &closure_issubdtype, PyObjectSharedLocalVariable &closure_npany, PyObjectSharedLocalVariable &closure_number );


// This structure is for attachment as self of function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils.
// It is allocated at the time the function object is created.
struct _context_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils_t
{
    // The function can access a read-only closure of the creator.
    PyObjectSharedLocalVariable closure_around;
    PyObjectSharedLocalVariable closure_decimal;
    PyObjectSharedLocalVariable closure_float_;
    PyObjectSharedLocalVariable closure_issubdtype;
    PyObjectSharedLocalVariable closure_npany;
    PyObjectSharedLocalVariable closure_number;
};

static void _context_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils_destructor( void *context_voidptr )
{
    _context_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils_t *_python_context = (_context_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils( PyObjectSharedLocalVariable &closure_atol, PyObjectSharedLocalVariable &closure_np, PyObjectSharedLocalVariable &closure_rtol );


// This structure is for attachment as self of function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils.
// It is allocated at the time the function object is created.
struct _context_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils_t
{
    // The function can access a read-only closure of the creator.
    PyObjectSharedLocalVariable closure_atol;
    PyObjectSharedLocalVariable closure_np;
    PyObjectSharedLocalVariable closure_rtol;
};

static void _context_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils_destructor( void *context_voidptr )
{
    _context_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils_t *_python_context = (_context_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_isnumber_of_function_17_assert_array_compare_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils( PyObjectSharedLocalVariable &closure_log );


// This structure is for attachment as self of function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils.
// It is allocated at the time the function object is created.
struct _context_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils_t
{
    // The function can access a read-only closure of the creator.
    PyObjectSharedLocalVariable closure_log;
};

static void _context_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils_destructor( void *context_voidptr )
{
    _context_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils_t *_python_context = (_context_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_20_assert_array_less_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_21_runstring_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_22_assert_string_equal_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_23_rundocs_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_24_raises_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_25_assert_raises_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_26_decorate_methods_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_27_measure_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_28__assert_valid_refcount_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_29_assert_allclose_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_2___str___of_class_35_WarningMessage_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils( PyObject *defaults, PyObjectSharedLocalVariable &closure_err_msg, PyObjectSharedLocalVariable &closure_header, PyObjectSharedLocalVariable &closure_verbose, PyObjectSharedLocalVariable &closure_x, PyObjectSharedLocalVariable &closure_y );


// This structure is for attachment as self of function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils.
// It is allocated at the time the function object is created.
struct _context_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils_t
{
    // The function can access a read-only closure of the creator.
    PyObjectSharedLocalVariable closure_err_msg;
    PyObjectSharedLocalVariable closure_header;
    PyObjectSharedLocalVariable closure_verbose;
    PyObjectSharedLocalVariable closure_x;
    PyObjectSharedLocalVariable closure_y;
};

static void _context_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils_destructor( void *context_voidptr )
{
    _context_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils_t *_python_context = (_context_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_2_gisnan_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_30_assert_array_almost_equal_nulp_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_31_assert_array_max_ulp_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_32_nulp_diff_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_33__integer_repr_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_34_integer_repr_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_37_assert_warns_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_38_assert_no_warnings_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_39__gen_alignment_data_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_3___exit___of_class_36_WarningManager_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_3_gisfinite_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_4_gisinf_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_5_rand_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_function_6_jiffies_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_7_memusage_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_8_jiffies_of_module_numpy$testing$utils( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_9_memusage_of_module_numpy$testing$utils(  );


static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils( PyObjectSharedLocalVariable &closure_msg );


// This structure is for attachment as self of lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils.
// It is allocated at the time the function object is created.
struct _context_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils_t
{
    // The function can access a read-only closure of the creator.
    PyObjectSharedLocalVariable closure_msg;
};

static void _context_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils_destructor( void *context_voidptr )
{
    _context_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils_t *_python_context = (_context_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( PyObjectSharedLocalVariable &closure_dtype, PyObjectSharedLocalVariable &closure_o, PyObjectSharedLocalVariable &closure_s );


// This structure is for attachment as self of lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils.
// It is allocated at the time the function object is created.
struct _context_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t
{
    // The function can access a read-only closure of the creator.
    PyObjectSharedLocalVariable closure_dtype;
    PyObjectSharedLocalVariable closure_o;
    PyObjectSharedLocalVariable closure_s;
};

static void _context_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_destructor( void *context_voidptr )
{
    _context_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *_python_context = (_context_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( PyObjectSharedLocalVariable &closure_dtype, PyObjectSharedLocalVariable &closure_o, PyObjectSharedLocalVariable &closure_s );


// This structure is for attachment as self of lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils.
// It is allocated at the time the function object is created.
struct _context_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t
{
    // The function can access a read-only closure of the creator.
    PyObjectSharedLocalVariable closure_dtype;
    PyObjectSharedLocalVariable closure_o;
    PyObjectSharedLocalVariable closure_s;
};

static void _context_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_destructor( void *context_voidptr )
{
    _context_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *_python_context = (_context_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( PyObjectSharedLocalVariable &closure_dtype, PyObjectSharedLocalVariable &closure_o, PyObjectSharedLocalVariable &closure_s );


// This structure is for attachment as self of lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils.
// It is allocated at the time the function object is created.
struct _context_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t
{
    // The function can access a read-only closure of the creator.
    PyObjectSharedLocalVariable closure_dtype;
    PyObjectSharedLocalVariable closure_o;
    PyObjectSharedLocalVariable closure_s;
};

static void _context_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_destructor( void *context_voidptr )
{
    _context_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *_python_context = (_context_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *)context_voidptr;



    delete _python_context;
}


// The module function definitions.
static PyObject *impl_function_1_assert__of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_val, PyObject *_python_par_msg )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_val; par_val.object = _python_par_val;
    PyObjectLocalVariable par_msg; par_msg.object = _python_par_msg;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_72564683b8a7449521e21d2b0ef64eab, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_cond_value_1 = par_val.object;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28580 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 43;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 43;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_make_exception_arg_1 = par_msg.object;

    if ( tmp_make_exception_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 44;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 44;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 44;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 44;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_val,
            par_val.object
        );

    }
    if ((par_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_msg,
            par_msg.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1_assert__of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_val = NULL;
    PyObject *_python_par_msg = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "assert_() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_val == key )
            {
                assert( _python_par_val == NULL );
                _python_par_val = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_msg == key )
            {
                assert( _python_par_msg == NULL );
                _python_par_msg = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_val, key ) == 1 )
            {
                assert( _python_par_val == NULL );
                _python_par_val = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_msg, key ) == 1 )
            {
                assert( _python_par_msg == NULL );
                _python_par_msg = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "assert_() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_val != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_val = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_val == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_val = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_msg != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_msg = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_msg == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_msg = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_val == NULL || _python_par_msg == NULL ))
    {
        PyObject *values[] = { _python_par_val, _python_par_msg };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1_assert__of_module_numpy$testing$utils( self, _python_par_val, _python_par_msg );

error_exit:;

    Py_XDECREF( _python_par_val );
    Py_XDECREF( _python_par_msg );

    return NULL;
}

static PyObject *dparse_function_1_assert__of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_1_assert__of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_assert__of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_gisnan_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_x; par_x.object = _python_par_x;
    PyObjectLocalVariable var_isnan;
    PyObjectLocalVariable var_st;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    int tmp_res;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_1fe7ee61d28b8e32af545e906a40e6c9, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_isnan,
            var_isnan.object
        );

    }
    if ((var_st.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_st,
            var_st.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_x,
            par_x.object
        );

    }
    frame_function->f_lineno = 57;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_1, tmp_import_locals_1, const_tuple_str_plain_isnan_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 57;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_isnan );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 57;
        goto frame_exception_exit_1;
    }
    assert( var_isnan.object == NULL );
    var_isnan.object = tmp_assign_source_1;

    tmp_called_1 = var_isnan.object;

    tmp_call_arg_element_1 = par_x.object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 58;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 58;
    tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 58;
        goto frame_exception_exit_1;
    }
    assert( var_st.object == NULL );
    var_st.object = tmp_assign_source_2;

    tmp_isinstance_inst_1 = var_st.object;

    tmp_isinstance_cls_1 = (PyObject *)Py_TYPE( Py_NotImplemented );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 59;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_make_exception_arg_1 = const_str_digest_07059cc5a6281cbd180f0d258a57c2b0;
    frame_function->f_lineno = 60;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 60;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 60;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_isnan,
            var_isnan.object
        );

    }
    if ((var_st.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_st,
            var_st.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            par_x.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = var_st.object;

    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_2_gisnan_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "gisnan() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_x, key ) == 1 )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "gisnan() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL ))
    {
        PyObject *values[] = { _python_par_x };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2_gisnan_of_module_numpy$testing$utils( self, _python_par_x );

error_exit:;

    Py_XDECREF( _python_par_x );

    return NULL;
}

static PyObject *dparse_function_2_gisnan_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_2_gisnan_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_gisnan_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_gisfinite_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_x; par_x.object = _python_par_x;
    PyObjectLocalVariable var_isfinite;
    PyObjectLocalVariable var_errstate;
    PyObjectLocalVariable var_st;
    PyObjectTempVariable tmp_with_1__source;
    PyObjectTempVariable tmp_with_1__exit;
    PyObjectTempVariable tmp_with_1__enter;
    PyObjectTempVariable tmp_with_1__indicator;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_attr_source_1;
    PyObject *tmp_attr_source_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_locals_2;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    bool tmp_is_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    int tmp_res;
    PyObject *tmp_return_value;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_dadcb44a426fd72dbdebf0ea43886971, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_isfinite.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_isfinite,
            var_isfinite.object
        );

    }
    if ((var_errstate.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_errstate,
            var_errstate.object
        );

    }
    if ((var_st.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_st,
            var_st.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_x,
            par_x.object
        );

    }
    frame_function->f_lineno = 74;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_1, tmp_import_locals_1, const_tuple_str_plain_isfinite_str_plain_errstate_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 74;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_isfinite );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 74;
        goto frame_exception_exit_1;
    }
    assert( var_isfinite.object == NULL );
    var_isfinite.object = tmp_assign_source_1;

    tmp_import_globals_2 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_2 = PyDict_New();
    if ((var_isfinite.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_isfinite,
            var_isfinite.object
        );

    }
    if ((var_errstate.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_errstate,
            var_errstate.object
        );

    }
    if ((var_st.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_st,
            var_st.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_x,
            par_x.object
        );

    }
    frame_function->f_lineno = 74;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_2, tmp_import_locals_2, const_tuple_str_plain_isfinite_str_plain_errstate_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_2 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 74;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_errstate );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 74;
        goto frame_exception_exit_1;
    }
    assert( var_errstate.object == NULL );
    var_errstate.object = tmp_assign_source_2;

    // Tried code
    tmp_called_1 = var_errstate.object;

    tmp_call_kw_1 = PyDict_Copy( const_dict_d457aeaf5237c8e9bb82fdcc508844e3 );
    frame_function->f_lineno = 75;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_1, tmp_call_kw_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 75;
        goto try_finally_handler_1;
    }
    assert( tmp_with_1__source.object == NULL );
    tmp_with_1__source.object = tmp_assign_source_3;

    tmp_attr_source_1 = tmp_with_1__source.object;

    tmp_assign_source_4 = LOOKUP_SPECIAL( tmp_attr_source_1, const_str_plain___exit__ );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 75;
        goto try_finally_handler_1;
    }
    assert( tmp_with_1__exit.object == NULL );
    tmp_with_1__exit.object = tmp_assign_source_4;

    tmp_attr_source_2 = tmp_with_1__source.object;

    tmp_called_2 = LOOKUP_SPECIAL( tmp_attr_source_2, const_str_plain___enter__ );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 75;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 75;
    tmp_assign_source_5 = CALL_FUNCTION_NO_ARGS( tmp_called_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 75;
        goto try_finally_handler_1;
    }
    assert( tmp_with_1__enter.object == NULL );
    tmp_with_1__enter.object = tmp_assign_source_5;

    tmp_assign_source_6 = Py_True;
    assert( tmp_with_1__indicator.object == NULL );
    tmp_with_1__indicator.object = INCREASE_REFCOUNT( tmp_assign_source_6 );

    // Tried code
    // Tried block of try/except
    tmp_called_3 = var_isfinite.object;

    tmp_call_arg_element_1 = par_x.object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 76;
        goto try_except_handler_1;
    }

    frame_function->f_lineno = 76;
    tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 76;
        goto try_except_handler_1;
    }
    assert( var_st.object == NULL );
    var_st.object = tmp_assign_source_7;

    tmp_isinstance_inst_1 = var_st.object;

    tmp_isinstance_cls_1 = (PyObject *)Py_TYPE( Py_NotImplemented );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 77;
        goto try_except_handler_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_make_exception_arg_1 = const_str_digest_e65042100e7060625f0d06a26fd41cf8;
    frame_function->f_lineno = 78;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 78;
        goto try_except_handler_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 78;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_except_handler_1;
    branch_no_1:;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_BaseException;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );



        goto try_finally_handler_2;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_8 = Py_False;
    if (tmp_with_1__indicator.object == NULL)
    {
        tmp_with_1__indicator.object = INCREASE_REFCOUNT( tmp_assign_source_8 );
    }
    else
    {
        PyObject *old = tmp_with_1__indicator.object;
        tmp_with_1__indicator.object = INCREASE_REFCOUNT( tmp_assign_source_8 );
        Py_DECREF( old );
    }
    tmp_called_4 = tmp_with_1__exit.object;

    tmp_call_arg_element_2 = PyThreadState_GET()->exc_type;
    tmp_call_arg_element_3 = PyThreadState_GET()->exc_value;
    tmp_call_arg_element_4 = PyThreadState_GET()->exc_traceback;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_4, tmp_call_arg_element_2, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );



        goto try_finally_handler_2;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );


        goto try_finally_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_no_3;
    }
    else
    {
        goto branch_yes_3;
    }
    branch_yes_3:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_2;
    branch_no_3:;
    goto branch_end_2;
    branch_no_2:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_2;
    branch_end_2:;
    try_except_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    tmp_compare_left_2 = tmp_with_1__indicator.object;

    tmp_compare_right_2 = Py_True;
    tmp_is_1 = ( tmp_compare_left_2 == tmp_compare_right_2 );
    if (tmp_is_1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_5 = tmp_with_1__exit.object;

    tmp_call_arg_element_5 = Py_None;
    tmp_call_arg_element_6 = Py_None;
    tmp_call_arg_element_7 = Py_None;
    tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_5, tmp_call_arg_element_5, tmp_call_arg_element_6, tmp_call_arg_element_7 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );



        goto try_finally_handler_error_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_4:;
    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_1;
    }

    goto finally_end_1;
    try_finally_handler_error_1:;
    Py_XDECREF( exception_keeper_type_1 );exception_keeper_type_1 = NULL;
    Py_XDECREF( exception_keeper_value_1 );exception_keeper_value_1 = NULL;
    Py_XDECREF( exception_keeper_tb_1 );exception_keeper_tb_1 = NULL;
    goto try_finally_handler_1;
    finally_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_with_1__source.object );
    tmp_with_1__source.object = NULL;

    Py_XDECREF( tmp_with_1__enter.object );
    tmp_with_1__enter.object = NULL;

    Py_XDECREF( tmp_with_1__exit.object );
    tmp_with_1__exit.object = NULL;

    Py_XDECREF( tmp_with_1__indicator.object );
    tmp_with_1__indicator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto frame_exception_exit_1;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_return_value = var_st.object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 92138 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 79;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_isfinite.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_isfinite,
            var_isfinite.object
        );

    }
    if ((var_errstate.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_errstate,
            var_errstate.object
        );

    }
    if ((var_st.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_st,
            var_st.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            par_x.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_3_gisfinite_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "gisfinite() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_x, key ) == 1 )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "gisfinite() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL ))
    {
        PyObject *values[] = { _python_par_x };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_3_gisfinite_of_module_numpy$testing$utils( self, _python_par_x );

error_exit:;

    Py_XDECREF( _python_par_x );

    return NULL;
}

static PyObject *dparse_function_3_gisfinite_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_3_gisfinite_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_gisfinite_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_gisinf_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_x; par_x.object = _python_par_x;
    PyObjectLocalVariable var_isinf;
    PyObjectLocalVariable var_errstate;
    PyObjectLocalVariable var_st;
    PyObjectTempVariable tmp_with_1__source;
    PyObjectTempVariable tmp_with_1__exit;
    PyObjectTempVariable tmp_with_1__enter;
    PyObjectTempVariable tmp_with_1__indicator;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_attr_source_1;
    PyObject *tmp_attr_source_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_locals_2;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    bool tmp_is_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    int tmp_res;
    PyObject *tmp_return_value;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_397d46206022034eb0b5cb2d2a3d522f, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_isinf,
            var_isinf.object
        );

    }
    if ((var_errstate.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_errstate,
            var_errstate.object
        );

    }
    if ((var_st.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_st,
            var_st.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_x,
            par_x.object
        );

    }
    frame_function->f_lineno = 92;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_1, tmp_import_locals_1, const_tuple_str_plain_isinf_str_plain_errstate_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 92;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_isinf );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 92;
        goto frame_exception_exit_1;
    }
    assert( var_isinf.object == NULL );
    var_isinf.object = tmp_assign_source_1;

    tmp_import_globals_2 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_2 = PyDict_New();
    if ((var_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_isinf,
            var_isinf.object
        );

    }
    if ((var_errstate.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_errstate,
            var_errstate.object
        );

    }
    if ((var_st.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_st,
            var_st.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_x,
            par_x.object
        );

    }
    frame_function->f_lineno = 92;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_2, tmp_import_locals_2, const_tuple_str_plain_isinf_str_plain_errstate_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_2 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 92;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_errstate );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 92;
        goto frame_exception_exit_1;
    }
    assert( var_errstate.object == NULL );
    var_errstate.object = tmp_assign_source_2;

    // Tried code
    tmp_called_1 = var_errstate.object;

    tmp_call_kw_1 = PyDict_Copy( const_dict_d457aeaf5237c8e9bb82fdcc508844e3 );
    frame_function->f_lineno = 93;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_1, tmp_call_kw_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 93;
        goto try_finally_handler_1;
    }
    assert( tmp_with_1__source.object == NULL );
    tmp_with_1__source.object = tmp_assign_source_3;

    tmp_attr_source_1 = tmp_with_1__source.object;

    tmp_assign_source_4 = LOOKUP_SPECIAL( tmp_attr_source_1, const_str_plain___exit__ );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 93;
        goto try_finally_handler_1;
    }
    assert( tmp_with_1__exit.object == NULL );
    tmp_with_1__exit.object = tmp_assign_source_4;

    tmp_attr_source_2 = tmp_with_1__source.object;

    tmp_called_2 = LOOKUP_SPECIAL( tmp_attr_source_2, const_str_plain___enter__ );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 93;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 93;
    tmp_assign_source_5 = CALL_FUNCTION_NO_ARGS( tmp_called_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 93;
        goto try_finally_handler_1;
    }
    assert( tmp_with_1__enter.object == NULL );
    tmp_with_1__enter.object = tmp_assign_source_5;

    tmp_assign_source_6 = Py_True;
    assert( tmp_with_1__indicator.object == NULL );
    tmp_with_1__indicator.object = INCREASE_REFCOUNT( tmp_assign_source_6 );

    // Tried code
    // Tried block of try/except
    tmp_called_3 = var_isinf.object;

    tmp_call_arg_element_1 = par_x.object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 94;
        goto try_except_handler_1;
    }

    frame_function->f_lineno = 94;
    tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 94;
        goto try_except_handler_1;
    }
    assert( var_st.object == NULL );
    var_st.object = tmp_assign_source_7;

    tmp_isinstance_inst_1 = var_st.object;

    tmp_isinstance_cls_1 = (PyObject *)Py_TYPE( Py_NotImplemented );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 95;
        goto try_except_handler_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_make_exception_arg_1 = const_str_digest_2697ab5d65ed4cb1a4e3e6192186ee0d;
    frame_function->f_lineno = 96;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 96;
        goto try_except_handler_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 96;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_except_handler_1;
    branch_no_1:;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_BaseException;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );



        goto try_finally_handler_2;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_8 = Py_False;
    if (tmp_with_1__indicator.object == NULL)
    {
        tmp_with_1__indicator.object = INCREASE_REFCOUNT( tmp_assign_source_8 );
    }
    else
    {
        PyObject *old = tmp_with_1__indicator.object;
        tmp_with_1__indicator.object = INCREASE_REFCOUNT( tmp_assign_source_8 );
        Py_DECREF( old );
    }
    tmp_called_4 = tmp_with_1__exit.object;

    tmp_call_arg_element_2 = PyThreadState_GET()->exc_type;
    tmp_call_arg_element_3 = PyThreadState_GET()->exc_value;
    tmp_call_arg_element_4 = PyThreadState_GET()->exc_traceback;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_4, tmp_call_arg_element_2, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );



        goto try_finally_handler_2;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );


        goto try_finally_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_no_3;
    }
    else
    {
        goto branch_yes_3;
    }
    branch_yes_3:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_2;
    branch_no_3:;
    goto branch_end_2;
    branch_no_2:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_2;
    branch_end_2:;
    try_except_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    tmp_compare_left_2 = tmp_with_1__indicator.object;

    tmp_compare_right_2 = Py_True;
    tmp_is_1 = ( tmp_compare_left_2 == tmp_compare_right_2 );
    if (tmp_is_1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_5 = tmp_with_1__exit.object;

    tmp_call_arg_element_5 = Py_None;
    tmp_call_arg_element_6 = Py_None;
    tmp_call_arg_element_7 = Py_None;
    tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_5, tmp_call_arg_element_5, tmp_call_arg_element_6, tmp_call_arg_element_7 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );



        goto try_finally_handler_error_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_4:;
    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_1;
    }

    goto finally_end_1;
    try_finally_handler_error_1:;
    Py_XDECREF( exception_keeper_type_1 );exception_keeper_type_1 = NULL;
    Py_XDECREF( exception_keeper_value_1 );exception_keeper_value_1 = NULL;
    Py_XDECREF( exception_keeper_tb_1 );exception_keeper_tb_1 = NULL;
    goto try_finally_handler_1;
    finally_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_with_1__source.object );
    tmp_with_1__source.object = NULL;

    Py_XDECREF( tmp_with_1__enter.object );
    tmp_with_1__enter.object = NULL;

    Py_XDECREF( tmp_with_1__exit.object );
    tmp_with_1__exit.object = NULL;

    Py_XDECREF( tmp_with_1__indicator.object );
    tmp_with_1__indicator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto frame_exception_exit_1;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_return_value = var_st.object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 92138 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 97;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_isinf,
            var_isinf.object
        );

    }
    if ((var_errstate.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_errstate,
            var_errstate.object
        );

    }
    if ((var_st.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_st,
            var_st.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            par_x.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_4_gisinf_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "gisinf() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_x, key ) == 1 )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "gisinf() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL ))
    {
        PyObject *values[] = { _python_par_x };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_4_gisinf_of_module_numpy$testing$utils( self, _python_par_x );

error_exit:;

    Py_XDECREF( _python_par_x );

    return NULL;
}

static PyObject *dparse_function_4_gisinf_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_4_gisinf_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_gisinf_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_rand_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_args )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_args; par_args.object = _python_par_args;
    PyObjectLocalVariable var_random;
    PyObjectLocalVariable var_zeros;
    PyObjectLocalVariable var_float64;
    PyObjectLocalVariable var_results;
    PyObjectLocalVariable var_f;
    PyObjectLocalVariable var_i;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_locals_2;
    PyObject *tmp_import_locals_3;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_range_arg_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    int tmp_tried_lineno_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_b5966a45a70511b281debcb7f92ae7a9, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_random.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_random,
            var_random.object
        );

    }
    if ((var_zeros.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_zeros,
            var_zeros.object
        );

    }
    if ((var_float64.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_float64,
            var_float64.object
        );

    }
    if ((var_results.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_results,
            var_results.object
        );

    }
    if ((var_f.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_f,
            var_f.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((par_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_args,
            par_args.object
        );

    }
    frame_function->f_lineno = 104;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_random, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 104;
        goto frame_exception_exit_1;
    }
    assert( var_random.object == NULL );
    var_random.object = tmp_assign_source_1;

    tmp_import_globals_2 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_2 = PyDict_New();
    if ((var_random.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_random,
            var_random.object
        );

    }
    if ((var_zeros.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_zeros,
            var_zeros.object
        );

    }
    if ((var_float64.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_float64,
            var_float64.object
        );

    }
    if ((var_results.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_results,
            var_results.object
        );

    }
    if ((var_f.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_f,
            var_f.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((par_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_args,
            par_args.object
        );

    }
    frame_function->f_lineno = 105;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_2, tmp_import_locals_2, const_tuple_str_plain_zeros_str_plain_float64_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_2 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 105;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_zeros );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 105;
        goto frame_exception_exit_1;
    }
    assert( var_zeros.object == NULL );
    var_zeros.object = tmp_assign_source_2;

    tmp_import_globals_3 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_3 = PyDict_New();
    if ((var_random.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_random,
            var_random.object
        );

    }
    if ((var_zeros.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_zeros,
            var_zeros.object
        );

    }
    if ((var_float64.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_float64,
            var_float64.object
        );

    }
    if ((var_results.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_results,
            var_results.object
        );

    }
    if ((var_f.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_f,
            var_f.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((par_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_args,
            par_args.object
        );

    }
    frame_function->f_lineno = 105;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_3, tmp_import_locals_3, const_tuple_str_plain_zeros_str_plain_float64_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_3 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 105;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_float64 );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 105;
        goto frame_exception_exit_1;
    }
    assert( var_float64.object == NULL );
    var_float64.object = tmp_assign_source_3;

    tmp_called_1 = var_zeros.object;

    tmp_call_arg_element_1 = par_args.object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5435 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 106;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_2 = var_float64.object;

    frame_function->f_lineno = 106;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 106;
        goto frame_exception_exit_1;
    }
    assert( var_results.object == NULL );
    var_results.object = tmp_assign_source_4;

    tmp_source_name_1 = var_results.object;

    tmp_assign_source_5 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_flat );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 107;
        goto frame_exception_exit_1;
    }
    assert( var_f.object == NULL );
    var_f.object = tmp_assign_source_5;

    tmp_len_arg_1 = var_f.object;

    tmp_range_arg_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_range_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 108;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_1 = BUILTIN_RANGE( tmp_range_arg_1 );
    Py_DECREF( tmp_range_arg_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 108;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 108;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_6;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_7 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_7 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 108;
            goto try_finally_handler_1;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_7;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_7;
        Py_DECREF( old );
    }
    tmp_assign_source_8 = tmp_for_loop_1__iter_value.object;

    if (var_i.object == NULL)
    {
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_8 );
    }
    else
    {
        PyObject *old = var_i.object;
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_8 );
        Py_DECREF( old );
    }
    tmp_source_name_2 = var_random.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213536 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 109;
        goto try_finally_handler_1;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_random );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 109;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 109;
    tmp_ass_subvalue_1 = CALL_FUNCTION_NO_ARGS( tmp_called_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_ass_subvalue_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 109;
        goto try_finally_handler_1;
    }
    tmp_ass_subscribed_1 = var_f.object;

    if ( tmp_ass_subscribed_1 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6491 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 109;
        goto try_finally_handler_1;
    }

    tmp_ass_subscript_1 = var_i.object;

    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 109;
        goto try_finally_handler_1;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 108;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_return_value = var_results.object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 186161 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 110;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_random.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_random,
            var_random.object
        );

    }
    if ((var_zeros.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_zeros,
            var_zeros.object
        );

    }
    if ((var_float64.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_float64,
            var_float64.object
        );

    }
    if ((var_results.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_results,
            var_results.object
        );

    }
    if ((var_f.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_f,
            var_f.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((par_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_args,
            par_args.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_5_rand_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_args = NULL;
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "rand() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.

            // Slow path, compare against all parameter names.


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "rand() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 0 )
    {
        _python_par_args = PyTuple_New( args_size - 0 );

        for( Py_ssize_t i = 0; i < args_size - 0; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[0+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( const_tuple_empty );
    }


    return impl_function_5_rand_of_module_numpy$testing$utils( self, _python_par_args );

error_exit:;

    Py_XDECREF( _python_par_args );

    return NULL;
}

static PyObject *dparse_function_5_rand_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_5_rand_of_module_numpy$testing$utils( self, MAKE_TUPLE( &args[ 0 ], size > 0 ? size-0 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_function_5_rand_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_jiffies_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par__proc_pid_stat, PyObject *_python_par__load_time )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par__proc_pid_stat; par__proc_pid_stat.object = _python_par__proc_pid_stat;
    PyObjectLocalVariable par__load_time; par__load_time.object = _python_par__load_time;
    PyObjectLocalVariable var_time;
    PyObjectLocalVariable var_f;
    PyObjectLocalVariable var_l;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_int_arg_1;
    PyObject *tmp_int_arg_2;
    PyObject *tmp_open_filename_1;
    PyObject *tmp_open_mode_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_subscript_2;
    PyObject *tmp_subscr_target_1;
    PyObject *tmp_subscr_target_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_e2a960abbef8a452a85561053219fadc, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_time.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_time,
            var_time.object
        );

    }
    if ((var_f.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_f,
            var_f.object
        );

    }
    if ((var_l.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_l,
            var_l.object
        );

    }
    if ((par__proc_pid_stat.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain__proc_pid_stat,
            par__proc_pid_stat.object
        );

    }
    if ((par__load_time.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain__load_time,
            par__load_time.object
        );

    }
    frame_function->f_lineno = 117;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_time, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 117;
        goto frame_exception_exit_1;
    }
    assert( var_time.object == NULL );
    var_time.object = tmp_assign_source_1;

    tmp_cond_value_1 = par__load_time.object;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213588 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 118;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 118;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = par__load_time.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213588 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 119;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_append );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 119;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = var_time.object;

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_time );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 119;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 119;
    tmp_call_arg_element_1 = CALL_FUNCTION_NO_ARGS( tmp_called_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 119;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 119;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 119;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_1:;
    // Tried block of try/except
    tmp_open_filename_1 = par__proc_pid_stat.object;

    if ( tmp_open_filename_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213644 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 121;
        goto try_except_handler_1;
    }

    tmp_open_mode_1 = const_str_plain_r;
    tmp_assign_source_2 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 121;
        goto try_except_handler_1;
    }
    assert( var_f.object == NULL );
    var_f.object = tmp_assign_source_2;

    tmp_source_name_4 = var_f.object;

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_readline );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 122;
        goto try_except_handler_1;
    }
    frame_function->f_lineno = 122;
    tmp_source_name_3 = CALL_FUNCTION_NO_ARGS( tmp_called_4 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 122;
        goto try_except_handler_1;
    }
    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_split );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 122;
        goto try_except_handler_1;
    }
    tmp_call_arg_element_2 = const_str_space;
    frame_function->f_lineno = 122;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 122;
        goto try_except_handler_1;
    }
    assert( var_l.object == NULL );
    var_l.object = tmp_assign_source_3;

    tmp_source_name_5 = var_f.object;

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_close );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 123;
        goto try_except_handler_1;
    }
    frame_function->f_lineno = 123;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_5 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 123;
        goto try_except_handler_1;
    }
    Py_DECREF( tmp_unused );
    tmp_subscr_target_1 = var_l.object;

    tmp_subscr_subscript_1 = const_int_pos_13;
    tmp_int_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_int_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 124;
        goto try_except_handler_1;
    }
    tmp_return_value = PyNumber_Int( tmp_int_arg_1 );
    Py_DECREF( tmp_int_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 124;
        goto try_except_handler_1;
    }
    goto frame_return_exit_1;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_binop_left_1 = const_int_pos_100;
    tmp_source_name_6 = var_time.object;

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 26353 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 126;
        goto frame_exception_exit_1;
    }

    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_time );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 126;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 126;
    tmp_binop_left_2 = CALL_FUNCTION_NO_ARGS( tmp_called_6 );
    Py_DECREF( tmp_called_6 );
    if ( tmp_binop_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 126;
        goto frame_exception_exit_1;
    }
    tmp_subscr_target_2 = par__load_time.object;

    if ( tmp_subscr_target_2 == NULL )
    {
        Py_DECREF( tmp_binop_left_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213588 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 126;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_2 = const_int_0;
    tmp_binop_right_2 = LOOKUP_SUBSCRIPT( tmp_subscr_target_2, tmp_subscr_subscript_2 );
    if ( tmp_binop_right_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_2 );

        frame_function->f_lineno = 126;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_1 = BINARY_OPERATION_SUB( tmp_binop_left_2, tmp_binop_right_2 );
    Py_DECREF( tmp_binop_left_2 );
    Py_DECREF( tmp_binop_right_2 );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 126;
        goto frame_exception_exit_1;
    }
    tmp_int_arg_2 = BINARY_OPERATION_MUL( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_int_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 126;
        goto frame_exception_exit_1;
    }
    tmp_return_value = PyNumber_Int( tmp_int_arg_2 );
    Py_DECREF( tmp_int_arg_2 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 126;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    try_except_end_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_time.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_time,
            var_time.object
        );

    }
    if ((var_f.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_f,
            var_f.object
        );

    }
    if ((var_l.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_l,
            var_l.object
        );

    }
    if ((par__proc_pid_stat.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__proc_pid_stat,
            par__proc_pid_stat.object
        );

    }
    if ((par__load_time.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__load_time,
            par__load_time.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_6_jiffies_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par__proc_pid_stat = NULL;
    PyObject *_python_par__load_time = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "jiffies() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain__proc_pid_stat == key )
            {
                assert( _python_par__proc_pid_stat == NULL );
                _python_par__proc_pid_stat = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain__load_time == key )
            {
                assert( _python_par__load_time == NULL );
                _python_par__load_time = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain__proc_pid_stat, key ) == 1 )
            {
                assert( _python_par__proc_pid_stat == NULL );
                _python_par__proc_pid_stat = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain__load_time, key ) == 1 )
            {
                assert( _python_par__load_time == NULL );
                _python_par__load_time = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "jiffies() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par__proc_pid_stat != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par__proc_pid_stat = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par__proc_pid_stat == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par__proc_pid_stat = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par__load_time != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par__load_time = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par__load_time == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par__load_time = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par__proc_pid_stat == NULL || _python_par__load_time == NULL ))
    {
        PyObject *values[] = { _python_par__proc_pid_stat, _python_par__load_time };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_6_jiffies_of_module_numpy$testing$utils( self, _python_par__proc_pid_stat, _python_par__load_time );

error_exit:;

    Py_XDECREF( _python_par__proc_pid_stat );
    Py_XDECREF( _python_par__load_time );

    return NULL;
}

static PyObject *dparse_function_6_jiffies_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_6_jiffies_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_jiffies_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_memusage_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par__proc_pid_stat )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par__proc_pid_stat; par__proc_pid_stat.object = _python_par__proc_pid_stat;
    PyObjectLocalVariable var_f;
    PyObjectLocalVariable var_l;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_int_arg_1;
    PyObject *tmp_open_filename_1;
    PyObject *tmp_open_mode_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_daa57b1408736042c837c217a83bc1eb, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried block of try/except
    tmp_open_filename_1 = par__proc_pid_stat.object;

    if ( tmp_open_filename_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213644 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 132;
        goto try_except_handler_1;
    }

    tmp_open_mode_1 = const_str_plain_r;
    tmp_assign_source_1 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 132;
        goto try_except_handler_1;
    }
    assert( var_f.object == NULL );
    var_f.object = tmp_assign_source_1;

    tmp_source_name_2 = var_f.object;

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_readline );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 133;
        goto try_except_handler_1;
    }
    frame_function->f_lineno = 133;
    tmp_source_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 133;
        goto try_except_handler_1;
    }
    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_split );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 133;
        goto try_except_handler_1;
    }
    tmp_call_arg_element_1 = const_str_space;
    frame_function->f_lineno = 133;
    tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 133;
        goto try_except_handler_1;
    }
    assert( var_l.object == NULL );
    var_l.object = tmp_assign_source_2;

    tmp_source_name_3 = var_f.object;

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_close );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 134;
        goto try_except_handler_1;
    }
    frame_function->f_lineno = 134;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_3 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 134;
        goto try_except_handler_1;
    }
    Py_DECREF( tmp_unused );
    tmp_subscr_target_1 = var_l.object;

    tmp_subscr_subscript_1 = const_int_pos_22;
    tmp_int_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_int_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 135;
        goto try_except_handler_1;
    }
    tmp_return_value = PyNumber_Int( tmp_int_arg_1 );
    Py_DECREF( tmp_int_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 135;
        goto try_except_handler_1;
    }
    goto frame_return_exit_1;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    try_except_end_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_7_memusage_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par__proc_pid_stat = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "memusage() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain__proc_pid_stat == key )
            {
                assert( _python_par__proc_pid_stat == NULL );
                _python_par__proc_pid_stat = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain__proc_pid_stat, key ) == 1 )
            {
                assert( _python_par__proc_pid_stat == NULL );
                _python_par__proc_pid_stat = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "memusage() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par__proc_pid_stat != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par__proc_pid_stat = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par__proc_pid_stat == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par__proc_pid_stat = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par__proc_pid_stat == NULL ))
    {
        PyObject *values[] = { _python_par__proc_pid_stat };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_7_memusage_of_module_numpy$testing$utils( self, _python_par__proc_pid_stat );

error_exit:;

    Py_XDECREF( _python_par__proc_pid_stat );

    return NULL;
}

static PyObject *dparse_function_7_memusage_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_7_memusage_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_memusage_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_jiffies_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par__load_time )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par__load_time; par__load_time.object = _python_par__load_time;
    PyObjectLocalVariable var_time;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_int_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_8a9904a3e06c3378c37f079a862811d7, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_time.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_time,
            var_time.object
        );

    }
    if ((par__load_time.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain__load_time,
            par__load_time.object
        );

    }
    frame_function->f_lineno = 145;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_time, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 145;
        goto frame_exception_exit_1;
    }
    assert( var_time.object == NULL );
    var_time.object = tmp_assign_source_1;

    tmp_cond_value_1 = par__load_time.object;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213588 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 146;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 146;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = par__load_time.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213588 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 147;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_append );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 147;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = var_time.object;

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_time );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 147;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 147;
    tmp_call_arg_element_1 = CALL_FUNCTION_NO_ARGS( tmp_called_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 147;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 147;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 147;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_1:;
    tmp_binop_left_1 = const_int_pos_100;
    tmp_source_name_3 = var_time.object;

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_time );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 148;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 148;
    tmp_binop_left_2 = CALL_FUNCTION_NO_ARGS( tmp_called_3 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_binop_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 148;
        goto frame_exception_exit_1;
    }
    tmp_subscr_target_1 = par__load_time.object;

    if ( tmp_subscr_target_1 == NULL )
    {
        Py_DECREF( tmp_binop_left_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213588 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 148;
        goto frame_exception_exit_1;
    }

    tmp_subscr_subscript_1 = const_int_0;
    tmp_binop_right_2 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_binop_right_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_2 );

        frame_function->f_lineno = 148;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_1 = BINARY_OPERATION_SUB( tmp_binop_left_2, tmp_binop_right_2 );
    Py_DECREF( tmp_binop_left_2 );
    Py_DECREF( tmp_binop_right_2 );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 148;
        goto frame_exception_exit_1;
    }
    tmp_int_arg_1 = BINARY_OPERATION_MUL( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_int_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 148;
        goto frame_exception_exit_1;
    }
    tmp_return_value = PyNumber_Int( tmp_int_arg_1 );
    Py_DECREF( tmp_int_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 148;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_time.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_time,
            var_time.object
        );

    }
    if ((par__load_time.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__load_time,
            par__load_time.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_8_jiffies_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par__load_time = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "jiffies() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain__load_time == key )
            {
                assert( _python_par__load_time == NULL );
                _python_par__load_time = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain__load_time, key ) == 1 )
            {
                assert( _python_par__load_time == NULL );
                _python_par__load_time = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "jiffies() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par__load_time != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par__load_time = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par__load_time == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par__load_time = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par__load_time == NULL ))
    {
        PyObject *values[] = { _python_par__load_time };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_8_jiffies_of_module_numpy$testing$utils( self, _python_par__load_time );

error_exit:;

    Py_XDECREF( _python_par__load_time );

    return NULL;
}

static PyObject *dparse_function_8_jiffies_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_8_jiffies_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_jiffies_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9_memusage_of_module_numpy$testing$utils( Nuitka_FunctionObject *self )
{
    // No context is used.

    // Local variable declarations.
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_frame_locals;
    PyObject *tmp_raise_type_1;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_04bf0024e2de59b1c418c173e8e5a1d1, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_raise_type_1 = PyExc_NotImplementedError;
    exception_type = INCREASE_REFCOUNT( tmp_raise_type_1 );
    frame_function->f_lineno = 151;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;

}
static PyObject *fparse_function_9_memusage_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;

    if (unlikely( args_given + kw_size > 0 ))
    {
#if PYTHON_VERSION < 330
        ERROR_NO_ARGUMENTS_ALLOWED(
           self,
           args_given + kw_size
        );
#else
        ERROR_NO_ARGUMENTS_ALLOWED(
           self,
           kw_size > 0 ? kw : NULL,
           args_given
        );
#endif

        goto error_exit;
    }


    return impl_function_9_memusage_of_module_numpy$testing$utils( self );

error_exit:;


    return NULL;
}

static PyObject *dparse_function_9_memusage_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 0 )
    {
        return impl_function_9_memusage_of_module_numpy$testing$utils( self );
    }
    else
    {
        PyObject *result = fparse_function_9_memusage_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_10_GetPerformanceAttributes_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_object, PyObject *_python_par_counter, PyObject *_python_par_instance, PyObject *_python_par_inum, PyObject *_python_par_format, PyObject *_python_par_machine )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_object; par_object.object = _python_par_object;
    PyObjectLocalVariable par_counter; par_counter.object = _python_par_counter;
    PyObjectLocalVariable par_instance; par_instance.object = _python_par_instance;
    PyObjectLocalVariable par_inum; par_inum.object = _python_par_inum;
    PyObjectLocalVariable par_format; par_format.object = _python_par_format;
    PyObjectLocalVariable par_machine; par_machine.object = _python_par_machine;
    PyObjectLocalVariable var_win32pdh;
    PyObjectLocalVariable var_path;
    PyObjectLocalVariable var_hq;
    PyObjectLocalVariable var_hc;
    PyObjectLocalVariable var_type;
    PyObjectLocalVariable var_val;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    bool tmp_is_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iterator_attempt_1;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_9523c3aaf9bb5bc4758db15bcf63285f, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_win32pdh.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_win32pdh,
            var_win32pdh.object
        );

    }
    if ((var_path.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_path,
            var_path.object
        );

    }
    if ((var_hq.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_hq,
            var_hq.object
        );

    }
    if ((var_hc.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_hc,
            var_hc.object
        );

    }
    if ((var_type.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_type,
            var_type.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((par_object.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_object,
            par_object.object
        );

    }
    if ((par_counter.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_counter,
            par_counter.object
        );

    }
    if ((par_instance.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_instance,
            par_instance.object
        );

    }
    if ((par_inum.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_inum,
            par_inum.object
        );

    }
    if ((par_format.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_format,
            par_format.object
        );

    }
    if ((par_machine.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_machine,
            par_machine.object
        );

    }
    frame_function->f_lineno = 165;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_win32pdh, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 165;
        goto frame_exception_exit_1;
    }
    assert( var_win32pdh.object == NULL );
    var_win32pdh.object = tmp_assign_source_1;

    tmp_compare_left_1 = par_format.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6408 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 166;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if (tmp_is_1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = var_win32pdh.object;

    tmp_assign_source_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_PDH_FMT_LONG );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 166;
        goto frame_exception_exit_1;
    }
    if (par_format.object == NULL)
    {
        par_format.object = tmp_assign_source_2;
    }
    else
    {
        PyObject *old = par_format.object;
        par_format.object = tmp_assign_source_2;
        Py_DECREF( old );
    }
    branch_no_1:;
    tmp_source_name_2 = var_win32pdh.object;

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_MakeCounterPath );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 167;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = PyTuple_New( 6 );
    tmp_tuple_element_1 = par_machine.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_arg_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213704 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 167;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_arg_element_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_object.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_arg_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25332 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 167;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_arg_element_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_instance.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_arg_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213757 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 167;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_arg_element_1, 2, tmp_tuple_element_1 );
    tmp_tuple_element_1 = Py_None;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_arg_element_1, 3, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_inum.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_arg_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213811 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 167;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_arg_element_1, 4, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_counter.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_arg_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 125933 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 167;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_arg_element_1, 5, tmp_tuple_element_1 );
    frame_function->f_lineno = 167;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 167;
        goto frame_exception_exit_1;
    }
    assert( var_path.object == NULL );
    var_path.object = tmp_assign_source_3;

    tmp_source_name_3 = var_win32pdh.object;

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_OpenQuery );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 168;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 168;
    tmp_assign_source_4 = CALL_FUNCTION_NO_ARGS( tmp_called_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 168;
        goto frame_exception_exit_1;
    }
    assert( var_hq.object == NULL );
    var_hq.object = tmp_assign_source_4;

    // Tried code
    tmp_source_name_4 = var_win32pdh.object;

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_AddCounter );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 170;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_2 = var_hq.object;

    tmp_call_arg_element_3 = var_path.object;

    frame_function->f_lineno = 170;
    tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_3, tmp_call_arg_element_2, tmp_call_arg_element_3 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 170;
        goto try_finally_handler_1;
    }
    assert( var_hc.object == NULL );
    var_hc.object = tmp_assign_source_5;

    // Tried code
    tmp_source_name_5 = var_win32pdh.object;

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_CollectQueryData );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 172;
        goto try_finally_handler_2;
    }
    tmp_call_arg_element_4 = var_hq.object;

    frame_function->f_lineno = 172;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 172;
        goto try_finally_handler_2;
    }
    Py_DECREF( tmp_unused );
    // Tried code
    tmp_source_name_6 = var_win32pdh.object;

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_GetFormattedCounterValue );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 173;
        goto try_finally_handler_3;
    }
    tmp_call_arg_element_5 = var_hc.object;

    tmp_call_arg_element_6 = par_format.object;

    if ( tmp_call_arg_element_6 == NULL )
    {
        Py_DECREF( tmp_called_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6408 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 173;
        goto try_finally_handler_3;
    }

    frame_function->f_lineno = 173;
    tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_5, tmp_call_arg_element_5, tmp_call_arg_element_6 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 173;
        goto try_finally_handler_3;
    }
    tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 173;
        goto try_finally_handler_3;
    }
    assert( tmp_tuple_unpack_1__source_iter.object == NULL );
    tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_6;

    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_7 = UNPACK_PARAMETER_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_7 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 173;
        goto try_finally_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_1.object == NULL );
    tmp_tuple_unpack_1__element_1.object = tmp_assign_source_7;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_8 = UNPACK_PARAMETER_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_8 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 173;
        goto try_finally_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_2.object == NULL );
    tmp_tuple_unpack_1__element_2.object = tmp_assign_source_8;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_1 ); assert( PyIter_Check( tmp_iterator_name_1 ) );

    tmp_iterator_attempt_1 = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt_1 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_3;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_1 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_3;
    }
    tmp_assign_source_9 = tmp_tuple_unpack_1__element_1.object;

    assert( var_type.object == NULL );
    var_type.object = INCREASE_REFCOUNT( tmp_assign_source_9 );

    tmp_assign_source_10 = tmp_tuple_unpack_1__element_2.object;

    assert( var_val.object == NULL );
    var_val.object = INCREASE_REFCOUNT( tmp_assign_source_10 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter.object );
    tmp_tuple_unpack_1__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1.object );
    tmp_tuple_unpack_1__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2.object );
    tmp_tuple_unpack_1__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_2;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_return_value = var_val.object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28580 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 174;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_return_value );
    goto try_finally_handler_start_2;
    try_finally_handler_start_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    tmp_source_name_7 = var_win32pdh.object;

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213861 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 176;
        goto try_finally_handler_error_1;
    }

    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_RemoveCounter );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 176;
        goto try_finally_handler_error_1;
    }
    tmp_call_arg_element_7 = var_hc.object;

    if ( tmp_call_arg_element_7 == NULL )
    {
        Py_DECREF( tmp_called_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213915 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 176;
        goto try_finally_handler_error_1;
    }

    frame_function->f_lineno = 176;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_7 );
    Py_DECREF( tmp_called_6 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 176;
        goto try_finally_handler_error_1;
    }
    Py_DECREF( tmp_unused );
    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_1;
    }

    // Return value if any.
    if ( tmp_return_value != NULL )
    {
        goto try_finally_handler_start_1;
    }

    goto finally_end_2;
    try_finally_handler_error_1:;
    Py_XDECREF( exception_keeper_type_2 );exception_keeper_type_2 = NULL;
    Py_XDECREF( exception_keeper_value_2 );exception_keeper_value_2 = NULL;
    Py_XDECREF( exception_keeper_tb_2 );exception_keeper_tb_2 = NULL;
    goto try_finally_handler_1;
    finally_end_2:;
    try_finally_handler_start_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    tmp_source_name_8 = var_win32pdh.object;

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213861 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 178;
        goto try_finally_handler_error_2;
    }

    tmp_called_7 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_CloseQuery );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 178;
        goto try_finally_handler_error_2;
    }
    tmp_call_arg_element_8 = var_hq.object;

    if ( tmp_call_arg_element_8 == NULL )
    {
        Py_DECREF( tmp_called_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213963 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 178;
        goto try_finally_handler_error_2;
    }

    frame_function->f_lineno = 178;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_8 );
    Py_DECREF( tmp_called_7 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 178;
        goto try_finally_handler_error_2;
    }
    Py_DECREF( tmp_unused );
    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto frame_exception_exit_1;
    }

    // Return value if any.
    if ( tmp_return_value != NULL )
    {
        goto frame_return_exit_1;
    }

    goto finally_end_3;
    try_finally_handler_error_2:;
    Py_XDECREF( exception_keeper_type_3 );exception_keeper_type_3 = NULL;
    Py_XDECREF( exception_keeper_value_3 );exception_keeper_value_3 = NULL;
    Py_XDECREF( exception_keeper_tb_3 );exception_keeper_tb_3 = NULL;
    goto frame_exception_exit_1;
    finally_end_3:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_win32pdh.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_win32pdh,
            var_win32pdh.object
        );

    }
    if ((var_path.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_path,
            var_path.object
        );

    }
    if ((var_hq.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_hq,
            var_hq.object
        );

    }
    if ((var_hc.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_hc,
            var_hc.object
        );

    }
    if ((var_type.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_type,
            var_type.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((par_object.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_object,
            par_object.object
        );

    }
    if ((par_counter.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_counter,
            par_counter.object
        );

    }
    if ((par_instance.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_instance,
            par_instance.object
        );

    }
    if ((par_inum.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_inum,
            par_inum.object
        );

    }
    if ((par_format.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_format,
            par_format.object
        );

    }
    if ((par_machine.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_machine,
            par_machine.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_10_GetPerformanceAttributes_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_object = NULL;
    PyObject *_python_par_counter = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_inum = NULL;
    PyObject *_python_par_format = NULL;
    PyObject *_python_par_machine = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "GetPerformanceAttributes() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_object == key )
            {
                assert( _python_par_object == NULL );
                _python_par_object = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_counter == key )
            {
                assert( _python_par_counter == NULL );
                _python_par_counter = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_instance == key )
            {
                assert( _python_par_instance == NULL );
                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_inum == key )
            {
                assert( _python_par_inum == NULL );
                _python_par_inum = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_format == key )
            {
                assert( _python_par_format == NULL );
                _python_par_format = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_machine == key )
            {
                assert( _python_par_machine == NULL );
                _python_par_machine = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_object, key ) == 1 )
            {
                assert( _python_par_object == NULL );
                _python_par_object = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_counter, key ) == 1 )
            {
                assert( _python_par_counter == NULL );
                _python_par_counter = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_instance, key ) == 1 )
            {
                assert( _python_par_instance == NULL );
                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_inum, key ) == 1 )
            {
                assert( _python_par_inum == NULL );
                _python_par_inum = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_format, key ) == 1 )
            {
                assert( _python_par_format == NULL );
                _python_par_format = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_machine, key ) == 1 )
            {
                assert( _python_par_machine == NULL );
                _python_par_machine = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "GetPerformanceAttributes() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 6 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_object != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_object = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_object == NULL )
    {
        if ( 0 + self->m_defaults_given >= 6  )
        {
            _python_par_object = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_counter != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_counter = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_counter == NULL )
    {
        if ( 1 + self->m_defaults_given >= 6  )
        {
            _python_par_counter = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_instance == NULL )
    {
        if ( 2 + self->m_defaults_given >= 6  )
        {
            _python_par_instance = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_inum != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_inum = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_inum == NULL )
    {
        if ( 3 + self->m_defaults_given >= 6  )
        {
            _python_par_inum = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 4 < args_given ))
    {
         if (unlikely( _python_par_format != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 4 );
             goto error_exit;
         }

        _python_par_format = INCREASE_REFCOUNT( args[ 4 ] );
    }
    else if ( _python_par_format == NULL )
    {
        if ( 4 + self->m_defaults_given >= 6  )
        {
            _python_par_format = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 4 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 5 < args_given ))
    {
         if (unlikely( _python_par_machine != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 5 );
             goto error_exit;
         }

        _python_par_machine = INCREASE_REFCOUNT( args[ 5 ] );
    }
    else if ( _python_par_machine == NULL )
    {
        if ( 5 + self->m_defaults_given >= 6  )
        {
            _python_par_machine = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 5 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_object == NULL || _python_par_counter == NULL || _python_par_instance == NULL || _python_par_inum == NULL || _python_par_format == NULL || _python_par_machine == NULL ))
    {
        PyObject *values[] = { _python_par_object, _python_par_counter, _python_par_instance, _python_par_inum, _python_par_format, _python_par_machine };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_10_GetPerformanceAttributes_of_module_numpy$testing$utils( self, _python_par_object, _python_par_counter, _python_par_instance, _python_par_inum, _python_par_format, _python_par_machine );

error_exit:;

    Py_XDECREF( _python_par_object );
    Py_XDECREF( _python_par_counter );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_inum );
    Py_XDECREF( _python_par_format );
    Py_XDECREF( _python_par_machine );

    return NULL;
}

static PyObject *dparse_function_10_GetPerformanceAttributes_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6 )
    {
        return impl_function_10_GetPerformanceAttributes_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_10_GetPerformanceAttributes_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_11_memusage_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_processName, PyObject *_python_par_instance )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_processName; par_processName.object = _python_par_processName;
    PyObjectLocalVariable par_instance; par_instance.object = _python_par_instance;
    PyObjectLocalVariable var_win32pdh;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_44c17a35799febd3f790ee0ea7c6f824, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_win32pdh.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_win32pdh,
            var_win32pdh.object
        );

    }
    if ((par_processName.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_processName,
            par_processName.object
        );

    }
    if ((par_instance.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_instance,
            par_instance.object
        );

    }
    frame_function->f_lineno = 182;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_win32pdh, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 182;
        goto frame_exception_exit_1;
    }
    assert( var_win32pdh.object == NULL );
    var_win32pdh.object = tmp_assign_source_1;

    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_GetPerformanceAttributes );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GetPerformanceAttributes );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214011 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 183;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = const_str_plain_Process;
    tmp_call_arg_element_2 = const_str_digest_0b6b36f18d2504ba79e948cc1c5fa89d;
    tmp_call_arg_element_3 = par_processName.object;

    if ( tmp_call_arg_element_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214064 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 184;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_4 = par_instance.object;

    if ( tmp_call_arg_element_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213757 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 184;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = var_win32pdh.object;

    tmp_call_arg_element_5 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_PDH_FMT_LONG );
    if ( tmp_call_arg_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 185;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_6 = Py_None;
    frame_function->f_lineno = 185;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS6( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3, tmp_call_arg_element_4, tmp_call_arg_element_5, tmp_call_arg_element_6 );
    Py_DECREF( tmp_call_arg_element_5 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 185;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_win32pdh.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_win32pdh,
            var_win32pdh.object
        );

    }
    if ((par_processName.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_processName,
            par_processName.object
        );

    }
    if ((par_instance.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_instance,
            par_instance.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_11_memusage_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_processName = NULL;
    PyObject *_python_par_instance = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "memusage() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_processName == key )
            {
                assert( _python_par_processName == NULL );
                _python_par_processName = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_instance == key )
            {
                assert( _python_par_instance == NULL );
                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_processName, key ) == 1 )
            {
                assert( _python_par_processName == NULL );
                _python_par_processName = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_instance, key ) == 1 )
            {
                assert( _python_par_instance == NULL );
                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "memusage() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_processName != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_processName = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_processName == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_processName = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_instance == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_instance = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_processName == NULL || _python_par_instance == NULL ))
    {
        PyObject *values[] = { _python_par_processName, _python_par_instance };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_11_memusage_of_module_numpy$testing$utils( self, _python_par_processName, _python_par_instance );

error_exit:;

    Py_XDECREF( _python_par_processName );
    Py_XDECREF( _python_par_instance );

    return NULL;
}

static PyObject *dparse_function_11_memusage_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_11_memusage_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_11_memusage_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_12_build_err_msg_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_arrays, PyObject *_python_par_err_msg, PyObject *_python_par_header, PyObject *_python_par_verbose, PyObject *_python_par_names )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_arrays; par_arrays.object = _python_par_arrays;
    PyObjectLocalVariable par_err_msg; par_err_msg.object = _python_par_err_msg;
    PyObjectLocalVariable par_header; par_header.object = _python_par_header;
    PyObjectLocalVariable par_verbose; par_verbose.object = _python_par_verbose;
    PyObjectLocalVariable par_names; par_names.object = _python_par_names;
    PyObjectLocalVariable var_msg;
    PyObjectLocalVariable var_i;
    PyObjectLocalVariable var_a;
    PyObjectLocalVariable var_r;
    PyObjectTempVariable tmp_and_1__value_1;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_inplace_assign_1__inplace_start;
    PyObjectTempVariable tmp_inplace_assign_1__inplace_end;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_left_3;
    PyObject *tmp_binop_left_4;
    PyObject *tmp_binop_left_5;
    PyObject *tmp_binop_left_6;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_binop_right_3;
    PyObject *tmp_binop_right_4;
    PyObject *tmp_binop_right_5;
    PyObject *tmp_binop_right_6;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    int tmp_cmp_Gt_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_frame_locals;
    bool tmp_isnot_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iterator_attempt_1;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_list_element_1;
    PyObject *tmp_list_element_2;
    PyObject *tmp_next_source_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    Py_ssize_t tmp_slice_index_upper_1;
    PyObject *tmp_slice_source_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_subscript_2;
    PyObject *tmp_subscr_target_1;
    PyObject *tmp_subscr_target_2;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    int tmp_tried_lineno_4;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_unary_arg_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_9da87ace31c4d28b55ae8e7bb301f79f, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_assign_source_1 = PyList_New( 1 );
    tmp_binop_left_1 = const_str_newline;
    tmp_binop_right_1 = par_header.object;

    if ( tmp_binop_right_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 645 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 190;
        goto frame_exception_exit_1;
    }

    tmp_list_element_1 = BINARY_OPERATION_ADD( tmp_binop_left_1, tmp_binop_right_1 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_1 );

        frame_function->f_lineno = 190;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_1, 0, tmp_list_element_1 );
    assert( var_msg.object == NULL );
    var_msg.object = tmp_assign_source_1;

    tmp_cond_value_1 = par_err_msg.object;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 191;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 191;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    // Tried code
    tmp_cond_value_2 = NULL;
    // Tried code
    tmp_source_name_1 = par_err_msg.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 192;
        goto try_finally_handler_2;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_find );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 192;
        goto try_finally_handler_2;
    }
    tmp_call_arg_element_1 = const_str_newline;
    frame_function->f_lineno = 192;
    tmp_compexpr_left_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 192;
        goto try_finally_handler_2;
    }
    tmp_compexpr_right_1 = const_int_neg_1;
    tmp_assign_source_2 = RICH_COMPARE_EQ( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 192;
        goto try_finally_handler_2;
    }
    assert( tmp_and_1__value_1.object == NULL );
    tmp_and_1__value_1.object = tmp_assign_source_2;

    tmp_cond_value_3 = tmp_and_1__value_1.object;

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 192;
        goto try_finally_handler_2;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_cond_value_2 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1.object );
        tmp_and_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_len_arg_1 = par_err_msg.object;

    if ( tmp_len_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 192;
        goto try_finally_handler_3;
    }

    tmp_compexpr_left_2 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 192;
        goto try_finally_handler_3;
    }
    tmp_binop_left_2 = const_int_pos_79;
    tmp_len_arg_2 = par_header.object;

    if ( tmp_len_arg_2 == NULL )
    {
        Py_DECREF( tmp_compexpr_left_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 645 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 192;
        goto try_finally_handler_3;
    }

    tmp_binop_right_2 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_binop_right_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compexpr_left_2 );

        frame_function->f_lineno = 192;
        goto try_finally_handler_3;
    }
    tmp_compexpr_right_2 = BINARY_OPERATION_SUB( tmp_binop_left_2, tmp_binop_right_2 );
    Py_DECREF( tmp_binop_right_2 );
    if ( tmp_compexpr_right_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compexpr_left_2 );

        frame_function->f_lineno = 192;
        goto try_finally_handler_3;
    }
    tmp_cond_value_2 = RICH_COMPARE_LT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    Py_DECREF( tmp_compexpr_right_2 );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 192;
        goto try_finally_handler_3;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_2;
    }

    goto finally_end_1;
    finally_end_1:;
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_cond_value_2 = tmp_and_1__value_1.object;

    Py_INCREF( tmp_cond_value_2 );
    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_1;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        frame_function->f_lineno = 192;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_3 = PyList_New( 1 );
    tmp_subscr_target_1 = var_msg.object;

    if ( tmp_subscr_target_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 193;
        goto try_finally_handler_1;
    }

    tmp_subscr_subscript_1 = const_int_0;
    tmp_binop_left_4 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_binop_left_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_3 );

        frame_function->f_lineno = 193;
        goto try_finally_handler_1;
    }
    tmp_binop_right_4 = const_str_space;
    tmp_binop_left_3 = BINARY_OPERATION_ADD( tmp_binop_left_4, tmp_binop_right_4 );
    Py_DECREF( tmp_binop_left_4 );
    if ( tmp_binop_left_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_3 );

        frame_function->f_lineno = 193;
        goto try_finally_handler_1;
    }
    tmp_binop_right_3 = par_err_msg.object;

    if ( tmp_binop_right_3 == NULL )
    {
        Py_DECREF( tmp_assign_source_3 );
        Py_DECREF( tmp_binop_left_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 193;
        goto try_finally_handler_1;
    }

    tmp_list_element_2 = BINARY_OPERATION_ADD( tmp_binop_left_3, tmp_binop_right_3 );
    Py_DECREF( tmp_binop_left_3 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_3 );

        frame_function->f_lineno = 193;
        goto try_finally_handler_1;
    }
    PyList_SET_ITEM( tmp_assign_source_3, 0, tmp_list_element_2 );
    if (var_msg.object == NULL)
    {
        var_msg.object = tmp_assign_source_3;
    }
    else
    {
        PyObject *old = var_msg.object;
        var_msg.object = tmp_assign_source_3;
        Py_DECREF( old );
    }
    goto branch_end_2;
    branch_no_2:;
    tmp_source_name_2 = var_msg.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 195;
        goto try_finally_handler_1;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_append );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 195;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_2 = par_err_msg.object;

    if ( tmp_call_arg_element_2 == NULL )
    {
        Py_DECREF( tmp_called_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 195;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 195;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 195;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_unused );
    branch_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_1__value_1.object );
    tmp_and_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto frame_exception_exit_1;
    }

    goto finally_end_3;
    finally_end_3:;
    branch_no_1:;
    tmp_cond_value_4 = par_verbose.object;

    if ( tmp_cond_value_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49769 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 196;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 196;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_4 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_called_3 = LOOKUP_BUILTIN( const_str_plain_enumerate );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 197;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_3 = par_arrays.object;

    if ( tmp_call_arg_element_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 176923 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 197;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 197;
    tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_3 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 197;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 197;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_4;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_5 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_5 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 197;
            goto try_finally_handler_4;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_5;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_5;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_2 = tmp_for_loop_1__iter_value.object;

    tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 197;
        goto try_finally_handler_5;
    }
    if (tmp_tuple_unpack_1__source_iter.object == NULL)
    {
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_6;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter.object;
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_6;
        Py_DECREF( old );
    }
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_7 = UNPACK_PARAMETER_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_7 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 197;
        goto try_finally_handler_5;
    }
    if (tmp_tuple_unpack_1__element_1.object == NULL)
    {
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_7;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_1.object;
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_7;
        Py_DECREF( old );
    }
    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_8 = UNPACK_PARAMETER_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_8 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 197;
        goto try_finally_handler_5;
    }
    if (tmp_tuple_unpack_1__element_2.object == NULL)
    {
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_8;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_2.object;
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_8;
        Py_DECREF( old );
    }
    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_1 ); assert( PyIter_Check( tmp_iterator_name_1 ) );

    tmp_iterator_attempt_1 = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt_1 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_5;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_1 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_5;
    }
    tmp_assign_source_9 = tmp_tuple_unpack_1__element_1.object;

    if (var_i.object == NULL)
    {
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_9 );
    }
    else
    {
        PyObject *old = var_i.object;
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_9 );
        Py_DECREF( old );
    }
    tmp_assign_source_10 = tmp_tuple_unpack_1__element_2.object;

    if (var_a.object == NULL)
    {
        var_a.object = INCREASE_REFCOUNT( tmp_assign_source_10 );
    }
    else
    {
        PyObject *old = var_a.object;
        var_a.object = INCREASE_REFCOUNT( tmp_assign_source_10 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter.object );
    tmp_tuple_unpack_1__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1.object );
    tmp_tuple_unpack_1__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2.object );
    tmp_tuple_unpack_1__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto try_finally_handler_4;
    }

    goto finally_end_4;
    finally_end_4:;
    // Tried block of try/except
    tmp_unary_arg_1 = var_a.object;

    if ( tmp_unary_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5854 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 199;
        goto try_except_handler_1;
    }

    tmp_assign_source_11 = UNARY_OPERATION( PyObject_Repr, tmp_unary_arg_1 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 199;
        goto try_except_handler_1;
    }
    if (var_r.object == NULL)
    {
        var_r.object = tmp_assign_source_11;
    }
    else
    {
        PyObject *old = var_r.object;
        var_r.object = tmp_assign_source_11;
        Py_DECREF( old );
    }
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_assign_source_12 = const_str_digest_7e2409b427a8ab16671b716477014265;
    if (var_r.object == NULL)
    {
        var_r.object = INCREASE_REFCOUNT( tmp_assign_source_12 );
    }
    else
    {
        PyObject *old = var_r.object;
        var_r.object = INCREASE_REFCOUNT( tmp_assign_source_12 );
        Py_DECREF( old );
    }
    try_except_end_1:;
    tmp_source_name_3 = var_r.object;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 11969 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 202;
        goto try_finally_handler_4;
    }

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_count );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 202;
        goto try_finally_handler_4;
    }
    tmp_call_arg_element_4 = const_str_newline;
    frame_function->f_lineno = 202;
    tmp_compare_left_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 202;
        goto try_finally_handler_4;
    }
    tmp_compare_right_1 = const_int_pos_3;
    tmp_cmp_Gt_1 = RICH_COMPARE_BOOL_GT( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Gt_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        frame_function->f_lineno = 202;
        goto try_finally_handler_4;
    }
    Py_DECREF( tmp_compare_left_1 );
    if (tmp_cmp_Gt_1 == 1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_source_name_4 = const_str_newline;
    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_join );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 203;
        goto try_finally_handler_4;
    }
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = 3;
    tmp_source_name_5 = var_r.object;

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_called_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 11969 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 203;
        goto try_finally_handler_4;
    }

    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_splitlines );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_5 );

        frame_function->f_lineno = 203;
        goto try_finally_handler_4;
    }
    frame_function->f_lineno = 203;
    tmp_slice_source_1 = CALL_FUNCTION_NO_ARGS( tmp_called_6 );
    Py_DECREF( tmp_called_6 );
    if ( tmp_slice_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_5 );

        frame_function->f_lineno = 203;
        goto try_finally_handler_4;
    }
    tmp_call_arg_element_5 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    Py_DECREF( tmp_slice_source_1 );
    if ( tmp_call_arg_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_5 );

        frame_function->f_lineno = 203;
        goto try_finally_handler_4;
    }
    frame_function->f_lineno = 203;
    tmp_assign_source_13 = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_5 );
    Py_DECREF( tmp_called_5 );
    Py_DECREF( tmp_call_arg_element_5 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 203;
        goto try_finally_handler_4;
    }
    if (var_r.object == NULL)
    {
        var_r.object = tmp_assign_source_13;
    }
    else
    {
        PyObject *old = var_r.object;
        var_r.object = tmp_assign_source_13;
        Py_DECREF( old );
    }
    tmp_assign_source_14 = var_r.object;

    if (tmp_inplace_assign_1__inplace_start.object == NULL)
    {
        tmp_inplace_assign_1__inplace_start.object = INCREASE_REFCOUNT( tmp_assign_source_14 );
    }
    else
    {
        PyObject *old = tmp_inplace_assign_1__inplace_start.object;
        tmp_inplace_assign_1__inplace_start.object = INCREASE_REFCOUNT( tmp_assign_source_14 );
        Py_DECREF( old );
    }
    // Tried code
    tmp_binop_left_5 = tmp_inplace_assign_1__inplace_start.object;

    tmp_binop_right_5 = const_str_digest_2f43b42fd833d1e77420a8dae7419000;
    tmp_assign_source_15 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_binop_left_5, tmp_binop_right_5 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 204;
        goto try_finally_handler_6;
    }
    if (tmp_inplace_assign_1__inplace_end.object == NULL)
    {
        tmp_inplace_assign_1__inplace_end.object = tmp_assign_source_15;
    }
    else
    {
        PyObject *old = tmp_inplace_assign_1__inplace_end.object;
        tmp_inplace_assign_1__inplace_end.object = tmp_assign_source_15;
        Py_DECREF( old );
    }
    tmp_compare_left_2 = tmp_inplace_assign_1__inplace_start.object;

    tmp_compare_right_2 = tmp_inplace_assign_1__inplace_end.object;

    tmp_isnot_1 = ( tmp_compare_left_2 != tmp_compare_right_2 );
    if (tmp_isnot_1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_assign_source_16 = tmp_inplace_assign_1__inplace_end.object;

    assert( var_r.object != NULL );
    {
        PyObject *old = var_r.object;
        var_r.object = INCREASE_REFCOUNT( tmp_assign_source_16 );
        Py_DECREF( old );
    }

    branch_no_5:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    tmp_result = tmp_inplace_assign_1__inplace_start.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_inplace_assign_1__inplace_start.object );
        tmp_inplace_assign_1__inplace_start.object = NULL;
    }

    assert( tmp_result != false );
    Py_XDECREF( tmp_inplace_assign_1__inplace_end.object );
    tmp_inplace_assign_1__inplace_end.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto try_finally_handler_4;
    }

    goto finally_end_5;
    finally_end_5:;
    branch_no_4:;
    tmp_source_name_6 = var_msg.object;

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 205;
        goto try_finally_handler_4;
    }

    tmp_called_7 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_append );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 205;
        goto try_finally_handler_4;
    }
    tmp_binop_left_6 = const_str_digest_6525023e51fe72f9ff6982f820c668de;
    tmp_binop_right_6 = PyTuple_New( 2 );
    tmp_subscr_target_2 = par_names.object;

    if ( tmp_subscr_target_2 == NULL )
    {
        Py_DECREF( tmp_called_7 );
        Py_DECREF( tmp_binop_right_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 51020 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 205;
        goto try_finally_handler_4;
    }

    tmp_subscr_subscript_2 = var_i.object;

    if ( tmp_subscr_subscript_2 == NULL )
    {
        Py_DECREF( tmp_called_7 );
        Py_DECREF( tmp_binop_right_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 205;
        goto try_finally_handler_4;
    }

    tmp_tuple_element_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_2, tmp_subscr_subscript_2 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_7 );
        Py_DECREF( tmp_binop_right_6 );

        frame_function->f_lineno = 205;
        goto try_finally_handler_4;
    }
    PyTuple_SET_ITEM( tmp_binop_right_6, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_r.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_7 );
        Py_DECREF( tmp_binop_right_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 11969 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 205;
        goto try_finally_handler_4;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_binop_right_6, 1, tmp_tuple_element_1 );
    tmp_call_arg_element_6 = BINARY_OPERATION_REMAINDER( tmp_binop_left_6, tmp_binop_right_6 );
    Py_DECREF( tmp_binop_right_6 );
    if ( tmp_call_arg_element_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_7 );

        frame_function->f_lineno = 205;
        goto try_finally_handler_4;
    }
    frame_function->f_lineno = 205;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_6 );
    Py_DECREF( tmp_called_7 );
    Py_DECREF( tmp_call_arg_element_6 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 205;
        goto try_finally_handler_4;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 197;
        goto try_finally_handler_4;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_4 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_4;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto frame_exception_exit_1;
    }

    goto finally_end_6;
    finally_end_6:;
    branch_no_3:;
    tmp_source_name_7 = const_str_newline;
    tmp_called_8 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_join );
    if ( tmp_called_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 206;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_7 = var_msg.object;

    if ( tmp_call_arg_element_7 == NULL )
    {
        Py_DECREF( tmp_called_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 206;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 206;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_8, tmp_call_arg_element_7 );
    Py_DECREF( tmp_called_8 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 206;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((var_a.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_a,
            var_a.object
        );

    }
    if ((var_r.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_r,
            var_r.object
        );

    }
    if ((par_arrays.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_arrays,
            par_arrays.object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_header.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_header,
            par_header.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    if ((par_names.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_names,
            par_names.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_12_build_err_msg_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_arrays = NULL;
    PyObject *_python_par_err_msg = NULL;
    PyObject *_python_par_header = NULL;
    PyObject *_python_par_verbose = NULL;
    PyObject *_python_par_names = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "build_err_msg() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_arrays == key )
            {
                assert( _python_par_arrays == NULL );
                _python_par_arrays = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_err_msg == key )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_header == key )
            {
                assert( _python_par_header == NULL );
                _python_par_header = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_verbose == key )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_names == key )
            {
                assert( _python_par_names == NULL );
                _python_par_names = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_arrays, key ) == 1 )
            {
                assert( _python_par_arrays == NULL );
                _python_par_arrays = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_err_msg, key ) == 1 )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_header, key ) == 1 )
            {
                assert( _python_par_header == NULL );
                _python_par_header = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_verbose, key ) == 1 )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_names, key ) == 1 )
            {
                assert( _python_par_names == NULL );
                _python_par_names = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "build_err_msg() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_arrays != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_arrays = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_arrays == NULL )
    {
        if ( 0 + self->m_defaults_given >= 5  )
        {
            _python_par_arrays = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_err_msg != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_err_msg = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_err_msg == NULL )
    {
        if ( 1 + self->m_defaults_given >= 5  )
        {
            _python_par_err_msg = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_header != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_header = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_header == NULL )
    {
        if ( 2 + self->m_defaults_given >= 5  )
        {
            _python_par_header = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_verbose != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_verbose = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_verbose == NULL )
    {
        if ( 3 + self->m_defaults_given >= 5  )
        {
            _python_par_verbose = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 4 < args_given ))
    {
         if (unlikely( _python_par_names != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 4 );
             goto error_exit;
         }

        _python_par_names = INCREASE_REFCOUNT( args[ 4 ] );
    }
    else if ( _python_par_names == NULL )
    {
        if ( 4 + self->m_defaults_given >= 5  )
        {
            _python_par_names = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 4 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_arrays == NULL || _python_par_err_msg == NULL || _python_par_header == NULL || _python_par_verbose == NULL || _python_par_names == NULL ))
    {
        PyObject *values[] = { _python_par_arrays, _python_par_err_msg, _python_par_header, _python_par_verbose, _python_par_names };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_12_build_err_msg_of_module_numpy$testing$utils( self, _python_par_arrays, _python_par_err_msg, _python_par_header, _python_par_verbose, _python_par_names );

error_exit:;

    Py_XDECREF( _python_par_arrays );
    Py_XDECREF( _python_par_err_msg );
    Py_XDECREF( _python_par_header );
    Py_XDECREF( _python_par_verbose );
    Py_XDECREF( _python_par_names );

    return NULL;
}

static PyObject *dparse_function_12_build_err_msg_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5 )
    {
        return impl_function_12_build_err_msg_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_12_build_err_msg_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_13_assert_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_actual, PyObject *_python_par_desired, PyObject *_python_par_err_msg, PyObject *_python_par_verbose )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_actual; par_actual.object = _python_par_actual;
    PyObjectLocalVariable par_desired; par_desired.object = _python_par_desired;
    PyObjectLocalVariable par_err_msg; par_err_msg.object = _python_par_err_msg;
    PyObjectLocalVariable par_verbose; par_verbose.object = _python_par_verbose;
    PyObjectLocalVariable var_k;
    PyObjectLocalVariable var_i;
    PyObjectLocalVariable var_ndarray;
    PyObjectLocalVariable var_isscalar;
    PyObjectLocalVariable var_signbit;
    PyObjectLocalVariable var_iscomplexobj;
    PyObjectLocalVariable var_real;
    PyObjectLocalVariable var_imag;
    PyObjectLocalVariable var_msg;
    PyObjectLocalVariable var_usecomplex;
    PyObjectLocalVariable var_actualr;
    PyObjectLocalVariable var_actuali;
    PyObjectLocalVariable var_desiredr;
    PyObjectLocalVariable var_desiredi;
    PyObjectLocalVariable var_isdesnan;
    PyObjectLocalVariable var_isactnan;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_and_1__value_1;
    PyObjectTempVariable tmp_for_loop_2__for_iterator;
    PyObjectTempVariable tmp_for_loop_2__iter_value;
    PyObjectTempVariable tmp_or_1__value_1;
    PyObjectTempVariable tmp_or_2__value_1;
    PyObjectTempVariable tmp_and_2__value_1;
    PyObjectTempVariable tmp_or_3__value_1;
    PyObjectTempVariable tmp_and_3__value_1;
    PyObjectTempVariable tmp_and_4__value_1;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_call_arg_element_14;
    PyObject *tmp_call_arg_element_15;
    PyObject *tmp_call_arg_element_16;
    PyObject *tmp_call_arg_element_17;
    PyObject *tmp_call_arg_element_18;
    PyObject *tmp_call_arg_element_19;
    PyObject *tmp_call_arg_element_20;
    PyObject *tmp_call_arg_element_21;
    PyObject *tmp_call_arg_element_22;
    PyObject *tmp_call_arg_element_23;
    PyObject *tmp_call_arg_element_24;
    PyObject *tmp_call_arg_element_25;
    PyObject *tmp_call_arg_element_26;
    PyObject *tmp_call_arg_element_27;
    PyObject *tmp_call_arg_element_28;
    PyObject *tmp_call_arg_element_29;
    PyObject *tmp_call_arg_element_30;
    PyObject *tmp_call_arg_element_31;
    PyObject *tmp_call_arg_element_32;
    PyObject *tmp_call_arg_element_33;
    PyObject *tmp_call_arg_element_34;
    PyObject *tmp_call_arg_element_35;
    PyObject *tmp_call_arg_element_36;
    PyObject *tmp_call_arg_element_37;
    PyObject *tmp_call_arg_element_38;
    PyObject *tmp_call_arg_element_39;
    PyObject *tmp_call_arg_element_40;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    PyObject *tmp_called_11;
    PyObject *tmp_called_12;
    PyObject *tmp_called_13;
    PyObject *tmp_called_14;
    PyObject *tmp_called_15;
    PyObject *tmp_called_16;
    PyObject *tmp_called_17;
    PyObject *tmp_called_18;
    PyObject *tmp_called_19;
    PyObject *tmp_called_20;
    PyObject *tmp_called_21;
    PyObject *tmp_called_22;
    PyObject *tmp_called_23;
    PyObject *tmp_called_24;
    PyObject *tmp_called_25;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_NotEq_1;
    int tmp_cmp_NotEq_2;
    int tmp_cmp_NotIn_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    int tmp_cond_truth_13;
    int tmp_cond_truth_14;
    int tmp_cond_truth_15;
    int tmp_cond_truth_16;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_cond_value_13;
    PyObject *tmp_cond_value_14;
    PyObject *tmp_cond_value_15;
    PyObject *tmp_cond_value_16;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    int tmp_exc_match_exception_match_1;
    int tmp_exc_match_exception_match_2;
    int tmp_exc_match_exception_match_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_globals_4;
    PyObject *tmp_import_globals_5;
    PyObject *tmp_import_globals_6;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_locals_2;
    PyObject *tmp_import_locals_3;
    PyObject *tmp_import_locals_4;
    PyObject *tmp_import_locals_5;
    PyObject *tmp_import_locals_6;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_import_name_from_3;
    PyObject *tmp_import_name_from_4;
    PyObject *tmp_import_name_from_5;
    PyObject *tmp_import_name_from_6;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_cls_3;
    PyObject *tmp_isinstance_cls_4;
    PyObject *tmp_isinstance_cls_5;
    PyObject *tmp_isinstance_cls_6;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_isinstance_inst_3;
    PyObject *tmp_isinstance_inst_4;
    PyObject *tmp_isinstance_inst_5;
    PyObject *tmp_isinstance_inst_6;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iterator_attempt_1;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_len_arg_5;
    PyObject *tmp_list_element_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_make_exception_arg_3;
    PyObject *tmp_make_exception_arg_4;
    PyObject *tmp_make_exception_arg_5;
    PyObject *tmp_make_exception_arg_6;
    PyObject *tmp_make_exception_arg_7;
    PyObject *tmp_make_exception_arg_8;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_type_3;
    PyObject *tmp_raise_type_4;
    PyObject *tmp_raise_type_5;
    PyObject *tmp_raise_type_6;
    PyObject *tmp_raise_type_7;
    PyObject *tmp_raise_type_8;
    PyObject *tmp_range_arg_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_subscript_2;
    PyObject *tmp_subscr_subscript_3;
    PyObject *tmp_subscr_subscript_4;
    PyObject *tmp_subscr_target_1;
    PyObject *tmp_subscr_target_2;
    PyObject *tmp_subscr_target_3;
    PyObject *tmp_subscr_target_4;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    int tmp_tried_lineno_4;
    int tmp_tried_lineno_5;
    int tmp_tried_lineno_6;
    int tmp_tried_lineno_7;
    int tmp_tried_lineno_8;
    int tmp_tried_lineno_9;
    int tmp_tried_lineno_10;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_type_arg_1;
    PyObject *tmp_unary_arg_1;
    PyObject *tmp_unary_arg_2;
    PyObject *tmp_unary_arg_3;
    PyObject *tmp_unary_arg_4;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_72bf077e3f76eee562a8a8e37e5e3c99, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_isinstance_inst_1 = par_desired.object;

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 243;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_1 = LOOKUP_BUILTIN( const_str_plain_dict );
    if ( tmp_isinstance_cls_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 243;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 243;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_isinstance_inst_2 = par_actual.object;

    if ( tmp_isinstance_inst_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 244;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_2 = LOOKUP_BUILTIN( const_str_plain_dict );
    if ( tmp_isinstance_cls_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 244;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 244;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_no_2;
    }
    else
    {
        goto branch_yes_2;
    }
    branch_yes_2:;
    tmp_type_arg_1 = par_actual.object;

    if ( tmp_type_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 245;
        goto frame_exception_exit_1;
    }

    tmp_unary_arg_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
    if ( tmp_unary_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 245;
        goto frame_exception_exit_1;
    }
    tmp_make_exception_arg_1 = UNARY_OPERATION( PyObject_Repr, tmp_unary_arg_1 );
    Py_DECREF( tmp_unary_arg_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 245;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 245;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_1 );
    Py_DECREF( tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 245;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 245;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_2:;
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_equal );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_assert_equal );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214279 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 246;
        goto frame_exception_exit_1;
    }

    tmp_len_arg_1 = par_actual.object;

    if ( tmp_len_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 246;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 246;
        goto frame_exception_exit_1;
    }
    tmp_len_arg_2 = par_desired.object;

    if ( tmp_len_arg_2 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 246;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_2 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_call_arg_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_1 );

        frame_function->f_lineno = 246;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_3 = par_err_msg.object;

    if ( tmp_call_arg_element_3 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_1 );
        Py_DECREF( tmp_call_arg_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 246;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_4 = par_verbose.object;

    if ( tmp_call_arg_element_4 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_1 );
        Py_DECREF( tmp_call_arg_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49769 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 246;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 246;
    tmp_unused = CALL_FUNCTION_WITH_ARGS4( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    Py_DECREF( tmp_call_arg_element_1 );
    Py_DECREF( tmp_call_arg_element_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 246;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_1 = par_desired.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 247;
        goto frame_exception_exit_1;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_items );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 247;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 247;
    tmp_iter_arg_1 = CALL_FUNCTION_NO_ARGS( tmp_called_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 247;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 247;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_1;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_2 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 247;
            goto try_finally_handler_1;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_2;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_2;
        Py_DECREF( old );
    }
    // Tried code
    tmp_iter_arg_2 = tmp_for_loop_1__iter_value.object;

    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 247;
        goto try_finally_handler_2;
    }
    if (tmp_tuple_unpack_1__source_iter.object == NULL)
    {
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_3;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter.object;
        tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_3;
        Py_DECREF( old );
    }
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_4 = UNPACK_PARAMETER_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 247;
        goto try_finally_handler_2;
    }
    if (tmp_tuple_unpack_1__element_1.object == NULL)
    {
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_4;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_1.object;
        tmp_tuple_unpack_1__element_1.object = tmp_assign_source_4;
        Py_DECREF( old );
    }
    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_5 = UNPACK_PARAMETER_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 247;
        goto try_finally_handler_2;
    }
    if (tmp_tuple_unpack_1__element_2.object == NULL)
    {
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_5;
    }
    else
    {
        PyObject *old = tmp_tuple_unpack_1__element_2.object;
        tmp_tuple_unpack_1__element_2.object = tmp_assign_source_5;
        Py_DECREF( old );
    }
    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_1 ); assert( PyIter_Check( tmp_iterator_name_1 ) );

    tmp_iterator_attempt_1 = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt_1 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_2;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_1 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_2;
    }
    tmp_assign_source_6 = tmp_tuple_unpack_1__element_1.object;

    if (var_k.object == NULL)
    {
        var_k.object = INCREASE_REFCOUNT( tmp_assign_source_6 );
    }
    else
    {
        PyObject *old = var_k.object;
        var_k.object = INCREASE_REFCOUNT( tmp_assign_source_6 );
        Py_DECREF( old );
    }
    tmp_assign_source_7 = tmp_tuple_unpack_1__element_2.object;

    if (var_i.object == NULL)
    {
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_7 );
    }
    else
    {
        PyObject *old = var_i.object;
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_7 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter.object );
    tmp_tuple_unpack_1__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1.object );
    tmp_tuple_unpack_1__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2.object );
    tmp_tuple_unpack_1__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_compare_left_1 = var_k.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6318 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 248;
        goto try_finally_handler_1;
    }

    tmp_compare_right_1 = par_actual.object;

    if ( tmp_compare_right_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 248;
        goto try_finally_handler_1;
    }

    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    if ( tmp_cmp_NotIn_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 248;
        goto try_finally_handler_1;
    }
    if (tmp_cmp_NotIn_1 == 0)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_unary_arg_2 = var_k.object;

    if ( tmp_unary_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6318 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 249;
        goto try_finally_handler_1;
    }

    tmp_make_exception_arg_2 = UNARY_OPERATION( PyObject_Repr, tmp_unary_arg_2 );
    if ( tmp_make_exception_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 249;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 249;
    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_2 );
    Py_DECREF( tmp_make_exception_arg_2 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 249;
        goto try_finally_handler_1;
    }
    exception_type = tmp_raise_type_2;
    frame_function->f_lineno = 249;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_1;
    branch_no_3:;
    tmp_called_3 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_equal );

    if (unlikely( tmp_called_3 == NULL ))
    {
        tmp_called_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_assert_equal );
    }

    if ( tmp_called_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214279 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 250;
        goto try_finally_handler_1;
    }

    tmp_subscr_target_1 = par_actual.object;

    if ( tmp_subscr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 250;
        goto try_finally_handler_1;
    }

    tmp_subscr_subscript_1 = var_k.object;

    if ( tmp_subscr_subscript_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6318 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 250;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_5 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_call_arg_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 250;
        goto try_finally_handler_1;
    }
    tmp_subscr_target_2 = par_desired.object;

    if ( tmp_subscr_target_2 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 250;
        goto try_finally_handler_1;
    }

    tmp_subscr_subscript_2 = var_k.object;

    if ( tmp_subscr_subscript_2 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6318 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 250;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_6 = LOOKUP_SUBSCRIPT( tmp_subscr_target_2, tmp_subscr_subscript_2 );
    if ( tmp_call_arg_element_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_5 );

        frame_function->f_lineno = 250;
        goto try_finally_handler_1;
    }
    tmp_binop_left_1 = const_str_digest_caf8c8bda71ad7c8d5e030384aab91f0;
    tmp_binop_right_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = var_k.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_5 );
        Py_DECREF( tmp_call_arg_element_6 );
        Py_DECREF( tmp_binop_right_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6318 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 250;
        goto try_finally_handler_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_binop_right_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_err_msg.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_5 );
        Py_DECREF( tmp_call_arg_element_6 );
        Py_DECREF( tmp_binop_right_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 250;
        goto try_finally_handler_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_binop_right_1, 1, tmp_tuple_element_1 );
    tmp_call_arg_element_7 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_call_arg_element_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_5 );
        Py_DECREF( tmp_call_arg_element_6 );

        frame_function->f_lineno = 250;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_8 = par_verbose.object;

    if ( tmp_call_arg_element_8 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_5 );
        Py_DECREF( tmp_call_arg_element_6 );
        Py_DECREF( tmp_call_arg_element_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49769 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 250;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 250;
    tmp_unused = CALL_FUNCTION_WITH_ARGS4( tmp_called_3, tmp_call_arg_element_5, tmp_call_arg_element_6, tmp_call_arg_element_7, tmp_call_arg_element_8 );
    Py_DECREF( tmp_call_arg_element_5 );
    Py_DECREF( tmp_call_arg_element_6 );
    Py_DECREF( tmp_call_arg_element_7 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 250;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 247;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto frame_exception_exit_1;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    // Tried code
    tmp_cond_value_1 = NULL;
    // Tried code
    tmp_isinstance_inst_3 = par_desired.object;

    if ( tmp_isinstance_inst_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 252;
        goto try_finally_handler_4;
    }

    tmp_isinstance_cls_3 = PyTuple_New( 2 );
    tmp_tuple_element_2 = LOOKUP_BUILTIN( const_str_plain_list );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_cls_3 );

        frame_function->f_lineno = 252;
        goto try_finally_handler_4;
    }
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_3, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = LOOKUP_BUILTIN( const_str_plain_tuple );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_cls_3 );

        frame_function->f_lineno = 252;
        goto try_finally_handler_4;
    }
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_3, 1, tmp_tuple_element_2 );
    tmp_assign_source_8 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
    Py_DECREF( tmp_isinstance_cls_3 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 252;
        goto try_finally_handler_4;
    }
    assert( tmp_and_1__value_1.object == NULL );
    tmp_and_1__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_8 );

    tmp_cond_value_2 = tmp_and_1__value_1.object;

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 252;
        goto try_finally_handler_4;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_cond_value_1 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1.object );
        tmp_and_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_isinstance_inst_4 = par_actual.object;

    if ( tmp_isinstance_inst_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 252;
        goto try_finally_handler_5;
    }

    tmp_isinstance_cls_4 = PyTuple_New( 2 );
    tmp_tuple_element_3 = LOOKUP_BUILTIN( const_str_plain_list );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_cls_4 );

        frame_function->f_lineno = 252;
        goto try_finally_handler_5;
    }
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_4, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = LOOKUP_BUILTIN( const_str_plain_tuple );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_cls_4 );

        frame_function->f_lineno = 252;
        goto try_finally_handler_5;
    }
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_4, 1, tmp_tuple_element_3 );
    tmp_cond_value_1 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_4, tmp_isinstance_cls_4 );
    Py_DECREF( tmp_isinstance_cls_4 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 252;
        goto try_finally_handler_5;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto try_finally_handler_4;
    }

    goto finally_end_3;
    finally_end_3:;
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_cond_value_1 = tmp_and_1__value_1.object;

    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto try_finally_handler_3;
    }

    goto finally_end_4;
    finally_end_4:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 252;
        goto try_finally_handler_3;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_4 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_equal );

    if (unlikely( tmp_called_4 == NULL ))
    {
        tmp_called_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_assert_equal );
    }

    if ( tmp_called_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214279 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 253;
        goto try_finally_handler_3;
    }

    tmp_len_arg_3 = par_actual.object;

    if ( tmp_len_arg_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 253;
        goto try_finally_handler_3;
    }

    tmp_call_arg_element_9 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_call_arg_element_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 253;
        goto try_finally_handler_3;
    }
    tmp_len_arg_4 = par_desired.object;

    if ( tmp_len_arg_4 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 253;
        goto try_finally_handler_3;
    }

    tmp_call_arg_element_10 = BUILTIN_LEN( tmp_len_arg_4 );
    if ( tmp_call_arg_element_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_9 );

        frame_function->f_lineno = 253;
        goto try_finally_handler_3;
    }
    tmp_call_arg_element_11 = par_err_msg.object;

    if ( tmp_call_arg_element_11 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_9 );
        Py_DECREF( tmp_call_arg_element_10 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 253;
        goto try_finally_handler_3;
    }

    tmp_call_arg_element_12 = par_verbose.object;

    if ( tmp_call_arg_element_12 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_9 );
        Py_DECREF( tmp_call_arg_element_10 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49769 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 253;
        goto try_finally_handler_3;
    }

    frame_function->f_lineno = 253;
    tmp_unused = CALL_FUNCTION_WITH_ARGS4( tmp_called_4, tmp_call_arg_element_9, tmp_call_arg_element_10, tmp_call_arg_element_11, tmp_call_arg_element_12 );
    Py_DECREF( tmp_call_arg_element_9 );
    Py_DECREF( tmp_call_arg_element_10 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 253;
        goto try_finally_handler_3;
    }
    Py_DECREF( tmp_unused );
    tmp_len_arg_5 = par_desired.object;

    if ( tmp_len_arg_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 254;
        goto try_finally_handler_3;
    }

    tmp_range_arg_1 = BUILTIN_LEN( tmp_len_arg_5 );
    if ( tmp_range_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 254;
        goto try_finally_handler_3;
    }
    tmp_iter_arg_3 = BUILTIN_RANGE( tmp_range_arg_1 );
    Py_DECREF( tmp_range_arg_1 );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 254;
        goto try_finally_handler_3;
    }
    tmp_assign_source_9 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 254;
        goto try_finally_handler_3;
    }
    assert( tmp_for_loop_2__for_iterator.object == NULL );
    tmp_for_loop_2__for_iterator.object = tmp_assign_source_9;

    // Tried code
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator.object;

    tmp_assign_source_10 = ITERATOR_NEXT( tmp_next_source_2 );
    if (tmp_assign_source_10 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_2;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 254;
            goto try_finally_handler_6;
        }
    }

    if (tmp_for_loop_2__iter_value.object == NULL)
    {
        tmp_for_loop_2__iter_value.object = tmp_assign_source_10;
    }
    else
    {
        PyObject *old = tmp_for_loop_2__iter_value.object;
        tmp_for_loop_2__iter_value.object = tmp_assign_source_10;
        Py_DECREF( old );
    }
    tmp_assign_source_11 = tmp_for_loop_2__iter_value.object;

    if (var_k.object == NULL)
    {
        var_k.object = INCREASE_REFCOUNT( tmp_assign_source_11 );
    }
    else
    {
        PyObject *old = var_k.object;
        var_k.object = INCREASE_REFCOUNT( tmp_assign_source_11 );
        Py_DECREF( old );
    }
    tmp_called_5 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_equal );

    if (unlikely( tmp_called_5 == NULL ))
    {
        tmp_called_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_assert_equal );
    }

    if ( tmp_called_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214279 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 255;
        goto try_finally_handler_6;
    }

    tmp_subscr_target_3 = par_actual.object;

    if ( tmp_subscr_target_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 255;
        goto try_finally_handler_6;
    }

    tmp_subscr_subscript_3 = var_k.object;

    tmp_call_arg_element_13 = LOOKUP_SUBSCRIPT( tmp_subscr_target_3, tmp_subscr_subscript_3 );
    if ( tmp_call_arg_element_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 255;
        goto try_finally_handler_6;
    }
    tmp_subscr_target_4 = par_desired.object;

    if ( tmp_subscr_target_4 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_13 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 255;
        goto try_finally_handler_6;
    }

    tmp_subscr_subscript_4 = var_k.object;

    tmp_call_arg_element_14 = LOOKUP_SUBSCRIPT( tmp_subscr_target_4, tmp_subscr_subscript_4 );
    if ( tmp_call_arg_element_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_13 );

        frame_function->f_lineno = 255;
        goto try_finally_handler_6;
    }
    tmp_binop_left_2 = const_str_digest_8c6ec1f522f2db10b81bdcf429e53d82;
    tmp_binop_right_2 = PyTuple_New( 2 );
    tmp_tuple_element_4 = var_k.object;

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_binop_right_2, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = par_err_msg.object;

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_13 );
        Py_DECREF( tmp_call_arg_element_14 );
        Py_DECREF( tmp_binop_right_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 255;
        goto try_finally_handler_6;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_binop_right_2, 1, tmp_tuple_element_4 );
    tmp_call_arg_element_15 = BINARY_OPERATION_REMAINDER( tmp_binop_left_2, tmp_binop_right_2 );
    Py_DECREF( tmp_binop_right_2 );
    if ( tmp_call_arg_element_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_13 );
        Py_DECREF( tmp_call_arg_element_14 );

        frame_function->f_lineno = 255;
        goto try_finally_handler_6;
    }
    tmp_call_arg_element_16 = par_verbose.object;

    if ( tmp_call_arg_element_16 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_13 );
        Py_DECREF( tmp_call_arg_element_14 );
        Py_DECREF( tmp_call_arg_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49769 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 255;
        goto try_finally_handler_6;
    }

    frame_function->f_lineno = 255;
    tmp_unused = CALL_FUNCTION_WITH_ARGS4( tmp_called_5, tmp_call_arg_element_13, tmp_call_arg_element_14, tmp_call_arg_element_15, tmp_call_arg_element_16 );
    Py_DECREF( tmp_call_arg_element_13 );
    Py_DECREF( tmp_call_arg_element_14 );
    Py_DECREF( tmp_call_arg_element_15 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 255;
        goto try_finally_handler_6;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 254;
        goto try_finally_handler_6;
    }
    goto loop_start_2;
    loop_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_2__iter_value.object );
    tmp_for_loop_2__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator.object );
    tmp_for_loop_2__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto try_finally_handler_3;
    }

    goto finally_end_5;
    finally_end_5:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_finally_handler_start_1;
    branch_no_4:;
    try_finally_handler_start_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_4 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_1__value_1.object );
    tmp_and_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_4;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto frame_exception_exit_1;
    }

    // Return value if any.
    if ( tmp_return_value != NULL )
    {
        goto frame_return_exit_1;
    }

    goto finally_end_6;
    finally_end_6:;
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_k.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_k,
            var_k.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((var_ndarray.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ndarray,
            var_ndarray.object
        );

    }
    if ((var_isscalar.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_isscalar,
            var_isscalar.object
        );

    }
    if ((var_signbit.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_signbit,
            var_signbit.object
        );

    }
    if ((var_iscomplexobj.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_iscomplexobj,
            var_iscomplexobj.object
        );

    }
    if ((var_real.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_real,
            var_real.object
        );

    }
    if ((var_imag.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_imag,
            var_imag.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_usecomplex.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_usecomplex,
            var_usecomplex.object
        );

    }
    if ((var_actualr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_actualr,
            var_actualr.object
        );

    }
    if ((var_actuali.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_actuali,
            var_actuali.object
        );

    }
    if ((var_desiredr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_desiredr,
            var_desiredr.object
        );

    }
    if ((var_desiredi.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_desiredi,
            var_desiredi.object
        );

    }
    if ((var_isdesnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_isdesnan,
            var_isdesnan.object
        );

    }
    if ((var_isactnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_isactnan,
            var_isactnan.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_desired,
            par_desired.object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    frame_function->f_lineno = 257;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_1, tmp_import_locals_1, const_tuple_str_plain_ndarray_str_plain_isscalar_str_plain_signbit_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 257;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_12 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_ndarray );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 257;
        goto frame_exception_exit_1;
    }
    assert( var_ndarray.object == NULL );
    var_ndarray.object = tmp_assign_source_12;

    tmp_import_globals_2 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_2 = PyDict_New();
    if ((var_k.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_k,
            var_k.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((var_ndarray.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_ndarray,
            var_ndarray.object
        );

    }
    if ((var_isscalar.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_isscalar,
            var_isscalar.object
        );

    }
    if ((var_signbit.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_signbit,
            var_signbit.object
        );

    }
    if ((var_iscomplexobj.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_iscomplexobj,
            var_iscomplexobj.object
        );

    }
    if ((var_real.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_real,
            var_real.object
        );

    }
    if ((var_imag.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_imag,
            var_imag.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_usecomplex.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_usecomplex,
            var_usecomplex.object
        );

    }
    if ((var_actualr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_actualr,
            var_actualr.object
        );

    }
    if ((var_actuali.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_actuali,
            var_actuali.object
        );

    }
    if ((var_desiredr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_desiredr,
            var_desiredr.object
        );

    }
    if ((var_desiredi.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_desiredi,
            var_desiredi.object
        );

    }
    if ((var_isdesnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_isdesnan,
            var_isdesnan.object
        );

    }
    if ((var_isactnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_isactnan,
            var_isactnan.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_desired,
            par_desired.object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    frame_function->f_lineno = 257;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_2, tmp_import_locals_2, const_tuple_str_plain_ndarray_str_plain_isscalar_str_plain_signbit_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_2 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 257;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_13 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_isscalar );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 257;
        goto frame_exception_exit_1;
    }
    assert( var_isscalar.object == NULL );
    var_isscalar.object = tmp_assign_source_13;

    tmp_import_globals_3 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_3 = PyDict_New();
    if ((var_k.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_k,
            var_k.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((var_ndarray.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_ndarray,
            var_ndarray.object
        );

    }
    if ((var_isscalar.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_isscalar,
            var_isscalar.object
        );

    }
    if ((var_signbit.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_signbit,
            var_signbit.object
        );

    }
    if ((var_iscomplexobj.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_iscomplexobj,
            var_iscomplexobj.object
        );

    }
    if ((var_real.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_real,
            var_real.object
        );

    }
    if ((var_imag.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_imag,
            var_imag.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_usecomplex.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_usecomplex,
            var_usecomplex.object
        );

    }
    if ((var_actualr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_actualr,
            var_actualr.object
        );

    }
    if ((var_actuali.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_actuali,
            var_actuali.object
        );

    }
    if ((var_desiredr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_desiredr,
            var_desiredr.object
        );

    }
    if ((var_desiredi.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_desiredi,
            var_desiredi.object
        );

    }
    if ((var_isdesnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_isdesnan,
            var_isdesnan.object
        );

    }
    if ((var_isactnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_isactnan,
            var_isactnan.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_desired,
            par_desired.object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    frame_function->f_lineno = 257;
    tmp_import_name_from_3 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_3, tmp_import_locals_3, const_tuple_str_plain_ndarray_str_plain_isscalar_str_plain_signbit_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_3 );
    if ( tmp_import_name_from_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 257;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_14 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_signbit );
    Py_DECREF( tmp_import_name_from_3 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 257;
        goto frame_exception_exit_1;
    }
    assert( var_signbit.object == NULL );
    var_signbit.object = tmp_assign_source_14;

    tmp_import_globals_4 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_4 = PyDict_New();
    if ((var_k.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_k,
            var_k.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((var_ndarray.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_ndarray,
            var_ndarray.object
        );

    }
    if ((var_isscalar.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_isscalar,
            var_isscalar.object
        );

    }
    if ((var_signbit.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_signbit,
            var_signbit.object
        );

    }
    if ((var_iscomplexobj.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_iscomplexobj,
            var_iscomplexobj.object
        );

    }
    if ((var_real.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_real,
            var_real.object
        );

    }
    if ((var_imag.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_imag,
            var_imag.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_usecomplex.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_usecomplex,
            var_usecomplex.object
        );

    }
    if ((var_actualr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_actualr,
            var_actualr.object
        );

    }
    if ((var_actuali.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_actuali,
            var_actuali.object
        );

    }
    if ((var_desiredr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_desiredr,
            var_desiredr.object
        );

    }
    if ((var_desiredi.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_desiredi,
            var_desiredi.object
        );

    }
    if ((var_isdesnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_isdesnan,
            var_isdesnan.object
        );

    }
    if ((var_isactnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_isactnan,
            var_isactnan.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_desired,
            par_desired.object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    frame_function->f_lineno = 258;
    tmp_import_name_from_4 = IMPORT_MODULE( const_str_digest_0b4e4303427381d5eb687ef96e3ca993, tmp_import_globals_4, tmp_import_locals_4, const_tuple_str_plain_iscomplexobj_str_plain_real_str_plain_imag_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_4 );
    if ( tmp_import_name_from_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 258;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_15 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_iscomplexobj );
    Py_DECREF( tmp_import_name_from_4 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 258;
        goto frame_exception_exit_1;
    }
    assert( var_iscomplexobj.object == NULL );
    var_iscomplexobj.object = tmp_assign_source_15;

    tmp_import_globals_5 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_5 = PyDict_New();
    if ((var_k.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_k,
            var_k.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((var_ndarray.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_ndarray,
            var_ndarray.object
        );

    }
    if ((var_isscalar.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_isscalar,
            var_isscalar.object
        );

    }
    if ((var_signbit.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_signbit,
            var_signbit.object
        );

    }
    if ((var_iscomplexobj.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_iscomplexobj,
            var_iscomplexobj.object
        );

    }
    if ((var_real.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_real,
            var_real.object
        );

    }
    if ((var_imag.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_imag,
            var_imag.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_usecomplex.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_usecomplex,
            var_usecomplex.object
        );

    }
    if ((var_actualr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_actualr,
            var_actualr.object
        );

    }
    if ((var_actuali.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_actuali,
            var_actuali.object
        );

    }
    if ((var_desiredr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_desiredr,
            var_desiredr.object
        );

    }
    if ((var_desiredi.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_desiredi,
            var_desiredi.object
        );

    }
    if ((var_isdesnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_isdesnan,
            var_isdesnan.object
        );

    }
    if ((var_isactnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_isactnan,
            var_isactnan.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_desired,
            par_desired.object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    frame_function->f_lineno = 258;
    tmp_import_name_from_5 = IMPORT_MODULE( const_str_digest_0b4e4303427381d5eb687ef96e3ca993, tmp_import_globals_5, tmp_import_locals_5, const_tuple_str_plain_iscomplexobj_str_plain_real_str_plain_imag_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_5 );
    if ( tmp_import_name_from_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 258;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_16 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_real );
    Py_DECREF( tmp_import_name_from_5 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 258;
        goto frame_exception_exit_1;
    }
    assert( var_real.object == NULL );
    var_real.object = tmp_assign_source_16;

    tmp_import_globals_6 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_6 = PyDict_New();
    if ((var_k.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_k,
            var_k.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((var_ndarray.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_ndarray,
            var_ndarray.object
        );

    }
    if ((var_isscalar.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_isscalar,
            var_isscalar.object
        );

    }
    if ((var_signbit.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_signbit,
            var_signbit.object
        );

    }
    if ((var_iscomplexobj.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_iscomplexobj,
            var_iscomplexobj.object
        );

    }
    if ((var_real.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_real,
            var_real.object
        );

    }
    if ((var_imag.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_imag,
            var_imag.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_usecomplex.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_usecomplex,
            var_usecomplex.object
        );

    }
    if ((var_actualr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_actualr,
            var_actualr.object
        );

    }
    if ((var_actuali.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_actuali,
            var_actuali.object
        );

    }
    if ((var_desiredr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_desiredr,
            var_desiredr.object
        );

    }
    if ((var_desiredi.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_desiredi,
            var_desiredi.object
        );

    }
    if ((var_isdesnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_isdesnan,
            var_isdesnan.object
        );

    }
    if ((var_isactnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_isactnan,
            var_isactnan.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_desired,
            par_desired.object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    frame_function->f_lineno = 258;
    tmp_import_name_from_6 = IMPORT_MODULE( const_str_digest_0b4e4303427381d5eb687ef96e3ca993, tmp_import_globals_6, tmp_import_locals_6, const_tuple_str_plain_iscomplexobj_str_plain_real_str_plain_imag_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_6 );
    if ( tmp_import_name_from_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 258;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_17 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_imag );
    Py_DECREF( tmp_import_name_from_6 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 258;
        goto frame_exception_exit_1;
    }
    assert( var_imag.object == NULL );
    var_imag.object = tmp_assign_source_17;

    // Tried code
    tmp_cond_value_3 = NULL;
    // Tried code
    tmp_isinstance_inst_5 = par_actual.object;

    if ( tmp_isinstance_inst_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 259;
        goto try_finally_handler_8;
    }

    tmp_isinstance_cls_5 = var_ndarray.object;

    tmp_assign_source_18 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_5, tmp_isinstance_cls_5 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 259;
        goto try_finally_handler_8;
    }
    assert( tmp_or_1__value_1.object == NULL );
    tmp_or_1__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_18 );

    tmp_cond_value_4 = tmp_or_1__value_1.object;

    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 259;
        goto try_finally_handler_8;
    }
    if (tmp_cond_truth_4 == 1)
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_cond_value_3 = tmp_or_1__value_1.object;

    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_cond_value_3 = NULL;
    // Tried code
    tmp_result = tmp_or_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_1__value_1.object );
        tmp_or_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_isinstance_inst_6 = par_desired.object;

    if ( tmp_isinstance_inst_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 259;
        goto try_finally_handler_9;
    }

    tmp_isinstance_cls_6 = var_ndarray.object;

    tmp_cond_value_3 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_6, tmp_isinstance_cls_6 );
    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 259;
        goto try_finally_handler_9;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_9:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_7 != NULL )
    {
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;

        goto try_finally_handler_8;
    }

    goto finally_end_7;
    finally_end_7:;
    condexpr_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_8:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_8 != NULL )
    {
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;

        goto try_finally_handler_7;
    }

    goto finally_end_8;
    finally_end_8:;
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 259;
        goto try_finally_handler_7;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_called_6 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_array_equal );

    if (unlikely( tmp_called_6 == NULL ))
    {
        tmp_called_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_assert_array_equal );
    }

    if ( tmp_called_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214320 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 260;
        goto try_finally_handler_7;
    }

    tmp_call_arg_element_17 = par_actual.object;

    if ( tmp_call_arg_element_17 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 260;
        goto try_finally_handler_7;
    }

    tmp_call_arg_element_18 = par_desired.object;

    if ( tmp_call_arg_element_18 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 260;
        goto try_finally_handler_7;
    }

    tmp_call_arg_element_19 = par_err_msg.object;

    if ( tmp_call_arg_element_19 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 260;
        goto try_finally_handler_7;
    }

    tmp_call_arg_element_20 = par_verbose.object;

    if ( tmp_call_arg_element_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49769 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 260;
        goto try_finally_handler_7;
    }

    frame_function->f_lineno = 260;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_6, tmp_call_arg_element_17, tmp_call_arg_element_18, tmp_call_arg_element_19, tmp_call_arg_element_20 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 260;
        goto try_finally_handler_7;
    }
    goto try_finally_handler_start_2;
    branch_no_5:;
    try_finally_handler_start_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_7:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_5 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_1__value_1.object );
    tmp_or_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_5;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_9 != NULL )
    {
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;

        goto frame_exception_exit_1;
    }

    // Return value if any.
    if ( tmp_return_value != NULL )
    {
        goto frame_return_exit_1;
    }

    goto finally_end_9;
    finally_end_9:;
    tmp_called_7 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_build_err_msg );

    if (unlikely( tmp_called_7 == NULL ))
    {
        tmp_called_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_build_err_msg );
    }

    if ( tmp_called_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214367 ], 42, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 261;
        goto frame_exception_exit_1;
    }

    tmp_call_pos_1 = PyTuple_New( 2 );
    tmp_tuple_element_5 = PyList_New( 2 );
    tmp_list_element_1 = par_actual.object;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_tuple_element_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 261;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_5, 0, tmp_list_element_1 );
    tmp_list_element_1 = par_desired.object;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_tuple_element_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 261;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_5, 1, tmp_list_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_5 );
    tmp_tuple_element_5 = par_err_msg.object;

    if ( tmp_tuple_element_5 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 261;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 1, tmp_tuple_element_5 );
    tmp_call_kw_1 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = par_verbose.object;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49769 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 261;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_1 = const_str_plain_verbose;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    frame_function->f_lineno = 261;
    tmp_assign_source_19 = CALL_FUNCTION( tmp_called_7, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 261;
        goto frame_exception_exit_1;
    }
    assert( var_msg.object == NULL );
    var_msg.object = tmp_assign_source_19;

    // Tried block of try/except
    // Tried code
    tmp_assign_source_20 = NULL;
    // Tried code
    tmp_called_8 = var_iscomplexobj.object;

    if ( tmp_called_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214409 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 267;
        goto try_finally_handler_11;
    }

    tmp_call_arg_element_21 = par_actual.object;

    if ( tmp_call_arg_element_21 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 267;
        goto try_finally_handler_11;
    }

    frame_function->f_lineno = 267;
    tmp_assign_source_21 = CALL_FUNCTION_WITH_ARGS1( tmp_called_8, tmp_call_arg_element_21 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 267;
        goto try_finally_handler_11;
    }
    assert( tmp_or_2__value_1.object == NULL );
    tmp_or_2__value_1.object = tmp_assign_source_21;

    tmp_cond_value_5 = tmp_or_2__value_1.object;

    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 267;
        goto try_finally_handler_11;
    }
    if (tmp_cond_truth_5 == 1)
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_assign_source_20 = tmp_or_2__value_1.object;

    Py_INCREF( tmp_assign_source_20 );
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_assign_source_20 = NULL;
    // Tried code
    tmp_result = tmp_or_2__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_2__value_1.object );
        tmp_or_2__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_called_9 = var_iscomplexobj.object;

    if ( tmp_called_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214409 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 267;
        goto try_finally_handler_12;
    }

    tmp_call_arg_element_22 = par_desired.object;

    if ( tmp_call_arg_element_22 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 267;
        goto try_finally_handler_12;
    }

    frame_function->f_lineno = 267;
    tmp_assign_source_20 = CALL_FUNCTION_WITH_ARGS1( tmp_called_9, tmp_call_arg_element_22 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 267;
        goto try_finally_handler_12;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_12:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_10 != NULL )
    {
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;

        goto try_finally_handler_11;
    }

    goto finally_end_10;
    finally_end_10:;
    condexpr_end_3:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_11:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_11 != NULL )
    {
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;

        goto try_finally_handler_10;
    }

    goto finally_end_11;
    finally_end_11:;
    assert( var_usecomplex.object == NULL );
    var_usecomplex.object = tmp_assign_source_20;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_10:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_6 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_2__value_1.object );
    tmp_or_2__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_6;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_12 != NULL )
    {
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;

        goto try_except_handler_1;
    }

    goto finally_end_12;
    finally_end_12:;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_ValueError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 268;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_assign_source_22 = Py_False;
    if (var_usecomplex.object == NULL)
    {
        var_usecomplex.object = INCREASE_REFCOUNT( tmp_assign_source_22 );
    }
    else
    {
        PyObject *old = var_usecomplex.object;
        var_usecomplex.object = INCREASE_REFCOUNT( tmp_assign_source_22 );
        Py_DECREF( old );
    }
    goto branch_end_6;
    branch_no_6:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_6:;
    try_except_end_1:;
    tmp_cond_value_6 = var_usecomplex.object;

    if ( tmp_cond_value_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214467 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 271;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 271;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_6 == 1)
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_called_10 = var_iscomplexobj.object;

    if ( tmp_called_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214409 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 272;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_23 = par_actual.object;

    if ( tmp_call_arg_element_23 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 272;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 272;
    tmp_cond_value_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_10, tmp_call_arg_element_23 );
    if ( tmp_cond_value_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 272;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_7 );

        frame_function->f_lineno = 272;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_7 );
    if (tmp_cond_truth_7 == 1)
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_called_11 = var_real.object;

    if ( tmp_called_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214523 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 273;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_24 = par_actual.object;

    if ( tmp_call_arg_element_24 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 273;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 273;
    tmp_assign_source_23 = CALL_FUNCTION_WITH_ARGS1( tmp_called_11, tmp_call_arg_element_24 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 273;
        goto frame_exception_exit_1;
    }
    assert( var_actualr.object == NULL );
    var_actualr.object = tmp_assign_source_23;

    tmp_called_12 = var_imag.object;

    if ( tmp_called_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214573 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 274;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_25 = par_actual.object;

    if ( tmp_call_arg_element_25 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 274;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 274;
    tmp_assign_source_24 = CALL_FUNCTION_WITH_ARGS1( tmp_called_12, tmp_call_arg_element_25 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 274;
        goto frame_exception_exit_1;
    }
    assert( var_actuali.object == NULL );
    var_actuali.object = tmp_assign_source_24;

    goto branch_end_8;
    branch_no_8:;
    tmp_assign_source_25 = par_actual.object;

    if ( tmp_assign_source_25 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 276;
        goto frame_exception_exit_1;
    }

    assert( var_actualr.object == NULL );
    var_actualr.object = INCREASE_REFCOUNT( tmp_assign_source_25 );

    tmp_assign_source_26 = const_int_0;
    assert( var_actuali.object == NULL );
    var_actuali.object = INCREASE_REFCOUNT( tmp_assign_source_26 );

    branch_end_8:;
    tmp_called_13 = var_iscomplexobj.object;

    if ( tmp_called_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214409 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 278;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_26 = par_desired.object;

    if ( tmp_call_arg_element_26 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 278;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 278;
    tmp_cond_value_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_13, tmp_call_arg_element_26 );
    if ( tmp_cond_value_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 278;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_8 );

        frame_function->f_lineno = 278;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_8 );
    if (tmp_cond_truth_8 == 1)
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_called_14 = var_real.object;

    if ( tmp_called_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214523 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 279;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_27 = par_desired.object;

    if ( tmp_call_arg_element_27 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 279;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 279;
    tmp_assign_source_27 = CALL_FUNCTION_WITH_ARGS1( tmp_called_14, tmp_call_arg_element_27 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 279;
        goto frame_exception_exit_1;
    }
    assert( var_desiredr.object == NULL );
    var_desiredr.object = tmp_assign_source_27;

    tmp_called_15 = var_imag.object;

    if ( tmp_called_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214573 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 280;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_28 = par_desired.object;

    if ( tmp_call_arg_element_28 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 280;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 280;
    tmp_assign_source_28 = CALL_FUNCTION_WITH_ARGS1( tmp_called_15, tmp_call_arg_element_28 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 280;
        goto frame_exception_exit_1;
    }
    assert( var_desiredi.object == NULL );
    var_desiredi.object = tmp_assign_source_28;

    goto branch_end_9;
    branch_no_9:;
    tmp_assign_source_29 = par_desired.object;

    if ( tmp_assign_source_29 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 282;
        goto frame_exception_exit_1;
    }

    assert( var_desiredr.object == NULL );
    var_desiredr.object = INCREASE_REFCOUNT( tmp_assign_source_29 );

    tmp_assign_source_30 = const_int_0;
    assert( var_desiredi.object == NULL );
    var_desiredi.object = INCREASE_REFCOUNT( tmp_assign_source_30 );

    branch_end_9:;
    // Tried block of try/except
    tmp_called_16 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_equal );

    if (unlikely( tmp_called_16 == NULL ))
    {
        tmp_called_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_assert_equal );
    }

    if ( tmp_called_16 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214279 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 285;
        goto try_except_handler_2;
    }

    tmp_call_arg_element_29 = var_actualr.object;

    tmp_call_arg_element_30 = var_desiredr.object;

    frame_function->f_lineno = 285;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_16, tmp_call_arg_element_29, tmp_call_arg_element_30 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 285;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    tmp_called_17 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_equal );

    if (unlikely( tmp_called_17 == NULL ))
    {
        tmp_called_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_assert_equal );
    }

    if ( tmp_called_17 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214279 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 286;
        goto try_except_handler_2;
    }

    tmp_call_arg_element_31 = var_actuali.object;

    tmp_call_arg_element_32 = var_desiredi.object;

    frame_function->f_lineno = 286;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_17, tmp_call_arg_element_31, tmp_call_arg_element_32 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 286;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    goto try_except_end_2;
    try_except_handler_2:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_3 = PyThreadState_GET()->exc_type;
    tmp_compare_right_3 = PyExc_AssertionError;
    tmp_exc_match_exception_match_2 = EXCEPTION_MATCH_BOOL( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_exc_match_exception_match_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 287;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_2 == 1)
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_make_exception_arg_3 = var_msg.object;

    if ( tmp_make_exception_arg_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 288;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 288;
    tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_3 );
    if ( tmp_raise_type_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 288;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_3;
    frame_function->f_lineno = 288;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    goto branch_end_10;
    branch_no_10:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_10:;
    try_except_end_2:;
    branch_no_7:;
    // Tried block of try/except
    tmp_called_18 = var_isscalar.object;

    if ( tmp_called_18 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214623 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 293;
        goto try_except_handler_3;
    }

    tmp_call_arg_element_33 = par_desired.object;

    if ( tmp_call_arg_element_33 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 293;
        goto try_except_handler_3;
    }

    frame_function->f_lineno = 293;
    tmp_compare_left_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_18, tmp_call_arg_element_33 );
    if ( tmp_compare_left_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 293;
        goto try_except_handler_3;
    }
    tmp_called_19 = var_isscalar.object;

    if ( tmp_called_19 == NULL )
    {
        Py_DECREF( tmp_compare_left_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214623 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 293;
        goto try_except_handler_3;
    }

    tmp_call_arg_element_34 = par_actual.object;

    if ( tmp_call_arg_element_34 == NULL )
    {
        Py_DECREF( tmp_compare_left_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 293;
        goto try_except_handler_3;
    }

    frame_function->f_lineno = 293;
    tmp_compare_right_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_19, tmp_call_arg_element_34 );
    if ( tmp_compare_right_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_4 );

        frame_function->f_lineno = 293;
        goto try_except_handler_3;
    }
    tmp_cmp_NotEq_1 = RICH_COMPARE_BOOL_NE( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_cmp_NotEq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_4 );
        Py_DECREF( tmp_compare_right_4 );

        frame_function->f_lineno = 293;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_compare_left_4 );
    Py_DECREF( tmp_compare_right_4 );
    if (tmp_cmp_NotEq_1 == 1)
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_make_exception_arg_4 = var_msg.object;

    if ( tmp_make_exception_arg_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 294;
        goto try_except_handler_3;
    }

    frame_function->f_lineno = 294;
    tmp_raise_type_4 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_4 );
    if ( tmp_raise_type_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 294;
        goto try_except_handler_3;
    }
    exception_type = tmp_raise_type_4;
    frame_function->f_lineno = 294;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_except_handler_3;
    branch_no_11:;
    tmp_cond_value_9 = NULL;
    // Tried code
    tmp_unary_arg_3 = NULL;
    // Tried code
    tmp_called_20 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisfinite );

    if (unlikely( tmp_called_20 == NULL ))
    {
        tmp_called_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisfinite );
    }

    if ( tmp_called_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214677 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 299;
        goto try_finally_handler_14;
    }

    tmp_call_arg_element_35 = par_desired.object;

    if ( tmp_call_arg_element_35 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 299;
        goto try_finally_handler_14;
    }

    frame_function->f_lineno = 299;
    tmp_assign_source_31 = CALL_FUNCTION_WITH_ARGS1( tmp_called_20, tmp_call_arg_element_35 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 299;
        goto try_finally_handler_14;
    }
    assert( tmp_and_2__value_1.object == NULL );
    tmp_and_2__value_1.object = tmp_assign_source_31;

    tmp_cond_value_10 = tmp_and_2__value_1.object;

    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 299;
        goto try_finally_handler_14;
    }
    if (tmp_cond_truth_10 == 1)
    {
        goto condexpr_true_4;
    }
    else
    {
        goto condexpr_false_4;
    }
    condexpr_true_4:;
    tmp_unary_arg_3 = NULL;
    // Tried code
    tmp_result = tmp_and_2__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_2__value_1.object );
        tmp_and_2__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_called_21 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisfinite );

    if (unlikely( tmp_called_21 == NULL ))
    {
        tmp_called_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisfinite );
    }

    if ( tmp_called_21 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214677 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 299;
        goto try_finally_handler_15;
    }

    tmp_call_arg_element_36 = par_actual.object;

    if ( tmp_call_arg_element_36 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 299;
        goto try_finally_handler_15;
    }

    frame_function->f_lineno = 299;
    tmp_unary_arg_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_21, tmp_call_arg_element_36 );
    if ( tmp_unary_arg_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 299;
        goto try_finally_handler_15;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_15:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_13 != NULL )
    {
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;

        goto try_finally_handler_14;
    }

    goto finally_end_13;
    finally_end_13:;
    goto condexpr_end_4;
    condexpr_false_4:;
    tmp_unary_arg_3 = tmp_and_2__value_1.object;

    Py_INCREF( tmp_unary_arg_3 );
    condexpr_end_4:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_14:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_14 != NULL )
    {
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;

        goto try_finally_handler_13;
    }

    goto finally_end_14;
    finally_end_14:;
    tmp_cond_value_9 = UNARY_OPERATION( UNARY_NOT, tmp_unary_arg_3 );
    Py_DECREF( tmp_unary_arg_3 );
    if ( tmp_cond_value_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 299;
        goto try_finally_handler_13;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_13:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_7 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_2__value_1.object );
    tmp_and_2__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_7;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_15 != NULL )
    {
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;

        goto try_except_handler_3;
    }

    goto finally_end_15;
    finally_end_15:;
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 299;
        goto try_except_handler_3;
    }
    if (tmp_cond_truth_9 == 1)
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_called_22 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisnan );

    if (unlikely( tmp_called_22 == NULL ))
    {
        tmp_called_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisnan );
    }

    if ( tmp_called_22 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214715 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 300;
        goto try_except_handler_3;
    }

    tmp_call_arg_element_37 = par_desired.object;

    if ( tmp_call_arg_element_37 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 300;
        goto try_except_handler_3;
    }

    frame_function->f_lineno = 300;
    tmp_assign_source_32 = CALL_FUNCTION_WITH_ARGS1( tmp_called_22, tmp_call_arg_element_37 );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 300;
        goto try_except_handler_3;
    }
    assert( var_isdesnan.object == NULL );
    var_isdesnan.object = tmp_assign_source_32;

    tmp_called_23 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisnan );

    if (unlikely( tmp_called_23 == NULL ))
    {
        tmp_called_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisnan );
    }

    if ( tmp_called_23 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214715 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 301;
        goto try_except_handler_3;
    }

    tmp_call_arg_element_38 = par_actual.object;

    if ( tmp_call_arg_element_38 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 301;
        goto try_except_handler_3;
    }

    frame_function->f_lineno = 301;
    tmp_assign_source_33 = CALL_FUNCTION_WITH_ARGS1( tmp_called_23, tmp_call_arg_element_38 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 301;
        goto try_except_handler_3;
    }
    assert( var_isactnan.object == NULL );
    var_isactnan.object = tmp_assign_source_33;

    // Tried code
    tmp_cond_value_11 = NULL;
    // Tried code
    tmp_assign_source_34 = var_isdesnan.object;

    assert( tmp_or_3__value_1.object == NULL );
    tmp_or_3__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_34 );

    tmp_cond_value_12 = tmp_or_3__value_1.object;

    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 302;
        goto try_finally_handler_17;
    }
    if (tmp_cond_truth_12 == 1)
    {
        goto condexpr_true_5;
    }
    else
    {
        goto condexpr_false_5;
    }
    condexpr_true_5:;
    tmp_cond_value_11 = tmp_or_3__value_1.object;

    goto condexpr_end_5;
    condexpr_false_5:;
    tmp_cond_value_11 = NULL;
    // Tried code
    tmp_result = tmp_or_3__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_3__value_1.object );
        tmp_or_3__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_11 = var_isactnan.object;

    // Re-reraise as necessary after finally was executed.
    goto finally_end_16;
    finally_end_16:;
    condexpr_end_5:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_17:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_16 != NULL )
    {
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;

        goto try_finally_handler_16;
    }

    goto finally_end_17;
    finally_end_17:;
    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 302;
        goto try_finally_handler_16;
    }
    if (tmp_cond_truth_11 == 1)
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_cond_value_13 = NULL;
    // Tried code
    tmp_unary_arg_4 = NULL;
    // Tried code
    tmp_assign_source_35 = var_isdesnan.object;

    if ( tmp_assign_source_35 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214750 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 303;
        goto try_finally_handler_20;
    }

    assert( tmp_and_3__value_1.object == NULL );
    tmp_and_3__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_35 );

    tmp_cond_value_14 = tmp_and_3__value_1.object;

    tmp_cond_truth_14 = CHECK_IF_TRUE( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 303;
        goto try_finally_handler_20;
    }
    if (tmp_cond_truth_14 == 1)
    {
        goto condexpr_true_6;
    }
    else
    {
        goto condexpr_false_6;
    }
    condexpr_true_6:;
    tmp_unary_arg_4 = NULL;
    // Tried code
    tmp_result = tmp_and_3__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_3__value_1.object );
        tmp_and_3__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_unary_arg_4 = var_isactnan.object;

    if ( tmp_unary_arg_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214804 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 303;
        goto try_finally_handler_21;
    }

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_21:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_17 != NULL )
    {
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;

        goto try_finally_handler_20;
    }

    goto finally_end_18;
    finally_end_18:;
    goto condexpr_end_6;
    condexpr_false_6:;
    tmp_unary_arg_4 = tmp_and_3__value_1.object;

    condexpr_end_6:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_20:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_18 != NULL )
    {
        exception_type = exception_keeper_type_18;
        exception_value = exception_keeper_value_18;
        exception_tb = exception_keeper_tb_18;

        goto try_finally_handler_19;
    }

    goto finally_end_19;
    finally_end_19:;
    tmp_cond_value_13 = UNARY_OPERATION( UNARY_NOT, tmp_unary_arg_4 );
    if ( tmp_cond_value_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 303;
        goto try_finally_handler_19;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_19:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_8 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_3__value_1.object );
    tmp_and_3__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_8;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_19 != NULL )
    {
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;

        goto try_finally_handler_16;
    }

    goto finally_end_20;
    finally_end_20:;
    tmp_cond_truth_13 = CHECK_IF_TRUE( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 303;
        goto try_finally_handler_16;
    }
    if (tmp_cond_truth_13 == 1)
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_make_exception_arg_5 = var_msg.object;

    if ( tmp_make_exception_arg_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 304;
        goto try_finally_handler_16;
    }

    frame_function->f_lineno = 304;
    tmp_raise_type_5 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_5 );
    if ( tmp_raise_type_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 304;
        goto try_finally_handler_16;
    }
    exception_type = tmp_raise_type_5;
    frame_function->f_lineno = 304;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_16;
    branch_no_14:;
    goto branch_end_13;
    branch_no_13:;
    tmp_compare_left_5 = par_desired.object;

    if ( tmp_compare_left_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 306;
        goto try_finally_handler_16;
    }

    tmp_compare_right_5 = par_actual.object;

    if ( tmp_compare_right_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 306;
        goto try_finally_handler_16;
    }

    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_5, tmp_compare_right_5 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 306;
        goto try_finally_handler_16;
    }
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_no_15;
    }
    else
    {
        goto branch_yes_15;
    }
    branch_yes_15:;
    tmp_make_exception_arg_6 = var_msg.object;

    if ( tmp_make_exception_arg_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 307;
        goto try_finally_handler_16;
    }

    frame_function->f_lineno = 307;
    tmp_raise_type_6 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_6 );
    if ( tmp_raise_type_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 307;
        goto try_finally_handler_16;
    }
    exception_type = tmp_raise_type_6;
    frame_function->f_lineno = 307;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_16;
    branch_no_15:;
    branch_end_13:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_16:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_9 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_3__value_1.object );
    tmp_or_3__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_9;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_20 != NULL )
    {
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;

        goto try_except_handler_3;
    }

    goto finally_end_21;
    finally_end_21:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    goto branch_end_12;
    branch_no_12:;
    // Tried code
    tmp_cond_value_15 = NULL;
    // Tried code
    tmp_compexpr_left_1 = par_desired.object;

    if ( tmp_compexpr_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 309;
        goto try_finally_handler_23;
    }

    tmp_compexpr_right_1 = const_int_0;
    tmp_assign_source_36 = RICH_COMPARE_EQ( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 309;
        goto try_finally_handler_23;
    }
    assert( tmp_and_4__value_1.object == NULL );
    tmp_and_4__value_1.object = tmp_assign_source_36;

    tmp_cond_value_16 = tmp_and_4__value_1.object;

    tmp_cond_truth_16 = CHECK_IF_TRUE( tmp_cond_value_16 );
    if ( tmp_cond_truth_16 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 309;
        goto try_finally_handler_23;
    }
    if (tmp_cond_truth_16 == 1)
    {
        goto condexpr_true_7;
    }
    else
    {
        goto condexpr_false_7;
    }
    condexpr_true_7:;
    tmp_cond_value_15 = NULL;
    // Tried code
    tmp_result = tmp_and_4__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_4__value_1.object );
        tmp_and_4__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_2 = par_actual.object;

    if ( tmp_compexpr_left_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 309;
        goto try_finally_handler_24;
    }

    tmp_compexpr_right_2 = const_int_0;
    tmp_cond_value_15 = RICH_COMPARE_EQ( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    if ( tmp_cond_value_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 309;
        goto try_finally_handler_24;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_24:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_21 != NULL )
    {
        exception_type = exception_keeper_type_21;
        exception_value = exception_keeper_value_21;
        exception_tb = exception_keeper_tb_21;

        goto try_finally_handler_23;
    }

    goto finally_end_22;
    finally_end_22:;
    goto condexpr_end_7;
    condexpr_false_7:;
    tmp_cond_value_15 = tmp_and_4__value_1.object;

    Py_INCREF( tmp_cond_value_15 );
    condexpr_end_7:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_23:;
    exception_keeper_type_22 = exception_type;
    exception_keeper_value_22 = exception_value;
    exception_keeper_tb_22 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_22 != NULL )
    {
        exception_type = exception_keeper_type_22;
        exception_value = exception_keeper_value_22;
        exception_tb = exception_keeper_tb_22;

        goto try_finally_handler_22;
    }

    goto finally_end_23;
    finally_end_23:;
    tmp_cond_truth_15 = CHECK_IF_TRUE( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_15 );

        frame_function->f_lineno = 309;
        goto try_finally_handler_22;
    }
    Py_DECREF( tmp_cond_value_15 );
    if (tmp_cond_truth_15 == 1)
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_called_24 = var_signbit.object;

    if ( tmp_called_24 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214858 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 310;
        goto try_finally_handler_22;
    }

    tmp_call_arg_element_39 = par_desired.object;

    if ( tmp_call_arg_element_39 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 310;
        goto try_finally_handler_22;
    }

    frame_function->f_lineno = 310;
    tmp_compare_left_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_24, tmp_call_arg_element_39 );
    if ( tmp_compare_left_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 310;
        goto try_finally_handler_22;
    }
    tmp_called_25 = var_signbit.object;

    if ( tmp_called_25 == NULL )
    {
        Py_DECREF( tmp_compare_left_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214858 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 310;
        goto try_finally_handler_22;
    }

    tmp_call_arg_element_40 = par_actual.object;

    if ( tmp_call_arg_element_40 == NULL )
    {
        Py_DECREF( tmp_compare_left_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 310;
        goto try_finally_handler_22;
    }

    frame_function->f_lineno = 310;
    tmp_compare_right_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_25, tmp_call_arg_element_40 );
    if ( tmp_compare_right_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_6 );

        frame_function->f_lineno = 310;
        goto try_finally_handler_22;
    }
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_6, tmp_compare_right_6 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_6 );
        Py_DECREF( tmp_compare_right_6 );

        frame_function->f_lineno = 310;
        goto try_finally_handler_22;
    }
    Py_DECREF( tmp_compare_left_6 );
    Py_DECREF( tmp_compare_right_6 );
    if (tmp_cmp_Eq_2 == 1)
    {
        goto branch_no_17;
    }
    else
    {
        goto branch_yes_17;
    }
    branch_yes_17:;
    tmp_make_exception_arg_7 = var_msg.object;

    if ( tmp_make_exception_arg_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 311;
        goto try_finally_handler_22;
    }

    frame_function->f_lineno = 311;
    tmp_raise_type_7 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_7 );
    if ( tmp_raise_type_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 311;
        goto try_finally_handler_22;
    }
    exception_type = tmp_raise_type_7;
    frame_function->f_lineno = 311;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_22;
    branch_no_17:;
    branch_no_16:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_22:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_10 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_4__value_1.object );
    tmp_and_4__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_10;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_23 != NULL )
    {
        exception_type = exception_keeper_type_23;
        exception_value = exception_keeper_value_23;
        exception_tb = exception_keeper_tb_23;

        goto try_except_handler_3;
    }

    goto finally_end_24;
    finally_end_24:;
    branch_end_12:;
    goto try_except_end_3;
    try_except_handler_3:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_7 = PyThreadState_GET()->exc_type;
    tmp_compare_right_7 = PyTuple_New( 3 );
    tmp_tuple_element_6 = PyExc_TypeError;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_compare_right_7, 0, tmp_tuple_element_6 );
    tmp_tuple_element_6 = PyExc_ValueError;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_compare_right_7, 1, tmp_tuple_element_6 );
    tmp_tuple_element_6 = PyExc_NotImplementedError;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_compare_right_7, 2, tmp_tuple_element_6 );
    tmp_exc_match_exception_match_3 = EXCEPTION_MATCH_BOOL( tmp_compare_left_7, tmp_compare_right_7 );
    if ( tmp_exc_match_exception_match_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_7 );

        frame_function->f_lineno = 314;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_7 );
    if (tmp_exc_match_exception_match_3 == 1)
    {
        goto branch_no_18;
    }
    else
    {
        goto branch_yes_18;
    }
    branch_yes_18:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_no_18:;
    try_except_end_3:;
    tmp_compare_left_8 = par_desired.object;

    if ( tmp_compare_left_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 316;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_8 = par_actual.object;

    if ( tmp_compare_right_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 316;
        goto frame_exception_exit_1;
    }

    tmp_cmp_NotEq_2 = RICH_COMPARE_BOOL_NE( tmp_compare_left_8, tmp_compare_right_8 );
    if ( tmp_cmp_NotEq_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 316;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_NotEq_2 == 1)
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_make_exception_arg_8 = var_msg.object;

    if ( tmp_make_exception_arg_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 317;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 317;
    tmp_raise_type_8 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_8 );
    if ( tmp_raise_type_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 317;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_8;
    frame_function->f_lineno = 317;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_19:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_k.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_k,
            var_k.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((var_ndarray.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ndarray,
            var_ndarray.object
        );

    }
    if ((var_isscalar.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_isscalar,
            var_isscalar.object
        );

    }
    if ((var_signbit.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_signbit,
            var_signbit.object
        );

    }
    if ((var_iscomplexobj.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_iscomplexobj,
            var_iscomplexobj.object
        );

    }
    if ((var_real.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_real,
            var_real.object
        );

    }
    if ((var_imag.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_imag,
            var_imag.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_usecomplex.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_usecomplex,
            var_usecomplex.object
        );

    }
    if ((var_actualr.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_actualr,
            var_actualr.object
        );

    }
    if ((var_actuali.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_actuali,
            var_actuali.object
        );

    }
    if ((var_desiredr.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_desiredr,
            var_desiredr.object
        );

    }
    if ((var_desiredi.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_desiredi,
            var_desiredi.object
        );

    }
    if ((var_isdesnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_isdesnan,
            var_isdesnan.object
        );

    }
    if ((var_isactnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_isactnan,
            var_isactnan.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_desired,
            par_desired.object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_13_assert_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_actual = NULL;
    PyObject *_python_par_desired = NULL;
    PyObject *_python_par_err_msg = NULL;
    PyObject *_python_par_verbose = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "assert_equal() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_actual == key )
            {
                assert( _python_par_actual == NULL );
                _python_par_actual = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_desired == key )
            {
                assert( _python_par_desired == NULL );
                _python_par_desired = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_err_msg == key )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_verbose == key )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_actual, key ) == 1 )
            {
                assert( _python_par_actual == NULL );
                _python_par_actual = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_desired, key ) == 1 )
            {
                assert( _python_par_desired == NULL );
                _python_par_desired = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_err_msg, key ) == 1 )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_verbose, key ) == 1 )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "assert_equal() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_actual != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_actual = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_actual == NULL )
    {
        if ( 0 + self->m_defaults_given >= 4  )
        {
            _python_par_actual = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_desired != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_desired = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_desired == NULL )
    {
        if ( 1 + self->m_defaults_given >= 4  )
        {
            _python_par_desired = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_err_msg != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_err_msg = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_err_msg == NULL )
    {
        if ( 2 + self->m_defaults_given >= 4  )
        {
            _python_par_err_msg = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_verbose != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_verbose = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_verbose == NULL )
    {
        if ( 3 + self->m_defaults_given >= 4  )
        {
            _python_par_verbose = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_actual == NULL || _python_par_desired == NULL || _python_par_err_msg == NULL || _python_par_verbose == NULL ))
    {
        PyObject *values[] = { _python_par_actual, _python_par_desired, _python_par_err_msg, _python_par_verbose };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_13_assert_equal_of_module_numpy$testing$utils( self, _python_par_actual, _python_par_desired, _python_par_err_msg, _python_par_verbose );

error_exit:;

    Py_XDECREF( _python_par_actual );
    Py_XDECREF( _python_par_desired );
    Py_XDECREF( _python_par_err_msg );
    Py_XDECREF( _python_par_verbose );

    return NULL;
}

static PyObject *dparse_function_13_assert_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4 )
    {
        return impl_function_13_assert_equal_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_13_assert_equal_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_14_print_assert_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_test_string, PyObject *_python_par_actual, PyObject *_python_par_desired )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_test_string; par_test_string.object = _python_par_test_string;
    PyObjectLocalVariable par_actual; par_actual.object = _python_par_actual;
    PyObjectLocalVariable par_desired; par_desired.object = _python_par_desired;
    PyObjectLocalVariable var_pprint;
    PyObjectLocalVariable var_msg;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    int tmp_cmp_Eq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_0575d1336f90d94cc243cdfd51018eec, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_pprint.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_pprint,
            var_pprint.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((par_test_string.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_test_string,
            par_test_string.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_desired,
            par_desired.object
        );

    }
    frame_function->f_lineno = 347;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_pprint, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 347;
        goto frame_exception_exit_1;
    }
    assert( var_pprint.object == NULL );
    var_pprint.object = tmp_assign_source_1;

    tmp_compare_left_1 = par_actual.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 349;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = par_desired.object;

    if ( tmp_compare_right_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 349;
        goto frame_exception_exit_1;
    }

    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 349;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_StringIO );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StringIO );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214911 ], 37, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 350;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 350;
    tmp_assign_source_2 = CALL_FUNCTION_NO_ARGS( tmp_called_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 350;
        goto frame_exception_exit_1;
    }
    assert( var_msg.object == NULL );
    var_msg.object = tmp_assign_source_2;

    tmp_source_name_1 = var_msg.object;

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_write );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 351;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = par_test_string.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214948 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 351;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 351;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 351;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_2 = var_msg.object;

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_write );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 352;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_2 = const_str_digest_9a015f18a46d205149e8a83cc434c73c;
    frame_function->f_lineno = 352;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 352;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_3 = var_pprint.object;

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_pprint );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 353;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_3 = par_actual.object;

    if ( tmp_call_arg_element_3 == NULL )
    {
        Py_DECREF( tmp_called_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 353;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_4 = var_msg.object;

    frame_function->f_lineno = 353;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_4, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 353;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_4 = var_msg.object;

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_write );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 354;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_5 = const_str_digest_54a89d3000093388391e8875650c39b5;
    frame_function->f_lineno = 354;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_5 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 354;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_5 = var_pprint.object;

    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_pprint );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 355;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_6 = par_desired.object;

    if ( tmp_call_arg_element_6 == NULL )
    {
        Py_DECREF( tmp_called_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 355;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_7 = var_msg.object;

    frame_function->f_lineno = 355;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_6, tmp_call_arg_element_6, tmp_call_arg_element_7 );
    Py_DECREF( tmp_called_6 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 355;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_6 = var_msg.object;

    tmp_called_7 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_getvalue );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 356;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 356;
    tmp_make_exception_arg_1 = CALL_FUNCTION_NO_ARGS( tmp_called_7 );
    Py_DECREF( tmp_called_7 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 356;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 356;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_1 );
    Py_DECREF( tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 356;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 356;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_pprint.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_pprint,
            var_pprint.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((par_test_string.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_test_string,
            par_test_string.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_desired,
            par_desired.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_14_print_assert_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_test_string = NULL;
    PyObject *_python_par_actual = NULL;
    PyObject *_python_par_desired = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "print_assert_equal() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_test_string == key )
            {
                assert( _python_par_test_string == NULL );
                _python_par_test_string = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_actual == key )
            {
                assert( _python_par_actual == NULL );
                _python_par_actual = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_desired == key )
            {
                assert( _python_par_desired == NULL );
                _python_par_desired = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_test_string, key ) == 1 )
            {
                assert( _python_par_test_string == NULL );
                _python_par_test_string = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_actual, key ) == 1 )
            {
                assert( _python_par_actual == NULL );
                _python_par_actual = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_desired, key ) == 1 )
            {
                assert( _python_par_desired == NULL );
                _python_par_desired = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "print_assert_equal() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_test_string != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_test_string = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_test_string == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_test_string = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_actual != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_actual = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_actual == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_actual = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_desired != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_desired = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_desired == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_desired = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_test_string == NULL || _python_par_actual == NULL || _python_par_desired == NULL ))
    {
        PyObject *values[] = { _python_par_test_string, _python_par_actual, _python_par_desired };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_14_print_assert_equal_of_module_numpy$testing$utils( self, _python_par_test_string, _python_par_actual, _python_par_desired );

error_exit:;

    Py_XDECREF( _python_par_test_string );
    Py_XDECREF( _python_par_actual );
    Py_XDECREF( _python_par_desired );

    return NULL;
}

static PyObject *dparse_function_14_print_assert_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_14_print_assert_equal_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_14_print_assert_equal_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_15_assert_almost_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_actual, PyObject *_python_par_desired, PyObject *_python_par_decimal, PyObject *_python_par_err_msg, PyObject *_python_par_verbose )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_actual; par_actual.object = _python_par_actual;
    PyObjectLocalVariable par_desired; par_desired.object = _python_par_desired;
    PyObjectLocalVariable par_decimal; par_decimal.object = _python_par_decimal;
    PyObjectLocalVariable par_err_msg; par_err_msg.object = _python_par_err_msg;
    PyObjectLocalVariable par_verbose; par_verbose.object = _python_par_verbose;
    PyObjectLocalVariable var_ndarray;
    PyObjectLocalVariable var_iscomplexobj;
    PyObjectLocalVariable var_real;
    PyObjectLocalVariable var_imag;
    PyObjectLocalVariable var_usecomplex;
    PyObjectLocalVariable var_msg;
    PyObjectLocalVariable var_actualr;
    PyObjectLocalVariable var_actuali;
    PyObjectLocalVariable var_desiredr;
    PyObjectLocalVariable var_desiredi;
    PyObjectTempVariable tmp_or_1__value_1;
    PyObjectTempVariable tmp_or_2__value_1;
    PyObjectTempVariable tmp_and_1__value_1;
    PyObjectTempVariable tmp_or_3__value_1;
    PyObjectTempVariable tmp_and_2__value_1;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_call_arg_element_14;
    PyObject *tmp_call_arg_element_15;
    PyObject *tmp_call_arg_element_16;
    PyObject *tmp_call_arg_element_17;
    PyObject *tmp_call_arg_element_18;
    PyObject *tmp_call_arg_element_19;
    PyObject *tmp_call_arg_element_20;
    PyObject *tmp_call_arg_element_21;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_kw_2;
    PyObject *tmp_call_kw_3;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_call_pos_2;
    PyObject *tmp_call_pos_3;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    PyObject *tmp_called_11;
    PyObject *tmp_called_12;
    PyObject *tmp_called_13;
    PyObject *tmp_called_14;
    PyObject *tmp_called_15;
    PyObject *tmp_called_16;
    PyObject *tmp_called_17;
    PyObject *tmp_called_18;
    PyObject *tmp_called_19;
    PyObject *tmp_called_20;
    int tmp_cmp_Eq_1;
    int tmp_cmp_NotEq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    int tmp_exc_match_exception_match_1;
    int tmp_exc_match_exception_match_2;
    int tmp_exc_match_exception_match_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_globals_4;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_locals_2;
    PyObject *tmp_import_locals_3;
    PyObject *tmp_import_locals_4;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_import_name_from_3;
    PyObject *tmp_import_name_from_4;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_list_element_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_make_exception_arg_3;
    PyObject *tmp_make_exception_arg_4;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_type_3;
    PyObject *tmp_raise_type_4;
    bool tmp_result;
    PyObject *tmp_return_value;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    int tmp_tried_lineno_4;
    int tmp_tried_lineno_5;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_unary_arg_1;
    PyObject *tmp_unary_arg_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_1bd7d53ae619425e53983e6d65b0153c, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_ndarray.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ndarray,
            var_ndarray.object
        );

    }
    if ((var_iscomplexobj.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_iscomplexobj,
            var_iscomplexobj.object
        );

    }
    if ((var_real.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_real,
            var_real.object
        );

    }
    if ((var_imag.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_imag,
            var_imag.object
        );

    }
    if ((var_usecomplex.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_usecomplex,
            var_usecomplex.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_actualr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_actualr,
            var_actualr.object
        );

    }
    if ((var_actuali.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_actuali,
            var_actuali.object
        );

    }
    if ((var_desiredr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_desiredr,
            var_desiredr.object
        );

    }
    if ((var_desiredi.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_desiredi,
            var_desiredi.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_desired,
            par_desired.object
        );

    }
    if ((par_decimal.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_decimal,
            par_decimal.object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    frame_function->f_lineno = 419;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_1, tmp_import_locals_1, const_tuple_str_plain_ndarray_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 419;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_ndarray );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 419;
        goto frame_exception_exit_1;
    }
    assert( var_ndarray.object == NULL );
    var_ndarray.object = tmp_assign_source_1;

    tmp_import_globals_2 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_2 = PyDict_New();
    if ((var_ndarray.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_ndarray,
            var_ndarray.object
        );

    }
    if ((var_iscomplexobj.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_iscomplexobj,
            var_iscomplexobj.object
        );

    }
    if ((var_real.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_real,
            var_real.object
        );

    }
    if ((var_imag.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_imag,
            var_imag.object
        );

    }
    if ((var_usecomplex.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_usecomplex,
            var_usecomplex.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_actualr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_actualr,
            var_actualr.object
        );

    }
    if ((var_actuali.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_actuali,
            var_actuali.object
        );

    }
    if ((var_desiredr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_desiredr,
            var_desiredr.object
        );

    }
    if ((var_desiredi.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_desiredi,
            var_desiredi.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_desired,
            par_desired.object
        );

    }
    if ((par_decimal.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_decimal,
            par_decimal.object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    frame_function->f_lineno = 420;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_digest_0b4e4303427381d5eb687ef96e3ca993, tmp_import_globals_2, tmp_import_locals_2, const_tuple_str_plain_iscomplexobj_str_plain_real_str_plain_imag_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_2 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 420;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_iscomplexobj );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 420;
        goto frame_exception_exit_1;
    }
    assert( var_iscomplexobj.object == NULL );
    var_iscomplexobj.object = tmp_assign_source_2;

    tmp_import_globals_3 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_3 = PyDict_New();
    if ((var_ndarray.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_ndarray,
            var_ndarray.object
        );

    }
    if ((var_iscomplexobj.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_iscomplexobj,
            var_iscomplexobj.object
        );

    }
    if ((var_real.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_real,
            var_real.object
        );

    }
    if ((var_imag.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_imag,
            var_imag.object
        );

    }
    if ((var_usecomplex.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_usecomplex,
            var_usecomplex.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_actualr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_actualr,
            var_actualr.object
        );

    }
    if ((var_actuali.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_actuali,
            var_actuali.object
        );

    }
    if ((var_desiredr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_desiredr,
            var_desiredr.object
        );

    }
    if ((var_desiredi.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_desiredi,
            var_desiredi.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_desired,
            par_desired.object
        );

    }
    if ((par_decimal.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_decimal,
            par_decimal.object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    frame_function->f_lineno = 420;
    tmp_import_name_from_3 = IMPORT_MODULE( const_str_digest_0b4e4303427381d5eb687ef96e3ca993, tmp_import_globals_3, tmp_import_locals_3, const_tuple_str_plain_iscomplexobj_str_plain_real_str_plain_imag_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_3 );
    if ( tmp_import_name_from_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 420;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_real );
    Py_DECREF( tmp_import_name_from_3 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 420;
        goto frame_exception_exit_1;
    }
    assert( var_real.object == NULL );
    var_real.object = tmp_assign_source_3;

    tmp_import_globals_4 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_4 = PyDict_New();
    if ((var_ndarray.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_ndarray,
            var_ndarray.object
        );

    }
    if ((var_iscomplexobj.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_iscomplexobj,
            var_iscomplexobj.object
        );

    }
    if ((var_real.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_real,
            var_real.object
        );

    }
    if ((var_imag.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_imag,
            var_imag.object
        );

    }
    if ((var_usecomplex.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_usecomplex,
            var_usecomplex.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_actualr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_actualr,
            var_actualr.object
        );

    }
    if ((var_actuali.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_actuali,
            var_actuali.object
        );

    }
    if ((var_desiredr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_desiredr,
            var_desiredr.object
        );

    }
    if ((var_desiredi.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_desiredi,
            var_desiredi.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_desired,
            par_desired.object
        );

    }
    if ((par_decimal.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_decimal,
            par_decimal.object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    frame_function->f_lineno = 420;
    tmp_import_name_from_4 = IMPORT_MODULE( const_str_digest_0b4e4303427381d5eb687ef96e3ca993, tmp_import_globals_4, tmp_import_locals_4, const_tuple_str_plain_iscomplexobj_str_plain_real_str_plain_imag_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_4 );
    if ( tmp_import_name_from_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 420;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_4 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_imag );
    Py_DECREF( tmp_import_name_from_4 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 420;
        goto frame_exception_exit_1;
    }
    assert( var_imag.object == NULL );
    var_imag.object = tmp_assign_source_4;

    // Tried block of try/except
    // Tried code
    tmp_assign_source_5 = NULL;
    // Tried code
    tmp_called_1 = var_iscomplexobj.object;

    tmp_call_arg_element_1 = par_actual.object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 426;
        goto try_finally_handler_2;
    }

    frame_function->f_lineno = 426;
    tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 426;
        goto try_finally_handler_2;
    }
    assert( tmp_or_1__value_1.object == NULL );
    tmp_or_1__value_1.object = tmp_assign_source_6;

    tmp_cond_value_1 = tmp_or_1__value_1.object;

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 426;
        goto try_finally_handler_2;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_assign_source_5 = tmp_or_1__value_1.object;

    Py_INCREF( tmp_assign_source_5 );
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_assign_source_5 = NULL;
    // Tried code
    tmp_result = tmp_or_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_1__value_1.object );
        tmp_or_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_called_2 = var_iscomplexobj.object;

    tmp_call_arg_element_2 = par_desired.object;

    if ( tmp_call_arg_element_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 426;
        goto try_finally_handler_3;
    }

    frame_function->f_lineno = 426;
    tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 426;
        goto try_finally_handler_3;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_2;
    }

    goto finally_end_1;
    finally_end_1:;
    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_1;
    }

    goto finally_end_2;
    finally_end_2:;
    assert( var_usecomplex.object == NULL );
    var_usecomplex.object = tmp_assign_source_5;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_1__value_1.object );
    tmp_or_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto try_except_handler_1;
    }

    goto finally_end_3;
    finally_end_3:;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_ValueError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 427;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_assign_source_7 = Py_False;
    if (var_usecomplex.object == NULL)
    {
        var_usecomplex.object = INCREASE_REFCOUNT( tmp_assign_source_7 );
    }
    else
    {
        PyObject *old = var_usecomplex.object;
        var_usecomplex.object = INCREASE_REFCOUNT( tmp_assign_source_7 );
        Py_DECREF( old );
    }
    goto branch_end_1;
    branch_no_1:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_1:;
    try_except_end_1:;
    tmp_called_3 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_build_err_msg );

    if (unlikely( tmp_called_3 == NULL ))
    {
        tmp_called_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_build_err_msg );
    }

    if ( tmp_called_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214367 ], 42, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 430;
        goto frame_exception_exit_1;
    }

    tmp_call_pos_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = PyList_New( 2 );
    tmp_list_element_1 = par_actual.object;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_tuple_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 430;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_1, 0, tmp_list_element_1 );
    tmp_list_element_1 = par_desired.object;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_tuple_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 430;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_1, 1, tmp_list_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_err_msg.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 430;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 1, tmp_tuple_element_1 );
    tmp_call_kw_1 = _PyDict_NewPresized( 2 );
    tmp_dict_value_1 = par_verbose.object;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49769 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 430;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_1 = const_str_plain_verbose;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    tmp_binop_left_1 = const_str_digest_55bf588743b8243d910cfce315631034;
    tmp_binop_right_1 = par_decimal.object;

    if ( tmp_binop_right_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215005 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 431;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_2 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );

        frame_function->f_lineno = 431;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_2 = const_str_plain_header;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    frame_function->f_lineno = 431;
    tmp_assign_source_8 = CALL_FUNCTION( tmp_called_3, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 431;
        goto frame_exception_exit_1;
    }
    assert( var_msg.object == NULL );
    var_msg.object = tmp_assign_source_8;

    tmp_cond_value_2 = var_usecomplex.object;

    if ( tmp_cond_value_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214467 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 433;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 433;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_4 = var_iscomplexobj.object;

    if ( tmp_called_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214409 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 434;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_3 = par_actual.object;

    if ( tmp_call_arg_element_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 434;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 434;
    tmp_cond_value_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_3 );
    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 434;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        frame_function->f_lineno = 434;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_3 );
    if (tmp_cond_truth_3 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_called_5 = var_real.object;

    if ( tmp_called_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214523 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 435;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_4 = par_actual.object;

    if ( tmp_call_arg_element_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 435;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 435;
    tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_4 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 435;
        goto frame_exception_exit_1;
    }
    assert( var_actualr.object == NULL );
    var_actualr.object = tmp_assign_source_9;

    tmp_called_6 = var_imag.object;

    if ( tmp_called_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214573 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 436;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_5 = par_actual.object;

    if ( tmp_call_arg_element_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 436;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 436;
    tmp_assign_source_10 = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_5 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 436;
        goto frame_exception_exit_1;
    }
    assert( var_actuali.object == NULL );
    var_actuali.object = tmp_assign_source_10;

    goto branch_end_3;
    branch_no_3:;
    tmp_assign_source_11 = par_actual.object;

    if ( tmp_assign_source_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 438;
        goto frame_exception_exit_1;
    }

    assert( var_actualr.object == NULL );
    var_actualr.object = INCREASE_REFCOUNT( tmp_assign_source_11 );

    tmp_assign_source_12 = const_int_0;
    assert( var_actuali.object == NULL );
    var_actuali.object = INCREASE_REFCOUNT( tmp_assign_source_12 );

    branch_end_3:;
    tmp_called_7 = var_iscomplexobj.object;

    if ( tmp_called_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214409 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 440;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_6 = par_desired.object;

    if ( tmp_call_arg_element_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 440;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 440;
    tmp_cond_value_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_6 );
    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 440;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        frame_function->f_lineno = 440;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_4 );
    if (tmp_cond_truth_4 == 1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_8 = var_real.object;

    if ( tmp_called_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214523 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 441;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_7 = par_desired.object;

    if ( tmp_call_arg_element_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 441;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 441;
    tmp_assign_source_13 = CALL_FUNCTION_WITH_ARGS1( tmp_called_8, tmp_call_arg_element_7 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 441;
        goto frame_exception_exit_1;
    }
    assert( var_desiredr.object == NULL );
    var_desiredr.object = tmp_assign_source_13;

    tmp_called_9 = var_imag.object;

    if ( tmp_called_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214573 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 442;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_8 = par_desired.object;

    if ( tmp_call_arg_element_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 442;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 442;
    tmp_assign_source_14 = CALL_FUNCTION_WITH_ARGS1( tmp_called_9, tmp_call_arg_element_8 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 442;
        goto frame_exception_exit_1;
    }
    assert( var_desiredi.object == NULL );
    var_desiredi.object = tmp_assign_source_14;

    goto branch_end_4;
    branch_no_4:;
    tmp_assign_source_15 = par_desired.object;

    if ( tmp_assign_source_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 444;
        goto frame_exception_exit_1;
    }

    assert( var_desiredr.object == NULL );
    var_desiredr.object = INCREASE_REFCOUNT( tmp_assign_source_15 );

    tmp_assign_source_16 = const_int_0;
    assert( var_desiredi.object == NULL );
    var_desiredi.object = INCREASE_REFCOUNT( tmp_assign_source_16 );

    branch_end_4:;
    // Tried block of try/except
    tmp_called_10 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_almost_equal );

    if (unlikely( tmp_called_10 == NULL ))
    {
        tmp_called_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_assert_almost_equal );
    }

    if ( tmp_called_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215058 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 447;
        goto try_except_handler_2;
    }

    tmp_call_pos_2 = PyTuple_New( 2 );
    tmp_tuple_element_2 = var_actualr.object;

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_call_pos_2, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = var_desiredr.object;

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_call_pos_2, 1, tmp_tuple_element_2 );
    tmp_call_kw_2 = _PyDict_NewPresized( 1 );
    tmp_dict_value_3 = par_decimal.object;

    if ( tmp_dict_value_3 == NULL )
    {
        Py_DECREF( tmp_call_pos_2 );
        Py_DECREF( tmp_call_kw_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215005 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 447;
        goto try_except_handler_2;
    }

    tmp_dict_key_3 = const_str_plain_decimal;
    PyDict_SetItem( tmp_call_kw_2, tmp_dict_key_3, tmp_dict_value_3 );
    frame_function->f_lineno = 447;
    tmp_unused = CALL_FUNCTION( tmp_called_10, tmp_call_pos_2, tmp_call_kw_2 );
    Py_DECREF( tmp_call_pos_2 );
    Py_DECREF( tmp_call_kw_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 447;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    tmp_called_11 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_almost_equal );

    if (unlikely( tmp_called_11 == NULL ))
    {
        tmp_called_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_assert_almost_equal );
    }

    if ( tmp_called_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215058 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 448;
        goto try_except_handler_2;
    }

    tmp_call_pos_3 = PyTuple_New( 2 );
    tmp_tuple_element_3 = var_actuali.object;

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_call_pos_3, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = var_desiredi.object;

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_call_pos_3, 1, tmp_tuple_element_3 );
    tmp_call_kw_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_4 = par_decimal.object;

    if ( tmp_dict_value_4 == NULL )
    {
        Py_DECREF( tmp_call_pos_3 );
        Py_DECREF( tmp_call_kw_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215005 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 448;
        goto try_except_handler_2;
    }

    tmp_dict_key_4 = const_str_plain_decimal;
    PyDict_SetItem( tmp_call_kw_3, tmp_dict_key_4, tmp_dict_value_4 );
    frame_function->f_lineno = 448;
    tmp_unused = CALL_FUNCTION( tmp_called_11, tmp_call_pos_3, tmp_call_kw_3 );
    Py_DECREF( tmp_call_pos_3 );
    Py_DECREF( tmp_call_kw_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 448;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    goto try_except_end_2;
    try_except_handler_2:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_AssertionError;
    tmp_exc_match_exception_match_2 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 449;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_2 == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_make_exception_arg_1 = var_msg.object;

    if ( tmp_make_exception_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 450;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 450;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 450;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 450;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    goto branch_end_5;
    branch_no_5:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_5:;
    try_except_end_2:;
    branch_no_2:;
    // Tried code
    tmp_cond_value_5 = NULL;
    // Tried code
    tmp_isinstance_inst_1 = par_actual.object;

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 452;
        goto try_finally_handler_5;
    }

    tmp_isinstance_cls_1 = PyTuple_New( 3 );
    tmp_tuple_element_4 = var_ndarray.object;

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_isinstance_cls_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215106 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 452;
        goto try_finally_handler_5;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_1, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = LOOKUP_BUILTIN( const_str_plain_tuple );
    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_cls_1 );

        frame_function->f_lineno = 452;
        goto try_finally_handler_5;
    }
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_1, 1, tmp_tuple_element_4 );
    tmp_tuple_element_4 = LOOKUP_BUILTIN( const_str_plain_list );
    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_cls_1 );

        frame_function->f_lineno = 452;
        goto try_finally_handler_5;
    }
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_1, 2, tmp_tuple_element_4 );
    tmp_assign_source_17 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    Py_DECREF( tmp_isinstance_cls_1 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 452;
        goto try_finally_handler_5;
    }
    assert( tmp_or_2__value_1.object == NULL );
    tmp_or_2__value_1.object = INCREASE_REFCOUNT( tmp_assign_source_17 );

    tmp_cond_value_6 = tmp_or_2__value_1.object;

    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 452;
        goto try_finally_handler_5;
    }
    if (tmp_cond_truth_6 == 1)
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_cond_value_5 = tmp_or_2__value_1.object;

    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_cond_value_5 = NULL;
    // Tried code
    tmp_result = tmp_or_2__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_2__value_1.object );
        tmp_or_2__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_isinstance_inst_2 = par_desired.object;

    if ( tmp_isinstance_inst_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 453;
        goto try_finally_handler_6;
    }

    tmp_isinstance_cls_2 = PyTuple_New( 3 );
    tmp_tuple_element_5 = var_ndarray.object;

    if ( tmp_tuple_element_5 == NULL )
    {
        Py_DECREF( tmp_isinstance_cls_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215106 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 453;
        goto try_finally_handler_6;
    }

    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_2, 0, tmp_tuple_element_5 );
    tmp_tuple_element_5 = LOOKUP_BUILTIN( const_str_plain_tuple );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_cls_2 );

        frame_function->f_lineno = 453;
        goto try_finally_handler_6;
    }
    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_2, 1, tmp_tuple_element_5 );
    tmp_tuple_element_5 = LOOKUP_BUILTIN( const_str_plain_list );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_isinstance_cls_2 );

        frame_function->f_lineno = 453;
        goto try_finally_handler_6;
    }
    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_2, 2, tmp_tuple_element_5 );
    tmp_cond_value_5 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    Py_DECREF( tmp_isinstance_cls_2 );
    if ( tmp_cond_value_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 453;
        goto try_finally_handler_6;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto try_finally_handler_5;
    }

    goto finally_end_4;
    finally_end_4:;
    condexpr_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto try_finally_handler_4;
    }

    goto finally_end_5;
    finally_end_5:;
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 452;
        goto try_finally_handler_4;
    }
    if (tmp_cond_truth_5 == 1)
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_called_12 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_array_almost_equal );

    if (unlikely( tmp_called_12 == NULL ))
    {
        tmp_called_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_assert_array_almost_equal );
    }

    if ( tmp_called_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215159 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 454;
        goto try_finally_handler_4;
    }

    tmp_call_arg_element_9 = par_actual.object;

    if ( tmp_call_arg_element_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 454;
        goto try_finally_handler_4;
    }

    tmp_call_arg_element_10 = par_desired.object;

    if ( tmp_call_arg_element_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 454;
        goto try_finally_handler_4;
    }

    tmp_call_arg_element_11 = par_decimal.object;

    if ( tmp_call_arg_element_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215005 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 454;
        goto try_finally_handler_4;
    }

    tmp_call_arg_element_12 = par_err_msg.object;

    if ( tmp_call_arg_element_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 454;
        goto try_finally_handler_4;
    }

    frame_function->f_lineno = 454;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_12, tmp_call_arg_element_9, tmp_call_arg_element_10, tmp_call_arg_element_11, tmp_call_arg_element_12 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 454;
        goto try_finally_handler_4;
    }
    goto try_finally_handler_start_1;
    branch_no_6:;
    try_finally_handler_start_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_2__value_1.object );
    tmp_or_2__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto frame_exception_exit_1;
    }

    // Return value if any.
    if ( tmp_return_value != NULL )
    {
        goto frame_return_exit_1;
    }

    goto finally_end_6;
    finally_end_6:;
    // Tried block of try/except
    tmp_cond_value_7 = NULL;
    // Tried code
    tmp_unary_arg_1 = NULL;
    // Tried code
    tmp_called_13 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisfinite );

    if (unlikely( tmp_called_13 == NULL ))
    {
        tmp_called_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisfinite );
    }

    if ( tmp_called_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214677 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 459;
        goto try_finally_handler_8;
    }

    tmp_call_arg_element_13 = par_desired.object;

    if ( tmp_call_arg_element_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 459;
        goto try_finally_handler_8;
    }

    frame_function->f_lineno = 459;
    tmp_assign_source_18 = CALL_FUNCTION_WITH_ARGS1( tmp_called_13, tmp_call_arg_element_13 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 459;
        goto try_finally_handler_8;
    }
    assert( tmp_and_1__value_1.object == NULL );
    tmp_and_1__value_1.object = tmp_assign_source_18;

    tmp_cond_value_8 = tmp_and_1__value_1.object;

    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 459;
        goto try_finally_handler_8;
    }
    if (tmp_cond_truth_8 == 1)
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_unary_arg_1 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1.object );
        tmp_and_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_called_14 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisfinite );

    if (unlikely( tmp_called_14 == NULL ))
    {
        tmp_called_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisfinite );
    }

    if ( tmp_called_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214677 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 459;
        goto try_finally_handler_9;
    }

    tmp_call_arg_element_14 = par_actual.object;

    if ( tmp_call_arg_element_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 459;
        goto try_finally_handler_9;
    }

    frame_function->f_lineno = 459;
    tmp_unary_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_14, tmp_call_arg_element_14 );
    if ( tmp_unary_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 459;
        goto try_finally_handler_9;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_9:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_7 != NULL )
    {
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;

        goto try_finally_handler_8;
    }

    goto finally_end_7;
    finally_end_7:;
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_unary_arg_1 = tmp_and_1__value_1.object;

    Py_INCREF( tmp_unary_arg_1 );
    condexpr_end_3:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_8:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_8 != NULL )
    {
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;

        goto try_finally_handler_7;
    }

    goto finally_end_8;
    finally_end_8:;
    tmp_cond_value_7 = UNARY_OPERATION( UNARY_NOT, tmp_unary_arg_1 );
    Py_DECREF( tmp_unary_arg_1 );
    if ( tmp_cond_value_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 459;
        goto try_finally_handler_7;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_7:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_1__value_1.object );
    tmp_and_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_9 != NULL )
    {
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;

        goto try_except_handler_3;
    }

    goto finally_end_9;
    finally_end_9:;
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 459;
        goto try_except_handler_3;
    }
    if (tmp_cond_truth_7 == 1)
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    // Tried code
    tmp_cond_value_9 = NULL;
    // Tried code
    tmp_called_15 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisnan );

    if (unlikely( tmp_called_15 == NULL ))
    {
        tmp_called_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisnan );
    }

    if ( tmp_called_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214715 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 460;
        goto try_finally_handler_11;
    }

    tmp_call_arg_element_15 = par_desired.object;

    if ( tmp_call_arg_element_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 460;
        goto try_finally_handler_11;
    }

    frame_function->f_lineno = 460;
    tmp_assign_source_19 = CALL_FUNCTION_WITH_ARGS1( tmp_called_15, tmp_call_arg_element_15 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 460;
        goto try_finally_handler_11;
    }
    assert( tmp_or_3__value_1.object == NULL );
    tmp_or_3__value_1.object = tmp_assign_source_19;

    tmp_cond_value_10 = tmp_or_3__value_1.object;

    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 460;
        goto try_finally_handler_11;
    }
    if (tmp_cond_truth_10 == 1)
    {
        goto condexpr_true_4;
    }
    else
    {
        goto condexpr_false_4;
    }
    condexpr_true_4:;
    tmp_cond_value_9 = tmp_or_3__value_1.object;

    Py_INCREF( tmp_cond_value_9 );
    goto condexpr_end_4;
    condexpr_false_4:;
    tmp_cond_value_9 = NULL;
    // Tried code
    tmp_result = tmp_or_3__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_3__value_1.object );
        tmp_or_3__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_called_16 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisnan );

    if (unlikely( tmp_called_16 == NULL ))
    {
        tmp_called_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisnan );
    }

    if ( tmp_called_16 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214715 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 460;
        goto try_finally_handler_12;
    }

    tmp_call_arg_element_16 = par_actual.object;

    if ( tmp_call_arg_element_16 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 460;
        goto try_finally_handler_12;
    }

    frame_function->f_lineno = 460;
    tmp_cond_value_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_16, tmp_call_arg_element_16 );
    if ( tmp_cond_value_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 460;
        goto try_finally_handler_12;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_12:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_10 != NULL )
    {
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;

        goto try_finally_handler_11;
    }

    goto finally_end_10;
    finally_end_10:;
    condexpr_end_4:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_11:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_11 != NULL )
    {
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;

        goto try_finally_handler_10;
    }

    goto finally_end_11;
    finally_end_11:;
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_9 );

        frame_function->f_lineno = 460;
        goto try_finally_handler_10;
    }
    Py_DECREF( tmp_cond_value_9 );
    if (tmp_cond_truth_9 == 1)
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_cond_value_11 = NULL;
    // Tried code
    tmp_unary_arg_2 = NULL;
    // Tried code
    tmp_called_17 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisnan );

    if (unlikely( tmp_called_17 == NULL ))
    {
        tmp_called_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisnan );
    }

    if ( tmp_called_17 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214715 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 461;
        goto try_finally_handler_14;
    }

    tmp_call_arg_element_17 = par_desired.object;

    if ( tmp_call_arg_element_17 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 461;
        goto try_finally_handler_14;
    }

    frame_function->f_lineno = 461;
    tmp_assign_source_20 = CALL_FUNCTION_WITH_ARGS1( tmp_called_17, tmp_call_arg_element_17 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 461;
        goto try_finally_handler_14;
    }
    assert( tmp_and_2__value_1.object == NULL );
    tmp_and_2__value_1.object = tmp_assign_source_20;

    tmp_cond_value_12 = tmp_and_2__value_1.object;

    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 461;
        goto try_finally_handler_14;
    }
    if (tmp_cond_truth_12 == 1)
    {
        goto condexpr_true_5;
    }
    else
    {
        goto condexpr_false_5;
    }
    condexpr_true_5:;
    tmp_unary_arg_2 = NULL;
    // Tried code
    tmp_result = tmp_and_2__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_2__value_1.object );
        tmp_and_2__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_called_18 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisnan );

    if (unlikely( tmp_called_18 == NULL ))
    {
        tmp_called_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisnan );
    }

    if ( tmp_called_18 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214715 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 461;
        goto try_finally_handler_15;
    }

    tmp_call_arg_element_18 = par_actual.object;

    if ( tmp_call_arg_element_18 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 461;
        goto try_finally_handler_15;
    }

    frame_function->f_lineno = 461;
    tmp_unary_arg_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_18, tmp_call_arg_element_18 );
    if ( tmp_unary_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 461;
        goto try_finally_handler_15;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_15:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_12 != NULL )
    {
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;

        goto try_finally_handler_14;
    }

    goto finally_end_12;
    finally_end_12:;
    goto condexpr_end_5;
    condexpr_false_5:;
    tmp_unary_arg_2 = tmp_and_2__value_1.object;

    Py_INCREF( tmp_unary_arg_2 );
    condexpr_end_5:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_14:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_13 != NULL )
    {
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;

        goto try_finally_handler_13;
    }

    goto finally_end_13;
    finally_end_13:;
    tmp_cond_value_11 = UNARY_OPERATION( UNARY_NOT, tmp_unary_arg_2 );
    Py_DECREF( tmp_unary_arg_2 );
    if ( tmp_cond_value_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 461;
        goto try_finally_handler_13;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_13:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_4 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_2__value_1.object );
    tmp_and_2__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_4;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_14 != NULL )
    {
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;

        goto try_finally_handler_10;
    }

    goto finally_end_14;
    finally_end_14:;
    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 461;
        goto try_finally_handler_10;
    }
    if (tmp_cond_truth_11 == 1)
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_make_exception_arg_2 = var_msg.object;

    if ( tmp_make_exception_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 462;
        goto try_finally_handler_10;
    }

    frame_function->f_lineno = 462;
    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_2 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 462;
        goto try_finally_handler_10;
    }
    exception_type = tmp_raise_type_2;
    frame_function->f_lineno = 462;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_10;
    branch_no_9:;
    goto branch_end_8;
    branch_no_8:;
    tmp_compare_left_3 = par_desired.object;

    if ( tmp_compare_left_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 464;
        goto try_finally_handler_10;
    }

    tmp_compare_right_3 = par_actual.object;

    if ( tmp_compare_right_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 464;
        goto try_finally_handler_10;
    }

    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 464;
        goto try_finally_handler_10;
    }
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_no_10;
    }
    else
    {
        goto branch_yes_10;
    }
    branch_yes_10:;
    tmp_make_exception_arg_3 = var_msg.object;

    if ( tmp_make_exception_arg_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 465;
        goto try_finally_handler_10;
    }

    frame_function->f_lineno = 465;
    tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_3 );
    if ( tmp_raise_type_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 465;
        goto try_finally_handler_10;
    }
    exception_type = tmp_raise_type_3;
    frame_function->f_lineno = 465;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_10;
    branch_no_10:;
    branch_end_8:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_10:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_5 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_3__value_1.object );
    tmp_or_3__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_5;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_15 != NULL )
    {
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;

        goto try_except_handler_3;
    }

    goto finally_end_15;
    finally_end_15:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_7:;
    goto try_except_end_3;
    try_except_handler_3:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_4 = PyThreadState_GET()->exc_type;
    tmp_compare_right_4 = PyTuple_New( 2 );
    tmp_tuple_element_6 = PyExc_NotImplementedError;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_compare_right_4, 0, tmp_tuple_element_6 );
    tmp_tuple_element_6 = PyExc_TypeError;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_compare_right_4, 1, tmp_tuple_element_6 );
    tmp_exc_match_exception_match_3 = EXCEPTION_MATCH_BOOL( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_exc_match_exception_match_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_4 );

        frame_function->f_lineno = 467;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_4 );
    if (tmp_exc_match_exception_match_3 == 1)
    {
        goto branch_no_11;
    }
    else
    {
        goto branch_yes_11;
    }
    branch_yes_11:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_no_11:;
    try_except_end_3:;
    tmp_called_19 = LOOKUP_BUILTIN( const_str_plain_round );
    if ( tmp_called_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 469;
        goto frame_exception_exit_1;
    }
    tmp_called_20 = LOOKUP_BUILTIN( const_str_plain_abs );
    if ( tmp_called_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 469;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_2 = par_desired.object;

    if ( tmp_binop_left_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 469;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_2 = par_actual.object;

    if ( tmp_binop_right_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 469;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_20 = BINARY_OPERATION_SUB( tmp_binop_left_2, tmp_binop_right_2 );
    if ( tmp_call_arg_element_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 469;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 469;
    tmp_call_arg_element_19 = CALL_FUNCTION_WITH_ARGS1( tmp_called_20, tmp_call_arg_element_20 );
    Py_DECREF( tmp_call_arg_element_20 );
    if ( tmp_call_arg_element_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 469;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_21 = par_decimal.object;

    if ( tmp_call_arg_element_21 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215005 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 469;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 469;
    tmp_compare_left_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_19, tmp_call_arg_element_19, tmp_call_arg_element_21 );
    Py_DECREF( tmp_call_arg_element_19 );
    if ( tmp_compare_left_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 469;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_5 = const_int_0;
    tmp_cmp_NotEq_1 = RICH_COMPARE_BOOL_NE( tmp_compare_left_5, tmp_compare_right_5 );
    if ( tmp_cmp_NotEq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_5 );

        frame_function->f_lineno = 469;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_5 );
    if (tmp_cmp_NotEq_1 == 1)
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_make_exception_arg_4 = var_msg.object;

    if ( tmp_make_exception_arg_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 470;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 470;
    tmp_raise_type_4 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_4 );
    if ( tmp_raise_type_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 470;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_4;
    frame_function->f_lineno = 470;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_12:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_ndarray.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ndarray,
            var_ndarray.object
        );

    }
    if ((var_iscomplexobj.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_iscomplexobj,
            var_iscomplexobj.object
        );

    }
    if ((var_real.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_real,
            var_real.object
        );

    }
    if ((var_imag.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_imag,
            var_imag.object
        );

    }
    if ((var_usecomplex.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_usecomplex,
            var_usecomplex.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_actualr.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_actualr,
            var_actualr.object
        );

    }
    if ((var_actuali.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_actuali,
            var_actuali.object
        );

    }
    if ((var_desiredr.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_desiredr,
            var_desiredr.object
        );

    }
    if ((var_desiredi.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_desiredi,
            var_desiredi.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_desired,
            par_desired.object
        );

    }
    if ((par_decimal.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_decimal,
            par_decimal.object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_15_assert_almost_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_actual = NULL;
    PyObject *_python_par_desired = NULL;
    PyObject *_python_par_decimal = NULL;
    PyObject *_python_par_err_msg = NULL;
    PyObject *_python_par_verbose = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "assert_almost_equal() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_actual == key )
            {
                assert( _python_par_actual == NULL );
                _python_par_actual = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_desired == key )
            {
                assert( _python_par_desired == NULL );
                _python_par_desired = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_decimal == key )
            {
                assert( _python_par_decimal == NULL );
                _python_par_decimal = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_err_msg == key )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_verbose == key )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_actual, key ) == 1 )
            {
                assert( _python_par_actual == NULL );
                _python_par_actual = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_desired, key ) == 1 )
            {
                assert( _python_par_desired == NULL );
                _python_par_desired = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_decimal, key ) == 1 )
            {
                assert( _python_par_decimal == NULL );
                _python_par_decimal = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_err_msg, key ) == 1 )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_verbose, key ) == 1 )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "assert_almost_equal() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_actual != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_actual = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_actual == NULL )
    {
        if ( 0 + self->m_defaults_given >= 5  )
        {
            _python_par_actual = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_desired != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_desired = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_desired == NULL )
    {
        if ( 1 + self->m_defaults_given >= 5  )
        {
            _python_par_desired = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_decimal != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_decimal = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_decimal == NULL )
    {
        if ( 2 + self->m_defaults_given >= 5  )
        {
            _python_par_decimal = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_err_msg != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_err_msg = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_err_msg == NULL )
    {
        if ( 3 + self->m_defaults_given >= 5  )
        {
            _python_par_err_msg = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 4 < args_given ))
    {
         if (unlikely( _python_par_verbose != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 4 );
             goto error_exit;
         }

        _python_par_verbose = INCREASE_REFCOUNT( args[ 4 ] );
    }
    else if ( _python_par_verbose == NULL )
    {
        if ( 4 + self->m_defaults_given >= 5  )
        {
            _python_par_verbose = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 4 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_actual == NULL || _python_par_desired == NULL || _python_par_decimal == NULL || _python_par_err_msg == NULL || _python_par_verbose == NULL ))
    {
        PyObject *values[] = { _python_par_actual, _python_par_desired, _python_par_decimal, _python_par_err_msg, _python_par_verbose };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_15_assert_almost_equal_of_module_numpy$testing$utils( self, _python_par_actual, _python_par_desired, _python_par_decimal, _python_par_err_msg, _python_par_verbose );

error_exit:;

    Py_XDECREF( _python_par_actual );
    Py_XDECREF( _python_par_desired );
    Py_XDECREF( _python_par_decimal );
    Py_XDECREF( _python_par_err_msg );
    Py_XDECREF( _python_par_verbose );

    return NULL;
}

static PyObject *dparse_function_15_assert_almost_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5 )
    {
        return impl_function_15_assert_almost_equal_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_15_assert_almost_equal_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_16_assert_approx_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_actual, PyObject *_python_par_desired, PyObject *_python_par_significant, PyObject *_python_par_err_msg, PyObject *_python_par_verbose )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_actual; par_actual.object = _python_par_actual;
    PyObjectLocalVariable par_desired; par_desired.object = _python_par_desired;
    PyObjectLocalVariable par_significant; par_significant.object = _python_par_significant;
    PyObjectLocalVariable par_err_msg; par_err_msg.object = _python_par_err_msg;
    PyObjectLocalVariable par_verbose; par_verbose.object = _python_par_verbose;
    PyObjectLocalVariable var_np;
    PyObjectLocalVariable var_scale;
    PyObjectLocalVariable var_sc_desired;
    PyObjectLocalVariable var_sc_actual;
    PyObjectLocalVariable var_msg;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_with_1__source;
    PyObjectTempVariable tmp_with_1__exit;
    PyObjectTempVariable tmp_with_1__enter;
    PyObjectTempVariable tmp_with_1__indicator;
    PyObjectTempVariable tmp_and_1__value_1;
    PyObjectTempVariable tmp_or_1__value_1;
    PyObjectTempVariable tmp_and_2__value_1;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_attr_source_1;
    PyObject *tmp_attr_source_2;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_left_3;
    PyObject *tmp_binop_left_4;
    PyObject *tmp_binop_left_5;
    PyObject *tmp_binop_left_6;
    PyObject *tmp_binop_left_7;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_binop_right_3;
    PyObject *tmp_binop_right_4;
    PyObject *tmp_binop_right_5;
    PyObject *tmp_binop_right_6;
    PyObject *tmp_binop_right_7;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_call_arg_element_14;
    PyObject *tmp_call_arg_element_15;
    PyObject *tmp_call_arg_element_16;
    PyObject *tmp_call_arg_element_17;
    PyObject *tmp_call_arg_element_18;
    PyObject *tmp_call_arg_element_19;
    PyObject *tmp_call_arg_element_20;
    PyObject *tmp_call_arg_element_21;
    PyObject *tmp_call_arg_element_22;
    PyObject *tmp_call_arg_element_23;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_kw_2;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    PyObject *tmp_called_11;
    PyObject *tmp_called_12;
    PyObject *tmp_called_13;
    PyObject *tmp_called_14;
    PyObject *tmp_called_15;
    PyObject *tmp_called_16;
    PyObject *tmp_called_17;
    PyObject *tmp_called_18;
    PyObject *tmp_called_19;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_GtE_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    int tmp_exc_match_exception_match_1;
    int tmp_exc_match_exception_match_2;
    int tmp_exc_match_exception_match_3;
    int tmp_exc_match_exception_match_4;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    bool tmp_is_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iterator_attempt_1;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_make_exception_arg_3;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_type_3;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    int tmp_tried_lineno_4;
    int tmp_tried_lineno_5;
    int tmp_tried_lineno_6;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_unary_arg_1;
    PyObject *tmp_unary_arg_2;
    PyObject *tmp_unary_arg_3;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_12887126429fd0a63d40e61eab48891e, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_np.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_np,
            var_np.object
        );

    }
    if ((var_scale.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_scale,
            var_scale.object
        );

    }
    if ((var_sc_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_sc_desired,
            var_sc_desired.object
        );

    }
    if ((var_sc_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_sc_actual,
            var_sc_actual.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_desired,
            par_desired.object
        );

    }
    if ((par_significant.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_significant,
            par_significant.object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    frame_function->f_lineno = 529;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_numpy, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 529;
        goto frame_exception_exit_1;
    }
    assert( var_np.object == NULL );
    var_np.object = tmp_assign_source_1;

    // Tried code
    tmp_called_1 = LOOKUP_BUILTIN( const_str_plain_map );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 531;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_1 = LOOKUP_BUILTIN( const_str_plain_float );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 531;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_2 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_actual.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 531;
        goto try_finally_handler_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_arg_element_2, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_desired.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 531;
        goto try_finally_handler_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_arg_element_2, 1, tmp_tuple_element_1 );
    frame_function->f_lineno = 531;
    tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2 );
    Py_DECREF( tmp_call_arg_element_2 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 531;
        goto try_finally_handler_1;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 531;
        goto try_finally_handler_1;
    }
    assert( tmp_tuple_unpack_1__source_iter.object == NULL );
    tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_2;

    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_3 = UNPACK_PARAMETER_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 531;
        goto try_finally_handler_1;
    }
    assert( tmp_tuple_unpack_1__element_1.object == NULL );
    tmp_tuple_unpack_1__element_1.object = tmp_assign_source_3;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_4 = UNPACK_PARAMETER_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 531;
        goto try_finally_handler_1;
    }
    assert( tmp_tuple_unpack_1__element_2.object == NULL );
    tmp_tuple_unpack_1__element_2.object = tmp_assign_source_4;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_1 ); assert( PyIter_Check( tmp_iterator_name_1 ) );

    tmp_iterator_attempt_1 = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt_1 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_1;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_1 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_1;
    }
    tmp_assign_source_5 = tmp_tuple_unpack_1__element_1.object;

    if (par_actual.object == NULL)
    {
        par_actual.object = INCREASE_REFCOUNT( tmp_assign_source_5 );
    }
    else
    {
        PyObject *old = par_actual.object;
        par_actual.object = INCREASE_REFCOUNT( tmp_assign_source_5 );
        Py_DECREF( old );
    }
    tmp_assign_source_6 = tmp_tuple_unpack_1__element_2.object;

    if (par_desired.object == NULL)
    {
        par_desired.object = INCREASE_REFCOUNT( tmp_assign_source_6 );
    }
    else
    {
        PyObject *old = par_desired.object;
        par_desired.object = INCREASE_REFCOUNT( tmp_assign_source_6 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter.object );
    tmp_tuple_unpack_1__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1.object );
    tmp_tuple_unpack_1__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2.object );
    tmp_tuple_unpack_1__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_compare_left_1 = par_desired.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 532;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = par_actual.object;

    if ( tmp_compare_right_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 532;
        goto frame_exception_exit_1;
    }

    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 532;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    // Tried code
    tmp_source_name_1 = var_np.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 536;
        goto try_finally_handler_2;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_errstate );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 536;
        goto try_finally_handler_2;
    }
    tmp_call_kw_1 = PyDict_Copy( const_dict_d457aeaf5237c8e9bb82fdcc508844e3 );
    frame_function->f_lineno = 536;
    tmp_assign_source_7 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_2, tmp_call_kw_1 );
    Py_DECREF( tmp_called_2 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 536;
        goto try_finally_handler_2;
    }
    assert( tmp_with_1__source.object == NULL );
    tmp_with_1__source.object = tmp_assign_source_7;

    tmp_attr_source_1 = tmp_with_1__source.object;

    tmp_assign_source_8 = LOOKUP_SPECIAL( tmp_attr_source_1, const_str_plain___exit__ );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 536;
        goto try_finally_handler_2;
    }
    assert( tmp_with_1__exit.object == NULL );
    tmp_with_1__exit.object = tmp_assign_source_8;

    tmp_attr_source_2 = tmp_with_1__source.object;

    tmp_called_3 = LOOKUP_SPECIAL( tmp_attr_source_2, const_str_plain___enter__ );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 536;
        goto try_finally_handler_2;
    }
    frame_function->f_lineno = 536;
    tmp_assign_source_9 = CALL_FUNCTION_NO_ARGS( tmp_called_3 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 536;
        goto try_finally_handler_2;
    }
    assert( tmp_with_1__enter.object == NULL );
    tmp_with_1__enter.object = tmp_assign_source_9;

    tmp_assign_source_10 = Py_True;
    assert( tmp_with_1__indicator.object == NULL );
    tmp_with_1__indicator.object = INCREASE_REFCOUNT( tmp_assign_source_10 );

    // Tried code
    // Tried block of try/except
    tmp_binop_left_1 = const_float_0_5;
    tmp_source_name_2 = var_np.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 537;
        goto try_except_handler_1;
    }

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_abs );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 537;
        goto try_except_handler_1;
    }
    tmp_call_arg_element_3 = par_desired.object;

    if ( tmp_call_arg_element_3 == NULL )
    {
        Py_DECREF( tmp_called_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 537;
        goto try_except_handler_1;
    }

    frame_function->f_lineno = 537;
    tmp_binop_left_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_3 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_binop_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 537;
        goto try_except_handler_1;
    }
    tmp_source_name_3 = var_np.object;

    if ( tmp_source_name_3 == NULL )
    {
        Py_DECREF( tmp_binop_left_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 537;
        goto try_except_handler_1;
    }

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_abs );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_2 );

        frame_function->f_lineno = 537;
        goto try_except_handler_1;
    }
    tmp_call_arg_element_4 = par_actual.object;

    if ( tmp_call_arg_element_4 == NULL )
    {
        Py_DECREF( tmp_binop_left_2 );
        Py_DECREF( tmp_called_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 537;
        goto try_except_handler_1;
    }

    frame_function->f_lineno = 537;
    tmp_binop_right_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_binop_right_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_2 );

        frame_function->f_lineno = 537;
        goto try_except_handler_1;
    }
    tmp_binop_right_1 = BINARY_OPERATION_ADD( tmp_binop_left_2, tmp_binop_right_2 );
    Py_DECREF( tmp_binop_left_2 );
    Py_DECREF( tmp_binop_right_2 );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 537;
        goto try_except_handler_1;
    }
    tmp_assign_source_11 = BINARY_OPERATION_MUL( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 537;
        goto try_except_handler_1;
    }
    assert( var_scale.object == NULL );
    var_scale.object = tmp_assign_source_11;

    tmp_source_name_4 = var_np.object;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 538;
        goto try_except_handler_1;
    }

    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_power );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 538;
        goto try_except_handler_1;
    }
    tmp_call_arg_element_5 = const_int_pos_10;
    tmp_source_name_5 = var_np.object;

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_called_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 538;
        goto try_except_handler_1;
    }

    tmp_called_7 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_floor );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_6 );

        frame_function->f_lineno = 538;
        goto try_except_handler_1;
    }
    tmp_source_name_6 = var_np.object;

    if ( tmp_source_name_6 == NULL )
    {
        Py_DECREF( tmp_called_6 );
        Py_DECREF( tmp_called_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 538;
        goto try_except_handler_1;
    }

    tmp_called_8 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_log10 );
    if ( tmp_called_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_6 );
        Py_DECREF( tmp_called_7 );

        frame_function->f_lineno = 538;
        goto try_except_handler_1;
    }
    tmp_call_arg_element_8 = var_scale.object;

    frame_function->f_lineno = 538;
    tmp_call_arg_element_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_8, tmp_call_arg_element_8 );
    Py_DECREF( tmp_called_8 );
    if ( tmp_call_arg_element_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_6 );
        Py_DECREF( tmp_called_7 );

        frame_function->f_lineno = 538;
        goto try_except_handler_1;
    }
    frame_function->f_lineno = 538;
    tmp_call_arg_element_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_7 );
    Py_DECREF( tmp_called_7 );
    Py_DECREF( tmp_call_arg_element_7 );
    if ( tmp_call_arg_element_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_6 );

        frame_function->f_lineno = 538;
        goto try_except_handler_1;
    }
    frame_function->f_lineno = 538;
    tmp_assign_source_12 = CALL_FUNCTION_WITH_ARGS2( tmp_called_6, tmp_call_arg_element_5, tmp_call_arg_element_6 );
    Py_DECREF( tmp_called_6 );
    Py_DECREF( tmp_call_arg_element_6 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 538;
        goto try_except_handler_1;
    }
    assert( var_scale.object != NULL );
    {
        PyObject *old = var_scale.object;
        var_scale.object = tmp_assign_source_12;
        Py_DECREF( old );
    }

    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_BaseException;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );



        goto try_finally_handler_3;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_13 = Py_False;
    if (tmp_with_1__indicator.object == NULL)
    {
        tmp_with_1__indicator.object = INCREASE_REFCOUNT( tmp_assign_source_13 );
    }
    else
    {
        PyObject *old = tmp_with_1__indicator.object;
        tmp_with_1__indicator.object = INCREASE_REFCOUNT( tmp_assign_source_13 );
        Py_DECREF( old );
    }
    tmp_called_9 = tmp_with_1__exit.object;

    tmp_call_arg_element_9 = PyThreadState_GET()->exc_type;
    tmp_call_arg_element_10 = PyThreadState_GET()->exc_value;
    tmp_call_arg_element_11 = PyThreadState_GET()->exc_traceback;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_9, tmp_call_arg_element_9, tmp_call_arg_element_10, tmp_call_arg_element_11 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );



        goto try_finally_handler_3;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );


        goto try_finally_handler_3;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_no_3;
    }
    else
    {
        goto branch_yes_3;
    }
    branch_yes_3:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_3;
    branch_no_3:;
    goto branch_end_2;
    branch_no_2:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_3;
    branch_end_2:;
    try_except_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    tmp_compare_left_3 = tmp_with_1__indicator.object;

    tmp_compare_right_3 = Py_True;
    tmp_is_1 = ( tmp_compare_left_3 == tmp_compare_right_3 );
    if (tmp_is_1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_10 = tmp_with_1__exit.object;

    tmp_call_arg_element_12 = Py_None;
    tmp_call_arg_element_13 = Py_None;
    tmp_call_arg_element_14 = Py_None;
    tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_10, tmp_call_arg_element_12, tmp_call_arg_element_13, tmp_call_arg_element_14 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );



        goto try_finally_handler_error_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_4:;
    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_2;
    }

    goto finally_end_2;
    try_finally_handler_error_1:;
    Py_XDECREF( exception_keeper_type_2 );exception_keeper_type_2 = NULL;
    Py_XDECREF( exception_keeper_value_2 );exception_keeper_value_2 = NULL;
    Py_XDECREF( exception_keeper_tb_2 );exception_keeper_tb_2 = NULL;
    goto try_finally_handler_2;
    finally_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    Py_XDECREF( tmp_with_1__source.object );
    tmp_with_1__source.object = NULL;

    Py_XDECREF( tmp_with_1__enter.object );
    tmp_with_1__enter.object = NULL;

    Py_XDECREF( tmp_with_1__exit.object );
    tmp_with_1__exit.object = NULL;

    Py_XDECREF( tmp_with_1__indicator.object );
    tmp_with_1__indicator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto frame_exception_exit_1;
    }

    goto finally_end_3;
    finally_end_3:;
    // Tried block of try/except
    tmp_binop_left_3 = par_desired.object;

    if ( tmp_binop_left_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 540;
        goto try_except_handler_2;
    }

    tmp_binop_right_3 = var_scale.object;

    if ( tmp_binop_right_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8611 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 540;
        goto try_except_handler_2;
    }

    tmp_assign_source_14 = BINARY_OPERATION( PyNumber_TrueDivide, tmp_binop_left_3, tmp_binop_right_3 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 540;
        goto try_except_handler_2;
    }
    assert( var_sc_desired.object == NULL );
    var_sc_desired.object = tmp_assign_source_14;

    goto try_except_end_2;
    try_except_handler_2:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_4 = PyThreadState_GET()->exc_type;
    tmp_compare_right_4 = PyExc_ZeroDivisionError;
    tmp_exc_match_exception_match_2 = EXCEPTION_MATCH_BOOL( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_exc_match_exception_match_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 541;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_2 == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_assign_source_15 = const_float_0_0;
    if (var_sc_desired.object == NULL)
    {
        var_sc_desired.object = INCREASE_REFCOUNT( tmp_assign_source_15 );
    }
    else
    {
        PyObject *old = var_sc_desired.object;
        var_sc_desired.object = INCREASE_REFCOUNT( tmp_assign_source_15 );
        Py_DECREF( old );
    }
    goto branch_end_5;
    branch_no_5:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_5:;
    try_except_end_2:;
    // Tried block of try/except
    tmp_binop_left_4 = par_actual.object;

    if ( tmp_binop_left_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 544;
        goto try_except_handler_3;
    }

    tmp_binop_right_4 = var_scale.object;

    if ( tmp_binop_right_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8611 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 544;
        goto try_except_handler_3;
    }

    tmp_assign_source_16 = BINARY_OPERATION( PyNumber_TrueDivide, tmp_binop_left_4, tmp_binop_right_4 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 544;
        goto try_except_handler_3;
    }
    assert( var_sc_actual.object == NULL );
    var_sc_actual.object = tmp_assign_source_16;

    goto try_except_end_3;
    try_except_handler_3:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_5 = PyThreadState_GET()->exc_type;
    tmp_compare_right_5 = PyExc_ZeroDivisionError;
    tmp_exc_match_exception_match_3 = EXCEPTION_MATCH_BOOL( tmp_compare_left_5, tmp_compare_right_5 );
    if ( tmp_exc_match_exception_match_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 545;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_3 == 1)
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_assign_source_17 = const_float_0_0;
    if (var_sc_actual.object == NULL)
    {
        var_sc_actual.object = INCREASE_REFCOUNT( tmp_assign_source_17 );
    }
    else
    {
        PyObject *old = var_sc_actual.object;
        var_sc_actual.object = INCREASE_REFCOUNT( tmp_assign_source_17 );
        Py_DECREF( old );
    }
    goto branch_end_6;
    branch_no_6:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_6:;
    try_except_end_3:;
    tmp_called_11 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_build_err_msg );

    if (unlikely( tmp_called_11 == NULL ))
    {
        tmp_called_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_build_err_msg );
    }

    if ( tmp_called_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214367 ], 42, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 547;
        goto frame_exception_exit_1;
    }

    tmp_call_pos_1 = PyTuple_New( 2 );
    tmp_tuple_element_2 = PyList_New( 2 );
    tmp_list_element_1 = par_actual.object;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 547;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 0, tmp_list_element_1 );
    tmp_list_element_1 = par_desired.object;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_tuple_element_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 547;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_2, 1, tmp_list_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = par_err_msg.object;

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 547;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 1, tmp_tuple_element_2 );
    tmp_call_kw_2 = _PyDict_NewPresized( 2 );
    tmp_binop_left_5 = const_str_digest_faa386a8ad794cd50be499b4e9ca7a93;
    tmp_binop_right_5 = par_significant.object;

    if ( tmp_binop_right_5 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215261 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 549;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_5, tmp_binop_right_5 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_2 );

        frame_function->f_lineno = 548;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_header;
    PyDict_SetItem( tmp_call_kw_2, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    tmp_dict_value_2 = par_verbose.object;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49769 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 550;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_2 = const_str_plain_verbose;
    PyDict_SetItem( tmp_call_kw_2, tmp_dict_key_2, tmp_dict_value_2 );
    frame_function->f_lineno = 550;
    tmp_assign_source_18 = CALL_FUNCTION( tmp_called_11, tmp_call_pos_1, tmp_call_kw_2 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_2 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 550;
        goto frame_exception_exit_1;
    }
    assert( var_msg.object == NULL );
    var_msg.object = tmp_assign_source_18;

    // Tried block of try/except
    tmp_cond_value_2 = NULL;
    // Tried code
    tmp_unary_arg_1 = NULL;
    // Tried code
    tmp_called_12 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisfinite );

    if (unlikely( tmp_called_12 == NULL ))
    {
        tmp_called_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisfinite );
    }

    if ( tmp_called_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214677 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 555;
        goto try_finally_handler_5;
    }

    tmp_call_arg_element_15 = par_desired.object;

    if ( tmp_call_arg_element_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 555;
        goto try_finally_handler_5;
    }

    frame_function->f_lineno = 555;
    tmp_assign_source_19 = CALL_FUNCTION_WITH_ARGS1( tmp_called_12, tmp_call_arg_element_15 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 555;
        goto try_finally_handler_5;
    }
    assert( tmp_and_1__value_1.object == NULL );
    tmp_and_1__value_1.object = tmp_assign_source_19;

    tmp_cond_value_3 = tmp_and_1__value_1.object;

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 555;
        goto try_finally_handler_5;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_unary_arg_1 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1.object );
        tmp_and_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_called_13 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisfinite );

    if (unlikely( tmp_called_13 == NULL ))
    {
        tmp_called_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisfinite );
    }

    if ( tmp_called_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214677 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 555;
        goto try_finally_handler_6;
    }

    tmp_call_arg_element_16 = par_actual.object;

    if ( tmp_call_arg_element_16 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 555;
        goto try_finally_handler_6;
    }

    frame_function->f_lineno = 555;
    tmp_unary_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_13, tmp_call_arg_element_16 );
    if ( tmp_unary_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 555;
        goto try_finally_handler_6;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto try_finally_handler_5;
    }

    goto finally_end_4;
    finally_end_4:;
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_unary_arg_1 = tmp_and_1__value_1.object;

    Py_INCREF( tmp_unary_arg_1 );
    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto try_finally_handler_4;
    }

    goto finally_end_5;
    finally_end_5:;
    tmp_cond_value_2 = UNARY_OPERATION( UNARY_NOT, tmp_unary_arg_1 );
    Py_DECREF( tmp_unary_arg_1 );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 555;
        goto try_finally_handler_4;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_4 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_1__value_1.object );
    tmp_and_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_4;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto try_except_handler_4;
    }

    goto finally_end_6;
    finally_end_6:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 555;
        goto try_except_handler_4;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    // Tried code
    tmp_cond_value_4 = NULL;
    // Tried code
    tmp_called_14 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisnan );

    if (unlikely( tmp_called_14 == NULL ))
    {
        tmp_called_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisnan );
    }

    if ( tmp_called_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214715 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 556;
        goto try_finally_handler_8;
    }

    tmp_call_arg_element_17 = par_desired.object;

    if ( tmp_call_arg_element_17 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 556;
        goto try_finally_handler_8;
    }

    frame_function->f_lineno = 556;
    tmp_assign_source_20 = CALL_FUNCTION_WITH_ARGS1( tmp_called_14, tmp_call_arg_element_17 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 556;
        goto try_finally_handler_8;
    }
    assert( tmp_or_1__value_1.object == NULL );
    tmp_or_1__value_1.object = tmp_assign_source_20;

    tmp_cond_value_5 = tmp_or_1__value_1.object;

    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 556;
        goto try_finally_handler_8;
    }
    if (tmp_cond_truth_5 == 1)
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_cond_value_4 = tmp_or_1__value_1.object;

    Py_INCREF( tmp_cond_value_4 );
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_cond_value_4 = NULL;
    // Tried code
    tmp_result = tmp_or_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_1__value_1.object );
        tmp_or_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_called_15 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisnan );

    if (unlikely( tmp_called_15 == NULL ))
    {
        tmp_called_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisnan );
    }

    if ( tmp_called_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214715 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 556;
        goto try_finally_handler_9;
    }

    tmp_call_arg_element_18 = par_actual.object;

    if ( tmp_call_arg_element_18 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 556;
        goto try_finally_handler_9;
    }

    frame_function->f_lineno = 556;
    tmp_cond_value_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_15, tmp_call_arg_element_18 );
    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 556;
        goto try_finally_handler_9;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_9:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_7 != NULL )
    {
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;

        goto try_finally_handler_8;
    }

    goto finally_end_7;
    finally_end_7:;
    condexpr_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_8:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_8 != NULL )
    {
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;

        goto try_finally_handler_7;
    }

    goto finally_end_8;
    finally_end_8:;
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        frame_function->f_lineno = 556;
        goto try_finally_handler_7;
    }
    Py_DECREF( tmp_cond_value_4 );
    if (tmp_cond_truth_4 == 1)
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_cond_value_6 = NULL;
    // Tried code
    tmp_unary_arg_2 = NULL;
    // Tried code
    tmp_called_16 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisnan );

    if (unlikely( tmp_called_16 == NULL ))
    {
        tmp_called_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisnan );
    }

    if ( tmp_called_16 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214715 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 557;
        goto try_finally_handler_11;
    }

    tmp_call_arg_element_19 = par_desired.object;

    if ( tmp_call_arg_element_19 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 557;
        goto try_finally_handler_11;
    }

    frame_function->f_lineno = 557;
    tmp_assign_source_21 = CALL_FUNCTION_WITH_ARGS1( tmp_called_16, tmp_call_arg_element_19 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 557;
        goto try_finally_handler_11;
    }
    assert( tmp_and_2__value_1.object == NULL );
    tmp_and_2__value_1.object = tmp_assign_source_21;

    tmp_cond_value_7 = tmp_and_2__value_1.object;

    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 557;
        goto try_finally_handler_11;
    }
    if (tmp_cond_truth_7 == 1)
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_unary_arg_2 = NULL;
    // Tried code
    tmp_result = tmp_and_2__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_2__value_1.object );
        tmp_and_2__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_called_17 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisnan );

    if (unlikely( tmp_called_17 == NULL ))
    {
        tmp_called_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisnan );
    }

    if ( tmp_called_17 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214715 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 557;
        goto try_finally_handler_12;
    }

    tmp_call_arg_element_20 = par_actual.object;

    if ( tmp_call_arg_element_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 557;
        goto try_finally_handler_12;
    }

    frame_function->f_lineno = 557;
    tmp_unary_arg_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_17, tmp_call_arg_element_20 );
    if ( tmp_unary_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 557;
        goto try_finally_handler_12;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_12:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_9 != NULL )
    {
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;

        goto try_finally_handler_11;
    }

    goto finally_end_9;
    finally_end_9:;
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_unary_arg_2 = tmp_and_2__value_1.object;

    Py_INCREF( tmp_unary_arg_2 );
    condexpr_end_3:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_11:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_10 != NULL )
    {
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;

        goto try_finally_handler_10;
    }

    goto finally_end_10;
    finally_end_10:;
    tmp_cond_value_6 = UNARY_OPERATION( UNARY_NOT, tmp_unary_arg_2 );
    Py_DECREF( tmp_unary_arg_2 );
    if ( tmp_cond_value_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 557;
        goto try_finally_handler_10;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_10:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_5 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_2__value_1.object );
    tmp_and_2__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_5;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_11 != NULL )
    {
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;

        goto try_finally_handler_7;
    }

    goto finally_end_11;
    finally_end_11:;
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 557;
        goto try_finally_handler_7;
    }
    if (tmp_cond_truth_6 == 1)
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_make_exception_arg_1 = var_msg.object;

    if ( tmp_make_exception_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 558;
        goto try_finally_handler_7;
    }

    frame_function->f_lineno = 558;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 558;
        goto try_finally_handler_7;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 558;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_7;
    branch_no_9:;
    goto branch_end_8;
    branch_no_8:;
    tmp_compare_left_6 = par_desired.object;

    if ( tmp_compare_left_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 560;
        goto try_finally_handler_7;
    }

    tmp_compare_right_6 = par_actual.object;

    if ( tmp_compare_right_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 560;
        goto try_finally_handler_7;
    }

    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_6, tmp_compare_right_6 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 560;
        goto try_finally_handler_7;
    }
    if (tmp_cmp_Eq_2 == 1)
    {
        goto branch_no_10;
    }
    else
    {
        goto branch_yes_10;
    }
    branch_yes_10:;
    tmp_make_exception_arg_2 = var_msg.object;

    if ( tmp_make_exception_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 561;
        goto try_finally_handler_7;
    }

    frame_function->f_lineno = 561;
    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_2 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 561;
        goto try_finally_handler_7;
    }
    exception_type = tmp_raise_type_2;
    frame_function->f_lineno = 561;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_7;
    branch_no_10:;
    branch_end_8:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_7:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_6 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_1__value_1.object );
    tmp_or_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_6;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_12 != NULL )
    {
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;

        goto try_except_handler_4;
    }

    goto finally_end_12;
    finally_end_12:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_7:;
    goto try_except_end_4;
    try_except_handler_4:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_7 = PyThreadState_GET()->exc_type;
    tmp_compare_right_7 = PyTuple_New( 2 );
    tmp_tuple_element_3 = PyExc_TypeError;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_compare_right_7, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = PyExc_NotImplementedError;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_compare_right_7, 1, tmp_tuple_element_3 );
    tmp_exc_match_exception_match_4 = EXCEPTION_MATCH_BOOL( tmp_compare_left_7, tmp_compare_right_7 );
    if ( tmp_exc_match_exception_match_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_7 );

        frame_function->f_lineno = 563;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_7 );
    if (tmp_exc_match_exception_match_4 == 1)
    {
        goto branch_no_11;
    }
    else
    {
        goto branch_yes_11;
    }
    branch_yes_11:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_no_11:;
    try_except_end_4:;
    tmp_source_name_7 = var_np.object;

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 565;
        goto frame_exception_exit_1;
    }

    tmp_called_18 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_abs );
    if ( tmp_called_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 565;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_6 = var_sc_desired.object;

    if ( tmp_binop_left_6 == NULL )
    {
        Py_DECREF( tmp_called_18 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215318 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 565;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_6 = var_sc_actual.object;

    if ( tmp_binop_right_6 == NULL )
    {
        Py_DECREF( tmp_called_18 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215374 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 565;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_21 = BINARY_OPERATION_SUB( tmp_binop_left_6, tmp_binop_right_6 );
    if ( tmp_call_arg_element_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_18 );

        frame_function->f_lineno = 565;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 565;
    tmp_compare_left_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_18, tmp_call_arg_element_21 );
    Py_DECREF( tmp_called_18 );
    Py_DECREF( tmp_call_arg_element_21 );
    if ( tmp_compare_left_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 565;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = var_np.object;

    if ( tmp_source_name_8 == NULL )
    {
        Py_DECREF( tmp_compare_left_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 565;
        goto frame_exception_exit_1;
    }

    tmp_called_19 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_power );
    if ( tmp_called_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_8 );

        frame_function->f_lineno = 565;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_22 = const_float_10_0;
    tmp_binop_left_7 = par_significant.object;

    if ( tmp_binop_left_7 == NULL )
    {
        Py_DECREF( tmp_compare_left_8 );
        Py_DECREF( tmp_called_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215261 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 565;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_7 = const_int_pos_1;
    tmp_unary_arg_3 = BINARY_OPERATION_SUB( tmp_binop_left_7, tmp_binop_right_7 );
    if ( tmp_unary_arg_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_8 );
        Py_DECREF( tmp_called_19 );

        frame_function->f_lineno = 565;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_23 = UNARY_OPERATION( PyNumber_Negative, tmp_unary_arg_3 );
    Py_DECREF( tmp_unary_arg_3 );
    if ( tmp_call_arg_element_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_8 );
        Py_DECREF( tmp_called_19 );

        frame_function->f_lineno = 565;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 565;
    tmp_compare_right_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_19, tmp_call_arg_element_22, tmp_call_arg_element_23 );
    Py_DECREF( tmp_called_19 );
    Py_DECREF( tmp_call_arg_element_23 );
    if ( tmp_compare_right_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_8 );

        frame_function->f_lineno = 565;
        goto frame_exception_exit_1;
    }
    tmp_cmp_GtE_1 = RICH_COMPARE_BOOL_GE( tmp_compare_left_8, tmp_compare_right_8 );
    if ( tmp_cmp_GtE_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_8 );
        Py_DECREF( tmp_compare_right_8 );

        frame_function->f_lineno = 565;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_8 );
    Py_DECREF( tmp_compare_right_8 );
    if (tmp_cmp_GtE_1 == 1)
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_make_exception_arg_3 = var_msg.object;

    if ( tmp_make_exception_arg_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 566;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 566;
    tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_3 );
    if ( tmp_raise_type_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 566;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_3;
    frame_function->f_lineno = 566;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_12:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_np.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_np,
            var_np.object
        );

    }
    if ((var_scale.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_scale,
            var_scale.object
        );

    }
    if ((var_sc_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_sc_desired,
            var_sc_desired.object
        );

    }
    if ((var_sc_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_sc_actual,
            var_sc_actual.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_desired,
            par_desired.object
        );

    }
    if ((par_significant.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_significant,
            par_significant.object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_16_assert_approx_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_actual = NULL;
    PyObject *_python_par_desired = NULL;
    PyObject *_python_par_significant = NULL;
    PyObject *_python_par_err_msg = NULL;
    PyObject *_python_par_verbose = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "assert_approx_equal() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_actual == key )
            {
                assert( _python_par_actual == NULL );
                _python_par_actual = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_desired == key )
            {
                assert( _python_par_desired == NULL );
                _python_par_desired = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_significant == key )
            {
                assert( _python_par_significant == NULL );
                _python_par_significant = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_err_msg == key )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_verbose == key )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_actual, key ) == 1 )
            {
                assert( _python_par_actual == NULL );
                _python_par_actual = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_desired, key ) == 1 )
            {
                assert( _python_par_desired == NULL );
                _python_par_desired = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_significant, key ) == 1 )
            {
                assert( _python_par_significant == NULL );
                _python_par_significant = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_err_msg, key ) == 1 )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_verbose, key ) == 1 )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "assert_approx_equal() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_actual != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_actual = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_actual == NULL )
    {
        if ( 0 + self->m_defaults_given >= 5  )
        {
            _python_par_actual = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_desired != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_desired = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_desired == NULL )
    {
        if ( 1 + self->m_defaults_given >= 5  )
        {
            _python_par_desired = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_significant != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_significant = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_significant == NULL )
    {
        if ( 2 + self->m_defaults_given >= 5  )
        {
            _python_par_significant = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_err_msg != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_err_msg = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_err_msg == NULL )
    {
        if ( 3 + self->m_defaults_given >= 5  )
        {
            _python_par_err_msg = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 4 < args_given ))
    {
         if (unlikely( _python_par_verbose != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 4 );
             goto error_exit;
         }

        _python_par_verbose = INCREASE_REFCOUNT( args[ 4 ] );
    }
    else if ( _python_par_verbose == NULL )
    {
        if ( 4 + self->m_defaults_given >= 5  )
        {
            _python_par_verbose = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 4 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_actual == NULL || _python_par_desired == NULL || _python_par_significant == NULL || _python_par_err_msg == NULL || _python_par_verbose == NULL ))
    {
        PyObject *values[] = { _python_par_actual, _python_par_desired, _python_par_significant, _python_par_err_msg, _python_par_verbose };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_16_assert_approx_equal_of_module_numpy$testing$utils( self, _python_par_actual, _python_par_desired, _python_par_significant, _python_par_err_msg, _python_par_verbose );

error_exit:;

    Py_XDECREF( _python_par_actual );
    Py_XDECREF( _python_par_desired );
    Py_XDECREF( _python_par_significant );
    Py_XDECREF( _python_par_err_msg );
    Py_XDECREF( _python_par_verbose );

    return NULL;
}

static PyObject *dparse_function_16_assert_approx_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5 )
    {
        return impl_function_16_assert_approx_equal_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_16_assert_approx_equal_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_17_assert_array_compare_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_comparison, PyObject *_python_par_x, PyObject *_python_par_y, PyObject *_python_par_err_msg, PyObject *_python_par_verbose, PyObject *_python_par_header )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_comparison; par_comparison.object = _python_par_comparison;
    PyObjectSharedLocalVariable par_x; par_x.storage->object = _python_par_x;
    PyObjectSharedLocalVariable par_y; par_y.storage->object = _python_par_y;
    PyObjectSharedLocalVariable par_err_msg; par_err_msg.storage->object = _python_par_err_msg;
    PyObjectSharedLocalVariable par_verbose; par_verbose.storage->object = _python_par_verbose;
    PyObjectSharedLocalVariable par_header; par_header.storage->object = _python_par_header;
    PyObjectLocalVariable var_array;
    PyObjectLocalVariable var_isnan;
    PyObjectLocalVariable var_isinf;
    PyObjectLocalVariable var_any;
    PyObjectLocalVariable var_all;
    PyObjectLocalVariable var_inf;
    PyObjectLocalVariable var_isnumber;
    PyObjectLocalVariable var_chk_same_position;
    PyObjectLocalVariable var_cond;
    PyObjectLocalVariable var_msg;
    PyObjectLocalVariable var_x_isnan;
    PyObjectLocalVariable var_y_isnan;
    PyObjectLocalVariable var_x_isinf;
    PyObjectLocalVariable var_y_isinf;
    PyObjectLocalVariable var_x_id;
    PyObjectLocalVariable var_y_id;
    PyObjectLocalVariable var_val;
    PyObjectLocalVariable var_reduced;
    PyObjectLocalVariable var_match;
    PyObjectLocalVariable var_e;
    PyObjectLocalVariable var_traceback;
    PyObjectLocalVariable var_efmt;
    PyObjectTempVariable tmp_or_1__value_1;
    PyObjectTempVariable tmp_or_2__value_1;
    PyObjectTempVariable tmp_and_1__value_1;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_tuple_unpack_2__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_2__element_1;
    PyObjectTempVariable tmp_tuple_unpack_2__element_2;
    PyObjectTempVariable tmp_or_3__value_1;
    PyObjectTempVariable tmp_or_4__value_1;
    PyObjectTempVariable tmp_tuple_unpack_3__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_3__element_1;
    PyObjectTempVariable tmp_tuple_unpack_3__element_2;
    PyObjectTempVariable tmp_inplace_assign_1__inplace_start;
    PyObjectTempVariable tmp_inplace_assign_1__inplace_end;
    PyObjectTempVariable tmp_inplace_assign_2__inplace_start;
    PyObjectTempVariable tmp_inplace_assign_2__inplace_end;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_left_3;
    PyObject *tmp_binop_left_4;
    PyObject *tmp_binop_left_5;
    PyObject *tmp_binop_left_6;
    PyObject *tmp_binop_left_7;
    PyObject *tmp_binop_left_8;
    PyObject *tmp_binop_left_9;
    PyObject *tmp_binop_left_10;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_binop_right_3;
    PyObject *tmp_binop_right_4;
    PyObject *tmp_binop_right_5;
    PyObject *tmp_binop_right_6;
    PyObject *tmp_binop_right_7;
    PyObject *tmp_binop_right_8;
    PyObject *tmp_binop_right_9;
    PyObject *tmp_binop_right_10;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_call_arg_element_14;
    PyObject *tmp_call_arg_element_15;
    PyObject *tmp_call_arg_element_16;
    PyObject *tmp_call_arg_element_17;
    PyObject *tmp_call_arg_element_18;
    PyObject *tmp_call_arg_element_19;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_kw_2;
    PyObject *tmp_call_kw_3;
    PyObject *tmp_call_kw_4;
    PyObject *tmp_call_kw_5;
    PyObject *tmp_call_kw_6;
    PyObject *tmp_call_kw_7;
    PyObject *tmp_call_kw_8;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_call_pos_2;
    PyObject *tmp_call_pos_3;
    PyObject *tmp_call_pos_4;
    PyObject *tmp_call_pos_5;
    PyObject *tmp_call_pos_6;
    PyObject *tmp_call_pos_7;
    PyObject *tmp_call_pos_8;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    PyObject *tmp_called_11;
    PyObject *tmp_called_12;
    PyObject *tmp_called_13;
    PyObject *tmp_called_14;
    PyObject *tmp_called_15;
    PyObject *tmp_called_16;
    PyObject *tmp_called_17;
    PyObject *tmp_called_18;
    PyObject *tmp_called_19;
    PyObject *tmp_called_20;
    PyObject *tmp_called_21;
    PyObject *tmp_called_22;
    PyObject *tmp_called_23;
    PyObject *tmp_called_24;
    PyObject *tmp_called_25;
    PyObject *tmp_called_26;
    PyObject *tmp_called_27;
    PyObject *tmp_called_28;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_left_6;
    PyObject *tmp_compexpr_left_7;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    PyObject *tmp_compexpr_right_6;
    PyObject *tmp_compexpr_right_7;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    int tmp_cond_truth_13;
    int tmp_cond_truth_14;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_cond_value_13;
    PyObject *tmp_cond_value_14;
    PyObject *tmp_defaults_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_globals_4;
    PyObject *tmp_import_globals_5;
    PyObject *tmp_import_globals_6;
    PyObject *tmp_import_globals_7;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_locals_2;
    PyObject *tmp_import_locals_3;
    PyObject *tmp_import_locals_4;
    PyObject *tmp_import_locals_5;
    PyObject *tmp_import_locals_6;
    PyObject *tmp_import_locals_7;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_import_name_from_3;
    PyObject *tmp_import_name_from_4;
    PyObject *tmp_import_name_from_5;
    PyObject *tmp_import_name_from_6;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    bool tmp_isnot_1;
    bool tmp_isnot_2;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iterator_attempt_1;
    PyObject *tmp_iterator_attempt_2;
    PyObject *tmp_iterator_attempt_3;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_iterator_name_2;
    PyObject *tmp_iterator_name_3;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_list_element_2;
    PyObject *tmp_list_element_3;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_make_exception_arg_3;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_type_3;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_subscript_2;
    PyObject *tmp_subscr_target_1;
    PyObject *tmp_subscr_target_2;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    int tmp_tried_lineno_4;
    int tmp_tried_lineno_5;
    int tmp_tried_lineno_6;
    int tmp_tried_lineno_7;
    int tmp_tried_lineno_8;
    int tmp_tried_lineno_9;
    int tmp_tried_lineno_10;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_tuple_element_8;
    PyObject *tmp_tuple_element_9;
    PyObject *tmp_tuple_element_10;
    PyObject *tmp_tuple_element_11;
    PyObject *tmp_tuple_element_12;
    PyObject *tmp_tuple_element_13;
    PyObject *tmp_tuple_element_14;
    PyObject *tmp_unary_arg_1;
    PyObject *tmp_unary_arg_2;
    PyObject *tmp_unary_arg_3;
    PyObject *tmp_unary_arg_4;
    PyObject *tmp_unary_arg_5;
    PyObject *tmp_unary_arg_6;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    PyObject *tmp_unpack_4;
    PyObject *tmp_unpack_5;
    PyObject *tmp_unpack_6;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_29f112d557ae2186c66dc1a124f1ae74, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_array.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_array,
            var_array.object
        );

    }
    if ((var_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_isnan,
            var_isnan.object
        );

    }
    if ((var_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_isinf,
            var_isinf.object
        );

    }
    if ((var_any.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_any,
            var_any.object
        );

    }
    if ((var_all.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_all,
            var_all.object
        );

    }
    if ((var_inf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_inf,
            var_inf.object
        );

    }
    if ((var_isnumber.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_isnumber,
            var_isnumber.object
        );

    }
    if ((var_chk_same_position.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_chk_same_position,
            var_chk_same_position.object
        );

    }
    if ((var_cond.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_cond,
            var_cond.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_x_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_x_isnan,
            var_x_isnan.object
        );

    }
    if ((var_y_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_y_isnan,
            var_y_isnan.object
        );

    }
    if ((var_x_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_x_isinf,
            var_x_isinf.object
        );

    }
    if ((var_y_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_y_isinf,
            var_y_isinf.object
        );

    }
    if ((var_x_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_x_id,
            var_x_id.object
        );

    }
    if ((var_y_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_y_id,
            var_y_id.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((var_reduced.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_reduced,
            var_reduced.object
        );

    }
    if ((var_match.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_match,
            var_match.object
        );

    }
    if ((var_e.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_e,
            var_e.object
        );

    }
    if ((var_traceback.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_traceback,
            var_traceback.object
        );

    }
    if ((var_efmt.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_efmt,
            var_efmt.object
        );

    }
    if ((par_comparison.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_comparison,
            par_comparison.object
        );

    }
    if ((par_x.storage != NULL && par_x.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_x,
            par_x.storage->object
        );

    }
    if ((par_y.storage != NULL && par_y.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_y,
            par_y.storage->object
        );

    }
    if ((par_err_msg.storage != NULL && par_err_msg.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_err_msg,
            par_err_msg.storage->object
        );

    }
    if ((par_verbose.storage != NULL && par_verbose.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_verbose,
            par_verbose.storage->object
        );

    }
    if ((par_header.storage != NULL && par_header.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_header,
            par_header.storage->object
        );

    }
    frame_function->f_lineno = 570;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_1, tmp_import_locals_1, const_tuple_194a86e43e0cb7c7c00eac0bfd665f10_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 570;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_array );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 570;
        goto frame_exception_exit_1;
    }
    assert( var_array.object == NULL );
    var_array.object = tmp_assign_source_1;

    tmp_import_globals_2 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_2 = PyDict_New();
    if ((var_array.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_array,
            var_array.object
        );

    }
    if ((var_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_isnan,
            var_isnan.object
        );

    }
    if ((var_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_isinf,
            var_isinf.object
        );

    }
    if ((var_any.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_any,
            var_any.object
        );

    }
    if ((var_all.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_all,
            var_all.object
        );

    }
    if ((var_inf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_inf,
            var_inf.object
        );

    }
    if ((var_isnumber.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_isnumber,
            var_isnumber.object
        );

    }
    if ((var_chk_same_position.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_chk_same_position,
            var_chk_same_position.object
        );

    }
    if ((var_cond.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_cond,
            var_cond.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_x_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_x_isnan,
            var_x_isnan.object
        );

    }
    if ((var_y_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_y_isnan,
            var_y_isnan.object
        );

    }
    if ((var_x_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_x_isinf,
            var_x_isinf.object
        );

    }
    if ((var_y_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_y_isinf,
            var_y_isinf.object
        );

    }
    if ((var_x_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_x_id,
            var_x_id.object
        );

    }
    if ((var_y_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_y_id,
            var_y_id.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((var_reduced.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_reduced,
            var_reduced.object
        );

    }
    if ((var_match.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_match,
            var_match.object
        );

    }
    if ((var_e.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_e,
            var_e.object
        );

    }
    if ((var_traceback.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_traceback,
            var_traceback.object
        );

    }
    if ((var_efmt.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_efmt,
            var_efmt.object
        );

    }
    if ((par_comparison.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_comparison,
            par_comparison.object
        );

    }
    if ((par_x.storage != NULL && par_x.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_x,
            par_x.storage->object
        );

    }
    if ((par_y.storage != NULL && par_y.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_y,
            par_y.storage->object
        );

    }
    if ((par_err_msg.storage != NULL && par_err_msg.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_err_msg,
            par_err_msg.storage->object
        );

    }
    if ((par_verbose.storage != NULL && par_verbose.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_verbose,
            par_verbose.storage->object
        );

    }
    if ((par_header.storage != NULL && par_header.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_header,
            par_header.storage->object
        );

    }
    frame_function->f_lineno = 570;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_2, tmp_import_locals_2, const_tuple_194a86e43e0cb7c7c00eac0bfd665f10_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_2 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 570;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_isnan );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 570;
        goto frame_exception_exit_1;
    }
    assert( var_isnan.object == NULL );
    var_isnan.object = tmp_assign_source_2;

    tmp_import_globals_3 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_3 = PyDict_New();
    if ((var_array.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_array,
            var_array.object
        );

    }
    if ((var_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_isnan,
            var_isnan.object
        );

    }
    if ((var_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_isinf,
            var_isinf.object
        );

    }
    if ((var_any.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_any,
            var_any.object
        );

    }
    if ((var_all.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_all,
            var_all.object
        );

    }
    if ((var_inf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_inf,
            var_inf.object
        );

    }
    if ((var_isnumber.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_isnumber,
            var_isnumber.object
        );

    }
    if ((var_chk_same_position.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_chk_same_position,
            var_chk_same_position.object
        );

    }
    if ((var_cond.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_cond,
            var_cond.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_x_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_x_isnan,
            var_x_isnan.object
        );

    }
    if ((var_y_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_y_isnan,
            var_y_isnan.object
        );

    }
    if ((var_x_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_x_isinf,
            var_x_isinf.object
        );

    }
    if ((var_y_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_y_isinf,
            var_y_isinf.object
        );

    }
    if ((var_x_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_x_id,
            var_x_id.object
        );

    }
    if ((var_y_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_y_id,
            var_y_id.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((var_reduced.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_reduced,
            var_reduced.object
        );

    }
    if ((var_match.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_match,
            var_match.object
        );

    }
    if ((var_e.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_e,
            var_e.object
        );

    }
    if ((var_traceback.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_traceback,
            var_traceback.object
        );

    }
    if ((var_efmt.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_efmt,
            var_efmt.object
        );

    }
    if ((par_comparison.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_comparison,
            par_comparison.object
        );

    }
    if ((par_x.storage != NULL && par_x.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_x,
            par_x.storage->object
        );

    }
    if ((par_y.storage != NULL && par_y.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_y,
            par_y.storage->object
        );

    }
    if ((par_err_msg.storage != NULL && par_err_msg.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_err_msg,
            par_err_msg.storage->object
        );

    }
    if ((par_verbose.storage != NULL && par_verbose.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_verbose,
            par_verbose.storage->object
        );

    }
    if ((par_header.storage != NULL && par_header.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_header,
            par_header.storage->object
        );

    }
    frame_function->f_lineno = 570;
    tmp_import_name_from_3 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_3, tmp_import_locals_3, const_tuple_194a86e43e0cb7c7c00eac0bfd665f10_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_3 );
    if ( tmp_import_name_from_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 570;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_isinf );
    Py_DECREF( tmp_import_name_from_3 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 570;
        goto frame_exception_exit_1;
    }
    assert( var_isinf.object == NULL );
    var_isinf.object = tmp_assign_source_3;

    tmp_import_globals_4 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_4 = PyDict_New();
    if ((var_array.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_array,
            var_array.object
        );

    }
    if ((var_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_isnan,
            var_isnan.object
        );

    }
    if ((var_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_isinf,
            var_isinf.object
        );

    }
    if ((var_any.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_any,
            var_any.object
        );

    }
    if ((var_all.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_all,
            var_all.object
        );

    }
    if ((var_inf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_inf,
            var_inf.object
        );

    }
    if ((var_isnumber.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_isnumber,
            var_isnumber.object
        );

    }
    if ((var_chk_same_position.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_chk_same_position,
            var_chk_same_position.object
        );

    }
    if ((var_cond.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_cond,
            var_cond.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_x_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_x_isnan,
            var_x_isnan.object
        );

    }
    if ((var_y_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_y_isnan,
            var_y_isnan.object
        );

    }
    if ((var_x_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_x_isinf,
            var_x_isinf.object
        );

    }
    if ((var_y_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_y_isinf,
            var_y_isinf.object
        );

    }
    if ((var_x_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_x_id,
            var_x_id.object
        );

    }
    if ((var_y_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_y_id,
            var_y_id.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((var_reduced.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_reduced,
            var_reduced.object
        );

    }
    if ((var_match.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_match,
            var_match.object
        );

    }
    if ((var_e.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_e,
            var_e.object
        );

    }
    if ((var_traceback.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_traceback,
            var_traceback.object
        );

    }
    if ((var_efmt.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_efmt,
            var_efmt.object
        );

    }
    if ((par_comparison.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_comparison,
            par_comparison.object
        );

    }
    if ((par_x.storage != NULL && par_x.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_x,
            par_x.storage->object
        );

    }
    if ((par_y.storage != NULL && par_y.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_y,
            par_y.storage->object
        );

    }
    if ((par_err_msg.storage != NULL && par_err_msg.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_err_msg,
            par_err_msg.storage->object
        );

    }
    if ((par_verbose.storage != NULL && par_verbose.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_verbose,
            par_verbose.storage->object
        );

    }
    if ((par_header.storage != NULL && par_header.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_header,
            par_header.storage->object
        );

    }
    frame_function->f_lineno = 570;
    tmp_import_name_from_4 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_4, tmp_import_locals_4, const_tuple_194a86e43e0cb7c7c00eac0bfd665f10_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_4 );
    if ( tmp_import_name_from_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 570;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_4 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_any );
    Py_DECREF( tmp_import_name_from_4 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 570;
        goto frame_exception_exit_1;
    }
    assert( var_any.object == NULL );
    var_any.object = tmp_assign_source_4;

    tmp_import_globals_5 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_5 = PyDict_New();
    if ((var_array.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_array,
            var_array.object
        );

    }
    if ((var_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_isnan,
            var_isnan.object
        );

    }
    if ((var_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_isinf,
            var_isinf.object
        );

    }
    if ((var_any.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_any,
            var_any.object
        );

    }
    if ((var_all.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_all,
            var_all.object
        );

    }
    if ((var_inf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_inf,
            var_inf.object
        );

    }
    if ((var_isnumber.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_isnumber,
            var_isnumber.object
        );

    }
    if ((var_chk_same_position.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_chk_same_position,
            var_chk_same_position.object
        );

    }
    if ((var_cond.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_cond,
            var_cond.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_x_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_x_isnan,
            var_x_isnan.object
        );

    }
    if ((var_y_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_y_isnan,
            var_y_isnan.object
        );

    }
    if ((var_x_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_x_isinf,
            var_x_isinf.object
        );

    }
    if ((var_y_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_y_isinf,
            var_y_isinf.object
        );

    }
    if ((var_x_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_x_id,
            var_x_id.object
        );

    }
    if ((var_y_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_y_id,
            var_y_id.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((var_reduced.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_reduced,
            var_reduced.object
        );

    }
    if ((var_match.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_match,
            var_match.object
        );

    }
    if ((var_e.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_e,
            var_e.object
        );

    }
    if ((var_traceback.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_traceback,
            var_traceback.object
        );

    }
    if ((var_efmt.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_efmt,
            var_efmt.object
        );

    }
    if ((par_comparison.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_comparison,
            par_comparison.object
        );

    }
    if ((par_x.storage != NULL && par_x.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_x,
            par_x.storage->object
        );

    }
    if ((par_y.storage != NULL && par_y.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_y,
            par_y.storage->object
        );

    }
    if ((par_err_msg.storage != NULL && par_err_msg.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_err_msg,
            par_err_msg.storage->object
        );

    }
    if ((par_verbose.storage != NULL && par_verbose.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_verbose,
            par_verbose.storage->object
        );

    }
    if ((par_header.storage != NULL && par_header.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_header,
            par_header.storage->object
        );

    }
    frame_function->f_lineno = 570;
    tmp_import_name_from_5 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_5, tmp_import_locals_5, const_tuple_194a86e43e0cb7c7c00eac0bfd665f10_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_5 );
    if ( tmp_import_name_from_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 570;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_5 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_all );
    Py_DECREF( tmp_import_name_from_5 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 570;
        goto frame_exception_exit_1;
    }
    assert( var_all.object == NULL );
    var_all.object = tmp_assign_source_5;

    tmp_import_globals_6 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_6 = PyDict_New();
    if ((var_array.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_array,
            var_array.object
        );

    }
    if ((var_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_isnan,
            var_isnan.object
        );

    }
    if ((var_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_isinf,
            var_isinf.object
        );

    }
    if ((var_any.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_any,
            var_any.object
        );

    }
    if ((var_all.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_all,
            var_all.object
        );

    }
    if ((var_inf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_inf,
            var_inf.object
        );

    }
    if ((var_isnumber.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_isnumber,
            var_isnumber.object
        );

    }
    if ((var_chk_same_position.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_chk_same_position,
            var_chk_same_position.object
        );

    }
    if ((var_cond.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_cond,
            var_cond.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_x_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_x_isnan,
            var_x_isnan.object
        );

    }
    if ((var_y_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_y_isnan,
            var_y_isnan.object
        );

    }
    if ((var_x_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_x_isinf,
            var_x_isinf.object
        );

    }
    if ((var_y_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_y_isinf,
            var_y_isinf.object
        );

    }
    if ((var_x_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_x_id,
            var_x_id.object
        );

    }
    if ((var_y_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_y_id,
            var_y_id.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((var_reduced.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_reduced,
            var_reduced.object
        );

    }
    if ((var_match.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_match,
            var_match.object
        );

    }
    if ((var_e.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_e,
            var_e.object
        );

    }
    if ((var_traceback.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_traceback,
            var_traceback.object
        );

    }
    if ((var_efmt.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_efmt,
            var_efmt.object
        );

    }
    if ((par_comparison.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_comparison,
            par_comparison.object
        );

    }
    if ((par_x.storage != NULL && par_x.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_x,
            par_x.storage->object
        );

    }
    if ((par_y.storage != NULL && par_y.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_y,
            par_y.storage->object
        );

    }
    if ((par_err_msg.storage != NULL && par_err_msg.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_err_msg,
            par_err_msg.storage->object
        );

    }
    if ((par_verbose.storage != NULL && par_verbose.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_verbose,
            par_verbose.storage->object
        );

    }
    if ((par_header.storage != NULL && par_header.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_6,
            const_str_plain_header,
            par_header.storage->object
        );

    }
    frame_function->f_lineno = 570;
    tmp_import_name_from_6 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_6, tmp_import_locals_6, const_tuple_194a86e43e0cb7c7c00eac0bfd665f10_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_6 );
    if ( tmp_import_name_from_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 570;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_6 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_inf );
    Py_DECREF( tmp_import_name_from_6 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 570;
        goto frame_exception_exit_1;
    }
    assert( var_inf.object == NULL );
    var_inf.object = tmp_assign_source_6;

    tmp_called_1 = var_array.object;

    tmp_call_pos_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_x.storage->object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 571;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    tmp_call_kw_1 = PyDict_Copy( const_dict_a00acf95180a0925f15877b623331589 );
    frame_function->f_lineno = 571;
    tmp_assign_source_7 = CALL_FUNCTION( tmp_called_1, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 571;
        goto frame_exception_exit_1;
    }
    if (par_x.storage->object == NULL)
    {
        par_x.storage->object = tmp_assign_source_7;
    }
    else
    {
        PyObject *old = par_x.storage->object;
        par_x.storage->object = tmp_assign_source_7;
        Py_DECREF( old );
    }
    tmp_called_2 = var_array.object;

    tmp_call_pos_2 = PyTuple_New( 1 );
    tmp_tuple_element_2 = par_y.storage->object;

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_call_pos_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 572;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_call_pos_2, 0, tmp_tuple_element_2 );
    tmp_call_kw_2 = PyDict_Copy( const_dict_a00acf95180a0925f15877b623331589 );
    frame_function->f_lineno = 572;
    tmp_assign_source_8 = CALL_FUNCTION( tmp_called_2, tmp_call_pos_2, tmp_call_kw_2 );
    Py_DECREF( tmp_call_pos_2 );
    Py_DECREF( tmp_call_kw_2 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 572;
        goto frame_exception_exit_1;
    }
    if (par_y.storage->object == NULL)
    {
        par_y.storage->object = tmp_assign_source_8;
    }
    else
    {
        PyObject *old = par_y.storage->object;
        par_y.storage->object = tmp_assign_source_8;
        Py_DECREF( old );
    }
    tmp_assign_source_9 = MAKE_FUNCTION_function_1_isnumber_of_function_17_assert_array_compare_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_9 );

        frame_function->f_lineno = 574;
        goto frame_exception_exit_1;
    }
    assert( var_isnumber.object == NULL );
    var_isnumber.object = tmp_assign_source_9;

    tmp_defaults_1 = const_tuple_str_plain_nan_tuple;
    tmp_assign_source_10 = MAKE_FUNCTION_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_1 ), par_err_msg, par_header, par_verbose, par_x, par_y );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_10 );

        frame_function->f_lineno = 577;
        goto frame_exception_exit_1;
    }
    assert( var_chk_same_position.object == NULL );
    var_chk_same_position.object = tmp_assign_source_10;

    // Tried block of try/except
    // Tried code
    tmp_assign_source_11 = NULL;
    // Tried code
    // Tried code
    tmp_assign_source_12 = NULL;
    // Tried code
    tmp_source_name_1 = par_x.storage->object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 590;
        goto try_finally_handler_4;
    }

    tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_shape );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 590;
        goto try_finally_handler_4;
    }
    tmp_compexpr_right_1 = const_tuple_empty;
    tmp_assign_source_13 = RICH_COMPARE_EQ( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 590;
        goto try_finally_handler_4;
    }
    assert( tmp_or_1__value_1.object == NULL );
    tmp_or_1__value_1.object = tmp_assign_source_13;

    tmp_cond_value_1 = tmp_or_1__value_1.object;

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 590;
        goto try_finally_handler_4;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_assign_source_12 = tmp_or_1__value_1.object;

    Py_INCREF( tmp_assign_source_12 );
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_assign_source_12 = NULL;
    // Tried code
    tmp_result = tmp_or_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_1__value_1.object );
        tmp_or_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_source_name_2 = par_y.storage->object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 590;
        goto try_finally_handler_5;
    }

    tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_shape );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 590;
        goto try_finally_handler_5;
    }
    tmp_compexpr_right_2 = const_tuple_empty;
    tmp_assign_source_12 = RICH_COMPARE_EQ( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 590;
        goto try_finally_handler_5;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_4;
    }

    goto finally_end_1;
    finally_end_1:;
    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_3;
    }

    goto finally_end_2;
    finally_end_2:;
    assert( tmp_or_2__value_1.object == NULL );
    tmp_or_2__value_1.object = tmp_assign_source_12;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_1__value_1.object );
    tmp_or_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto try_finally_handler_2;
    }

    goto finally_end_3;
    finally_end_3:;
    tmp_cond_value_2 = tmp_or_2__value_1.object;

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 590;
        goto try_finally_handler_2;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_assign_source_11 = tmp_or_2__value_1.object;

    Py_INCREF( tmp_assign_source_11 );
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_assign_source_11 = NULL;
    // Tried code
    tmp_result = tmp_or_2__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_2__value_1.object );
        tmp_or_2__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_source_name_3 = par_x.storage->object;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 590;
        goto try_finally_handler_6;
    }

    tmp_compexpr_left_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_shape );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 590;
        goto try_finally_handler_6;
    }
    tmp_source_name_4 = par_y.storage->object;

    if ( tmp_source_name_4 == NULL )
    {
        Py_DECREF( tmp_compexpr_left_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 590;
        goto try_finally_handler_6;
    }

    tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_shape );
    if ( tmp_compexpr_right_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compexpr_left_3 );

        frame_function->f_lineno = 590;
        goto try_finally_handler_6;
    }
    tmp_assign_source_11 = RICH_COMPARE_EQ( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    Py_DECREF( tmp_compexpr_right_3 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 590;
        goto try_finally_handler_6;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto try_finally_handler_2;
    }

    goto finally_end_4;
    finally_end_4:;
    condexpr_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto try_finally_handler_1;
    }

    goto finally_end_5;
    finally_end_5:;
    assert( var_cond.object == NULL );
    var_cond.object = tmp_assign_source_11;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_2__value_1.object );
    tmp_or_2__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto try_except_handler_1;
    }

    goto finally_end_6;
    finally_end_6:;
    tmp_cond_value_3 = var_cond.object;

    if ( tmp_cond_value_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 191027 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 591;
        goto try_except_handler_1;
    }

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 591;
        goto try_except_handler_1;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_called_3 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_build_err_msg );

    if (unlikely( tmp_called_3 == NULL ))
    {
        tmp_called_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_build_err_msg );
    }

    if ( tmp_called_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214367 ], 42, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 592;
        goto try_except_handler_1;
    }

    tmp_call_pos_3 = PyTuple_New( 2 );
    tmp_tuple_element_3 = PyList_New( 2 );
    tmp_list_element_1 = par_x.storage->object;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_3 );
        Py_DECREF( tmp_tuple_element_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 592;
        goto try_except_handler_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_3, 0, tmp_list_element_1 );
    tmp_list_element_1 = par_y.storage->object;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_3 );
        Py_DECREF( tmp_tuple_element_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 592;
        goto try_except_handler_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_3, 1, tmp_list_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_3, 0, tmp_tuple_element_3 );
    tmp_binop_left_1 = par_err_msg.storage->object;

    if ( tmp_binop_left_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 593;
        goto try_except_handler_1;
    }

    tmp_binop_left_2 = const_str_digest_0e237883597543ba31fbcaf2b4ac913b;
    tmp_binop_right_2 = PyTuple_New( 2 );
    tmp_source_name_5 = par_x.storage->object;

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_call_pos_3 );
        Py_DECREF( tmp_binop_right_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 594;
        goto try_except_handler_1;
    }

    tmp_tuple_element_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_shape );
    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_3 );
        Py_DECREF( tmp_binop_right_2 );

        frame_function->f_lineno = 594;
        goto try_except_handler_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_2, 0, tmp_tuple_element_4 );
    tmp_source_name_6 = par_y.storage->object;

    if ( tmp_source_name_6 == NULL )
    {
        Py_DECREF( tmp_call_pos_3 );
        Py_DECREF( tmp_binop_right_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 595;
        goto try_except_handler_1;
    }

    tmp_tuple_element_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_shape );
    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_3 );
        Py_DECREF( tmp_binop_right_2 );

        frame_function->f_lineno = 595;
        goto try_except_handler_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_2, 1, tmp_tuple_element_4 );
    tmp_binop_right_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_2, tmp_binop_right_2 );
    Py_DECREF( tmp_binop_right_2 );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_3 );

        frame_function->f_lineno = 594;
        goto try_except_handler_1;
    }
    tmp_tuple_element_3 = BINARY_OPERATION_ADD( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_3 );

        frame_function->f_lineno = 593;
        goto try_except_handler_1;
    }
    PyTuple_SET_ITEM( tmp_call_pos_3, 1, tmp_tuple_element_3 );
    tmp_call_kw_3 = _PyDict_NewPresized( 3 );
    tmp_dict_value_1 = par_verbose.storage->object;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_3 );
        Py_DECREF( tmp_call_kw_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49769 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 596;
        goto try_except_handler_1;
    }

    tmp_dict_key_1 = const_str_plain_verbose;
    PyDict_SetItem( tmp_call_kw_3, tmp_dict_key_1, tmp_dict_value_1 );
    tmp_dict_value_2 = par_header.storage->object;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_call_pos_3 );
        Py_DECREF( tmp_call_kw_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 645 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 596;
        goto try_except_handler_1;
    }

    tmp_dict_key_2 = const_str_plain_header;
    PyDict_SetItem( tmp_call_kw_3, tmp_dict_key_2, tmp_dict_value_2 );
    tmp_dict_value_3 = const_tuple_str_plain_x_str_plain_y_tuple;
    tmp_dict_key_3 = const_str_plain_names;
    PyDict_SetItem( tmp_call_kw_3, tmp_dict_key_3, tmp_dict_value_3 );
    frame_function->f_lineno = 597;
    tmp_assign_source_14 = CALL_FUNCTION( tmp_called_3, tmp_call_pos_3, tmp_call_kw_3 );
    Py_DECREF( tmp_call_pos_3 );
    Py_DECREF( tmp_call_kw_3 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 597;
        goto try_except_handler_1;
    }
    assert( var_msg.object == NULL );
    var_msg.object = tmp_assign_source_14;

    tmp_cond_value_4 = var_cond.object;

    if ( tmp_cond_value_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 191027 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 598;
        goto try_except_handler_1;
    }

    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 598;
        goto try_except_handler_1;
    }
    if (tmp_cond_truth_4 == 1)
    {
        goto branch_no_2;
    }
    else
    {
        goto branch_yes_2;
    }
    branch_yes_2:;
    tmp_make_exception_arg_1 = var_msg.object;

    frame_function->f_lineno = 599;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 599;
        goto try_except_handler_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 599;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_except_handler_1;
    branch_no_2:;
    branch_no_1:;
    // Tried code
    tmp_cond_value_5 = NULL;
    // Tried code
    tmp_called_4 = var_isnumber.object;

    if ( tmp_called_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215429 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 601;
        goto try_finally_handler_8;
    }

    tmp_call_arg_element_1 = par_x.storage->object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 601;
        goto try_finally_handler_8;
    }

    frame_function->f_lineno = 601;
    tmp_assign_source_15 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_1 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 601;
        goto try_finally_handler_8;
    }
    assert( tmp_and_1__value_1.object == NULL );
    tmp_and_1__value_1.object = tmp_assign_source_15;

    tmp_cond_value_6 = tmp_and_1__value_1.object;

    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 601;
        goto try_finally_handler_8;
    }
    if (tmp_cond_truth_6 == 1)
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_cond_value_5 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1.object );
        tmp_and_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_called_5 = var_isnumber.object;

    if ( tmp_called_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215429 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 601;
        goto try_finally_handler_9;
    }

    tmp_call_arg_element_2 = par_y.storage->object;

    if ( tmp_call_arg_element_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 601;
        goto try_finally_handler_9;
    }

    frame_function->f_lineno = 601;
    tmp_cond_value_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_2 );
    if ( tmp_cond_value_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 601;
        goto try_finally_handler_9;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_9:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_7 != NULL )
    {
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;

        goto try_finally_handler_8;
    }

    goto finally_end_7;
    finally_end_7:;
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_cond_value_5 = tmp_and_1__value_1.object;

    Py_INCREF( tmp_cond_value_5 );
    condexpr_end_3:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_8:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_8 != NULL )
    {
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;

        goto try_finally_handler_7;
    }

    goto finally_end_8;
    finally_end_8:;
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_5 );

        frame_function->f_lineno = 601;
        goto try_finally_handler_7;
    }
    Py_DECREF( tmp_cond_value_5 );
    if (tmp_cond_truth_5 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    // Tried code
    tmp_iter_arg_1 = PyTuple_New( 2 );
    tmp_called_6 = var_isnan.object;

    if ( tmp_called_6 == NULL )
    {
        Py_DECREF( tmp_iter_arg_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215483 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 602;
        goto try_finally_handler_10;
    }

    tmp_call_arg_element_3 = par_x.storage->object;

    if ( tmp_call_arg_element_3 == NULL )
    {
        Py_DECREF( tmp_iter_arg_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 602;
        goto try_finally_handler_10;
    }

    frame_function->f_lineno = 602;
    tmp_tuple_element_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_3 );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_iter_arg_1 );

        frame_function->f_lineno = 602;
        goto try_finally_handler_10;
    }
    PyTuple_SET_ITEM( tmp_iter_arg_1, 0, tmp_tuple_element_5 );
    tmp_called_7 = var_isnan.object;

    if ( tmp_called_7 == NULL )
    {
        Py_DECREF( tmp_iter_arg_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215483 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 602;
        goto try_finally_handler_10;
    }

    tmp_call_arg_element_4 = par_y.storage->object;

    if ( tmp_call_arg_element_4 == NULL )
    {
        Py_DECREF( tmp_iter_arg_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 602;
        goto try_finally_handler_10;
    }

    frame_function->f_lineno = 602;
    tmp_tuple_element_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_4 );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_iter_arg_1 );

        frame_function->f_lineno = 602;
        goto try_finally_handler_10;
    }
    PyTuple_SET_ITEM( tmp_iter_arg_1, 1, tmp_tuple_element_5 );
    tmp_assign_source_16 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 602;
        goto try_finally_handler_10;
    }
    assert( tmp_tuple_unpack_1__source_iter.object == NULL );
    tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_16;

    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_17 = UNPACK_PARAMETER_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_17 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 602;
        goto try_finally_handler_10;
    }
    assert( tmp_tuple_unpack_1__element_1.object == NULL );
    tmp_tuple_unpack_1__element_1.object = tmp_assign_source_17;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_18 = UNPACK_PARAMETER_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_18 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 602;
        goto try_finally_handler_10;
    }
    assert( tmp_tuple_unpack_1__element_2.object == NULL );
    tmp_tuple_unpack_1__element_2.object = tmp_assign_source_18;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_1 ); assert( PyIter_Check( tmp_iterator_name_1 ) );

    tmp_iterator_attempt_1 = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt_1 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_10;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_1 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_10;
    }
    tmp_assign_source_19 = tmp_tuple_unpack_1__element_1.object;

    assert( var_x_isnan.object == NULL );
    var_x_isnan.object = INCREASE_REFCOUNT( tmp_assign_source_19 );

    tmp_assign_source_20 = tmp_tuple_unpack_1__element_2.object;

    assert( var_y_isnan.object == NULL );
    var_y_isnan.object = INCREASE_REFCOUNT( tmp_assign_source_20 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_10:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter.object );
    tmp_tuple_unpack_1__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1.object );
    tmp_tuple_unpack_1__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2.object );
    tmp_tuple_unpack_1__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_9 != NULL )
    {
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;

        goto try_finally_handler_7;
    }

    goto finally_end_9;
    finally_end_9:;
    // Tried code
    tmp_iter_arg_2 = PyTuple_New( 2 );
    tmp_called_8 = var_isinf.object;

    if ( tmp_called_8 == NULL )
    {
        Py_DECREF( tmp_iter_arg_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215534 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 603;
        goto try_finally_handler_11;
    }

    tmp_call_arg_element_5 = par_x.storage->object;

    if ( tmp_call_arg_element_5 == NULL )
    {
        Py_DECREF( tmp_iter_arg_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 603;
        goto try_finally_handler_11;
    }

    frame_function->f_lineno = 603;
    tmp_tuple_element_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_8, tmp_call_arg_element_5 );
    if ( tmp_tuple_element_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_iter_arg_2 );

        frame_function->f_lineno = 603;
        goto try_finally_handler_11;
    }
    PyTuple_SET_ITEM( tmp_iter_arg_2, 0, tmp_tuple_element_6 );
    tmp_called_9 = var_isinf.object;

    if ( tmp_called_9 == NULL )
    {
        Py_DECREF( tmp_iter_arg_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215534 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 603;
        goto try_finally_handler_11;
    }

    tmp_call_arg_element_6 = par_y.storage->object;

    if ( tmp_call_arg_element_6 == NULL )
    {
        Py_DECREF( tmp_iter_arg_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 603;
        goto try_finally_handler_11;
    }

    frame_function->f_lineno = 603;
    tmp_tuple_element_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_9, tmp_call_arg_element_6 );
    if ( tmp_tuple_element_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_iter_arg_2 );

        frame_function->f_lineno = 603;
        goto try_finally_handler_11;
    }
    PyTuple_SET_ITEM( tmp_iter_arg_2, 1, tmp_tuple_element_6 );
    tmp_assign_source_21 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 603;
        goto try_finally_handler_11;
    }
    assert( tmp_tuple_unpack_2__source_iter.object == NULL );
    tmp_tuple_unpack_2__source_iter.object = tmp_assign_source_21;

    tmp_unpack_3 = tmp_tuple_unpack_2__source_iter.object;

    tmp_assign_source_22 = UNPACK_PARAMETER_NEXT( tmp_unpack_3, 0 );
    if ( tmp_assign_source_22 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 603;
        goto try_finally_handler_11;
    }
    assert( tmp_tuple_unpack_2__element_1.object == NULL );
    tmp_tuple_unpack_2__element_1.object = tmp_assign_source_22;

    tmp_unpack_4 = tmp_tuple_unpack_2__source_iter.object;

    tmp_assign_source_23 = UNPACK_PARAMETER_NEXT( tmp_unpack_4, 1 );
    if ( tmp_assign_source_23 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 603;
        goto try_finally_handler_11;
    }
    assert( tmp_tuple_unpack_2__element_2.object == NULL );
    tmp_tuple_unpack_2__element_2.object = tmp_assign_source_23;

    tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_2 ); assert( PyIter_Check( tmp_iterator_name_2 ) );

    tmp_iterator_attempt_2 = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

    if (likely( tmp_iterator_attempt_2 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_11;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_2 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_11;
    }
    tmp_assign_source_24 = tmp_tuple_unpack_2__element_1.object;

    assert( var_x_isinf.object == NULL );
    var_x_isinf.object = INCREASE_REFCOUNT( tmp_assign_source_24 );

    tmp_assign_source_25 = tmp_tuple_unpack_2__element_2.object;

    assert( var_y_isinf.object == NULL );
    var_y_isinf.object = INCREASE_REFCOUNT( tmp_assign_source_25 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_11:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_4 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_2__source_iter.object );
    tmp_tuple_unpack_2__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_1.object );
    tmp_tuple_unpack_2__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2.object );
    tmp_tuple_unpack_2__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_4;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_10 != NULL )
    {
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;

        goto try_finally_handler_7;
    }

    goto finally_end_10;
    finally_end_10:;
    // Tried code
    tmp_cond_value_7 = NULL;
    // Tried code
    tmp_called_10 = var_any.object;

    if ( tmp_called_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215585 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 606;
        goto try_finally_handler_13;
    }

    tmp_call_arg_element_7 = var_x_isnan.object;

    if ( tmp_call_arg_element_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215634 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 606;
        goto try_finally_handler_13;
    }

    frame_function->f_lineno = 606;
    tmp_assign_source_26 = CALL_FUNCTION_WITH_ARGS1( tmp_called_10, tmp_call_arg_element_7 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 606;
        goto try_finally_handler_13;
    }
    assert( tmp_or_3__value_1.object == NULL );
    tmp_or_3__value_1.object = tmp_assign_source_26;

    tmp_cond_value_8 = tmp_or_3__value_1.object;

    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 606;
        goto try_finally_handler_13;
    }
    if (tmp_cond_truth_8 == 1)
    {
        goto condexpr_true_4;
    }
    else
    {
        goto condexpr_false_4;
    }
    condexpr_true_4:;
    tmp_cond_value_7 = tmp_or_3__value_1.object;

    Py_INCREF( tmp_cond_value_7 );
    goto condexpr_end_4;
    condexpr_false_4:;
    tmp_cond_value_7 = NULL;
    // Tried code
    tmp_result = tmp_or_3__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_3__value_1.object );
        tmp_or_3__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_called_11 = var_any.object;

    if ( tmp_called_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215585 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 606;
        goto try_finally_handler_14;
    }

    tmp_call_arg_element_8 = var_y_isnan.object;

    if ( tmp_call_arg_element_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215687 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 606;
        goto try_finally_handler_14;
    }

    frame_function->f_lineno = 606;
    tmp_cond_value_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_11, tmp_call_arg_element_8 );
    if ( tmp_cond_value_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 606;
        goto try_finally_handler_14;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_14:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_11 != NULL )
    {
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;

        goto try_finally_handler_13;
    }

    goto finally_end_11;
    finally_end_11:;
    condexpr_end_4:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_13:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_12 != NULL )
    {
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;

        goto try_finally_handler_12;
    }

    goto finally_end_12;
    finally_end_12:;
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_7 );

        frame_function->f_lineno = 606;
        goto try_finally_handler_12;
    }
    Py_DECREF( tmp_cond_value_7 );
    if (tmp_cond_truth_7 == 1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_12 = var_chk_same_position.object;

    if ( tmp_called_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215740 ], 63, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 607;
        goto try_finally_handler_12;
    }

    tmp_call_pos_4 = PyTuple_New( 2 );
    tmp_tuple_element_7 = var_x_isnan.object;

    if ( tmp_tuple_element_7 == NULL )
    {
        Py_DECREF( tmp_call_pos_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215634 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 607;
        goto try_finally_handler_12;
    }

    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_call_pos_4, 0, tmp_tuple_element_7 );
    tmp_tuple_element_7 = var_y_isnan.object;

    if ( tmp_tuple_element_7 == NULL )
    {
        Py_DECREF( tmp_call_pos_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215687 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 607;
        goto try_finally_handler_12;
    }

    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_call_pos_4, 1, tmp_tuple_element_7 );
    tmp_call_kw_4 = PyDict_Copy( const_dict_568ac7eccabc8d891d945f2840f427e7 );
    frame_function->f_lineno = 607;
    tmp_unused = CALL_FUNCTION( tmp_called_12, tmp_call_pos_4, tmp_call_kw_4 );
    Py_DECREF( tmp_call_pos_4 );
    Py_DECREF( tmp_call_kw_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 607;
        goto try_finally_handler_12;
    }
    Py_DECREF( tmp_unused );
    branch_no_4:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_12:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_5 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_3__value_1.object );
    tmp_or_3__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_5;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_13 != NULL )
    {
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;

        goto try_finally_handler_7;
    }

    goto finally_end_13;
    finally_end_13:;
    // Tried code
    tmp_cond_value_9 = NULL;
    // Tried code
    tmp_called_13 = var_any.object;

    if ( tmp_called_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215585 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 608;
        goto try_finally_handler_16;
    }

    tmp_call_arg_element_9 = var_x_isinf.object;

    if ( tmp_call_arg_element_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215803 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 608;
        goto try_finally_handler_16;
    }

    frame_function->f_lineno = 608;
    tmp_assign_source_27 = CALL_FUNCTION_WITH_ARGS1( tmp_called_13, tmp_call_arg_element_9 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 608;
        goto try_finally_handler_16;
    }
    assert( tmp_or_4__value_1.object == NULL );
    tmp_or_4__value_1.object = tmp_assign_source_27;

    tmp_cond_value_10 = tmp_or_4__value_1.object;

    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 608;
        goto try_finally_handler_16;
    }
    if (tmp_cond_truth_10 == 1)
    {
        goto condexpr_true_5;
    }
    else
    {
        goto condexpr_false_5;
    }
    condexpr_true_5:;
    tmp_cond_value_9 = tmp_or_4__value_1.object;

    Py_INCREF( tmp_cond_value_9 );
    goto condexpr_end_5;
    condexpr_false_5:;
    tmp_cond_value_9 = NULL;
    // Tried code
    tmp_result = tmp_or_4__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_4__value_1.object );
        tmp_or_4__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_called_14 = var_any.object;

    if ( tmp_called_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215585 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 608;
        goto try_finally_handler_17;
    }

    tmp_call_arg_element_10 = var_y_isinf.object;

    if ( tmp_call_arg_element_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215856 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 608;
        goto try_finally_handler_17;
    }

    frame_function->f_lineno = 608;
    tmp_cond_value_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_14, tmp_call_arg_element_10 );
    if ( tmp_cond_value_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 608;
        goto try_finally_handler_17;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_17:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_14 != NULL )
    {
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;

        goto try_finally_handler_16;
    }

    goto finally_end_14;
    finally_end_14:;
    condexpr_end_5:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_16:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_15 != NULL )
    {
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;

        goto try_finally_handler_15;
    }

    goto finally_end_15;
    finally_end_15:;
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_9 );

        frame_function->f_lineno = 608;
        goto try_finally_handler_15;
    }
    Py_DECREF( tmp_cond_value_9 );
    if (tmp_cond_truth_9 == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_called_15 = var_chk_same_position.object;

    if ( tmp_called_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215740 ], 63, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 610;
        goto try_finally_handler_15;
    }

    tmp_call_pos_5 = PyTuple_New( 2 );
    tmp_compexpr_left_4 = par_x.storage->object;

    if ( tmp_compexpr_left_4 == NULL )
    {
        Py_DECREF( tmp_call_pos_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 610;
        goto try_finally_handler_15;
    }

    tmp_unary_arg_1 = var_inf.object;

    if ( tmp_unary_arg_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215909 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 610;
        goto try_finally_handler_15;
    }

    tmp_compexpr_right_4 = UNARY_OPERATION( PyNumber_Positive, tmp_unary_arg_1 );
    if ( tmp_compexpr_right_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_5 );

        frame_function->f_lineno = 610;
        goto try_finally_handler_15;
    }
    tmp_tuple_element_8 = RICH_COMPARE_EQ( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_right_4 );
    if ( tmp_tuple_element_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_5 );

        frame_function->f_lineno = 610;
        goto try_finally_handler_15;
    }
    PyTuple_SET_ITEM( tmp_call_pos_5, 0, tmp_tuple_element_8 );
    tmp_compexpr_left_5 = par_y.storage->object;

    if ( tmp_compexpr_left_5 == NULL )
    {
        Py_DECREF( tmp_call_pos_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 610;
        goto try_finally_handler_15;
    }

    tmp_unary_arg_2 = var_inf.object;

    if ( tmp_unary_arg_2 == NULL )
    {
        Py_DECREF( tmp_call_pos_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215909 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 610;
        goto try_finally_handler_15;
    }

    tmp_compexpr_right_5 = UNARY_OPERATION( PyNumber_Positive, tmp_unary_arg_2 );
    if ( tmp_compexpr_right_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_5 );

        frame_function->f_lineno = 610;
        goto try_finally_handler_15;
    }
    tmp_tuple_element_8 = RICH_COMPARE_EQ( tmp_compexpr_left_5, tmp_compexpr_right_5 );
    Py_DECREF( tmp_compexpr_right_5 );
    if ( tmp_tuple_element_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_5 );

        frame_function->f_lineno = 610;
        goto try_finally_handler_15;
    }
    PyTuple_SET_ITEM( tmp_call_pos_5, 1, tmp_tuple_element_8 );
    tmp_call_kw_5 = PyDict_Copy( const_dict_ff8ef3bf3e81fbdb8830624987bd4652 );
    frame_function->f_lineno = 610;
    tmp_unused = CALL_FUNCTION( tmp_called_15, tmp_call_pos_5, tmp_call_kw_5 );
    Py_DECREF( tmp_call_pos_5 );
    Py_DECREF( tmp_call_kw_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 610;
        goto try_finally_handler_15;
    }
    Py_DECREF( tmp_unused );
    tmp_called_16 = var_chk_same_position.object;

    if ( tmp_called_16 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215740 ], 63, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 611;
        goto try_finally_handler_15;
    }

    tmp_call_pos_6 = PyTuple_New( 2 );
    tmp_compexpr_left_6 = par_x.storage->object;

    if ( tmp_compexpr_left_6 == NULL )
    {
        Py_DECREF( tmp_call_pos_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 611;
        goto try_finally_handler_15;
    }

    tmp_unary_arg_3 = var_inf.object;

    if ( tmp_unary_arg_3 == NULL )
    {
        Py_DECREF( tmp_call_pos_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215909 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 611;
        goto try_finally_handler_15;
    }

    tmp_compexpr_right_6 = UNARY_OPERATION( PyNumber_Negative, tmp_unary_arg_3 );
    if ( tmp_compexpr_right_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_6 );

        frame_function->f_lineno = 611;
        goto try_finally_handler_15;
    }
    tmp_tuple_element_9 = RICH_COMPARE_EQ( tmp_compexpr_left_6, tmp_compexpr_right_6 );
    Py_DECREF( tmp_compexpr_right_6 );
    if ( tmp_tuple_element_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_6 );

        frame_function->f_lineno = 611;
        goto try_finally_handler_15;
    }
    PyTuple_SET_ITEM( tmp_call_pos_6, 0, tmp_tuple_element_9 );
    tmp_compexpr_left_7 = par_y.storage->object;

    if ( tmp_compexpr_left_7 == NULL )
    {
        Py_DECREF( tmp_call_pos_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 611;
        goto try_finally_handler_15;
    }

    tmp_unary_arg_4 = var_inf.object;

    if ( tmp_unary_arg_4 == NULL )
    {
        Py_DECREF( tmp_call_pos_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215909 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 611;
        goto try_finally_handler_15;
    }

    tmp_compexpr_right_7 = UNARY_OPERATION( PyNumber_Negative, tmp_unary_arg_4 );
    if ( tmp_compexpr_right_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_6 );

        frame_function->f_lineno = 611;
        goto try_finally_handler_15;
    }
    tmp_tuple_element_9 = RICH_COMPARE_EQ( tmp_compexpr_left_7, tmp_compexpr_right_7 );
    Py_DECREF( tmp_compexpr_right_7 );
    if ( tmp_tuple_element_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_6 );

        frame_function->f_lineno = 611;
        goto try_finally_handler_15;
    }
    PyTuple_SET_ITEM( tmp_call_pos_6, 1, tmp_tuple_element_9 );
    tmp_call_kw_6 = PyDict_Copy( const_dict_117eec822878c8a1e3d3fe65ec8106fd );
    frame_function->f_lineno = 611;
    tmp_unused = CALL_FUNCTION( tmp_called_16, tmp_call_pos_6, tmp_call_kw_6 );
    Py_DECREF( tmp_call_pos_6 );
    Py_DECREF( tmp_call_kw_6 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 611;
        goto try_finally_handler_15;
    }
    Py_DECREF( tmp_unused );
    branch_no_5:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_15:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_6 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_4__value_1.object );
    tmp_or_4__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_6;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_16 != NULL )
    {
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;

        goto try_finally_handler_7;
    }

    goto finally_end_16;
    finally_end_16:;
    // Tried code
    tmp_iter_arg_3 = PyTuple_New( 2 );
    tmp_tuple_element_10 = var_x_isnan.object;

    if ( tmp_tuple_element_10 == NULL )
    {
        Py_DECREF( tmp_iter_arg_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215634 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 614;
        goto try_finally_handler_18;
    }

    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_iter_arg_3, 0, tmp_tuple_element_10 );
    tmp_tuple_element_10 = var_y_isnan.object;

    if ( tmp_tuple_element_10 == NULL )
    {
        Py_DECREF( tmp_iter_arg_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215687 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 614;
        goto try_finally_handler_18;
    }

    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_iter_arg_3, 1, tmp_tuple_element_10 );
    tmp_assign_source_28 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 614;
        goto try_finally_handler_18;
    }
    assert( tmp_tuple_unpack_3__source_iter.object == NULL );
    tmp_tuple_unpack_3__source_iter.object = tmp_assign_source_28;

    tmp_unpack_5 = tmp_tuple_unpack_3__source_iter.object;

    tmp_assign_source_29 = UNPACK_PARAMETER_NEXT( tmp_unpack_5, 0 );
    if ( tmp_assign_source_29 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 614;
        goto try_finally_handler_18;
    }
    assert( tmp_tuple_unpack_3__element_1.object == NULL );
    tmp_tuple_unpack_3__element_1.object = tmp_assign_source_29;

    tmp_unpack_6 = tmp_tuple_unpack_3__source_iter.object;

    tmp_assign_source_30 = UNPACK_PARAMETER_NEXT( tmp_unpack_6, 1 );
    if ( tmp_assign_source_30 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 614;
        goto try_finally_handler_18;
    }
    assert( tmp_tuple_unpack_3__element_2.object == NULL );
    tmp_tuple_unpack_3__element_2.object = tmp_assign_source_30;

    tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_3 ); assert( PyIter_Check( tmp_iterator_name_3 ) );

    tmp_iterator_attempt_3 = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

    if (likely( tmp_iterator_attempt_3 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_18;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_3 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_18;
    }
    tmp_assign_source_31 = tmp_tuple_unpack_3__element_1.object;

    assert( var_x_id.object == NULL );
    var_x_id.object = INCREASE_REFCOUNT( tmp_assign_source_31 );

    tmp_assign_source_32 = tmp_tuple_unpack_3__element_2.object;

    assert( var_y_id.object == NULL );
    var_y_id.object = INCREASE_REFCOUNT( tmp_assign_source_32 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_18:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_7 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_3__source_iter.object );
    tmp_tuple_unpack_3__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_1.object );
    tmp_tuple_unpack_3__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_2.object );
    tmp_tuple_unpack_3__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_7;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_17 != NULL )
    {
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;

        goto try_finally_handler_7;
    }

    goto finally_end_17;
    finally_end_17:;
    tmp_assign_source_33 = var_x_id.object;

    if ( tmp_assign_source_33 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215958 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 615;
        goto try_finally_handler_7;
    }

    assert( tmp_inplace_assign_1__inplace_start.object == NULL );
    tmp_inplace_assign_1__inplace_start.object = INCREASE_REFCOUNT( tmp_assign_source_33 );

    // Tried code
    tmp_binop_left_3 = tmp_inplace_assign_1__inplace_start.object;

    tmp_binop_right_3 = var_x_isinf.object;

    if ( tmp_binop_right_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215803 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 615;
        goto try_finally_handler_19;
    }

    tmp_assign_source_34 = BINARY_OPERATION( PyNumber_InPlaceOr, tmp_binop_left_3, tmp_binop_right_3 );
    if ( tmp_assign_source_34 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 615;
        goto try_finally_handler_19;
    }
    assert( tmp_inplace_assign_1__inplace_end.object == NULL );
    tmp_inplace_assign_1__inplace_end.object = tmp_assign_source_34;

    tmp_compare_left_1 = tmp_inplace_assign_1__inplace_start.object;

    tmp_compare_right_1 = tmp_inplace_assign_1__inplace_end.object;

    tmp_isnot_1 = ( tmp_compare_left_1 != tmp_compare_right_1 );
    if (tmp_isnot_1)
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_assign_source_35 = tmp_inplace_assign_1__inplace_end.object;

    if (var_x_id.object == NULL)
    {
        var_x_id.object = INCREASE_REFCOUNT( tmp_assign_source_35 );
    }
    else
    {
        PyObject *old = var_x_id.object;
        var_x_id.object = INCREASE_REFCOUNT( tmp_assign_source_35 );
        Py_DECREF( old );
    }
    branch_no_6:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_19:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_8 = frame_function->f_lineno;
    tmp_result = tmp_inplace_assign_1__inplace_start.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_inplace_assign_1__inplace_start.object );
        tmp_inplace_assign_1__inplace_start.object = NULL;
    }

    assert( tmp_result != false );
    Py_XDECREF( tmp_inplace_assign_1__inplace_end.object );
    tmp_inplace_assign_1__inplace_end.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_8;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_18 != NULL )
    {
        exception_type = exception_keeper_type_18;
        exception_value = exception_keeper_value_18;
        exception_tb = exception_keeper_tb_18;

        goto try_finally_handler_7;
    }

    goto finally_end_18;
    finally_end_18:;
    tmp_assign_source_36 = var_y_id.object;

    if ( tmp_assign_source_36 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216008 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 616;
        goto try_finally_handler_7;
    }

    assert( tmp_inplace_assign_2__inplace_start.object == NULL );
    tmp_inplace_assign_2__inplace_start.object = INCREASE_REFCOUNT( tmp_assign_source_36 );

    // Tried code
    tmp_binop_left_4 = tmp_inplace_assign_2__inplace_start.object;

    tmp_binop_right_4 = var_y_isinf.object;

    if ( tmp_binop_right_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215856 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 616;
        goto try_finally_handler_20;
    }

    tmp_assign_source_37 = BINARY_OPERATION( PyNumber_InPlaceOr, tmp_binop_left_4, tmp_binop_right_4 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 616;
        goto try_finally_handler_20;
    }
    assert( tmp_inplace_assign_2__inplace_end.object == NULL );
    tmp_inplace_assign_2__inplace_end.object = tmp_assign_source_37;

    tmp_compare_left_2 = tmp_inplace_assign_2__inplace_start.object;

    tmp_compare_right_2 = tmp_inplace_assign_2__inplace_end.object;

    tmp_isnot_2 = ( tmp_compare_left_2 != tmp_compare_right_2 );
    if (tmp_isnot_2)
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_assign_source_38 = tmp_inplace_assign_2__inplace_end.object;

    if (var_y_id.object == NULL)
    {
        var_y_id.object = INCREASE_REFCOUNT( tmp_assign_source_38 );
    }
    else
    {
        PyObject *old = var_y_id.object;
        var_y_id.object = INCREASE_REFCOUNT( tmp_assign_source_38 );
        Py_DECREF( old );
    }
    branch_no_7:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_20:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_9 = frame_function->f_lineno;
    tmp_result = tmp_inplace_assign_2__inplace_start.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_inplace_assign_2__inplace_start.object );
        tmp_inplace_assign_2__inplace_start.object = NULL;
    }

    assert( tmp_result != false );
    Py_XDECREF( tmp_inplace_assign_2__inplace_end.object );
    tmp_inplace_assign_2__inplace_end.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_9;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_19 != NULL )
    {
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;

        goto try_finally_handler_7;
    }

    goto finally_end_19;
    finally_end_19:;
    tmp_called_17 = var_all.object;

    if ( tmp_called_17 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 72592 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 619;
        goto try_finally_handler_7;
    }

    tmp_call_arg_element_11 = var_x_id.object;

    if ( tmp_call_arg_element_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215958 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 619;
        goto try_finally_handler_7;
    }

    frame_function->f_lineno = 619;
    tmp_cond_value_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_17, tmp_call_arg_element_11 );
    if ( tmp_cond_value_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 619;
        goto try_finally_handler_7;
    }
    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_11 );

        frame_function->f_lineno = 619;
        goto try_finally_handler_7;
    }
    Py_DECREF( tmp_cond_value_11 );
    if (tmp_cond_truth_11 == 1)
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_finally_handler_start_1;
    branch_no_8:;
    tmp_called_18 = var_any.object;

    if ( tmp_called_18 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215585 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 622;
        goto try_finally_handler_7;
    }

    tmp_call_arg_element_12 = var_x_id.object;

    if ( tmp_call_arg_element_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215958 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 622;
        goto try_finally_handler_7;
    }

    frame_function->f_lineno = 622;
    tmp_cond_value_12 = CALL_FUNCTION_WITH_ARGS1( tmp_called_18, tmp_call_arg_element_12 );
    if ( tmp_cond_value_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 622;
        goto try_finally_handler_7;
    }
    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_12 );

        frame_function->f_lineno = 622;
        goto try_finally_handler_7;
    }
    Py_DECREF( tmp_cond_value_12 );
    if (tmp_cond_truth_12 == 1)
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_called_19 = par_comparison.object;

    if ( tmp_called_19 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216058 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 623;
        goto try_finally_handler_7;
    }

    tmp_subscr_target_1 = par_x.storage->object;

    if ( tmp_subscr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 623;
        goto try_finally_handler_7;
    }

    tmp_unary_arg_5 = var_x_id.object;

    if ( tmp_unary_arg_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215958 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 623;
        goto try_finally_handler_7;
    }

    tmp_subscr_subscript_1 = UNARY_OPERATION( PyNumber_Invert, tmp_unary_arg_5 );
    if ( tmp_subscr_subscript_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 623;
        goto try_finally_handler_7;
    }
    tmp_call_arg_element_13 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    Py_DECREF( tmp_subscr_subscript_1 );
    if ( tmp_call_arg_element_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 623;
        goto try_finally_handler_7;
    }
    tmp_subscr_target_2 = par_y.storage->object;

    if ( tmp_subscr_target_2 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_13 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 623;
        goto try_finally_handler_7;
    }

    tmp_unary_arg_6 = var_y_id.object;

    if ( tmp_unary_arg_6 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_13 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216008 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 623;
        goto try_finally_handler_7;
    }

    tmp_subscr_subscript_2 = UNARY_OPERATION( PyNumber_Invert, tmp_unary_arg_6 );
    if ( tmp_subscr_subscript_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_13 );

        frame_function->f_lineno = 623;
        goto try_finally_handler_7;
    }
    tmp_call_arg_element_14 = LOOKUP_SUBSCRIPT( tmp_subscr_target_2, tmp_subscr_subscript_2 );
    Py_DECREF( tmp_subscr_subscript_2 );
    if ( tmp_call_arg_element_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_13 );

        frame_function->f_lineno = 623;
        goto try_finally_handler_7;
    }
    frame_function->f_lineno = 623;
    tmp_assign_source_39 = CALL_FUNCTION_WITH_ARGS2( tmp_called_19, tmp_call_arg_element_13, tmp_call_arg_element_14 );
    Py_DECREF( tmp_call_arg_element_13 );
    Py_DECREF( tmp_call_arg_element_14 );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 623;
        goto try_finally_handler_7;
    }
    assert( var_val.object == NULL );
    var_val.object = tmp_assign_source_39;

    goto branch_end_9;
    branch_no_9:;
    tmp_called_20 = par_comparison.object;

    if ( tmp_called_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216058 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 625;
        goto try_finally_handler_7;
    }

    tmp_call_arg_element_15 = par_x.storage->object;

    if ( tmp_call_arg_element_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 625;
        goto try_finally_handler_7;
    }

    tmp_call_arg_element_16 = par_y.storage->object;

    if ( tmp_call_arg_element_16 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 625;
        goto try_finally_handler_7;
    }

    frame_function->f_lineno = 625;
    tmp_assign_source_40 = CALL_FUNCTION_WITH_ARGS2( tmp_called_20, tmp_call_arg_element_15, tmp_call_arg_element_16 );
    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 625;
        goto try_finally_handler_7;
    }
    assert( var_val.object == NULL );
    var_val.object = tmp_assign_source_40;

    branch_end_9:;
    goto branch_end_3;
    branch_no_3:;
    tmp_called_21 = par_comparison.object;

    if ( tmp_called_21 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216058 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 627;
        goto try_finally_handler_7;
    }

    tmp_call_arg_element_17 = par_x.storage->object;

    if ( tmp_call_arg_element_17 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 627;
        goto try_finally_handler_7;
    }

    tmp_call_arg_element_18 = par_y.storage->object;

    if ( tmp_call_arg_element_18 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 627;
        goto try_finally_handler_7;
    }

    frame_function->f_lineno = 627;
    tmp_assign_source_41 = CALL_FUNCTION_WITH_ARGS2( tmp_called_21, tmp_call_arg_element_17, tmp_call_arg_element_18 );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 627;
        goto try_finally_handler_7;
    }
    assert( var_val.object == NULL );
    var_val.object = tmp_assign_source_41;

    branch_end_3:;
    try_finally_handler_start_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_7:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_10 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_1__value_1.object );
    tmp_and_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_10;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_20 != NULL )
    {
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;

        goto try_except_handler_1;
    }

    // Return value if any.
    if ( tmp_return_value != NULL )
    {
        goto frame_return_exit_1;
    }

    goto finally_end_20;
    finally_end_20:;
    tmp_isinstance_inst_1 = var_val.object;

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28580 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 629;
        goto try_except_handler_1;
    }

    tmp_isinstance_cls_1 = LOOKUP_BUILTIN( const_str_plain_bool );
    if ( tmp_isinstance_cls_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 629;
        goto try_except_handler_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 629;
        goto try_except_handler_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_assign_source_42 = var_val.object;

    if ( tmp_assign_source_42 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28580 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 630;
        goto try_except_handler_1;
    }

    if (var_cond.object == NULL)
    {
        var_cond.object = INCREASE_REFCOUNT( tmp_assign_source_42 );
    }
    else
    {
        PyObject *old = var_cond.object;
        var_cond.object = INCREASE_REFCOUNT( tmp_assign_source_42 );
        Py_DECREF( old );
    }
    tmp_assign_source_43 = LIST_COPY( const_list_int_0_list );
    assert( var_reduced.object == NULL );
    var_reduced.object = tmp_assign_source_43;

    goto branch_end_10;
    branch_no_10:;
    tmp_source_name_7 = var_val.object;

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28580 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 633;
        goto try_except_handler_1;
    }

    tmp_called_22 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_ravel );
    if ( tmp_called_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 633;
        goto try_except_handler_1;
    }
    frame_function->f_lineno = 633;
    tmp_assign_source_44 = CALL_FUNCTION_NO_ARGS( tmp_called_22 );
    Py_DECREF( tmp_called_22 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 633;
        goto try_except_handler_1;
    }
    assert( var_reduced.object == NULL );
    var_reduced.object = tmp_assign_source_44;

    tmp_source_name_8 = var_reduced.object;

    tmp_called_23 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_all );
    if ( tmp_called_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 634;
        goto try_except_handler_1;
    }
    frame_function->f_lineno = 634;
    tmp_assign_source_45 = CALL_FUNCTION_NO_ARGS( tmp_called_23 );
    Py_DECREF( tmp_called_23 );
    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 634;
        goto try_except_handler_1;
    }
    if (var_cond.object == NULL)
    {
        var_cond.object = tmp_assign_source_45;
    }
    else
    {
        PyObject *old = var_cond.object;
        var_cond.object = tmp_assign_source_45;
        Py_DECREF( old );
    }
    tmp_source_name_9 = var_reduced.object;

    tmp_called_24 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_tolist );
    if ( tmp_called_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 635;
        goto try_except_handler_1;
    }
    frame_function->f_lineno = 635;
    tmp_assign_source_46 = CALL_FUNCTION_NO_ARGS( tmp_called_24 );
    Py_DECREF( tmp_called_24 );
    if ( tmp_assign_source_46 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 635;
        goto try_except_handler_1;
    }
    assert( var_reduced.object != NULL );
    {
        PyObject *old = var_reduced.object;
        var_reduced.object = tmp_assign_source_46;
        Py_DECREF( old );
    }

    branch_end_10:;
    tmp_cond_value_13 = var_cond.object;

    tmp_cond_truth_13 = CHECK_IF_TRUE( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 636;
        goto try_except_handler_1;
    }
    if (tmp_cond_truth_13 == 1)
    {
        goto branch_no_11;
    }
    else
    {
        goto branch_yes_11;
    }
    branch_yes_11:;
    tmp_binop_left_5 = const_int_pos_100;
    tmp_binop_left_7 = const_float_100_0;
    tmp_source_name_10 = var_reduced.object;

    tmp_called_25 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_count );
    if ( tmp_called_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 637;
        goto try_except_handler_1;
    }
    tmp_call_arg_element_19 = const_int_pos_1;
    frame_function->f_lineno = 637;
    tmp_binop_right_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_25, tmp_call_arg_element_19 );
    Py_DECREF( tmp_called_25 );
    if ( tmp_binop_right_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 637;
        goto try_except_handler_1;
    }
    tmp_binop_left_6 = BINARY_OPERATION_MUL( tmp_binop_left_7, tmp_binop_right_7 );
    Py_DECREF( tmp_binop_right_7 );
    if ( tmp_binop_left_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 637;
        goto try_except_handler_1;
    }
    tmp_len_arg_1 = var_reduced.object;

    tmp_binop_right_6 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_binop_right_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_left_6 );

        frame_function->f_lineno = 637;
        goto try_except_handler_1;
    }
    tmp_binop_right_5 = BINARY_OPERATION( PyNumber_TrueDivide, tmp_binop_left_6, tmp_binop_right_6 );
    Py_DECREF( tmp_binop_left_6 );
    Py_DECREF( tmp_binop_right_6 );
    if ( tmp_binop_right_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 637;
        goto try_except_handler_1;
    }
    tmp_assign_source_47 = BINARY_OPERATION_SUB( tmp_binop_left_5, tmp_binop_right_5 );
    Py_DECREF( tmp_binop_right_5 );
    if ( tmp_assign_source_47 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 637;
        goto try_except_handler_1;
    }
    assert( var_match.object == NULL );
    var_match.object = tmp_assign_source_47;

    tmp_called_26 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_build_err_msg );

    if (unlikely( tmp_called_26 == NULL ))
    {
        tmp_called_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_build_err_msg );
    }

    if ( tmp_called_26 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214367 ], 42, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 638;
        goto try_except_handler_1;
    }

    tmp_call_pos_7 = PyTuple_New( 2 );
    tmp_tuple_element_11 = PyList_New( 2 );
    tmp_list_element_2 = par_x.storage->object;

    if ( tmp_list_element_2 == NULL )
    {
        Py_DECREF( tmp_call_pos_7 );
        Py_DECREF( tmp_tuple_element_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 638;
        goto try_except_handler_1;
    }

    Py_INCREF( tmp_list_element_2 );
    PyList_SET_ITEM( tmp_tuple_element_11, 0, tmp_list_element_2 );
    tmp_list_element_2 = par_y.storage->object;

    if ( tmp_list_element_2 == NULL )
    {
        Py_DECREF( tmp_call_pos_7 );
        Py_DECREF( tmp_tuple_element_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 638;
        goto try_except_handler_1;
    }

    Py_INCREF( tmp_list_element_2 );
    PyList_SET_ITEM( tmp_tuple_element_11, 1, tmp_list_element_2 );
    PyTuple_SET_ITEM( tmp_call_pos_7, 0, tmp_tuple_element_11 );
    tmp_binop_left_8 = par_err_msg.storage->object;

    if ( tmp_binop_left_8 == NULL )
    {
        Py_DECREF( tmp_call_pos_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 639;
        goto try_except_handler_1;
    }

    tmp_binop_left_9 = const_str_digest_969a3200cb32934e2cf29c4b9f3a5ea7;
    tmp_binop_right_9 = PyTuple_New( 1 );
    tmp_tuple_element_12 = var_match.object;

    Py_INCREF( tmp_tuple_element_12 );
    PyTuple_SET_ITEM( tmp_binop_right_9, 0, tmp_tuple_element_12 );
    tmp_binop_right_8 = BINARY_OPERATION_REMAINDER( tmp_binop_left_9, tmp_binop_right_9 );
    Py_DECREF( tmp_binop_right_9 );
    if ( tmp_binop_right_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_7 );

        frame_function->f_lineno = 640;
        goto try_except_handler_1;
    }
    tmp_tuple_element_11 = BINARY_OPERATION_ADD( tmp_binop_left_8, tmp_binop_right_8 );
    Py_DECREF( tmp_binop_right_8 );
    if ( tmp_tuple_element_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_7 );

        frame_function->f_lineno = 639;
        goto try_except_handler_1;
    }
    PyTuple_SET_ITEM( tmp_call_pos_7, 1, tmp_tuple_element_11 );
    tmp_call_kw_7 = _PyDict_NewPresized( 3 );
    tmp_dict_value_4 = par_verbose.storage->object;

    if ( tmp_dict_value_4 == NULL )
    {
        Py_DECREF( tmp_call_pos_7 );
        Py_DECREF( tmp_call_kw_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49769 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 641;
        goto try_except_handler_1;
    }

    tmp_dict_key_4 = const_str_plain_verbose;
    PyDict_SetItem( tmp_call_kw_7, tmp_dict_key_4, tmp_dict_value_4 );
    tmp_dict_value_5 = par_header.storage->object;

    if ( tmp_dict_value_5 == NULL )
    {
        Py_DECREF( tmp_call_pos_7 );
        Py_DECREF( tmp_call_kw_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 645 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 641;
        goto try_except_handler_1;
    }

    tmp_dict_key_5 = const_str_plain_header;
    PyDict_SetItem( tmp_call_kw_7, tmp_dict_key_5, tmp_dict_value_5 );
    tmp_dict_value_6 = const_tuple_str_plain_x_str_plain_y_tuple;
    tmp_dict_key_6 = const_str_plain_names;
    PyDict_SetItem( tmp_call_kw_7, tmp_dict_key_6, tmp_dict_value_6 );
    frame_function->f_lineno = 642;
    tmp_assign_source_48 = CALL_FUNCTION( tmp_called_26, tmp_call_pos_7, tmp_call_kw_7 );
    Py_DECREF( tmp_call_pos_7 );
    Py_DECREF( tmp_call_kw_7 );
    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 642;
        goto try_except_handler_1;
    }
    if (var_msg.object == NULL)
    {
        var_msg.object = tmp_assign_source_48;
    }
    else
    {
        PyObject *old = var_msg.object;
        var_msg.object = tmp_assign_source_48;
        Py_DECREF( old );
    }
    tmp_cond_value_14 = var_cond.object;

    tmp_cond_truth_14 = CHECK_IF_TRUE( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 643;
        goto try_except_handler_1;
    }
    if (tmp_cond_truth_14 == 1)
    {
        goto branch_no_12;
    }
    else
    {
        goto branch_yes_12;
    }
    branch_yes_12:;
    tmp_make_exception_arg_2 = var_msg.object;

    frame_function->f_lineno = 644;
    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_2 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 644;
        goto try_except_handler_1;
    }
    exception_type = tmp_raise_type_2;
    frame_function->f_lineno = 644;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_except_handler_1;
    branch_no_12:;
    branch_no_11:;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_3 = PyThreadState_GET()->exc_type;
    tmp_compare_right_3 = PyExc_ValueError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 645;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_assign_source_49 = PyThreadState_GET()->exc_value;
    assert( var_e.object == NULL );
    var_e.object = INCREASE_REFCOUNT( tmp_assign_source_49 );

    tmp_import_globals_7 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_7 = PyDict_New();
    if ((var_array.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_array,
            var_array.object
        );

    }
    if ((var_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_isnan,
            var_isnan.object
        );

    }
    if ((var_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_isinf,
            var_isinf.object
        );

    }
    if ((var_any.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_any,
            var_any.object
        );

    }
    if ((var_all.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_all,
            var_all.object
        );

    }
    if ((var_inf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_inf,
            var_inf.object
        );

    }
    if ((var_isnumber.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_isnumber,
            var_isnumber.object
        );

    }
    if ((var_chk_same_position.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_chk_same_position,
            var_chk_same_position.object
        );

    }
    if ((var_cond.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_cond,
            var_cond.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_x_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_x_isnan,
            var_x_isnan.object
        );

    }
    if ((var_y_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_y_isnan,
            var_y_isnan.object
        );

    }
    if ((var_x_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_x_isinf,
            var_x_isinf.object
        );

    }
    if ((var_y_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_y_isinf,
            var_y_isinf.object
        );

    }
    if ((var_x_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_x_id,
            var_x_id.object
        );

    }
    if ((var_y_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_y_id,
            var_y_id.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((var_reduced.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_reduced,
            var_reduced.object
        );

    }
    if ((var_match.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_match,
            var_match.object
        );

    }
    if ((var_e.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_e,
            var_e.object
        );

    }
    if ((var_traceback.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_traceback,
            var_traceback.object
        );

    }
    if ((var_efmt.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_efmt,
            var_efmt.object
        );

    }
    if ((par_comparison.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_comparison,
            par_comparison.object
        );

    }
    if ((par_x.storage != NULL && par_x.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_x,
            par_x.storage->object
        );

    }
    if ((par_y.storage != NULL && par_y.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_y,
            par_y.storage->object
        );

    }
    if ((par_err_msg.storage != NULL && par_err_msg.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_err_msg,
            par_err_msg.storage->object
        );

    }
    if ((par_verbose.storage != NULL && par_verbose.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_verbose,
            par_verbose.storage->object
        );

    }
    if ((par_header.storage != NULL && par_header.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_7,
            const_str_plain_header,
            par_header.storage->object
        );

    }
    frame_function->f_lineno = 646;
    tmp_assign_source_50 = IMPORT_MODULE( const_str_plain_traceback, tmp_import_globals_7, tmp_import_locals_7, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_7 );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 646;
        goto frame_exception_exit_1;
    }
    assert( var_traceback.object == NULL );
    var_traceback.object = tmp_assign_source_50;

    tmp_source_name_11 = var_traceback.object;

    tmp_called_27 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_format_exc );
    if ( tmp_called_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 647;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 647;
    tmp_assign_source_51 = CALL_FUNCTION_NO_ARGS( tmp_called_27 );
    Py_DECREF( tmp_called_27 );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 647;
        goto frame_exception_exit_1;
    }
    assert( var_efmt.object == NULL );
    var_efmt.object = tmp_assign_source_51;

    tmp_binop_left_10 = const_str_digest_70134d6b4b5effedf386e473944f5e95;
    tmp_binop_right_10 = PyTuple_New( 2 );
    tmp_tuple_element_13 = var_efmt.object;

    Py_INCREF( tmp_tuple_element_13 );
    PyTuple_SET_ITEM( tmp_binop_right_10, 0, tmp_tuple_element_13 );
    tmp_tuple_element_13 = par_header.storage->object;

    if ( tmp_tuple_element_13 == NULL )
    {
        Py_DECREF( tmp_binop_right_10 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 645 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 648;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_13 );
    PyTuple_SET_ITEM( tmp_binop_right_10, 1, tmp_tuple_element_13 );
    tmp_assign_source_52 = BINARY_OPERATION_REMAINDER( tmp_binop_left_10, tmp_binop_right_10 );
    Py_DECREF( tmp_binop_right_10 );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 648;
        goto frame_exception_exit_1;
    }
    if (par_header.storage->object == NULL)
    {
        par_header.storage->object = tmp_assign_source_52;
    }
    else
    {
        PyObject *old = par_header.storage->object;
        par_header.storage->object = tmp_assign_source_52;
        Py_DECREF( old );
    }
    tmp_called_28 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_build_err_msg );

    if (unlikely( tmp_called_28 == NULL ))
    {
        tmp_called_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_build_err_msg );
    }

    if ( tmp_called_28 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214367 ], 42, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 650;
        goto frame_exception_exit_1;
    }

    tmp_call_pos_8 = PyTuple_New( 2 );
    tmp_tuple_element_14 = PyList_New( 2 );
    tmp_list_element_3 = par_x.storage->object;

    if ( tmp_list_element_3 == NULL )
    {
        Py_DECREF( tmp_call_pos_8 );
        Py_DECREF( tmp_tuple_element_14 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 650;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_3 );
    PyList_SET_ITEM( tmp_tuple_element_14, 0, tmp_list_element_3 );
    tmp_list_element_3 = par_y.storage->object;

    if ( tmp_list_element_3 == NULL )
    {
        Py_DECREF( tmp_call_pos_8 );
        Py_DECREF( tmp_tuple_element_14 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 650;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_3 );
    PyList_SET_ITEM( tmp_tuple_element_14, 1, tmp_list_element_3 );
    PyTuple_SET_ITEM( tmp_call_pos_8, 0, tmp_tuple_element_14 );
    tmp_tuple_element_14 = par_err_msg.storage->object;

    if ( tmp_tuple_element_14 == NULL )
    {
        Py_DECREF( tmp_call_pos_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 650;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_call_pos_8, 1, tmp_tuple_element_14 );
    tmp_call_kw_8 = _PyDict_NewPresized( 3 );
    tmp_dict_value_7 = par_verbose.storage->object;

    if ( tmp_dict_value_7 == NULL )
    {
        Py_DECREF( tmp_call_pos_8 );
        Py_DECREF( tmp_call_kw_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49769 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 650;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_7 = const_str_plain_verbose;
    PyDict_SetItem( tmp_call_kw_8, tmp_dict_key_7, tmp_dict_value_7 );
    tmp_dict_value_8 = par_header.storage->object;

    if ( tmp_dict_value_8 == NULL )
    {
        Py_DECREF( tmp_call_pos_8 );
        Py_DECREF( tmp_call_kw_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 645 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 650;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_8 = const_str_plain_header;
    PyDict_SetItem( tmp_call_kw_8, tmp_dict_key_8, tmp_dict_value_8 );
    tmp_dict_value_9 = const_tuple_str_plain_x_str_plain_y_tuple;
    tmp_dict_key_9 = const_str_plain_names;
    PyDict_SetItem( tmp_call_kw_8, tmp_dict_key_9, tmp_dict_value_9 );
    frame_function->f_lineno = 651;
    tmp_assign_source_53 = CALL_FUNCTION( tmp_called_28, tmp_call_pos_8, tmp_call_kw_8 );
    Py_DECREF( tmp_call_pos_8 );
    Py_DECREF( tmp_call_kw_8 );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 651;
        goto frame_exception_exit_1;
    }
    if (var_msg.object == NULL)
    {
        var_msg.object = tmp_assign_source_53;
    }
    else
    {
        PyObject *old = var_msg.object;
        var_msg.object = tmp_assign_source_53;
        Py_DECREF( old );
    }
    tmp_make_exception_arg_3 = var_msg.object;

    frame_function->f_lineno = 652;
    tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, tmp_make_exception_arg_3 );
    if ( tmp_raise_type_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 652;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_3;
    frame_function->f_lineno = 652;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    goto branch_end_13;
    branch_no_13:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_13:;
    try_except_end_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_array.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_array,
            var_array.object
        );

    }
    if ((var_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_isnan,
            var_isnan.object
        );

    }
    if ((var_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_isinf,
            var_isinf.object
        );

    }
    if ((var_any.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_any,
            var_any.object
        );

    }
    if ((var_all.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_all,
            var_all.object
        );

    }
    if ((var_inf.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_inf,
            var_inf.object
        );

    }
    if ((var_isnumber.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_isnumber,
            var_isnumber.object
        );

    }
    if ((var_chk_same_position.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_chk_same_position,
            var_chk_same_position.object
        );

    }
    if ((var_cond.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_cond,
            var_cond.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_x_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x_isnan,
            var_x_isnan.object
        );

    }
    if ((var_y_isnan.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_y_isnan,
            var_y_isnan.object
        );

    }
    if ((var_x_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x_isinf,
            var_x_isinf.object
        );

    }
    if ((var_y_isinf.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_y_isinf,
            var_y_isinf.object
        );

    }
    if ((var_x_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x_id,
            var_x_id.object
        );

    }
    if ((var_y_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_y_id,
            var_y_id.object
        );

    }
    if ((var_val.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_val,
            var_val.object
        );

    }
    if ((var_reduced.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_reduced,
            var_reduced.object
        );

    }
    if ((var_match.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_match,
            var_match.object
        );

    }
    if ((var_e.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_e,
            var_e.object
        );

    }
    if ((var_traceback.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_traceback,
            var_traceback.object
        );

    }
    if ((var_efmt.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_efmt,
            var_efmt.object
        );

    }
    if ((par_comparison.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_comparison,
            par_comparison.object
        );

    }
    if ((par_x.storage != NULL && par_x.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            par_x.storage->object
        );

    }
    if ((par_y.storage != NULL && par_y.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_y,
            par_y.storage->object
        );

    }
    if ((par_err_msg.storage != NULL && par_err_msg.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_err_msg,
            par_err_msg.storage->object
        );

    }
    if ((par_verbose.storage != NULL && par_verbose.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_verbose,
            par_verbose.storage->object
        );

    }
    if ((par_header.storage != NULL && par_header.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_header,
            par_header.storage->object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_17_assert_array_compare_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_comparison = NULL;
    PyObject *_python_par_x = NULL;
    PyObject *_python_par_y = NULL;
    PyObject *_python_par_err_msg = NULL;
    PyObject *_python_par_verbose = NULL;
    PyObject *_python_par_header = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "assert_array_compare() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_comparison == key )
            {
                assert( _python_par_comparison == NULL );
                _python_par_comparison = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_y == key )
            {
                assert( _python_par_y == NULL );
                _python_par_y = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_err_msg == key )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_verbose == key )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_header == key )
            {
                assert( _python_par_header == NULL );
                _python_par_header = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_comparison, key ) == 1 )
            {
                assert( _python_par_comparison == NULL );
                _python_par_comparison = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_x, key ) == 1 )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_y, key ) == 1 )
            {
                assert( _python_par_y == NULL );
                _python_par_y = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_err_msg, key ) == 1 )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_verbose, key ) == 1 )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_header, key ) == 1 )
            {
                assert( _python_par_header == NULL );
                _python_par_header = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "assert_array_compare() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 6 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_comparison != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_comparison = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_comparison == NULL )
    {
        if ( 0 + self->m_defaults_given >= 6  )
        {
            _python_par_comparison = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 1 + self->m_defaults_given >= 6  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_y != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_y = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_y == NULL )
    {
        if ( 2 + self->m_defaults_given >= 6  )
        {
            _python_par_y = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_err_msg != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_err_msg = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_err_msg == NULL )
    {
        if ( 3 + self->m_defaults_given >= 6  )
        {
            _python_par_err_msg = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 4 < args_given ))
    {
         if (unlikely( _python_par_verbose != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 4 );
             goto error_exit;
         }

        _python_par_verbose = INCREASE_REFCOUNT( args[ 4 ] );
    }
    else if ( _python_par_verbose == NULL )
    {
        if ( 4 + self->m_defaults_given >= 6  )
        {
            _python_par_verbose = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 4 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 5 < args_given ))
    {
         if (unlikely( _python_par_header != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 5 );
             goto error_exit;
         }

        _python_par_header = INCREASE_REFCOUNT( args[ 5 ] );
    }
    else if ( _python_par_header == NULL )
    {
        if ( 5 + self->m_defaults_given >= 6  )
        {
            _python_par_header = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 5 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_comparison == NULL || _python_par_x == NULL || _python_par_y == NULL || _python_par_err_msg == NULL || _python_par_verbose == NULL || _python_par_header == NULL ))
    {
        PyObject *values[] = { _python_par_comparison, _python_par_x, _python_par_y, _python_par_err_msg, _python_par_verbose, _python_par_header };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_17_assert_array_compare_of_module_numpy$testing$utils( self, _python_par_comparison, _python_par_x, _python_par_y, _python_par_err_msg, _python_par_verbose, _python_par_header );

error_exit:;

    Py_XDECREF( _python_par_comparison );
    Py_XDECREF( _python_par_x );
    Py_XDECREF( _python_par_y );
    Py_XDECREF( _python_par_err_msg );
    Py_XDECREF( _python_par_verbose );
    Py_XDECREF( _python_par_header );

    return NULL;
}

static PyObject *dparse_function_17_assert_array_compare_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6 )
    {
        return impl_function_17_assert_array_compare_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_17_assert_array_compare_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_isnumber_of_function_17_assert_array_compare_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_x; par_x.object = _python_par_x;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_6d94cf55a24d791ad0ddb5a1ee9195b3, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_2 = par_x.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 575;
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_dtype );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 575;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_char );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 575;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_1 = const_str_digest_9327ab6a3aa9cc4edf750939002d9792;
    tmp_return_value = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compexpr_left_1 );

        frame_function->f_lineno = 575;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compexpr_left_1 );
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            par_x.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1_isnumber_of_function_17_assert_array_compare_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "isnumber() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_x, key ) == 1 )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "isnumber() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL ))
    {
        PyObject *values[] = { _python_par_x };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1_isnumber_of_function_17_assert_array_compare_of_module_numpy$testing$utils( self, _python_par_x );

error_exit:;

    Py_XDECREF( _python_par_x );

    return NULL;
}

static PyObject *dparse_function_1_isnumber_of_function_17_assert_array_compare_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_1_isnumber_of_function_17_assert_array_compare_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_isnumber_of_function_17_assert_array_compare_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_x_id, PyObject *_python_par_y_id, PyObject *_python_par_hasval )
{
    // The context of the function.
    struct _context_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils_t *_python_context = (struct _context_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalVariable par_x_id; par_x_id.object = _python_par_x_id;
    PyObjectLocalVariable par_y_id; par_y_id.object = _python_par_y_id;
    PyObjectLocalVariable par_hasval; par_hasval.object = _python_par_hasval;
    PyObjectLocalVariable var_msg;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_list_element_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_e60ee6644014cabb4454dca61b7b89b3, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried block of try/except
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_array_equal );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_assert_array_equal );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214320 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 581;
        goto try_except_handler_1;
    }

    tmp_call_arg_element_1 = par_x_id.object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215958 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 581;
        goto try_except_handler_1;
    }

    tmp_call_arg_element_2 = par_y_id.object;

    if ( tmp_call_arg_element_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216008 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 581;
        goto try_except_handler_1;
    }

    frame_function->f_lineno = 581;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 581;
        goto try_except_handler_1;
    }
    Py_DECREF( tmp_unused );
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_AssertionError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 582;
        goto frame_exception_exit_1;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_2 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_build_err_msg );

    if (unlikely( tmp_called_2 == NULL ))
    {
        tmp_called_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_build_err_msg );
    }

    if ( tmp_called_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214367 ], 42, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 583;
        goto frame_exception_exit_1;
    }

    tmp_call_pos_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = PyList_New( 2 );
    tmp_list_element_1 = _python_context->closure_x.storage->object;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_tuple_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 583;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_1, 0, tmp_list_element_1 );
    tmp_list_element_1 = _python_context->closure_y.storage->object;

    if ( tmp_list_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_tuple_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 583;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_tuple_element_1, 1, tmp_list_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    tmp_binop_left_1 = _python_context->closure_err_msg.storage->object;

    if ( tmp_binop_left_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 584;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_2 = const_str_digest_2a869c320e87479fde855b1b6260aed3;
    tmp_binop_right_2 = par_hasval.object;

    if ( tmp_binop_right_2 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216114 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 585;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_2, tmp_binop_right_2 );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_1 );

        frame_function->f_lineno = 584;
        goto frame_exception_exit_1;
    }
    tmp_tuple_element_1 = BINARY_OPERATION_ADD( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_1 );

        frame_function->f_lineno = 584;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_call_pos_1, 1, tmp_tuple_element_1 );
    tmp_call_kw_1 = _PyDict_NewPresized( 3 );
    tmp_dict_value_1 = _python_context->closure_verbose.storage->object;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49769 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 585;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_1 = const_str_plain_verbose;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    tmp_dict_value_2 = _python_context->closure_header.storage->object;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 645 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 585;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_2 = const_str_plain_header;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_2, tmp_dict_value_2 );
    tmp_dict_value_3 = const_tuple_str_plain_x_str_plain_y_tuple;
    tmp_dict_key_3 = const_str_plain_names;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_3, tmp_dict_value_3 );
    frame_function->f_lineno = 586;
    tmp_assign_source_1 = CALL_FUNCTION( tmp_called_2, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 586;
        goto frame_exception_exit_1;
    }
    assert( var_msg.object == NULL );
    var_msg.object = tmp_assign_source_1;

    tmp_make_exception_arg_1 = var_msg.object;

    frame_function->f_lineno = 587;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 587;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 587;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    goto branch_end_1;
    branch_no_1:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_end_1:;
    try_except_end_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((par_x_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x_id,
            par_x_id.object
        );

    }
    if ((par_y_id.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_y_id,
            par_y_id.object
        );

    }
    if ((par_hasval.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_hasval,
            par_hasval.object
        );

    }
    if ((_python_context->closure_x.storage != NULL && _python_context->closure_x.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            _python_context->closure_x.storage->object
        );

    }
    if ((_python_context->closure_y.storage != NULL && _python_context->closure_y.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_y,
            _python_context->closure_y.storage->object
        );

    }
    if ((_python_context->closure_err_msg.storage != NULL && _python_context->closure_err_msg.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_err_msg,
            _python_context->closure_err_msg.storage->object
        );

    }
    if ((_python_context->closure_verbose.storage != NULL && _python_context->closure_verbose.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_verbose,
            _python_context->closure_verbose.storage->object
        );

    }
    if ((_python_context->closure_header.storage != NULL && _python_context->closure_header.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_header,
            _python_context->closure_header.storage->object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x_id = NULL;
    PyObject *_python_par_y_id = NULL;
    PyObject *_python_par_hasval = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "chk_same_position() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x_id == key )
            {
                assert( _python_par_x_id == NULL );
                _python_par_x_id = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_y_id == key )
            {
                assert( _python_par_y_id == NULL );
                _python_par_y_id = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_hasval == key )
            {
                assert( _python_par_hasval == NULL );
                _python_par_hasval = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_x_id, key ) == 1 )
            {
                assert( _python_par_x_id == NULL );
                _python_par_x_id = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_y_id, key ) == 1 )
            {
                assert( _python_par_y_id == NULL );
                _python_par_y_id = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_hasval, key ) == 1 )
            {
                assert( _python_par_hasval == NULL );
                _python_par_hasval = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "chk_same_position() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x_id != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x_id = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x_id == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_x_id = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_y_id != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_y_id = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_y_id == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_y_id = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_hasval != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_hasval = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_hasval == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_hasval = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x_id == NULL || _python_par_y_id == NULL || _python_par_hasval == NULL ))
    {
        PyObject *values[] = { _python_par_x_id, _python_par_y_id, _python_par_hasval };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils( self, _python_par_x_id, _python_par_y_id, _python_par_hasval );

error_exit:;

    Py_XDECREF( _python_par_x_id );
    Py_XDECREF( _python_par_y_id );
    Py_XDECREF( _python_par_hasval );

    return NULL;
}

static PyObject *dparse_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_18_assert_array_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_x, PyObject *_python_par_y, PyObject *_python_par_err_msg, PyObject *_python_par_verbose )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_x; par_x.object = _python_par_x;
    PyObjectLocalVariable par_y; par_y.object = _python_par_y;
    PyObjectLocalVariable par_err_msg; par_err_msg.object = _python_par_err_msg;
    PyObjectLocalVariable par_verbose; par_verbose.object = _python_par_verbose;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_called_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_df3ab4141c291d39939be6a4a7fa445d, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_array_compare );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_assert_array_compare );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216166 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 717;
        goto frame_exception_exit_1;
    }

    tmp_call_pos_1 = PyTuple_New( 3 );
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216215 ], 37, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 717;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___eq__ );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_1 );

        frame_function->f_lineno = 717;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_x.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 717;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_y.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 717;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 2, tmp_tuple_element_1 );
    tmp_call_kw_1 = _PyDict_NewPresized( 3 );
    tmp_dict_value_1 = par_err_msg.object;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 717;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_1 = const_str_plain_err_msg;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    tmp_dict_value_2 = par_verbose.object;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49769 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 718;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_2 = const_str_plain_verbose;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_2, tmp_dict_value_2 );
    tmp_dict_value_3 = const_str_digest_4c7696ea5ac638d1c7928f1060731d88;
    tmp_dict_key_3 = const_str_plain_header;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_3, tmp_dict_value_3 );
    frame_function->f_lineno = 718;
    tmp_unused = CALL_FUNCTION( tmp_called_1, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 718;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            par_x.object
        );

    }
    if ((par_y.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_y,
            par_y.object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_18_assert_array_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    PyObject *_python_par_y = NULL;
    PyObject *_python_par_err_msg = NULL;
    PyObject *_python_par_verbose = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "assert_array_equal() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_y == key )
            {
                assert( _python_par_y == NULL );
                _python_par_y = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_err_msg == key )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_verbose == key )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_x, key ) == 1 )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_y, key ) == 1 )
            {
                assert( _python_par_y == NULL );
                _python_par_y = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_err_msg, key ) == 1 )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_verbose, key ) == 1 )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "assert_array_equal() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 4  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_y != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_y = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_y == NULL )
    {
        if ( 1 + self->m_defaults_given >= 4  )
        {
            _python_par_y = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_err_msg != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_err_msg = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_err_msg == NULL )
    {
        if ( 2 + self->m_defaults_given >= 4  )
        {
            _python_par_err_msg = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_verbose != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_verbose = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_verbose == NULL )
    {
        if ( 3 + self->m_defaults_given >= 4  )
        {
            _python_par_verbose = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL || _python_par_y == NULL || _python_par_err_msg == NULL || _python_par_verbose == NULL ))
    {
        PyObject *values[] = { _python_par_x, _python_par_y, _python_par_err_msg, _python_par_verbose };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_18_assert_array_equal_of_module_numpy$testing$utils( self, _python_par_x, _python_par_y, _python_par_err_msg, _python_par_verbose );

error_exit:;

    Py_XDECREF( _python_par_x );
    Py_XDECREF( _python_par_y );
    Py_XDECREF( _python_par_err_msg );
    Py_XDECREF( _python_par_verbose );

    return NULL;
}

static PyObject *dparse_function_18_assert_array_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4 )
    {
        return impl_function_18_assert_array_equal_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_18_assert_array_equal_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_x, PyObject *_python_par_y, PyObject *_python_par_decimal, PyObject *_python_par_err_msg, PyObject *_python_par_verbose )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_x; par_x.object = _python_par_x;
    PyObjectLocalVariable par_y; par_y.object = _python_par_y;
    PyObjectSharedLocalVariable par_decimal; par_decimal.storage->object = _python_par_decimal;
    PyObjectLocalVariable par_err_msg; par_err_msg.object = _python_par_err_msg;
    PyObjectLocalVariable par_verbose; par_verbose.object = _python_par_verbose;
    PyObjectSharedLocalVariable var_around;
    PyObjectSharedLocalVariable var_number;
    PyObjectSharedLocalVariable var_float_;
    PyObjectSharedLocalVariable var_issubdtype;
    PyObjectSharedLocalVariable var_npany;
    PyObjectLocalVariable var_compare;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_called_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_globals_4;
    PyObject *tmp_import_globals_5;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_locals_2;
    PyObject *tmp_import_locals_3;
    PyObject *tmp_import_locals_4;
    PyObject *tmp_import_locals_5;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_import_name_from_3;
    PyObject *tmp_import_name_from_4;
    PyObject *tmp_import_name_from_5;
    PyObject *tmp_return_value;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_4561734de61c422902e50f08b9ff68d1, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_around.storage != NULL && var_around.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_around,
            var_around.storage->object
        );

    }
    if ((var_number.storage != NULL && var_number.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_number,
            var_number.storage->object
        );

    }
    if ((var_float_.storage != NULL && var_float_.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_float_,
            var_float_.storage->object
        );

    }
    if ((var_issubdtype.storage != NULL && var_issubdtype.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_issubdtype,
            var_issubdtype.storage->object
        );

    }
    if ((var_npany.storage != NULL && var_npany.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_npany,
            var_npany.storage->object
        );

    }
    if ((var_compare.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_compare,
            var_compare.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_x,
            par_x.object
        );

    }
    if ((par_y.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_y,
            par_y.object
        );

    }
    if ((par_decimal.storage != NULL && par_decimal.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_decimal,
            par_decimal.storage->object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    frame_function->f_lineno = 789;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_1, tmp_import_locals_1, const_tuple_str_plain_around_str_plain_number_str_plain_float__tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 789;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_around );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 789;
        goto frame_exception_exit_1;
    }
    if (var_around.storage->object == NULL)
    {
        var_around.storage->object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = var_around.storage->object;
        var_around.storage->object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    tmp_import_globals_2 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_2 = PyDict_New();
    if ((var_around.storage != NULL && var_around.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_around,
            var_around.storage->object
        );

    }
    if ((var_number.storage != NULL && var_number.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_number,
            var_number.storage->object
        );

    }
    if ((var_float_.storage != NULL && var_float_.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_float_,
            var_float_.storage->object
        );

    }
    if ((var_issubdtype.storage != NULL && var_issubdtype.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_issubdtype,
            var_issubdtype.storage->object
        );

    }
    if ((var_npany.storage != NULL && var_npany.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_npany,
            var_npany.storage->object
        );

    }
    if ((var_compare.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_compare,
            var_compare.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_x,
            par_x.object
        );

    }
    if ((par_y.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_y,
            par_y.object
        );

    }
    if ((par_decimal.storage != NULL && par_decimal.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_decimal,
            par_decimal.storage->object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    frame_function->f_lineno = 789;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_2, tmp_import_locals_2, const_tuple_str_plain_around_str_plain_number_str_plain_float__tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_2 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 789;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_number );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 789;
        goto frame_exception_exit_1;
    }
    if (var_number.storage->object == NULL)
    {
        var_number.storage->object = tmp_assign_source_2;
    }
    else
    {
        PyObject *old = var_number.storage->object;
        var_number.storage->object = tmp_assign_source_2;
        Py_DECREF( old );
    }
    tmp_import_globals_3 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_3 = PyDict_New();
    if ((var_around.storage != NULL && var_around.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_around,
            var_around.storage->object
        );

    }
    if ((var_number.storage != NULL && var_number.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_number,
            var_number.storage->object
        );

    }
    if ((var_float_.storage != NULL && var_float_.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_float_,
            var_float_.storage->object
        );

    }
    if ((var_issubdtype.storage != NULL && var_issubdtype.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_issubdtype,
            var_issubdtype.storage->object
        );

    }
    if ((var_npany.storage != NULL && var_npany.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_npany,
            var_npany.storage->object
        );

    }
    if ((var_compare.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_compare,
            var_compare.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_x,
            par_x.object
        );

    }
    if ((par_y.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_y,
            par_y.object
        );

    }
    if ((par_decimal.storage != NULL && par_decimal.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_decimal,
            par_decimal.storage->object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_3,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    frame_function->f_lineno = 789;
    tmp_import_name_from_3 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_3, tmp_import_locals_3, const_tuple_str_plain_around_str_plain_number_str_plain_float__tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_3 );
    if ( tmp_import_name_from_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 789;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_float_ );
    Py_DECREF( tmp_import_name_from_3 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 789;
        goto frame_exception_exit_1;
    }
    if (var_float_.storage->object == NULL)
    {
        var_float_.storage->object = tmp_assign_source_3;
    }
    else
    {
        PyObject *old = var_float_.storage->object;
        var_float_.storage->object = tmp_assign_source_3;
        Py_DECREF( old );
    }
    tmp_import_globals_4 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_4 = PyDict_New();
    if ((var_around.storage != NULL && var_around.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_around,
            var_around.storage->object
        );

    }
    if ((var_number.storage != NULL && var_number.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_number,
            var_number.storage->object
        );

    }
    if ((var_float_.storage != NULL && var_float_.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_float_,
            var_float_.storage->object
        );

    }
    if ((var_issubdtype.storage != NULL && var_issubdtype.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_issubdtype,
            var_issubdtype.storage->object
        );

    }
    if ((var_npany.storage != NULL && var_npany.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_npany,
            var_npany.storage->object
        );

    }
    if ((var_compare.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_compare,
            var_compare.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_x,
            par_x.object
        );

    }
    if ((par_y.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_y,
            par_y.object
        );

    }
    if ((par_decimal.storage != NULL && par_decimal.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_decimal,
            par_decimal.storage->object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_4,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    frame_function->f_lineno = 790;
    tmp_import_name_from_4 = IMPORT_MODULE( const_str_digest_8a3551674d9174096d8a003980610b3f, tmp_import_globals_4, tmp_import_locals_4, const_tuple_str_plain_issubdtype_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_4 );
    if ( tmp_import_name_from_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 790;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_4 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_issubdtype );
    Py_DECREF( tmp_import_name_from_4 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 790;
        goto frame_exception_exit_1;
    }
    if (var_issubdtype.storage->object == NULL)
    {
        var_issubdtype.storage->object = tmp_assign_source_4;
    }
    else
    {
        PyObject *old = var_issubdtype.storage->object;
        var_issubdtype.storage->object = tmp_assign_source_4;
        Py_DECREF( old );
    }
    tmp_import_globals_5 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_5 = PyDict_New();
    if ((var_around.storage != NULL && var_around.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_around,
            var_around.storage->object
        );

    }
    if ((var_number.storage != NULL && var_number.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_number,
            var_number.storage->object
        );

    }
    if ((var_float_.storage != NULL && var_float_.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_float_,
            var_float_.storage->object
        );

    }
    if ((var_issubdtype.storage != NULL && var_issubdtype.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_issubdtype,
            var_issubdtype.storage->object
        );

    }
    if ((var_npany.storage != NULL && var_npany.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_npany,
            var_npany.storage->object
        );

    }
    if ((var_compare.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_compare,
            var_compare.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_x,
            par_x.object
        );

    }
    if ((par_y.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_y,
            par_y.object
        );

    }
    if ((par_decimal.storage != NULL && par_decimal.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_decimal,
            par_decimal.storage->object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_5,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    frame_function->f_lineno = 791;
    tmp_import_name_from_5 = IMPORT_MODULE( const_str_digest_8a47f7a29a4eee7db625be1a330c505b, tmp_import_globals_5, tmp_import_locals_5, const_tuple_str_plain_any_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_5 );
    if ( tmp_import_name_from_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 791;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_5 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_any );
    Py_DECREF( tmp_import_name_from_5 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 791;
        goto frame_exception_exit_1;
    }
    if (var_npany.storage->object == NULL)
    {
        var_npany.storage->object = tmp_assign_source_5;
    }
    else
    {
        PyObject *old = var_npany.storage->object;
        var_npany.storage->object = tmp_assign_source_5;
        Py_DECREF( old );
    }
    tmp_assign_source_6 = MAKE_FUNCTION_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( var_around, par_decimal, var_float_, var_issubdtype, var_npany, var_number );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_6 );

        frame_function->f_lineno = 792;
        goto frame_exception_exit_1;
    }
    assert( var_compare.object == NULL );
    var_compare.object = tmp_assign_source_6;

    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_array_compare );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_assert_array_compare );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216166 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 810;
        goto frame_exception_exit_1;
    }

    tmp_call_pos_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = var_compare.object;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_x.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 810;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_y.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 810;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 2, tmp_tuple_element_1 );
    tmp_call_kw_1 = _PyDict_NewPresized( 3 );
    tmp_dict_value_1 = par_err_msg.object;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 810;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_1 = const_str_plain_err_msg;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    tmp_dict_value_2 = par_verbose.object;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49769 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 810;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_2 = const_str_plain_verbose;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_2, tmp_dict_value_2 );
    tmp_binop_left_1 = const_str_digest_55bf588743b8243d910cfce315631034;
    tmp_binop_right_1 = par_decimal.storage->object;

    if ( tmp_binop_right_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215005 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 811;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_3 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    if ( tmp_dict_value_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );

        frame_function->f_lineno = 811;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_3 = const_str_plain_header;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_3, tmp_dict_value_3 );
    Py_DECREF( tmp_dict_value_3 );
    frame_function->f_lineno = 811;
    tmp_unused = CALL_FUNCTION( tmp_called_1, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 811;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_around.storage != NULL && var_around.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_around,
            var_around.storage->object
        );

    }
    if ((var_number.storage != NULL && var_number.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_number,
            var_number.storage->object
        );

    }
    if ((var_float_.storage != NULL && var_float_.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_float_,
            var_float_.storage->object
        );

    }
    if ((var_issubdtype.storage != NULL && var_issubdtype.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_issubdtype,
            var_issubdtype.storage->object
        );

    }
    if ((var_npany.storage != NULL && var_npany.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_npany,
            var_npany.storage->object
        );

    }
    if ((var_compare.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_compare,
            var_compare.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            par_x.object
        );

    }
    if ((par_y.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_y,
            par_y.object
        );

    }
    if ((par_decimal.storage != NULL && par_decimal.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_decimal,
            par_decimal.storage->object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    PyObject *_python_par_y = NULL;
    PyObject *_python_par_decimal = NULL;
    PyObject *_python_par_err_msg = NULL;
    PyObject *_python_par_verbose = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "assert_array_almost_equal() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_y == key )
            {
                assert( _python_par_y == NULL );
                _python_par_y = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_decimal == key )
            {
                assert( _python_par_decimal == NULL );
                _python_par_decimal = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_err_msg == key )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_verbose == key )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_x, key ) == 1 )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_y, key ) == 1 )
            {
                assert( _python_par_y == NULL );
                _python_par_y = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_decimal, key ) == 1 )
            {
                assert( _python_par_decimal == NULL );
                _python_par_decimal = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_err_msg, key ) == 1 )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_verbose, key ) == 1 )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "assert_array_almost_equal() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 5  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_y != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_y = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_y == NULL )
    {
        if ( 1 + self->m_defaults_given >= 5  )
        {
            _python_par_y = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_decimal != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_decimal = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_decimal == NULL )
    {
        if ( 2 + self->m_defaults_given >= 5  )
        {
            _python_par_decimal = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_err_msg != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_err_msg = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_err_msg == NULL )
    {
        if ( 3 + self->m_defaults_given >= 5  )
        {
            _python_par_err_msg = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 4 < args_given ))
    {
         if (unlikely( _python_par_verbose != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 4 );
             goto error_exit;
         }

        _python_par_verbose = INCREASE_REFCOUNT( args[ 4 ] );
    }
    else if ( _python_par_verbose == NULL )
    {
        if ( 4 + self->m_defaults_given >= 5  )
        {
            _python_par_verbose = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 4 - 5 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL || _python_par_y == NULL || _python_par_decimal == NULL || _python_par_err_msg == NULL || _python_par_verbose == NULL ))
    {
        PyObject *values[] = { _python_par_x, _python_par_y, _python_par_decimal, _python_par_err_msg, _python_par_verbose };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( self, _python_par_x, _python_par_y, _python_par_decimal, _python_par_err_msg, _python_par_verbose );

error_exit:;

    Py_XDECREF( _python_par_x );
    Py_XDECREF( _python_par_y );
    Py_XDECREF( _python_par_decimal );
    Py_XDECREF( _python_par_err_msg );
    Py_XDECREF( _python_par_verbose );

    return NULL;
}

static PyObject *dparse_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5 )
    {
        return impl_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_x, PyObject *_python_par_y )
{
    // The context of the function.
    struct _context_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils_t *_python_context = (struct _context_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalVariable par_x; par_x.object = _python_par_x;
    PyObjectLocalVariable par_y; par_y.object = _python_par_y;
    PyObjectLocalVariable var_xinfid;
    PyObjectLocalVariable var_yinfid;
    PyObjectLocalVariable var_z;
    PyObjectTempVariable tmp_or_1__value_1;
    PyObjectTempVariable tmp_comparison_1__value_2;
    PyObjectTempVariable tmp_and_1__value_1;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    int tmp_cmp_Eq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_frame_locals;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_subscript_2;
    PyObject *tmp_subscr_target_1;
    PyObject *tmp_subscr_target_2;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_unary_arg_1;
    PyObject *tmp_unary_arg_2;
    PyObject *tmp_unary_arg_3;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_e5b12a030a6011ecae4d5e3cdd233681, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried block of try/except
    // Tried code
    tmp_cond_value_1 = NULL;
    // Tried code
    tmp_called_1 = _python_context->closure_npany.storage->object;

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216252 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 794;
        goto try_finally_handler_2;
    }

    tmp_called_2 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisinf );

    if (unlikely( tmp_called_2 == NULL ))
    {
        tmp_called_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisinf );
    }

    if ( tmp_called_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216303 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 794;
        goto try_finally_handler_2;
    }

    tmp_call_arg_element_2 = par_x.object;

    if ( tmp_call_arg_element_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 794;
        goto try_finally_handler_2;
    }

    frame_function->f_lineno = 794;
    tmp_call_arg_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 794;
        goto try_finally_handler_2;
    }
    frame_function->f_lineno = 794;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 794;
        goto try_finally_handler_2;
    }
    assert( tmp_or_1__value_1.object == NULL );
    tmp_or_1__value_1.object = tmp_assign_source_1;

    tmp_cond_value_2 = tmp_or_1__value_1.object;

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 794;
        goto try_finally_handler_2;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_cond_value_1 = tmp_or_1__value_1.object;

    Py_INCREF( tmp_cond_value_1 );
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_cond_value_1 = NULL;
    // Tried code
    tmp_result = tmp_or_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_1__value_1.object );
        tmp_or_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_called_3 = _python_context->closure_npany.storage->object;

    if ( tmp_called_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216252 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 794;
        goto try_finally_handler_3;
    }

    tmp_called_4 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisinf );

    if (unlikely( tmp_called_4 == NULL ))
    {
        tmp_called_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisinf );
    }

    if ( tmp_called_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216303 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 794;
        goto try_finally_handler_3;
    }

    tmp_call_arg_element_4 = par_y.object;

    if ( tmp_call_arg_element_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 794;
        goto try_finally_handler_3;
    }

    frame_function->f_lineno = 794;
    tmp_call_arg_element_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_4 );
    if ( tmp_call_arg_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 794;
        goto try_finally_handler_3;
    }
    frame_function->f_lineno = 794;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_3 );
    Py_DECREF( tmp_call_arg_element_3 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 794;
        goto try_finally_handler_3;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_2;
    }

    goto finally_end_1;
    finally_end_1:;
    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_1;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        frame_function->f_lineno = 794;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_5 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisinf );

    if (unlikely( tmp_called_5 == NULL ))
    {
        tmp_called_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisinf );
    }

    if ( tmp_called_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216303 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 795;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_5 = par_x.object;

    if ( tmp_call_arg_element_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 795;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 795;
    tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_5 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 795;
        goto try_finally_handler_1;
    }
    assert( var_xinfid.object == NULL );
    var_xinfid.object = tmp_assign_source_2;

    tmp_called_6 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisinf );

    if (unlikely( tmp_called_6 == NULL ))
    {
        tmp_called_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_gisinf );
    }

    if ( tmp_called_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216303 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 796;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_6 = par_y.object;

    if ( tmp_call_arg_element_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 796;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 796;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_6 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 796;
        goto try_finally_handler_1;
    }
    assert( var_yinfid.object == NULL );
    var_yinfid.object = tmp_assign_source_3;

    tmp_compare_left_1 = var_xinfid.object;

    tmp_compare_right_1 = var_yinfid.object;

    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 797;
        goto try_finally_handler_1;
    }
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_no_2;
    }
    else
    {
        goto branch_yes_2;
    }
    branch_yes_2:;
    tmp_return_value = Py_False;
    Py_INCREF( tmp_return_value );
    goto try_finally_handler_start_1;
    branch_no_2:;
    tmp_cond_value_3 = NULL;
    // Tried code
    tmp_cond_value_3 = NULL;
    // Tried code
    tmp_cond_value_3 = NULL;
    // Tried code
    tmp_source_name_1 = par_x.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 800;
        goto try_finally_handler_6;
    }

    tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_size );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 800;
        goto try_finally_handler_6;
    }
    tmp_compexpr_right_1 = NULL;
    // Tried code
    tmp_source_name_2 = par_y.object;

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_compexpr_left_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 800;
        goto try_finally_handler_7;
    }

    tmp_assign_source_5 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_size );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compexpr_left_1 );

        frame_function->f_lineno = 800;
        goto try_finally_handler_7;
    }
    assert( tmp_comparison_1__value_2.object == NULL );
    tmp_comparison_1__value_2.object = tmp_assign_source_5;

    tmp_compexpr_right_1 = tmp_comparison_1__value_2.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_7:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto try_finally_handler_6;
    }

    goto finally_end_3;
    finally_end_3:;
    tmp_assign_source_4 = RICH_COMPARE_EQ( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 800;
        goto try_finally_handler_6;
    }
    assert( tmp_and_1__value_1.object == NULL );
    tmp_and_1__value_1.object = tmp_assign_source_4;

    tmp_cond_value_4 = tmp_and_1__value_1.object;

    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 800;
        goto try_finally_handler_6;
    }
    if (tmp_cond_truth_4 == 1)
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_cond_value_3 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1.object );
        tmp_and_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_compexpr_left_2 = tmp_comparison_1__value_2.object;

    tmp_compexpr_right_2 = const_int_pos_1;
    tmp_cond_value_3 = RICH_COMPARE_EQ( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 800;
        goto try_finally_handler_8;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_8:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto try_finally_handler_6;
    }

    goto finally_end_4;
    finally_end_4:;
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_cond_value_3 = tmp_and_1__value_1.object;

    Py_INCREF( tmp_cond_value_3 );
    condexpr_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto try_finally_handler_5;
    }

    goto finally_end_5;
    finally_end_5:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_comparison_1__value_2.object );
    tmp_comparison_1__value_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto try_finally_handler_4;
    }

    goto finally_end_6;
    finally_end_6:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_1__value_1.object );
    tmp_and_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_7 != NULL )
    {
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;

        goto try_finally_handler_1;
    }

    goto finally_end_7;
    finally_end_7:;
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        frame_function->f_lineno = 800;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_cond_value_3 );
    if (tmp_cond_truth_3 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_compexpr_left_3 = par_x.object;

    if ( tmp_compexpr_left_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 801;
        goto try_finally_handler_1;
    }

    tmp_compexpr_right_3 = par_y.object;

    if ( tmp_compexpr_right_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 801;
        goto try_finally_handler_1;
    }

    tmp_return_value = RICH_COMPARE_EQ( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 801;
        goto try_finally_handler_1;
    }
    goto try_finally_handler_start_1;
    branch_no_3:;
    tmp_subscr_target_1 = par_x.object;

    if ( tmp_subscr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 802;
        goto try_finally_handler_1;
    }

    tmp_unary_arg_1 = var_xinfid.object;

    if ( tmp_unary_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216338 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 802;
        goto try_finally_handler_1;
    }

    tmp_subscr_subscript_1 = UNARY_OPERATION( PyNumber_Invert, tmp_unary_arg_1 );
    if ( tmp_subscr_subscript_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 802;
        goto try_finally_handler_1;
    }
    tmp_assign_source_6 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    Py_DECREF( tmp_subscr_subscript_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 802;
        goto try_finally_handler_1;
    }
    if (par_x.object == NULL)
    {
        par_x.object = tmp_assign_source_6;
    }
    else
    {
        PyObject *old = par_x.object;
        par_x.object = tmp_assign_source_6;
        Py_DECREF( old );
    }
    tmp_subscr_target_2 = par_y.object;

    if ( tmp_subscr_target_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 803;
        goto try_finally_handler_1;
    }

    tmp_unary_arg_2 = var_yinfid.object;

    if ( tmp_unary_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216390 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 803;
        goto try_finally_handler_1;
    }

    tmp_subscr_subscript_2 = UNARY_OPERATION( PyNumber_Invert, tmp_unary_arg_2 );
    if ( tmp_subscr_subscript_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 803;
        goto try_finally_handler_1;
    }
    tmp_assign_source_7 = LOOKUP_SUBSCRIPT( tmp_subscr_target_2, tmp_subscr_subscript_2 );
    Py_DECREF( tmp_subscr_subscript_2 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 803;
        goto try_finally_handler_1;
    }
    if (par_y.object == NULL)
    {
        par_y.object = tmp_assign_source_7;
    }
    else
    {
        PyObject *old = par_y.object;
        par_y.object = tmp_assign_source_7;
        Py_DECREF( old );
    }
    branch_no_1:;
    try_finally_handler_start_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_1__value_1.object );
    tmp_or_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_8 != NULL )
    {
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;

        goto try_except_handler_1;
    }

    // Return value if any.
    if ( tmp_return_value != NULL )
    {
        goto frame_return_exit_1;
    }

    goto finally_end_8;
    finally_end_8:;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyTuple_New( 2 );
    tmp_tuple_element_1 = PyExc_TypeError;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_compare_right_2, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = PyExc_NotImplementedError;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_compare_right_2, 1, tmp_tuple_element_1 );
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_right_2 );

        frame_function->f_lineno = 804;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_2 );
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_no_4;
    }
    else
    {
        goto branch_yes_4;
    }
    branch_yes_4:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto frame_exception_exit_1;
    branch_no_4:;
    try_except_end_1:;
    tmp_called_7 = LOOKUP_BUILTIN( const_str_plain_abs );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 806;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_1 = par_x.object;

    if ( tmp_binop_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 806;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_1 = par_y.object;

    if ( tmp_binop_right_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 806;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_7 = BINARY_OPERATION_SUB( tmp_binop_left_1, tmp_binop_right_1 );
    if ( tmp_call_arg_element_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 806;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 806;
    tmp_assign_source_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_7 );
    Py_DECREF( tmp_call_arg_element_7 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 806;
        goto frame_exception_exit_1;
    }
    assert( var_z.object == NULL );
    var_z.object = tmp_assign_source_8;

    tmp_called_8 = _python_context->closure_issubdtype.storage->object;

    if ( tmp_called_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216442 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 807;
        goto frame_exception_exit_1;
    }

    tmp_source_name_3 = var_z.object;

    tmp_call_arg_element_8 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_dtype );
    if ( tmp_call_arg_element_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 807;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_9 = _python_context->closure_number.storage->object;

    if ( tmp_call_arg_element_9 == NULL )
    {
        Py_DECREF( tmp_call_arg_element_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71655 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 807;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 807;
    tmp_cond_value_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_8, tmp_call_arg_element_8, tmp_call_arg_element_9 );
    Py_DECREF( tmp_call_arg_element_8 );
    if ( tmp_cond_value_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 807;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_5 );

        frame_function->f_lineno = 807;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_5 );
    if (tmp_cond_truth_5 == 1)
    {
        goto branch_no_5;
    }
    else
    {
        goto branch_yes_5;
    }
    branch_yes_5:;
    tmp_source_name_4 = var_z.object;

    tmp_called_9 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_astype );
    if ( tmp_called_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 808;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_10 = _python_context->closure_float_.storage->object;

    if ( tmp_call_arg_element_10 == NULL )
    {
        Py_DECREF( tmp_called_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216498 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 808;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 808;
    tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_9, tmp_call_arg_element_10 );
    Py_DECREF( tmp_called_9 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 808;
        goto frame_exception_exit_1;
    }
    assert( var_z.object != NULL );
    {
        PyObject *old = var_z.object;
        var_z.object = tmp_assign_source_9;
        Py_DECREF( old );
    }

    branch_no_5:;
    tmp_called_10 = _python_context->closure_around.storage->object;

    if ( tmp_called_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216550 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 809;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_11 = var_z.object;

    tmp_call_arg_element_12 = _python_context->closure_decimal.storage->object;

    if ( tmp_call_arg_element_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215005 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 809;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 809;
    tmp_compexpr_left_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_10, tmp_call_arg_element_11, tmp_call_arg_element_12 );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 809;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_2 = const_float_10_0;
    tmp_unary_arg_3 = _python_context->closure_decimal.storage->object;

    if ( tmp_unary_arg_3 == NULL )
    {
        Py_DECREF( tmp_compexpr_left_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215005 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 809;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_2 = UNARY_OPERATION( PyNumber_Negative, tmp_unary_arg_3 );
    if ( tmp_binop_right_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compexpr_left_4 );

        frame_function->f_lineno = 809;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_4 = POWER_OPERATION( tmp_binop_left_2, tmp_binop_right_2 );
    Py_DECREF( tmp_binop_right_2 );
    if ( tmp_compexpr_right_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compexpr_left_4 );

        frame_function->f_lineno = 809;
        goto frame_exception_exit_1;
    }
    tmp_return_value = RICH_COMPARE_LE( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    Py_DECREF( tmp_compexpr_right_4 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 809;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_xinfid.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_xinfid,
            var_xinfid.object
        );

    }
    if ((var_yinfid.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_yinfid,
            var_yinfid.object
        );

    }
    if ((var_z.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_z,
            var_z.object
        );

    }
    if ((_python_context->closure_npany.storage != NULL && _python_context->closure_npany.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_npany,
            _python_context->closure_npany.storage->object
        );

    }
    if ((_python_context->closure_issubdtype.storage != NULL && _python_context->closure_issubdtype.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_issubdtype,
            _python_context->closure_issubdtype.storage->object
        );

    }
    if ((_python_context->closure_number.storage != NULL && _python_context->closure_number.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_number,
            _python_context->closure_number.storage->object
        );

    }
    if ((_python_context->closure_float_.storage != NULL && _python_context->closure_float_.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_float_,
            _python_context->closure_float_.storage->object
        );

    }
    if ((_python_context->closure_around.storage != NULL && _python_context->closure_around.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_around,
            _python_context->closure_around.storage->object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            par_x.object
        );

    }
    if ((par_y.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_y,
            par_y.object
        );

    }
    if ((_python_context->closure_decimal.storage != NULL && _python_context->closure_decimal.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_decimal,
            _python_context->closure_decimal.storage->object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    PyObject *_python_par_y = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "compare() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_y == key )
            {
                assert( _python_par_y == NULL );
                _python_par_y = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_x, key ) == 1 )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_y, key ) == 1 )
            {
                assert( _python_par_y == NULL );
                _python_par_y = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "compare() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_y != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_y = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_y == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_y = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL || _python_par_y == NULL ))
    {
        PyObject *values[] = { _python_par_x, _python_par_y };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( self, _python_par_x, _python_par_y );

error_exit:;

    Py_XDECREF( _python_par_x );
    Py_XDECREF( _python_par_y );

    return NULL;
}

static PyObject *dparse_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_20_assert_array_less_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_x, PyObject *_python_par_y, PyObject *_python_par_err_msg, PyObject *_python_par_verbose )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_x; par_x.object = _python_par_x;
    PyObjectLocalVariable par_y; par_y.object = _python_par_y;
    PyObjectLocalVariable par_err_msg; par_err_msg.object = _python_par_err_msg;
    PyObjectLocalVariable par_verbose; par_verbose.object = _python_par_verbose;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_called_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_255590aa610a45a3b7c526600be2b018, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_array_compare );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_assert_array_compare );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216166 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 878;
        goto frame_exception_exit_1;
    }

    tmp_call_pos_1 = PyTuple_New( 3 );
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216215 ], 37, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 878;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___lt__ );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_1 );

        frame_function->f_lineno = 878;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_x.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 878;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_y.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 878;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 2, tmp_tuple_element_1 );
    tmp_call_kw_1 = _PyDict_NewPresized( 3 );
    tmp_dict_value_1 = par_err_msg.object;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 878;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_1 = const_str_plain_err_msg;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    tmp_dict_value_2 = par_verbose.object;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49769 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 879;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_2 = const_str_plain_verbose;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_2, tmp_dict_value_2 );
    tmp_dict_value_3 = const_str_digest_af944d9dcdae647078b80309bda477ae;
    tmp_dict_key_3 = const_str_plain_header;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_3, tmp_dict_value_3 );
    frame_function->f_lineno = 880;
    tmp_unused = CALL_FUNCTION( tmp_called_1, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 880;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            par_x.object
        );

    }
    if ((par_y.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_y,
            par_y.object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_20_assert_array_less_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    PyObject *_python_par_y = NULL;
    PyObject *_python_par_err_msg = NULL;
    PyObject *_python_par_verbose = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "assert_array_less() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_y == key )
            {
                assert( _python_par_y == NULL );
                _python_par_y = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_err_msg == key )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_verbose == key )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_x, key ) == 1 )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_y, key ) == 1 )
            {
                assert( _python_par_y == NULL );
                _python_par_y = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_err_msg, key ) == 1 )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_verbose, key ) == 1 )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "assert_array_less() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 4  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_y != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_y = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_y == NULL )
    {
        if ( 1 + self->m_defaults_given >= 4  )
        {
            _python_par_y = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_err_msg != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_err_msg = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_err_msg == NULL )
    {
        if ( 2 + self->m_defaults_given >= 4  )
        {
            _python_par_err_msg = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_verbose != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_verbose = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_verbose == NULL )
    {
        if ( 3 + self->m_defaults_given >= 4  )
        {
            _python_par_verbose = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL || _python_par_y == NULL || _python_par_err_msg == NULL || _python_par_verbose == NULL ))
    {
        PyObject *values[] = { _python_par_x, _python_par_y, _python_par_err_msg, _python_par_verbose };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_20_assert_array_less_of_module_numpy$testing$utils( self, _python_par_x, _python_par_y, _python_par_err_msg, _python_par_verbose );

error_exit:;

    Py_XDECREF( _python_par_x );
    Py_XDECREF( _python_par_y );
    Py_XDECREF( _python_par_err_msg );
    Py_XDECREF( _python_par_verbose );

    return NULL;
}

static PyObject *dparse_function_20_assert_array_less_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4 )
    {
        return impl_function_20_assert_array_less_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_20_assert_array_less_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_21_runstring_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_astr, PyObject *_python_par_dict )
{
    // No context is used.

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObjectLocalVariable par_astr; par_astr.object = _python_par_astr;
    PyObjectLocalVariable par_dict; par_dict.object = _python_par_dict;
    PyObjectTempVariable tmp_exec_1__globals;
    PyObjectTempVariable tmp_exec_1__locals;
    PyObjectTempVariable tmp_exec_1__source;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_called_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_eval_globals_1;
    PyObject *tmp_eval_locals_1;
    PyObject *tmp_eval_source_1;
    PyObject *tmp_exec_compiled_1;
    PyObject *tmp_exec_result_1;
    PyObject *tmp_frame_locals;
    bool tmp_is_1;
    bool tmp_is_2;
    bool tmp_is_3;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    int tmp_tried_lineno_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_855792ac59e5258845f5e852af6680b0, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code
    tmp_assign_source_1 = par_dict.object;

    if ( tmp_assign_source_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25099 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 883;
        goto try_finally_handler_1;
    }

    assert( tmp_exec_1__globals.object == NULL );
    tmp_exec_1__globals.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    tmp_assign_source_2 = Py_None;
    assert( tmp_exec_1__locals.object == NULL );
    tmp_exec_1__locals.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    tmp_compare_left_1 = tmp_exec_1__locals.object;

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if (tmp_is_1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_compare_left_2 = tmp_exec_1__globals.object;

    tmp_compare_right_2 = Py_None;
    tmp_is_2 = ( tmp_compare_left_2 == tmp_compare_right_2 );
    if (tmp_is_2)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_assign_source_3 = INCREASE_REFCOUNT( locals_dict );
    if ((par_astr.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_3,
            const_str_plain_astr,
            par_astr.object
        );

    }
    if ((par_dict.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_3,
            const_str_plain_dict,
            par_dict.object
        );

    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_assign_source_3 = tmp_exec_1__globals.object;

    Py_INCREF( tmp_assign_source_3 );
    condexpr_end_1:;
    assert( tmp_exec_1__locals.object != NULL );
    {
        PyObject *old = tmp_exec_1__locals.object;
        tmp_exec_1__locals.object = tmp_assign_source_3;
        Py_DECREF( old );
    }

    branch_no_1:;
    tmp_compare_left_3 = tmp_exec_1__globals.object;

    tmp_compare_right_3 = Py_None;
    tmp_is_3 = ( tmp_compare_left_3 == tmp_compare_right_3 );
    if (tmp_is_3)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_4 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    assert( tmp_exec_1__globals.object != NULL );
    {
        PyObject *old = tmp_exec_1__globals.object;
        tmp_exec_1__globals.object = INCREASE_REFCOUNT( tmp_assign_source_4 );
        Py_DECREF( old );
    }

    branch_no_2:;
    tmp_assign_source_5 = par_astr.object;

    if ( tmp_assign_source_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53550 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 883;
        goto try_finally_handler_1;
    }

    assert( tmp_exec_1__source.object == NULL );
    tmp_exec_1__source.object = INCREASE_REFCOUNT( tmp_assign_source_5 );

    tmp_isinstance_inst_1 = tmp_exec_1__source.object;

    tmp_isinstance_cls_1 = (PyObject *)&PyFile_Type;
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 883;
        goto try_finally_handler_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_1 = tmp_exec_1__source.object;

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_read );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 883;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 883;
    tmp_assign_source_6 = CALL_FUNCTION_NO_ARGS( tmp_called_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 883;
        goto try_finally_handler_1;
    }
    assert( tmp_exec_1__source.object != NULL );
    {
        PyObject *old = tmp_exec_1__source.object;
        tmp_exec_1__source.object = tmp_assign_source_6;
        Py_DECREF( old );
    }

    branch_no_3:;
    tmp_eval_source_1 = tmp_exec_1__source.object;

    tmp_eval_globals_1 = tmp_exec_1__globals.object;

    tmp_eval_locals_1 = tmp_exec_1__locals.object;

    tmp_exec_compiled_1 = COMPILE_CODE( tmp_eval_source_1, const_str_angle_string, const_str_plain_exec, NULL, NULL );
    if ( tmp_exec_compiled_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 883;
        goto try_finally_handler_1;
    }
    tmp_exec_result_1 = EVAL_CODE( tmp_exec_compiled_1, tmp_eval_globals_1, tmp_eval_locals_1 );
    Py_DECREF( tmp_exec_compiled_1 );
    if ( tmp_exec_result_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 883;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_exec_result_1 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    tmp_result = tmp_exec_1__globals.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_exec_1__globals.object );
        tmp_exec_1__globals.object = NULL;
    }

    assert( tmp_result != false );
    tmp_result = tmp_exec_1__locals.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_exec_1__locals.object );
        tmp_exec_1__locals.object = NULL;
    }

    assert( tmp_result != false );
    Py_XDECREF( tmp_exec_1__source.object );
    tmp_exec_1__source.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = INCREASE_REFCOUNT( locals_dict );
    if ((par_astr.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_astr,
            par_astr.object
        );

    }
    if ((par_dict.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_dict,
            par_dict.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
Py_DECREF( locals_dict );
    return tmp_return_value;

}
static PyObject *fparse_function_21_runstring_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_astr = NULL;
    PyObject *_python_par_dict = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "runstring() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_astr == key )
            {
                assert( _python_par_astr == NULL );
                _python_par_astr = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_dict == key )
            {
                assert( _python_par_dict == NULL );
                _python_par_dict = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_astr, key ) == 1 )
            {
                assert( _python_par_astr == NULL );
                _python_par_astr = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_dict, key ) == 1 )
            {
                assert( _python_par_dict == NULL );
                _python_par_dict = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "runstring() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_astr != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_astr = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_astr == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_astr = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_dict != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_dict = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_dict == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_dict = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_astr == NULL || _python_par_dict == NULL ))
    {
        PyObject *values[] = { _python_par_astr, _python_par_dict };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_21_runstring_of_module_numpy$testing$utils( self, _python_par_astr, _python_par_dict );

error_exit:;

    Py_XDECREF( _python_par_astr );
    Py_XDECREF( _python_par_dict );

    return NULL;
}

static PyObject *dparse_function_21_runstring_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_21_runstring_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_21_runstring_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_22_assert_string_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_actual, PyObject *_python_par_desired )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_actual; par_actual.object = _python_par_actual;
    PyObjectLocalVariable par_desired; par_desired.object = _python_par_desired;
    PyObjectLocalVariable var_difflib;
    PyObjectLocalVariable var_diff;
    PyObjectLocalVariable var_diff_list;
    PyObjectLocalVariable var_d1;
    PyObjectLocalVariable var_l;
    PyObjectLocalVariable var_d2;
    PyObjectLocalVariable var_d3;
    PyObjectLocalVariable var_msg;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_left_3;
    PyObject *tmp_binop_left_4;
    PyObject *tmp_binop_left_5;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_binop_right_3;
    PyObject *tmp_binop_right_4;
    PyObject *tmp_binop_right_5;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_call_arg_element_14;
    PyObject *tmp_call_arg_element_15;
    PyObject *tmp_call_arg_element_16;
    PyObject *tmp_call_arg_element_17;
    PyObject *tmp_call_arg_element_18;
    PyObject *tmp_call_arg_element_19;
    PyObject *tmp_call_arg_element_20;
    PyObject *tmp_call_arg_element_21;
    PyObject *tmp_call_arg_element_22;
    PyObject *tmp_call_arg_element_23;
    PyObject *tmp_call_arg_element_24;
    PyObject *tmp_call_arg_element_25;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    PyObject *tmp_called_11;
    PyObject *tmp_called_12;
    PyObject *tmp_called_13;
    PyObject *tmp_called_14;
    PyObject *tmp_called_15;
    PyObject *tmp_called_16;
    PyObject *tmp_called_17;
    PyObject *tmp_called_18;
    PyObject *tmp_called_19;
    PyObject *tmp_called_20;
    PyObject *tmp_called_21;
    PyObject *tmp_called_22;
    int tmp_cmp_NotEq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_list_arg_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_make_exception_arg_3;
    PyObject *tmp_make_exception_arg_4;
    PyObject *tmp_make_exception_arg_5;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_type_3;
    PyObject *tmp_raise_type_4;
    PyObject *tmp_raise_type_5;
    int tmp_res;
    PyObject *tmp_return_value;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_type_arg_1;
    PyObject *tmp_type_arg_2;
    PyObject *tmp_unary_arg_1;
    PyObject *tmp_unary_arg_2;
    PyObject *tmp_unary_arg_3;
    PyObject *tmp_unary_arg_4;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_0af3a5c20e0c571665f4b501fd2e54cd, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_difflib.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_difflib,
            var_difflib.object
        );

    }
    if ((var_diff.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_diff,
            var_diff.object
        );

    }
    if ((var_diff_list.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_diff_list,
            var_diff_list.object
        );

    }
    if ((var_d1.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_d1,
            var_d1.object
        );

    }
    if ((var_l.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_l,
            var_l.object
        );

    }
    if ((var_d2.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_d2,
            var_d2.object
        );

    }
    if ((var_d3.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_d3,
            var_d3.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_desired,
            par_desired.object
        );

    }
    frame_function->f_lineno = 912;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_difflib, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 912;
        goto frame_exception_exit_1;
    }
    assert( var_difflib.object == NULL );
    var_difflib.object = tmp_assign_source_1;

    tmp_isinstance_inst_1 = par_actual.object;

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 914;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_1 = LOOKUP_BUILTIN( const_str_plain_str );
    if ( tmp_isinstance_cls_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 914;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 914;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_type_arg_1 = par_actual.object;

    if ( tmp_type_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 915;
        goto frame_exception_exit_1;
    }

    tmp_unary_arg_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
    if ( tmp_unary_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 915;
        goto frame_exception_exit_1;
    }
    tmp_make_exception_arg_1 = UNARY_OPERATION( PyObject_Repr, tmp_unary_arg_1 );
    Py_DECREF( tmp_unary_arg_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 915;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 915;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_1 );
    Py_DECREF( tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 915;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 915;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_isinstance_inst_2 = par_desired.object;

    if ( tmp_isinstance_inst_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 916;
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_2 = LOOKUP_BUILTIN( const_str_plain_str );
    if ( tmp_isinstance_cls_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 916;
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 916;
        goto frame_exception_exit_1;
    }
    if (tmp_res == 1)
    {
        goto branch_no_2;
    }
    else
    {
        goto branch_yes_2;
    }
    branch_yes_2:;
    tmp_type_arg_2 = par_desired.object;

    if ( tmp_type_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 917;
        goto frame_exception_exit_1;
    }

    tmp_unary_arg_2 = BUILTIN_TYPE1( tmp_type_arg_2 );
    if ( tmp_unary_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 917;
        goto frame_exception_exit_1;
    }
    tmp_make_exception_arg_2 = UNARY_OPERATION( PyObject_Repr, tmp_unary_arg_2 );
    Py_DECREF( tmp_unary_arg_2 );
    if ( tmp_make_exception_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 917;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 917;
    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_2 );
    Py_DECREF( tmp_make_exception_arg_2 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 917;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_2;
    frame_function->f_lineno = 917;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_2:;
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4450 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 918;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_match );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 918;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_2 = const_str_digest_c09d4ef95ea8db1b32a420bd409613dc;
    tmp_binop_right_2 = par_desired.object;

    if ( tmp_binop_right_2 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 918;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_1 = BINARY_OPERATION_ADD( tmp_binop_left_2, tmp_binop_right_2 );
    if ( tmp_binop_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 918;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_1 = const_str_digest_1458a437b3c6456f9ebf61d46c9ed13e;
    tmp_call_arg_element_1 = BINARY_OPERATION_ADD( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_left_1 );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 918;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_2 = par_actual.object;

    if ( tmp_call_arg_element_2 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_arg_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 918;
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_arg_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4450 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 918;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_M );
    if ( tmp_call_arg_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_arg_element_1 );

        frame_function->f_lineno = 918;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 918;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    Py_DECREF( tmp_call_arg_element_3 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 918;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        frame_function->f_lineno = 918;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_3:;
    tmp_source_name_4 = var_difflib.object;

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Differ );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 921;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 921;
    tmp_source_name_3 = CALL_FUNCTION_NO_ARGS( tmp_called_3 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 921;
        goto frame_exception_exit_1;
    }
    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_compare );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 921;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = par_actual.object;

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_called_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 921;
        goto frame_exception_exit_1;
    }

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_splitlines );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_2 );

        frame_function->f_lineno = 921;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_5 = const_int_pos_1;
    frame_function->f_lineno = 921;
    tmp_call_arg_element_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_5 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_call_arg_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_2 );

        frame_function->f_lineno = 921;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = par_desired.object;

    if ( tmp_source_name_6 == NULL )
    {
        Py_DECREF( tmp_called_2 );
        Py_DECREF( tmp_call_arg_element_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 921;
        goto frame_exception_exit_1;
    }

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_splitlines );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_2 );
        Py_DECREF( tmp_call_arg_element_4 );

        frame_function->f_lineno = 921;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_7 = const_int_pos_1;
    frame_function->f_lineno = 921;
    tmp_call_arg_element_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_7 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_call_arg_element_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_2 );
        Py_DECREF( tmp_call_arg_element_4 );

        frame_function->f_lineno = 921;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 921;
    tmp_list_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_2, tmp_call_arg_element_4, tmp_call_arg_element_6 );
    Py_DECREF( tmp_called_2 );
    Py_DECREF( tmp_call_arg_element_4 );
    Py_DECREF( tmp_call_arg_element_6 );
    if ( tmp_list_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 921;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = PySequence_List( tmp_list_arg_1 );
    Py_DECREF( tmp_list_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 921;
        goto frame_exception_exit_1;
    }
    assert( var_diff.object == NULL );
    var_diff.object = tmp_assign_source_2;

    tmp_assign_source_3 = PyList_New( 0 );
    assert( var_diff_list.object == NULL );
    var_diff_list.object = tmp_assign_source_3;

    loop_start_1:;
    tmp_cond_value_2 = var_diff.object;

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 923;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_no_4;
    }
    else
    {
        goto branch_yes_4;
    }
    branch_yes_4:;
    goto loop_end_1;
    branch_no_4:;
    tmp_source_name_7 = var_diff.object;

    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_pop );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 924;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_8 = const_int_0;
    frame_function->f_lineno = 924;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_8 );
    Py_DECREF( tmp_called_6 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 924;
        goto frame_exception_exit_1;
    }
    if (var_d1.object == NULL)
    {
        var_d1.object = tmp_assign_source_4;
    }
    else
    {
        PyObject *old = var_d1.object;
        var_d1.object = tmp_assign_source_4;
        Py_DECREF( old );
    }
    tmp_source_name_8 = var_d1.object;

    tmp_called_7 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_startswith );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 925;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_9 = const_str_digest_23b58def11b45727d3351702515f86af;
    frame_function->f_lineno = 925;
    tmp_cond_value_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_9 );
    Py_DECREF( tmp_called_7 );
    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 925;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        frame_function->f_lineno = 925;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_3 );
    if (tmp_cond_truth_3 == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    goto loop_start_1;
    branch_no_5:;
    tmp_source_name_9 = var_d1.object;

    tmp_called_8 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_startswith );
    if ( tmp_called_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 927;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_10 = const_str_digest_ea82fc8d8f320d771fe2d4072039e7bf;
    frame_function->f_lineno = 927;
    tmp_cond_value_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_8, tmp_call_arg_element_10 );
    Py_DECREF( tmp_called_8 );
    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 927;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        frame_function->f_lineno = 927;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_4 );
    if (tmp_cond_truth_4 == 1)
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_assign_source_5 = PyList_New( 1 );
    tmp_list_element_1 = var_d1.object;

    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_assign_source_5, 0, tmp_list_element_1 );
    if (var_l.object == NULL)
    {
        var_l.object = tmp_assign_source_5;
    }
    else
    {
        PyObject *old = var_l.object;
        var_l.object = tmp_assign_source_5;
        Py_DECREF( old );
    }
    tmp_source_name_10 = var_diff.object;

    tmp_called_9 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_pop );
    if ( tmp_called_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 929;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_11 = const_int_0;
    frame_function->f_lineno = 929;
    tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_9, tmp_call_arg_element_11 );
    Py_DECREF( tmp_called_9 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 929;
        goto frame_exception_exit_1;
    }
    if (var_d2.object == NULL)
    {
        var_d2.object = tmp_assign_source_6;
    }
    else
    {
        PyObject *old = var_d2.object;
        var_d2.object = tmp_assign_source_6;
        Py_DECREF( old );
    }
    tmp_source_name_11 = var_d2.object;

    tmp_called_10 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_startswith );
    if ( tmp_called_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 930;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_12 = const_str_digest_56a309cdbf4c18e741b09e2a74997f79;
    frame_function->f_lineno = 930;
    tmp_cond_value_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_10, tmp_call_arg_element_12 );
    Py_DECREF( tmp_called_10 );
    if ( tmp_cond_value_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 930;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_5 );

        frame_function->f_lineno = 930;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_5 );
    if (tmp_cond_truth_5 == 1)
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_source_name_12 = var_l.object;

    tmp_called_11 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_append );
    if ( tmp_called_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 931;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_13 = var_d2.object;

    frame_function->f_lineno = 931;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_11, tmp_call_arg_element_13 );
    Py_DECREF( tmp_called_11 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 931;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_13 = var_diff.object;

    tmp_called_12 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_pop );
    if ( tmp_called_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 932;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_14 = const_int_0;
    frame_function->f_lineno = 932;
    tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_12, tmp_call_arg_element_14 );
    Py_DECREF( tmp_called_12 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 932;
        goto frame_exception_exit_1;
    }
    assert( var_d2.object != NULL );
    {
        PyObject *old = var_d2.object;
        var_d2.object = tmp_assign_source_7;
        Py_DECREF( old );
    }

    branch_no_7:;
    tmp_source_name_14 = var_d2.object;

    tmp_called_13 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_startswith );
    if ( tmp_called_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 933;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_15 = const_str_digest_65445bab21488f0a0a7d901ec269124b;
    frame_function->f_lineno = 933;
    tmp_cond_value_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_13, tmp_call_arg_element_15 );
    Py_DECREF( tmp_called_13 );
    if ( tmp_cond_value_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 933;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        frame_function->f_lineno = 933;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_6 );
    if (tmp_cond_truth_6 == 1)
    {
        goto branch_no_8;
    }
    else
    {
        goto branch_yes_8;
    }
    branch_yes_8:;
    tmp_unary_arg_3 = var_d2.object;

    tmp_make_exception_arg_3 = UNARY_OPERATION( PyObject_Repr, tmp_unary_arg_3 );
    if ( tmp_make_exception_arg_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 934;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 934;
    tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_3 );
    Py_DECREF( tmp_make_exception_arg_3 );
    if ( tmp_raise_type_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 934;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_3;
    frame_function->f_lineno = 934;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_8:;
    tmp_source_name_15 = var_l.object;

    tmp_called_14 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_append );
    if ( tmp_called_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 935;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_16 = var_d2.object;

    frame_function->f_lineno = 935;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_14, tmp_call_arg_element_16 );
    Py_DECREF( tmp_called_14 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 935;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_16 = var_diff.object;

    tmp_called_15 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_pop );
    if ( tmp_called_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 936;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_17 = const_int_0;
    frame_function->f_lineno = 936;
    tmp_assign_source_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_15, tmp_call_arg_element_17 );
    Py_DECREF( tmp_called_15 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 936;
        goto frame_exception_exit_1;
    }
    if (var_d3.object == NULL)
    {
        var_d3.object = tmp_assign_source_8;
    }
    else
    {
        PyObject *old = var_d3.object;
        var_d3.object = tmp_assign_source_8;
        Py_DECREF( old );
    }
    tmp_source_name_17 = var_d3.object;

    tmp_called_16 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_startswith );
    if ( tmp_called_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 937;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_18 = const_str_digest_56a309cdbf4c18e741b09e2a74997f79;
    frame_function->f_lineno = 937;
    tmp_cond_value_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_16, tmp_call_arg_element_18 );
    Py_DECREF( tmp_called_16 );
    if ( tmp_cond_value_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 937;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_7 );

        frame_function->f_lineno = 937;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_7 );
    if (tmp_cond_truth_7 == 1)
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_source_name_18 = var_l.object;

    tmp_called_17 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_append );
    if ( tmp_called_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 938;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_19 = var_d3.object;

    frame_function->f_lineno = 938;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_17, tmp_call_arg_element_19 );
    Py_DECREF( tmp_called_17 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 938;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_9;
    branch_no_9:;
    tmp_source_name_19 = var_diff.object;

    tmp_called_18 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_insert );
    if ( tmp_called_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 940;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_20 = const_int_0;
    tmp_call_arg_element_21 = var_d3.object;

    frame_function->f_lineno = 940;
    tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_18, tmp_call_arg_element_20, tmp_call_arg_element_21 );
    Py_DECREF( tmp_called_18 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 940;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_end_9:;
    tmp_source_name_20 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_source_name_20 == NULL ))
    {
        tmp_source_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_source_name_20 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4450 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 941;
        goto frame_exception_exit_1;
    }

    tmp_called_19 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_match );
    if ( tmp_called_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 941;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_4 = const_str_digest_c09d4ef95ea8db1b32a420bd409613dc;
    tmp_sliceslicedel_index_lower_1 = 2;
    tmp_slice_index_upper_1 = PY_SSIZE_T_MAX;
    tmp_slice_source_1 = var_d2.object;

    tmp_binop_right_4 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_binop_right_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_19 );

        frame_function->f_lineno = 941;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_3 = BINARY_OPERATION_ADD( tmp_binop_left_4, tmp_binop_right_4 );
    Py_DECREF( tmp_binop_right_4 );
    if ( tmp_binop_left_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_19 );

        frame_function->f_lineno = 941;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_3 = const_str_digest_1458a437b3c6456f9ebf61d46c9ed13e;
    tmp_call_arg_element_22 = BINARY_OPERATION_ADD( tmp_binop_left_3, tmp_binop_right_3 );
    Py_DECREF( tmp_binop_left_3 );
    if ( tmp_call_arg_element_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_19 );

        frame_function->f_lineno = 941;
        goto frame_exception_exit_1;
    }
    tmp_sliceslicedel_index_lower_2 = 2;
    tmp_slice_index_upper_2 = PY_SSIZE_T_MAX;
    tmp_slice_source_2 = var_d1.object;

    tmp_call_arg_element_23 = LOOKUP_INDEX_SLICE( tmp_slice_source_2, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_call_arg_element_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_19 );
        Py_DECREF( tmp_call_arg_element_22 );

        frame_function->f_lineno = 941;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 941;
    tmp_cond_value_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_19, tmp_call_arg_element_22, tmp_call_arg_element_23 );
    Py_DECREF( tmp_called_19 );
    Py_DECREF( tmp_call_arg_element_22 );
    Py_DECREF( tmp_call_arg_element_23 );
    if ( tmp_cond_value_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 941;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_8 );

        frame_function->f_lineno = 941;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_8 );
    if (tmp_cond_truth_8 == 1)
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    goto loop_start_1;
    branch_no_10:;
    tmp_source_name_21 = var_diff_list.object;

    tmp_called_20 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_extend );
    if ( tmp_called_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 943;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_24 = var_l.object;

    frame_function->f_lineno = 943;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_20, tmp_call_arg_element_24 );
    Py_DECREF( tmp_called_20 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 943;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto loop_start_1;
    branch_no_6:;
    tmp_unary_arg_4 = var_d1.object;

    tmp_make_exception_arg_4 = UNARY_OPERATION( PyObject_Repr, tmp_unary_arg_4 );
    if ( tmp_make_exception_arg_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 945;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 945;
    tmp_raise_type_4 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_4 );
    Py_DECREF( tmp_make_exception_arg_4 );
    if ( tmp_raise_type_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 945;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_4;
    frame_function->f_lineno = 945;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 923;
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;
    tmp_cond_value_9 = var_diff_list.object;

    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 946;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_9 == 1)
    {
        goto branch_no_11;
    }
    else
    {
        goto branch_yes_11;
    }
    branch_yes_11:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_11:;
    tmp_binop_left_5 = const_str_digest_989ea08f922c34ff2003b946f35a2a71;
    tmp_source_name_23 = const_str_empty;
    tmp_called_22 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_join );
    if ( tmp_called_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 948;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_25 = var_diff_list.object;

    frame_function->f_lineno = 948;
    tmp_source_name_22 = CALL_FUNCTION_WITH_ARGS1( tmp_called_22, tmp_call_arg_element_25 );
    Py_DECREF( tmp_called_22 );
    if ( tmp_source_name_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 948;
        goto frame_exception_exit_1;
    }
    tmp_called_21 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_rstrip );
    Py_DECREF( tmp_source_name_22 );
    if ( tmp_called_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 948;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 948;
    tmp_binop_right_5 = CALL_FUNCTION_NO_ARGS( tmp_called_21 );
    Py_DECREF( tmp_called_21 );
    if ( tmp_binop_right_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 948;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_9 = BINARY_OPERATION_REMAINDER( tmp_binop_left_5, tmp_binop_right_5 );
    Py_DECREF( tmp_binop_right_5 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 948;
        goto frame_exception_exit_1;
    }
    assert( var_msg.object == NULL );
    var_msg.object = tmp_assign_source_9;

    tmp_compare_left_1 = par_actual.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 949;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = par_desired.object;

    if ( tmp_compare_right_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 949;
        goto frame_exception_exit_1;
    }

    tmp_cmp_NotEq_1 = RICH_COMPARE_BOOL_NE( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_NotEq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 949;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_NotEq_1 == 1)
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_make_exception_arg_5 = var_msg.object;

    frame_function->f_lineno = 950;
    tmp_raise_type_5 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_5 );
    if ( tmp_raise_type_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 950;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_5;
    frame_function->f_lineno = 950;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_12:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_difflib.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_difflib,
            var_difflib.object
        );

    }
    if ((var_diff.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_diff,
            var_diff.object
        );

    }
    if ((var_diff_list.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_diff_list,
            var_diff_list.object
        );

    }
    if ((var_d1.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_d1,
            var_d1.object
        );

    }
    if ((var_l.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_l,
            var_l.object
        );

    }
    if ((var_d2.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_d2,
            var_d2.object
        );

    }
    if ((var_d3.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_d3,
            var_d3.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_desired,
            par_desired.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_22_assert_string_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_actual = NULL;
    PyObject *_python_par_desired = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "assert_string_equal() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_actual == key )
            {
                assert( _python_par_actual == NULL );
                _python_par_actual = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_desired == key )
            {
                assert( _python_par_desired == NULL );
                _python_par_desired = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_actual, key ) == 1 )
            {
                assert( _python_par_actual == NULL );
                _python_par_actual = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_desired, key ) == 1 )
            {
                assert( _python_par_desired == NULL );
                _python_par_desired = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "assert_string_equal() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_actual != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_actual = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_actual == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_actual = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_desired != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_desired = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_desired == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_desired = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_actual == NULL || _python_par_desired == NULL ))
    {
        PyObject *values[] = { _python_par_actual, _python_par_desired };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_22_assert_string_equal_of_module_numpy$testing$utils( self, _python_par_actual, _python_par_desired );

error_exit:;

    Py_XDECREF( _python_par_actual );
    Py_XDECREF( _python_par_desired );

    return NULL;
}

static PyObject *dparse_function_22_assert_string_equal_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_22_assert_string_equal_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_22_assert_string_equal_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_23_rundocs_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_filename, PyObject *_python_par_raise_on_error )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_filename; par_filename.object = _python_par_filename;
    PyObjectLocalVariable par_raise_on_error; par_raise_on_error.object = _python_par_raise_on_error;
    PyObjectLocalVariable var_doctest;
    PyObjectLocalVariable var_imp;
    PyObjectLocalVariable var_f;
    PyObjectLocalVariable var_name;
    PyObjectLocalVariable var_path;
    PyObjectLocalVariable var_file;
    PyObjectLocalVariable var_pathname;
    PyObjectLocalVariable var_description;
    PyObjectLocalVariable var_m;
    PyObjectLocalVariable var_tests;
    PyObjectLocalVariable var_runner;
    PyObjectSharedLocalVariable var_msg;
    PyObjectLocalVariable var_out;
    PyObjectLocalVariable var_test;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_tuple_unpack_1__element_3;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_and_1__value_1;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_kw_2;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    PyObject *tmp_called_11;
    PyObject *tmp_called_12;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_locals_2;
    bool tmp_is_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iterator_attempt_1;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_subscript_2;
    PyObject *tmp_subscr_target_1;
    PyObject *tmp_subscr_target_2;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    int tmp_tried_lineno_4;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_bfa694d057c13d481638135282bea2ec, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_doctest.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_doctest,
            var_doctest.object
        );

    }
    if ((var_imp.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_imp,
            var_imp.object
        );

    }
    if ((var_f.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_f,
            var_f.object
        );

    }
    if ((var_name.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_name,
            var_name.object
        );

    }
    if ((var_path.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_path,
            var_path.object
        );

    }
    if ((var_file.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_file,
            var_file.object
        );

    }
    if ((var_pathname.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_pathname,
            var_pathname.object
        );

    }
    if ((var_description.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_description,
            var_description.object
        );

    }
    if ((var_m.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_m,
            var_m.object
        );

    }
    if ((var_tests.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_tests,
            var_tests.object
        );

    }
    if ((var_runner.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_runner,
            var_runner.object
        );

    }
    if ((var_msg.storage != NULL && var_msg.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_msg,
            var_msg.storage->object
        );

    }
    if ((var_out.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_out,
            var_out.object
        );

    }
    if ((var_test.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_test,
            var_test.object
        );

    }
    if ((par_filename.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_filename,
            par_filename.object
        );

    }
    if ((par_raise_on_error.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_raise_on_error,
            par_raise_on_error.object
        );

    }
    frame_function->f_lineno = 975;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_doctest, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 975;
        goto frame_exception_exit_1;
    }
    assert( var_doctest.object == NULL );
    var_doctest.object = tmp_assign_source_1;

    tmp_import_globals_2 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_2 = PyDict_New();
    if ((var_doctest.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_doctest,
            var_doctest.object
        );

    }
    if ((var_imp.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_imp,
            var_imp.object
        );

    }
    if ((var_f.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_f,
            var_f.object
        );

    }
    if ((var_name.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_name,
            var_name.object
        );

    }
    if ((var_path.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_path,
            var_path.object
        );

    }
    if ((var_file.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_file,
            var_file.object
        );

    }
    if ((var_pathname.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_pathname,
            var_pathname.object
        );

    }
    if ((var_description.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_description,
            var_description.object
        );

    }
    if ((var_m.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_m,
            var_m.object
        );

    }
    if ((var_tests.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_tests,
            var_tests.object
        );

    }
    if ((var_runner.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_runner,
            var_runner.object
        );

    }
    if ((var_msg.storage != NULL && var_msg.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_msg,
            var_msg.storage->object
        );

    }
    if ((var_out.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_out,
            var_out.object
        );

    }
    if ((var_test.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_test,
            var_test.object
        );

    }
    if ((par_filename.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_filename,
            par_filename.object
        );

    }
    if ((par_raise_on_error.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_2,
            const_str_plain_raise_on_error,
            par_raise_on_error.object
        );

    }
    frame_function->f_lineno = 975;
    tmp_assign_source_2 = IMPORT_MODULE( const_str_plain_imp, tmp_import_globals_2, tmp_import_locals_2, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 975;
        goto frame_exception_exit_1;
    }
    assert( var_imp.object == NULL );
    var_imp.object = tmp_assign_source_2;

    tmp_compare_left_1 = par_filename.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2445 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 976;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if (tmp_is_1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5370 ], 32, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 977;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__getframe );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 977;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_int_pos_1;
    frame_function->f_lineno = 977;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 977;
        goto frame_exception_exit_1;
    }
    assert( var_f.object == NULL );
    var_f.object = tmp_assign_source_3;

    tmp_source_name_2 = var_f.object;

    tmp_subscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_f_globals );
    if ( tmp_subscr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 978;
        goto frame_exception_exit_1;
    }
    tmp_subscr_subscript_1 = const_str_plain___file__;
    tmp_assign_source_4 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    Py_DECREF( tmp_subscr_target_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 978;
        goto frame_exception_exit_1;
    }
    if (par_filename.object == NULL)
    {
        par_filename.object = tmp_assign_source_4;
    }
    else
    {
        PyObject *old = par_filename.object;
        par_filename.object = tmp_assign_source_4;
        Py_DECREF( old );
    }
    branch_no_1:;
    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6460 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 979;
        goto frame_exception_exit_1;
    }

    tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_path );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 979;
        goto frame_exception_exit_1;
    }
    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_splitext );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 979;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_6 == NULL )
    {
        Py_DECREF( tmp_called_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6460 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 979;
        goto frame_exception_exit_1;
    }

    tmp_source_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_path );
    if ( tmp_source_name_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_2 );

        frame_function->f_lineno = 979;
        goto frame_exception_exit_1;
    }
    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_basename );
    Py_DECREF( tmp_source_name_5 );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_2 );

        frame_function->f_lineno = 979;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_3 = par_filename.object;

    if ( tmp_call_arg_element_3 == NULL )
    {
        Py_DECREF( tmp_called_2 );
        Py_DECREF( tmp_called_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2445 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 979;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 979;
    tmp_call_arg_element_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_3 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_call_arg_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_2 );

        frame_function->f_lineno = 979;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 979;
    tmp_subscr_target_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_2 );
    Py_DECREF( tmp_call_arg_element_2 );
    if ( tmp_subscr_target_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 979;
        goto frame_exception_exit_1;
    }
    tmp_subscr_subscript_2 = const_int_0;
    tmp_assign_source_5 = LOOKUP_SUBSCRIPT( tmp_subscr_target_2, tmp_subscr_subscript_2 );
    Py_DECREF( tmp_subscr_target_2 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 979;
        goto frame_exception_exit_1;
    }
    assert( var_name.object == NULL );
    var_name.object = tmp_assign_source_5;

    tmp_assign_source_6 = PyList_New( 1 );
    tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_8 == NULL ))
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_8 == NULL )
    {
        Py_DECREF( tmp_assign_source_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6460 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 980;
        goto frame_exception_exit_1;
    }

    tmp_source_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_path );
    if ( tmp_source_name_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_6 );

        frame_function->f_lineno = 980;
        goto frame_exception_exit_1;
    }
    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_dirname );
    Py_DECREF( tmp_source_name_7 );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_6 );

        frame_function->f_lineno = 980;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_4 = par_filename.object;

    if ( tmp_call_arg_element_4 == NULL )
    {
        Py_DECREF( tmp_assign_source_6 );
        Py_DECREF( tmp_called_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2445 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 980;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 980;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_6 );

        frame_function->f_lineno = 980;
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_6, 0, tmp_list_element_1 );
    assert( var_path.object == NULL );
    var_path.object = tmp_assign_source_6;

    // Tried code
    tmp_source_name_9 = var_imp.object;

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_find_module );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 981;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_5 = var_name.object;

    tmp_call_arg_element_6 = var_path.object;

    frame_function->f_lineno = 981;
    tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_5, tmp_call_arg_element_5, tmp_call_arg_element_6 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 981;
        goto try_finally_handler_1;
    }
    tmp_assign_source_7 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 981;
        goto try_finally_handler_1;
    }
    assert( tmp_tuple_unpack_1__source_iter.object == NULL );
    tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_7;

    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_8 = UNPACK_PARAMETER_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_8 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 981;
        goto try_finally_handler_1;
    }
    assert( tmp_tuple_unpack_1__element_1.object == NULL );
    tmp_tuple_unpack_1__element_1.object = tmp_assign_source_8;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_9 = UNPACK_PARAMETER_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_9 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 981;
        goto try_finally_handler_1;
    }
    assert( tmp_tuple_unpack_1__element_2.object == NULL );
    tmp_tuple_unpack_1__element_2.object = tmp_assign_source_9;

    tmp_unpack_3 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_10 = UNPACK_PARAMETER_NEXT( tmp_unpack_3, 2 );
    if ( tmp_assign_source_10 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 981;
        goto try_finally_handler_1;
    }
    assert( tmp_tuple_unpack_1__element_3.object == NULL );
    tmp_tuple_unpack_1__element_3.object = tmp_assign_source_10;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_1 ); assert( PyIter_Check( tmp_iterator_name_1 ) );

    tmp_iterator_attempt_1 = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt_1 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_1;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_1 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_1;
    }
    tmp_assign_source_11 = tmp_tuple_unpack_1__element_1.object;

    assert( var_file.object == NULL );
    var_file.object = INCREASE_REFCOUNT( tmp_assign_source_11 );

    tmp_assign_source_12 = tmp_tuple_unpack_1__element_2.object;

    assert( var_pathname.object == NULL );
    var_pathname.object = INCREASE_REFCOUNT( tmp_assign_source_12 );

    tmp_assign_source_13 = tmp_tuple_unpack_1__element_3.object;

    assert( var_description.object == NULL );
    var_description.object = INCREASE_REFCOUNT( tmp_assign_source_13 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter.object );
    tmp_tuple_unpack_1__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1.object );
    tmp_tuple_unpack_1__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2.object );
    tmp_tuple_unpack_1__element_2.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3.object );
    tmp_tuple_unpack_1__element_3.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    // Tried code
    tmp_source_name_10 = var_imp.object;

    if ( tmp_source_name_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49330 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 983;
        goto try_finally_handler_2;
    }

    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_load_module );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 983;
        goto try_finally_handler_2;
    }
    tmp_call_arg_element_7 = var_name.object;

    if ( tmp_call_arg_element_7 == NULL )
    {
        Py_DECREF( tmp_called_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6538 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 983;
        goto try_finally_handler_2;
    }

    tmp_call_arg_element_8 = var_file.object;

    if ( tmp_call_arg_element_8 == NULL )
    {
        Py_DECREF( tmp_called_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 983;
        goto try_finally_handler_2;
    }

    tmp_call_arg_element_9 = var_pathname.object;

    if ( tmp_call_arg_element_9 == NULL )
    {
        Py_DECREF( tmp_called_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216602 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 983;
        goto try_finally_handler_2;
    }

    tmp_call_arg_element_10 = var_description.object;

    if ( tmp_call_arg_element_10 == NULL )
    {
        Py_DECREF( tmp_called_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 114592 ], 57, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 983;
        goto try_finally_handler_2;
    }

    frame_function->f_lineno = 983;
    tmp_assign_source_14 = CALL_FUNCTION_WITH_ARGS4( tmp_called_6, tmp_call_arg_element_7, tmp_call_arg_element_8, tmp_call_arg_element_9, tmp_call_arg_element_10 );
    Py_DECREF( tmp_called_6 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 983;
        goto try_finally_handler_2;
    }
    assert( var_m.object == NULL );
    var_m.object = tmp_assign_source_14;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    tmp_source_name_11 = var_file.object;

    if ( tmp_source_name_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2967 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 985;
        goto try_finally_handler_error_1;
    }

    tmp_called_7 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_close );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 985;
        goto try_finally_handler_error_1;
    }
    frame_function->f_lineno = 985;
    tmp_unused = CALL_FUNCTION_NO_ARGS( tmp_called_7 );
    Py_DECREF( tmp_called_7 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 985;
        goto try_finally_handler_error_1;
    }
    Py_DECREF( tmp_unused );
    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto frame_exception_exit_1;
    }

    goto finally_end_2;
    try_finally_handler_error_1:;
    Py_XDECREF( exception_keeper_type_2 );exception_keeper_type_2 = NULL;
    Py_XDECREF( exception_keeper_value_2 );exception_keeper_value_2 = NULL;
    Py_XDECREF( exception_keeper_tb_2 );exception_keeper_tb_2 = NULL;
    goto frame_exception_exit_1;
    finally_end_2:;
    tmp_source_name_13 = var_doctest.object;

    if ( tmp_source_name_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216656 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 987;
        goto frame_exception_exit_1;
    }

    tmp_called_9 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_DocTestFinder );
    if ( tmp_called_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 987;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 987;
    tmp_source_name_12 = CALL_FUNCTION_NO_ARGS( tmp_called_9 );
    Py_DECREF( tmp_called_9 );
    if ( tmp_source_name_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 987;
        goto frame_exception_exit_1;
    }
    tmp_called_8 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_find );
    Py_DECREF( tmp_source_name_12 );
    if ( tmp_called_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 987;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_11 = var_m.object;

    if ( tmp_call_arg_element_11 == NULL )
    {
        Py_DECREF( tmp_called_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 13535 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 987;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 987;
    tmp_assign_source_15 = CALL_FUNCTION_WITH_ARGS1( tmp_called_8, tmp_call_arg_element_11 );
    Py_DECREF( tmp_called_8 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 987;
        goto frame_exception_exit_1;
    }
    assert( var_tests.object == NULL );
    var_tests.object = tmp_assign_source_15;

    tmp_source_name_14 = var_doctest.object;

    if ( tmp_source_name_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216656 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 988;
        goto frame_exception_exit_1;
    }

    tmp_called_10 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_DocTestRunner );
    if ( tmp_called_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 988;
        goto frame_exception_exit_1;
    }
    tmp_call_kw_1 = PyDict_Copy( const_dict_c05cf8ed9016cad683e758f62a6613d4 );
    frame_function->f_lineno = 988;
    tmp_assign_source_16 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_10, tmp_call_kw_1 );
    Py_DECREF( tmp_called_10 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 988;
        goto frame_exception_exit_1;
    }
    assert( var_runner.object == NULL );
    var_runner.object = tmp_assign_source_16;

    tmp_assign_source_17 = PyList_New( 0 );
    if (var_msg.storage->object == NULL)
    {
        var_msg.storage->object = tmp_assign_source_17;
    }
    else
    {
        PyObject *old = var_msg.storage->object;
        var_msg.storage->object = tmp_assign_source_17;
        Py_DECREF( old );
    }
    tmp_cond_value_1 = par_raise_on_error.object;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216709 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 991;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 991;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_18 = MAKE_FUNCTION_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils( var_msg );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_18 );

        frame_function->f_lineno = 992;
        goto frame_exception_exit_1;
    }
    assert( var_out.object == NULL );
    var_out.object = tmp_assign_source_18;

    goto branch_end_2;
    branch_no_2:;
    tmp_assign_source_19 = Py_None;
    assert( var_out.object == NULL );
    var_out.object = INCREASE_REFCOUNT( tmp_assign_source_19 );

    branch_end_2:;
    tmp_iter_arg_2 = var_tests.object;

    tmp_assign_source_20 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 996;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_20;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_21 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_21 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 996;
            goto try_finally_handler_3;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_21;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_21;
        Py_DECREF( old );
    }
    tmp_assign_source_22 = tmp_for_loop_1__iter_value.object;

    if (var_test.object == NULL)
    {
        var_test.object = INCREASE_REFCOUNT( tmp_assign_source_22 );
    }
    else
    {
        PyObject *old = var_test.object;
        var_test.object = INCREASE_REFCOUNT( tmp_assign_source_22 );
        Py_DECREF( old );
    }
    tmp_source_name_15 = var_runner.object;

    if ( tmp_source_name_15 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216769 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 997;
        goto try_finally_handler_3;
    }

    tmp_called_11 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_run );
    if ( tmp_called_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 997;
        goto try_finally_handler_3;
    }
    tmp_call_pos_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = var_test.object;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    tmp_call_kw_2 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = var_out.object;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_called_11 );
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 7983 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 997;
        goto try_finally_handler_3;
    }

    tmp_dict_key_1 = const_str_plain_out;
    PyDict_SetItem( tmp_call_kw_2, tmp_dict_key_1, tmp_dict_value_1 );
    frame_function->f_lineno = 997;
    tmp_unused = CALL_FUNCTION( tmp_called_11, tmp_call_pos_1, tmp_call_kw_2 );
    Py_DECREF( tmp_called_11 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 997;
        goto try_finally_handler_3;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 996;
        goto try_finally_handler_3;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto frame_exception_exit_1;
    }

    goto finally_end_3;
    finally_end_3:;
    // Tried code
    tmp_cond_value_2 = NULL;
    // Tried code
    tmp_source_name_16 = var_runner.object;

    if ( tmp_source_name_16 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216769 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 999;
        goto try_finally_handler_5;
    }

    tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_failures );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 999;
        goto try_finally_handler_5;
    }
    tmp_compexpr_right_1 = const_int_0;
    tmp_assign_source_23 = RICH_COMPARE_GT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 999;
        goto try_finally_handler_5;
    }
    assert( tmp_and_1__value_1.object == NULL );
    tmp_and_1__value_1.object = tmp_assign_source_23;

    tmp_cond_value_3 = tmp_and_1__value_1.object;

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 999;
        goto try_finally_handler_5;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_cond_value_2 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1.object );
        tmp_and_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_cond_value_2 = par_raise_on_error.object;

    if ( tmp_cond_value_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216709 ], 60, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 999;
        goto try_finally_handler_6;
    }

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto try_finally_handler_5;
    }

    goto finally_end_4;
    finally_end_4:;
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_cond_value_2 = tmp_and_1__value_1.object;

    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto try_finally_handler_4;
    }

    goto finally_end_5;
    finally_end_5:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 999;
        goto try_finally_handler_4;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_binop_left_1 = const_str_digest_545db4280f4804ea7fce15cd4682edc4;
    tmp_source_name_17 = const_str_newline;
    tmp_called_12 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_join );
    if ( tmp_called_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1000;
        goto try_finally_handler_4;
    }
    tmp_call_arg_element_12 = var_msg.storage->object;

    if ( tmp_call_arg_element_12 == NULL )
    {
        Py_DECREF( tmp_called_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1000;
        goto try_finally_handler_4;
    }

    frame_function->f_lineno = 1000;
    tmp_binop_right_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_12, tmp_call_arg_element_12 );
    Py_DECREF( tmp_called_12 );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1000;
        goto try_finally_handler_4;
    }
    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1000;
        goto try_finally_handler_4;
    }
    frame_function->f_lineno = 1000;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_1 );
    Py_DECREF( tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1000;
        goto try_finally_handler_4;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 1000;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_4;
    branch_no_3:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_4 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_1__value_1.object );
    tmp_and_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_4;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto frame_exception_exit_1;
    }

    goto finally_end_6;
    finally_end_6:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_doctest.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_doctest,
            var_doctest.object
        );

    }
    if ((var_imp.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_imp,
            var_imp.object
        );

    }
    if ((var_f.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_f,
            var_f.object
        );

    }
    if ((var_name.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_name,
            var_name.object
        );

    }
    if ((var_path.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_path,
            var_path.object
        );

    }
    if ((var_file.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_file,
            var_file.object
        );

    }
    if ((var_pathname.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_pathname,
            var_pathname.object
        );

    }
    if ((var_description.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_description,
            var_description.object
        );

    }
    if ((var_m.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_m,
            var_m.object
        );

    }
    if ((var_tests.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_tests,
            var_tests.object
        );

    }
    if ((var_runner.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_runner,
            var_runner.object
        );

    }
    if ((var_msg.storage != NULL && var_msg.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_msg,
            var_msg.storage->object
        );

    }
    if ((var_out.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_out,
            var_out.object
        );

    }
    if ((var_test.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_test,
            var_test.object
        );

    }
    if ((par_filename.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_filename,
            par_filename.object
        );

    }
    if ((par_raise_on_error.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_raise_on_error,
            par_raise_on_error.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_23_rundocs_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_filename = NULL;
    PyObject *_python_par_raise_on_error = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "rundocs() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_filename == key )
            {
                assert( _python_par_filename == NULL );
                _python_par_filename = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_raise_on_error == key )
            {
                assert( _python_par_raise_on_error == NULL );
                _python_par_raise_on_error = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_filename, key ) == 1 )
            {
                assert( _python_par_filename == NULL );
                _python_par_filename = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_raise_on_error, key ) == 1 )
            {
                assert( _python_par_raise_on_error == NULL );
                _python_par_raise_on_error = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "rundocs() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_filename != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_filename = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_filename == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_filename = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_raise_on_error != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_raise_on_error = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_raise_on_error == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_raise_on_error = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_filename == NULL || _python_par_raise_on_error == NULL ))
    {
        PyObject *values[] = { _python_par_filename, _python_par_raise_on_error };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_23_rundocs_of_module_numpy$testing$utils( self, _python_par_filename, _python_par_raise_on_error );

error_exit:;

    Py_XDECREF( _python_par_filename );
    Py_XDECREF( _python_par_raise_on_error );

    return NULL;
}

static PyObject *dparse_function_23_rundocs_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_23_rundocs_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_23_rundocs_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_s )
{
    // The context of the function.
    struct _context_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils_t *_python_context = (struct _context_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalVariable par_s; par_s.object = _python_par_s;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_ff05b69aaa377c8c64afecd25d559dd7, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = _python_context->closure_msg.storage->object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 992;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_append );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 992;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = par_s.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 992;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 992;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 992;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((_python_context->closure_msg.storage != NULL && _python_context->closure_msg.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_msg,
            _python_context->closure_msg.storage->object
        );

    }
    if ((par_s.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_s,
            par_s.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_s = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_s == key )
            {
                assert( _python_par_s == NULL );
                _python_par_s = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_s, key ) == 1 )
            {
                assert( _python_par_s == NULL );
                _python_par_s = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "<lambda>() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_s != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_s = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_s == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_s = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_s == NULL ))
    {
        PyObject *values[] = { _python_par_s };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils( self, _python_par_s );

error_exit:;

    Py_XDECREF( _python_par_s );

    return NULL;
}

static PyObject *dparse_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_24_raises_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_args; par_args.object = _python_par_args;
    PyObjectLocalVariable par_kwargs; par_kwargs.object = _python_par_kwargs;
    PyObjectLocalVariable var_nose;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_31e0e165074c7b7f129ad77cbef82e81, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_import_nose );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_import_nose );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 212807 ], 40, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1004;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1004;
    tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS( tmp_called_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1004;
        goto frame_exception_exit_1;
    }
    assert( var_nose.object == NULL );
    var_nose.object = tmp_assign_source_1;

    tmp_source_name_2 = var_nose.object;

    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tools );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1005;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_raises );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1005;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_args.object;

    if ( tmp_dircall_arg2_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5435 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1005;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg3_1 = par_kwargs.object;

    if ( tmp_dircall_arg3_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1005;
        goto frame_exception_exit_1;
    }

    tmp_return_value = impl_function_2_complex_call_helper_star_list_star_dict_of_module___internal__( tmp_dircall_arg1_1, INCREASE_REFCOUNT( tmp_dircall_arg2_1 ), INCREASE_REFCOUNT( tmp_dircall_arg3_1 ) );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1005;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_nose.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_nose,
            var_nose.object
        );

    }
    if ((par_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_args,
            par_args.object
        );

    }
    if ((par_kwargs.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kwargs,
            par_kwargs.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_24_raises_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "raises() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "raises() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "raises() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 0 )
    {
        _python_par_args = PyTuple_New( args_size - 0 );

        for( Py_ssize_t i = 0; i < args_size - 0; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[0+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( const_tuple_empty );
    }


    return impl_function_24_raises_of_module_numpy$testing$utils( self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_24_raises_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_24_raises_of_module_numpy$testing$utils( self, MAKE_TUPLE( &args[ 0 ], size > 0 ? size-0 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_24_raises_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_25_assert_raises_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_args; par_args.object = _python_par_args;
    PyObjectLocalVariable par_kwargs; par_kwargs.object = _python_par_kwargs;
    PyObjectLocalVariable var_nose;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_ecf94f569795382247dda0e49451dbfb, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_import_nose );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_import_nose );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 212807 ], 40, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1019;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1019;
    tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS( tmp_called_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1019;
        goto frame_exception_exit_1;
    }
    assert( var_nose.object == NULL );
    var_nose.object = tmp_assign_source_1;

    tmp_source_name_2 = var_nose.object;

    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tools );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1020;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_assert_raises );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1020;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_args.object;

    if ( tmp_dircall_arg2_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5435 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1020;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg3_1 = par_kwargs.object;

    if ( tmp_dircall_arg3_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1020;
        goto frame_exception_exit_1;
    }

    tmp_return_value = impl_function_2_complex_call_helper_star_list_star_dict_of_module___internal__( tmp_dircall_arg1_1, INCREASE_REFCOUNT( tmp_dircall_arg2_1 ), INCREASE_REFCOUNT( tmp_dircall_arg3_1 ) );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1020;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_nose.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_nose,
            var_nose.object
        );

    }
    if ((par_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_args,
            par_args.object
        );

    }
    if ((par_kwargs.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kwargs,
            par_kwargs.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_25_assert_raises_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "assert_raises() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "assert_raises() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "assert_raises() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 0 )
    {
        _python_par_args = PyTuple_New( args_size - 0 );

        for( Py_ssize_t i = 0; i < args_size - 0; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[0+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( const_tuple_empty );
    }


    return impl_function_25_assert_raises_of_module_numpy$testing$utils( self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_25_assert_raises_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_25_assert_raises_of_module_numpy$testing$utils( self, MAKE_TUPLE( &args[ 0 ], size > 0 ? size-0 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_25_assert_raises_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_26_decorate_methods_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_cls, PyObject *_python_par_decorator, PyObject *_python_par_testmatch )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_cls; par_cls.object = _python_par_cls;
    PyObjectLocalVariable par_decorator; par_decorator.object = _python_par_decorator;
    PyObjectLocalVariable par_testmatch; par_testmatch.object = _python_par_testmatch;
    PyObjectLocalVariable var_cls_attr;
    PyObjectLocalVariable var_isfunction;
    PyObjectLocalVariable var__m;
    PyObjectLocalVariable var_methods;
    PyObjectLocalVariable var_function;
    PyObjectLocalVariable var_funcname;
    PyObjectTempVariable tmp_listcontr_1__listcontr_iter;
    PyObjectTempVariable tmp_listcontr_1__listcontr_result;
    PyObjectTempVariable tmp_listcontr_1__iter_value_0;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_and_1__value_1;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *tmp_append_to_1;
    PyObject *tmp_append_value_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_hasattr_attr_1;
    PyObject *tmp_hasattr_source_1;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_import_name_from_1;
    bool tmp_is_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_setattr_attr_1;
    PyObject *tmp_setattr_target_1;
    PyObject *tmp_setattr_value_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    int tmp_tried_lineno_4;
    PyObject *tmp_unary_arg_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_bcfed848efdc45ae43549dcf2d4a0781, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_testmatch.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216821 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1045;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if (tmp_is_1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4450 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1046;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_compile );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1046;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_1 = const_str_digest_a7eecd7dd1f310504bfa1aad4f8c2ff9;
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6460 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1046;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_sep );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 1046;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 1046;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1046;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1046;
        goto frame_exception_exit_1;
    }
    if (par_testmatch.object == NULL)
    {
        par_testmatch.object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = par_testmatch.object;
        par_testmatch.object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4450 ], 31, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1048;
        goto frame_exception_exit_1;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_compile );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1048;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_2 = par_testmatch.object;

    if ( tmp_call_arg_element_2 == NULL )
    {
        Py_DECREF( tmp_called_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216821 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1048;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1048;
    tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1048;
        goto frame_exception_exit_1;
    }
    if (par_testmatch.object == NULL)
    {
        par_testmatch.object = tmp_assign_source_2;
    }
    else
    {
        PyObject *old = par_testmatch.object;
        par_testmatch.object = tmp_assign_source_2;
        Py_DECREF( old );
    }
    branch_end_1:;
    tmp_source_name_4 = par_cls.object;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 16971 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1049;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_3 = LOOKUP_ATTRIBUTE_DICT_SLOT( tmp_source_name_4 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1049;
        goto frame_exception_exit_1;
    }
    assert( var_cls_attr.object == NULL );
    var_cls_attr.object = tmp_assign_source_3;

    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_cls_attr.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_cls_attr,
            var_cls_attr.object
        );

    }
    if ((var_isfunction.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_isfunction,
            var_isfunction.object
        );

    }
    if ((var__m.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain__m,
            var__m.object
        );

    }
    if ((var_methods.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_methods,
            var_methods.object
        );

    }
    if ((var_function.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_function,
            var_function.object
        );

    }
    if ((var_funcname.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_funcname,
            var_funcname.object
        );

    }
    if ((par_cls.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_cls,
            par_cls.object
        );

    }
    if ((par_decorator.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_decorator,
            par_decorator.object
        );

    }
    if ((par_testmatch.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_testmatch,
            par_testmatch.object
        );

    }
    frame_function->f_lineno = 1052;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_plain_inspect, tmp_import_globals_1, tmp_import_locals_1, const_tuple_str_plain_isfunction_tuple, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1052;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_4 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_isfunction );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1052;
        goto frame_exception_exit_1;
    }
    assert( var_isfunction.object == NULL );
    var_isfunction.object = tmp_assign_source_4;

    // Tried code
    tmp_assign_source_5 = NULL;
    // Tried code
    tmp_source_name_5 = var_cls_attr.object;

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_values );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1054;
        goto try_finally_handler_2;
    }
    frame_function->f_lineno = 1054;
    tmp_iter_arg_1 = CALL_FUNCTION_NO_ARGS( tmp_called_3 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1054;
        goto try_finally_handler_2;
    }
    tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1054;
        goto try_finally_handler_2;
    }
    assert( tmp_listcontr_1__listcontr_iter.object == NULL );
    tmp_listcontr_1__listcontr_iter.object = tmp_assign_source_6;

    tmp_assign_source_7 = PyList_New( 0 );
    assert( tmp_listcontr_1__listcontr_result.object == NULL );
    tmp_listcontr_1__listcontr_result.object = tmp_assign_source_7;

    loop_start_1:;
    tmp_next_source_1 = tmp_listcontr_1__listcontr_iter.object;

    tmp_assign_source_8 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_8 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1054;
            goto try_finally_handler_2;
        }
    }

    if (tmp_listcontr_1__iter_value_0.object == NULL)
    {
        tmp_listcontr_1__iter_value_0.object = tmp_assign_source_8;
    }
    else
    {
        PyObject *old = tmp_listcontr_1__iter_value_0.object;
        tmp_listcontr_1__iter_value_0.object = tmp_assign_source_8;
        Py_DECREF( old );
    }
    tmp_assign_source_9 = tmp_listcontr_1__iter_value_0.object;

    if (var__m.object == NULL)
    {
        var__m.object = INCREASE_REFCOUNT( tmp_assign_source_9 );
    }
    else
    {
        PyObject *old = var__m.object;
        var__m.object = INCREASE_REFCOUNT( tmp_assign_source_9 );
        Py_DECREF( old );
    }
    tmp_called_4 = var_isfunction.object;

    if ( tmp_called_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 211248 ], 56, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1054;
        goto try_finally_handler_2;
    }

    tmp_call_arg_element_3 = var__m.object;

    frame_function->f_lineno = 1054;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_3 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1054;
        goto try_finally_handler_2;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        frame_function->f_lineno = 1054;
        goto try_finally_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_append_to_1 = tmp_listcontr_1__listcontr_result.object;

    tmp_append_value_1 = var__m.object;

    tmp_res = PyList_Append( tmp_append_to_1, tmp_append_value_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1054;
        goto try_finally_handler_2;
    }
    tmp_unused = Py_None;
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1054;
        goto try_finally_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    tmp_assign_source_5 = tmp_listcontr_1__listcontr_result.object;

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_1__iter_value_0.object );
    tmp_listcontr_1__iter_value_0.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_1;
    }

    goto finally_end_1;
    finally_end_1:;
    assert( var_methods.object == NULL );
    var_methods.object = INCREASE_REFCOUNT( tmp_assign_source_5 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_listcontr_1__listcontr_result.object );
    tmp_listcontr_1__listcontr_result.object = NULL;

    Py_XDECREF( tmp_listcontr_1__listcontr_iter.object );
    tmp_listcontr_1__listcontr_iter.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto frame_exception_exit_1;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_iter_arg_2 = var_methods.object;

    if ( tmp_iter_arg_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216876 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1055;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_10 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1055;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_10;

    // Tried code
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_11 = ITERATOR_NEXT( tmp_next_source_2 );
    if (tmp_assign_source_11 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_2;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1055;
            goto try_finally_handler_3;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_11;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_11;
        Py_DECREF( old );
    }
    tmp_assign_source_12 = tmp_for_loop_1__iter_value.object;

    if (var_function.object == NULL)
    {
        var_function.object = INCREASE_REFCOUNT( tmp_assign_source_12 );
    }
    else
    {
        PyObject *old = var_function.object;
        var_function.object = INCREASE_REFCOUNT( tmp_assign_source_12 );
        Py_DECREF( old );
    }
    // Tried block of try/except
    tmp_hasattr_source_1 = var_function.object;

    tmp_hasattr_attr_1 = const_str_plain_compat_func_name;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_1, tmp_hasattr_attr_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1057;
        goto try_except_handler_1;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_6 = var_function.object;

    tmp_assign_source_13 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_compat_func_name );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1058;
        goto try_except_handler_1;
    }
    if (var_funcname.object == NULL)
    {
        var_funcname.object = tmp_assign_source_13;
    }
    else
    {
        PyObject *old = var_funcname.object;
        var_funcname.object = tmp_assign_source_13;
        Py_DECREF( old );
    }
    goto branch_end_3;
    branch_no_3:;
    tmp_source_name_7 = var_function.object;

    tmp_assign_source_14 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain___name__ );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1060;
        goto try_except_handler_1;
    }
    if (var_funcname.object == NULL)
    {
        var_funcname.object = tmp_assign_source_14;
    }
    else
    {
        PyObject *old = var_funcname.object;
        var_funcname.object = tmp_assign_source_14;
        Py_DECREF( old );
    }
    branch_end_3:;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_AttributeError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1061;
        goto try_finally_handler_3;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    goto loop_start_2;
    goto branch_end_4;
    branch_no_4:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_3;
    branch_end_4:;
    try_except_end_1:;
    // Tried code
    tmp_cond_value_2 = NULL;
    // Tried code
    tmp_source_name_8 = par_testmatch.object;

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216821 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1064;
        goto try_finally_handler_5;
    }

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_search );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1064;
        goto try_finally_handler_5;
    }
    tmp_call_arg_element_4 = var_funcname.object;

    if ( tmp_call_arg_element_4 == NULL )
    {
        Py_DECREF( tmp_called_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 191635 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1064;
        goto try_finally_handler_5;
    }

    frame_function->f_lineno = 1064;
    tmp_assign_source_15 = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1064;
        goto try_finally_handler_5;
    }
    if (tmp_and_1__value_1.object == NULL)
    {
        tmp_and_1__value_1.object = tmp_assign_source_15;
    }
    else
    {
        PyObject *old = tmp_and_1__value_1.object;
        tmp_and_1__value_1.object = tmp_assign_source_15;
        Py_DECREF( old );
    }
    tmp_cond_value_3 = tmp_and_1__value_1.object;

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1064;
        goto try_finally_handler_5;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_cond_value_2 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1.object );
        tmp_and_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_source_name_9 = var_funcname.object;

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 191635 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1064;
        goto try_finally_handler_6;
    }

    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_startswith );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1064;
        goto try_finally_handler_6;
    }
    tmp_call_arg_element_5 = const_str_plain__;
    frame_function->f_lineno = 1064;
    tmp_unary_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_5 );
    Py_DECREF( tmp_called_6 );
    if ( tmp_unary_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1064;
        goto try_finally_handler_6;
    }
    tmp_cond_value_2 = UNARY_OPERATION( UNARY_NOT, tmp_unary_arg_1 );
    Py_DECREF( tmp_unary_arg_1 );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1064;
        goto try_finally_handler_6;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto try_finally_handler_5;
    }

    goto finally_end_3;
    finally_end_3:;
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_cond_value_2 = tmp_and_1__value_1.object;

    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto try_finally_handler_4;
    }

    goto finally_end_4;
    finally_end_4:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1064;
        goto try_finally_handler_4;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_setattr_target_1 = par_cls.object;

    if ( tmp_setattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 16971 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1065;
        goto try_finally_handler_4;
    }

    tmp_setattr_attr_1 = var_funcname.object;

    if ( tmp_setattr_attr_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 191635 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1065;
        goto try_finally_handler_4;
    }

    tmp_called_7 = par_decorator.object;

    if ( tmp_called_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216929 ], 55, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1065;
        goto try_finally_handler_4;
    }

    tmp_call_arg_element_6 = var_function.object;

    if ( tmp_call_arg_element_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25418 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1065;
        goto try_finally_handler_4;
    }

    frame_function->f_lineno = 1065;
    tmp_setattr_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_6 );
    if ( tmp_setattr_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1065;
        goto try_finally_handler_4;
    }
    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
    Py_DECREF( tmp_setattr_value_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1065;
        goto try_finally_handler_4;
    }
    branch_no_5:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    Py_XDECREF( tmp_and_1__value_1.object );
    tmp_and_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto try_finally_handler_3;
    }

    goto finally_end_5;
    finally_end_5:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1055;
        goto try_finally_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_4 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_4;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto frame_exception_exit_1;
    }

    goto finally_end_6;
    finally_end_6:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_cls_attr.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_cls_attr,
            var_cls_attr.object
        );

    }
    if ((var_isfunction.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_isfunction,
            var_isfunction.object
        );

    }
    if ((var__m.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__m,
            var__m.object
        );

    }
    if ((var_methods.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_methods,
            var_methods.object
        );

    }
    if ((var_function.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_function,
            var_function.object
        );

    }
    if ((var_funcname.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_funcname,
            var_funcname.object
        );

    }
    if ((par_cls.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_cls,
            par_cls.object
        );

    }
    if ((par_decorator.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_decorator,
            par_decorator.object
        );

    }
    if ((par_testmatch.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_testmatch,
            par_testmatch.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_26_decorate_methods_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_cls = NULL;
    PyObject *_python_par_decorator = NULL;
    PyObject *_python_par_testmatch = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "decorate_methods() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_cls == key )
            {
                assert( _python_par_cls == NULL );
                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_decorator == key )
            {
                assert( _python_par_decorator == NULL );
                _python_par_decorator = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_testmatch == key )
            {
                assert( _python_par_testmatch == NULL );
                _python_par_testmatch = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_cls, key ) == 1 )
            {
                assert( _python_par_cls == NULL );
                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_decorator, key ) == 1 )
            {
                assert( _python_par_decorator == NULL );
                _python_par_decorator = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_testmatch, key ) == 1 )
            {
                assert( _python_par_testmatch == NULL );
                _python_par_testmatch = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "decorate_methods() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_cls == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_cls = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_decorator != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_decorator = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_decorator == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_decorator = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_testmatch != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_testmatch = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_testmatch == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_testmatch = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_cls == NULL || _python_par_decorator == NULL || _python_par_testmatch == NULL ))
    {
        PyObject *values[] = { _python_par_cls, _python_par_decorator, _python_par_testmatch };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_26_decorate_methods_of_module_numpy$testing$utils( self, _python_par_cls, _python_par_decorator, _python_par_testmatch );

error_exit:;

    Py_XDECREF( _python_par_cls );
    Py_XDECREF( _python_par_decorator );
    Py_XDECREF( _python_par_testmatch );

    return NULL;
}

static PyObject *dparse_function_26_decorate_methods_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_26_decorate_methods_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_26_decorate_methods_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_27_measure_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_code_str, PyObject *_python_par_times, PyObject *_python_par_label )
{
    // No context is used.

    // Local variable declarations.
    // Locals dictionary setup.
    PyObject *locals_dict = PyDict_New();

    PyObjectLocalVariable par_code_str; par_code_str.object = _python_par_code_str;
    PyObjectLocalVariable par_times; par_times.object = _python_par_times;
    PyObjectLocalVariable par_label; par_label.object = _python_par_label;
    PyObjectLocalVariable var_frame;
    PyObjectLocalVariable var_locs;
    PyObjectLocalVariable var_globs;
    PyObjectLocalVariable var_code;
    PyObjectLocalVariable var_i;
    PyObjectLocalVariable var_elapsed;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_inplace_assign_1__inplace_start;
    PyObjectTempVariable tmp_inplace_assign_1__inplace_end;
    PyObjectTempVariable tmp_exec_1__globals;
    PyObjectTempVariable tmp_exec_1__locals;
    PyObjectTempVariable tmp_exec_1__source;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_left_3;
    PyObject *tmp_binop_left_4;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_binop_right_3;
    PyObject *tmp_binop_right_4;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    int tmp_cmp_Lt_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compile_filename_1;
    PyObject *tmp_compile_mode_1;
    PyObject *tmp_compile_source_1;
    PyObject *tmp_eval_globals_1;
    PyObject *tmp_eval_locals_1;
    PyObject *tmp_eval_source_1;
    PyObject *tmp_exec_compiled_1;
    PyObject *tmp_exec_result_1;
    PyObject *tmp_frame_locals;
    bool tmp_is_1;
    bool tmp_is_2;
    bool tmp_is_3;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    bool tmp_isnot_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iterator_attempt_1;
    PyObject *tmp_iterator_name_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_aa5f47319df891bdf4601a66b2ce70e7, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = PyDict_GetItem( locals_dict, const_str_plain_sys );

    if ( tmp_source_name_1 == NULL )
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_sys );
        if (unlikely( tmp_source_name_1 == NULL ))
        {
            tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1102;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__getframe );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1102;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_int_pos_1;
    frame_function->f_lineno = 1102;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1102;
        goto frame_exception_exit_1;
    }
    assert( var_frame.object == NULL );
    var_frame.object = tmp_assign_source_1;

    // Tried code
    tmp_iter_arg_1 = PyTuple_New( 2 );
    tmp_source_name_2 = var_frame.object;

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_f_locals );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_iter_arg_1 );

        frame_function->f_lineno = 1103;
        goto try_finally_handler_1;
    }
    PyTuple_SET_ITEM( tmp_iter_arg_1, 0, tmp_tuple_element_1 );
    tmp_source_name_3 = var_frame.object;

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_f_globals );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_iter_arg_1 );

        frame_function->f_lineno = 1103;
        goto try_finally_handler_1;
    }
    PyTuple_SET_ITEM( tmp_iter_arg_1, 1, tmp_tuple_element_1 );
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1103;
        goto try_finally_handler_1;
    }
    assert( tmp_tuple_unpack_1__source_iter.object == NULL );
    tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_2;

    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_3 = UNPACK_PARAMETER_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1103;
        goto try_finally_handler_1;
    }
    assert( tmp_tuple_unpack_1__element_1.object == NULL );
    tmp_tuple_unpack_1__element_1.object = tmp_assign_source_3;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_4 = UNPACK_PARAMETER_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1103;
        goto try_finally_handler_1;
    }
    assert( tmp_tuple_unpack_1__element_2.object == NULL );
    tmp_tuple_unpack_1__element_2.object = tmp_assign_source_4;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_1 ); assert( PyIter_Check( tmp_iterator_name_1 ) );

    tmp_iterator_attempt_1 = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt_1 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_1;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_1 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_1;
    }
    tmp_assign_source_5 = tmp_tuple_unpack_1__element_1.object;

    assert( var_locs.object == NULL );
    var_locs.object = INCREASE_REFCOUNT( tmp_assign_source_5 );

    tmp_assign_source_6 = tmp_tuple_unpack_1__element_2.object;

    assert( var_globs.object == NULL );
    var_globs.object = INCREASE_REFCOUNT( tmp_assign_source_6 );

    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter.object );
    tmp_tuple_unpack_1__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1.object );
    tmp_tuple_unpack_1__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2.object );
    tmp_tuple_unpack_1__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_compile_source_1 = par_code_str.object;

    if ( tmp_compile_source_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216984 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1105;
        goto frame_exception_exit_1;
    }

    tmp_binop_left_1 = const_str_digest_7d7c3cb8a9268dee05555a28c7406eeb;
    tmp_binop_right_1 = par_label.object;

    if ( tmp_binop_right_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 212907 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1106;
        goto frame_exception_exit_1;
    }

    tmp_compile_filename_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    if ( tmp_compile_filename_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1106;
        goto frame_exception_exit_1;
    }
    tmp_compile_mode_1 = const_str_plain_exec;
    tmp_assign_source_7 = COMPILE_CODE( tmp_compile_source_1, tmp_compile_filename_1, tmp_compile_mode_1, NULL, NULL );
    Py_DECREF( tmp_compile_filename_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1105;
        goto frame_exception_exit_1;
    }
    assert( var_code.object == NULL );
    var_code.object = tmp_assign_source_7;

    tmp_assign_source_8 = const_int_0;
    assert( var_i.object == NULL );
    var_i.object = INCREASE_REFCOUNT( tmp_assign_source_8 );

    tmp_called_2 = PyDict_GetItem( locals_dict, const_str_plain_jiffies );

    if ( tmp_called_2 == NULL )
    {
        tmp_called_2 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_jiffies );
        if (unlikely( tmp_called_2 == NULL ))
        {
            tmp_called_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_jiffies );
        }
    }

    if ( tmp_called_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 148696 ], 29, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1109;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1109;
    tmp_assign_source_9 = CALL_FUNCTION_NO_ARGS( tmp_called_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1109;
        goto frame_exception_exit_1;
    }
    assert( var_elapsed.object == NULL );
    var_elapsed.object = tmp_assign_source_9;

    loop_start_1:;
    tmp_compare_left_1 = var_i.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1110;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = par_times.object;

    if ( tmp_compare_right_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217038 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1110;
        goto frame_exception_exit_1;
    }

    tmp_cmp_Lt_1 = RICH_COMPARE_BOOL_LT( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Lt_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1110;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Lt_1 == 1)
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    goto loop_end_1;
    branch_no_1:;
    tmp_assign_source_10 = var_i.object;

    if ( tmp_assign_source_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1111;
        goto frame_exception_exit_1;
    }

    if (tmp_inplace_assign_1__inplace_start.object == NULL)
    {
        tmp_inplace_assign_1__inplace_start.object = INCREASE_REFCOUNT( tmp_assign_source_10 );
    }
    else
    {
        PyObject *old = tmp_inplace_assign_1__inplace_start.object;
        tmp_inplace_assign_1__inplace_start.object = INCREASE_REFCOUNT( tmp_assign_source_10 );
        Py_DECREF( old );
    }
    // Tried code
    tmp_binop_left_2 = tmp_inplace_assign_1__inplace_start.object;

    tmp_binop_right_2 = const_int_pos_1;
    tmp_assign_source_11 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_binop_left_2, tmp_binop_right_2 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1111;
        goto try_finally_handler_2;
    }
    if (tmp_inplace_assign_1__inplace_end.object == NULL)
    {
        tmp_inplace_assign_1__inplace_end.object = tmp_assign_source_11;
    }
    else
    {
        PyObject *old = tmp_inplace_assign_1__inplace_end.object;
        tmp_inplace_assign_1__inplace_end.object = tmp_assign_source_11;
        Py_DECREF( old );
    }
    tmp_compare_left_2 = tmp_inplace_assign_1__inplace_start.object;

    tmp_compare_right_2 = tmp_inplace_assign_1__inplace_end.object;

    tmp_isnot_1 = ( tmp_compare_left_2 != tmp_compare_right_2 );
    if (tmp_isnot_1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_12 = tmp_inplace_assign_1__inplace_end.object;

    if (var_i.object == NULL)
    {
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_12 );
    }
    else
    {
        PyObject *old = var_i.object;
        var_i.object = INCREASE_REFCOUNT( tmp_assign_source_12 );
        Py_DECREF( old );
    }
    branch_no_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    tmp_result = tmp_inplace_assign_1__inplace_start.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_inplace_assign_1__inplace_start.object );
        tmp_inplace_assign_1__inplace_start.object = NULL;
    }

    assert( tmp_result != false );
    Py_XDECREF( tmp_inplace_assign_1__inplace_end.object );
    tmp_inplace_assign_1__inplace_end.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto frame_exception_exit_1;
    }

    goto finally_end_2;
    finally_end_2:;
    // Tried code
    tmp_assign_source_13 = var_globs.object;

    if ( tmp_assign_source_13 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 210982 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1112;
        goto try_finally_handler_3;
    }

    if (tmp_exec_1__globals.object == NULL)
    {
        tmp_exec_1__globals.object = INCREASE_REFCOUNT( tmp_assign_source_13 );
    }
    else
    {
        PyObject *old = tmp_exec_1__globals.object;
        tmp_exec_1__globals.object = INCREASE_REFCOUNT( tmp_assign_source_13 );
        Py_DECREF( old );
    }
    tmp_assign_source_14 = var_locs.object;

    if ( tmp_assign_source_14 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217089 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1112;
        goto try_finally_handler_3;
    }

    if (tmp_exec_1__locals.object == NULL)
    {
        tmp_exec_1__locals.object = INCREASE_REFCOUNT( tmp_assign_source_14 );
    }
    else
    {
        PyObject *old = tmp_exec_1__locals.object;
        tmp_exec_1__locals.object = INCREASE_REFCOUNT( tmp_assign_source_14 );
        Py_DECREF( old );
    }
    tmp_compare_left_3 = tmp_exec_1__locals.object;

    tmp_compare_right_3 = Py_None;
    tmp_is_1 = ( tmp_compare_left_3 == tmp_compare_right_3 );
    if (tmp_is_1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_compare_left_4 = tmp_exec_1__globals.object;

    tmp_compare_right_4 = Py_None;
    tmp_is_2 = ( tmp_compare_left_4 == tmp_compare_right_4 );
    if (tmp_is_2)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_assign_source_15 = INCREASE_REFCOUNT( locals_dict );
    if ((var_frame.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_15,
            const_str_plain_frame,
            var_frame.object
        );

    }
    if ((var_locs.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_15,
            const_str_plain_locs,
            var_locs.object
        );

    }
    if ((var_globs.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_15,
            const_str_plain_globs,
            var_globs.object
        );

    }
    if ((var_code.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_15,
            const_str_plain_code,
            var_code.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_15,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((var_elapsed.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_15,
            const_str_plain_elapsed,
            var_elapsed.object
        );

    }
    if ((par_code_str.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_15,
            const_str_plain_code_str,
            par_code_str.object
        );

    }
    if ((par_times.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_15,
            const_str_plain_times,
            par_times.object
        );

    }
    if ((par_label.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_15,
            const_str_plain_label,
            par_label.object
        );

    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_assign_source_15 = tmp_exec_1__globals.object;

    Py_INCREF( tmp_assign_source_15 );
    condexpr_end_1:;
    assert( tmp_exec_1__locals.object != NULL );
    {
        PyObject *old = tmp_exec_1__locals.object;
        tmp_exec_1__locals.object = tmp_assign_source_15;
        Py_DECREF( old );
    }

    branch_no_3:;
    tmp_compare_left_5 = tmp_exec_1__globals.object;

    tmp_compare_right_5 = Py_None;
    tmp_is_3 = ( tmp_compare_left_5 == tmp_compare_right_5 );
    if (tmp_is_3)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_assign_source_16 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    assert( tmp_exec_1__globals.object != NULL );
    {
        PyObject *old = tmp_exec_1__globals.object;
        tmp_exec_1__globals.object = INCREASE_REFCOUNT( tmp_assign_source_16 );
        Py_DECREF( old );
    }

    branch_no_4:;
    tmp_assign_source_17 = var_code.object;

    if ( tmp_assign_source_17 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25569 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1112;
        goto try_finally_handler_3;
    }

    if (tmp_exec_1__source.object == NULL)
    {
        tmp_exec_1__source.object = INCREASE_REFCOUNT( tmp_assign_source_17 );
    }
    else
    {
        PyObject *old = tmp_exec_1__source.object;
        tmp_exec_1__source.object = INCREASE_REFCOUNT( tmp_assign_source_17 );
        Py_DECREF( old );
    }
    tmp_isinstance_inst_1 = tmp_exec_1__source.object;

    tmp_isinstance_cls_1 = (PyObject *)&PyFile_Type;
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1112;
        goto try_finally_handler_3;
    }
    if (tmp_res == 1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_source_name_4 = tmp_exec_1__source.object;

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_read );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1112;
        goto try_finally_handler_3;
    }
    frame_function->f_lineno = 1112;
    tmp_assign_source_18 = CALL_FUNCTION_NO_ARGS( tmp_called_3 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1112;
        goto try_finally_handler_3;
    }
    assert( tmp_exec_1__source.object != NULL );
    {
        PyObject *old = tmp_exec_1__source.object;
        tmp_exec_1__source.object = tmp_assign_source_18;
        Py_DECREF( old );
    }

    branch_no_5:;
    tmp_eval_source_1 = tmp_exec_1__source.object;

    tmp_eval_globals_1 = tmp_exec_1__globals.object;

    tmp_eval_locals_1 = tmp_exec_1__locals.object;

    tmp_exec_compiled_1 = COMPILE_CODE( tmp_eval_source_1, const_str_angle_string, const_str_plain_exec, NULL, NULL );
    if ( tmp_exec_compiled_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1112;
        goto try_finally_handler_3;
    }
    tmp_exec_result_1 = EVAL_CODE( tmp_exec_compiled_1, tmp_eval_globals_1, tmp_eval_locals_1 );
    Py_DECREF( tmp_exec_compiled_1 );
    if ( tmp_exec_result_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1112;
        goto try_finally_handler_3;
    }
    Py_DECREF( tmp_exec_result_1 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_function->f_lineno;
    tmp_result = tmp_exec_1__globals.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_exec_1__globals.object );
        tmp_exec_1__globals.object = NULL;
    }

    assert( tmp_result != false );
    tmp_result = tmp_exec_1__locals.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_exec_1__locals.object );
        tmp_exec_1__locals.object = NULL;
    }

    assert( tmp_result != false );
    Py_XDECREF( tmp_exec_1__source.object );
    tmp_exec_1__source.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto frame_exception_exit_1;
    }

    goto finally_end_3;
    finally_end_3:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1110;
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;
    tmp_called_4 = PyDict_GetItem( locals_dict, const_str_plain_jiffies );

    if ( tmp_called_4 == NULL )
    {
        tmp_called_4 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_jiffies );
        if (unlikely( tmp_called_4 == NULL ))
        {
            tmp_called_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_jiffies );
        }
    }

    if ( tmp_called_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 148696 ], 29, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1113;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1113;
    tmp_binop_left_3 = CALL_FUNCTION_NO_ARGS( tmp_called_4 );
    if ( tmp_binop_left_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1113;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_3 = var_elapsed.object;

    if ( tmp_binop_right_3 == NULL )
    {
        Py_DECREF( tmp_binop_left_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217139 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1113;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_19 = BINARY_OPERATION_SUB( tmp_binop_left_3, tmp_binop_right_3 );
    Py_DECREF( tmp_binop_left_3 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1113;
        goto frame_exception_exit_1;
    }
    if (var_elapsed.object == NULL)
    {
        var_elapsed.object = tmp_assign_source_19;
    }
    else
    {
        PyObject *old = var_elapsed.object;
        var_elapsed.object = tmp_assign_source_19;
        Py_DECREF( old );
    }
    tmp_binop_left_4 = const_float_0_01;
    tmp_binop_right_4 = var_elapsed.object;

    tmp_return_value = BINARY_OPERATION_MUL( tmp_binop_left_4, tmp_binop_right_4 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1114;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = INCREASE_REFCOUNT( locals_dict );
    if ((var_frame.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_frame,
            var_frame.object
        );

    }
    if ((var_locs.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_locs,
            var_locs.object
        );

    }
    if ((var_globs.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_globs,
            var_globs.object
        );

    }
    if ((var_code.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_code,
            var_code.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((var_elapsed.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_elapsed,
            var_elapsed.object
        );

    }
    if ((par_code_str.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_code_str,
            par_code_str.object
        );

    }
    if ((par_times.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_times,
            par_times.object
        );

    }
    if ((par_label.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_label,
            par_label.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
Py_DECREF( locals_dict );
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
Py_DECREF( locals_dict );
    return tmp_return_value;

}
static PyObject *fparse_function_27_measure_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_code_str = NULL;
    PyObject *_python_par_times = NULL;
    PyObject *_python_par_label = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "measure() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_code_str == key )
            {
                assert( _python_par_code_str == NULL );
                _python_par_code_str = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_times == key )
            {
                assert( _python_par_times == NULL );
                _python_par_times = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_label == key )
            {
                assert( _python_par_label == NULL );
                _python_par_label = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_code_str, key ) == 1 )
            {
                assert( _python_par_code_str == NULL );
                _python_par_code_str = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_times, key ) == 1 )
            {
                assert( _python_par_times == NULL );
                _python_par_times = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_label, key ) == 1 )
            {
                assert( _python_par_label == NULL );
                _python_par_label = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "measure() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_code_str != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_code_str = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_code_str == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_code_str = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_times != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_times = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_times == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_times = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_label != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_label = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_label == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_label = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_code_str == NULL || _python_par_times == NULL || _python_par_label == NULL ))
    {
        PyObject *values[] = { _python_par_code_str, _python_par_times, _python_par_label };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_27_measure_of_module_numpy$testing$utils( self, _python_par_code_str, _python_par_times, _python_par_label );

error_exit:;

    Py_XDECREF( _python_par_code_str );
    Py_XDECREF( _python_par_times );
    Py_XDECREF( _python_par_label );

    return NULL;
}

static PyObject *dparse_function_27_measure_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_27_measure_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_27_measure_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_28__assert_valid_refcount_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_op )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_op; par_op.object = _python_par_op;
    PyObjectLocalVariable var_np;
    PyObjectLocalVariable var_a;
    PyObjectLocalVariable var_b;
    PyObjectLocalVariable var_c;
    PyObjectLocalVariable var_i;
    PyObjectLocalVariable var_rc;
    PyObjectLocalVariable var_j;
    PyObjectLocalVariable var_d;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    int tmp_tried_lineno_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_e648e7d3ecc4ddb8d90e0f889ce3a745, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_np.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_np,
            var_np.object
        );

    }
    if ((var_a.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_a,
            var_a.object
        );

    }
    if ((var_b.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_b,
            var_b.object
        );

    }
    if ((var_c.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_c,
            var_c.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((var_rc.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_rc,
            var_rc.object
        );

    }
    if ((var_j.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_j,
            var_j.object
        );

    }
    if ((var_d.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_d,
            var_d.object
        );

    }
    if ((par_op.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_op,
            par_op.object
        );

    }
    frame_function->f_lineno = 1121;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_numpy, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1121;
        goto frame_exception_exit_1;
    }
    assert( var_np.object == NULL );
    var_np.object = tmp_assign_source_1;

    tmp_source_name_1 = var_np.object;

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_arange );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1122;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = const_int_pos_10000;
    frame_function->f_lineno = 1122;
    tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1122;
        goto frame_exception_exit_1;
    }
    assert( var_a.object == NULL );
    var_a.object = tmp_assign_source_2;

    tmp_source_name_3 = var_np.object;

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_arange );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1123;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_2 = const_int_pos_10000;
    frame_function->f_lineno = 1123;
    tmp_source_name_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1123;
        goto frame_exception_exit_1;
    }
    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_reshape );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1123;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_3 = const_int_pos_100;
    tmp_call_arg_element_4 = const_int_pos_100;
    frame_function->f_lineno = 1123;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_2, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1123;
        goto frame_exception_exit_1;
    }
    assert( var_b.object == NULL );
    var_b.object = tmp_assign_source_3;

    tmp_assign_source_4 = var_b.object;

    assert( var_c.object == NULL );
    var_c.object = INCREASE_REFCOUNT( tmp_assign_source_4 );

    tmp_assign_source_5 = const_int_pos_1;
    assert( var_i.object == NULL );
    var_i.object = INCREASE_REFCOUNT( tmp_assign_source_5 );

    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5370 ], 32, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1128;
        goto frame_exception_exit_1;
    }

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_getrefcount );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1128;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_5 = var_i.object;

    frame_function->f_lineno = 1128;
    tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_5 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1128;
        goto frame_exception_exit_1;
    }
    assert( var_rc.object == NULL );
    var_rc.object = tmp_assign_source_6;

    tmp_iter_arg_1 = const_tuple_cc0d7a281e580497181b34c5d19dd2ca_tuple;
    tmp_assign_source_7 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1129;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_7;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_8 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_8 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1129;
            goto try_finally_handler_1;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_8;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_8;
        Py_DECREF( old );
    }
    tmp_assign_source_9 = tmp_for_loop_1__iter_value.object;

    if (var_j.object == NULL)
    {
        var_j.object = INCREASE_REFCOUNT( tmp_assign_source_9 );
    }
    else
    {
        PyObject *old = var_j.object;
        var_j.object = INCREASE_REFCOUNT( tmp_assign_source_9 );
        Py_DECREF( old );
    }
    tmp_called_5 = par_op.object;

    if ( tmp_called_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 186322 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1130;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_6 = var_b.object;

    if ( tmp_call_arg_element_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5951 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1130;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_7 = var_c.object;

    if ( tmp_call_arg_element_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 100 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1130;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 1130;
    tmp_assign_source_10 = CALL_FUNCTION_WITH_ARGS2( tmp_called_5, tmp_call_arg_element_6, tmp_call_arg_element_7 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1130;
        goto try_finally_handler_1;
    }
    if (var_d.object == NULL)
    {
        var_d.object = tmp_assign_source_10;
    }
    else
    {
        PyObject *old = var_d.object;
        var_d.object = tmp_assign_source_10;
        Py_DECREF( old );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1129;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_called_6 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_ );

    if (unlikely( tmp_called_6 == NULL ))
    {
        tmp_called_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_assert_ );
    }

    if ( tmp_called_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217192 ], 36, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1132;
        goto frame_exception_exit_1;
    }

    tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_5 == NULL ))
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5370 ], 32, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1132;
        goto frame_exception_exit_1;
    }

    tmp_called_7 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_getrefcount );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1132;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_9 = var_i.object;

    if ( tmp_call_arg_element_9 == NULL )
    {
        Py_DECREF( tmp_called_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 2029 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1132;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1132;
    tmp_compexpr_left_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_9 );
    Py_DECREF( tmp_called_7 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1132;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_1 = var_rc.object;

    if ( tmp_compexpr_right_1 == NULL )
    {
        Py_DECREF( tmp_compexpr_left_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217228 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1132;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_8 = RICH_COMPARE_GE( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_call_arg_element_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1132;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1132;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_8 );
    Py_DECREF( tmp_call_arg_element_8 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1132;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_np.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_np,
            var_np.object
        );

    }
    if ((var_a.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_a,
            var_a.object
        );

    }
    if ((var_b.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_b,
            var_b.object
        );

    }
    if ((var_c.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_c,
            var_c.object
        );

    }
    if ((var_i.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_i,
            var_i.object
        );

    }
    if ((var_rc.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_rc,
            var_rc.object
        );

    }
    if ((var_j.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_j,
            var_j.object
        );

    }
    if ((var_d.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_d,
            var_d.object
        );

    }
    if ((par_op.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_op,
            par_op.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_28__assert_valid_refcount_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_op = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_assert_valid_refcount() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_op == key )
            {
                assert( _python_par_op == NULL );
                _python_par_op = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_op, key ) == 1 )
            {
                assert( _python_par_op == NULL );
                _python_par_op = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_assert_valid_refcount() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_op != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_op = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_op == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_op = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_op == NULL ))
    {
        PyObject *values[] = { _python_par_op };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_28__assert_valid_refcount_of_module_numpy$testing$utils( self, _python_par_op );

error_exit:;

    Py_XDECREF( _python_par_op );

    return NULL;
}

static PyObject *dparse_function_28__assert_valid_refcount_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_28__assert_valid_refcount_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_28__assert_valid_refcount_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_29_assert_allclose_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_actual, PyObject *_python_par_desired, PyObject *_python_par_rtol, PyObject *_python_par_atol, PyObject *_python_par_err_msg, PyObject *_python_par_verbose )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_actual; par_actual.object = _python_par_actual;
    PyObjectLocalVariable par_desired; par_desired.object = _python_par_desired;
    PyObjectSharedLocalVariable par_rtol; par_rtol.storage->object = _python_par_rtol;
    PyObjectSharedLocalVariable par_atol; par_atol.storage->object = _python_par_atol;
    PyObjectLocalVariable par_err_msg; par_err_msg.object = _python_par_err_msg;
    PyObjectLocalVariable par_verbose; par_verbose.object = _python_par_verbose;
    PyObjectSharedLocalVariable var_np;
    PyObjectLocalVariable var_compare;
    PyObjectLocalVariable var_header;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iterator_attempt_1;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_str_arg_1;
    int tmp_tried_lineno_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_05826378c8c06b42249e304e6f2e281b, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_np.storage != NULL && var_np.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_np,
            var_np.storage->object
        );

    }
    if ((var_compare.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_compare,
            var_compare.object
        );

    }
    if ((var_header.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_header,
            var_header.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_desired,
            par_desired.object
        );

    }
    if ((par_rtol.storage != NULL && par_rtol.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_rtol,
            par_rtol.storage->object
        );

    }
    if ((par_atol.storage != NULL && par_atol.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_atol,
            par_atol.storage->object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    frame_function->f_lineno = 1176;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_numpy, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1176;
        goto frame_exception_exit_1;
    }
    if (var_np.storage->object == NULL)
    {
        var_np.storage->object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = var_np.storage->object;
        var_np.storage->object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    tmp_assign_source_2 = MAKE_FUNCTION_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils( par_atol, var_np, par_rtol );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_2 );

        frame_function->f_lineno = 1177;
        goto frame_exception_exit_1;
    }
    assert( var_compare.object == NULL );
    var_compare.object = tmp_assign_source_2;

    // Tried code
    tmp_iter_arg_1 = PyTuple_New( 2 );
    tmp_source_name_1 = var_np.storage->object;

    if ( tmp_source_name_1 == NULL )
    {
        Py_DECREF( tmp_iter_arg_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1180;
        goto try_finally_handler_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_asanyarray );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_iter_arg_1 );

        frame_function->f_lineno = 1180;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_1 = par_actual.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_iter_arg_1 );
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1180;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 1180;
    tmp_tuple_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_iter_arg_1 );

        frame_function->f_lineno = 1180;
        goto try_finally_handler_1;
    }
    PyTuple_SET_ITEM( tmp_iter_arg_1, 0, tmp_tuple_element_1 );
    tmp_source_name_2 = var_np.storage->object;

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_iter_arg_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1180;
        goto try_finally_handler_1;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_asanyarray );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_iter_arg_1 );

        frame_function->f_lineno = 1180;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_2 = par_desired.object;

    if ( tmp_call_arg_element_2 == NULL )
    {
        Py_DECREF( tmp_iter_arg_1 );
        Py_DECREF( tmp_called_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1180;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 1180;
    tmp_tuple_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_iter_arg_1 );

        frame_function->f_lineno = 1180;
        goto try_finally_handler_1;
    }
    PyTuple_SET_ITEM( tmp_iter_arg_1, 1, tmp_tuple_element_1 );
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1180;
        goto try_finally_handler_1;
    }
    assert( tmp_tuple_unpack_1__source_iter.object == NULL );
    tmp_tuple_unpack_1__source_iter.object = tmp_assign_source_3;

    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_4 = UNPACK_PARAMETER_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1180;
        goto try_finally_handler_1;
    }
    assert( tmp_tuple_unpack_1__element_1.object == NULL );
    tmp_tuple_unpack_1__element_1.object = tmp_assign_source_4;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter.object;

    tmp_assign_source_5 = UNPACK_PARAMETER_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( !ERROR_OCCURED() )
        {
            exception_type = INCREASE_REFCOUNT( PyExc_StopIteration );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        }


        frame_function->f_lineno = 1180;
        goto try_finally_handler_1;
    }
    assert( tmp_tuple_unpack_1__element_2.object == NULL );
    tmp_tuple_unpack_1__element_2.object = tmp_assign_source_5;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter.object;

    // Check if iterator has left-over elements.
    assertObject( tmp_iterator_name_1 ); assert( PyIter_Check( tmp_iterator_name_1 ) );

    tmp_iterator_attempt_1 = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt_1 == NULL ))
    {
        // TODO: Could first fetch, then check, should be faster.
        if ( !ERROR_OCCURED() )
        {
        }
        else if ( PyErr_ExceptionMatches( PyExc_StopIteration ))
        {
            PyErr_Clear();
        }
        else
        {
            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

            goto try_finally_handler_1;
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt_1 );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );

        goto try_finally_handler_1;
    }
    tmp_assign_source_6 = tmp_tuple_unpack_1__element_1.object;

    if (par_actual.object == NULL)
    {
        par_actual.object = INCREASE_REFCOUNT( tmp_assign_source_6 );
    }
    else
    {
        PyObject *old = par_actual.object;
        par_actual.object = INCREASE_REFCOUNT( tmp_assign_source_6 );
        Py_DECREF( old );
    }
    tmp_assign_source_7 = tmp_tuple_unpack_1__element_2.object;

    if (par_desired.object == NULL)
    {
        par_desired.object = INCREASE_REFCOUNT( tmp_assign_source_7 );
    }
    else
    {
        PyObject *old = par_desired.object;
        par_desired.object = INCREASE_REFCOUNT( tmp_assign_source_7 );
        Py_DECREF( old );
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter.object );
    tmp_tuple_unpack_1__source_iter.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1.object );
    tmp_tuple_unpack_1__element_1.object = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2.object );
    tmp_tuple_unpack_1__element_2.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_binop_left_1 = const_str_digest_5b9ecf91c90bef2f7fd269f1d3389789;
    tmp_binop_right_1 = PyTuple_New( 2 );
    tmp_tuple_element_2 = par_rtol.storage->object;

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_binop_right_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71963 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1181;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_binop_right_1, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = par_atol.storage->object;

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_binop_right_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71913 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1181;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_binop_right_1, 1, tmp_tuple_element_2 );
    tmp_assign_source_8 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1181;
        goto frame_exception_exit_1;
    }
    assert( var_header.object == NULL );
    var_header.object = tmp_assign_source_8;

    tmp_called_3 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_array_compare );

    if (unlikely( tmp_called_3 == NULL ))
    {
        tmp_called_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_assert_array_compare );
    }

    if ( tmp_called_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 216166 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1182;
        goto frame_exception_exit_1;
    }

    tmp_call_pos_1 = PyTuple_New( 3 );
    tmp_tuple_element_3 = var_compare.object;

    if ( tmp_tuple_element_3 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217276 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1182;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = par_actual.object;

    if ( tmp_tuple_element_3 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214227 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1182;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 1, tmp_tuple_element_3 );
    tmp_tuple_element_3 = par_desired.object;

    if ( tmp_tuple_element_3 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214174 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1182;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 2, tmp_tuple_element_3 );
    tmp_call_kw_1 = _PyDict_NewPresized( 3 );
    tmp_str_arg_1 = par_err_msg.object;

    if ( tmp_str_arg_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 214121 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1182;
        goto frame_exception_exit_1;
    }

    tmp_dict_value_1 = PyObject_Str( tmp_str_arg_1 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );

        frame_function->f_lineno = 1182;
        goto frame_exception_exit_1;
    }
    tmp_dict_key_1 = const_str_plain_err_msg;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    tmp_dict_value_2 = par_verbose.object;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 49769 ], 53, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1183;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_2 = const_str_plain_verbose;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_2, tmp_dict_value_2 );
    tmp_dict_value_3 = var_header.object;

    tmp_dict_key_3 = const_str_plain_header;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_3, tmp_dict_value_3 );
    frame_function->f_lineno = 1183;
    tmp_unused = CALL_FUNCTION( tmp_called_3, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1183;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_np.storage != NULL && var_np.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_np,
            var_np.storage->object
        );

    }
    if ((var_compare.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_compare,
            var_compare.object
        );

    }
    if ((var_header.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_header,
            var_header.object
        );

    }
    if ((par_actual.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_actual,
            par_actual.object
        );

    }
    if ((par_desired.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_desired,
            par_desired.object
        );

    }
    if ((par_rtol.storage != NULL && par_rtol.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_rtol,
            par_rtol.storage->object
        );

    }
    if ((par_atol.storage != NULL && par_atol.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_atol,
            par_atol.storage->object
        );

    }
    if ((par_err_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_err_msg,
            par_err_msg.object
        );

    }
    if ((par_verbose.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_verbose,
            par_verbose.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_29_assert_allclose_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_actual = NULL;
    PyObject *_python_par_desired = NULL;
    PyObject *_python_par_rtol = NULL;
    PyObject *_python_par_atol = NULL;
    PyObject *_python_par_err_msg = NULL;
    PyObject *_python_par_verbose = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "assert_allclose() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_actual == key )
            {
                assert( _python_par_actual == NULL );
                _python_par_actual = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_desired == key )
            {
                assert( _python_par_desired == NULL );
                _python_par_desired = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_rtol == key )
            {
                assert( _python_par_rtol == NULL );
                _python_par_rtol = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_atol == key )
            {
                assert( _python_par_atol == NULL );
                _python_par_atol = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_err_msg == key )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_verbose == key )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_actual, key ) == 1 )
            {
                assert( _python_par_actual == NULL );
                _python_par_actual = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_desired, key ) == 1 )
            {
                assert( _python_par_desired == NULL );
                _python_par_desired = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_rtol, key ) == 1 )
            {
                assert( _python_par_rtol == NULL );
                _python_par_rtol = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_atol, key ) == 1 )
            {
                assert( _python_par_atol == NULL );
                _python_par_atol = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_err_msg, key ) == 1 )
            {
                assert( _python_par_err_msg == NULL );
                _python_par_err_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_verbose, key ) == 1 )
            {
                assert( _python_par_verbose == NULL );
                _python_par_verbose = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "assert_allclose() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 6 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_actual != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_actual = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_actual == NULL )
    {
        if ( 0 + self->m_defaults_given >= 6  )
        {
            _python_par_actual = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_desired != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_desired = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_desired == NULL )
    {
        if ( 1 + self->m_defaults_given >= 6  )
        {
            _python_par_desired = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_rtol != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_rtol = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_rtol == NULL )
    {
        if ( 2 + self->m_defaults_given >= 6  )
        {
            _python_par_rtol = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_atol != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_atol = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_atol == NULL )
    {
        if ( 3 + self->m_defaults_given >= 6  )
        {
            _python_par_atol = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 4 < args_given ))
    {
         if (unlikely( _python_par_err_msg != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 4 );
             goto error_exit;
         }

        _python_par_err_msg = INCREASE_REFCOUNT( args[ 4 ] );
    }
    else if ( _python_par_err_msg == NULL )
    {
        if ( 4 + self->m_defaults_given >= 6  )
        {
            _python_par_err_msg = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 4 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 5 < args_given ))
    {
         if (unlikely( _python_par_verbose != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 5 );
             goto error_exit;
         }

        _python_par_verbose = INCREASE_REFCOUNT( args[ 5 ] );
    }
    else if ( _python_par_verbose == NULL )
    {
        if ( 5 + self->m_defaults_given >= 6  )
        {
            _python_par_verbose = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 5 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_actual == NULL || _python_par_desired == NULL || _python_par_rtol == NULL || _python_par_atol == NULL || _python_par_err_msg == NULL || _python_par_verbose == NULL ))
    {
        PyObject *values[] = { _python_par_actual, _python_par_desired, _python_par_rtol, _python_par_atol, _python_par_err_msg, _python_par_verbose };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_29_assert_allclose_of_module_numpy$testing$utils( self, _python_par_actual, _python_par_desired, _python_par_rtol, _python_par_atol, _python_par_err_msg, _python_par_verbose );

error_exit:;

    Py_XDECREF( _python_par_actual );
    Py_XDECREF( _python_par_desired );
    Py_XDECREF( _python_par_rtol );
    Py_XDECREF( _python_par_atol );
    Py_XDECREF( _python_par_err_msg );
    Py_XDECREF( _python_par_verbose );

    return NULL;
}

static PyObject *dparse_function_29_assert_allclose_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6 )
    {
        return impl_function_29_assert_allclose_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_29_assert_allclose_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_x, PyObject *_python_par_y )
{
    // The context of the function.
    struct _context_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils_t *_python_context = (struct _context_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalVariable par_x; par_x.object = _python_par_x;
    PyObjectLocalVariable par_y; par_y.object = _python_par_y;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_called_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_be47ef7324ce2d893f714e6d2284a1bc, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = _python_context->closure_np.storage->object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1178;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_allclose );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1178;
        goto frame_exception_exit_1;
    }
    tmp_call_pos_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_x.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1178;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_y.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1178;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 1, tmp_tuple_element_1 );
    tmp_call_kw_1 = _PyDict_NewPresized( 2 );
    tmp_dict_value_1 = _python_context->closure_rtol.storage->object;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71963 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1178;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_1 = const_str_plain_rtol;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    tmp_dict_value_2 = _python_context->closure_atol.storage->object;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71913 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1178;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_2 = const_str_plain_atol;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_2, tmp_dict_value_2 );
    frame_function->f_lineno = 1178;
    tmp_return_value = CALL_FUNCTION( tmp_called_1, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1178;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((_python_context->closure_np.storage != NULL && _python_context->closure_np.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_np,
            _python_context->closure_np.storage->object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            par_x.object
        );

    }
    if ((par_y.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_y,
            par_y.object
        );

    }
    if ((_python_context->closure_rtol.storage != NULL && _python_context->closure_rtol.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_rtol,
            _python_context->closure_rtol.storage->object
        );

    }
    if ((_python_context->closure_atol.storage != NULL && _python_context->closure_atol.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_atol,
            _python_context->closure_atol.storage->object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    PyObject *_python_par_y = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "compare() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_y == key )
            {
                assert( _python_par_y == NULL );
                _python_par_y = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_x, key ) == 1 )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_y, key ) == 1 )
            {
                assert( _python_par_y == NULL );
                _python_par_y = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "compare() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_y != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_y = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_y == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_y = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL || _python_par_y == NULL ))
    {
        PyObject *values[] = { _python_par_x, _python_par_y };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils( self, _python_par_x, _python_par_y );

error_exit:;

    Py_XDECREF( _python_par_x );
    Py_XDECREF( _python_par_y );

    return NULL;
}

static PyObject *dparse_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_30_assert_array_almost_equal_nulp_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_x, PyObject *_python_par_y, PyObject *_python_par_nulp )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_x; par_x.object = _python_par_x;
    PyObjectLocalVariable par_y; par_y.object = _python_par_y;
    PyObjectLocalVariable par_nulp; par_nulp.object = _python_par_nulp;
    PyObjectLocalVariable var_np;
    PyObjectLocalVariable var_ax;
    PyObjectLocalVariable var_ay;
    PyObjectLocalVariable var_ref;
    PyObjectLocalVariable var_msg;
    PyObjectLocalVariable var_max_nulp;
    PyObjectTempVariable tmp_or_1__value_1;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_left_3;
    PyObject *tmp_binop_left_4;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_binop_right_3;
    PyObject *tmp_binop_right_4;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_arg_element_12;
    PyObject *tmp_call_arg_element_13;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    int tmp_tried_lineno_1;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_5dfc2473ab3b2d8c6bfb136d6d2ebb50, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_np.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_np,
            var_np.object
        );

    }
    if ((var_ax.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ax,
            var_ax.object
        );

    }
    if ((var_ay.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ay,
            var_ay.object
        );

    }
    if ((var_ref.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ref,
            var_ref.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_max_nulp.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_max_nulp,
            var_max_nulp.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_x,
            par_x.object
        );

    }
    if ((par_y.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_y,
            par_y.object
        );

    }
    if ((par_nulp.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_nulp,
            par_nulp.object
        );

    }
    frame_function->f_lineno = 1235;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_numpy, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1235;
        goto frame_exception_exit_1;
    }
    assert( var_np.object == NULL );
    var_np.object = tmp_assign_source_1;

    tmp_source_name_1 = var_np.object;

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_abs );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1236;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = par_x.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1236;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1236;
    tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1236;
        goto frame_exception_exit_1;
    }
    assert( var_ax.object == NULL );
    var_ax.object = tmp_assign_source_2;

    tmp_source_name_2 = var_np.object;

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_abs );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1237;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_2 = par_y.object;

    if ( tmp_call_arg_element_2 == NULL )
    {
        Py_DECREF( tmp_called_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1237;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1237;
    tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1237;
        goto frame_exception_exit_1;
    }
    assert( var_ay.object == NULL );
    var_ay.object = tmp_assign_source_3;

    tmp_binop_left_1 = par_nulp.object;

    if ( tmp_binop_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217329 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1238;
        goto frame_exception_exit_1;
    }

    tmp_source_name_3 = var_np.object;

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_spacing );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1238;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = var_np.object;

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_where );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_3 );

        frame_function->f_lineno = 1238;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_left_1 = var_ax.object;

    tmp_compexpr_right_1 = var_ay.object;

    tmp_call_arg_element_4 = RICH_COMPARE_GT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_call_arg_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_3 );
        Py_DECREF( tmp_called_4 );

        frame_function->f_lineno = 1238;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_5 = var_ax.object;

    tmp_call_arg_element_6 = var_ay.object;

    frame_function->f_lineno = 1238;
    tmp_call_arg_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_4, tmp_call_arg_element_4, tmp_call_arg_element_5, tmp_call_arg_element_6 );
    Py_DECREF( tmp_called_4 );
    Py_DECREF( tmp_call_arg_element_4 );
    if ( tmp_call_arg_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_3 );

        frame_function->f_lineno = 1238;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1238;
    tmp_binop_right_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_3 );
    Py_DECREF( tmp_called_3 );
    Py_DECREF( tmp_call_arg_element_3 );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1238;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_4 = BINARY_OPERATION_MUL( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1238;
        goto frame_exception_exit_1;
    }
    assert( var_ref.object == NULL );
    var_ref.object = tmp_assign_source_4;

    tmp_source_name_5 = var_np.object;

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_all );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1239;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = var_np.object;

    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_abs );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_5 );

        frame_function->f_lineno = 1239;
        goto frame_exception_exit_1;
    }
    tmp_binop_left_2 = par_x.object;

    if ( tmp_binop_left_2 == NULL )
    {
        Py_DECREF( tmp_called_5 );
        Py_DECREF( tmp_called_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1239;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_2 = par_y.object;

    if ( tmp_binop_right_2 == NULL )
    {
        Py_DECREF( tmp_called_5 );
        Py_DECREF( tmp_called_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1239;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_8 = BINARY_OPERATION_SUB( tmp_binop_left_2, tmp_binop_right_2 );
    if ( tmp_call_arg_element_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_5 );
        Py_DECREF( tmp_called_6 );

        frame_function->f_lineno = 1239;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1239;
    tmp_compexpr_left_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_8 );
    Py_DECREF( tmp_called_6 );
    Py_DECREF( tmp_call_arg_element_8 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_5 );

        frame_function->f_lineno = 1239;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_2 = var_ref.object;

    tmp_call_arg_element_7 = RICH_COMPARE_LE( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_call_arg_element_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_5 );

        frame_function->f_lineno = 1239;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1239;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_5, tmp_call_arg_element_7 );
    Py_DECREF( tmp_called_5 );
    Py_DECREF( tmp_call_arg_element_7 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1239;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        frame_function->f_lineno = 1239;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    // Tried code
    tmp_cond_value_2 = NULL;
    // Tried code
    tmp_source_name_7 = var_np.object;

    tmp_called_7 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_iscomplexobj );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1240;
        goto try_finally_handler_2;
    }
    tmp_call_arg_element_9 = par_x.object;

    if ( tmp_call_arg_element_9 == NULL )
    {
        Py_DECREF( tmp_called_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1240;
        goto try_finally_handler_2;
    }

    frame_function->f_lineno = 1240;
    tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_9 );
    Py_DECREF( tmp_called_7 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1240;
        goto try_finally_handler_2;
    }
    assert( tmp_or_1__value_1.object == NULL );
    tmp_or_1__value_1.object = tmp_assign_source_5;

    tmp_cond_value_3 = tmp_or_1__value_1.object;

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1240;
        goto try_finally_handler_2;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_cond_value_2 = tmp_or_1__value_1.object;

    Py_INCREF( tmp_cond_value_2 );
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_cond_value_2 = NULL;
    // Tried code
    tmp_result = tmp_or_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_1__value_1.object );
        tmp_or_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_source_name_8 = var_np.object;

    tmp_called_8 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_iscomplexobj );
    if ( tmp_called_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1240;
        goto try_finally_handler_3;
    }
    tmp_call_arg_element_10 = par_y.object;

    if ( tmp_call_arg_element_10 == NULL )
    {
        Py_DECREF( tmp_called_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1240;
        goto try_finally_handler_3;
    }

    frame_function->f_lineno = 1240;
    tmp_cond_value_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_8, tmp_call_arg_element_10 );
    Py_DECREF( tmp_called_8 );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1240;
        goto try_finally_handler_3;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_2;
    }

    goto finally_end_1;
    finally_end_1:;
    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_1;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        frame_function->f_lineno = 1240;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_binop_left_3 = const_str_digest_d770068533d4529e9c3183691e904fd8;
    tmp_binop_right_3 = par_nulp.object;

    if ( tmp_binop_right_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217329 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1241;
        goto try_finally_handler_1;
    }

    tmp_assign_source_6 = BINARY_OPERATION_REMAINDER( tmp_binop_left_3, tmp_binop_right_3 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1241;
        goto try_finally_handler_1;
    }
    assert( var_msg.object == NULL );
    var_msg.object = tmp_assign_source_6;

    goto branch_end_2;
    branch_no_2:;
    tmp_source_name_9 = var_np.object;

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1243;
        goto try_finally_handler_1;
    }

    tmp_called_9 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_max );
    if ( tmp_called_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1243;
        goto try_finally_handler_1;
    }
    tmp_called_10 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_nulp_diff );

    if (unlikely( tmp_called_10 == NULL ))
    {
        tmp_called_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_nulp_diff );
    }

    if ( tmp_called_10 == NULL )
    {
        Py_DECREF( tmp_called_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217379 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1243;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_12 = par_x.object;

    if ( tmp_call_arg_element_12 == NULL )
    {
        Py_DECREF( tmp_called_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1243;
        goto try_finally_handler_1;
    }

    tmp_call_arg_element_13 = par_y.object;

    if ( tmp_call_arg_element_13 == NULL )
    {
        Py_DECREF( tmp_called_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1243;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 1243;
    tmp_call_arg_element_11 = CALL_FUNCTION_WITH_ARGS2( tmp_called_10, tmp_call_arg_element_12, tmp_call_arg_element_13 );
    if ( tmp_call_arg_element_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_9 );

        frame_function->f_lineno = 1243;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1243;
    tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_9, tmp_call_arg_element_11 );
    Py_DECREF( tmp_called_9 );
    Py_DECREF( tmp_call_arg_element_11 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1243;
        goto try_finally_handler_1;
    }
    assert( var_max_nulp.object == NULL );
    var_max_nulp.object = tmp_assign_source_7;

    tmp_binop_left_4 = const_str_digest_ea77fb944baf01e2248a00918c7df409;
    tmp_binop_right_4 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_nulp.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_binop_right_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217329 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1244;
        goto try_finally_handler_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_binop_right_4, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_max_nulp.object;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_binop_right_4, 1, tmp_tuple_element_1 );
    tmp_assign_source_8 = BINARY_OPERATION_REMAINDER( tmp_binop_left_4, tmp_binop_right_4 );
    Py_DECREF( tmp_binop_right_4 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1244;
        goto try_finally_handler_1;
    }
    assert( var_msg.object == NULL );
    var_msg.object = tmp_assign_source_8;

    branch_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_1__value_1.object );
    tmp_or_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto frame_exception_exit_1;
    }

    goto finally_end_3;
    finally_end_3:;
    tmp_make_exception_arg_1 = var_msg.object;

    if ( tmp_make_exception_arg_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 28198 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1245;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1245;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1245;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 1245;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_np.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_np,
            var_np.object
        );

    }
    if ((var_ax.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ax,
            var_ax.object
        );

    }
    if ((var_ay.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ay,
            var_ay.object
        );

    }
    if ((var_ref.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ref,
            var_ref.object
        );

    }
    if ((var_msg.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_msg,
            var_msg.object
        );

    }
    if ((var_max_nulp.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_max_nulp,
            var_max_nulp.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            par_x.object
        );

    }
    if ((par_y.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_y,
            par_y.object
        );

    }
    if ((par_nulp.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_nulp,
            par_nulp.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_30_assert_array_almost_equal_nulp_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    PyObject *_python_par_y = NULL;
    PyObject *_python_par_nulp = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "assert_array_almost_equal_nulp() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_y == key )
            {
                assert( _python_par_y == NULL );
                _python_par_y = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_nulp == key )
            {
                assert( _python_par_nulp == NULL );
                _python_par_nulp = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_x, key ) == 1 )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_y, key ) == 1 )
            {
                assert( _python_par_y == NULL );
                _python_par_y = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_nulp, key ) == 1 )
            {
                assert( _python_par_nulp == NULL );
                _python_par_nulp = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "assert_array_almost_equal_nulp() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_y != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_y = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_y == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_y = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_nulp != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_nulp = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_nulp == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_nulp = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL || _python_par_y == NULL || _python_par_nulp == NULL ))
    {
        PyObject *values[] = { _python_par_x, _python_par_y, _python_par_nulp };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_30_assert_array_almost_equal_nulp_of_module_numpy$testing$utils( self, _python_par_x, _python_par_y, _python_par_nulp );

error_exit:;

    Py_XDECREF( _python_par_x );
    Py_XDECREF( _python_par_y );
    Py_XDECREF( _python_par_nulp );

    return NULL;
}

static PyObject *dparse_function_30_assert_array_almost_equal_nulp_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_30_assert_array_almost_equal_nulp_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_30_assert_array_almost_equal_nulp_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_31_assert_array_max_ulp_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_a, PyObject *_python_par_b, PyObject *_python_par_maxulp, PyObject *_python_par_dtype )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_a; par_a.object = _python_par_a;
    PyObjectLocalVariable par_b; par_b.object = _python_par_b;
    PyObjectLocalVariable par_maxulp; par_maxulp.object = _python_par_maxulp;
    PyObjectLocalVariable par_dtype; par_dtype.object = _python_par_dtype;
    PyObjectLocalVariable var_np;
    PyObjectLocalVariable var_ret;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_729f56674ba495d8eca1dd9d3e0e336f, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_np.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_np,
            var_np.object
        );

    }
    if ((var_ret.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ret,
            var_ret.object
        );

    }
    if ((par_a.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_a,
            par_a.object
        );

    }
    if ((par_b.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_b,
            par_b.object
        );

    }
    if ((par_maxulp.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_maxulp,
            par_maxulp.object
        );

    }
    if ((par_dtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_dtype,
            par_dtype.object
        );

    }
    frame_function->f_lineno = 1283;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_numpy, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1283;
        goto frame_exception_exit_1;
    }
    assert( var_np.object == NULL );
    var_np.object = tmp_assign_source_1;

    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_nulp_diff );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_nulp_diff );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217379 ], 38, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1284;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = par_a.object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5854 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1284;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_2 = par_b.object;

    if ( tmp_call_arg_element_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5951 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1284;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_3 = par_dtype.object;

    if ( tmp_call_arg_element_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1284;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1284;
    tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1284;
        goto frame_exception_exit_1;
    }
    assert( var_ret.object == NULL );
    var_ret.object = tmp_assign_source_2;

    tmp_source_name_1 = var_np.object;

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_all );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1285;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_left_1 = var_ret.object;

    tmp_compexpr_right_1 = par_maxulp.object;

    if ( tmp_compexpr_right_1 == NULL )
    {
        Py_DECREF( tmp_called_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217417 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1285;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_4 = RICH_COMPARE_LE( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_call_arg_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_2 );

        frame_function->f_lineno = 1285;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1285;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_2 );
    Py_DECREF( tmp_call_arg_element_4 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1285;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        frame_function->f_lineno = 1285;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_binop_left_1 = const_str_digest_42d9e20690bfe0906fc96d03cff6b46c;
    tmp_binop_right_1 = par_maxulp.object;

    if ( tmp_binop_right_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217417 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1287;
        goto frame_exception_exit_1;
    }

    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1286;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1286;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_1 );
    Py_DECREF( tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1286;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 1286;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_np.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_np,
            var_np.object
        );

    }
    if ((var_ret.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ret,
            var_ret.object
        );

    }
    if ((par_a.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_a,
            par_a.object
        );

    }
    if ((par_b.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_b,
            par_b.object
        );

    }
    if ((par_maxulp.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_maxulp,
            par_maxulp.object
        );

    }
    if ((par_dtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_dtype,
            par_dtype.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = var_ret.object;

    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_31_assert_array_max_ulp_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_a = NULL;
    PyObject *_python_par_b = NULL;
    PyObject *_python_par_maxulp = NULL;
    PyObject *_python_par_dtype = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "assert_array_max_ulp() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_a == key )
            {
                assert( _python_par_a == NULL );
                _python_par_a = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_b == key )
            {
                assert( _python_par_b == NULL );
                _python_par_b = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_maxulp == key )
            {
                assert( _python_par_maxulp == NULL );
                _python_par_maxulp = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_dtype == key )
            {
                assert( _python_par_dtype == NULL );
                _python_par_dtype = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_a, key ) == 1 )
            {
                assert( _python_par_a == NULL );
                _python_par_a = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_b, key ) == 1 )
            {
                assert( _python_par_b == NULL );
                _python_par_b = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_maxulp, key ) == 1 )
            {
                assert( _python_par_maxulp == NULL );
                _python_par_maxulp = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_dtype, key ) == 1 )
            {
                assert( _python_par_dtype == NULL );
                _python_par_dtype = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "assert_array_max_ulp() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_a != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_a = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_a == NULL )
    {
        if ( 0 + self->m_defaults_given >= 4  )
        {
            _python_par_a = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_b != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_b = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_b == NULL )
    {
        if ( 1 + self->m_defaults_given >= 4  )
        {
            _python_par_b = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_maxulp != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_maxulp = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_maxulp == NULL )
    {
        if ( 2 + self->m_defaults_given >= 4  )
        {
            _python_par_maxulp = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_dtype != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_dtype = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_dtype == NULL )
    {
        if ( 3 + self->m_defaults_given >= 4  )
        {
            _python_par_dtype = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_a == NULL || _python_par_b == NULL || _python_par_maxulp == NULL || _python_par_dtype == NULL ))
    {
        PyObject *values[] = { _python_par_a, _python_par_b, _python_par_maxulp, _python_par_dtype };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_31_assert_array_max_ulp_of_module_numpy$testing$utils( self, _python_par_a, _python_par_b, _python_par_maxulp, _python_par_dtype );

error_exit:;

    Py_XDECREF( _python_par_a );
    Py_XDECREF( _python_par_b );
    Py_XDECREF( _python_par_maxulp );
    Py_XDECREF( _python_par_dtype );

    return NULL;
}

static PyObject *dparse_function_31_assert_array_max_ulp_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4 )
    {
        return impl_function_31_assert_array_max_ulp_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_31_assert_array_max_ulp_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_32_nulp_diff_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_x, PyObject *_python_par_y, PyObject *_python_par_dtype )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_x; par_x.object = _python_par_x;
    PyObjectLocalVariable par_y; par_y.object = _python_par_y;
    PyObjectLocalVariable par_dtype; par_dtype.object = _python_par_dtype;
    PyObjectSharedLocalVariable var_np;
    PyObjectLocalVariable var_t;
    PyObjectLocalVariable var__diff;
    PyObjectLocalVariable var_rx;
    PyObjectLocalVariable var_ry;
    PyObjectTempVariable tmp_or_1__value_1;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_call_arg_element_10;
    PyObject *tmp_call_arg_element_11;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_kw_2;
    PyObject *tmp_call_kw_3;
    PyObject *tmp_call_kw_4;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_call_pos_2;
    PyObject *tmp_call_pos_3;
    PyObject *tmp_call_pos_4;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    PyObject *tmp_called_11;
    PyObject *tmp_called_12;
    int tmp_cmp_Eq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    int tmp_tried_lineno_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_4279bc62ea68d475ba47f418e90f6795, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_np.storage != NULL && var_np.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_np,
            var_np.storage->object
        );

    }
    if ((var_t.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_t,
            var_t.object
        );

    }
    if ((var__diff.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain__diff,
            var__diff.object
        );

    }
    if ((var_rx.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_rx,
            var_rx.object
        );

    }
    if ((var_ry.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_ry,
            var_ry.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_x,
            par_x.object
        );

    }
    if ((par_y.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_y,
            par_y.object
        );

    }
    if ((par_dtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_dtype,
            par_dtype.object
        );

    }
    frame_function->f_lineno = 1314;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_numpy, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1314;
        goto frame_exception_exit_1;
    }
    if (var_np.storage->object == NULL)
    {
        var_np.storage->object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = var_np.storage->object;
        var_np.storage->object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    tmp_cond_value_1 = par_dtype.object;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1315;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1315;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = var_np.storage->object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1316;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_array );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1316;
        goto frame_exception_exit_1;
    }
    tmp_call_pos_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_x.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1316;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    tmp_call_kw_1 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = par_dtype.object;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1316;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_1 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    frame_function->f_lineno = 1316;
    tmp_assign_source_2 = CALL_FUNCTION( tmp_called_1, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1316;
        goto frame_exception_exit_1;
    }
    if (par_x.object == NULL)
    {
        par_x.object = tmp_assign_source_2;
    }
    else
    {
        PyObject *old = par_x.object;
        par_x.object = tmp_assign_source_2;
        Py_DECREF( old );
    }
    tmp_source_name_2 = var_np.storage->object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1317;
        goto frame_exception_exit_1;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_array );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1317;
        goto frame_exception_exit_1;
    }
    tmp_call_pos_2 = PyTuple_New( 1 );
    tmp_tuple_element_2 = par_y.object;

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_called_2 );
        Py_DECREF( tmp_call_pos_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1317;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_call_pos_2, 0, tmp_tuple_element_2 );
    tmp_call_kw_2 = _PyDict_NewPresized( 1 );
    tmp_dict_value_2 = par_dtype.object;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_called_2 );
        Py_DECREF( tmp_call_pos_2 );
        Py_DECREF( tmp_call_kw_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1317;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_2 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_2, tmp_dict_key_2, tmp_dict_value_2 );
    frame_function->f_lineno = 1317;
    tmp_assign_source_3 = CALL_FUNCTION( tmp_called_2, tmp_call_pos_2, tmp_call_kw_2 );
    Py_DECREF( tmp_called_2 );
    Py_DECREF( tmp_call_pos_2 );
    Py_DECREF( tmp_call_kw_2 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1317;
        goto frame_exception_exit_1;
    }
    if (par_y.object == NULL)
    {
        par_y.object = tmp_assign_source_3;
    }
    else
    {
        PyObject *old = par_y.object;
        par_y.object = tmp_assign_source_3;
        Py_DECREF( old );
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_source_name_3 = var_np.storage->object;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1319;
        goto frame_exception_exit_1;
    }

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_array );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1319;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = par_x.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1319;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1319;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1319;
        goto frame_exception_exit_1;
    }
    if (par_x.object == NULL)
    {
        par_x.object = tmp_assign_source_4;
    }
    else
    {
        PyObject *old = par_x.object;
        par_x.object = tmp_assign_source_4;
        Py_DECREF( old );
    }
    tmp_source_name_4 = var_np.storage->object;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1320;
        goto frame_exception_exit_1;
    }

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_array );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1320;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_2 = par_y.object;

    if ( tmp_call_arg_element_2 == NULL )
    {
        Py_DECREF( tmp_called_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1320;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1320;
    tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_2 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1320;
        goto frame_exception_exit_1;
    }
    if (par_y.object == NULL)
    {
        par_y.object = tmp_assign_source_5;
    }
    else
    {
        PyObject *old = par_y.object;
        par_y.object = tmp_assign_source_5;
        Py_DECREF( old );
    }
    branch_end_1:;
    tmp_source_name_5 = var_np.storage->object;

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1322;
        goto frame_exception_exit_1;
    }

    tmp_called_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_common_type );
    if ( tmp_called_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1322;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_3 = par_x.object;

    tmp_call_arg_element_4 = par_y.object;

    frame_function->f_lineno = 1322;
    tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS2( tmp_called_5, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_5 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1322;
        goto frame_exception_exit_1;
    }
    assert( var_t.object == NULL );
    var_t.object = tmp_assign_source_6;

    // Tried code
    tmp_cond_value_2 = NULL;
    // Tried code
    tmp_source_name_6 = var_np.storage->object;

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1323;
        goto try_finally_handler_2;
    }

    tmp_called_6 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_iscomplexobj );
    if ( tmp_called_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1323;
        goto try_finally_handler_2;
    }
    tmp_call_arg_element_5 = par_x.object;

    frame_function->f_lineno = 1323;
    tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_6, tmp_call_arg_element_5 );
    Py_DECREF( tmp_called_6 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1323;
        goto try_finally_handler_2;
    }
    assert( tmp_or_1__value_1.object == NULL );
    tmp_or_1__value_1.object = tmp_assign_source_7;

    tmp_cond_value_3 = tmp_or_1__value_1.object;

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1323;
        goto try_finally_handler_2;
    }
    if (tmp_cond_truth_3 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_cond_value_2 = tmp_or_1__value_1.object;

    Py_INCREF( tmp_cond_value_2 );
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_cond_value_2 = NULL;
    // Tried code
    tmp_result = tmp_or_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_or_1__value_1.object );
        tmp_or_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_source_name_7 = var_np.storage->object;

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1323;
        goto try_finally_handler_3;
    }

    tmp_called_7 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_iscomplexobj );
    if ( tmp_called_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1323;
        goto try_finally_handler_3;
    }
    tmp_call_arg_element_6 = par_y.object;

    frame_function->f_lineno = 1323;
    tmp_cond_value_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_7, tmp_call_arg_element_6 );
    Py_DECREF( tmp_called_7 );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1323;
        goto try_finally_handler_3;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_2;
    }

    goto finally_end_1;
    finally_end_1:;
    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_1;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        frame_function->f_lineno = 1323;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_make_exception_arg_1 = const_str_digest_4d1a6cdb540f53c457d4f66d06800fb9;
    frame_function->f_lineno = 1324;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_NotImplementedError, tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1324;
        goto try_finally_handler_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 1324;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_finally_handler_1;
    branch_no_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_or_1__value_1.object );
    tmp_or_1__value_1.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto frame_exception_exit_1;
    }

    goto finally_end_3;
    finally_end_3:;
    tmp_source_name_8 = var_np.storage->object;

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1326;
        goto frame_exception_exit_1;
    }

    tmp_called_8 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_array );
    if ( tmp_called_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1326;
        goto frame_exception_exit_1;
    }
    tmp_call_pos_3 = PyTuple_New( 1 );
    tmp_tuple_element_3 = par_x.object;

    if ( tmp_tuple_element_3 == NULL )
    {
        Py_DECREF( tmp_called_8 );
        Py_DECREF( tmp_call_pos_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1326;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_call_pos_3, 0, tmp_tuple_element_3 );
    tmp_call_kw_3 = _PyDict_NewPresized( 1 );
    tmp_dict_value_3 = var_t.object;

    if ( tmp_dict_value_3 == NULL )
    {
        Py_DECREF( tmp_called_8 );
        Py_DECREF( tmp_call_pos_3 );
        Py_DECREF( tmp_call_kw_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4881 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1326;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_3 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_3, tmp_dict_key_3, tmp_dict_value_3 );
    frame_function->f_lineno = 1326;
    tmp_assign_source_8 = CALL_FUNCTION( tmp_called_8, tmp_call_pos_3, tmp_call_kw_3 );
    Py_DECREF( tmp_called_8 );
    Py_DECREF( tmp_call_pos_3 );
    Py_DECREF( tmp_call_kw_3 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1326;
        goto frame_exception_exit_1;
    }
    if (par_x.object == NULL)
    {
        par_x.object = tmp_assign_source_8;
    }
    else
    {
        PyObject *old = par_x.object;
        par_x.object = tmp_assign_source_8;
        Py_DECREF( old );
    }
    tmp_source_name_9 = var_np.storage->object;

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1327;
        goto frame_exception_exit_1;
    }

    tmp_called_9 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_array );
    if ( tmp_called_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1327;
        goto frame_exception_exit_1;
    }
    tmp_call_pos_4 = PyTuple_New( 1 );
    tmp_tuple_element_4 = par_y.object;

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_called_9 );
        Py_DECREF( tmp_call_pos_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 8238 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1327;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_call_pos_4, 0, tmp_tuple_element_4 );
    tmp_call_kw_4 = _PyDict_NewPresized( 1 );
    tmp_dict_value_4 = var_t.object;

    if ( tmp_dict_value_4 == NULL )
    {
        Py_DECREF( tmp_called_9 );
        Py_DECREF( tmp_call_pos_4 );
        Py_DECREF( tmp_call_kw_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4881 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1327;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_4 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_4, tmp_dict_key_4, tmp_dict_value_4 );
    frame_function->f_lineno = 1327;
    tmp_assign_source_9 = CALL_FUNCTION( tmp_called_9, tmp_call_pos_4, tmp_call_kw_4 );
    Py_DECREF( tmp_called_9 );
    Py_DECREF( tmp_call_pos_4 );
    Py_DECREF( tmp_call_kw_4 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1327;
        goto frame_exception_exit_1;
    }
    if (par_y.object == NULL)
    {
        par_y.object = tmp_assign_source_9;
    }
    else
    {
        PyObject *old = par_y.object;
        par_y.object = tmp_assign_source_9;
        Py_DECREF( old );
    }
    tmp_source_name_10 = par_x.object;

    tmp_compare_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_shape );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1329;
        goto frame_exception_exit_1;
    }
    tmp_source_name_11 = par_y.object;

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_shape );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        frame_function->f_lineno = 1329;
        goto frame_exception_exit_1;
    }
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_1 );
        Py_DECREF( tmp_compare_right_1 );

        frame_function->f_lineno = 1329;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    Py_DECREF( tmp_compare_right_1 );
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_no_3;
    }
    else
    {
        goto branch_yes_3;
    }
    branch_yes_3:;
    tmp_binop_left_1 = const_str_digest_e6d92617a84f2256b630a8b04423d0bc;
    tmp_binop_right_1 = PyTuple_New( 2 );
    tmp_source_name_12 = par_x.object;

    tmp_tuple_element_5 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_shape );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_1 );

        frame_function->f_lineno = 1331;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_1, 0, tmp_tuple_element_5 );
    tmp_source_name_13 = par_y.object;

    tmp_tuple_element_5 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_shape );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_1 );

        frame_function->f_lineno = 1331;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_1, 1, tmp_tuple_element_5 );
    tmp_make_exception_arg_2 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_make_exception_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1330;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1330;
    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, tmp_make_exception_arg_2 );
    Py_DECREF( tmp_make_exception_arg_2 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1330;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_2;
    frame_function->f_lineno = 1330;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_3:;
    tmp_assign_source_10 = MAKE_FUNCTION_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils( var_np );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_10 );

        frame_function->f_lineno = 1333;
        goto frame_exception_exit_1;
    }
    assert( var__diff.object == NULL );
    var__diff.object = tmp_assign_source_10;

    tmp_called_10 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_integer_repr );

    if (unlikely( tmp_called_10 == NULL ))
    {
        tmp_called_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_integer_repr );
    }

    if ( tmp_called_10 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217469 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1337;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_7 = par_x.object;

    frame_function->f_lineno = 1337;
    tmp_assign_source_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_10, tmp_call_arg_element_7 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1337;
        goto frame_exception_exit_1;
    }
    assert( var_rx.object == NULL );
    var_rx.object = tmp_assign_source_11;

    tmp_called_11 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_integer_repr );

    if (unlikely( tmp_called_11 == NULL ))
    {
        tmp_called_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_integer_repr );
    }

    if ( tmp_called_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217469 ], 41, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1338;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_8 = par_y.object;

    frame_function->f_lineno = 1338;
    tmp_assign_source_12 = CALL_FUNCTION_WITH_ARGS1( tmp_called_11, tmp_call_arg_element_8 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1338;
        goto frame_exception_exit_1;
    }
    assert( var_ry.object == NULL );
    var_ry.object = tmp_assign_source_12;

    tmp_called_12 = var__diff.object;

    tmp_call_arg_element_9 = var_rx.object;

    tmp_call_arg_element_10 = var_ry.object;

    tmp_call_arg_element_11 = var_t.object;

    if ( tmp_call_arg_element_11 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4881 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1339;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1339;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_12, tmp_call_arg_element_9, tmp_call_arg_element_10, tmp_call_arg_element_11 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1339;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_np.storage != NULL && var_np.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_np,
            var_np.storage->object
        );

    }
    if ((var_t.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_t,
            var_t.object
        );

    }
    if ((var__diff.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__diff,
            var__diff.object
        );

    }
    if ((var_rx.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_rx,
            var_rx.object
        );

    }
    if ((var_ry.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ry,
            var_ry.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            par_x.object
        );

    }
    if ((par_y.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_y,
            par_y.object
        );

    }
    if ((par_dtype.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_dtype,
            par_dtype.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_32_nulp_diff_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    PyObject *_python_par_y = NULL;
    PyObject *_python_par_dtype = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "nulp_diff() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_y == key )
            {
                assert( _python_par_y == NULL );
                _python_par_y = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_dtype == key )
            {
                assert( _python_par_dtype == NULL );
                _python_par_dtype = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_x, key ) == 1 )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_y, key ) == 1 )
            {
                assert( _python_par_y == NULL );
                _python_par_y = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_dtype, key ) == 1 )
            {
                assert( _python_par_dtype == NULL );
                _python_par_dtype = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "nulp_diff() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_y != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_y = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_y == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_y = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_dtype != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_dtype = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_dtype == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_dtype = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL || _python_par_y == NULL || _python_par_dtype == NULL ))
    {
        PyObject *values[] = { _python_par_x, _python_par_y, _python_par_dtype };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_32_nulp_diff_of_module_numpy$testing$utils( self, _python_par_x, _python_par_y, _python_par_dtype );

error_exit:;

    Py_XDECREF( _python_par_x );
    Py_XDECREF( _python_par_y );
    Py_XDECREF( _python_par_dtype );

    return NULL;
}

static PyObject *dparse_function_32_nulp_diff_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_32_nulp_diff_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_32_nulp_diff_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_rx, PyObject *_python_par_ry, PyObject *_python_par_vdt )
{
    // The context of the function.
    struct _context_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils_t *_python_context = (struct _context_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalVariable par_rx; par_rx.object = _python_par_rx;
    PyObjectLocalVariable par_ry; par_ry.object = _python_par_ry;
    PyObjectLocalVariable par_vdt; par_vdt.object = _python_par_vdt;
    PyObjectLocalVariable var_diff;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_6013a36a2de187389418283b08fcea34, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = _python_context->closure_np.storage->object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1334;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_array );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1334;
        goto frame_exception_exit_1;
    }
    tmp_call_pos_1 = PyTuple_New( 1 );
    tmp_binop_left_1 = par_rx.object;

    if ( tmp_binop_left_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217510 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1334;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_1 = par_ry.object;

    if ( tmp_binop_right_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217558 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1334;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_1 = BINARY_OPERATION_SUB( tmp_binop_left_1, tmp_binop_right_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_pos_1 );

        frame_function->f_lineno = 1334;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    tmp_call_kw_1 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = par_vdt.object;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217606 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1334;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_1 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    frame_function->f_lineno = 1334;
    tmp_assign_source_1 = CALL_FUNCTION( tmp_called_1, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1334;
        goto frame_exception_exit_1;
    }
    assert( var_diff.object == NULL );
    var_diff.object = tmp_assign_source_1;

    tmp_source_name_2 = _python_context->closure_np.storage->object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 215213 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1335;
        goto frame_exception_exit_1;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_abs );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1335;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = var_diff.object;

    frame_function->f_lineno = 1335;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1335;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_diff.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_diff,
            var_diff.object
        );

    }
    if ((_python_context->closure_np.storage != NULL && _python_context->closure_np.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_np,
            _python_context->closure_np.storage->object
        );

    }
    if ((par_rx.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_rx,
            par_rx.object
        );

    }
    if ((par_ry.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ry,
            par_ry.object
        );

    }
    if ((par_vdt.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_vdt,
            par_vdt.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_rx = NULL;
    PyObject *_python_par_ry = NULL;
    PyObject *_python_par_vdt = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_diff() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_rx == key )
            {
                assert( _python_par_rx == NULL );
                _python_par_rx = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_ry == key )
            {
                assert( _python_par_ry == NULL );
                _python_par_ry = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_vdt == key )
            {
                assert( _python_par_vdt == NULL );
                _python_par_vdt = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_rx, key ) == 1 )
            {
                assert( _python_par_rx == NULL );
                _python_par_rx = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_ry, key ) == 1 )
            {
                assert( _python_par_ry == NULL );
                _python_par_ry = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_vdt, key ) == 1 )
            {
                assert( _python_par_vdt == NULL );
                _python_par_vdt = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_diff() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_rx != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_rx = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_rx == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_rx = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_ry != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_ry = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_ry == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_ry = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_vdt != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_vdt = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_vdt == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_vdt = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_rx == NULL || _python_par_ry == NULL || _python_par_vdt == NULL ))
    {
        PyObject *values[] = { _python_par_rx, _python_par_ry, _python_par_vdt };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils( self, _python_par_rx, _python_par_ry, _python_par_vdt );

error_exit:;

    Py_XDECREF( _python_par_rx );
    Py_XDECREF( _python_par_ry );
    Py_XDECREF( _python_par_vdt );

    return NULL;
}

static PyObject *dparse_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_33__integer_repr_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_x, PyObject *_python_par_vdt, PyObject *_python_par_comp )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_x; par_x.object = _python_par_x;
    PyObjectLocalVariable par_vdt; par_vdt.object = _python_par_vdt;
    PyObjectLocalVariable par_comp; par_comp.object = _python_par_comp;
    PyObjectLocalVariable var_rx;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Lt_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_frame_locals;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_1b20fa0f28dbdd55e3b876db6484f453, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_x.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1346;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_view );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1346;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_1 = par_vdt.object;

    if ( tmp_call_arg_element_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217606 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1346;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1346;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1346;
        goto frame_exception_exit_1;
    }
    assert( var_rx.object == NULL );
    var_rx.object = tmp_assign_source_1;

    tmp_source_name_2 = var_rx.object;

    tmp_compare_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_size );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1347;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = const_int_pos_1;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        frame_function->f_lineno = 1347;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_binop_left_1 = par_comp.object;

    if ( tmp_binop_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217655 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1348;
        goto frame_exception_exit_1;
    }

    tmp_subscr_target_1 = var_rx.object;

    tmp_compexpr_left_1 = var_rx.object;

    tmp_compexpr_right_1 = const_int_0;
    tmp_subscr_subscript_1 = RICH_COMPARE_LT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_subscr_subscript_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1348;
        goto frame_exception_exit_1;
    }
    tmp_binop_right_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    Py_DECREF( tmp_subscr_subscript_1 );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1348;
        goto frame_exception_exit_1;
    }
    tmp_ass_subvalue_1 = BINARY_OPERATION_SUB( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_ass_subvalue_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1348;
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_1 = var_rx.object;

    tmp_compexpr_left_2 = var_rx.object;

    tmp_compexpr_right_2 = const_int_0;
    tmp_ass_subscript_1 = RICH_COMPARE_LT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    if ( tmp_ass_subscript_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_ass_subvalue_1 );

        frame_function->f_lineno = 1348;
        goto frame_exception_exit_1;
    }
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subscript_1 );
    Py_DECREF( tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1348;
        goto frame_exception_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_compare_left_2 = var_rx.object;

    tmp_compare_right_2 = const_int_0;
    tmp_cmp_Lt_1 = RICH_COMPARE_BOOL_LT( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Lt_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1350;
        goto frame_exception_exit_1;
    }
    if (tmp_cmp_Lt_1 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_binop_left_2 = par_comp.object;

    if ( tmp_binop_left_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217655 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1351;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_2 = var_rx.object;

    tmp_assign_source_2 = BINARY_OPERATION_SUB( tmp_binop_left_2, tmp_binop_right_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1351;
        goto frame_exception_exit_1;
    }
    assert( var_rx.object != NULL );
    {
        PyObject *old = var_rx.object;
        var_rx.object = tmp_assign_source_2;
        Py_DECREF( old );
    }

    branch_no_2:;
    branch_end_1:;
    tmp_return_value = var_rx.object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217510 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1353;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_rx.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_rx,
            var_rx.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            par_x.object
        );

    }
    if ((par_vdt.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_vdt,
            par_vdt.object
        );

    }
    if ((par_comp.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_comp,
            par_comp.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_33__integer_repr_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    PyObject *_python_par_vdt = NULL;
    PyObject *_python_par_comp = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_integer_repr() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_vdt == key )
            {
                assert( _python_par_vdt == NULL );
                _python_par_vdt = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_comp == key )
            {
                assert( _python_par_comp == NULL );
                _python_par_comp = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_x, key ) == 1 )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_vdt, key ) == 1 )
            {
                assert( _python_par_vdt == NULL );
                _python_par_vdt = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_comp, key ) == 1 )
            {
                assert( _python_par_comp == NULL );
                _python_par_comp = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_integer_repr() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_vdt != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_vdt = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_vdt == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_vdt = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_comp != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_comp = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_comp == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_comp = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL || _python_par_vdt == NULL || _python_par_comp == NULL ))
    {
        PyObject *values[] = { _python_par_x, _python_par_vdt, _python_par_comp };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_33__integer_repr_of_module_numpy$testing$utils( self, _python_par_x, _python_par_vdt, _python_par_comp );

error_exit:;

    Py_XDECREF( _python_par_x );
    Py_XDECREF( _python_par_vdt );
    Py_XDECREF( _python_par_comp );

    return NULL;
}

static PyObject *dparse_function_33__integer_repr_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_33__integer_repr_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_33__integer_repr_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_34_integer_repr_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_x; par_x.object = _python_par_x;
    PyObjectLocalVariable var_np;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_locals_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_690d16a2d935750004a0aead2772537c, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    tmp_import_locals_1 = PyDict_New();
    if ((var_np.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_np,
            var_np.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_import_locals_1,
            const_str_plain_x,
            par_x.object
        );

    }
    frame_function->f_lineno = 1358;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_numpy, tmp_import_globals_1, tmp_import_locals_1, Py_None, const_int_0 );
    Py_DECREF( tmp_import_locals_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1358;
        goto frame_exception_exit_1;
    }
    assert( var_np.object == NULL );
    var_np.object = tmp_assign_source_1;

    tmp_source_name_1 = par_x.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1359;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_dtype );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1359;
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = var_np.object;

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_float32 );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        frame_function->f_lineno = 1359;
        goto frame_exception_exit_1;
    }
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_1 );
        Py_DECREF( tmp_compare_right_1 );

        frame_function->f_lineno = 1359;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    Py_DECREF( tmp_compare_right_1 );
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain__integer_repr );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__integer_repr );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217705 ], 42, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1360;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = par_x.object;

    if ( tmp_call_arg_element_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1360;
        goto frame_exception_exit_1;
    }

    tmp_source_name_3 = var_np.object;

    tmp_call_arg_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_int32 );
    if ( tmp_call_arg_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1360;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = var_np.object;

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_int32 );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_2 );

        frame_function->f_lineno = 1360;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_4 = const_int_neg_2147483648;
    frame_function->f_lineno = 1360;
    tmp_call_arg_element_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_2, tmp_call_arg_element_4 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_call_arg_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_2 );

        frame_function->f_lineno = 1360;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1360;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3 );
    Py_DECREF( tmp_call_arg_element_2 );
    Py_DECREF( tmp_call_arg_element_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1360;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    tmp_source_name_5 = par_x.object;

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1361;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_dtype );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1361;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = var_np.object;

    tmp_compare_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_float64 );
    if ( tmp_compare_right_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_2 );

        frame_function->f_lineno = 1361;
        goto frame_exception_exit_1;
    }
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_2 );
        Py_DECREF( tmp_compare_right_2 );

        frame_function->f_lineno = 1361;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_2 );
    Py_DECREF( tmp_compare_right_2 );
    if (tmp_cmp_Eq_2 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_3 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain__integer_repr );

    if (unlikely( tmp_called_3 == NULL ))
    {
        tmp_called_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__integer_repr );
    }

    if ( tmp_called_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217705 ], 42, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1362;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_5 = par_x.object;

    if ( tmp_call_arg_element_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1362;
        goto frame_exception_exit_1;
    }

    tmp_source_name_7 = var_np.object;

    tmp_call_arg_element_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_int64 );
    if ( tmp_call_arg_element_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1362;
        goto frame_exception_exit_1;
    }
    tmp_source_name_8 = var_np.object;

    tmp_called_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_int64 );
    if ( tmp_called_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_6 );

        frame_function->f_lineno = 1362;
        goto frame_exception_exit_1;
    }
    tmp_call_arg_element_8 = const_long_neg_9223372036854775808;
    frame_function->f_lineno = 1362;
    tmp_call_arg_element_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_4, tmp_call_arg_element_8 );
    Py_DECREF( tmp_called_4 );
    if ( tmp_call_arg_element_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_call_arg_element_6 );

        frame_function->f_lineno = 1362;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1362;
    tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_3, tmp_call_arg_element_5, tmp_call_arg_element_6, tmp_call_arg_element_7 );
    Py_DECREF( tmp_call_arg_element_6 );
    Py_DECREF( tmp_call_arg_element_7 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1362;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_2;
    branch_no_2:;
    tmp_binop_left_1 = const_str_digest_6215faf19a1de8aa9e1cf1b6dc235503;
    tmp_source_name_9 = par_x.object;

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 1605 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1364;
        goto frame_exception_exit_1;
    }

    tmp_binop_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_dtype );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1364;
        goto frame_exception_exit_1;
    }
    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1364;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1364;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, tmp_make_exception_arg_1 );
    Py_DECREF( tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1364;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 1364;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_end_2:;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_np.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_np,
            var_np.object
        );

    }
    if ((par_x.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_x,
            par_x.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_34_integer_repr_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "integer_repr() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_x, key ) == 1 )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "integer_repr() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL ))
    {
        PyObject *values[] = { _python_par_x };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_34_integer_repr_of_module_numpy$testing$utils( self, _python_par_x );

error_exit:;

    Py_XDECREF( _python_par_x );

    return NULL;
}

static PyObject *dparse_function_34_integer_repr_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_34_integer_repr_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_34_integer_repr_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_35_WarningMessage_of_module_numpy$testing$utils(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___doc__;
    PyObjectLocalVariable var__WARNING_DETAILS;
    PyObjectLocalVariable var___init__;
    PyObjectLocalVariable var___str__;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_defaults_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_a29bf7b3b71fbb8ef25655c7091b08b9;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    tmp_assign_source_2 = const_str_digest_63c4d244f9b605cb25bc97175ab02bac;
    assert( var___doc__.object == NULL );
    var___doc__.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    tmp_assign_source_3 = const_tuple_3866cf064071516dd9f2d31820e48b6c_tuple;
    assert( var__WARNING_DETAILS.object == NULL );
    var__WARNING_DETAILS.object = INCREASE_REFCOUNT( tmp_assign_source_3 );

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_98d894a87dbe365881621f68a4727c11, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_defaults_1 = const_tuple_none_none_tuple;
    tmp_assign_source_4 = MAKE_FUNCTION_function_1___init___of_class_35_WarningMessage_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_1 ) );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_4 );

        frame_function->f_lineno = 1385;
        goto frame_exception_exit_1;
    }
    assert( var___init__.object == NULL );
    var___init__.object = tmp_assign_source_4;

    tmp_assign_source_5 = MAKE_FUNCTION_function_2___str___of_class_35_WarningMessage_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_5 );

        frame_function->f_lineno = 1395;
        goto frame_exception_exit_1;
    }
    assert( var___str__.object == NULL );
    var___str__.object = tmp_assign_source_5;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    if ((var__WARNING_DETAILS.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain__WARNING_DETAILS,
            var__WARNING_DETAILS.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var___str__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___str__,
            var___str__.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    if ((var__WARNING_DETAILS.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain__WARNING_DETAILS,
            var__WARNING_DETAILS.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var___str__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___str__,
            var___str__.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}


static PyObject *impl_function_1___init___of_class_35_WarningMessage_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_message, PyObject *_python_par_category, PyObject *_python_par_filename, PyObject *_python_par_lineno, PyObject *_python_par_file, PyObject *_python_par_line )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_message; par_message.object = _python_par_message;
    PyObjectLocalVariable par_category; par_category.object = _python_par_category;
    PyObjectLocalVariable par_filename; par_filename.object = _python_par_filename;
    PyObjectLocalVariable par_lineno; par_lineno.object = _python_par_lineno;
    PyObjectLocalVariable par_file; par_file.object = _python_par_file;
    PyObjectLocalVariable par_line; par_line.object = _python_par_line;
    PyObjectLocalVariable var_local_values;
    PyObjectLocalVariable var_attr;
    PyObjectTempVariable tmp_for_loop_1__for_iterator;
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_setattr_attr_1;
    PyObject *tmp_setattr_target_1;
    PyObject *tmp_setattr_value_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    int tmp_tried_lineno_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = PyDict_New();
    if ((var_local_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_1,
            const_str_plain_local_values,
            var_local_values.object
        );

    }
    if ((var_attr.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_1,
            const_str_plain_attr,
            var_attr.object
        );

    }
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_1,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_message.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_1,
            const_str_plain_message,
            par_message.object
        );

    }
    if ((par_category.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_1,
            const_str_plain_category,
            par_category.object
        );

    }
    if ((par_filename.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_1,
            const_str_plain_filename,
            par_filename.object
        );

    }
    if ((par_lineno.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_1,
            const_str_plain_lineno,
            par_lineno.object
        );

    }
    if ((par_file.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_1,
            const_str_plain_file,
            par_file.object
        );

    }
    if ((par_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_assign_source_1,
            const_str_plain_line,
            par_line.object
        );

    }
    assert( var_local_values.object == NULL );
    var_local_values.object = tmp_assign_source_1;

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_4a1f1f88c13f070a06219af346830685, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1388;
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__WARNING_DETAILS );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1388;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1388;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator.object == NULL );
    tmp_for_loop_1__for_iterator.object = tmp_assign_source_2;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator.object;

    tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_3 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1388;
            goto try_finally_handler_1;
        }
    }

    if (tmp_for_loop_1__iter_value.object == NULL)
    {
        tmp_for_loop_1__iter_value.object = tmp_assign_source_3;
    }
    else
    {
        PyObject *old = tmp_for_loop_1__iter_value.object;
        tmp_for_loop_1__iter_value.object = tmp_assign_source_3;
        Py_DECREF( old );
    }
    tmp_assign_source_4 = tmp_for_loop_1__iter_value.object;

    if (var_attr.object == NULL)
    {
        var_attr.object = INCREASE_REFCOUNT( tmp_assign_source_4 );
    }
    else
    {
        PyObject *old = var_attr.object;
        var_attr.object = INCREASE_REFCOUNT( tmp_assign_source_4 );
        Py_DECREF( old );
    }
    tmp_setattr_target_1 = par_self.object;

    if ( tmp_setattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1389;
        goto try_finally_handler_1;
    }

    tmp_setattr_attr_1 = var_attr.object;

    tmp_subscr_target_1 = var_local_values.object;

    if ( tmp_subscr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217747 ], 58, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1389;
        goto try_finally_handler_1;
    }

    tmp_subscr_subscript_1 = var_attr.object;

    tmp_setattr_value_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_setattr_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1389;
        goto try_finally_handler_1;
    }
    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
    Py_DECREF( tmp_setattr_value_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1389;
        goto try_finally_handler_1;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1388;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( tmp_for_loop_1__iter_value.object );
    tmp_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator.object );
    tmp_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto frame_exception_exit_1;
    }

    goto finally_end_1;
    finally_end_1:;
    tmp_cond_value_1 = par_category.object;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217805 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1390;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1390;
        goto frame_exception_exit_1;
    }
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_2 = par_category.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217805 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1391;
        goto frame_exception_exit_1;
    }

    tmp_assattr_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___name__ );
    if ( tmp_assattr_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1391;
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_1 = par_self.object;

    if ( tmp_assattr_target_1 == NULL )
    {
        Py_DECREF( tmp_assattr_name_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1391;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__category_name, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_name_1 );

        frame_function->f_lineno = 1391;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_1 );
    goto branch_end_1;
    branch_no_1:;
    tmp_assattr_name_2 = Py_None;
    tmp_assattr_target_2 = par_self.object;

    if ( tmp_assattr_target_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1393;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__category_name, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1393;
        goto frame_exception_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_local_values.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_local_values,
            var_local_values.object
        );

    }
    if ((var_attr.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_attr,
            var_attr.object
        );

    }
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_message.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_message,
            par_message.object
        );

    }
    if ((par_category.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_category,
            par_category.object
        );

    }
    if ((par_filename.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_filename,
            par_filename.object
        );

    }
    if ((par_lineno.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_lineno,
            par_lineno.object
        );

    }
    if ((par_file.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_file,
            par_file.object
        );

    }
    if ((par_line.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_line,
            par_line.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1___init___of_class_35_WarningMessage_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_message = NULL;
    PyObject *_python_par_category = NULL;
    PyObject *_python_par_filename = NULL;
    PyObject *_python_par_lineno = NULL;
    PyObject *_python_par_file = NULL;
    PyObject *_python_par_line = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_message == key )
            {
                assert( _python_par_message == NULL );
                _python_par_message = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_category == key )
            {
                assert( _python_par_category == NULL );
                _python_par_category = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_filename == key )
            {
                assert( _python_par_filename == NULL );
                _python_par_filename = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_lineno == key )
            {
                assert( _python_par_lineno == NULL );
                _python_par_lineno = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_file == key )
            {
                assert( _python_par_file == NULL );
                _python_par_file = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_line == key )
            {
                assert( _python_par_line == NULL );
                _python_par_line = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_message, key ) == 1 )
            {
                assert( _python_par_message == NULL );
                _python_par_message = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_category, key ) == 1 )
            {
                assert( _python_par_category == NULL );
                _python_par_category = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_filename, key ) == 1 )
            {
                assert( _python_par_filename == NULL );
                _python_par_filename = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_lineno, key ) == 1 )
            {
                assert( _python_par_lineno == NULL );
                _python_par_lineno = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_file, key ) == 1 )
            {
                assert( _python_par_file == NULL );
                _python_par_file = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_line, key ) == 1 )
            {
                assert( _python_par_line == NULL );
                _python_par_line = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 7 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 7  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 7 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_message != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_message = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_message == NULL )
    {
        if ( 1 + self->m_defaults_given >= 7  )
        {
            _python_par_message = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 7 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_category != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_category = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_category == NULL )
    {
        if ( 2 + self->m_defaults_given >= 7  )
        {
            _python_par_category = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 7 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_filename != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_filename = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_filename == NULL )
    {
        if ( 3 + self->m_defaults_given >= 7  )
        {
            _python_par_filename = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 7 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 4 < args_given ))
    {
         if (unlikely( _python_par_lineno != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 4 );
             goto error_exit;
         }

        _python_par_lineno = INCREASE_REFCOUNT( args[ 4 ] );
    }
    else if ( _python_par_lineno == NULL )
    {
        if ( 4 + self->m_defaults_given >= 7  )
        {
            _python_par_lineno = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 4 - 7 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 5 < args_given ))
    {
         if (unlikely( _python_par_file != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 5 );
             goto error_exit;
         }

        _python_par_file = INCREASE_REFCOUNT( args[ 5 ] );
    }
    else if ( _python_par_file == NULL )
    {
        if ( 5 + self->m_defaults_given >= 7  )
        {
            _python_par_file = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 5 - 7 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 6 < args_given ))
    {
         if (unlikely( _python_par_line != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 6 );
             goto error_exit;
         }

        _python_par_line = INCREASE_REFCOUNT( args[ 6 ] );
    }
    else if ( _python_par_line == NULL )
    {
        if ( 6 + self->m_defaults_given >= 7  )
        {
            _python_par_line = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 6 - 7 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_message == NULL || _python_par_category == NULL || _python_par_filename == NULL || _python_par_lineno == NULL || _python_par_file == NULL || _python_par_line == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_message, _python_par_category, _python_par_filename, _python_par_lineno, _python_par_file, _python_par_line };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1___init___of_class_35_WarningMessage_of_module_numpy$testing$utils( self, _python_par_self, _python_par_message, _python_par_category, _python_par_filename, _python_par_lineno, _python_par_file, _python_par_line );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_message );
    Py_XDECREF( _python_par_category );
    Py_XDECREF( _python_par_filename );
    Py_XDECREF( _python_par_lineno );
    Py_XDECREF( _python_par_file );
    Py_XDECREF( _python_par_line );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_35_WarningMessage_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 7 )
    {
        return impl_function_1___init___of_class_35_WarningMessage_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_35_WarningMessage_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___str___of_class_35_WarningMessage_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_627976217598cea86afee608efc331ef, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_binop_left_1 = const_str_digest_6615c0a39a952966fb0597d294f044fa;
    tmp_binop_right_1 = PyTuple_New( 5 );
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {
        Py_DECREF( tmp_binop_right_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1397;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_message );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_1 );

        frame_function->f_lineno = 1397;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_1, 0, tmp_tuple_element_1 );
    tmp_source_name_2 = par_self.object;

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_binop_right_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1397;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__category_name );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_1 );

        frame_function->f_lineno = 1397;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_1, 1, tmp_tuple_element_1 );
    tmp_source_name_3 = par_self.object;

    if ( tmp_source_name_3 == NULL )
    {
        Py_DECREF( tmp_binop_right_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1398;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_filename );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_1 );

        frame_function->f_lineno = 1398;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_1, 2, tmp_tuple_element_1 );
    tmp_source_name_4 = par_self.object;

    if ( tmp_source_name_4 == NULL )
    {
        Py_DECREF( tmp_binop_right_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1398;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_lineno );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_1 );

        frame_function->f_lineno = 1398;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_1, 3, tmp_tuple_element_1 );
    tmp_source_name_5 = par_self.object;

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_binop_right_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1398;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_line );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_1 );

        frame_function->f_lineno = 1398;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_1, 4, tmp_tuple_element_1 );
    tmp_return_value = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1396;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_2___str___of_class_35_WarningMessage_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__str__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__str__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2___str___of_class_35_WarningMessage_of_module_numpy$testing$utils( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2___str___of_class_35_WarningMessage_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_2___str___of_class_35_WarningMessage_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___str___of_class_35_WarningMessage_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_36_WarningManager_of_module_numpy$testing$utils(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___doc__;
    PyObjectLocalVariable var___init__;
    PyObjectLocalVariable var___enter__;
    PyObjectLocalVariable var___exit__;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_defaults_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_a29bf7b3b71fbb8ef25655c7091b08b9;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    tmp_assign_source_2 = const_str_digest_6a84b36aa6d3c48fbbafd2ea8b609c34;
    assert( var___doc__.object == NULL );
    var___doc__.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_66c0aae1b22554663bb5a8740cf914d3, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_defaults_1 = const_tuple_false_none_tuple;
    tmp_assign_source_3 = MAKE_FUNCTION_function_1___init___of_class_36_WarningManager_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_1 ) );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_3 );

        frame_function->f_lineno = 1424;
        goto frame_exception_exit_1;
    }
    assert( var___init__.object == NULL );
    var___init__.object = tmp_assign_source_3;

    tmp_assign_source_4 = MAKE_FUNCTION_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_4 );

        frame_function->f_lineno = 1432;
        goto frame_exception_exit_1;
    }
    assert( var___enter__.object == NULL );
    var___enter__.object = tmp_assign_source_4;

    tmp_assign_source_5 = MAKE_FUNCTION_function_3___exit___of_class_36_WarningManager_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_5 );

        frame_function->f_lineno = 1448;
        goto frame_exception_exit_1;
    }
    assert( var___exit__.object == NULL );
    var___exit__.object = tmp_assign_source_5;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var___enter__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___enter__,
            var___enter__.object
        );

    }
    if ((var___exit__.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain___exit__,
            var___exit__.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    if ((var___init__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___init__,
            var___init__.object
        );

    }
    if ((var___enter__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___enter__,
            var___enter__.object
        );

    }
    if ((var___exit__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___exit__,
            var___exit__.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}


static PyObject *impl_function_1___init___of_class_36_WarningManager_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_record, PyObject *_python_par_module )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectLocalVariable par_record; par_record.object = _python_par_record;
    PyObjectLocalVariable par_module; par_module.object = _python_par_module;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_name_4;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assattr_target_4;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_frame_locals;
    bool tmp_is_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_a0b8a2849f4cfb5582b4cef583bf0ee8, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_assattr_name_1 = par_record.object;

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217859 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1425;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = par_self.object;

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1425;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__record, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1425;
        goto frame_exception_exit_1;
    }
    tmp_compare_left_1 = par_module.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 47503 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1426;
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if (tmp_is_1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5370 ], 32, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1427;
        goto frame_exception_exit_1;
    }

    tmp_subscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_modules );
    if ( tmp_subscr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1427;
        goto frame_exception_exit_1;
    }
    tmp_subscr_subscript_1 = const_str_plain_warnings;
    tmp_assattr_name_2 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    Py_DECREF( tmp_subscr_target_1 );
    if ( tmp_assattr_name_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1427;
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_2 = par_self.object;

    if ( tmp_assattr_target_2 == NULL )
    {
        Py_DECREF( tmp_assattr_name_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1427;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__module, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        frame_function->f_lineno = 1427;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );
    goto branch_end_1;
    branch_no_1:;
    tmp_assattr_name_3 = par_module.object;

    if ( tmp_assattr_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 47503 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1429;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_3 = par_self.object;

    if ( tmp_assattr_target_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1429;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__module, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1429;
        goto frame_exception_exit_1;
    }
    branch_end_1:;
    tmp_assattr_name_4 = Py_False;
    tmp_assattr_target_4 = par_self.object;

    if ( tmp_assattr_target_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1430;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain__entered, tmp_assattr_name_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1430;
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    if ((par_record.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_record,
            par_record.object
        );

    }
    if ((par_module.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_module,
            par_module.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1___init___of_class_36_WarningManager_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_record = NULL;
    PyObject *_python_par_module = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_record == key )
            {
                assert( _python_par_record == NULL );
                _python_par_record = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_module == key )
            {
                assert( _python_par_module == NULL );
                _python_par_module = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_record, key ) == 1 )
            {
                assert( _python_par_record == NULL );
                _python_par_record = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_module, key ) == 1 )
            {
                assert( _python_par_module == NULL );
                _python_par_module = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_record != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_record = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_record == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_record = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_module != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_module = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_module == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_module = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_record == NULL || _python_par_module == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_record, _python_par_module };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1___init___of_class_36_WarningManager_of_module_numpy$testing$utils( self, _python_par_self, _python_par_record, _python_par_module );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_record );
    Py_XDECREF( _python_par_module );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_36_WarningManager_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_1___init___of_class_36_WarningManager_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_36_WarningManager_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObjectSharedLocalVariable var_log;
    PyObjectLocalVariable var_showwarning;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_name_4;
    PyObject *tmp_assattr_name_5;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assattr_target_4;
    PyObject *tmp_assattr_target_5;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    Py_ssize_t tmp_slice_index_upper_1;
    PyObject *tmp_slice_source_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_6e2ca22f9270fb7793b1faad80d3e375, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1433;
        goto frame_exception_exit_1;
    }

    tmp_cond_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__entered );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1433;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        frame_function->f_lineno = 1433;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_binop_left_1 = const_str_digest_41e55c57c7d6194d65db50576a717684;
    tmp_binop_right_1 = par_self.object;

    if ( tmp_binop_right_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1434;
        goto frame_exception_exit_1;
    }

    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1434;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1434;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_RuntimeError, tmp_make_exception_arg_1 );
    Py_DECREF( tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1434;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 1434;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_assattr_name_1 = Py_True;
    tmp_assattr_target_1 = par_self.object;

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1435;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__entered, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1435;
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = par_self.object;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1436;
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__module );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1436;
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_filters );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_assattr_name_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1436;
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_2 = par_self.object;

    if ( tmp_assattr_target_2 == NULL )
    {
        Py_DECREF( tmp_assattr_name_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1436;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__filters, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        frame_function->f_lineno = 1436;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = PY_SSIZE_T_MAX;
    tmp_source_name_4 = par_self.object;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1437;
        goto frame_exception_exit_1;
    }

    tmp_slice_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__filters );
    if ( tmp_slice_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1437;
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_3 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    Py_DECREF( tmp_slice_source_1 );
    if ( tmp_assattr_name_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1437;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = par_self.object;

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_assattr_name_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1437;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__module );
    if ( tmp_assattr_target_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_name_3 );

        frame_function->f_lineno = 1437;
        goto frame_exception_exit_1;
    }
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_filters, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_name_3 );
        Py_DECREF( tmp_assattr_target_3 );

        frame_function->f_lineno = 1437;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_3 );
    Py_DECREF( tmp_assattr_target_3 );
    tmp_source_name_7 = par_self.object;

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1438;
        goto frame_exception_exit_1;
    }

    tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__module );
    if ( tmp_source_name_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1438;
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_showwarning );
    Py_DECREF( tmp_source_name_6 );
    if ( tmp_assattr_name_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1438;
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_4 = par_self.object;

    if ( tmp_assattr_target_4 == NULL )
    {
        Py_DECREF( tmp_assattr_name_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1438;
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain__showwarning, tmp_assattr_name_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_name_4 );

        frame_function->f_lineno = 1438;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_4 );
    tmp_source_name_8 = par_self.object;

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1439;
        goto frame_exception_exit_1;
    }

    tmp_cond_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__record );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1439;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        frame_function->f_lineno = 1439;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if (tmp_cond_truth_2 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_1 = PyList_New( 0 );
    if (var_log.storage->object == NULL)
    {
        var_log.storage->object = tmp_assign_source_1;
    }
    else
    {
        PyObject *old = var_log.storage->object;
        var_log.storage->object = tmp_assign_source_1;
        Py_DECREF( old );
    }
    tmp_assign_source_2 = MAKE_FUNCTION_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils( var_log );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_2 );

        frame_function->f_lineno = 1441;
        goto frame_exception_exit_1;
    }
    assert( var_showwarning.object == NULL );
    var_showwarning.object = tmp_assign_source_2;

    tmp_assattr_name_5 = var_showwarning.object;

    tmp_source_name_9 = par_self.object;

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1443;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_5 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__module );
    if ( tmp_assattr_target_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1443;
        goto frame_exception_exit_1;
    }
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain_showwarning, tmp_assattr_name_5 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_target_5 );

        frame_function->f_lineno = 1443;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_target_5 );
    tmp_return_value = var_log.storage->object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217911 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1444;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    goto branch_end_2;
    branch_no_2:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_log.storage != NULL && var_log.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_log,
            var_log.storage->object
        );

    }
    if ((var_showwarning.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_showwarning,
            var_showwarning.object
        );

    }
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__enter__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__enter__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // The context of the function.
    struct _context_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils_t *_python_context = (struct _context_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalVariable par_args; par_args.object = _python_par_args;
    PyObjectLocalVariable par_kwargs; par_kwargs.object = _python_par_kwargs;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_called_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_5a273d1a230dccfab02b6fd1e7218036, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = _python_context->closure_log.storage->object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217911 ], 49, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1442;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_append );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1442;
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_WarningMessage );

    if (unlikely( tmp_dircall_arg1_1 == NULL ))
    {
        tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_WarningMessage );
    }

    if ( tmp_dircall_arg1_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 217960 ], 43, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1442;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg2_1 = par_args.object;

    if ( tmp_dircall_arg2_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5435 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1442;
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg3_1 = par_kwargs.object;

    if ( tmp_dircall_arg3_1 == NULL )
    {
        Py_DECREF( tmp_called_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 71458 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1442;
        goto frame_exception_exit_1;
    }

    tmp_call_arg_element_1 = impl_function_2_complex_call_helper_star_list_star_dict_of_module___internal__( INCREASE_REFCOUNT( tmp_dircall_arg1_1 ), INCREASE_REFCOUNT( tmp_dircall_arg2_1 ), INCREASE_REFCOUNT( tmp_dircall_arg3_1 ) );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_called_1 );

        frame_function->f_lineno = 1442;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1442;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_1, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1442;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((_python_context->closure_log.storage != NULL && _python_context->closure_log.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_log,
            _python_context->closure_log.storage->object
        );

    }
    if ((par_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_args,
            par_args.object
        );

    }
    if ((par_kwargs.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kwargs,
            par_kwargs.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "showwarning() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "showwarning() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "showwarning() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 0 )
    {
        _python_par_args = PyTuple_New( args_size - 0 );

        for( Py_ssize_t i = 0; i < args_size - 0; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[0+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( const_tuple_empty );
    }


    return impl_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils( self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils( self, MAKE_TUPLE( &args[ 0 ], size > 0 ? size-0 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3___exit___of_class_36_WarningManager_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_self; par_self.object = _python_par_self;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_54ba2290323f4310ca47fe6b2f312ba7, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_source_name_1 = par_self.object;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1449;
        goto frame_exception_exit_1;
    }

    tmp_cond_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__entered );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1449;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        frame_function->f_lineno = 1449;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_binop_left_1 = const_str_digest_c3436da65ce3789859f5d3e930c77680;
    tmp_binop_right_1 = par_self.object;

    if ( tmp_binop_right_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1450;
        goto frame_exception_exit_1;
    }

    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1450;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1450;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_RuntimeError, tmp_make_exception_arg_1 );
    Py_DECREF( tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1450;
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 1450;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_source_name_2 = par_self.object;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1451;
        goto frame_exception_exit_1;
    }

    tmp_assattr_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__filters );
    if ( tmp_assattr_name_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1451;
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = par_self.object;

    if ( tmp_source_name_3 == NULL )
    {
        Py_DECREF( tmp_assattr_name_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1451;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__module );
    if ( tmp_assattr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_name_1 );

        frame_function->f_lineno = 1451;
        goto frame_exception_exit_1;
    }
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_filters, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_target_1 );

        frame_function->f_lineno = 1451;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_1 );
    Py_DECREF( tmp_assattr_target_1 );
    tmp_source_name_4 = par_self.object;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1452;
        goto frame_exception_exit_1;
    }

    tmp_assattr_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__showwarning );
    if ( tmp_assattr_name_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1452;
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = par_self.object;

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_assattr_name_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 50 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1452;
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__module );
    if ( tmp_assattr_target_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        frame_function->f_lineno = 1452;
        goto frame_exception_exit_1;
    }
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_showwarning, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_target_2 );

        frame_function->f_lineno = 1452;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );
    Py_DECREF( tmp_assattr_target_2 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((par_self.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_self,
            par_self.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_3___exit___of_class_36_WarningManager_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__exit__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_self, key ) == 1 )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__exit__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_3___exit___of_class_36_WarningManager_of_module_numpy$testing$utils( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3___exit___of_class_36_WarningManager_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_3___exit___of_class_36_WarningManager_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3___exit___of_class_36_WarningManager_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_37_assert_warns_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_warning_class, PyObject *_python_par_func, PyObject *_python_par_args, PyObject *_python_par_kw )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_warning_class; par_warning_class.object = _python_par_warning_class;
    PyObjectLocalVariable par_func; par_func.object = _python_par_func;
    PyObjectLocalVariable par_args; par_args.object = _python_par_args;
    PyObjectLocalVariable par_kw; par_kw.object = _python_par_kw;
    PyObjectLocalVariable var_l;
    PyObjectLocalVariable var_result;
    PyObjectTempVariable tmp_with_1__source;
    PyObjectTempVariable tmp_with_1__exit;
    PyObjectTempVariable tmp_with_1__enter;
    PyObjectTempVariable tmp_with_1__indicator;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_attr_source_1;
    PyObject *tmp_attr_source_2;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    int tmp_cmp_Gt_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_frame_locals;
    bool tmp_is_1;
    bool tmp_isnot_1;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_subscript_2;
    PyObject *tmp_subscr_target_1;
    PyObject *tmp_subscr_target_2;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_dd907b1d8bbb9843f9d130607ce17045, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_warnings );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6827 ], 37, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1482;
        goto try_finally_handler_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_catch_warnings );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1482;
        goto try_finally_handler_1;
    }
    tmp_call_kw_1 = PyDict_Copy( const_dict_aae7649b9175b1ed5738500d56e46831 );
    frame_function->f_lineno = 1482;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_1, tmp_call_kw_1 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1482;
        goto try_finally_handler_1;
    }
    assert( tmp_with_1__source.object == NULL );
    tmp_with_1__source.object = tmp_assign_source_1;

    tmp_attr_source_1 = tmp_with_1__source.object;

    tmp_assign_source_2 = LOOKUP_SPECIAL( tmp_attr_source_1, const_str_plain___exit__ );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1482;
        goto try_finally_handler_1;
    }
    assert( tmp_with_1__exit.object == NULL );
    tmp_with_1__exit.object = tmp_assign_source_2;

    tmp_attr_source_2 = tmp_with_1__source.object;

    tmp_called_2 = LOOKUP_SPECIAL( tmp_attr_source_2, const_str_plain___enter__ );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1482;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1482;
    tmp_assign_source_3 = CALL_FUNCTION_NO_ARGS( tmp_called_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1482;
        goto try_finally_handler_1;
    }
    assert( tmp_with_1__enter.object == NULL );
    tmp_with_1__enter.object = tmp_assign_source_3;

    tmp_assign_source_4 = Py_True;
    assert( tmp_with_1__indicator.object == NULL );
    tmp_with_1__indicator.object = INCREASE_REFCOUNT( tmp_assign_source_4 );

    // Tried code
    // Tried block of try/except
    tmp_assign_source_5 = tmp_with_1__enter.object;

    assert( var_l.object == NULL );
    var_l.object = INCREASE_REFCOUNT( tmp_assign_source_5 );

    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_warnings );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6827 ], 37, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1483;
        goto try_except_handler_1;
    }

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_simplefilter );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1483;
        goto try_except_handler_1;
    }
    tmp_call_arg_element_1 = const_str_plain_always;
    frame_function->f_lineno = 1483;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1483;
        goto try_except_handler_1;
    }
    Py_DECREF( tmp_unused );
    tmp_dircall_arg1_1 = par_func.object;

    if ( tmp_dircall_arg1_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 47143 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1484;
        goto try_except_handler_1;
    }

    tmp_dircall_arg2_1 = par_args.object;

    if ( tmp_dircall_arg2_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5435 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1484;
        goto try_except_handler_1;
    }

    tmp_dircall_arg3_1 = par_kw.object;

    if ( tmp_dircall_arg3_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6911 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1484;
        goto try_except_handler_1;
    }

    tmp_assign_source_6 = impl_function_2_complex_call_helper_star_list_star_dict_of_module___internal__( INCREASE_REFCOUNT( tmp_dircall_arg1_1 ), INCREASE_REFCOUNT( tmp_dircall_arg2_1 ), INCREASE_REFCOUNT( tmp_dircall_arg3_1 ) );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1484;
        goto try_except_handler_1;
    }
    assert( var_result.object == NULL );
    var_result.object = tmp_assign_source_6;

    tmp_len_arg_1 = var_l.object;

    tmp_compare_left_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1485;
        goto try_except_handler_1;
    }
    tmp_compare_right_1 = const_int_0;
    tmp_cmp_Gt_1 = RICH_COMPARE_BOOL_GT( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Gt_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        frame_function->f_lineno = 1485;
        goto try_except_handler_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    if (tmp_cmp_Gt_1 == 1)
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_binop_left_1 = const_str_digest_8f6c4ce8673a7969a1a7f3729b7f0ba0;
    tmp_source_name_3 = par_func.object;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 47143 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1487;
        goto try_except_handler_1;
    }

    tmp_binop_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain___name__ );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1487;
        goto try_except_handler_1;
    }
    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1486;
        goto try_except_handler_1;
    }
    frame_function->f_lineno = 1486;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_1 );
    Py_DECREF( tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1486;
        goto try_except_handler_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 1486;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_except_handler_1;
    branch_no_1:;
    tmp_subscr_target_1 = var_l.object;

    tmp_subscr_subscript_1 = const_int_0;
    tmp_source_name_4 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1488;
        goto try_except_handler_1;
    }
    tmp_compare_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_category );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1488;
        goto try_except_handler_1;
    }
    tmp_compare_right_2 = par_warning_class.object;

    if ( tmp_compare_right_2 == NULL )
    {
        Py_DECREF( tmp_compare_left_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218003 ], 59, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1488;
        goto try_except_handler_1;
    }

    tmp_isnot_1 = ( tmp_compare_left_2 != tmp_compare_right_2 );
    Py_DECREF( tmp_compare_left_2 );
    if (tmp_isnot_1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_binop_left_2 = const_str_digest_81311c6c7b12df70d1d2f74b37384cc2;
    tmp_binop_right_2 = PyTuple_New( 3 );
    tmp_source_name_5 = par_func.object;

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_binop_right_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 47143 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1490;
        goto try_except_handler_1;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain___name__ );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_2 );

        frame_function->f_lineno = 1490;
        goto try_except_handler_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_2, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_warning_class.object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_binop_right_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218003 ], 59, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1490;
        goto try_except_handler_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_binop_right_2, 1, tmp_tuple_element_1 );
    tmp_subscr_target_2 = var_l.object;

    tmp_subscr_subscript_2 = const_int_0;
    tmp_tuple_element_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_2, tmp_subscr_subscript_2 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_2 );

        frame_function->f_lineno = 1490;
        goto try_except_handler_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_2, 2, tmp_tuple_element_1 );
    tmp_make_exception_arg_2 = BINARY_OPERATION_REMAINDER( tmp_binop_left_2, tmp_binop_right_2 );
    Py_DECREF( tmp_binop_right_2 );
    if ( tmp_make_exception_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1489;
        goto try_except_handler_1;
    }
    frame_function->f_lineno = 1489;
    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_2 );
    Py_DECREF( tmp_make_exception_arg_2 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1489;
        goto try_except_handler_1;
    }
    exception_type = tmp_raise_type_2;
    frame_function->f_lineno = 1489;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_except_handler_1;
    branch_no_2:;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_3 = PyThreadState_GET()->exc_type;
    tmp_compare_right_3 = PyExc_BaseException;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );



        goto try_finally_handler_2;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_7 = Py_False;
    if (tmp_with_1__indicator.object == NULL)
    {
        tmp_with_1__indicator.object = INCREASE_REFCOUNT( tmp_assign_source_7 );
    }
    else
    {
        PyObject *old = tmp_with_1__indicator.object;
        tmp_with_1__indicator.object = INCREASE_REFCOUNT( tmp_assign_source_7 );
        Py_DECREF( old );
    }
    tmp_called_4 = tmp_with_1__exit.object;

    tmp_call_arg_element_2 = PyThreadState_GET()->exc_type;
    tmp_call_arg_element_3 = PyThreadState_GET()->exc_value;
    tmp_call_arg_element_4 = PyThreadState_GET()->exc_traceback;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_4, tmp_call_arg_element_2, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );



        goto try_finally_handler_2;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );


        goto try_finally_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_no_4;
    }
    else
    {
        goto branch_yes_4;
    }
    branch_yes_4:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_2;
    branch_no_4:;
    goto branch_end_3;
    branch_no_3:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_2;
    branch_end_3:;
    try_except_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    tmp_compare_left_4 = tmp_with_1__indicator.object;

    tmp_compare_right_4 = Py_True;
    tmp_is_1 = ( tmp_compare_left_4 == tmp_compare_right_4 );
    if (tmp_is_1)
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_called_5 = tmp_with_1__exit.object;

    tmp_call_arg_element_5 = Py_None;
    tmp_call_arg_element_6 = Py_None;
    tmp_call_arg_element_7 = Py_None;
    tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_5, tmp_call_arg_element_5, tmp_call_arg_element_6, tmp_call_arg_element_7 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );



        goto try_finally_handler_error_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_5:;
    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_1;
    }

    goto finally_end_1;
    try_finally_handler_error_1:;
    Py_XDECREF( exception_keeper_type_1 );exception_keeper_type_1 = NULL;
    Py_XDECREF( exception_keeper_value_1 );exception_keeper_value_1 = NULL;
    Py_XDECREF( exception_keeper_tb_1 );exception_keeper_tb_1 = NULL;
    goto try_finally_handler_1;
    finally_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_with_1__source.object );
    tmp_with_1__source.object = NULL;

    Py_XDECREF( tmp_with_1__enter.object );
    tmp_with_1__enter.object = NULL;

    Py_XDECREF( tmp_with_1__exit.object );
    tmp_with_1__exit.object = NULL;

    Py_XDECREF( tmp_with_1__indicator.object );
    tmp_with_1__indicator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto frame_exception_exit_1;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_return_value = var_result.object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 19941 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1491;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_l.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_l,
            var_l.object
        );

    }
    if ((var_result.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_result,
            var_result.object
        );

    }
    if ((par_warning_class.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_warning_class,
            par_warning_class.object
        );

    }
    if ((par_func.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_func,
            par_func.object
        );

    }
    if ((par_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_args,
            par_args.object
        );

    }
    if ((par_kw.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kw,
            par_kw.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_37_assert_warns_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_warning_class = NULL;
    PyObject *_python_par_func = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kw = NULL;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kw = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kw = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "assert_warns() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "assert_warns() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kw = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kw = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "assert_warns() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kw = PyDict_New();
        }
    }

    // Check if argument warning_class was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kw, const_str_plain_warning_class );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_warning_class == NULL );

            _python_par_warning_class = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kw, const_str_plain_warning_class );

            kw_found += 1;
        }
    }

    // Check if argument func was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kw, const_str_plain_func );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_func == NULL );

            _python_par_func = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kw, const_str_plain_func );

            kw_found += 1;
        }
    }

    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_warning_class != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_warning_class = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_warning_class == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_warning_class = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_func != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_func = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_func == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_func = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_warning_class == NULL || _python_par_func == NULL ))
    {
        PyObject *values[] = { _python_par_warning_class, _python_par_func };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 2 )
    {
        _python_par_args = PyTuple_New( args_size - 2 );

        for( Py_ssize_t i = 0; i < args_size - 2; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[2+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( const_tuple_empty );
    }


    return impl_function_37_assert_warns_of_module_numpy$testing$utils( self, _python_par_warning_class, _python_par_func, _python_par_args, _python_par_kw );

error_exit:;

    Py_XDECREF( _python_par_warning_class );
    Py_XDECREF( _python_par_func );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kw );

    return NULL;
}

static PyObject *dparse_function_37_assert_warns_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4 )
    {
        return impl_function_37_assert_warns_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), MAKE_TUPLE( &args[ 2 ], size > 2 ? size-2 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_37_assert_warns_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_38_assert_no_warnings_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_func, PyObject *_python_par_args, PyObject *_python_par_kw )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable par_func; par_func.object = _python_par_func;
    PyObjectLocalVariable par_args; par_args.object = _python_par_args;
    PyObjectLocalVariable par_kw; par_kw.object = _python_par_kw;
    PyObjectLocalVariable var_l;
    PyObjectLocalVariable var_result;
    PyObjectTempVariable tmp_with_1__source;
    PyObjectTempVariable tmp_with_1__exit;
    PyObjectTempVariable tmp_with_1__enter;
    PyObjectTempVariable tmp_with_1__indicator;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_attr_source_1;
    PyObject *tmp_attr_source_2;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    int tmp_cmp_Gt_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_frame_locals;
    bool tmp_is_1;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_708193586fe6ba2cb2a5fa9f4861daa2, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Tried code
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_warnings );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6827 ], 37, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1513;
        goto try_finally_handler_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_catch_warnings );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1513;
        goto try_finally_handler_1;
    }
    tmp_call_kw_1 = PyDict_Copy( const_dict_aae7649b9175b1ed5738500d56e46831 );
    frame_function->f_lineno = 1513;
    tmp_assign_source_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_1, tmp_call_kw_1 );
    Py_DECREF( tmp_called_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1513;
        goto try_finally_handler_1;
    }
    assert( tmp_with_1__source.object == NULL );
    tmp_with_1__source.object = tmp_assign_source_1;

    tmp_attr_source_1 = tmp_with_1__source.object;

    tmp_assign_source_2 = LOOKUP_SPECIAL( tmp_attr_source_1, const_str_plain___exit__ );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1513;
        goto try_finally_handler_1;
    }
    assert( tmp_with_1__exit.object == NULL );
    tmp_with_1__exit.object = tmp_assign_source_2;

    tmp_attr_source_2 = tmp_with_1__source.object;

    tmp_called_2 = LOOKUP_SPECIAL( tmp_attr_source_2, const_str_plain___enter__ );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1513;
        goto try_finally_handler_1;
    }
    frame_function->f_lineno = 1513;
    tmp_assign_source_3 = CALL_FUNCTION_NO_ARGS( tmp_called_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1513;
        goto try_finally_handler_1;
    }
    assert( tmp_with_1__enter.object == NULL );
    tmp_with_1__enter.object = tmp_assign_source_3;

    tmp_assign_source_4 = Py_True;
    assert( tmp_with_1__indicator.object == NULL );
    tmp_with_1__indicator.object = INCREASE_REFCOUNT( tmp_assign_source_4 );

    // Tried code
    // Tried block of try/except
    tmp_assign_source_5 = tmp_with_1__enter.object;

    assert( var_l.object == NULL );
    var_l.object = INCREASE_REFCOUNT( tmp_assign_source_5 );

    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_warnings );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6827 ], 37, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1514;
        goto try_except_handler_1;
    }

    tmp_called_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_simplefilter );
    if ( tmp_called_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1514;
        goto try_except_handler_1;
    }
    tmp_call_arg_element_1 = const_str_plain_always;
    frame_function->f_lineno = 1514;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_3, tmp_call_arg_element_1 );
    Py_DECREF( tmp_called_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1514;
        goto try_except_handler_1;
    }
    Py_DECREF( tmp_unused );
    tmp_dircall_arg1_1 = par_func.object;

    if ( tmp_dircall_arg1_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 47143 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1515;
        goto try_except_handler_1;
    }

    tmp_dircall_arg2_1 = par_args.object;

    if ( tmp_dircall_arg2_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 5435 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1515;
        goto try_except_handler_1;
    }

    tmp_dircall_arg3_1 = par_kw.object;

    if ( tmp_dircall_arg3_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6911 ], 48, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1515;
        goto try_except_handler_1;
    }

    tmp_assign_source_6 = impl_function_2_complex_call_helper_star_list_star_dict_of_module___internal__( INCREASE_REFCOUNT( tmp_dircall_arg1_1 ), INCREASE_REFCOUNT( tmp_dircall_arg2_1 ), INCREASE_REFCOUNT( tmp_dircall_arg3_1 ) );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1515;
        goto try_except_handler_1;
    }
    assert( var_result.object == NULL );
    var_result.object = tmp_assign_source_6;

    tmp_len_arg_1 = var_l.object;

    tmp_compare_left_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1516;
        goto try_except_handler_1;
    }
    tmp_compare_right_1 = const_int_0;
    tmp_cmp_Gt_1 = RICH_COMPARE_BOOL_GT( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Gt_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        frame_function->f_lineno = 1516;
        goto try_except_handler_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    if (tmp_cmp_Gt_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_binop_left_1 = const_str_digest_7503219a820c3e9ee0c0edb6797a5738;
    tmp_binop_right_1 = PyTuple_New( 2 );
    tmp_source_name_3 = par_func.object;

    if ( tmp_source_name_3 == NULL )
    {
        Py_DECREF( tmp_binop_right_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 47143 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1518;
        goto try_except_handler_1;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain___name__ );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_binop_right_1 );

        frame_function->f_lineno = 1518;
        goto try_except_handler_1;
    }
    PyTuple_SET_ITEM( tmp_binop_right_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_l.object;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_binop_right_1, 1, tmp_tuple_element_1 );
    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1517;
        goto try_except_handler_1;
    }
    frame_function->f_lineno = 1517;
    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_AssertionError, tmp_make_exception_arg_1 );
    Py_DECREF( tmp_make_exception_arg_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1517;
        goto try_except_handler_1;
    }
    exception_type = tmp_raise_type_1;
    frame_function->f_lineno = 1517;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto try_except_handler_1;
    branch_no_1:;
    goto try_except_end_1;
    try_except_handler_1:;
    // Exception handler of try/except
    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_function );
    if (exception_tb == NULL)
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function || exception_tb->tb_lineno != frame_function->f_lineno )
    {
        exception_tb = ADD_TRACEBACK( frame_function, exception_tb );
    }

    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    PUBLISH_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_BaseException;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );



        goto try_finally_handler_2;
    }
    if (tmp_exc_match_exception_match_1 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_7 = Py_False;
    if (tmp_with_1__indicator.object == NULL)
    {
        tmp_with_1__indicator.object = INCREASE_REFCOUNT( tmp_assign_source_7 );
    }
    else
    {
        PyObject *old = tmp_with_1__indicator.object;
        tmp_with_1__indicator.object = INCREASE_REFCOUNT( tmp_assign_source_7 );
        Py_DECREF( old );
    }
    tmp_called_4 = tmp_with_1__exit.object;

    tmp_call_arg_element_2 = PyThreadState_GET()->exc_type;
    tmp_call_arg_element_3 = PyThreadState_GET()->exc_value;
    tmp_call_arg_element_4 = PyThreadState_GET()->exc_traceback;
    tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_4, tmp_call_arg_element_2, tmp_call_arg_element_3, tmp_call_arg_element_4 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );



        goto try_finally_handler_2;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );


        goto try_finally_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_no_3;
    }
    else
    {
        goto branch_yes_3;
    }
    branch_yes_3:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_2;
    branch_no_3:;
    goto branch_end_2;
    branch_no_2:;
    RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (exception_tb && exception_tb->tb_frame == frame_function) frame_function->f_lineno = exception_tb->tb_lineno;
    goto try_finally_handler_2;
    branch_end_2:;
    try_except_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    tmp_compare_left_3 = tmp_with_1__indicator.object;

    tmp_compare_right_3 = Py_True;
    tmp_is_1 = ( tmp_compare_left_3 == tmp_compare_right_3 );
    if (tmp_is_1)
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_5 = tmp_with_1__exit.object;

    tmp_call_arg_element_5 = Py_None;
    tmp_call_arg_element_6 = Py_None;
    tmp_call_arg_element_7 = Py_None;
    tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_5, tmp_call_arg_element_5, tmp_call_arg_element_6, tmp_call_arg_element_7 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );



        goto try_finally_handler_error_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_4:;
    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_1;
    }

    goto finally_end_1;
    try_finally_handler_error_1:;
    Py_XDECREF( exception_keeper_type_1 );exception_keeper_type_1 = NULL;
    Py_XDECREF( exception_keeper_value_1 );exception_keeper_value_1 = NULL;
    Py_XDECREF( exception_keeper_tb_1 );exception_keeper_tb_1 = NULL;
    goto try_finally_handler_1;
    finally_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( tmp_with_1__source.object );
    tmp_with_1__source.object = NULL;

    Py_XDECREF( tmp_with_1__enter.object );
    tmp_with_1__enter.object = NULL;

    Py_XDECREF( tmp_with_1__exit.object );
    tmp_with_1__exit.object = NULL;

    Py_XDECREF( tmp_with_1__indicator.object );
    tmp_with_1__indicator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto frame_exception_exit_1;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_return_value = var_result.object;

    if ( tmp_return_value == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 19941 ], 52, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1519;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((var_l.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_l,
            var_l.object
        );

    }
    if ((var_result.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_result,
            var_result.object
        );

    }
    if ((par_func.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_func,
            par_func.object
        );

    }
    if ((par_args.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_args,
            par_args.object
        );

    }
    if ((par_kw.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_kw,
            par_kw.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_function_38_assert_no_warnings_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_func = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kw = NULL;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kw = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kw = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "assert_no_warnings() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( (PyDictObject *)kw) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "assert_no_warnings() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kw = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kw = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            Py_ssize_t size = mp->ma_keys->dk_size;
            for ( Py_ssize_t i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "assert_no_warnings() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kw, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kw = PyDict_New();
        }
    }

    // Check if argument func was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kw, const_str_plain_func );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_func == NULL );

            _python_par_func = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kw, const_str_plain_func );

            kw_found += 1;
        }
    }

    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_func != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_func = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_func == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_func = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_func == NULL ))
    {
        PyObject *values[] = { _python_par_func };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( const_tuple_empty );
    }


    return impl_function_38_assert_no_warnings_of_module_numpy$testing$utils( self, _python_par_func, _python_par_args, _python_par_kw );

error_exit:;

    Py_XDECREF( _python_par_func );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kw );

    return NULL;
}

static PyObject *dparse_function_38_assert_no_warnings_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_38_assert_no_warnings_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_38_assert_no_warnings_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_function_39__gen_alignment_data_of_module_numpy$testing$utils_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectSharedLocalVariable closure_dtype;
    PyObjectLocalVariable closure_type;
    PyObjectLocalVariable closure_max_size;
    PyObjectLocalVariable closure_ufmt;
    PyObjectLocalVariable closure_bfmt;
    PyObjectSharedLocalVariable closure_o;
    PyObjectSharedLocalVariable closure_s;
    PyObjectLocalVariable closure_inp;
    PyObjectLocalVariable closure_out;
    PyObjectLocalVariable closure_inp1;
    PyObjectLocalVariable closure_inp2;
    PyObjectTempVariable closure_for_loop_1__for_iterator;
    PyObjectTempVariable closure_for_loop_1__iter_value;
    PyObjectTempVariable closure_for_loop_2__for_iterator;
    PyObjectTempVariable closure_for_loop_2__iter_value;
};

static void _context_generator_function_39__gen_alignment_data_of_module_numpy$testing$utils_destructor( void *context_voidptr )
{
    _context_generator_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *_python_context = (struct _context_generator_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *)context_voidptr;

    delete _python_context;
}

#ifdef _NUITKA_MAKECONTEXT_INTS
static void function_39__gen_alignment_data_of_module_numpy$testing$utils_context( int generator_address_1, int generator_address_2 )
{
    // Restore the pointer from ints should it be necessary, often it can be
    // directly received.
    int generator_addresses[2] = {
        generator_address_1,
        generator_address_2
    };

    Nuitka_GeneratorObject *generator = (Nuitka_GeneratorObject *)*(uintptr_t *)&generator_addresses[0];
#else
static void function_39__gen_alignment_data_of_module_numpy$testing$utils_context( Nuitka_GeneratorObject *generator )
{
#endif

    assertObject( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Make context accessible if one is used.

    NUITKA_MAY_BE_UNUSED struct _context_generator_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *_python_context = (_context_generator_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *)generator->m_context;


    // Local variable inits
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_left_3;
    PyObject *tmp_binop_left_4;
    PyObject *tmp_binop_left_5;
    PyObject *tmp_binop_left_6;
    PyObject *tmp_binop_left_7;
    PyObject *tmp_binop_left_8;
    PyObject *tmp_binop_left_9;
    PyObject *tmp_binop_left_10;
    PyObject *tmp_binop_left_11;
    PyObject *tmp_binop_left_12;
    PyObject *tmp_binop_left_13;
    PyObject *tmp_binop_left_14;
    PyObject *tmp_binop_left_15;
    PyObject *tmp_binop_left_16;
    PyObject *tmp_binop_left_17;
    PyObject *tmp_binop_left_18;
    PyObject *tmp_binop_left_19;
    PyObject *tmp_binop_left_20;
    PyObject *tmp_binop_left_21;
    PyObject *tmp_binop_left_22;
    PyObject *tmp_binop_left_23;
    PyObject *tmp_binop_left_24;
    PyObject *tmp_binop_left_25;
    PyObject *tmp_binop_left_26;
    PyObject *tmp_binop_left_27;
    PyObject *tmp_binop_left_28;
    PyObject *tmp_binop_left_29;
    PyObject *tmp_binop_left_30;
    PyObject *tmp_binop_left_31;
    PyObject *tmp_binop_left_32;
    PyObject *tmp_binop_left_33;
    PyObject *tmp_binop_left_34;
    PyObject *tmp_binop_left_35;
    PyObject *tmp_binop_left_36;
    PyObject *tmp_binop_left_37;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_binop_right_3;
    PyObject *tmp_binop_right_4;
    PyObject *tmp_binop_right_5;
    PyObject *tmp_binop_right_6;
    PyObject *tmp_binop_right_7;
    PyObject *tmp_binop_right_8;
    PyObject *tmp_binop_right_9;
    PyObject *tmp_binop_right_10;
    PyObject *tmp_binop_right_11;
    PyObject *tmp_binop_right_12;
    PyObject *tmp_binop_right_13;
    PyObject *tmp_binop_right_14;
    PyObject *tmp_binop_right_15;
    PyObject *tmp_binop_right_16;
    PyObject *tmp_binop_right_17;
    PyObject *tmp_binop_right_18;
    PyObject *tmp_binop_right_19;
    PyObject *tmp_binop_right_20;
    PyObject *tmp_binop_right_21;
    PyObject *tmp_binop_right_22;
    PyObject *tmp_binop_right_23;
    PyObject *tmp_binop_right_24;
    PyObject *tmp_binop_right_25;
    PyObject *tmp_binop_right_26;
    PyObject *tmp_binop_right_27;
    PyObject *tmp_binop_right_28;
    PyObject *tmp_binop_right_29;
    PyObject *tmp_binop_right_30;
    PyObject *tmp_binop_right_31;
    PyObject *tmp_binop_right_32;
    PyObject *tmp_binop_right_33;
    PyObject *tmp_binop_right_34;
    PyObject *tmp_binop_right_35;
    PyObject *tmp_binop_right_36;
    PyObject *tmp_binop_right_37;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_kw_2;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_call_pos_2;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_called_6;
    PyObject *tmp_called_7;
    PyObject *tmp_called_8;
    PyObject *tmp_called_9;
    PyObject *tmp_called_10;
    PyObject *tmp_called_11;
    PyObject *tmp_called_12;
    PyObject *tmp_called_13;
    PyObject *tmp_called_14;
    PyObject *tmp_called_15;
    PyObject *tmp_called_16;
    PyObject *tmp_called_17;
    PyObject *tmp_called_18;
    PyObject *tmp_called_19;
    PyObject *tmp_called_20;
    PyObject *tmp_called_21;
    PyObject *tmp_called_22;
    PyObject *tmp_called_23;
    PyObject *tmp_called_24;
    PyObject *tmp_called_25;
    PyObject *tmp_called_26;
    PyObject *tmp_called_27;
    PyObject *tmp_called_28;
    PyObject *tmp_called_29;
    PyObject *tmp_called_30;
    PyObject *tmp_called_31;
    PyObject *tmp_called_32;
    PyObject *tmp_called_33;
    PyObject *tmp_called_34;
    PyObject *tmp_called_35;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_range2_high_1;
    PyObject *tmp_range2_low_1;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    Py_ssize_t tmp_slice_index_upper_6;
    Py_ssize_t tmp_slice_index_upper_7;
    Py_ssize_t tmp_slice_index_upper_8;
    Py_ssize_t tmp_slice_index_upper_9;
    Py_ssize_t tmp_slice_index_upper_10;
    Py_ssize_t tmp_slice_index_upper_11;
    Py_ssize_t tmp_slice_index_upper_12;
    Py_ssize_t tmp_slice_index_upper_13;
    Py_ssize_t tmp_slice_index_upper_14;
    Py_ssize_t tmp_slice_index_upper_15;
    Py_ssize_t tmp_slice_index_upper_16;
    Py_ssize_t tmp_slice_index_upper_17;
    Py_ssize_t tmp_slice_index_upper_18;
    Py_ssize_t tmp_slice_index_upper_19;
    Py_ssize_t tmp_slice_index_upper_20;
    Py_ssize_t tmp_slice_index_upper_21;
    Py_ssize_t tmp_slice_index_upper_22;
    Py_ssize_t tmp_slice_index_upper_23;
    Py_ssize_t tmp_slice_index_upper_24;
    Py_ssize_t tmp_slice_index_upper_25;
    Py_ssize_t tmp_slice_index_upper_26;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_lower_2;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_source_6;
    PyObject *tmp_slice_source_7;
    PyObject *tmp_slice_source_8;
    PyObject *tmp_slice_source_9;
    PyObject *tmp_slice_source_10;
    PyObject *tmp_slice_source_11;
    PyObject *tmp_slice_source_12;
    PyObject *tmp_slice_source_13;
    PyObject *tmp_slice_source_14;
    PyObject *tmp_slice_source_15;
    PyObject *tmp_slice_source_16;
    PyObject *tmp_slice_source_17;
    PyObject *tmp_slice_source_18;
    PyObject *tmp_slice_source_19;
    PyObject *tmp_slice_source_20;
    PyObject *tmp_slice_source_21;
    PyObject *tmp_slice_source_22;
    PyObject *tmp_slice_source_23;
    PyObject *tmp_slice_source_24;
    PyObject *tmp_slice_source_25;
    PyObject *tmp_slice_source_26;
    PyObject *tmp_slice_source_27;
    PyObject *tmp_slice_source_28;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    Py_ssize_t tmp_sliceslicedel_index_lower_6;
    Py_ssize_t tmp_sliceslicedel_index_lower_7;
    Py_ssize_t tmp_sliceslicedel_index_lower_8;
    Py_ssize_t tmp_sliceslicedel_index_lower_9;
    Py_ssize_t tmp_sliceslicedel_index_lower_10;
    Py_ssize_t tmp_sliceslicedel_index_lower_11;
    Py_ssize_t tmp_sliceslicedel_index_lower_12;
    Py_ssize_t tmp_sliceslicedel_index_lower_13;
    Py_ssize_t tmp_sliceslicedel_index_lower_14;
    Py_ssize_t tmp_sliceslicedel_index_lower_15;
    Py_ssize_t tmp_sliceslicedel_index_lower_16;
    Py_ssize_t tmp_sliceslicedel_index_lower_17;
    Py_ssize_t tmp_sliceslicedel_index_lower_18;
    Py_ssize_t tmp_sliceslicedel_index_lower_19;
    Py_ssize_t tmp_sliceslicedel_index_lower_20;
    Py_ssize_t tmp_sliceslicedel_index_lower_21;
    Py_ssize_t tmp_sliceslicedel_index_lower_22;
    Py_ssize_t tmp_sliceslicedel_index_lower_23;
    Py_ssize_t tmp_sliceslicedel_index_lower_24;
    Py_ssize_t tmp_sliceslicedel_index_lower_25;
    Py_ssize_t tmp_sliceslicedel_index_lower_26;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_tuple_element_8;
    PyObject *tmp_tuple_element_9;
    PyObject *tmp_tuple_element_10;
    PyObject *tmp_tuple_element_11;
    PyObject *tmp_tuple_element_12;
    PyObject *tmp_tuple_element_13;
    PyObject *tmp_tuple_element_14;
    PyObject *tmp_tuple_element_15;
    PyObject *tmp_tuple_element_16;
    PyObject *tmp_tuple_element_17;
    PyObject *tmp_tuple_element_18;
    PyObject *tmp_tuple_element_19;
    PyObject *tmp_tuple_element_20;
    PyObject *tmp_tuple_element_21;
    PyObject *tmp_tuple_element_22;
    PyObject *tmp_tuple_element_23;
    PyObject *tmp_tuple_element_24;
    PyObject *tmp_tuple_element_25;
    PyObject *tmp_tuple_element_26;
    PyObject *tmp_tuple_element_27;
    PyObject *tmp_tuple_element_28;
    PyObject *tmp_tuple_element_29;
    PyObject *tmp_tuple_element_30;
    PyObject *tmp_tuple_element_31;
    PyObject *tmp_tuple_element_32;
    PyObject *tmp_tuple_element_33;
    PyObject *tmp_tuple_element_34;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    PyObject *tmp_yield_1;
    PyObject *tmp_yield_2;
    PyObject *tmp_yield_3;
    PyObject *tmp_yield_4;
    PyObject *tmp_yield_5;
    PyObject *tmp_yield_6;
    PyObject *tmp_yield_7;
    PyObject *tmp_yield_8;
    PyObject *tmp_yield_9;
    PyObject *tmp_yield_10;
    PyObject *tmp_yield_11;
    PyObject *tmp_yield_12;
    PyObject *tmp_yield_13;
    PyObject *tmp_yield_14;
    PyObject *tmp_yield_15;

    // Actual function code.
    PyFrameObject *frame_function = MAKE_FRAME( codeobj_0f5319ef418a98d307499590a6a4161b, module_numpy$testing$utils );

    Py_INCREF( frame_function );
    generator->m_frame = frame_function;
#if PYTHON_VERSION >= 340
    frame_function->f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->f_back );

    generator->m_frame->f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->f_back );

    PyThreadState_GET()->frame = generator->m_frame;

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    // Throwing into unstarted generators is possible. As they don't stand any
    // chance to deal with them, we might as well create traceback on the
    // outside,
    if ( generator->m_exception_type )
    {
        generator->m_yielded = NULL;

        exception_type = generator->m_exception_type;
        generator->m_exception_type = NULL;

        exception_value = generator->m_exception_value;
        generator->m_exception_value = NULL;

        exception_tb = generator->m_exception_tb;;
        generator->m_exception_tb = NULL;

        if (exception_tb == NULL)
        {
            goto frame_exception_exit_1;
        }
        else
        {
            goto function_exception_exit;
        }
    }

    tmp_assign_source_1 = const_str_digest_762d604a9c6488fb528b0ba62876f69f;
    assert( _python_context->closure_ufmt.object == NULL );
    _python_context->closure_ufmt.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    tmp_assign_source_2 = const_str_digest_43beb5f139ed80a3cbd558fede4ca34a;
    assert( _python_context->closure_bfmt.object == NULL );
    _python_context->closure_bfmt.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    tmp_iter_arg_1 = const_tuple_int_0_int_pos_1_int_pos_2_tuple;
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1549;
        goto frame_exception_exit_1;
    }
    assert( _python_context->closure_for_loop_1__for_iterator.object == NULL );
    _python_context->closure_for_loop_1__for_iterator.object = tmp_assign_source_3;

    // Tried code
    loop_start_1:;
    tmp_next_source_1 = _python_context->closure_for_loop_1__for_iterator.object;

    tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
    if (tmp_assign_source_4 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_1;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1549;
            goto try_finally_handler_1;
        }
    }

    if (_python_context->closure_for_loop_1__iter_value.object == NULL)
    {
        _python_context->closure_for_loop_1__iter_value.object = tmp_assign_source_4;
    }
    else
    {
        PyObject *old = _python_context->closure_for_loop_1__iter_value.object;
        _python_context->closure_for_loop_1__iter_value.object = tmp_assign_source_4;
        Py_DECREF( old );
    }
    tmp_assign_source_5 = _python_context->closure_for_loop_1__iter_value.object;

    if (_python_context->closure_o.storage->object == NULL)
    {
        _python_context->closure_o.storage->object = INCREASE_REFCOUNT( tmp_assign_source_5 );
    }
    else
    {
        PyObject *old = _python_context->closure_o.storage->object;
        _python_context->closure_o.storage->object = INCREASE_REFCOUNT( tmp_assign_source_5 );
        Py_DECREF( old );
    }
    tmp_binop_left_1 = _python_context->closure_o.storage->object;

    if ( tmp_binop_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1550;
        goto try_finally_handler_1;
    }

    tmp_binop_right_1 = const_int_pos_2;
    tmp_range2_low_1 = BINARY_OPERATION_ADD( tmp_binop_left_1, tmp_binop_right_1 );
    if ( tmp_range2_low_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1550;
        goto try_finally_handler_1;
    }
    tmp_called_1 = LOOKUP_BUILTIN( const_str_plain_max );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_range2_low_1 );

        frame_function->f_lineno = 1550;
        goto try_finally_handler_1;
    }
    tmp_binop_left_2 = _python_context->closure_o.storage->object;

    if ( tmp_binop_left_2 == NULL )
    {
        Py_DECREF( tmp_range2_low_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1550;
        goto try_finally_handler_1;
    }

    tmp_binop_right_2 = const_int_pos_3;
    tmp_call_arg_element_1 = BINARY_OPERATION_ADD( tmp_binop_left_2, tmp_binop_right_2 );
    if ( tmp_call_arg_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_range2_low_1 );

        frame_function->f_lineno = 1550;
        goto try_finally_handler_1;
    }
    tmp_call_arg_element_2 = _python_context->closure_max_size.object;

    if ( tmp_call_arg_element_2 == NULL )
    {
        Py_DECREF( tmp_range2_low_1 );
        Py_DECREF( tmp_call_arg_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218062 ], 54, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1550;
        goto try_finally_handler_1;
    }

    frame_function->f_lineno = 1550;
    tmp_range2_high_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_1, tmp_call_arg_element_1, tmp_call_arg_element_2 );
    Py_DECREF( tmp_call_arg_element_1 );
    if ( tmp_range2_high_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_range2_low_1 );

        frame_function->f_lineno = 1550;
        goto try_finally_handler_1;
    }
    tmp_iter_arg_2 = BUILTIN_RANGE2( tmp_range2_low_1, tmp_range2_high_1 );
    Py_DECREF( tmp_range2_low_1 );
    Py_DECREF( tmp_range2_high_1 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1550;
        goto try_finally_handler_1;
    }
    tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1550;
        goto try_finally_handler_1;
    }
    if (_python_context->closure_for_loop_2__for_iterator.object == NULL)
    {
        _python_context->closure_for_loop_2__for_iterator.object = tmp_assign_source_6;
    }
    else
    {
        PyObject *old = _python_context->closure_for_loop_2__for_iterator.object;
        _python_context->closure_for_loop_2__for_iterator.object = tmp_assign_source_6;
        Py_DECREF( old );
    }
    // Tried code
    loop_start_2:;
    tmp_next_source_2 = _python_context->closure_for_loop_2__for_iterator.object;

    tmp_assign_source_7 = ITERATOR_NEXT( tmp_next_source_2 );
    if (tmp_assign_source_7 == NULL)
    {
        if ( !ERROR_OCCURED() || HAS_STOP_ITERATION_OCCURED() )
        {

    goto loop_end_2;

        }
        else
        {

            PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        frame_function->f_lineno = 1550;
            goto try_finally_handler_2;
        }
    }

    if (_python_context->closure_for_loop_2__iter_value.object == NULL)
    {
        _python_context->closure_for_loop_2__iter_value.object = tmp_assign_source_7;
    }
    else
    {
        PyObject *old = _python_context->closure_for_loop_2__iter_value.object;
        _python_context->closure_for_loop_2__iter_value.object = tmp_assign_source_7;
        Py_DECREF( old );
    }
    tmp_assign_source_8 = _python_context->closure_for_loop_2__iter_value.object;

    if (_python_context->closure_s.storage->object == NULL)
    {
        _python_context->closure_s.storage->object = INCREASE_REFCOUNT( tmp_assign_source_8 );
    }
    else
    {
        PyObject *old = _python_context->closure_s.storage->object;
        _python_context->closure_s.storage->object = INCREASE_REFCOUNT( tmp_assign_source_8 );
        Py_DECREF( old );
    }
    tmp_compare_left_1 = _python_context->closure_type.object;

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25149 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1551;
        goto try_finally_handler_2;
    }

    tmp_compare_right_1 = const_str_plain_unary;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1551;
        goto try_finally_handler_2;
    }
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_assign_source_9 = MAKE_FUNCTION_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( _python_context->closure_dtype, _python_context->closure_o, _python_context->closure_s );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_9 );

        frame_function->f_lineno = 1552;
        goto try_finally_handler_2;
    }
    if (_python_context->closure_inp.object == NULL)
    {
        _python_context->closure_inp.object = tmp_assign_source_9;
    }
    else
    {
        PyObject *old = _python_context->closure_inp.object;
        _python_context->closure_inp.object = tmp_assign_source_9;
        Py_DECREF( old );
    }
    tmp_called_2 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_empty );

    if (unlikely( tmp_called_2 == NULL ))
    {
        tmp_called_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_empty );
    }

    if ( tmp_called_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 69177 ], 34, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1553;
        goto try_finally_handler_2;
    }

    tmp_call_pos_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = PyTuple_New( 1 );
    tmp_tuple_element_2 = _python_context->closure_s.storage->object;

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_tuple_element_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1553;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_tuple_element_1, 0, tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    tmp_call_kw_1 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = _python_context->closure_dtype.storage->object;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1553;
        goto try_finally_handler_2;
    }

    tmp_dict_key_1 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    frame_function->f_lineno = 1553;
    tmp_slice_source_1 = CALL_FUNCTION( tmp_called_2, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_slice_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1553;
        goto try_finally_handler_2;
    }
    tmp_slice_lower_1 = _python_context->closure_o.storage->object;

    if ( tmp_slice_lower_1 == NULL )
    {
        Py_DECREF( tmp_slice_source_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1553;
        goto try_finally_handler_2;
    }

    tmp_assign_source_10 = LOOKUP_SLICE( tmp_slice_source_1, tmp_slice_lower_1, Py_None );
    Py_DECREF( tmp_slice_source_1 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1553;
        goto try_finally_handler_2;
    }
    if (_python_context->closure_out.object == NULL)
    {
        _python_context->closure_out.object = tmp_assign_source_10;
    }
    else
    {
        PyObject *old = _python_context->closure_out.object;
        _python_context->closure_out.object = tmp_assign_source_10;
        Py_DECREF( old );
    }
    tmp_yield_1 = PyTuple_New( 3 );
    tmp_tuple_element_3 = _python_context->closure_out.object;

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_yield_1, 0, tmp_tuple_element_3 );
    tmp_called_3 = _python_context->closure_inp.object;

    frame_function->f_lineno = 1554;
    tmp_tuple_element_3 = CALL_FUNCTION_NO_ARGS( tmp_called_3 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_1 );

        frame_function->f_lineno = 1554;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_1, 1, tmp_tuple_element_3 );
    tmp_binop_left_3 = _python_context->closure_ufmt.object;

    if ( tmp_binop_left_3 == NULL )
    {
        Py_DECREF( tmp_yield_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218116 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1554;
        goto try_finally_handler_2;
    }

    tmp_binop_right_3 = PyTuple_New( 5 );
    tmp_tuple_element_4 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_yield_1 );
        Py_DECREF( tmp_binop_right_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1554;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_binop_right_3, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_yield_1 );
        Py_DECREF( tmp_binop_right_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1554;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_binop_right_3, 1, tmp_tuple_element_4 );
    tmp_tuple_element_4 = _python_context->closure_s.storage->object;

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_yield_1 );
        Py_DECREF( tmp_binop_right_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1554;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_binop_right_3, 2, tmp_tuple_element_4 );
    tmp_tuple_element_4 = _python_context->closure_dtype.storage->object;

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_yield_1 );
        Py_DECREF( tmp_binop_right_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1554;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_binop_right_3, 3, tmp_tuple_element_4 );
    tmp_tuple_element_4 = const_str_digest_882f2ed7f1573d008d695fb792817c72;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_binop_right_3, 4, tmp_tuple_element_4 );
    tmp_tuple_element_3 = BINARY_OPERATION_REMAINDER( tmp_binop_left_3, tmp_binop_right_3 );
    Py_DECREF( tmp_binop_right_3 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_1 );

        frame_function->f_lineno = 1554;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_1, 2, tmp_tuple_element_3 );
    tmp_unused = YIELD( generator, tmp_yield_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1554;
        goto try_finally_handler_2;
    }
    tmp_yield_2 = PyTuple_New( 3 );
    tmp_called_4 = _python_context->closure_inp.object;

    frame_function->f_lineno = 1555;
    tmp_tuple_element_5 = CALL_FUNCTION_NO_ARGS( tmp_called_4 );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_2 );

        frame_function->f_lineno = 1555;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_2, 0, tmp_tuple_element_5 );
    tmp_called_5 = _python_context->closure_inp.object;

    frame_function->f_lineno = 1555;
    tmp_tuple_element_5 = CALL_FUNCTION_NO_ARGS( tmp_called_5 );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_2 );

        frame_function->f_lineno = 1555;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_2, 1, tmp_tuple_element_5 );
    tmp_binop_left_4 = _python_context->closure_ufmt.object;

    if ( tmp_binop_left_4 == NULL )
    {
        Py_DECREF( tmp_yield_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218116 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1555;
        goto try_finally_handler_2;
    }

    tmp_binop_right_4 = PyTuple_New( 5 );
    tmp_tuple_element_6 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_6 == NULL )
    {
        Py_DECREF( tmp_yield_2 );
        Py_DECREF( tmp_binop_right_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1555;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_binop_right_4, 0, tmp_tuple_element_6 );
    tmp_tuple_element_6 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_6 == NULL )
    {
        Py_DECREF( tmp_yield_2 );
        Py_DECREF( tmp_binop_right_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1555;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_binop_right_4, 1, tmp_tuple_element_6 );
    tmp_tuple_element_6 = _python_context->closure_s.storage->object;

    if ( tmp_tuple_element_6 == NULL )
    {
        Py_DECREF( tmp_yield_2 );
        Py_DECREF( tmp_binop_right_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1555;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_binop_right_4, 2, tmp_tuple_element_6 );
    tmp_tuple_element_6 = _python_context->closure_dtype.storage->object;

    if ( tmp_tuple_element_6 == NULL )
    {
        Py_DECREF( tmp_yield_2 );
        Py_DECREF( tmp_binop_right_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1555;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_binop_right_4, 3, tmp_tuple_element_6 );
    tmp_tuple_element_6 = const_str_digest_2288b7fcb22c5fc99af680fe674e2045;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_binop_right_4, 4, tmp_tuple_element_6 );
    tmp_tuple_element_5 = BINARY_OPERATION_REMAINDER( tmp_binop_left_4, tmp_binop_right_4 );
    Py_DECREF( tmp_binop_right_4 );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_2 );

        frame_function->f_lineno = 1555;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_2, 2, tmp_tuple_element_5 );
    tmp_unused = YIELD( generator, tmp_yield_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1555;
        goto try_finally_handler_2;
    }
    tmp_yield_3 = PyTuple_New( 3 );
    tmp_sliceslicedel_index_lower_1 = 1;
    tmp_slice_index_upper_1 = PY_SSIZE_T_MAX;
    tmp_slice_source_2 = _python_context->closure_out.object;

    tmp_tuple_element_7 = LOOKUP_INDEX_SLICE( tmp_slice_source_2, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_tuple_element_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_3 );

        frame_function->f_lineno = 1556;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_3, 0, tmp_tuple_element_7 );
    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = -1;
    tmp_called_6 = _python_context->closure_inp.object;

    frame_function->f_lineno = 1556;
    tmp_slice_source_3 = CALL_FUNCTION_NO_ARGS( tmp_called_6 );
    if ( tmp_slice_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_3 );

        frame_function->f_lineno = 1556;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_7 = LOOKUP_INDEX_SLICE( tmp_slice_source_3, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    Py_DECREF( tmp_slice_source_3 );
    if ( tmp_tuple_element_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_3 );

        frame_function->f_lineno = 1556;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_3, 1, tmp_tuple_element_7 );
    tmp_binop_left_5 = _python_context->closure_ufmt.object;

    if ( tmp_binop_left_5 == NULL )
    {
        Py_DECREF( tmp_yield_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218116 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1556;
        goto try_finally_handler_2;
    }

    tmp_binop_right_5 = PyTuple_New( 5 );
    tmp_binop_left_6 = _python_context->closure_o.storage->object;

    if ( tmp_binop_left_6 == NULL )
    {
        Py_DECREF( tmp_yield_3 );
        Py_DECREF( tmp_binop_right_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1557;
        goto try_finally_handler_2;
    }

    tmp_binop_right_6 = const_int_pos_1;
    tmp_tuple_element_8 = BINARY_OPERATION_ADD( tmp_binop_left_6, tmp_binop_right_6 );
    if ( tmp_tuple_element_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_3 );
        Py_DECREF( tmp_binop_right_5 );

        frame_function->f_lineno = 1557;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_5, 0, tmp_tuple_element_8 );
    tmp_tuple_element_8 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_8 == NULL )
    {
        Py_DECREF( tmp_yield_3 );
        Py_DECREF( tmp_binop_right_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1557;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_binop_right_5, 1, tmp_tuple_element_8 );
    tmp_binop_left_7 = _python_context->closure_s.storage->object;

    if ( tmp_binop_left_7 == NULL )
    {
        Py_DECREF( tmp_yield_3 );
        Py_DECREF( tmp_binop_right_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1557;
        goto try_finally_handler_2;
    }

    tmp_binop_right_7 = const_int_pos_1;
    tmp_tuple_element_8 = BINARY_OPERATION_SUB( tmp_binop_left_7, tmp_binop_right_7 );
    if ( tmp_tuple_element_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_3 );
        Py_DECREF( tmp_binop_right_5 );

        frame_function->f_lineno = 1557;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_5, 2, tmp_tuple_element_8 );
    tmp_tuple_element_8 = _python_context->closure_dtype.storage->object;

    if ( tmp_tuple_element_8 == NULL )
    {
        Py_DECREF( tmp_yield_3 );
        Py_DECREF( tmp_binop_right_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1557;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_binop_right_5, 3, tmp_tuple_element_8 );
    tmp_tuple_element_8 = const_str_digest_882f2ed7f1573d008d695fb792817c72;
    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_binop_right_5, 4, tmp_tuple_element_8 );
    tmp_tuple_element_7 = BINARY_OPERATION_REMAINDER( tmp_binop_left_5, tmp_binop_right_5 );
    Py_DECREF( tmp_binop_right_5 );
    if ( tmp_tuple_element_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_3 );

        frame_function->f_lineno = 1556;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_3, 2, tmp_tuple_element_7 );
    tmp_unused = YIELD( generator, tmp_yield_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1556;
        goto try_finally_handler_2;
    }
    tmp_yield_4 = PyTuple_New( 3 );
    tmp_sliceslicedel_index_lower_3 = 0;
    tmp_slice_index_upper_3 = -1;
    tmp_slice_source_4 = _python_context->closure_out.object;

    tmp_tuple_element_9 = LOOKUP_INDEX_SLICE( tmp_slice_source_4, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    if ( tmp_tuple_element_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_4 );

        frame_function->f_lineno = 1558;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_4, 0, tmp_tuple_element_9 );
    tmp_sliceslicedel_index_lower_4 = 1;
    tmp_slice_index_upper_4 = PY_SSIZE_T_MAX;
    tmp_called_7 = _python_context->closure_inp.object;

    frame_function->f_lineno = 1558;
    tmp_slice_source_5 = CALL_FUNCTION_NO_ARGS( tmp_called_7 );
    if ( tmp_slice_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_4 );

        frame_function->f_lineno = 1558;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_9 = LOOKUP_INDEX_SLICE( tmp_slice_source_5, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    Py_DECREF( tmp_slice_source_5 );
    if ( tmp_tuple_element_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_4 );

        frame_function->f_lineno = 1558;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_4, 1, tmp_tuple_element_9 );
    tmp_binop_left_8 = _python_context->closure_ufmt.object;

    if ( tmp_binop_left_8 == NULL )
    {
        Py_DECREF( tmp_yield_4 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218116 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1558;
        goto try_finally_handler_2;
    }

    tmp_binop_right_8 = PyTuple_New( 5 );
    tmp_tuple_element_10 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_10 == NULL )
    {
        Py_DECREF( tmp_yield_4 );
        Py_DECREF( tmp_binop_right_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1559;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_binop_right_8, 0, tmp_tuple_element_10 );
    tmp_binop_left_9 = _python_context->closure_o.storage->object;

    if ( tmp_binop_left_9 == NULL )
    {
        Py_DECREF( tmp_yield_4 );
        Py_DECREF( tmp_binop_right_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1559;
        goto try_finally_handler_2;
    }

    tmp_binop_right_9 = const_int_pos_1;
    tmp_tuple_element_10 = BINARY_OPERATION_ADD( tmp_binop_left_9, tmp_binop_right_9 );
    if ( tmp_tuple_element_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_4 );
        Py_DECREF( tmp_binop_right_8 );

        frame_function->f_lineno = 1559;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_8, 1, tmp_tuple_element_10 );
    tmp_binop_left_10 = _python_context->closure_s.storage->object;

    if ( tmp_binop_left_10 == NULL )
    {
        Py_DECREF( tmp_yield_4 );
        Py_DECREF( tmp_binop_right_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1559;
        goto try_finally_handler_2;
    }

    tmp_binop_right_10 = const_int_pos_1;
    tmp_tuple_element_10 = BINARY_OPERATION_SUB( tmp_binop_left_10, tmp_binop_right_10 );
    if ( tmp_tuple_element_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_4 );
        Py_DECREF( tmp_binop_right_8 );

        frame_function->f_lineno = 1559;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_8, 2, tmp_tuple_element_10 );
    tmp_tuple_element_10 = _python_context->closure_dtype.storage->object;

    if ( tmp_tuple_element_10 == NULL )
    {
        Py_DECREF( tmp_yield_4 );
        Py_DECREF( tmp_binop_right_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1559;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_binop_right_8, 3, tmp_tuple_element_10 );
    tmp_tuple_element_10 = const_str_digest_882f2ed7f1573d008d695fb792817c72;
    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_binop_right_8, 4, tmp_tuple_element_10 );
    tmp_tuple_element_9 = BINARY_OPERATION_REMAINDER( tmp_binop_left_8, tmp_binop_right_8 );
    Py_DECREF( tmp_binop_right_8 );
    if ( tmp_tuple_element_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_4 );

        frame_function->f_lineno = 1558;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_4, 2, tmp_tuple_element_9 );
    tmp_unused = YIELD( generator, tmp_yield_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1558;
        goto try_finally_handler_2;
    }
    tmp_yield_5 = PyTuple_New( 3 );
    tmp_sliceslicedel_index_lower_5 = 0;
    tmp_slice_index_upper_5 = -1;
    tmp_called_8 = _python_context->closure_inp.object;

    frame_function->f_lineno = 1560;
    tmp_slice_source_6 = CALL_FUNCTION_NO_ARGS( tmp_called_8 );
    if ( tmp_slice_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_5 );

        frame_function->f_lineno = 1560;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_11 = LOOKUP_INDEX_SLICE( tmp_slice_source_6, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    Py_DECREF( tmp_slice_source_6 );
    if ( tmp_tuple_element_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_5 );

        frame_function->f_lineno = 1560;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_5, 0, tmp_tuple_element_11 );
    tmp_sliceslicedel_index_lower_6 = 1;
    tmp_slice_index_upper_6 = PY_SSIZE_T_MAX;
    tmp_called_9 = _python_context->closure_inp.object;

    frame_function->f_lineno = 1560;
    tmp_slice_source_7 = CALL_FUNCTION_NO_ARGS( tmp_called_9 );
    if ( tmp_slice_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_5 );

        frame_function->f_lineno = 1560;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_11 = LOOKUP_INDEX_SLICE( tmp_slice_source_7, tmp_sliceslicedel_index_lower_6, tmp_slice_index_upper_6 );
    Py_DECREF( tmp_slice_source_7 );
    if ( tmp_tuple_element_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_5 );

        frame_function->f_lineno = 1560;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_5, 1, tmp_tuple_element_11 );
    tmp_binop_left_11 = _python_context->closure_ufmt.object;

    if ( tmp_binop_left_11 == NULL )
    {
        Py_DECREF( tmp_yield_5 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218116 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1560;
        goto try_finally_handler_2;
    }

    tmp_binop_right_11 = PyTuple_New( 5 );
    tmp_tuple_element_12 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_12 == NULL )
    {
        Py_DECREF( tmp_yield_5 );
        Py_DECREF( tmp_binop_right_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1561;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_12 );
    PyTuple_SET_ITEM( tmp_binop_right_11, 0, tmp_tuple_element_12 );
    tmp_binop_left_12 = _python_context->closure_o.storage->object;

    if ( tmp_binop_left_12 == NULL )
    {
        Py_DECREF( tmp_yield_5 );
        Py_DECREF( tmp_binop_right_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1561;
        goto try_finally_handler_2;
    }

    tmp_binop_right_12 = const_int_pos_1;
    tmp_tuple_element_12 = BINARY_OPERATION_ADD( tmp_binop_left_12, tmp_binop_right_12 );
    if ( tmp_tuple_element_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_5 );
        Py_DECREF( tmp_binop_right_11 );

        frame_function->f_lineno = 1561;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_11, 1, tmp_tuple_element_12 );
    tmp_binop_left_13 = _python_context->closure_s.storage->object;

    if ( tmp_binop_left_13 == NULL )
    {
        Py_DECREF( tmp_yield_5 );
        Py_DECREF( tmp_binop_right_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1561;
        goto try_finally_handler_2;
    }

    tmp_binop_right_13 = const_int_pos_1;
    tmp_tuple_element_12 = BINARY_OPERATION_SUB( tmp_binop_left_13, tmp_binop_right_13 );
    if ( tmp_tuple_element_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_5 );
        Py_DECREF( tmp_binop_right_11 );

        frame_function->f_lineno = 1561;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_11, 2, tmp_tuple_element_12 );
    tmp_tuple_element_12 = _python_context->closure_dtype.storage->object;

    if ( tmp_tuple_element_12 == NULL )
    {
        Py_DECREF( tmp_yield_5 );
        Py_DECREF( tmp_binop_right_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1561;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_12 );
    PyTuple_SET_ITEM( tmp_binop_right_11, 3, tmp_tuple_element_12 );
    tmp_tuple_element_12 = const_str_plain_aliased;
    Py_INCREF( tmp_tuple_element_12 );
    PyTuple_SET_ITEM( tmp_binop_right_11, 4, tmp_tuple_element_12 );
    tmp_tuple_element_11 = BINARY_OPERATION_REMAINDER( tmp_binop_left_11, tmp_binop_right_11 );
    Py_DECREF( tmp_binop_right_11 );
    if ( tmp_tuple_element_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_5 );

        frame_function->f_lineno = 1560;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_5, 2, tmp_tuple_element_11 );
    tmp_unused = YIELD( generator, tmp_yield_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1560;
        goto try_finally_handler_2;
    }
    tmp_yield_6 = PyTuple_New( 3 );
    tmp_sliceslicedel_index_lower_7 = 1;
    tmp_slice_index_upper_7 = PY_SSIZE_T_MAX;
    tmp_called_10 = _python_context->closure_inp.object;

    frame_function->f_lineno = 1562;
    tmp_slice_source_8 = CALL_FUNCTION_NO_ARGS( tmp_called_10 );
    if ( tmp_slice_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_6 );

        frame_function->f_lineno = 1562;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_13 = LOOKUP_INDEX_SLICE( tmp_slice_source_8, tmp_sliceslicedel_index_lower_7, tmp_slice_index_upper_7 );
    Py_DECREF( tmp_slice_source_8 );
    if ( tmp_tuple_element_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_6 );

        frame_function->f_lineno = 1562;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_6, 0, tmp_tuple_element_13 );
    tmp_sliceslicedel_index_lower_8 = 0;
    tmp_slice_index_upper_8 = -1;
    tmp_called_11 = _python_context->closure_inp.object;

    frame_function->f_lineno = 1562;
    tmp_slice_source_9 = CALL_FUNCTION_NO_ARGS( tmp_called_11 );
    if ( tmp_slice_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_6 );

        frame_function->f_lineno = 1562;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_13 = LOOKUP_INDEX_SLICE( tmp_slice_source_9, tmp_sliceslicedel_index_lower_8, tmp_slice_index_upper_8 );
    Py_DECREF( tmp_slice_source_9 );
    if ( tmp_tuple_element_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_6 );

        frame_function->f_lineno = 1562;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_6, 1, tmp_tuple_element_13 );
    tmp_binop_left_14 = _python_context->closure_ufmt.object;

    if ( tmp_binop_left_14 == NULL )
    {
        Py_DECREF( tmp_yield_6 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218116 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1562;
        goto try_finally_handler_2;
    }

    tmp_binop_right_14 = PyTuple_New( 5 );
    tmp_binop_left_15 = _python_context->closure_o.storage->object;

    if ( tmp_binop_left_15 == NULL )
    {
        Py_DECREF( tmp_yield_6 );
        Py_DECREF( tmp_binop_right_14 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1563;
        goto try_finally_handler_2;
    }

    tmp_binop_right_15 = const_int_pos_1;
    tmp_tuple_element_14 = BINARY_OPERATION_ADD( tmp_binop_left_15, tmp_binop_right_15 );
    if ( tmp_tuple_element_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_6 );
        Py_DECREF( tmp_binop_right_14 );

        frame_function->f_lineno = 1563;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_14, 0, tmp_tuple_element_14 );
    tmp_tuple_element_14 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_14 == NULL )
    {
        Py_DECREF( tmp_yield_6 );
        Py_DECREF( tmp_binop_right_14 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1563;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_binop_right_14, 1, tmp_tuple_element_14 );
    tmp_binop_left_16 = _python_context->closure_s.storage->object;

    if ( tmp_binop_left_16 == NULL )
    {
        Py_DECREF( tmp_yield_6 );
        Py_DECREF( tmp_binop_right_14 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1563;
        goto try_finally_handler_2;
    }

    tmp_binop_right_16 = const_int_pos_1;
    tmp_tuple_element_14 = BINARY_OPERATION_SUB( tmp_binop_left_16, tmp_binop_right_16 );
    if ( tmp_tuple_element_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_6 );
        Py_DECREF( tmp_binop_right_14 );

        frame_function->f_lineno = 1563;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_14, 2, tmp_tuple_element_14 );
    tmp_tuple_element_14 = _python_context->closure_dtype.storage->object;

    if ( tmp_tuple_element_14 == NULL )
    {
        Py_DECREF( tmp_yield_6 );
        Py_DECREF( tmp_binop_right_14 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1563;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_binop_right_14, 3, tmp_tuple_element_14 );
    tmp_tuple_element_14 = const_str_plain_aliased;
    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_binop_right_14, 4, tmp_tuple_element_14 );
    tmp_tuple_element_13 = BINARY_OPERATION_REMAINDER( tmp_binop_left_14, tmp_binop_right_14 );
    Py_DECREF( tmp_binop_right_14 );
    if ( tmp_tuple_element_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_6 );

        frame_function->f_lineno = 1562;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_6, 2, tmp_tuple_element_13 );
    tmp_unused = YIELD( generator, tmp_yield_6 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1562;
        goto try_finally_handler_2;
    }
    branch_no_1:;
    tmp_compare_left_2 = _python_context->closure_type.object;

    if ( tmp_compare_left_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 25149 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1564;
        goto try_finally_handler_2;
    }

    tmp_compare_right_2 = const_str_plain_binary;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1564;
        goto try_finally_handler_2;
    }
    if (tmp_cmp_Eq_2 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_11 = MAKE_FUNCTION_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( _python_context->closure_dtype, _python_context->closure_o, _python_context->closure_s );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_11 );

        frame_function->f_lineno = 1565;
        goto try_finally_handler_2;
    }
    if (_python_context->closure_inp1.object == NULL)
    {
        _python_context->closure_inp1.object = tmp_assign_source_11;
    }
    else
    {
        PyObject *old = _python_context->closure_inp1.object;
        _python_context->closure_inp1.object = tmp_assign_source_11;
        Py_DECREF( old );
    }
    tmp_assign_source_12 = MAKE_FUNCTION_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( _python_context->closure_dtype, _python_context->closure_o, _python_context->closure_s );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_12 );

        frame_function->f_lineno = 1566;
        goto try_finally_handler_2;
    }
    if (_python_context->closure_inp2.object == NULL)
    {
        _python_context->closure_inp2.object = tmp_assign_source_12;
    }
    else
    {
        PyObject *old = _python_context->closure_inp2.object;
        _python_context->closure_inp2.object = tmp_assign_source_12;
        Py_DECREF( old );
    }
    tmp_called_12 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_empty );

    if (unlikely( tmp_called_12 == NULL ))
    {
        tmp_called_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_empty );
    }

    if ( tmp_called_12 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 69177 ], 34, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1567;
        goto try_finally_handler_2;
    }

    tmp_call_pos_2 = PyTuple_New( 1 );
    tmp_tuple_element_15 = PyTuple_New( 1 );
    tmp_tuple_element_16 = _python_context->closure_s.storage->object;

    if ( tmp_tuple_element_16 == NULL )
    {
        Py_DECREF( tmp_call_pos_2 );
        Py_DECREF( tmp_tuple_element_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1567;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_16 );
    PyTuple_SET_ITEM( tmp_tuple_element_15, 0, tmp_tuple_element_16 );
    PyTuple_SET_ITEM( tmp_call_pos_2, 0, tmp_tuple_element_15 );
    tmp_call_kw_2 = _PyDict_NewPresized( 1 );
    tmp_dict_value_2 = _python_context->closure_dtype.storage->object;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_call_pos_2 );
        Py_DECREF( tmp_call_kw_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1567;
        goto try_finally_handler_2;
    }

    tmp_dict_key_2 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_2, tmp_dict_key_2, tmp_dict_value_2 );
    frame_function->f_lineno = 1567;
    tmp_slice_source_10 = CALL_FUNCTION( tmp_called_12, tmp_call_pos_2, tmp_call_kw_2 );
    Py_DECREF( tmp_call_pos_2 );
    Py_DECREF( tmp_call_kw_2 );
    if ( tmp_slice_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1567;
        goto try_finally_handler_2;
    }
    tmp_slice_lower_2 = _python_context->closure_o.storage->object;

    if ( tmp_slice_lower_2 == NULL )
    {
        Py_DECREF( tmp_slice_source_10 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1567;
        goto try_finally_handler_2;
    }

    tmp_assign_source_13 = LOOKUP_SLICE( tmp_slice_source_10, tmp_slice_lower_2, Py_None );
    Py_DECREF( tmp_slice_source_10 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1567;
        goto try_finally_handler_2;
    }
    if (_python_context->closure_out.object == NULL)
    {
        _python_context->closure_out.object = tmp_assign_source_13;
    }
    else
    {
        PyObject *old = _python_context->closure_out.object;
        _python_context->closure_out.object = tmp_assign_source_13;
        Py_DECREF( old );
    }
    tmp_yield_7 = PyTuple_New( 4 );
    tmp_tuple_element_17 = _python_context->closure_out.object;

    Py_INCREF( tmp_tuple_element_17 );
    PyTuple_SET_ITEM( tmp_yield_7, 0, tmp_tuple_element_17 );
    tmp_called_13 = _python_context->closure_inp1.object;

    frame_function->f_lineno = 1568;
    tmp_tuple_element_17 = CALL_FUNCTION_NO_ARGS( tmp_called_13 );
    if ( tmp_tuple_element_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_7 );

        frame_function->f_lineno = 1568;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_7, 1, tmp_tuple_element_17 );
    tmp_called_14 = _python_context->closure_inp2.object;

    frame_function->f_lineno = 1568;
    tmp_tuple_element_17 = CALL_FUNCTION_NO_ARGS( tmp_called_14 );
    if ( tmp_tuple_element_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_7 );

        frame_function->f_lineno = 1568;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_7, 2, tmp_tuple_element_17 );
    tmp_binop_left_17 = _python_context->closure_bfmt.object;

    if ( tmp_binop_left_17 == NULL )
    {
        Py_DECREF( tmp_yield_7 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218166 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1568;
        goto try_finally_handler_2;
    }

    tmp_binop_right_17 = PyTuple_New( 6 );
    tmp_tuple_element_18 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_18 == NULL )
    {
        Py_DECREF( tmp_yield_7 );
        Py_DECREF( tmp_binop_right_17 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1569;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_18 );
    PyTuple_SET_ITEM( tmp_binop_right_17, 0, tmp_tuple_element_18 );
    tmp_tuple_element_18 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_18 == NULL )
    {
        Py_DECREF( tmp_yield_7 );
        Py_DECREF( tmp_binop_right_17 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1569;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_18 );
    PyTuple_SET_ITEM( tmp_binop_right_17, 1, tmp_tuple_element_18 );
    tmp_tuple_element_18 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_18 == NULL )
    {
        Py_DECREF( tmp_yield_7 );
        Py_DECREF( tmp_binop_right_17 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1569;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_18 );
    PyTuple_SET_ITEM( tmp_binop_right_17, 2, tmp_tuple_element_18 );
    tmp_tuple_element_18 = _python_context->closure_s.storage->object;

    if ( tmp_tuple_element_18 == NULL )
    {
        Py_DECREF( tmp_yield_7 );
        Py_DECREF( tmp_binop_right_17 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1569;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_18 );
    PyTuple_SET_ITEM( tmp_binop_right_17, 3, tmp_tuple_element_18 );
    tmp_tuple_element_18 = _python_context->closure_dtype.storage->object;

    if ( tmp_tuple_element_18 == NULL )
    {
        Py_DECREF( tmp_yield_7 );
        Py_DECREF( tmp_binop_right_17 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1569;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_18 );
    PyTuple_SET_ITEM( tmp_binop_right_17, 4, tmp_tuple_element_18 );
    tmp_tuple_element_18 = const_str_digest_882f2ed7f1573d008d695fb792817c72;
    Py_INCREF( tmp_tuple_element_18 );
    PyTuple_SET_ITEM( tmp_binop_right_17, 5, tmp_tuple_element_18 );
    tmp_tuple_element_17 = BINARY_OPERATION_REMAINDER( tmp_binop_left_17, tmp_binop_right_17 );
    Py_DECREF( tmp_binop_right_17 );
    if ( tmp_tuple_element_17 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_7 );

        frame_function->f_lineno = 1568;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_7, 3, tmp_tuple_element_17 );
    tmp_unused = YIELD( generator, tmp_yield_7 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1568;
        goto try_finally_handler_2;
    }
    tmp_yield_8 = PyTuple_New( 4 );
    tmp_called_15 = _python_context->closure_inp1.object;

    frame_function->f_lineno = 1570;
    tmp_tuple_element_19 = CALL_FUNCTION_NO_ARGS( tmp_called_15 );
    if ( tmp_tuple_element_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_8 );

        frame_function->f_lineno = 1570;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_8, 0, tmp_tuple_element_19 );
    tmp_called_16 = _python_context->closure_inp1.object;

    frame_function->f_lineno = 1570;
    tmp_tuple_element_19 = CALL_FUNCTION_NO_ARGS( tmp_called_16 );
    if ( tmp_tuple_element_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_8 );

        frame_function->f_lineno = 1570;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_8, 1, tmp_tuple_element_19 );
    tmp_called_17 = _python_context->closure_inp2.object;

    frame_function->f_lineno = 1570;
    tmp_tuple_element_19 = CALL_FUNCTION_NO_ARGS( tmp_called_17 );
    if ( tmp_tuple_element_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_8 );

        frame_function->f_lineno = 1570;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_8, 2, tmp_tuple_element_19 );
    tmp_binop_left_18 = _python_context->closure_bfmt.object;

    if ( tmp_binop_left_18 == NULL )
    {
        Py_DECREF( tmp_yield_8 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218166 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1570;
        goto try_finally_handler_2;
    }

    tmp_binop_right_18 = PyTuple_New( 6 );
    tmp_tuple_element_20 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_20 == NULL )
    {
        Py_DECREF( tmp_yield_8 );
        Py_DECREF( tmp_binop_right_18 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1571;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_20 );
    PyTuple_SET_ITEM( tmp_binop_right_18, 0, tmp_tuple_element_20 );
    tmp_tuple_element_20 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_20 == NULL )
    {
        Py_DECREF( tmp_yield_8 );
        Py_DECREF( tmp_binop_right_18 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1571;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_20 );
    PyTuple_SET_ITEM( tmp_binop_right_18, 1, tmp_tuple_element_20 );
    tmp_tuple_element_20 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_20 == NULL )
    {
        Py_DECREF( tmp_yield_8 );
        Py_DECREF( tmp_binop_right_18 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1571;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_20 );
    PyTuple_SET_ITEM( tmp_binop_right_18, 2, tmp_tuple_element_20 );
    tmp_tuple_element_20 = _python_context->closure_s.storage->object;

    if ( tmp_tuple_element_20 == NULL )
    {
        Py_DECREF( tmp_yield_8 );
        Py_DECREF( tmp_binop_right_18 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1571;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_20 );
    PyTuple_SET_ITEM( tmp_binop_right_18, 3, tmp_tuple_element_20 );
    tmp_tuple_element_20 = _python_context->closure_dtype.storage->object;

    if ( tmp_tuple_element_20 == NULL )
    {
        Py_DECREF( tmp_yield_8 );
        Py_DECREF( tmp_binop_right_18 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1571;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_20 );
    PyTuple_SET_ITEM( tmp_binop_right_18, 4, tmp_tuple_element_20 );
    tmp_tuple_element_20 = const_str_digest_077c92f8b9a0ec14761fbe9274e7858b;
    Py_INCREF( tmp_tuple_element_20 );
    PyTuple_SET_ITEM( tmp_binop_right_18, 5, tmp_tuple_element_20 );
    tmp_tuple_element_19 = BINARY_OPERATION_REMAINDER( tmp_binop_left_18, tmp_binop_right_18 );
    Py_DECREF( tmp_binop_right_18 );
    if ( tmp_tuple_element_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_8 );

        frame_function->f_lineno = 1570;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_8, 3, tmp_tuple_element_19 );
    tmp_unused = YIELD( generator, tmp_yield_8 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1570;
        goto try_finally_handler_2;
    }
    tmp_yield_9 = PyTuple_New( 4 );
    tmp_called_18 = _python_context->closure_inp2.object;

    frame_function->f_lineno = 1572;
    tmp_tuple_element_21 = CALL_FUNCTION_NO_ARGS( tmp_called_18 );
    if ( tmp_tuple_element_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_9 );

        frame_function->f_lineno = 1572;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_9, 0, tmp_tuple_element_21 );
    tmp_called_19 = _python_context->closure_inp1.object;

    frame_function->f_lineno = 1572;
    tmp_tuple_element_21 = CALL_FUNCTION_NO_ARGS( tmp_called_19 );
    if ( tmp_tuple_element_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_9 );

        frame_function->f_lineno = 1572;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_9, 1, tmp_tuple_element_21 );
    tmp_called_20 = _python_context->closure_inp2.object;

    frame_function->f_lineno = 1572;
    tmp_tuple_element_21 = CALL_FUNCTION_NO_ARGS( tmp_called_20 );
    if ( tmp_tuple_element_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_9 );

        frame_function->f_lineno = 1572;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_9, 2, tmp_tuple_element_21 );
    tmp_binop_left_19 = _python_context->closure_bfmt.object;

    if ( tmp_binop_left_19 == NULL )
    {
        Py_DECREF( tmp_yield_9 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218166 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1572;
        goto try_finally_handler_2;
    }

    tmp_binop_right_19 = PyTuple_New( 6 );
    tmp_tuple_element_22 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_22 == NULL )
    {
        Py_DECREF( tmp_yield_9 );
        Py_DECREF( tmp_binop_right_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1573;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_22 );
    PyTuple_SET_ITEM( tmp_binop_right_19, 0, tmp_tuple_element_22 );
    tmp_tuple_element_22 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_22 == NULL )
    {
        Py_DECREF( tmp_yield_9 );
        Py_DECREF( tmp_binop_right_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1573;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_22 );
    PyTuple_SET_ITEM( tmp_binop_right_19, 1, tmp_tuple_element_22 );
    tmp_tuple_element_22 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_22 == NULL )
    {
        Py_DECREF( tmp_yield_9 );
        Py_DECREF( tmp_binop_right_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1573;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_22 );
    PyTuple_SET_ITEM( tmp_binop_right_19, 2, tmp_tuple_element_22 );
    tmp_tuple_element_22 = _python_context->closure_s.storage->object;

    if ( tmp_tuple_element_22 == NULL )
    {
        Py_DECREF( tmp_yield_9 );
        Py_DECREF( tmp_binop_right_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1573;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_22 );
    PyTuple_SET_ITEM( tmp_binop_right_19, 3, tmp_tuple_element_22 );
    tmp_tuple_element_22 = _python_context->closure_dtype.storage->object;

    if ( tmp_tuple_element_22 == NULL )
    {
        Py_DECREF( tmp_yield_9 );
        Py_DECREF( tmp_binop_right_19 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1573;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_22 );
    PyTuple_SET_ITEM( tmp_binop_right_19, 4, tmp_tuple_element_22 );
    tmp_tuple_element_22 = const_str_digest_f0e0fa64d19a4c1bad20bab142899ac3;
    Py_INCREF( tmp_tuple_element_22 );
    PyTuple_SET_ITEM( tmp_binop_right_19, 5, tmp_tuple_element_22 );
    tmp_tuple_element_21 = BINARY_OPERATION_REMAINDER( tmp_binop_left_19, tmp_binop_right_19 );
    Py_DECREF( tmp_binop_right_19 );
    if ( tmp_tuple_element_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_9 );

        frame_function->f_lineno = 1572;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_9, 3, tmp_tuple_element_21 );
    tmp_unused = YIELD( generator, tmp_yield_9 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1572;
        goto try_finally_handler_2;
    }
    tmp_yield_10 = PyTuple_New( 4 );
    tmp_sliceslicedel_index_lower_9 = 1;
    tmp_slice_index_upper_9 = PY_SSIZE_T_MAX;
    tmp_slice_source_11 = _python_context->closure_out.object;

    tmp_tuple_element_23 = LOOKUP_INDEX_SLICE( tmp_slice_source_11, tmp_sliceslicedel_index_lower_9, tmp_slice_index_upper_9 );
    if ( tmp_tuple_element_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_10 );

        frame_function->f_lineno = 1574;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_10, 0, tmp_tuple_element_23 );
    tmp_sliceslicedel_index_lower_10 = 0;
    tmp_slice_index_upper_10 = -1;
    tmp_called_21 = _python_context->closure_inp1.object;

    frame_function->f_lineno = 1574;
    tmp_slice_source_12 = CALL_FUNCTION_NO_ARGS( tmp_called_21 );
    if ( tmp_slice_source_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_10 );

        frame_function->f_lineno = 1574;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_23 = LOOKUP_INDEX_SLICE( tmp_slice_source_12, tmp_sliceslicedel_index_lower_10, tmp_slice_index_upper_10 );
    Py_DECREF( tmp_slice_source_12 );
    if ( tmp_tuple_element_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_10 );

        frame_function->f_lineno = 1574;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_10, 1, tmp_tuple_element_23 );
    tmp_sliceslicedel_index_lower_11 = 0;
    tmp_slice_index_upper_11 = -1;
    tmp_called_22 = _python_context->closure_inp2.object;

    frame_function->f_lineno = 1574;
    tmp_slice_source_13 = CALL_FUNCTION_NO_ARGS( tmp_called_22 );
    if ( tmp_slice_source_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_10 );

        frame_function->f_lineno = 1574;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_23 = LOOKUP_INDEX_SLICE( tmp_slice_source_13, tmp_sliceslicedel_index_lower_11, tmp_slice_index_upper_11 );
    Py_DECREF( tmp_slice_source_13 );
    if ( tmp_tuple_element_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_10 );

        frame_function->f_lineno = 1574;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_10, 2, tmp_tuple_element_23 );
    tmp_binop_left_20 = _python_context->closure_bfmt.object;

    if ( tmp_binop_left_20 == NULL )
    {
        Py_DECREF( tmp_yield_10 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218166 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1574;
        goto try_finally_handler_2;
    }

    tmp_binop_right_20 = PyTuple_New( 6 );
    tmp_binop_left_21 = _python_context->closure_o.storage->object;

    if ( tmp_binop_left_21 == NULL )
    {
        Py_DECREF( tmp_yield_10 );
        Py_DECREF( tmp_binop_right_20 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1575;
        goto try_finally_handler_2;
    }

    tmp_binop_right_21 = const_int_pos_1;
    tmp_tuple_element_24 = BINARY_OPERATION_ADD( tmp_binop_left_21, tmp_binop_right_21 );
    if ( tmp_tuple_element_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_10 );
        Py_DECREF( tmp_binop_right_20 );

        frame_function->f_lineno = 1575;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_20, 0, tmp_tuple_element_24 );
    tmp_tuple_element_24 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_24 == NULL )
    {
        Py_DECREF( tmp_yield_10 );
        Py_DECREF( tmp_binop_right_20 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1575;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_24 );
    PyTuple_SET_ITEM( tmp_binop_right_20, 1, tmp_tuple_element_24 );
    tmp_tuple_element_24 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_24 == NULL )
    {
        Py_DECREF( tmp_yield_10 );
        Py_DECREF( tmp_binop_right_20 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1575;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_24 );
    PyTuple_SET_ITEM( tmp_binop_right_20, 2, tmp_tuple_element_24 );
    tmp_binop_left_22 = _python_context->closure_s.storage->object;

    if ( tmp_binop_left_22 == NULL )
    {
        Py_DECREF( tmp_yield_10 );
        Py_DECREF( tmp_binop_right_20 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1575;
        goto try_finally_handler_2;
    }

    tmp_binop_right_22 = const_int_pos_1;
    tmp_tuple_element_24 = BINARY_OPERATION_SUB( tmp_binop_left_22, tmp_binop_right_22 );
    if ( tmp_tuple_element_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_10 );
        Py_DECREF( tmp_binop_right_20 );

        frame_function->f_lineno = 1575;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_20, 3, tmp_tuple_element_24 );
    tmp_tuple_element_24 = _python_context->closure_dtype.storage->object;

    if ( tmp_tuple_element_24 == NULL )
    {
        Py_DECREF( tmp_yield_10 );
        Py_DECREF( tmp_binop_right_20 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1575;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_24 );
    PyTuple_SET_ITEM( tmp_binop_right_20, 4, tmp_tuple_element_24 );
    tmp_tuple_element_24 = const_str_digest_882f2ed7f1573d008d695fb792817c72;
    Py_INCREF( tmp_tuple_element_24 );
    PyTuple_SET_ITEM( tmp_binop_right_20, 5, tmp_tuple_element_24 );
    tmp_tuple_element_23 = BINARY_OPERATION_REMAINDER( tmp_binop_left_20, tmp_binop_right_20 );
    Py_DECREF( tmp_binop_right_20 );
    if ( tmp_tuple_element_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_10 );

        frame_function->f_lineno = 1574;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_10, 3, tmp_tuple_element_23 );
    tmp_unused = YIELD( generator, tmp_yield_10 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1574;
        goto try_finally_handler_2;
    }
    tmp_yield_11 = PyTuple_New( 4 );
    tmp_sliceslicedel_index_lower_12 = 0;
    tmp_slice_index_upper_12 = -1;
    tmp_slice_source_14 = _python_context->closure_out.object;

    tmp_tuple_element_25 = LOOKUP_INDEX_SLICE( tmp_slice_source_14, tmp_sliceslicedel_index_lower_12, tmp_slice_index_upper_12 );
    if ( tmp_tuple_element_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_11 );

        frame_function->f_lineno = 1576;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_11, 0, tmp_tuple_element_25 );
    tmp_sliceslicedel_index_lower_13 = 1;
    tmp_slice_index_upper_13 = PY_SSIZE_T_MAX;
    tmp_called_23 = _python_context->closure_inp1.object;

    frame_function->f_lineno = 1576;
    tmp_slice_source_15 = CALL_FUNCTION_NO_ARGS( tmp_called_23 );
    if ( tmp_slice_source_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_11 );

        frame_function->f_lineno = 1576;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_25 = LOOKUP_INDEX_SLICE( tmp_slice_source_15, tmp_sliceslicedel_index_lower_13, tmp_slice_index_upper_13 );
    Py_DECREF( tmp_slice_source_15 );
    if ( tmp_tuple_element_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_11 );

        frame_function->f_lineno = 1576;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_11, 1, tmp_tuple_element_25 );
    tmp_sliceslicedel_index_lower_14 = 0;
    tmp_slice_index_upper_14 = -1;
    tmp_called_24 = _python_context->closure_inp2.object;

    frame_function->f_lineno = 1576;
    tmp_slice_source_16 = CALL_FUNCTION_NO_ARGS( tmp_called_24 );
    if ( tmp_slice_source_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_11 );

        frame_function->f_lineno = 1576;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_25 = LOOKUP_INDEX_SLICE( tmp_slice_source_16, tmp_sliceslicedel_index_lower_14, tmp_slice_index_upper_14 );
    Py_DECREF( tmp_slice_source_16 );
    if ( tmp_tuple_element_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_11 );

        frame_function->f_lineno = 1576;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_11, 2, tmp_tuple_element_25 );
    tmp_binop_left_23 = _python_context->closure_bfmt.object;

    if ( tmp_binop_left_23 == NULL )
    {
        Py_DECREF( tmp_yield_11 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218166 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1576;
        goto try_finally_handler_2;
    }

    tmp_binop_right_23 = PyTuple_New( 6 );
    tmp_tuple_element_26 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_26 == NULL )
    {
        Py_DECREF( tmp_yield_11 );
        Py_DECREF( tmp_binop_right_23 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1577;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_26 );
    PyTuple_SET_ITEM( tmp_binop_right_23, 0, tmp_tuple_element_26 );
    tmp_binop_left_24 = _python_context->closure_o.storage->object;

    if ( tmp_binop_left_24 == NULL )
    {
        Py_DECREF( tmp_yield_11 );
        Py_DECREF( tmp_binop_right_23 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1577;
        goto try_finally_handler_2;
    }

    tmp_binop_right_24 = const_int_pos_1;
    tmp_tuple_element_26 = BINARY_OPERATION_ADD( tmp_binop_left_24, tmp_binop_right_24 );
    if ( tmp_tuple_element_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_11 );
        Py_DECREF( tmp_binop_right_23 );

        frame_function->f_lineno = 1577;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_23, 1, tmp_tuple_element_26 );
    tmp_tuple_element_26 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_26 == NULL )
    {
        Py_DECREF( tmp_yield_11 );
        Py_DECREF( tmp_binop_right_23 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1577;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_26 );
    PyTuple_SET_ITEM( tmp_binop_right_23, 2, tmp_tuple_element_26 );
    tmp_binop_left_25 = _python_context->closure_s.storage->object;

    if ( tmp_binop_left_25 == NULL )
    {
        Py_DECREF( tmp_yield_11 );
        Py_DECREF( tmp_binop_right_23 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1577;
        goto try_finally_handler_2;
    }

    tmp_binop_right_25 = const_int_pos_1;
    tmp_tuple_element_26 = BINARY_OPERATION_SUB( tmp_binop_left_25, tmp_binop_right_25 );
    if ( tmp_tuple_element_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_11 );
        Py_DECREF( tmp_binop_right_23 );

        frame_function->f_lineno = 1577;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_23, 3, tmp_tuple_element_26 );
    tmp_tuple_element_26 = _python_context->closure_dtype.storage->object;

    if ( tmp_tuple_element_26 == NULL )
    {
        Py_DECREF( tmp_yield_11 );
        Py_DECREF( tmp_binop_right_23 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1577;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_26 );
    PyTuple_SET_ITEM( tmp_binop_right_23, 4, tmp_tuple_element_26 );
    tmp_tuple_element_26 = const_str_digest_882f2ed7f1573d008d695fb792817c72;
    Py_INCREF( tmp_tuple_element_26 );
    PyTuple_SET_ITEM( tmp_binop_right_23, 5, tmp_tuple_element_26 );
    tmp_tuple_element_25 = BINARY_OPERATION_REMAINDER( tmp_binop_left_23, tmp_binop_right_23 );
    Py_DECREF( tmp_binop_right_23 );
    if ( tmp_tuple_element_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_11 );

        frame_function->f_lineno = 1576;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_11, 3, tmp_tuple_element_25 );
    tmp_unused = YIELD( generator, tmp_yield_11 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1576;
        goto try_finally_handler_2;
    }
    tmp_yield_12 = PyTuple_New( 4 );
    tmp_sliceslicedel_index_lower_15 = 0;
    tmp_slice_index_upper_15 = -1;
    tmp_slice_source_17 = _python_context->closure_out.object;

    tmp_tuple_element_27 = LOOKUP_INDEX_SLICE( tmp_slice_source_17, tmp_sliceslicedel_index_lower_15, tmp_slice_index_upper_15 );
    if ( tmp_tuple_element_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_12 );

        frame_function->f_lineno = 1578;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_12, 0, tmp_tuple_element_27 );
    tmp_sliceslicedel_index_lower_16 = 0;
    tmp_slice_index_upper_16 = -1;
    tmp_called_25 = _python_context->closure_inp1.object;

    frame_function->f_lineno = 1578;
    tmp_slice_source_18 = CALL_FUNCTION_NO_ARGS( tmp_called_25 );
    if ( tmp_slice_source_18 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_12 );

        frame_function->f_lineno = 1578;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_27 = LOOKUP_INDEX_SLICE( tmp_slice_source_18, tmp_sliceslicedel_index_lower_16, tmp_slice_index_upper_16 );
    Py_DECREF( tmp_slice_source_18 );
    if ( tmp_tuple_element_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_12 );

        frame_function->f_lineno = 1578;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_12, 1, tmp_tuple_element_27 );
    tmp_sliceslicedel_index_lower_17 = 1;
    tmp_slice_index_upper_17 = PY_SSIZE_T_MAX;
    tmp_called_26 = _python_context->closure_inp2.object;

    frame_function->f_lineno = 1578;
    tmp_slice_source_19 = CALL_FUNCTION_NO_ARGS( tmp_called_26 );
    if ( tmp_slice_source_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_12 );

        frame_function->f_lineno = 1578;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_27 = LOOKUP_INDEX_SLICE( tmp_slice_source_19, tmp_sliceslicedel_index_lower_17, tmp_slice_index_upper_17 );
    Py_DECREF( tmp_slice_source_19 );
    if ( tmp_tuple_element_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_12 );

        frame_function->f_lineno = 1578;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_12, 2, tmp_tuple_element_27 );
    tmp_binop_left_26 = _python_context->closure_bfmt.object;

    if ( tmp_binop_left_26 == NULL )
    {
        Py_DECREF( tmp_yield_12 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218166 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1578;
        goto try_finally_handler_2;
    }

    tmp_binop_right_26 = PyTuple_New( 6 );
    tmp_tuple_element_28 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_28 == NULL )
    {
        Py_DECREF( tmp_yield_12 );
        Py_DECREF( tmp_binop_right_26 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1579;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_28 );
    PyTuple_SET_ITEM( tmp_binop_right_26, 0, tmp_tuple_element_28 );
    tmp_tuple_element_28 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_28 == NULL )
    {
        Py_DECREF( tmp_yield_12 );
        Py_DECREF( tmp_binop_right_26 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1579;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_28 );
    PyTuple_SET_ITEM( tmp_binop_right_26, 1, tmp_tuple_element_28 );
    tmp_binop_left_27 = _python_context->closure_o.storage->object;

    if ( tmp_binop_left_27 == NULL )
    {
        Py_DECREF( tmp_yield_12 );
        Py_DECREF( tmp_binop_right_26 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1579;
        goto try_finally_handler_2;
    }

    tmp_binop_right_27 = const_int_pos_1;
    tmp_tuple_element_28 = BINARY_OPERATION_ADD( tmp_binop_left_27, tmp_binop_right_27 );
    if ( tmp_tuple_element_28 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_12 );
        Py_DECREF( tmp_binop_right_26 );

        frame_function->f_lineno = 1579;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_26, 2, tmp_tuple_element_28 );
    tmp_binop_left_28 = _python_context->closure_s.storage->object;

    if ( tmp_binop_left_28 == NULL )
    {
        Py_DECREF( tmp_yield_12 );
        Py_DECREF( tmp_binop_right_26 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1579;
        goto try_finally_handler_2;
    }

    tmp_binop_right_28 = const_int_pos_1;
    tmp_tuple_element_28 = BINARY_OPERATION_SUB( tmp_binop_left_28, tmp_binop_right_28 );
    if ( tmp_tuple_element_28 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_12 );
        Py_DECREF( tmp_binop_right_26 );

        frame_function->f_lineno = 1579;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_26, 3, tmp_tuple_element_28 );
    tmp_tuple_element_28 = _python_context->closure_dtype.storage->object;

    if ( tmp_tuple_element_28 == NULL )
    {
        Py_DECREF( tmp_yield_12 );
        Py_DECREF( tmp_binop_right_26 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1579;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_28 );
    PyTuple_SET_ITEM( tmp_binop_right_26, 4, tmp_tuple_element_28 );
    tmp_tuple_element_28 = const_str_digest_882f2ed7f1573d008d695fb792817c72;
    Py_INCREF( tmp_tuple_element_28 );
    PyTuple_SET_ITEM( tmp_binop_right_26, 5, tmp_tuple_element_28 );
    tmp_tuple_element_27 = BINARY_OPERATION_REMAINDER( tmp_binop_left_26, tmp_binop_right_26 );
    Py_DECREF( tmp_binop_right_26 );
    if ( tmp_tuple_element_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_12 );

        frame_function->f_lineno = 1578;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_12, 3, tmp_tuple_element_27 );
    tmp_unused = YIELD( generator, tmp_yield_12 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1578;
        goto try_finally_handler_2;
    }
    tmp_yield_13 = PyTuple_New( 4 );
    tmp_sliceslicedel_index_lower_18 = 1;
    tmp_slice_index_upper_18 = PY_SSIZE_T_MAX;
    tmp_called_27 = _python_context->closure_inp1.object;

    frame_function->f_lineno = 1580;
    tmp_slice_source_20 = CALL_FUNCTION_NO_ARGS( tmp_called_27 );
    if ( tmp_slice_source_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_13 );

        frame_function->f_lineno = 1580;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_29 = LOOKUP_INDEX_SLICE( tmp_slice_source_20, tmp_sliceslicedel_index_lower_18, tmp_slice_index_upper_18 );
    Py_DECREF( tmp_slice_source_20 );
    if ( tmp_tuple_element_29 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_13 );

        frame_function->f_lineno = 1580;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_13, 0, tmp_tuple_element_29 );
    tmp_sliceslicedel_index_lower_19 = 0;
    tmp_slice_index_upper_19 = -1;
    tmp_called_28 = _python_context->closure_inp1.object;

    frame_function->f_lineno = 1580;
    tmp_slice_source_21 = CALL_FUNCTION_NO_ARGS( tmp_called_28 );
    if ( tmp_slice_source_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_13 );

        frame_function->f_lineno = 1580;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_29 = LOOKUP_INDEX_SLICE( tmp_slice_source_21, tmp_sliceslicedel_index_lower_19, tmp_slice_index_upper_19 );
    Py_DECREF( tmp_slice_source_21 );
    if ( tmp_tuple_element_29 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_13 );

        frame_function->f_lineno = 1580;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_13, 1, tmp_tuple_element_29 );
    tmp_sliceslicedel_index_lower_20 = 0;
    tmp_slice_index_upper_20 = -1;
    tmp_called_29 = _python_context->closure_inp2.object;

    frame_function->f_lineno = 1580;
    tmp_slice_source_22 = CALL_FUNCTION_NO_ARGS( tmp_called_29 );
    if ( tmp_slice_source_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_13 );

        frame_function->f_lineno = 1580;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_29 = LOOKUP_INDEX_SLICE( tmp_slice_source_22, tmp_sliceslicedel_index_lower_20, tmp_slice_index_upper_20 );
    Py_DECREF( tmp_slice_source_22 );
    if ( tmp_tuple_element_29 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_13 );

        frame_function->f_lineno = 1580;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_13, 2, tmp_tuple_element_29 );
    tmp_binop_left_29 = _python_context->closure_bfmt.object;

    if ( tmp_binop_left_29 == NULL )
    {
        Py_DECREF( tmp_yield_13 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218166 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1580;
        goto try_finally_handler_2;
    }

    tmp_binop_right_29 = PyTuple_New( 6 );
    tmp_binop_left_30 = _python_context->closure_o.storage->object;

    if ( tmp_binop_left_30 == NULL )
    {
        Py_DECREF( tmp_yield_13 );
        Py_DECREF( tmp_binop_right_29 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1581;
        goto try_finally_handler_2;
    }

    tmp_binop_right_30 = const_int_pos_1;
    tmp_tuple_element_30 = BINARY_OPERATION_ADD( tmp_binop_left_30, tmp_binop_right_30 );
    if ( tmp_tuple_element_30 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_13 );
        Py_DECREF( tmp_binop_right_29 );

        frame_function->f_lineno = 1581;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_29, 0, tmp_tuple_element_30 );
    tmp_tuple_element_30 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_30 == NULL )
    {
        Py_DECREF( tmp_yield_13 );
        Py_DECREF( tmp_binop_right_29 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1581;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_30 );
    PyTuple_SET_ITEM( tmp_binop_right_29, 1, tmp_tuple_element_30 );
    tmp_tuple_element_30 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_30 == NULL )
    {
        Py_DECREF( tmp_yield_13 );
        Py_DECREF( tmp_binop_right_29 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1581;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_30 );
    PyTuple_SET_ITEM( tmp_binop_right_29, 2, tmp_tuple_element_30 );
    tmp_binop_left_31 = _python_context->closure_s.storage->object;

    if ( tmp_binop_left_31 == NULL )
    {
        Py_DECREF( tmp_yield_13 );
        Py_DECREF( tmp_binop_right_29 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1581;
        goto try_finally_handler_2;
    }

    tmp_binop_right_31 = const_int_pos_1;
    tmp_tuple_element_30 = BINARY_OPERATION_SUB( tmp_binop_left_31, tmp_binop_right_31 );
    if ( tmp_tuple_element_30 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_13 );
        Py_DECREF( tmp_binop_right_29 );

        frame_function->f_lineno = 1581;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_29, 3, tmp_tuple_element_30 );
    tmp_tuple_element_30 = _python_context->closure_dtype.storage->object;

    if ( tmp_tuple_element_30 == NULL )
    {
        Py_DECREF( tmp_yield_13 );
        Py_DECREF( tmp_binop_right_29 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1581;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_30 );
    PyTuple_SET_ITEM( tmp_binop_right_29, 4, tmp_tuple_element_30 );
    tmp_tuple_element_30 = const_str_plain_aliased;
    Py_INCREF( tmp_tuple_element_30 );
    PyTuple_SET_ITEM( tmp_binop_right_29, 5, tmp_tuple_element_30 );
    tmp_tuple_element_29 = BINARY_OPERATION_REMAINDER( tmp_binop_left_29, tmp_binop_right_29 );
    Py_DECREF( tmp_binop_right_29 );
    if ( tmp_tuple_element_29 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_13 );

        frame_function->f_lineno = 1580;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_13, 3, tmp_tuple_element_29 );
    tmp_unused = YIELD( generator, tmp_yield_13 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1580;
        goto try_finally_handler_2;
    }
    tmp_yield_14 = PyTuple_New( 4 );
    tmp_sliceslicedel_index_lower_21 = 0;
    tmp_slice_index_upper_21 = -1;
    tmp_called_30 = _python_context->closure_inp1.object;

    frame_function->f_lineno = 1582;
    tmp_slice_source_23 = CALL_FUNCTION_NO_ARGS( tmp_called_30 );
    if ( tmp_slice_source_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_14 );

        frame_function->f_lineno = 1582;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_31 = LOOKUP_INDEX_SLICE( tmp_slice_source_23, tmp_sliceslicedel_index_lower_21, tmp_slice_index_upper_21 );
    Py_DECREF( tmp_slice_source_23 );
    if ( tmp_tuple_element_31 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_14 );

        frame_function->f_lineno = 1582;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_14, 0, tmp_tuple_element_31 );
    tmp_sliceslicedel_index_lower_22 = 1;
    tmp_slice_index_upper_22 = PY_SSIZE_T_MAX;
    tmp_called_31 = _python_context->closure_inp1.object;

    frame_function->f_lineno = 1582;
    tmp_slice_source_24 = CALL_FUNCTION_NO_ARGS( tmp_called_31 );
    if ( tmp_slice_source_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_14 );

        frame_function->f_lineno = 1582;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_31 = LOOKUP_INDEX_SLICE( tmp_slice_source_24, tmp_sliceslicedel_index_lower_22, tmp_slice_index_upper_22 );
    Py_DECREF( tmp_slice_source_24 );
    if ( tmp_tuple_element_31 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_14 );

        frame_function->f_lineno = 1582;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_14, 1, tmp_tuple_element_31 );
    tmp_sliceslicedel_index_lower_23 = 0;
    tmp_slice_index_upper_23 = -1;
    tmp_called_32 = _python_context->closure_inp2.object;

    frame_function->f_lineno = 1582;
    tmp_slice_source_25 = CALL_FUNCTION_NO_ARGS( tmp_called_32 );
    if ( tmp_slice_source_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_14 );

        frame_function->f_lineno = 1582;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_31 = LOOKUP_INDEX_SLICE( tmp_slice_source_25, tmp_sliceslicedel_index_lower_23, tmp_slice_index_upper_23 );
    Py_DECREF( tmp_slice_source_25 );
    if ( tmp_tuple_element_31 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_14 );

        frame_function->f_lineno = 1582;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_14, 2, tmp_tuple_element_31 );
    tmp_binop_left_32 = _python_context->closure_bfmt.object;

    if ( tmp_binop_left_32 == NULL )
    {
        Py_DECREF( tmp_yield_14 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218166 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1582;
        goto try_finally_handler_2;
    }

    tmp_binop_right_32 = PyTuple_New( 6 );
    tmp_tuple_element_32 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_32 == NULL )
    {
        Py_DECREF( tmp_yield_14 );
        Py_DECREF( tmp_binop_right_32 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1583;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_32 );
    PyTuple_SET_ITEM( tmp_binop_right_32, 0, tmp_tuple_element_32 );
    tmp_binop_left_33 = _python_context->closure_o.storage->object;

    if ( tmp_binop_left_33 == NULL )
    {
        Py_DECREF( tmp_yield_14 );
        Py_DECREF( tmp_binop_right_32 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1583;
        goto try_finally_handler_2;
    }

    tmp_binop_right_33 = const_int_pos_1;
    tmp_tuple_element_32 = BINARY_OPERATION_ADD( tmp_binop_left_33, tmp_binop_right_33 );
    if ( tmp_tuple_element_32 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_14 );
        Py_DECREF( tmp_binop_right_32 );

        frame_function->f_lineno = 1583;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_32, 1, tmp_tuple_element_32 );
    tmp_tuple_element_32 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_32 == NULL )
    {
        Py_DECREF( tmp_yield_14 );
        Py_DECREF( tmp_binop_right_32 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1583;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_32 );
    PyTuple_SET_ITEM( tmp_binop_right_32, 2, tmp_tuple_element_32 );
    tmp_binop_left_34 = _python_context->closure_s.storage->object;

    if ( tmp_binop_left_34 == NULL )
    {
        Py_DECREF( tmp_yield_14 );
        Py_DECREF( tmp_binop_right_32 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1583;
        goto try_finally_handler_2;
    }

    tmp_binop_right_34 = const_int_pos_1;
    tmp_tuple_element_32 = BINARY_OPERATION_SUB( tmp_binop_left_34, tmp_binop_right_34 );
    if ( tmp_tuple_element_32 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_14 );
        Py_DECREF( tmp_binop_right_32 );

        frame_function->f_lineno = 1583;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_32, 3, tmp_tuple_element_32 );
    tmp_tuple_element_32 = _python_context->closure_dtype.storage->object;

    if ( tmp_tuple_element_32 == NULL )
    {
        Py_DECREF( tmp_yield_14 );
        Py_DECREF( tmp_binop_right_32 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1583;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_32 );
    PyTuple_SET_ITEM( tmp_binop_right_32, 4, tmp_tuple_element_32 );
    tmp_tuple_element_32 = const_str_plain_aliased;
    Py_INCREF( tmp_tuple_element_32 );
    PyTuple_SET_ITEM( tmp_binop_right_32, 5, tmp_tuple_element_32 );
    tmp_tuple_element_31 = BINARY_OPERATION_REMAINDER( tmp_binop_left_32, tmp_binop_right_32 );
    Py_DECREF( tmp_binop_right_32 );
    if ( tmp_tuple_element_31 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_14 );

        frame_function->f_lineno = 1582;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_14, 3, tmp_tuple_element_31 );
    tmp_unused = YIELD( generator, tmp_yield_14 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1582;
        goto try_finally_handler_2;
    }
    tmp_yield_15 = PyTuple_New( 4 );
    tmp_sliceslicedel_index_lower_24 = 0;
    tmp_slice_index_upper_24 = -1;
    tmp_called_33 = _python_context->closure_inp1.object;

    frame_function->f_lineno = 1584;
    tmp_slice_source_26 = CALL_FUNCTION_NO_ARGS( tmp_called_33 );
    if ( tmp_slice_source_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_15 );

        frame_function->f_lineno = 1584;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_33 = LOOKUP_INDEX_SLICE( tmp_slice_source_26, tmp_sliceslicedel_index_lower_24, tmp_slice_index_upper_24 );
    Py_DECREF( tmp_slice_source_26 );
    if ( tmp_tuple_element_33 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_15 );

        frame_function->f_lineno = 1584;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_15, 0, tmp_tuple_element_33 );
    tmp_sliceslicedel_index_lower_25 = 0;
    tmp_slice_index_upper_25 = -1;
    tmp_called_34 = _python_context->closure_inp1.object;

    frame_function->f_lineno = 1584;
    tmp_slice_source_27 = CALL_FUNCTION_NO_ARGS( tmp_called_34 );
    if ( tmp_slice_source_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_15 );

        frame_function->f_lineno = 1584;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_33 = LOOKUP_INDEX_SLICE( tmp_slice_source_27, tmp_sliceslicedel_index_lower_25, tmp_slice_index_upper_25 );
    Py_DECREF( tmp_slice_source_27 );
    if ( tmp_tuple_element_33 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_15 );

        frame_function->f_lineno = 1584;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_15, 1, tmp_tuple_element_33 );
    tmp_sliceslicedel_index_lower_26 = 1;
    tmp_slice_index_upper_26 = PY_SSIZE_T_MAX;
    tmp_called_35 = _python_context->closure_inp2.object;

    frame_function->f_lineno = 1584;
    tmp_slice_source_28 = CALL_FUNCTION_NO_ARGS( tmp_called_35 );
    if ( tmp_slice_source_28 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_15 );

        frame_function->f_lineno = 1584;
        goto try_finally_handler_2;
    }
    tmp_tuple_element_33 = LOOKUP_INDEX_SLICE( tmp_slice_source_28, tmp_sliceslicedel_index_lower_26, tmp_slice_index_upper_26 );
    Py_DECREF( tmp_slice_source_28 );
    if ( tmp_tuple_element_33 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_15 );

        frame_function->f_lineno = 1584;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_15, 2, tmp_tuple_element_33 );
    tmp_binop_left_35 = _python_context->closure_bfmt.object;

    if ( tmp_binop_left_35 == NULL )
    {
        Py_DECREF( tmp_yield_15 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 218166 ], 50, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1584;
        goto try_finally_handler_2;
    }

    tmp_binop_right_35 = PyTuple_New( 6 );
    tmp_tuple_element_34 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_34 == NULL )
    {
        Py_DECREF( tmp_yield_15 );
        Py_DECREF( tmp_binop_right_35 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1585;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_34 );
    PyTuple_SET_ITEM( tmp_binop_right_35, 0, tmp_tuple_element_34 );
    tmp_tuple_element_34 = _python_context->closure_o.storage->object;

    if ( tmp_tuple_element_34 == NULL )
    {
        Py_DECREF( tmp_yield_15 );
        Py_DECREF( tmp_binop_right_35 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1585;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_34 );
    PyTuple_SET_ITEM( tmp_binop_right_35, 1, tmp_tuple_element_34 );
    tmp_binop_left_36 = _python_context->closure_o.storage->object;

    if ( tmp_binop_left_36 == NULL )
    {
        Py_DECREF( tmp_yield_15 );
        Py_DECREF( tmp_binop_right_35 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1585;
        goto try_finally_handler_2;
    }

    tmp_binop_right_36 = const_int_pos_1;
    tmp_tuple_element_34 = BINARY_OPERATION_ADD( tmp_binop_left_36, tmp_binop_right_36 );
    if ( tmp_tuple_element_34 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_15 );
        Py_DECREF( tmp_binop_right_35 );

        frame_function->f_lineno = 1585;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_35, 2, tmp_tuple_element_34 );
    tmp_binop_left_37 = _python_context->closure_s.storage->object;

    if ( tmp_binop_left_37 == NULL )
    {
        Py_DECREF( tmp_yield_15 );
        Py_DECREF( tmp_binop_right_35 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1585;
        goto try_finally_handler_2;
    }

    tmp_binop_right_37 = const_int_pos_1;
    tmp_tuple_element_34 = BINARY_OPERATION_SUB( tmp_binop_left_37, tmp_binop_right_37 );
    if ( tmp_tuple_element_34 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_15 );
        Py_DECREF( tmp_binop_right_35 );

        frame_function->f_lineno = 1585;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_binop_right_35, 3, tmp_tuple_element_34 );
    tmp_tuple_element_34 = _python_context->closure_dtype.storage->object;

    if ( tmp_tuple_element_34 == NULL )
    {
        Py_DECREF( tmp_yield_15 );
        Py_DECREF( tmp_binop_right_35 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1585;
        goto try_finally_handler_2;
    }

    Py_INCREF( tmp_tuple_element_34 );
    PyTuple_SET_ITEM( tmp_binop_right_35, 4, tmp_tuple_element_34 );
    tmp_tuple_element_34 = const_str_plain_aliased;
    Py_INCREF( tmp_tuple_element_34 );
    PyTuple_SET_ITEM( tmp_binop_right_35, 5, tmp_tuple_element_34 );
    tmp_tuple_element_33 = BINARY_OPERATION_REMAINDER( tmp_binop_left_35, tmp_binop_right_35 );
    Py_DECREF( tmp_binop_right_35 );
    if ( tmp_tuple_element_33 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_yield_15 );

        frame_function->f_lineno = 1584;
        goto try_finally_handler_2;
    }
    PyTuple_SET_ITEM( tmp_yield_15, 3, tmp_tuple_element_33 );
    tmp_unused = YIELD( generator, tmp_yield_15 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1584;
        goto try_finally_handler_2;
    }
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1550;
        goto try_finally_handler_2;
    }
    goto loop_start_2;
    loop_end_2:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_function->f_lineno;
    Py_XDECREF( _python_context->closure_for_loop_2__iter_value.object );
    _python_context->closure_for_loop_2__iter_value.object = NULL;

    Py_XDECREF( _python_context->closure_for_loop_2__for_iterator.object );
    _python_context->closure_for_loop_2__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_1;
    }

    goto finally_end_1;
    finally_end_1:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1549;
        goto try_finally_handler_1;
    }
    goto loop_start_1;
    loop_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_function->f_lineno;
    Py_XDECREF( _python_context->closure_for_loop_1__iter_value.object );
    _python_context->closure_for_loop_1__iter_value.object = NULL;

    Py_XDECREF( _python_context->closure_for_loop_1__for_iterator.object );
    _python_context->closure_for_loop_1__for_iterator.object = NULL;

    frame_function->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto frame_exception_exit_1;
    }

    goto finally_end_2;
    finally_end_2:;

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif

    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_exception_exit_1:;

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((_python_context->closure_ufmt.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_ufmt,
            _python_context->closure_ufmt.object
        );

    }
    if ((_python_context->closure_bfmt.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_bfmt,
            _python_context->closure_bfmt.object
        );

    }
    if ((_python_context->closure_o.storage != NULL && _python_context->closure_o.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_o,
            _python_context->closure_o.storage->object
        );

    }
    if ((_python_context->closure_s.storage != NULL && _python_context->closure_s.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_s,
            _python_context->closure_s.storage->object
        );

    }
    if ((_python_context->closure_inp.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_inp,
            _python_context->closure_inp.object
        );

    }
    if ((_python_context->closure_out.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_out,
            _python_context->closure_out.object
        );

    }
    if ((_python_context->closure_inp1.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_inp1,
            _python_context->closure_inp1.object
        );

    }
    if ((_python_context->closure_inp2.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_inp2,
            _python_context->closure_inp2.object
        );

    }
    if ((_python_context->closure_dtype.storage != NULL && _python_context->closure_dtype.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_dtype,
            _python_context->closure_dtype.storage->object
        );

    }
    if ((_python_context->closure_type.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_type,
            _python_context->closure_type.object
        );

    }
    if ((_python_context->closure_max_size.object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_max_size,
            _python_context->closure_max_size.object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


#if PYTHON_VERSION > 300
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    Py_DECREF( frame_function );
    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    PyErr_Restore( INCREASE_REFCOUNT( PyExc_StopIteration ), NULL, NULL );

    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );

    // The above won't return, but we need to make it clear to the compiler
    // as well, or else it will complain and/or generate inferior code.
    assert(false);
    return;
function_exception_exit:
    assert( exception_type );
    assert( exception_tb );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );

}
static PyObject *impl_function_39__gen_alignment_data_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject *_python_par_dtype, PyObject *_python_par_type, PyObject *_python_par_max_size )
{
    // Create context if any
    struct _context_generator_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *_python_context = new _context_generator_function_39__gen_alignment_data_of_module_numpy$testing$utils_t;

        PyObject *result = Nuitka_Generator_New(
            function_39__gen_alignment_data_of_module_numpy$testing$utils_context,
            const_str_plain__gen_alignment_data,
            codeobj_0f5319ef418a98d307499590a6a4161b,
            _python_context,
            _context_generator_function_39__gen_alignment_data_of_module_numpy$testing$utils_destructor
        );

    if (unlikely( result == NULL ))
    {
        PyErr_Format( PyExc_RuntimeError, "cannot create function _gen_alignment_data" );
        return NULL;
    }

    // Copy to context parameter values and closured variables if any.
    _python_context->closure_dtype.storage->object = _python_par_dtype;
    _python_context->closure_type.object = _python_par_type;
    _python_context->closure_max_size.object = _python_par_max_size;

    return result;
}
static PyObject *fparse_function_39__gen_alignment_data_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_dtype = NULL;
    PyObject *_python_par_type = NULL;
    PyObject *_python_par_max_size = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_gen_alignment_data() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_dtype == key )
            {
                assert( _python_par_dtype == NULL );
                _python_par_dtype = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_type == key )
            {
                assert( _python_par_type == NULL );
                _python_par_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_max_size == key )
            {
                assert( _python_par_max_size == NULL );
                _python_par_max_size = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_dtype, key ) == 1 )
            {
                assert( _python_par_dtype == NULL );
                _python_par_dtype = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_type, key ) == 1 )
            {
                assert( _python_par_type == NULL );
                _python_par_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ( const_str_plain_max_size, key ) == 1 )
            {
                assert( _python_par_max_size == NULL );
                _python_par_max_size = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_gen_alignment_data() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_dtype != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_dtype = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_dtype == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_dtype = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_type != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_type = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_type == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_type = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_max_size != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_max_size = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_max_size == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_max_size = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_dtype == NULL || _python_par_type == NULL || _python_par_max_size == NULL ))
    {
        PyObject *values[] = { _python_par_dtype, _python_par_type, _python_par_max_size };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_39__gen_alignment_data_of_module_numpy$testing$utils( self, _python_par_dtype, _python_par_type, _python_par_max_size );

error_exit:;

    Py_XDECREF( _python_par_dtype );
    Py_XDECREF( _python_par_type );
    Py_XDECREF( _python_par_max_size );

    return NULL;
}

static PyObject *dparse_function_39__gen_alignment_data_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_39__gen_alignment_data_of_module_numpy$testing$utils( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_39__gen_alignment_data_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( Nuitka_FunctionObject *self )
{
    // The context of the function.
    struct _context_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *_python_context = (struct _context_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *)self->m_context;

    // Local variable declarations.
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_called_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_0739ee2ff2186086ae97b1d23394db52, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_arange );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_arange );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 70640 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1552;
        goto frame_exception_exit_1;
    }

    tmp_call_pos_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = _python_context->closure_s.storage->object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1552;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    tmp_call_kw_1 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = _python_context->closure_dtype.storage->object;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1552;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_1 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    frame_function->f_lineno = 1552;
    tmp_slice_source_1 = CALL_FUNCTION( tmp_called_1, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_slice_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1552;
        goto frame_exception_exit_1;
    }
    tmp_slice_lower_1 = _python_context->closure_o.storage->object;

    if ( tmp_slice_lower_1 == NULL )
    {
        Py_DECREF( tmp_slice_source_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1552;
        goto frame_exception_exit_1;
    }

    tmp_return_value = LOOKUP_SLICE( tmp_slice_source_1, tmp_slice_lower_1, Py_None );
    Py_DECREF( tmp_slice_source_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1552;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((_python_context->closure_s.storage != NULL && _python_context->closure_s.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_s,
            _python_context->closure_s.storage->object
        );

    }
    if ((_python_context->closure_o.storage != NULL && _python_context->closure_o.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_o,
            _python_context->closure_o.storage->object
        );

    }
    if ((_python_context->closure_dtype.storage != NULL && _python_context->closure_dtype.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_dtype,
            _python_context->closure_dtype.storage->object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;

    if (unlikely( args_given + kw_size > 0 ))
    {
#if PYTHON_VERSION < 330
        ERROR_NO_ARGUMENTS_ALLOWED(
           self,
           args_given + kw_size
        );
#else
        ERROR_NO_ARGUMENTS_ALLOWED(
           self,
           kw_size > 0 ? kw : NULL,
           args_given
        );
#endif

        goto error_exit;
    }


    return impl_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( self );

error_exit:;


    return NULL;
}

static PyObject *dparse_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 0 )
    {
        return impl_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( self );
    }
    else
    {
        PyObject *result = fparse_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( Nuitka_FunctionObject *self )
{
    // The context of the function.
    struct _context_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *_python_context = (struct _context_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *)self->m_context;

    // Local variable declarations.
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_called_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_dd1945a10e98e3d29296e8f555a6783b, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_arange );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_arange );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 70640 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1565;
        goto frame_exception_exit_1;
    }

    tmp_call_pos_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = _python_context->closure_s.storage->object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1565;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    tmp_call_kw_1 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = _python_context->closure_dtype.storage->object;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1565;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_1 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    frame_function->f_lineno = 1565;
    tmp_slice_source_1 = CALL_FUNCTION( tmp_called_1, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_slice_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1565;
        goto frame_exception_exit_1;
    }
    tmp_slice_lower_1 = _python_context->closure_o.storage->object;

    if ( tmp_slice_lower_1 == NULL )
    {
        Py_DECREF( tmp_slice_source_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1565;
        goto frame_exception_exit_1;
    }

    tmp_return_value = LOOKUP_SLICE( tmp_slice_source_1, tmp_slice_lower_1, Py_None );
    Py_DECREF( tmp_slice_source_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1565;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((_python_context->closure_s.storage != NULL && _python_context->closure_s.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_s,
            _python_context->closure_s.storage->object
        );

    }
    if ((_python_context->closure_o.storage != NULL && _python_context->closure_o.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_o,
            _python_context->closure_o.storage->object
        );

    }
    if ((_python_context->closure_dtype.storage != NULL && _python_context->closure_dtype.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_dtype,
            _python_context->closure_dtype.storage->object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;

    if (unlikely( args_given + kw_size > 0 ))
    {
#if PYTHON_VERSION < 330
        ERROR_NO_ARGUMENTS_ALLOWED(
           self,
           args_given + kw_size
        );
#else
        ERROR_NO_ARGUMENTS_ALLOWED(
           self,
           kw_size > 0 ? kw : NULL,
           args_given
        );
#endif

        goto error_exit;
    }


    return impl_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( self );

error_exit:;


    return NULL;
}

static PyObject *dparse_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 0 )
    {
        return impl_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( self );
    }
    else
    {
        PyObject *result = fparse_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( Nuitka_FunctionObject *self )
{
    // The context of the function.
    struct _context_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *_python_context = (struct _context_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *)self->m_context;

    // Local variable declarations.
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    PyObject *tmp_call_kw_1;
    PyObject *tmp_call_pos_1;
    PyObject *tmp_called_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_tuple_element_1;
    tmp_return_value = NULL;

    // Actual function code.
    static PyFrameObject *cache_frame_function = NULL;
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_17bfcb3b6a2cb73f1b3c3f5d2b257231, module_numpy$testing$utils );
    PyFrameObject *frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_arange );

    if (unlikely( tmp_called_1 == NULL ))
    {
        tmp_called_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_arange );
    }

    if ( tmp_called_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 70640 ], 35, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1566;
        goto frame_exception_exit_1;
    }

    tmp_call_pos_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = _python_context->closure_s.storage->object;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 369 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1566;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_call_pos_1, 0, tmp_tuple_element_1 );
    tmp_call_kw_1 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = _python_context->closure_dtype.storage->object;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_call_pos_1 );
        Py_DECREF( tmp_call_kw_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 53034 ], 51, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1566;
        goto frame_exception_exit_1;
    }

    tmp_dict_key_1 = const_str_plain_dtype;
    PyDict_SetItem( tmp_call_kw_1, tmp_dict_key_1, tmp_dict_value_1 );
    frame_function->f_lineno = 1566;
    tmp_slice_source_1 = CALL_FUNCTION( tmp_called_1, tmp_call_pos_1, tmp_call_kw_1 );
    Py_DECREF( tmp_call_pos_1 );
    Py_DECREF( tmp_call_kw_1 );
    if ( tmp_slice_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1566;
        goto frame_exception_exit_1;
    }
    tmp_slice_lower_1 = _python_context->closure_o.storage->object;

    if ( tmp_slice_lower_1 == NULL )
    {
        Py_DECREF( tmp_slice_source_1 );
        exception_type = INCREASE_REFCOUNT( PyExc_UnboundLocalError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 12331 ], 47, 0 );
        exception_tb = NULL;

        frame_function->f_lineno = 1566;
        goto frame_exception_exit_1;
    }

    tmp_return_value = LOOKUP_SLICE( tmp_slice_source_1, tmp_slice_lower_1, Py_None );
    Py_DECREF( tmp_slice_source_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_function->f_lineno = 1566;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;
    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto function_return_exit;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
    }
    else if ( exception_tb->tb_frame != frame_function )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_function ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }


    tmp_frame_locals = PyDict_New();
    if ((_python_context->closure_s.storage != NULL && _python_context->closure_s.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_s,
            _python_context->closure_s.storage->object
        );

    }
    if ((_python_context->closure_o.storage != NULL && _python_context->closure_o.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_o,
            _python_context->closure_o.storage->object
        );

    }
    if ((_python_context->closure_dtype.storage != NULL && _python_context->closure_dtype.storage->object != NULL))
    {
        PyDict_SetItem(
            tmp_frame_locals,
            const_str_plain_dtype,
            _python_context->closure_dtype.storage->object
        );

    }
    detachFrame( exception_tb, tmp_frame_locals );


    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto function_exception_exit;
    frame_no_exception_1:;


    // Return statement must be present.
    assert(false);
function_exception_exit:
    assert( exception_type );
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return NULL;
function_return_exit:
    return tmp_return_value;

}
static PyObject *fparse_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;

    if (unlikely( args_given + kw_size > 0 ))
    {
#if PYTHON_VERSION < 330
        ERROR_NO_ARGUMENTS_ALLOWED(
           self,
           args_given + kw_size
        );
#else
        ERROR_NO_ARGUMENTS_ALLOWED(
           self,
           kw_size > 0 ? kw : NULL,
           args_given
        );
#endif

        goto error_exit;
    }


    return impl_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( self );

error_exit:;


    return NULL;
}

static PyObject *dparse_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 0 )
    {
        return impl_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( self );
    }
    else
    {
        PyObject *result = fparse_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_40_IgnoreException_of_module_numpy$testing$utils(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__;
    PyObjectLocalVariable var___doc__;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_a29bf7b3b71fbb8ef25655c7091b08b9;
    assert( var___module__.object == NULL );
    var___module__.object = INCREASE_REFCOUNT( tmp_assign_source_1 );

    tmp_assign_source_2 = const_str_digest_8d39c6f825d19797590e9e3179e3fa6c;
    assert( var___doc__.object == NULL );
    var___doc__.object = INCREASE_REFCOUNT( tmp_assign_source_2 );

    tmp_return_value = PyDict_New();
    if ((var___module__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__.object
        );

    }
    if ((var___doc__.object != NULL))
    {
        PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__.object
        );

    }
    goto function_return_exit;

    // Return statement must be present.
    assert(false);
    return NULL;
function_return_exit:
    return tmp_return_value;

}



static PyObject *MAKE_FUNCTION_function_10_GetPerformanceAttributes_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10_GetPerformanceAttributes_of_module_numpy$testing$utils,
        dparse_function_10_GetPerformanceAttributes_of_module_numpy$testing$utils,
        const_str_plain_GetPerformanceAttributes,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3e760ee41369da6be31fce32dcc7b768,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11_memusage_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_11_memusage_of_module_numpy$testing$utils,
        dparse_function_11_memusage_of_module_numpy$testing$utils,
        const_str_plain_memusage,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d6630fe54ae77a8de478061c0c047d6b,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_12_build_err_msg_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_12_build_err_msg_of_module_numpy$testing$utils,
        dparse_function_12_build_err_msg_of_module_numpy$testing$utils,
        const_str_plain_build_err_msg,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4d481aab041b6cb3ceb38db6ee606745,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_13_assert_equal_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_13_assert_equal_of_module_numpy$testing$utils,
        dparse_function_13_assert_equal_of_module_numpy$testing$utils,
        const_str_plain_assert_equal,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2711bf5c021dca76a1896f2562e53b8b,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_b97c16860a8f4af366a6279f213681b6
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_14_print_assert_equal_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_14_print_assert_equal_of_module_numpy$testing$utils,
        dparse_function_14_print_assert_equal_of_module_numpy$testing$utils,
        const_str_plain_print_assert_equal,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_42cff4fac10b8caf56a7116e0ec57a0f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_0b02c8e9b4951ce86569b89788daf148
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_15_assert_almost_equal_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_15_assert_almost_equal_of_module_numpy$testing$utils,
        dparse_function_15_assert_almost_equal_of_module_numpy$testing$utils,
        const_str_plain_assert_almost_equal,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_1c91c46a9aa26502c2107b87d7e7d08b,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_da1b9f987f03027db4efbd56122fbfd2
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_16_assert_approx_equal_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_16_assert_approx_equal_of_module_numpy$testing$utils,
        dparse_function_16_assert_approx_equal_of_module_numpy$testing$utils,
        const_str_plain_assert_approx_equal,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ac0bc451c03e86bef55928b748444421,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_b9e9511ece9e362386a977d4b1e26287
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_17_assert_array_compare_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_17_assert_array_compare_of_module_numpy$testing$utils,
        dparse_function_17_assert_array_compare_of_module_numpy$testing$utils,
        const_str_plain_assert_array_compare,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_fcdd6ed607324dde3da216584e0576f4,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_18_assert_array_equal_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_18_assert_array_equal_of_module_numpy$testing$utils,
        dparse_function_18_assert_array_equal_of_module_numpy$testing$utils,
        const_str_plain_assert_array_equal,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_df3ab4141c291d39939be6a4a7fa445d,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_9d5fe33f86d1dde006a83ff6e2484903
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_19_assert_array_almost_equal_of_module_numpy$testing$utils,
        dparse_function_19_assert_array_almost_equal_of_module_numpy$testing$utils,
        const_str_plain_assert_array_almost_equal,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_bc00aff040e6cadcddeaa7c8acb7bd1e,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_aeef159a70e347ede62d2cf8a664d83a
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_35_WarningMessage_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_35_WarningMessage_of_module_numpy$testing$utils,
        dparse_function_1___init___of_class_35_WarningMessage_of_module_numpy$testing$utils,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3d894d2caf6f3ca2f22c161dbb0cf0ab,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_36_WarningManager_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_36_WarningManager_of_module_numpy$testing$utils,
        dparse_function_1___init___of_class_36_WarningManager_of_module_numpy$testing$utils,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a0b8a2849f4cfb5582b4cef583bf0ee8,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils( PyObjectSharedLocalVariable &closure_np )
{
    struct _context_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils_t *_python_context = new _context_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_np.shareWith( closure_np );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils,
        dparse_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils,
        const_str_plain__diff,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_dc7314e99045f1c4ae1ef542dc42aeaa,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None,
        _python_context,
        _context_function_1__diff_of_function_32_nulp_diff_of_module_numpy$testing$utils_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_assert__of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_assert__of_module_numpy$testing$utils,
        dparse_function_1_assert__of_module_numpy$testing$utils,
        const_str_plain_assert_,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_72564683b8a7449521e21d2b0ef64eab,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_68ac50b36ab744d6652388991ad76ae2
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( PyObjectSharedLocalVariable &closure_around, PyObjectSharedLocalVariable &closure_decimal, PyObjectSharedLocalVariable &closure_float_, PyObjectSharedLocalVariable &closure_issubdtype, PyObjectSharedLocalVariable &closure_npany, PyObjectSharedLocalVariable &closure_number )
{
    struct _context_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils_t *_python_context = new _context_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_around.shareWith( closure_around );
    _python_context->closure_decimal.shareWith( closure_decimal );
    _python_context->closure_float_.shareWith( closure_float_ );
    _python_context->closure_issubdtype.shareWith( closure_issubdtype );
    _python_context->closure_npany.shareWith( closure_npany );
    _python_context->closure_number.shareWith( closure_number );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils,
        dparse_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils,
        const_str_plain_compare,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6edb39e03f23fc50b9831c96a8c329f3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None,
        _python_context,
        _context_function_1_compare_of_function_19_assert_array_almost_equal_of_module_numpy$testing$utils_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils( PyObjectSharedLocalVariable &closure_atol, PyObjectSharedLocalVariable &closure_np, PyObjectSharedLocalVariable &closure_rtol )
{
    struct _context_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils_t *_python_context = new _context_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_atol.shareWith( closure_atol );
    _python_context->closure_np.shareWith( closure_np );
    _python_context->closure_rtol.shareWith( closure_rtol );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils,
        dparse_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils,
        const_str_plain_compare,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_9b9fce1cb8c9bb88af26a6a6ddee7c53,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None,
        _python_context,
        _context_function_1_compare_of_function_29_assert_allclose_of_module_numpy$testing$utils_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_isnumber_of_function_17_assert_array_compare_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_isnumber_of_function_17_assert_array_compare_of_module_numpy$testing$utils,
        dparse_function_1_isnumber_of_function_17_assert_array_compare_of_module_numpy$testing$utils,
        const_str_plain_isnumber,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6d94cf55a24d791ad0ddb5a1ee9195b3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils( PyObjectSharedLocalVariable &closure_log )
{
    struct _context_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils_t *_python_context = new _context_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_log.shareWith( closure_log );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils,
        dparse_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils,
        const_str_plain_showwarning,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0be72c483448a744e0788d9b9c16eb07,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None,
        _python_context,
        _context_function_1_showwarning_of_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_20_assert_array_less_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_20_assert_array_less_of_module_numpy$testing$utils,
        dparse_function_20_assert_array_less_of_module_numpy$testing$utils,
        const_str_plain_assert_array_less,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_255590aa610a45a3b7c526600be2b018,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_555f3d9bdca506ab50d243f7793be335
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_21_runstring_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_21_runstring_of_module_numpy$testing$utils,
        dparse_function_21_runstring_of_module_numpy$testing$utils,
        const_str_plain_runstring,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ac0b1f483f349766b78aa66a82e987e5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_22_assert_string_equal_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_22_assert_string_equal_of_module_numpy$testing$utils,
        dparse_function_22_assert_string_equal_of_module_numpy$testing$utils,
        const_str_plain_assert_string_equal,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ac0845d1e57a7ace00b74ac450e1bd03,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_96e07cefe56c6dcc97ad00bd79027eeb
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_23_rundocs_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_23_rundocs_of_module_numpy$testing$utils,
        dparse_function_23_rundocs_of_module_numpy$testing$utils,
        const_str_plain_rundocs,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3c0ce4283d45e52104cb1f9dde267096,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_e7f7f86a2730bf491604726e58219774
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_24_raises_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_24_raises_of_module_numpy$testing$utils,
        dparse_function_24_raises_of_module_numpy$testing$utils,
        const_str_plain_raises,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5b9a2fed1fecb39a60d749ee9336884c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_25_assert_raises_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_25_assert_raises_of_module_numpy$testing$utils,
        dparse_function_25_assert_raises_of_module_numpy$testing$utils,
        const_str_plain_assert_raises,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5df4eda9b20d8ff48998d43432f998b5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_7b8ab97309813f2adb309ef116862e76
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_26_decorate_methods_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_26_decorate_methods_of_module_numpy$testing$utils,
        dparse_function_26_decorate_methods_of_module_numpy$testing$utils,
        const_str_plain_decorate_methods,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_15af28176c754e7cb659059b95b3c9df,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_e2c6ffe2bc771998ad44ce45a4fc70c9
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_27_measure_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_27_measure_of_module_numpy$testing$utils,
        dparse_function_27_measure_of_module_numpy$testing$utils,
        const_str_plain_measure,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8c807be918f9fc89ddcf2c182f4d8260,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_3967666f82032e8c08707da056df8542
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_28__assert_valid_refcount_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_28__assert_valid_refcount_of_module_numpy$testing$utils,
        dparse_function_28__assert_valid_refcount_of_module_numpy$testing$utils,
        const_str_plain__assert_valid_refcount,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a299f7d0e82ab62e2aceda37883a868a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_b9ba15314bce7173837e948e2f705918
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_29_assert_allclose_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_29_assert_allclose_of_module_numpy$testing$utils,
        dparse_function_29_assert_allclose_of_module_numpy$testing$utils,
        const_str_plain_assert_allclose,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_96f6cd6f4183dbd4cfde565dbd74e385,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_61fe48964d9b6a43acacd5c641dc9222
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils,
        dparse_function_2___enter___of_class_36_WarningManager_of_module_numpy$testing$utils,
        const_str_plain___enter__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_1ae423d552e54de094d1aa3af7dc685e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___str___of_class_35_WarningMessage_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___str___of_class_35_WarningMessage_of_module_numpy$testing$utils,
        dparse_function_2___str___of_class_35_WarningMessage_of_module_numpy$testing$utils,
        const_str_plain___str__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_627976217598cea86afee608efc331ef,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils( PyObject *defaults, PyObjectSharedLocalVariable &closure_err_msg, PyObjectSharedLocalVariable &closure_header, PyObjectSharedLocalVariable &closure_verbose, PyObjectSharedLocalVariable &closure_x, PyObjectSharedLocalVariable &closure_y )
{
    struct _context_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils_t *_python_context = new _context_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_err_msg.shareWith( closure_err_msg );
    _python_context->closure_header.shareWith( closure_header );
    _python_context->closure_verbose.shareWith( closure_verbose );
    _python_context->closure_x.shareWith( closure_x );
    _python_context->closure_y.shareWith( closure_y );

    PyObject *result = Nuitka_Function_New(
        fparse_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils,
        dparse_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils,
        const_str_plain_chk_same_position,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f011aedaeab79fee77ac270e646c35b7,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_3390830ec637bd8506b2693c0e9cef6b,
        _python_context,
        _context_function_2_chk_same_position_of_function_17_assert_array_compare_of_module_numpy$testing$utils_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_gisnan_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_gisnan_of_module_numpy$testing$utils,
        dparse_function_2_gisnan_of_module_numpy$testing$utils,
        const_str_plain_gisnan,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ce89bd25f715c8108319c3ccb2888e5e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_409d947cbf46d6b05f44303655f0e58b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_30_assert_array_almost_equal_nulp_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_30_assert_array_almost_equal_nulp_of_module_numpy$testing$utils,
        dparse_function_30_assert_array_almost_equal_nulp_of_module_numpy$testing$utils,
        const_str_plain_assert_array_almost_equal_nulp,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_06641a2a007d70c37ca1af8cbc238fe6,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_cc58713dce7955eb1c70d80bba7aeaed
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_31_assert_array_max_ulp_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_31_assert_array_max_ulp_of_module_numpy$testing$utils,
        dparse_function_31_assert_array_max_ulp_of_module_numpy$testing$utils,
        const_str_plain_assert_array_max_ulp,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8701f077855ed47b388368d45bfeeb88,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_08d5dba3d22036b2b726cea75f46ce7c
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_32_nulp_diff_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_32_nulp_diff_of_module_numpy$testing$utils,
        dparse_function_32_nulp_diff_of_module_numpy$testing$utils,
        const_str_plain_nulp_diff,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_337b17a20c58ea8ea7a96d24ee4c27a5,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_3bb083c0193c503b32d4df24830b6337
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_33__integer_repr_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_33__integer_repr_of_module_numpy$testing$utils,
        dparse_function_33__integer_repr_of_module_numpy$testing$utils,
        const_str_plain__integer_repr,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_806bb475013dd6ad7b9edbc31deb906b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_34_integer_repr_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_34_integer_repr_of_module_numpy$testing$utils,
        dparse_function_34_integer_repr_of_module_numpy$testing$utils,
        const_str_plain_integer_repr,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_631069609e44debf5c026bcd6159e75d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_8b612521d6eef9ee6726b65f8c94efbe
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_37_assert_warns_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_37_assert_warns_of_module_numpy$testing$utils,
        dparse_function_37_assert_warns_of_module_numpy$testing$utils,
        const_str_plain_assert_warns,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_247447e674e368c21dadabcf58fd100b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_f4c3a0245533a786349a32e5cc4dda24
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_38_assert_no_warnings_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_38_assert_no_warnings_of_module_numpy$testing$utils,
        dparse_function_38_assert_no_warnings_of_module_numpy$testing$utils,
        const_str_plain_assert_no_warnings,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_7fcc172685067f94c46806e5864f3040,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_86dd7c9709aea44f916e58c561b41c4d
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_39__gen_alignment_data_of_module_numpy$testing$utils( PyObject *defaults )
{
    return Nuitka_Function_New(
        fparse_function_39__gen_alignment_data_of_module_numpy$testing$utils,
        dparse_function_39__gen_alignment_data_of_module_numpy$testing$utils,
        const_str_plain__gen_alignment_data,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_b79127009e799ae514dd13beac2080dc,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_dc69964195218c92c1920611a4b0f89a
    );
}



static PyObject *MAKE_FUNCTION_function_3___exit___of_class_36_WarningManager_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3___exit___of_class_36_WarningManager_of_module_numpy$testing$utils,
        dparse_function_3___exit___of_class_36_WarningManager_of_module_numpy$testing$utils,
        const_str_plain___exit__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_54ba2290323f4310ca47fe6b2f312ba7,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_gisfinite_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_gisfinite_of_module_numpy$testing$utils,
        dparse_function_3_gisfinite_of_module_numpy$testing$utils,
        const_str_plain_gisfinite,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a960665e7f1b970b708d2bf20f9890b1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_25406a365cb70649617f2320e857472f
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_gisinf_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_gisinf_of_module_numpy$testing$utils,
        dparse_function_4_gisinf_of_module_numpy$testing$utils,
        const_str_plain_gisinf,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_980df88a5eaa46769d9b40d6ad3c669f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_3d5c6b6833444c6030fa6f5dd7fd9d0b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_rand_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_rand_of_module_numpy$testing$utils,
        dparse_function_5_rand_of_module_numpy$testing$utils,
        const_str_plain_rand,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_1648d1a7ed97ac5991f3975b8d841444,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_77af59999e5dac5a00c73a6a39c4eb1c
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_jiffies_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_jiffies_of_module_numpy$testing$utils,
        dparse_function_6_jiffies_of_module_numpy$testing$utils,
        const_str_plain_jiffies,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_69d159af49b6adde6f62c3a6c524dfd5,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_4b97cca84d8dd71cdb3b4fd4c8f1d17e
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_memusage_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_memusage_of_module_numpy$testing$utils,
        dparse_function_7_memusage_of_module_numpy$testing$utils,
        const_str_plain_memusage,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_67fc806fe3669a537fe853a628f97d3f,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_fa1712245d7a8c0d5abfd2fd59c5f16d
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_jiffies_of_module_numpy$testing$utils( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_jiffies_of_module_numpy$testing$utils,
        dparse_function_8_jiffies_of_module_numpy$testing$utils,
        const_str_plain_jiffies,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_239aa3b12d25329fa24e22b08716d463,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_fcc53f6e6cd9f93c6c4d11262486eded
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_memusage_of_module_numpy$testing$utils(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9_memusage_of_module_numpy$testing$utils,
        dparse_function_9_memusage_of_module_numpy$testing$utils,
        const_str_plain_memusage,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_04bf0024e2de59b1c418c173e8e5a1d1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        const_str_digest_7d19d66ae6d8e95a0b8f189b886d27de
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils( PyObjectSharedLocalVariable &closure_msg )
{
    struct _context_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils_t *_python_context = new _context_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_msg.shareWith( closure_msg );

    PyObject *result = Nuitka_Function_New(
        fparse_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils,
        dparse_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_745511c1918e6b8f9a32100ac8aebdb3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None,
        _python_context,
        _context_lambda_1_lambda_of_function_23_rundocs_of_module_numpy$testing$utils_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( PyObjectSharedLocalVariable &closure_dtype, PyObjectSharedLocalVariable &closure_o, PyObjectSharedLocalVariable &closure_s )
{
    struct _context_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *_python_context = new _context_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_dtype.shareWith( closure_dtype );
    _python_context->closure_o.shareWith( closure_o );
    _python_context->closure_s.shareWith( closure_s );

    PyObject *result = Nuitka_Function_New(
        fparse_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils,
        dparse_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2982914fd5f16f66dab3cfd15a3ac622,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None,
        _python_context,
        _context_lambda_1_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( PyObjectSharedLocalVariable &closure_dtype, PyObjectSharedLocalVariable &closure_o, PyObjectSharedLocalVariable &closure_s )
{
    struct _context_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *_python_context = new _context_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_dtype.shareWith( closure_dtype );
    _python_context->closure_o.shareWith( closure_o );
    _python_context->closure_s.shareWith( closure_s );

    PyObject *result = Nuitka_Function_New(
        fparse_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils,
        dparse_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_9466012db79c67ae777475e65c214be4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None,
        _python_context,
        _context_lambda_2_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils( PyObjectSharedLocalVariable &closure_dtype, PyObjectSharedLocalVariable &closure_o, PyObjectSharedLocalVariable &closure_s )
{
    struct _context_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t *_python_context = new _context_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_dtype.shareWith( closure_dtype );
    _python_context->closure_o.shareWith( closure_o );
    _python_context->closure_s.shareWith( closure_s );

    PyObject *result = Nuitka_Function_New(
        fparse_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils,
        dparse_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_7b55e0664424b14bdbbac7ca87bb1efd,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$testing$utils,
        Py_None,
        _python_context,
        _context_lambda_3_lambda_of_function_39__gen_alignment_data_of_module_numpy$testing$utils_destructor
    );

    return result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_numpy$testing$utils =
{
    PyModuleDef_HEAD_INIT,
    "numpy.testing.utils",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#define _MODULE_UNFREEZER 0

#if _MODULE_UNFREEZER

#include "nuitka/unfreezing.hpp"

// Table for lookup to find "frozen" modules or DLLs, i.e. the ones included in
// or along this binary.

static struct Nuitka_MetaPathBasedLoaderEntry meta_path_loader_entries[] =
{

    { NULL, NULL, 0 }
};

#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( numpy$testing$utils )
{

#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Packages can be imported recursively in deep executables.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_numpy$testing$utils );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    _initConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );
#if PYTHON_VERSION < 300
    initSlotCompare();
#endif

    patchBuiltinModule();
    patchTypeComparison();

#endif

#if _MODULE_UNFREEZER
    registerMetaPathBasedUnfreezer( meta_path_loader_entries );
#endif

    _initModuleConstants();
    _initModuleCodeObjects();

    // puts( "in initnumpy$testing$utils" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_numpy$testing$utils = Py_InitModule4(
        "numpy.testing.utils",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    module_numpy$testing$utils = PyModule_Create( &mdef_numpy$testing$utils );
#endif

    moduledict_numpy$testing$utils = (PyDictObject *)((PyModuleObject *)module_numpy$testing$utils)->md_dict;

    assertObject( module_numpy$testing$utils );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), const_str_digest_a29bf7b3b71fbb8ef25655c7091b08b9, module_numpy$testing$utils );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( module_numpy$testing$utils );

    if ( PyDict_GetItem( module_dict, const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, const_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
#if _MODULE_UNFREEZER
    PyDict_SetItem( module_dict, const_str_plain___loader__, metapath_based_loader );
#else
    PyDict_SetItem( module_dict, const_str_plain___loader__, Py_None );
#endif
#endif

    // Temp variables if any
    PyObjectTempVariable tmp_and_1__value_1;
    PyObjectTempVariable tmp_class_creation_1__bases;
    PyObjectTempVariable tmp_class_creation_1__class_dict;
    PyObjectTempVariable tmp_class_creation_1__metaclass;
    PyObjectTempVariable tmp_class_creation_1__class;
    PyObjectTempVariable tmp_class_creation_2__bases;
    PyObjectTempVariable tmp_class_creation_2__class_dict;
    PyObjectTempVariable tmp_class_creation_2__metaclass;
    PyObjectTempVariable tmp_class_creation_2__class;
    PyObjectTempVariable tmp_class_creation_3__bases;
    PyObjectTempVariable tmp_class_creation_3__class_dict;
    PyObjectTempVariable tmp_class_creation_3__metaclass;
    PyObjectTempVariable tmp_class_creation_3__class;
    PyObject *exception_type, *exception_value;
    PyTracebackObject *exception_tb;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_binop_left_1;
    PyObject *tmp_binop_left_2;
    PyObject *tmp_binop_right_1;
    PyObject *tmp_binop_right_2;
    PyObject *tmp_call_arg_element_1;
    PyObject *tmp_call_arg_element_2;
    PyObject *tmp_call_arg_element_3;
    PyObject *tmp_call_arg_element_4;
    PyObject *tmp_call_arg_element_5;
    PyObject *tmp_call_arg_element_6;
    PyObject *tmp_call_arg_element_7;
    PyObject *tmp_call_arg_element_8;
    PyObject *tmp_call_arg_element_9;
    PyObject *tmp_called_1;
    PyObject *tmp_called_2;
    PyObject *tmp_called_3;
    PyObject *tmp_called_4;
    PyObject *tmp_called_5;
    PyObject *tmp_class_bases_1;
    PyObject *tmp_class_bases_2;
    PyObject *tmp_class_bases_3;
    int tmp_cmp_Eq_1;
    int tmp_cmp_GtE_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_defaults_1;
    PyObject *tmp_defaults_2;
    PyObject *tmp_defaults_3;
    PyObject *tmp_defaults_4;
    PyObject *tmp_defaults_5;
    PyObject *tmp_defaults_6;
    PyObject *tmp_defaults_7;
    PyObject *tmp_defaults_8;
    PyObject *tmp_defaults_9;
    PyObject *tmp_defaults_10;
    PyObject *tmp_defaults_11;
    PyObject *tmp_defaults_12;
    PyObject *tmp_defaults_13;
    PyObject *tmp_defaults_14;
    PyObject *tmp_defaults_15;
    PyObject *tmp_defaults_16;
    PyObject *tmp_defaults_17;
    PyObject *tmp_defaults_18;
    PyObject *tmp_defaults_19;
    PyObject *tmp_defaults_20;
    PyObject *tmp_defaults_21;
    PyObject *tmp_defaults_22;
    PyObject *tmp_dget_dict_1;
    PyObject *tmp_dget_dict_2;
    PyObject *tmp_dget_dict_3;
    PyObject *tmp_dget_key_1;
    PyObject *tmp_dget_key_2;
    PyObject *tmp_dget_key_3;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_globals_3;
    PyObject *tmp_import_globals_4;
    PyObject *tmp_import_globals_5;
    PyObject *tmp_import_globals_6;
    PyObject *tmp_import_globals_7;
    PyObject *tmp_import_globals_8;
    PyObject *tmp_import_globals_9;
    PyObject *tmp_import_globals_10;
    PyObject *tmp_import_globals_11;
    PyObject *tmp_import_globals_12;
    PyObject *tmp_import_globals_13;
    PyObject *tmp_import_globals_14;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_import_name_from_3;
    PyObject *tmp_import_name_from_4;
    PyObject *tmp_import_name_from_5;
    PyObject *tmp_import_name_from_6;
    PyObject *tmp_import_name_from_7;
    PyObject *tmp_import_name_from_8;
    PyObject *tmp_import_name_from_9;
    bool tmp_result;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_subscr_subscript_1;
    PyObject *tmp_subscr_target_1;
    int tmp_tried_lineno_1;
    int tmp_tried_lineno_2;
    int tmp_tried_lineno_3;
    int tmp_tried_lineno_4;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;

    // Module code.
    tmp_assign_source_1 = const_str_digest_e3ecc3b986655ba484341b93f8a67c54;
    UPDATE_STRING_DICT0( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    tmp_assign_source_2 = const_str_digest_dbcd2a4921b164c1aa89baceb6e0a5ad;
    UPDATE_STRING_DICT0( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    // Frame without reuse.
    PyFrameObject *frame_module = MAKE_FRAME( codeobj_0a1ffb0eefff30e2fac8992a559ecc43, module_numpy$testing$utils );

    // Push the new frame as the currently active one, and we should be exlusively
    // owning it.
    pushFrameStack( frame_module );
    assert( Py_REFCNT( frame_module ) == 1 );

#if PYTHON_VERSION >= 340
    frame_module->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    frame_module->f_lineno = 5;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_plain___future__, tmp_import_globals_1, tmp_import_globals_1, const_tuple_b3c114ff65e5229953139969fd8f9f4c_tuple, const_int_0 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 5;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_division );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 5;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_division, tmp_assign_source_3 );
    tmp_import_globals_2 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    frame_module->f_lineno = 5;
    tmp_import_name_from_2 = IMPORT_MODULE( const_str_plain___future__, tmp_import_globals_2, tmp_import_globals_2, const_tuple_b3c114ff65e5229953139969fd8f9f4c_tuple, const_int_0 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 5;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_4 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_absolute_import );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 5;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_absolute_import, tmp_assign_source_4 );
    tmp_import_globals_3 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    frame_module->f_lineno = 5;
    tmp_import_name_from_3 = IMPORT_MODULE( const_str_plain___future__, tmp_import_globals_3, tmp_import_globals_3, const_tuple_b3c114ff65e5229953139969fd8f9f4c_tuple, const_int_0 );
    if ( tmp_import_name_from_3 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 5;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_5 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_print_function );
    Py_DECREF( tmp_import_name_from_3 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 5;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_print_function, tmp_assign_source_5 );
    tmp_import_globals_4 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    frame_module->f_lineno = 7;
    tmp_assign_source_6 = IMPORT_MODULE( const_str_plain_os, tmp_import_globals_4, tmp_import_globals_4, Py_None, const_int_0 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 7;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_os, tmp_assign_source_6 );
    tmp_import_globals_5 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    frame_module->f_lineno = 8;
    tmp_assign_source_7 = IMPORT_MODULE( const_str_plain_sys, tmp_import_globals_5, tmp_import_globals_5, Py_None, const_int_0 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 8;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_sys, tmp_assign_source_7 );
    tmp_import_globals_6 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    frame_module->f_lineno = 9;
    tmp_assign_source_8 = IMPORT_MODULE( const_str_plain_re, tmp_import_globals_6, tmp_import_globals_6, Py_None, const_int_0 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 9;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_re, tmp_assign_source_8 );
    tmp_import_globals_7 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    frame_module->f_lineno = 10;
    tmp_assign_source_9 = IMPORT_MODULE( const_str_plain_operator, tmp_import_globals_7, tmp_import_globals_7, Py_None, const_int_0 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 10;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_operator, tmp_assign_source_9 );
    tmp_import_globals_8 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    frame_module->f_lineno = 11;
    tmp_assign_source_10 = IMPORT_MODULE( const_str_plain_warnings, tmp_import_globals_8, tmp_import_globals_8, Py_None, const_int_0 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 11;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_warnings, tmp_assign_source_10 );
    tmp_import_globals_9 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    frame_module->f_lineno = 12;
    tmp_import_name_from_4 = IMPORT_MODULE( const_str_plain_nosetester, tmp_import_globals_9, tmp_import_globals_9, const_tuple_str_plain_import_nose_tuple, const_int_pos_1 );
    if ( tmp_import_name_from_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 12;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_11 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_import_nose );
    Py_DECREF( tmp_import_name_from_4 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 12;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_import_nose, tmp_assign_source_11 );
    tmp_import_globals_10 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    frame_module->f_lineno = 13;
    tmp_import_name_from_5 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_10, tmp_import_globals_10, const_tuple_str_plain_float32_str_plain_empty_str_plain_arange_tuple, const_int_0 );
    if ( tmp_import_name_from_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 13;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_12 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_float32 );
    Py_DECREF( tmp_import_name_from_5 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 13;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_float32, tmp_assign_source_12 );
    tmp_import_globals_11 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    frame_module->f_lineno = 13;
    tmp_import_name_from_6 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_11, tmp_import_globals_11, const_tuple_str_plain_float32_str_plain_empty_str_plain_arange_tuple, const_int_0 );
    if ( tmp_import_name_from_6 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 13;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_13 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_empty );
    Py_DECREF( tmp_import_name_from_6 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 13;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_empty, tmp_assign_source_13 );
    tmp_import_globals_12 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    frame_module->f_lineno = 13;
    tmp_import_name_from_7 = IMPORT_MODULE( const_str_digest_3e8d4c5fbc78426f466387c576765620, tmp_import_globals_12, tmp_import_globals_12, const_tuple_str_plain_float32_str_plain_empty_str_plain_arange_tuple, const_int_0 );
    if ( tmp_import_name_from_7 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 13;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_14 = IMPORT_NAME( tmp_import_name_from_7, const_str_plain_arange );
    Py_DECREF( tmp_import_name_from_7 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 13;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_arange, tmp_assign_source_14 );
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 15;
        goto frame_exception_exit_1;
    }

    tmp_subscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_version_info );
    if ( tmp_subscr_target_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 15;
        goto frame_exception_exit_1;
    }
    tmp_subscr_subscript_1 = const_int_0;
    tmp_compare_left_1 = LOOKUP_SUBSCRIPT( tmp_subscr_target_1, tmp_subscr_subscript_1 );
    Py_DECREF( tmp_subscr_target_1 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 15;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = const_int_pos_3;
    tmp_cmp_GtE_1 = RICH_COMPARE_BOOL_GE( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_GtE_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        frame_module->f_lineno = 15;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    if (tmp_cmp_GtE_1 == 1)
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_import_globals_13 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    frame_module->f_lineno = 16;
    tmp_import_name_from_8 = IMPORT_MODULE( const_str_plain_io, tmp_import_globals_13, tmp_import_globals_13, const_tuple_str_plain_StringIO_tuple, const_int_0 );
    if ( tmp_import_name_from_8 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 16;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_15 = IMPORT_NAME( tmp_import_name_from_8, const_str_plain_StringIO );
    Py_DECREF( tmp_import_name_from_8 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 16;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_StringIO, tmp_assign_source_15 );
    goto branch_end_1;
    branch_no_1:;
    tmp_import_globals_14 = ((PyModuleObject *)module_numpy$testing$utils)->md_dict;
    frame_module->f_lineno = 18;
    tmp_import_name_from_9 = IMPORT_MODULE( const_str_plain_StringIO, tmp_import_globals_14, tmp_import_globals_14, const_tuple_str_plain_StringIO_tuple, const_int_0 );
    if ( tmp_import_name_from_9 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 18;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_16 = IMPORT_NAME( tmp_import_name_from_9, const_str_plain_StringIO );
    Py_DECREF( tmp_import_name_from_9 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 18;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_StringIO, tmp_assign_source_16 );
    branch_end_1:;
    tmp_assign_source_17 = LIST_COPY( const_list_7ff88c5eb534ce1ca34d0b88f2804a46_list );
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain___all__, tmp_assign_source_17 );
    tmp_assign_source_18 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_verbose, tmp_assign_source_18 );
    tmp_defaults_1 = const_tuple_str_empty_tuple;
    tmp_assign_source_19 = MAKE_FUNCTION_function_1_assert__of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_1 ) );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_19 );

        frame_module->f_lineno = 33;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_, tmp_assign_source_19 );
    tmp_assign_source_20 = MAKE_FUNCTION_function_2_gisnan_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_20 );

        frame_module->f_lineno = 46;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisnan, tmp_assign_source_20 );
    tmp_assign_source_21 = MAKE_FUNCTION_function_3_gisfinite_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_21 );

        frame_module->f_lineno = 63;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisfinite, tmp_assign_source_21 );
    tmp_assign_source_22 = MAKE_FUNCTION_function_4_gisinf_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_22 );

        frame_module->f_lineno = 81;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_gisinf, tmp_assign_source_22 );
    tmp_assign_source_23 = MAKE_FUNCTION_function_5_rand_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_23 );

        frame_module->f_lineno = 99;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_rand, tmp_assign_source_23 );
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = 5;
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 112;
        goto frame_exception_exit_1;
    }

    tmp_slice_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_platform );
    if ( tmp_slice_source_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 112;
        goto frame_exception_exit_1;
    }
    tmp_compare_left_2 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    Py_DECREF( tmp_slice_source_1 );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 112;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_2 = const_str_plain_linux;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_compare_left_2 );

        frame_module->f_lineno = 112;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_2 );
    if (tmp_cmp_Eq_1 == 1)
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_defaults_2 = PyTuple_New( 2 );
    tmp_binop_left_1 = const_str_digest_9638e2f878cb7246bc12eec89e19ff05;
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_3 == NULL )
    {
        Py_DECREF( tmp_defaults_2 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6467 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 113;
        goto frame_exception_exit_1;
    }

    tmp_called_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_getpid );
    if ( tmp_called_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_defaults_2 );

        frame_module->f_lineno = 113;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 113;
    tmp_binop_right_1 = CALL_FUNCTION_NO_ARGS( tmp_called_1 );
    Py_DECREF( tmp_called_1 );
    if ( tmp_binop_right_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_defaults_2 );

        frame_module->f_lineno = 113;
        goto frame_exception_exit_1;
    }
    tmp_tuple_element_1 = BINARY_OPERATION_REMAINDER( tmp_binop_left_1, tmp_binop_right_1 );
    Py_DECREF( tmp_binop_right_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_defaults_2 );

        frame_module->f_lineno = 113;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_defaults_2, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = PyList_New( 0 );
    PyTuple_SET_ITEM( tmp_defaults_2, 1, tmp_tuple_element_1 );
    tmp_assign_source_24 = MAKE_FUNCTION_function_6_jiffies_of_module_numpy$testing$utils( tmp_defaults_2 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_24 );

        frame_module->f_lineno = 113;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_jiffies, tmp_assign_source_24 );
    tmp_defaults_3 = PyTuple_New( 1 );
    tmp_binop_left_2 = const_str_digest_9638e2f878cb7246bc12eec89e19ff05;
    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_4 == NULL )
    {
        Py_DECREF( tmp_defaults_3 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6467 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 128;
        goto frame_exception_exit_1;
    }

    tmp_called_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_getpid );
    if ( tmp_called_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_defaults_3 );

        frame_module->f_lineno = 128;
        goto frame_exception_exit_1;
    }
    frame_module->f_lineno = 128;
    tmp_binop_right_2 = CALL_FUNCTION_NO_ARGS( tmp_called_2 );
    Py_DECREF( tmp_called_2 );
    if ( tmp_binop_right_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_defaults_3 );

        frame_module->f_lineno = 128;
        goto frame_exception_exit_1;
    }
    tmp_tuple_element_2 = BINARY_OPERATION_REMAINDER( tmp_binop_left_2, tmp_binop_right_2 );
    Py_DECREF( tmp_binop_right_2 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_defaults_3 );

        frame_module->f_lineno = 128;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_defaults_3, 0, tmp_tuple_element_2 );
    tmp_assign_source_25 = MAKE_FUNCTION_function_7_memusage_of_module_numpy$testing$utils( tmp_defaults_3 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_25 );

        frame_module->f_lineno = 128;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_memusage, tmp_assign_source_25 );
    goto branch_end_2;
    branch_no_2:;
    tmp_defaults_4 = PyTuple_New( 1 );
    tmp_tuple_element_3 = PyList_New( 0 );
    PyTuple_SET_ITEM( tmp_defaults_4, 0, tmp_tuple_element_3 );
    tmp_assign_source_26 = MAKE_FUNCTION_function_8_jiffies_of_module_numpy$testing$utils( tmp_defaults_4 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_26 );

        frame_module->f_lineno = 142;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_jiffies, tmp_assign_source_26 );
    tmp_assign_source_27 = MAKE_FUNCTION_function_9_memusage_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_27 );

        frame_module->f_lineno = 149;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_memusage, tmp_assign_source_27 );
    branch_end_2:;
    // Tried code
    tmp_cond_value_1 = NULL;
    // Tried code
    tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_5 == NULL ))
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 6467 ], 24, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 153;
        goto try_finally_handler_2;
    }

    tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_name );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 153;
        goto try_finally_handler_2;
    }
    tmp_compexpr_right_1 = const_str_plain_nt;
    tmp_assign_source_28 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 153;
        goto try_finally_handler_2;
    }
    assert( tmp_and_1__value_1.object == NULL );
    tmp_and_1__value_1.object = tmp_assign_source_28;

    tmp_cond_value_2 = tmp_and_1__value_1.object;

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 153;
        goto try_finally_handler_2;
    }
    if (tmp_cond_truth_2 == 1)
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_cond_value_1 = NULL;
    // Tried code
    tmp_result = tmp_and_1__value_1.object != NULL;
    if ( tmp_result == true )
    {
        Py_DECREF( tmp_and_1__value_1.object );
        tmp_and_1__value_1.object = NULL;
    }

    assert( tmp_result != false );
    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = 3;
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 4756 ], 25, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 153;
        goto try_finally_handler_3;
    }

    tmp_slice_source_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_version );
    if ( tmp_slice_source_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 153;
        goto try_finally_handler_3;
    }
    tmp_compexpr_left_2 = LOOKUP_INDEX_SLICE( tmp_slice_source_2, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    Py_DECREF( tmp_slice_source_2 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 153;
        goto try_finally_handler_3;
    }
    tmp_compexpr_right_2 = const_str_digest_1a18da63cbbfb49cb9616e6bfd35f662;
    tmp_cond_value_1 = RICH_COMPARE_GT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 153;
        goto try_finally_handler_3;
    }
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_1 != NULL )
    {
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;

        goto try_finally_handler_2;
    }

    goto finally_end_1;
    finally_end_1:;
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_cond_value_1 = tmp_and_1__value_1.object;

    Py_INCREF( tmp_cond_value_1 );
    condexpr_end_1:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_2 != NULL )
    {
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;

        goto try_finally_handler_1;
    }

    goto finally_end_2;
    finally_end_2:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        frame_module->f_lineno = 153;
        goto try_finally_handler_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if (tmp_cond_truth_1 == 1)
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_defaults_5 = const_tuple_none_int_neg_1_none_none_tuple;
    tmp_assign_source_29 = MAKE_FUNCTION_function_10_GetPerformanceAttributes_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_5 ) );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_29 );

        frame_module->f_lineno = 155;
        goto try_finally_handler_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_GetPerformanceAttributes, tmp_assign_source_29 );
    tmp_defaults_6 = const_tuple_str_plain_python_int_0_tuple;
    tmp_assign_source_30 = MAKE_FUNCTION_function_11_memusage_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_6 ) );
    if ( tmp_assign_source_30 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_30 );

        frame_module->f_lineno = 180;
        goto try_finally_handler_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_memusage, tmp_assign_source_30 );
    branch_no_3:;
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_1 = frame_module->f_lineno;
    Py_XDECREF( tmp_and_1__value_1.object );
    tmp_and_1__value_1.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_1;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_3 != NULL )
    {
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;

        goto frame_exception_exit_1;
    }

    goto finally_end_3;
    finally_end_3:;
    tmp_defaults_7 = const_tuple_d15e90628f0c62410bc0a44f0792d58a_tuple;
    tmp_assign_source_31 = MAKE_FUNCTION_function_12_build_err_msg_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_7 ) );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_31 );

        frame_module->f_lineno = 187;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_build_err_msg, tmp_assign_source_31 );
    tmp_defaults_8 = const_tuple_str_empty_true_tuple;
    tmp_assign_source_32 = MAKE_FUNCTION_function_13_assert_equal_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_8 ) );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_32 );

        frame_module->f_lineno = 208;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_equal, tmp_assign_source_32 );
    tmp_assign_source_33 = MAKE_FUNCTION_function_14_print_assert_equal_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_33 );

        frame_module->f_lineno = 319;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_print_assert_equal, tmp_assign_source_33 );
    tmp_defaults_9 = const_tuple_int_pos_7_str_empty_true_tuple;
    tmp_assign_source_34 = MAKE_FUNCTION_function_15_assert_almost_equal_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_9 ) );
    if ( tmp_assign_source_34 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_34 );

        frame_module->f_lineno = 358;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_almost_equal, tmp_assign_source_34 );
    tmp_defaults_10 = const_tuple_int_pos_7_str_empty_true_tuple;
    tmp_assign_source_35 = MAKE_FUNCTION_function_16_assert_approx_equal_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_10 ) );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_35 );

        frame_module->f_lineno = 473;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_approx_equal, tmp_assign_source_35 );
    tmp_defaults_11 = const_tuple_str_empty_true_str_empty_tuple;
    tmp_assign_source_36 = MAKE_FUNCTION_function_17_assert_array_compare_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_11 ) );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_36 );

        frame_module->f_lineno = 568;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_array_compare, tmp_assign_source_36 );
    tmp_defaults_12 = const_tuple_str_empty_true_tuple;
    tmp_assign_source_37 = MAKE_FUNCTION_function_18_assert_array_equal_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_12 ) );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_37 );

        frame_module->f_lineno = 654;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_array_equal, tmp_assign_source_37 );
    tmp_defaults_13 = const_tuple_int_pos_6_str_empty_true_tuple;
    tmp_assign_source_38 = MAKE_FUNCTION_function_19_assert_array_almost_equal_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_13 ) );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_38 );

        frame_module->f_lineno = 720;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_array_almost_equal, tmp_assign_source_38 );
    tmp_defaults_14 = const_tuple_str_empty_true_tuple;
    tmp_assign_source_39 = MAKE_FUNCTION_function_20_assert_array_less_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_14 ) );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_39 );

        frame_module->f_lineno = 813;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_array_less, tmp_assign_source_39 );
    tmp_assign_source_40 = MAKE_FUNCTION_function_21_runstring_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_40 );

        frame_module->f_lineno = 882;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_runstring, tmp_assign_source_40 );
    tmp_assign_source_41 = MAKE_FUNCTION_function_22_assert_string_equal_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_41 );

        frame_module->f_lineno = 885;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_string_equal, tmp_assign_source_41 );
    tmp_defaults_15 = const_tuple_none_true_tuple;
    tmp_assign_source_42 = MAKE_FUNCTION_function_23_rundocs_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_15 ) );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_42 );

        frame_module->f_lineno = 953;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_rundocs, tmp_assign_source_42 );
    tmp_assign_source_43 = MAKE_FUNCTION_function_24_raises_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_43 );

        frame_module->f_lineno = 1003;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_raises, tmp_assign_source_43 );
    tmp_assign_source_44 = MAKE_FUNCTION_function_25_assert_raises_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_44 );

        frame_module->f_lineno = 1007;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_raises, tmp_assign_source_44 );
    tmp_defaults_16 = const_tuple_none_tuple;
    tmp_assign_source_45 = MAKE_FUNCTION_function_26_decorate_methods_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_16 ) );
    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_45 );

        frame_module->f_lineno = 1022;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_decorate_methods, tmp_assign_source_45 );
    tmp_defaults_17 = const_tuple_int_pos_1_none_tuple;
    tmp_assign_source_46 = MAKE_FUNCTION_function_27_measure_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_17 ) );
    if ( tmp_assign_source_46 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_46 );

        frame_module->f_lineno = 1069;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_measure, tmp_assign_source_46 );
    tmp_assign_source_47 = MAKE_FUNCTION_function_28__assert_valid_refcount_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_47 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_47 );

        frame_module->f_lineno = 1116;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain__assert_valid_refcount, tmp_assign_source_47 );
    tmp_defaults_18 = const_tuple_float_1e_minus_07_int_0_str_empty_true_tuple;
    tmp_assign_source_48 = MAKE_FUNCTION_function_29_assert_allclose_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_18 ) );
    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_48 );

        frame_module->f_lineno = 1134;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_allclose, tmp_assign_source_48 );
    tmp_defaults_19 = const_tuple_int_pos_1_tuple;
    tmp_assign_source_49 = MAKE_FUNCTION_function_30_assert_array_almost_equal_nulp_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_19 ) );
    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_49 );

        frame_module->f_lineno = 1185;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_array_almost_equal_nulp, tmp_assign_source_49 );
    tmp_defaults_20 = const_tuple_int_pos_1_none_tuple;
    tmp_assign_source_50 = MAKE_FUNCTION_function_31_assert_array_max_ulp_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_20 ) );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_50 );

        frame_module->f_lineno = 1247;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_array_max_ulp, tmp_assign_source_50 );
    tmp_defaults_21 = const_tuple_none_tuple;
    tmp_assign_source_51 = MAKE_FUNCTION_function_32_nulp_diff_of_module_numpy$testing$utils( INCREASE_REFCOUNT( tmp_defaults_21 ) );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_51 );

        frame_module->f_lineno = 1290;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_nulp_diff, tmp_assign_source_51 );
    tmp_assign_source_52 = MAKE_FUNCTION_function_33__integer_repr_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_52 );

        frame_module->f_lineno = 1341;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain__integer_repr, tmp_assign_source_52 );
    tmp_assign_source_53 = MAKE_FUNCTION_function_34_integer_repr_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_53 );

        frame_module->f_lineno = 1355;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_integer_repr, tmp_assign_source_53 );
    // Tried code
    tmp_assign_source_54 = PyTuple_New( 1 );
    tmp_tuple_element_4 = LOOKUP_BUILTIN( const_str_plain_object );
    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_54 );

        frame_module->f_lineno = 1368;
        goto try_finally_handler_4;
    }
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_assign_source_54, 0, tmp_tuple_element_4 );
    assert( tmp_class_creation_1__bases.object == NULL );
    tmp_class_creation_1__bases.object = tmp_assign_source_54;

    tmp_assign_source_55 = impl_class_35_WarningMessage_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1368;
        goto try_finally_handler_4;
    }
    assert( tmp_class_creation_1__class_dict.object == NULL );
    tmp_class_creation_1__class_dict.object = tmp_assign_source_55;

    tmp_compare_left_3 = const_str_plain___metaclass__;
    tmp_compare_right_3 = tmp_class_creation_1__class_dict.object;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    if ( tmp_cmp_In_1 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1368;
        goto try_finally_handler_4;
    }
    if (tmp_cmp_In_1 == 1)
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_dget_dict_1 = tmp_class_creation_1__class_dict.object;

    tmp_dget_key_1 = const_str_plain___metaclass__;
    tmp_assign_source_56 = DICT_GET_ITEM( tmp_dget_dict_1, tmp_dget_key_1 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1368;
        goto try_finally_handler_4;
    }
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_class_bases_1 = tmp_class_creation_1__bases.object;

    tmp_assign_source_56 = SELECT_METACLASS( tmp_class_bases_1, GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_2:;
    assert( tmp_class_creation_1__metaclass.object == NULL );
    tmp_class_creation_1__metaclass.object = tmp_assign_source_56;

    tmp_called_3 = tmp_class_creation_1__metaclass.object;

    tmp_call_arg_element_1 = const_str_plain_WarningMessage;
    tmp_call_arg_element_2 = tmp_class_creation_1__bases.object;

    tmp_call_arg_element_3 = tmp_class_creation_1__class_dict.object;

    frame_module->f_lineno = 1368;
    tmp_assign_source_57 = CALL_FUNCTION_WITH_ARGS3( tmp_called_3, tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3 );
    if ( tmp_assign_source_57 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1368;
        goto try_finally_handler_4;
    }
    assert( tmp_class_creation_1__class.object == NULL );
    tmp_class_creation_1__class.object = tmp_assign_source_57;

    tmp_assign_source_58 = tmp_class_creation_1__class.object;

    UPDATE_STRING_DICT0( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_WarningMessage, tmp_assign_source_58 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_2 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_1__class.object );
    tmp_class_creation_1__class.object = NULL;

    Py_XDECREF( tmp_class_creation_1__bases.object );
    tmp_class_creation_1__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_1__class_dict.object );
    tmp_class_creation_1__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass.object );
    tmp_class_creation_1__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_2;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_4 != NULL )
    {
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;

        goto frame_exception_exit_1;
    }

    goto finally_end_4;
    finally_end_4:;
    // Tried code
    tmp_assign_source_59 = PyTuple_New( 1 );
    tmp_tuple_element_5 = LOOKUP_BUILTIN( const_str_plain_object );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_59 );

        frame_module->f_lineno = 1400;
        goto try_finally_handler_5;
    }
    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_assign_source_59, 0, tmp_tuple_element_5 );
    assert( tmp_class_creation_2__bases.object == NULL );
    tmp_class_creation_2__bases.object = tmp_assign_source_59;

    tmp_assign_source_60 = impl_class_36_WarningManager_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_60 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1400;
        goto try_finally_handler_5;
    }
    assert( tmp_class_creation_2__class_dict.object == NULL );
    tmp_class_creation_2__class_dict.object = tmp_assign_source_60;

    tmp_compare_left_4 = const_str_plain___metaclass__;
    tmp_compare_right_4 = tmp_class_creation_2__class_dict.object;

    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    if ( tmp_cmp_In_2 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1400;
        goto try_finally_handler_5;
    }
    if (tmp_cmp_In_2 == 1)
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_dget_dict_2 = tmp_class_creation_2__class_dict.object;

    tmp_dget_key_2 = const_str_plain___metaclass__;
    tmp_assign_source_61 = DICT_GET_ITEM( tmp_dget_dict_2, tmp_dget_key_2 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1400;
        goto try_finally_handler_5;
    }
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_class_bases_2 = tmp_class_creation_2__bases.object;

    tmp_assign_source_61 = SELECT_METACLASS( tmp_class_bases_2, GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_3:;
    assert( tmp_class_creation_2__metaclass.object == NULL );
    tmp_class_creation_2__metaclass.object = tmp_assign_source_61;

    tmp_called_4 = tmp_class_creation_2__metaclass.object;

    tmp_call_arg_element_4 = const_str_plain_WarningManager;
    tmp_call_arg_element_5 = tmp_class_creation_2__bases.object;

    tmp_call_arg_element_6 = tmp_class_creation_2__class_dict.object;

    frame_module->f_lineno = 1400;
    tmp_assign_source_62 = CALL_FUNCTION_WITH_ARGS3( tmp_called_4, tmp_call_arg_element_4, tmp_call_arg_element_5, tmp_call_arg_element_6 );
    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1400;
        goto try_finally_handler_5;
    }
    assert( tmp_class_creation_2__class.object == NULL );
    tmp_class_creation_2__class.object = tmp_assign_source_62;

    tmp_assign_source_63 = tmp_class_creation_2__class.object;

    UPDATE_STRING_DICT0( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_WarningManager, tmp_assign_source_63 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_5:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_3 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_2__class.object );
    tmp_class_creation_2__class.object = NULL;

    Py_XDECREF( tmp_class_creation_2__bases.object );
    tmp_class_creation_2__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_2__class_dict.object );
    tmp_class_creation_2__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_2__metaclass.object );
    tmp_class_creation_2__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_3;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_5 != NULL )
    {
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;

        goto frame_exception_exit_1;
    }

    goto finally_end_5;
    finally_end_5:;
    tmp_assign_source_64 = MAKE_FUNCTION_function_37_assert_warns_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_64 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_64 );

        frame_module->f_lineno = 1455;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_warns, tmp_assign_source_64 );
    tmp_assign_source_65 = MAKE_FUNCTION_function_38_assert_no_warnings_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_65 );

        frame_module->f_lineno = 1493;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_assert_no_warnings, tmp_assign_source_65 );
    tmp_defaults_22 = PyTuple_New( 3 );
    tmp_tuple_element_6 = GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_float32 );

    if (unlikely( tmp_tuple_element_6 == NULL ))
    {
        tmp_tuple_element_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_float32 );
    }

    if ( tmp_tuple_element_6 == NULL )
    {
        Py_DECREF( tmp_defaults_22 );
        exception_type = INCREASE_REFCOUNT( PyExc_NameError );
        exception_value = UNSTREAM_STRING( &constant_bin[ 213507 ], 29, 0 );
        exception_tb = NULL;

        frame_module->f_lineno = 1522;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_defaults_22, 0, tmp_tuple_element_6 );
    tmp_tuple_element_6 = const_str_plain_binary;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_defaults_22, 1, tmp_tuple_element_6 );
    tmp_tuple_element_6 = const_int_pos_24;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_defaults_22, 2, tmp_tuple_element_6 );
    tmp_assign_source_66 = MAKE_FUNCTION_function_39__gen_alignment_data_of_module_numpy$testing$utils( tmp_defaults_22 );
    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );
        Py_DECREF( tmp_assign_source_66 );

        frame_module->f_lineno = 1522;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain__gen_alignment_data, tmp_assign_source_66 );
    // Tried code
    tmp_assign_source_67 = PyTuple_New( 1 );
    tmp_tuple_element_7 = PyExc_Exception;
    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_assign_source_67, 0, tmp_tuple_element_7 );
    assert( tmp_class_creation_3__bases.object == NULL );
    tmp_class_creation_3__bases.object = tmp_assign_source_67;

    tmp_assign_source_68 = impl_class_40_IgnoreException_of_module_numpy$testing$utils(  );
    if ( tmp_assign_source_68 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1588;
        goto try_finally_handler_6;
    }
    assert( tmp_class_creation_3__class_dict.object == NULL );
    tmp_class_creation_3__class_dict.object = tmp_assign_source_68;

    tmp_compare_left_5 = const_str_plain___metaclass__;
    tmp_compare_right_5 = tmp_class_creation_3__class_dict.object;

    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    if ( tmp_cmp_In_3 == -1 )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1588;
        goto try_finally_handler_6;
    }
    if (tmp_cmp_In_3 == 1)
    {
        goto condexpr_true_4;
    }
    else
    {
        goto condexpr_false_4;
    }
    condexpr_true_4:;
    tmp_dget_dict_3 = tmp_class_creation_3__class_dict.object;

    tmp_dget_key_3 = const_str_plain___metaclass__;
    tmp_assign_source_69 = DICT_GET_ITEM( tmp_dget_dict_3, tmp_dget_key_3 );
    if ( tmp_assign_source_69 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1588;
        goto try_finally_handler_6;
    }
    goto condexpr_end_4;
    condexpr_false_4:;
    tmp_class_bases_3 = tmp_class_creation_3__bases.object;

    tmp_assign_source_69 = SELECT_METACLASS( tmp_class_bases_3, GET_STRING_DICT_VALUE( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_4:;
    assert( tmp_class_creation_3__metaclass.object == NULL );
    tmp_class_creation_3__metaclass.object = tmp_assign_source_69;

    tmp_called_5 = tmp_class_creation_3__metaclass.object;

    tmp_call_arg_element_7 = const_str_plain_IgnoreException;
    tmp_call_arg_element_8 = tmp_class_creation_3__bases.object;

    tmp_call_arg_element_9 = tmp_class_creation_3__class_dict.object;

    frame_module->f_lineno = 1588;
    tmp_assign_source_70 = CALL_FUNCTION_WITH_ARGS3( tmp_called_5, tmp_call_arg_element_7, tmp_call_arg_element_8, tmp_call_arg_element_9 );
    if ( tmp_assign_source_70 == NULL )
    {
        assert( ERROR_OCCURED() );

        PyErr_Fetch( &exception_type, &exception_value, (PyObject **)&exception_tb );


        frame_module->f_lineno = 1588;
        goto try_finally_handler_6;
    }
    assert( tmp_class_creation_3__class.object == NULL );
    tmp_class_creation_3__class.object = tmp_assign_source_70;

    tmp_assign_source_71 = tmp_class_creation_3__class.object;

    UPDATE_STRING_DICT0( moduledict_numpy$testing$utils, (Nuitka_StringObject *)const_str_plain_IgnoreException, tmp_assign_source_71 );
    // Final block of try/finally
    // Tried block ends with no exception occured, note that.
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    try_finally_handler_6:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;

    tmp_tried_lineno_4 = frame_module->f_lineno;
    Py_XDECREF( tmp_class_creation_3__class.object );
    tmp_class_creation_3__class.object = NULL;

    Py_XDECREF( tmp_class_creation_3__bases.object );
    tmp_class_creation_3__bases.object = NULL;

    Py_XDECREF( tmp_class_creation_3__class_dict.object );
    tmp_class_creation_3__class_dict.object = NULL;

    Py_XDECREF( tmp_class_creation_3__metaclass.object );
    tmp_class_creation_3__metaclass.object = NULL;

    frame_module->f_lineno = tmp_tried_lineno_4;
    // Re-reraise as necessary after finally was executed.
    // Reraise exception if any.
    if ( exception_keeper_type_6 != NULL )
    {
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;

        goto frame_exception_exit_1;
    }

    goto finally_end_6;
    finally_end_6:;

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif
    popFrameStack();

    assertFrameObject( frame_module );
    Py_DECREF( frame_module );

    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_module ) );
    }
    else if ( exception_tb->tb_frame != frame_module )
    {
        PyTracebackObject *traceback_new = (PyTracebackObject *)MAKE_TRACEBACK( INCREASE_REFCOUNT( frame_module ) );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }

    // Put the previous frame back on top.
    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_module->f_executing -= 1;
#endif
    Py_DECREF( frame_module );

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_1:;

    return MOD_RETURN_VALUE( module_numpy$testing$utils );
module_exception_exit:
    PyErr_Restore( exception_type, exception_value, (PyObject *)exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
